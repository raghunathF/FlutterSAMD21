
FlutterSAMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000056e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  000056e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001140  200000bc  000057a0  000200bc  2**2
                  ALLOC
  3 .stack        00002004  200011fc  000068e0  000200bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004f31e  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000064ba  00000000  00000000  0006f45b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008854  00000000  00000000  00075915  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008a0  00000000  00000000  0007e169  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000970  00000000  00000000  0007ea09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000bb9e  00000000  00000000  0007f379  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017155  00000000  00000000  0008af17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e3c7  00000000  00000000  000a206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016a8  00000000  00000000  00130434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 32 00 20 4d 37 00 00 49 37 00 00 49 37 00 00     .2. M7..I7..I7..
	...
      2c:	49 37 00 00 00 00 00 00 00 00 00 00 49 37 00 00     I7..........I7..
      3c:	49 37 00 00 49 37 00 00 49 37 00 00 49 37 00 00     I7..I7..I7..I7..
      4c:	49 37 00 00 49 37 00 00 49 37 00 00 49 37 00 00     I7..I7..I7..I7..
      5c:	49 37 00 00 49 37 00 00 65 21 00 00 75 21 00 00     I7..I7..e!..u!..
      6c:	85 21 00 00 95 21 00 00 a5 21 00 00 b5 21 00 00     .!...!...!...!..
      7c:	05 0a 00 00 15 0a 00 00 25 0a 00 00 cd 0a 00 00     ........%.......
      8c:	dd 0a 00 00 ed 0a 00 00 fd 0a 00 00 0d 0b 00 00     ................
      9c:	c1 1c 00 00 49 37 00 00 49 37 00 00 49 37 00 00     ....I7..I7..I7..
      ac:	49 37 00 00 00 00 00 00                             I7......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000bc 	.word	0x200000bc
      d4:	00000000 	.word	0x00000000
      d8:	000056e4 	.word	0x000056e4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c0 	.word	0x200000c0
     108:	000056e4 	.word	0x000056e4
     10c:	000056e4 	.word	0x000056e4
     110:	00000000 	.word	0x00000000

00000114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     116:	2207      	movs	r2, #7
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     11e:	4770      	bx	lr

00000120 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     120:	b5f0      	push	{r4, r5, r6, r7, lr}
     122:	46d6      	mov	lr, sl
     124:	464f      	mov	r7, r9
     126:	4646      	mov	r6, r8
     128:	b5c0      	push	{r6, r7, lr}
     12a:	b08a      	sub	sp, #40	; 0x28
     12c:	0006      	movs	r6, r0
     12e:	000f      	movs	r7, r1
     130:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     132:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     134:	0008      	movs	r0, r1
     136:	4ba0      	ldr	r3, [pc, #640]	; (3b8 <i2c_master_init+0x298>)
     138:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     13a:	4aa0      	ldr	r2, [pc, #640]	; (3bc <i2c_master_init+0x29c>)
     13c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     13e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     140:	2301      	movs	r3, #1
     142:	40ab      	lsls	r3, r5
     144:	430b      	orrs	r3, r1
     146:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     148:	a909      	add	r1, sp, #36	; 0x24
     14a:	7b23      	ldrb	r3, [r4, #12]
     14c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     14e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     150:	b2c5      	uxtb	r5, r0
     152:	0028      	movs	r0, r5
     154:	4b9a      	ldr	r3, [pc, #616]	; (3c0 <i2c_master_init+0x2a0>)
     156:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     158:	0028      	movs	r0, r5
     15a:	4b9a      	ldr	r3, [pc, #616]	; (3c4 <i2c_master_init+0x2a4>)
     15c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     15e:	7b20      	ldrb	r0, [r4, #12]
     160:	2100      	movs	r1, #0
     162:	4b99      	ldr	r3, [pc, #612]	; (3c8 <i2c_master_init+0x2a8>)
     164:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     166:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     168:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     16a:	079b      	lsls	r3, r3, #30
     16c:	d505      	bpl.n	17a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     16e:	b00a      	add	sp, #40	; 0x28
     170:	bc1c      	pop	{r2, r3, r4}
     172:	4690      	mov	r8, r2
     174:	4699      	mov	r9, r3
     176:	46a2      	mov	sl, r4
     178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     17c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d4f5      	bmi.n	16e <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     182:	6830      	ldr	r0, [r6, #0]
     184:	4b8c      	ldr	r3, [pc, #560]	; (3b8 <i2c_master_init+0x298>)
     186:	4699      	mov	r9, r3
     188:	4798      	blx	r3
     18a:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     18c:	498f      	ldr	r1, [pc, #572]	; (3cc <i2c_master_init+0x2ac>)
     18e:	4b90      	ldr	r3, [pc, #576]	; (3d0 <i2c_master_init+0x2b0>)
     190:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     192:	00ad      	lsls	r5, r5, #2
     194:	4b8f      	ldr	r3, [pc, #572]	; (3d4 <i2c_master_init+0x2b4>)
     196:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     198:	2300      	movs	r3, #0
     19a:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     19c:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     19e:	2500      	movs	r5, #0
     1a0:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     1a2:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     1a4:	2225      	movs	r2, #37	; 0x25
     1a6:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     1a8:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     1aa:	3314      	adds	r3, #20
     1ac:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ae:	6833      	ldr	r3, [r6, #0]
     1b0:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     1b2:	0018      	movs	r0, r3
     1b4:	47c8      	blx	r9
     1b6:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1b8:	2380      	movs	r3, #128	; 0x80
     1ba:	aa08      	add	r2, sp, #32
     1bc:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1be:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1c0:	2301      	movs	r3, #1
     1c2:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     1c4:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1c6:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     1c8:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     1ca:	2800      	cmp	r0, #0
     1cc:	d100      	bne.n	1d0 <i2c_master_init+0xb0>
     1ce:	e0af      	b.n	330 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1d0:	ab08      	add	r3, sp, #32
     1d2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1d4:	2302      	movs	r3, #2
     1d6:	aa08      	add	r2, sp, #32
     1d8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     1da:	0c00      	lsrs	r0, r0, #16
     1dc:	b2c0      	uxtb	r0, r0
     1de:	0011      	movs	r1, r2
     1e0:	4b7d      	ldr	r3, [pc, #500]	; (3d8 <i2c_master_init+0x2b8>)
     1e2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     1e4:	2f00      	cmp	r7, #0
     1e6:	d100      	bne.n	1ea <i2c_master_init+0xca>
     1e8:	e0a7      	b.n	33a <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     1ea:	ab08      	add	r3, sp, #32
     1ec:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1ee:	2302      	movs	r3, #2
     1f0:	aa08      	add	r2, sp, #32
     1f2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     1f4:	0c3f      	lsrs	r7, r7, #16
     1f6:	b2f8      	uxtb	r0, r7
     1f8:	0011      	movs	r1, r2
     1fa:	4b77      	ldr	r3, [pc, #476]	; (3d8 <i2c_master_init+0x2b8>)
     1fc:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     1fe:	8aa3      	ldrh	r3, [r4, #20]
     200:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     202:	8ae3      	ldrh	r3, [r4, #22]
     204:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     206:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     208:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     20a:	2b00      	cmp	r3, #0
     20c:	d104      	bne.n	218 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     20e:	4b73      	ldr	r3, [pc, #460]	; (3dc <i2c_master_init+0x2bc>)
     210:	789b      	ldrb	r3, [r3, #2]
     212:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     214:	0fdb      	lsrs	r3, r3, #31
     216:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     218:	68a1      	ldr	r1, [r4, #8]
     21a:	6923      	ldr	r3, [r4, #16]
     21c:	430b      	orrs	r3, r1
     21e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     220:	2224      	movs	r2, #36	; 0x24
     222:	5ca2      	ldrb	r2, [r4, r2]
     224:	2a00      	cmp	r2, #0
     226:	d002      	beq.n	22e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     228:	2280      	movs	r2, #128	; 0x80
     22a:	05d2      	lsls	r2, r2, #23
     22c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     22e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     230:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     232:	222c      	movs	r2, #44	; 0x2c
     234:	5ca2      	ldrb	r2, [r4, r2]
     236:	2a00      	cmp	r2, #0
     238:	d103      	bne.n	242 <i2c_master_init+0x122>
     23a:	2280      	movs	r2, #128	; 0x80
     23c:	0492      	lsls	r2, r2, #18
     23e:	4291      	cmp	r1, r2
     240:	d102      	bne.n	248 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     242:	2280      	movs	r2, #128	; 0x80
     244:	0512      	lsls	r2, r2, #20
     246:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     248:	222d      	movs	r2, #45	; 0x2d
     24a:	5ca2      	ldrb	r2, [r4, r2]
     24c:	2a00      	cmp	r2, #0
     24e:	d002      	beq.n	256 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     250:	2280      	movs	r2, #128	; 0x80
     252:	0412      	lsls	r2, r2, #16
     254:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     256:	222e      	movs	r2, #46	; 0x2e
     258:	5ca2      	ldrb	r2, [r4, r2]
     25a:	2a00      	cmp	r2, #0
     25c:	d002      	beq.n	264 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     25e:	2280      	movs	r2, #128	; 0x80
     260:	03d2      	lsls	r2, r2, #15
     262:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     264:	4642      	mov	r2, r8
     266:	6812      	ldr	r2, [r2, #0]
     268:	4313      	orrs	r3, r2
     26a:	4642      	mov	r2, r8
     26c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     26e:	2380      	movs	r3, #128	; 0x80
     270:	005b      	lsls	r3, r3, #1
     272:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     274:	4648      	mov	r0, r9
     276:	3014      	adds	r0, #20
     278:	b2c0      	uxtb	r0, r0
     27a:	4b59      	ldr	r3, [pc, #356]	; (3e0 <i2c_master_init+0x2c0>)
     27c:	4798      	blx	r3
     27e:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     280:	23fa      	movs	r3, #250	; 0xfa
     282:	009b      	lsls	r3, r3, #2
     284:	6822      	ldr	r2, [r4, #0]
     286:	435a      	muls	r2, r3
     288:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     28a:	6863      	ldr	r3, [r4, #4]
     28c:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     28e:	4d55      	ldr	r5, [pc, #340]	; (3e4 <i2c_master_init+0x2c4>)
     290:	47a8      	blx	r5
     292:	9000      	str	r0, [sp, #0]
     294:	9101      	str	r1, [sp, #4]
     296:	464b      	mov	r3, r9
     298:	0058      	lsls	r0, r3, #1
     29a:	47a8      	blx	r5
     29c:	9002      	str	r0, [sp, #8]
     29e:	9103      	str	r1, [sp, #12]
     2a0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     2a2:	47a8      	blx	r5
     2a4:	9004      	str	r0, [sp, #16]
     2a6:	9105      	str	r1, [sp, #20]
     2a8:	4f4f      	ldr	r7, [pc, #316]	; (3e8 <i2c_master_init+0x2c8>)
     2aa:	4a50      	ldr	r2, [pc, #320]	; (3ec <i2c_master_init+0x2cc>)
     2ac:	4b50      	ldr	r3, [pc, #320]	; (3f0 <i2c_master_init+0x2d0>)
     2ae:	9800      	ldr	r0, [sp, #0]
     2b0:	9901      	ldr	r1, [sp, #4]
     2b2:	47b8      	blx	r7
     2b4:	0002      	movs	r2, r0
     2b6:	000b      	movs	r3, r1
     2b8:	9804      	ldr	r0, [sp, #16]
     2ba:	9905      	ldr	r1, [sp, #20]
     2bc:	47b8      	blx	r7
     2be:	4e4d      	ldr	r6, [pc, #308]	; (3f4 <i2c_master_init+0x2d4>)
     2c0:	2200      	movs	r2, #0
     2c2:	4b4d      	ldr	r3, [pc, #308]	; (3f8 <i2c_master_init+0x2d8>)
     2c4:	47b0      	blx	r6
     2c6:	9004      	str	r0, [sp, #16]
     2c8:	9105      	str	r1, [sp, #20]
     2ca:	4648      	mov	r0, r9
     2cc:	47a8      	blx	r5
     2ce:	0002      	movs	r2, r0
     2d0:	000b      	movs	r3, r1
     2d2:	9804      	ldr	r0, [sp, #16]
     2d4:	9905      	ldr	r1, [sp, #20]
     2d6:	47b8      	blx	r7
     2d8:	0002      	movs	r2, r0
     2da:	000b      	movs	r3, r1
     2dc:	4d47      	ldr	r5, [pc, #284]	; (3fc <i2c_master_init+0x2dc>)
     2de:	9800      	ldr	r0, [sp, #0]
     2e0:	9901      	ldr	r1, [sp, #4]
     2e2:	47a8      	blx	r5
     2e4:	9a02      	ldr	r2, [sp, #8]
     2e6:	9b03      	ldr	r3, [sp, #12]
     2e8:	47b0      	blx	r6
     2ea:	2200      	movs	r2, #0
     2ec:	4b44      	ldr	r3, [pc, #272]	; (400 <i2c_master_init+0x2e0>)
     2ee:	47a8      	blx	r5
     2f0:	9a02      	ldr	r2, [sp, #8]
     2f2:	9b03      	ldr	r3, [sp, #12]
     2f4:	4d43      	ldr	r5, [pc, #268]	; (404 <i2c_master_init+0x2e4>)
     2f6:	47a8      	blx	r5
     2f8:	4b43      	ldr	r3, [pc, #268]	; (408 <i2c_master_init+0x2e8>)
     2fa:	4798      	blx	r3
     2fc:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     2fe:	2380      	movs	r3, #128	; 0x80
     300:	049b      	lsls	r3, r3, #18
     302:	68a2      	ldr	r2, [r4, #8]
     304:	429a      	cmp	r2, r3
     306:	d01e      	beq.n	346 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     308:	0003      	movs	r3, r0
     30a:	2040      	movs	r0, #64	; 0x40
     30c:	2dff      	cmp	r5, #255	; 0xff
     30e:	d900      	bls.n	312 <i2c_master_init+0x1f2>
     310:	e72d      	b.n	16e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     312:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     314:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     316:	25ff      	movs	r5, #255	; 0xff
     318:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     31a:	0624      	lsls	r4, r4, #24
     31c:	4325      	orrs	r5, r4
     31e:	0400      	lsls	r0, r0, #16
     320:	23ff      	movs	r3, #255	; 0xff
     322:	041b      	lsls	r3, r3, #16
     324:	4018      	ands	r0, r3
     326:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     328:	4643      	mov	r3, r8
     32a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     32c:	2000      	movs	r0, #0
     32e:	e71e      	b.n	16e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     330:	2100      	movs	r1, #0
     332:	4640      	mov	r0, r8
     334:	4b35      	ldr	r3, [pc, #212]	; (40c <i2c_master_init+0x2ec>)
     336:	4798      	blx	r3
     338:	e74a      	b.n	1d0 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     33a:	2101      	movs	r1, #1
     33c:	4640      	mov	r0, r8
     33e:	4b33      	ldr	r3, [pc, #204]	; (40c <i2c_master_init+0x2ec>)
     340:	4798      	blx	r3
     342:	0007      	movs	r7, r0
     344:	e751      	b.n	1ea <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     346:	26fa      	movs	r6, #250	; 0xfa
     348:	00b6      	lsls	r6, r6, #2
     34a:	4653      	mov	r3, sl
     34c:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     34e:	9800      	ldr	r0, [sp, #0]
     350:	9901      	ldr	r1, [sp, #4]
     352:	0002      	movs	r2, r0
     354:	000b      	movs	r3, r1
     356:	4c27      	ldr	r4, [pc, #156]	; (3f4 <i2c_master_init+0x2d4>)
     358:	47a0      	blx	r4
     35a:	9000      	str	r0, [sp, #0]
     35c:	9101      	str	r1, [sp, #4]
     35e:	0030      	movs	r0, r6
     360:	4b20      	ldr	r3, [pc, #128]	; (3e4 <i2c_master_init+0x2c4>)
     362:	4798      	blx	r3
     364:	2200      	movs	r2, #0
     366:	4b2a      	ldr	r3, [pc, #168]	; (410 <i2c_master_init+0x2f0>)
     368:	47b8      	blx	r7
     36a:	0002      	movs	r2, r0
     36c:	000b      	movs	r3, r1
     36e:	9800      	ldr	r0, [sp, #0]
     370:	9901      	ldr	r1, [sp, #4]
     372:	4c24      	ldr	r4, [pc, #144]	; (404 <i2c_master_init+0x2e4>)
     374:	47a0      	blx	r4
     376:	2200      	movs	r2, #0
     378:	4b21      	ldr	r3, [pc, #132]	; (400 <i2c_master_init+0x2e0>)
     37a:	4c20      	ldr	r4, [pc, #128]	; (3fc <i2c_master_init+0x2dc>)
     37c:	47a0      	blx	r4
     37e:	4b22      	ldr	r3, [pc, #136]	; (408 <i2c_master_init+0x2e8>)
     380:	4798      	blx	r3
     382:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     384:	d00c      	beq.n	3a0 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     386:	0031      	movs	r1, r6
     388:	9807      	ldr	r0, [sp, #28]
     38a:	4b22      	ldr	r3, [pc, #136]	; (414 <i2c_master_init+0x2f4>)
     38c:	4798      	blx	r3
     38e:	3802      	subs	r0, #2
     390:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     392:	002b      	movs	r3, r5
     394:	2dff      	cmp	r5, #255	; 0xff
     396:	d80c      	bhi.n	3b2 <i2c_master_init+0x292>
     398:	28ff      	cmp	r0, #255	; 0xff
     39a:	d9bc      	bls.n	316 <i2c_master_init+0x1f6>
     39c:	2040      	movs	r0, #64	; 0x40
     39e:	e6e6      	b.n	16e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     3a0:	0071      	lsls	r1, r6, #1
     3a2:	1e48      	subs	r0, r1, #1
     3a4:	9b07      	ldr	r3, [sp, #28]
     3a6:	469c      	mov	ip, r3
     3a8:	4460      	add	r0, ip
     3aa:	4b1a      	ldr	r3, [pc, #104]	; (414 <i2c_master_init+0x2f4>)
     3ac:	4798      	blx	r3
     3ae:	3801      	subs	r0, #1
     3b0:	e7ef      	b.n	392 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3b2:	2040      	movs	r0, #64	; 0x40
     3b4:	e6db      	b.n	16e <i2c_master_init+0x4e>
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	000020bd 	.word	0x000020bd
     3bc:	40000400 	.word	0x40000400
     3c0:	000035f1 	.word	0x000035f1
     3c4:	00003565 	.word	0x00003565
     3c8:	00001ef9 	.word	0x00001ef9
     3cc:	000007cd 	.word	0x000007cd
     3d0:	000020f9 	.word	0x000020f9
     3d4:	20000f3c 	.word	0x20000f3c
     3d8:	000036e9 	.word	0x000036e9
     3dc:	41002000 	.word	0x41002000
     3e0:	0000360d 	.word	0x0000360d
     3e4:	0000524d 	.word	0x0000524d
     3e8:	000046b9 	.word	0x000046b9
     3ec:	e826d695 	.word	0xe826d695
     3f0:	3e112e0b 	.word	0x3e112e0b
     3f4:	00003a31 	.word	0x00003a31
     3f8:	40240000 	.word	0x40240000
     3fc:	00004bb9 	.word	0x00004bb9
     400:	3ff00000 	.word	0x3ff00000
     404:	00004051 	.word	0x00004051
     408:	000051e5 	.word	0x000051e5
     40c:	00001f45 	.word	0x00001f45
     410:	40080000 	.word	0x40080000
     414:	000038c5 	.word	0x000038c5

00000418 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     418:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     41a:	7e1a      	ldrb	r2, [r3, #24]
     41c:	0792      	lsls	r2, r2, #30
     41e:	d507      	bpl.n	430 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     420:	2202      	movs	r2, #2
     422:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     424:	8b5b      	ldrh	r3, [r3, #26]
     426:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     428:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     42a:	17db      	asrs	r3, r3, #31
     42c:	4018      	ands	r0, r3
}
     42e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     430:	8b5a      	ldrh	r2, [r3, #26]
     432:	0752      	lsls	r2, r2, #29
     434:	d506      	bpl.n	444 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     436:	6859      	ldr	r1, [r3, #4]
     438:	22c0      	movs	r2, #192	; 0xc0
     43a:	0292      	lsls	r2, r2, #10
     43c:	430a      	orrs	r2, r1
     43e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     440:	2018      	movs	r0, #24
     442:	e7f4      	b.n	42e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     444:	2000      	movs	r0, #0
     446:	e7f2      	b.n	42e <_i2c_master_address_response+0x16>

00000448 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     448:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     44a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     44c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     44e:	2401      	movs	r4, #1
     450:	2502      	movs	r5, #2
     452:	7e11      	ldrb	r1, [r2, #24]
     454:	4221      	tst	r1, r4
     456:	d10b      	bne.n	470 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     458:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     45a:	4229      	tst	r1, r5
     45c:	d106      	bne.n	46c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     45e:	3301      	adds	r3, #1
     460:	b29b      	uxth	r3, r3
     462:	8901      	ldrh	r1, [r0, #8]
     464:	4299      	cmp	r1, r3
     466:	d8f4      	bhi.n	452 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     468:	2012      	movs	r0, #18
     46a:	e002      	b.n	472 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     46c:	2000      	movs	r0, #0
     46e:	e000      	b.n	472 <_i2c_master_wait_for_bus+0x2a>
     470:	2000      	movs	r0, #0
}
     472:	bd30      	pop	{r4, r5, pc}

00000474 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     474:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     476:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     478:	6862      	ldr	r2, [r4, #4]
     47a:	2380      	movs	r3, #128	; 0x80
     47c:	02db      	lsls	r3, r3, #11
     47e:	4313      	orrs	r3, r2
     480:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     482:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     484:	4b02      	ldr	r3, [pc, #8]	; (490 <_i2c_master_send_hs_master_code+0x1c>)
     486:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     488:	2301      	movs	r3, #1
     48a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     48c:	bd10      	pop	{r4, pc}
     48e:	46c0      	nop			; (mov r8, r8)
     490:	00000449 	.word	0x00000449

00000494 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     494:	b5f0      	push	{r4, r5, r6, r7, lr}
     496:	46de      	mov	lr, fp
     498:	4657      	mov	r7, sl
     49a:	464e      	mov	r6, r9
     49c:	4645      	mov	r5, r8
     49e:	b5e0      	push	{r5, r6, r7, lr}
     4a0:	b083      	sub	sp, #12
     4a2:	0006      	movs	r6, r0
     4a4:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4a6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     4a8:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     4aa:	682b      	ldr	r3, [r5, #0]
     4ac:	011b      	lsls	r3, r3, #4
     4ae:	0fdb      	lsrs	r3, r3, #31
     4b0:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     4b2:	7a4b      	ldrb	r3, [r1, #9]
     4b4:	2b00      	cmp	r3, #0
     4b6:	d12b      	bne.n	510 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     4b8:	686b      	ldr	r3, [r5, #4]
     4ba:	4a58      	ldr	r2, [pc, #352]	; (61c <_i2c_master_read_packet+0x188>)
     4bc:	4013      	ands	r3, r2
     4be:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     4c0:	464b      	mov	r3, r9
     4c2:	7a1b      	ldrb	r3, [r3, #8]
     4c4:	2b00      	cmp	r3, #0
     4c6:	d127      	bne.n	518 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4c8:	464b      	mov	r3, r9
     4ca:	881b      	ldrh	r3, [r3, #0]
     4cc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     4ce:	464a      	mov	r2, r9
     4d0:	7a52      	ldrb	r2, [r2, #9]
     4d2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4d4:	4313      	orrs	r3, r2
     4d6:	2201      	movs	r2, #1
     4d8:	4313      	orrs	r3, r2
     4da:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4dc:	0030      	movs	r0, r6
     4de:	4b50      	ldr	r3, [pc, #320]	; (620 <_i2c_master_read_packet+0x18c>)
     4e0:	4798      	blx	r3
     4e2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     4e4:	4653      	mov	r3, sl
     4e6:	2b00      	cmp	r3, #0
     4e8:	d003      	beq.n	4f2 <_i2c_master_read_packet+0x5e>
     4ea:	464b      	mov	r3, r9
     4ec:	885b      	ldrh	r3, [r3, #2]
     4ee:	2b01      	cmp	r3, #1
     4f0:	d03b      	beq.n	56a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     4f2:	686b      	ldr	r3, [r5, #4]
     4f4:	4a49      	ldr	r2, [pc, #292]	; (61c <_i2c_master_read_packet+0x188>)
     4f6:	4013      	ands	r3, r2
     4f8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     4fa:	9b01      	ldr	r3, [sp, #4]
     4fc:	2b00      	cmp	r3, #0
     4fe:	d03a      	beq.n	576 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     500:	9801      	ldr	r0, [sp, #4]
     502:	b003      	add	sp, #12
     504:	bc3c      	pop	{r2, r3, r4, r5}
     506:	4690      	mov	r8, r2
     508:	4699      	mov	r9, r3
     50a:	46a2      	mov	sl, r4
     50c:	46ab      	mov	fp, r5
     50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     510:	7a89      	ldrb	r1, [r1, #10]
     512:	4b44      	ldr	r3, [pc, #272]	; (624 <_i2c_master_read_packet+0x190>)
     514:	4798      	blx	r3
     516:	e7cf      	b.n	4b8 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     518:	464b      	mov	r3, r9
     51a:	881b      	ldrh	r3, [r3, #0]
     51c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     51e:	464a      	mov	r2, r9
     520:	7a52      	ldrb	r2, [r2, #9]
     522:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     524:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     526:	2280      	movs	r2, #128	; 0x80
     528:	0212      	lsls	r2, r2, #8
     52a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     52c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     52e:	0030      	movs	r0, r6
     530:	4b3b      	ldr	r3, [pc, #236]	; (620 <_i2c_master_read_packet+0x18c>)
     532:	4798      	blx	r3
     534:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     536:	686b      	ldr	r3, [r5, #4]
     538:	4a38      	ldr	r2, [pc, #224]	; (61c <_i2c_master_read_packet+0x188>)
     53a:	4013      	ands	r3, r2
     53c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     53e:	2800      	cmp	r0, #0
     540:	d1de      	bne.n	500 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     542:	0030      	movs	r0, r6
     544:	4b38      	ldr	r3, [pc, #224]	; (628 <_i2c_master_read_packet+0x194>)
     546:	4798      	blx	r3
     548:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     54a:	2800      	cmp	r0, #0
     54c:	d1d8      	bne.n	500 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     54e:	464b      	mov	r3, r9
     550:	881b      	ldrh	r3, [r3, #0]
     552:	0a1b      	lsrs	r3, r3, #8
     554:	2278      	movs	r2, #120	; 0x78
     556:	4313      	orrs	r3, r2
     558:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     55a:	464a      	mov	r2, r9
     55c:	7a52      	ldrb	r2, [r2, #9]
     55e:	0392      	lsls	r2, r2, #14
     560:	2101      	movs	r1, #1
     562:	430a      	orrs	r2, r1
     564:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     566:	626b      	str	r3, [r5, #36]	; 0x24
     568:	e7b8      	b.n	4dc <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     56a:	686a      	ldr	r2, [r5, #4]
     56c:	2380      	movs	r3, #128	; 0x80
     56e:	02db      	lsls	r3, r3, #11
     570:	4313      	orrs	r3, r2
     572:	606b      	str	r3, [r5, #4]
     574:	e7c1      	b.n	4fa <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     576:	0030      	movs	r0, r6
     578:	4b2b      	ldr	r3, [pc, #172]	; (628 <_i2c_master_read_packet+0x194>)
     57a:	4798      	blx	r3
     57c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     57e:	2800      	cmp	r0, #0
     580:	d1be      	bne.n	500 <_i2c_master_read_packet+0x6c>
     582:	3c01      	subs	r4, #1
     584:	b2a4      	uxth	r4, r4
     586:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     588:	4b28      	ldr	r3, [pc, #160]	; (62c <_i2c_master_read_packet+0x198>)
     58a:	469b      	mov	fp, r3
     58c:	e015      	b.n	5ba <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     58e:	2c01      	cmp	r4, #1
     590:	d020      	beq.n	5d4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     592:	0030      	movs	r0, r6
     594:	4b26      	ldr	r3, [pc, #152]	; (630 <_i2c_master_read_packet+0x19c>)
     596:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     598:	4643      	mov	r3, r8
     59a:	1c5f      	adds	r7, r3, #1
     59c:	b2bf      	uxth	r7, r7
     59e:	2328      	movs	r3, #40	; 0x28
     5a0:	5ceb      	ldrb	r3, [r5, r3]
     5a2:	464a      	mov	r2, r9
     5a4:	6852      	ldr	r2, [r2, #4]
     5a6:	4641      	mov	r1, r8
     5a8:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     5aa:	0030      	movs	r0, r6
     5ac:	4b1c      	ldr	r3, [pc, #112]	; (620 <_i2c_master_read_packet+0x18c>)
     5ae:	4798      	blx	r3
     5b0:	3c01      	subs	r4, #1
     5b2:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     5b4:	2800      	cmp	r0, #0
     5b6:	d115      	bne.n	5e4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     5b8:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     5ba:	455c      	cmp	r4, fp
     5bc:	d014      	beq.n	5e8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     5be:	8b6b      	ldrh	r3, [r5, #26]
     5c0:	069b      	lsls	r3, r3, #26
     5c2:	d527      	bpl.n	614 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     5c4:	7af3      	ldrb	r3, [r6, #11]
     5c6:	2b00      	cmp	r3, #0
     5c8:	d0e3      	beq.n	592 <_i2c_master_read_packet+0xfe>
     5ca:	4653      	mov	r3, sl
     5cc:	2b00      	cmp	r3, #0
     5ce:	d1de      	bne.n	58e <_i2c_master_read_packet+0xfa>
     5d0:	2c00      	cmp	r4, #0
     5d2:	d1de      	bne.n	592 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5d4:	686a      	ldr	r2, [r5, #4]
     5d6:	2380      	movs	r3, #128	; 0x80
     5d8:	02db      	lsls	r3, r3, #11
     5da:	4313      	orrs	r3, r2
     5dc:	606b      	str	r3, [r5, #4]
     5de:	3c01      	subs	r4, #1
     5e0:	b2a4      	uxth	r4, r4
     5e2:	e7ea      	b.n	5ba <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     5e4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     5e6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     5e8:	7ab3      	ldrb	r3, [r6, #10]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d109      	bne.n	602 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     5ee:	0030      	movs	r0, r6
     5f0:	4b0f      	ldr	r3, [pc, #60]	; (630 <_i2c_master_read_packet+0x19c>)
     5f2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     5f4:	2328      	movs	r3, #40	; 0x28
     5f6:	5cea      	ldrb	r2, [r5, r3]
     5f8:	464b      	mov	r3, r9
     5fa:	685b      	ldr	r3, [r3, #4]
     5fc:	4641      	mov	r1, r8
     5fe:	545a      	strb	r2, [r3, r1]
     600:	e77e      	b.n	500 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     602:	0030      	movs	r0, r6
     604:	4b0a      	ldr	r3, [pc, #40]	; (630 <_i2c_master_read_packet+0x19c>)
     606:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     608:	686a      	ldr	r2, [r5, #4]
     60a:	23c0      	movs	r3, #192	; 0xc0
     60c:	029b      	lsls	r3, r3, #10
     60e:	4313      	orrs	r3, r2
     610:	606b      	str	r3, [r5, #4]
     612:	e7ec      	b.n	5ee <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     614:	2341      	movs	r3, #65	; 0x41
     616:	9301      	str	r3, [sp, #4]
     618:	e772      	b.n	500 <_i2c_master_read_packet+0x6c>
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	fffbffff 	.word	0xfffbffff
     620:	00000449 	.word	0x00000449
     624:	00000475 	.word	0x00000475
     628:	00000419 	.word	0x00000419
     62c:	0000ffff 	.word	0x0000ffff
     630:	00000115 	.word	0x00000115

00000634 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     634:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
     636:	8b83      	ldrh	r3, [r0, #28]
     638:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     63a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     63c:	2b00      	cmp	r3, #0
     63e:	d001      	beq.n	644 <i2c_master_read_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_read_packet(module, packet);
}
     640:	0010      	movs	r0, r2
     642:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     644:	3301      	adds	r3, #1
     646:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     648:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     64a:	4b02      	ldr	r3, [pc, #8]	; (654 <i2c_master_read_packet_wait+0x20>)
     64c:	4798      	blx	r3
     64e:	0002      	movs	r2, r0
     650:	e7f6      	b.n	640 <i2c_master_read_packet_wait+0xc>
     652:	46c0      	nop			; (mov r8, r8)
     654:	00000495 	.word	0x00000495

00000658 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     658:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     65a:	2207      	movs	r2, #7
     65c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     65e:	421a      	tst	r2, r3
     660:	d1fc      	bne.n	65c <_i2c_master_wait_for_sync+0x4>
}
     662:	4770      	bx	lr

00000664 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     664:	b570      	push	{r4, r5, r6, lr}
     666:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     668:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     66a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     66c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     66e:	8b83      	ldrh	r3, [r0, #28]
     670:	1aed      	subs	r5, r5, r3
     672:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     674:	8b83      	ldrh	r3, [r0, #28]
     676:	3b01      	subs	r3, #1
     678:	b29b      	uxth	r3, r3
     67a:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     67c:	0113      	lsls	r3, r2, #4
     67e:	d51d      	bpl.n	6bc <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     680:	7ac3      	ldrb	r3, [r0, #11]
     682:	2b00      	cmp	r3, #0
     684:	d003      	beq.n	68e <_i2c_master_read+0x2a>
     686:	8b83      	ldrh	r3, [r0, #28]
     688:	b29b      	uxth	r3, r3
     68a:	2b01      	cmp	r3, #1
     68c:	d010      	beq.n	6b0 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     68e:	8ba3      	ldrh	r3, [r4, #28]
     690:	b29b      	uxth	r3, r3
     692:	2b00      	cmp	r3, #0
     694:	d102      	bne.n	69c <_i2c_master_read+0x38>
		if (module->send_stop) {
     696:	7aa3      	ldrb	r3, [r4, #10]
     698:	2b00      	cmp	r3, #0
     69a:	d11c      	bne.n	6d6 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     69c:	0020      	movs	r0, r4
     69e:	4b12      	ldr	r3, [pc, #72]	; (6e8 <_i2c_master_read+0x84>)
     6a0:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     6a2:	6a23      	ldr	r3, [r4, #32]
     6a4:	195d      	adds	r5, r3, r5
     6a6:	2328      	movs	r3, #40	; 0x28
     6a8:	5cf3      	ldrb	r3, [r6, r3]
     6aa:	b2db      	uxtb	r3, r3
     6ac:	702b      	strb	r3, [r5, #0]
}
     6ae:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6b0:	6872      	ldr	r2, [r6, #4]
     6b2:	2380      	movs	r3, #128	; 0x80
     6b4:	02db      	lsls	r3, r3, #11
     6b6:	4313      	orrs	r3, r2
     6b8:	6073      	str	r3, [r6, #4]
     6ba:	e7e8      	b.n	68e <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     6bc:	7ac3      	ldrb	r3, [r0, #11]
     6be:	2b00      	cmp	r3, #0
     6c0:	d0e5      	beq.n	68e <_i2c_master_read+0x2a>
     6c2:	8b83      	ldrh	r3, [r0, #28]
     6c4:	b29b      	uxth	r3, r3
     6c6:	2b00      	cmp	r3, #0
     6c8:	d1e1      	bne.n	68e <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6ca:	6872      	ldr	r2, [r6, #4]
     6cc:	2380      	movs	r3, #128	; 0x80
     6ce:	02db      	lsls	r3, r3, #11
     6d0:	4313      	orrs	r3, r2
     6d2:	6073      	str	r3, [r6, #4]
     6d4:	e7db      	b.n	68e <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     6d6:	0020      	movs	r0, r4
     6d8:	4b03      	ldr	r3, [pc, #12]	; (6e8 <_i2c_master_read+0x84>)
     6da:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6dc:	6872      	ldr	r2, [r6, #4]
     6de:	23c0      	movs	r3, #192	; 0xc0
     6e0:	029b      	lsls	r3, r3, #10
     6e2:	4313      	orrs	r3, r2
     6e4:	6073      	str	r3, [r6, #4]
     6e6:	e7d9      	b.n	69c <_i2c_master_read+0x38>
     6e8:	00000659 	.word	0x00000659

000006ec <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     6ec:	b570      	push	{r4, r5, r6, lr}
     6ee:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6f0:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     6f2:	8b6b      	ldrh	r3, [r5, #26]
     6f4:	075b      	lsls	r3, r3, #29
     6f6:	d503      	bpl.n	700 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     6f8:	221e      	movs	r2, #30
     6fa:	2325      	movs	r3, #37	; 0x25
     6fc:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     6fe:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     700:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     702:	8b83      	ldrh	r3, [r0, #28]
     704:	1af6      	subs	r6, r6, r3
     706:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     708:	8b83      	ldrh	r3, [r0, #28]
     70a:	3b01      	subs	r3, #1
     70c:	b29b      	uxth	r3, r3
     70e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     710:	4b04      	ldr	r3, [pc, #16]	; (724 <_i2c_master_write+0x38>)
     712:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     714:	6a23      	ldr	r3, [r4, #32]
     716:	199e      	adds	r6, r3, r6
     718:	7833      	ldrb	r3, [r6, #0]
     71a:	b2db      	uxtb	r3, r3
     71c:	2228      	movs	r2, #40	; 0x28
     71e:	54ab      	strb	r3, [r5, r2]
     720:	e7ed      	b.n	6fe <_i2c_master_write+0x12>
     722:	46c0      	nop			; (mov r8, r8)
     724:	00000659 	.word	0x00000659

00000728 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     728:	b570      	push	{r4, r5, r6, lr}
     72a:	0005      	movs	r5, r0
     72c:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     72e:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     730:	7a4b      	ldrb	r3, [r1, #9]
     732:	2b00      	cmp	r3, #0
     734:	d11a      	bne.n	76c <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     736:	6873      	ldr	r3, [r6, #4]
     738:	4a13      	ldr	r2, [pc, #76]	; (788 <_i2c_master_write_packet+0x60>)
     73a:	4013      	ands	r3, r2
     73c:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     73e:	6863      	ldr	r3, [r4, #4]
     740:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     742:	8863      	ldrh	r3, [r4, #2]
     744:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     746:	2200      	movs	r2, #0
     748:	2324      	movs	r3, #36	; 0x24
     74a:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     74c:	3205      	adds	r2, #5
     74e:	3301      	adds	r3, #1
     750:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     752:	3b22      	subs	r3, #34	; 0x22
     754:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     756:	7a23      	ldrb	r3, [r4, #8]
     758:	2b00      	cmp	r3, #0
     75a:	d10b      	bne.n	774 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     75c:	8823      	ldrh	r3, [r4, #0]
     75e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     760:	7a62      	ldrb	r2, [r4, #9]
     762:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     764:	4313      	orrs	r3, r2
     766:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     768:	2000      	movs	r0, #0
     76a:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     76c:	7a89      	ldrb	r1, [r1, #10]
     76e:	4b07      	ldr	r3, [pc, #28]	; (78c <_i2c_master_write_packet+0x64>)
     770:	4798      	blx	r3
     772:	e7e0      	b.n	736 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     774:	8823      	ldrh	r3, [r4, #0]
     776:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     778:	7a62      	ldrb	r2, [r4, #9]
     77a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     77c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     77e:	2280      	movs	r2, #128	; 0x80
     780:	0212      	lsls	r2, r2, #8
     782:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     784:	6273      	str	r3, [r6, #36]	; 0x24
     786:	e7ef      	b.n	768 <_i2c_master_write_packet+0x40>
     788:	fffbffff 	.word	0xfffbffff
     78c:	00000475 	.word	0x00000475

00000790 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     790:	1c93      	adds	r3, r2, #2
     792:	009b      	lsls	r3, r3, #2
     794:	18c3      	adds	r3, r0, r3
     796:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     798:	7e03      	ldrb	r3, [r0, #24]
     79a:	2101      	movs	r1, #1
     79c:	4091      	lsls	r1, r2
     79e:	430b      	orrs	r3, r1
     7a0:	b2db      	uxtb	r3, r3
     7a2:	7603      	strb	r3, [r0, #24]
}
     7a4:	4770      	bx	lr
	...

000007a8 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7a8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     7aa:	8b83      	ldrh	r3, [r0, #28]
     7ac:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     7ae:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     7b0:	2b00      	cmp	r3, #0
     7b2:	d001      	beq.n	7b8 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     7b4:	0010      	movs	r0, r2
     7b6:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     7b8:	3301      	adds	r3, #1
     7ba:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7bc:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     7be:	4b02      	ldr	r3, [pc, #8]	; (7c8 <i2c_master_write_packet_job+0x20>)
     7c0:	4798      	blx	r3
     7c2:	0002      	movs	r2, r0
     7c4:	e7f6      	b.n	7b4 <i2c_master_write_packet_job+0xc>
     7c6:	46c0      	nop			; (mov r8, r8)
     7c8:	00000729 	.word	0x00000729

000007cc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     7cc:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     7ce:	0080      	lsls	r0, r0, #2
     7d0:	4b75      	ldr	r3, [pc, #468]	; (9a8 <_i2c_master_interrupt_handler+0x1dc>)
     7d2:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7d4:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7d6:	682b      	ldr	r3, [r5, #0]
     7d8:	011b      	lsls	r3, r3, #4
     7da:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     7dc:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     7de:	7e26      	ldrb	r6, [r4, #24]
     7e0:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     7e2:	8b63      	ldrh	r3, [r4, #26]
     7e4:	b29b      	uxth	r3, r3
     7e6:	2b00      	cmp	r3, #0
     7e8:	d103      	bne.n	7f2 <_i2c_master_interrupt_handler+0x26>
     7ea:	8ba3      	ldrh	r3, [r4, #28]
     7ec:	b29b      	uxth	r3, r3
     7ee:	2b00      	cmp	r3, #0
     7f0:	d123      	bne.n	83a <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0)     && (module->buffer_remaining <= 0) &&
     7f2:	8b63      	ldrh	r3, [r4, #26]
     7f4:	b29b      	uxth	r3, r3
     7f6:	2b00      	cmp	r3, #0
     7f8:	d008      	beq.n	80c <_i2c_master_interrupt_handler+0x40>
     7fa:	8ba3      	ldrh	r3, [r4, #28]
     7fc:	b29b      	uxth	r3, r3
     7fe:	2b00      	cmp	r3, #0
     800:	d104      	bne.n	80c <_i2c_master_interrupt_handler+0x40>
			   (module->status == STATUS_BUSY) && (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     802:	3325      	adds	r3, #37	; 0x25
     804:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0)     && (module->buffer_remaining <= 0) &&
     806:	2b05      	cmp	r3, #5
     808:	d100      	bne.n	80c <_i2c_master_interrupt_handler+0x40>
     80a:	e06d      	b.n	8e8 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     80c:	8b63      	ldrh	r3, [r4, #26]
     80e:	b29b      	uxth	r3, r3
     810:	2b00      	cmp	r3, #0
     812:	d024      	beq.n	85e <_i2c_master_interrupt_handler+0x92>
     814:	8ba3      	ldrh	r3, [r4, #28]
     816:	b29b      	uxth	r3, r3
     818:	2b00      	cmp	r3, #0
     81a:	d020      	beq.n	85e <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     81c:	8b6b      	ldrh	r3, [r5, #26]
     81e:	069b      	lsls	r3, r3, #26
     820:	d500      	bpl.n	824 <_i2c_master_interrupt_handler+0x58>
     822:	e081      	b.n	928 <_i2c_master_interrupt_handler+0x15c>
     824:	2a00      	cmp	r2, #0
     826:	d004      	beq.n	832 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     828:	8ba3      	ldrh	r3, [r4, #28]
     82a:	b29b      	uxth	r3, r3
     82c:	2b01      	cmp	r3, #1
     82e:	d100      	bne.n	832 <_i2c_master_interrupt_handler+0x66>
     830:	e07a      	b.n	928 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     832:	2241      	movs	r2, #65	; 0x41
     834:	2325      	movs	r3, #37	; 0x25
     836:	54e2      	strb	r2, [r4, r3]
     838:	e011      	b.n	85e <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     83a:	7e2b      	ldrb	r3, [r5, #24]
     83c:	07db      	lsls	r3, r3, #31
     83e:	d507      	bpl.n	850 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     840:	2301      	movs	r3, #1
     842:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     844:	8b6b      	ldrh	r3, [r5, #26]
     846:	079b      	lsls	r3, r3, #30
     848:	d52e      	bpl.n	8a8 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     84a:	2241      	movs	r2, #65	; 0x41
     84c:	2325      	movs	r3, #37	; 0x25
     84e:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     850:	8ba3      	ldrh	r3, [r4, #28]
     852:	b29b      	uxth	r3, r3
     854:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     856:	2325      	movs	r3, #37	; 0x25
     858:	5ce3      	ldrb	r3, [r4, r3]
     85a:	2b05      	cmp	r3, #5
     85c:	d038      	beq.n	8d0 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     85e:	8b63      	ldrh	r3, [r4, #26]
     860:	b29b      	uxth	r3, r3
     862:	2b00      	cmp	r3, #0
     864:	d007      	beq.n	876 <_i2c_master_interrupt_handler+0xaa>
     866:	8ba3      	ldrh	r3, [r4, #28]
     868:	b29b      	uxth	r3, r3
     86a:	2b00      	cmp	r3, #0
     86c:	d103      	bne.n	876 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     86e:	3325      	adds	r3, #37	; 0x25
     870:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     872:	2b05      	cmp	r3, #5
     874:	d064      	beq.n	940 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     876:	2325      	movs	r3, #37	; 0x25
     878:	5ce3      	ldrb	r3, [r4, r3]
     87a:	2b05      	cmp	r3, #5
     87c:	d013      	beq.n	8a6 <_i2c_master_interrupt_handler+0xda>
     87e:	2325      	movs	r3, #37	; 0x25
     880:	5ce3      	ldrb	r3, [r4, r3]
     882:	2b00      	cmp	r3, #0
     884:	d00f      	beq.n	8a6 <_i2c_master_interrupt_handler+0xda>
		
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
     886:	2303      	movs	r3, #3
     888:	752b      	strb	r3, [r5, #20]

		module->buffer_length = 0;
     88a:	2300      	movs	r3, #0
     88c:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     88e:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     890:	3325      	adds	r3, #37	; 0x25
     892:	5ce3      	ldrb	r3, [r4, r3]
     894:	2b41      	cmp	r3, #65	; 0x41
     896:	d003      	beq.n	8a0 <_i2c_master_interrupt_handler+0xd4>
     898:	7aa3      	ldrb	r3, [r4, #10]
     89a:	2b00      	cmp	r3, #0
     89c:	d000      	beq.n	8a0 <_i2c_master_interrupt_handler+0xd4>
     89e:	e075      	b.n	98c <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     8a0:	0773      	lsls	r3, r6, #29
     8a2:	d500      	bpl.n	8a6 <_i2c_master_interrupt_handler+0xda>
     8a4:	e07b      	b.n	99e <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     8a6:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     8a8:	8b6b      	ldrh	r3, [r5, #26]
     8aa:	075b      	lsls	r3, r3, #29
     8ac:	d5d0      	bpl.n	850 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     8ae:	2218      	movs	r2, #24
     8b0:	2325      	movs	r3, #37	; 0x25
     8b2:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     8b4:	2300      	movs	r3, #0
     8b6:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     8b8:	7aa3      	ldrb	r3, [r4, #10]
     8ba:	2b00      	cmp	r3, #0
     8bc:	d0c8      	beq.n	850 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     8be:	0020      	movs	r0, r4
     8c0:	4b3a      	ldr	r3, [pc, #232]	; (9ac <_i2c_master_interrupt_handler+0x1e0>)
     8c2:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8c4:	686a      	ldr	r2, [r5, #4]
     8c6:	23c0      	movs	r3, #192	; 0xc0
     8c8:	029b      	lsls	r3, r3, #10
     8ca:	4313      	orrs	r3, r2
     8cc:	606b      	str	r3, [r5, #4]
     8ce:	e7bf      	b.n	850 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     8d0:	331f      	adds	r3, #31
     8d2:	5ce3      	ldrb	r3, [r4, r3]
     8d4:	2b00      	cmp	r3, #0
     8d6:	d003      	beq.n	8e0 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     8d8:	0020      	movs	r0, r4
     8da:	4b35      	ldr	r3, [pc, #212]	; (9b0 <_i2c_master_interrupt_handler+0x1e4>)
     8dc:	4798      	blx	r3
     8de:	e7be      	b.n	85e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     8e0:	0020      	movs	r0, r4
     8e2:	4b34      	ldr	r3, [pc, #208]	; (9b4 <_i2c_master_interrupt_handler+0x1e8>)
     8e4:	4798      	blx	r3
     8e6:	e7ba      	b.n	85e <_i2c_master_interrupt_handler+0x92>
			   (module->status == STATUS_BUSY) && (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     8e8:	331f      	adds	r3, #31
     8ea:	5ce3      	ldrb	r3, [r4, r3]
     8ec:	2b00      	cmp	r3, #0
     8ee:	d000      	beq.n	8f2 <_i2c_master_interrupt_handler+0x126>
     8f0:	e78c      	b.n	80c <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg	=	SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
     8f2:	3303      	adds	r3, #3
     8f4:	752b      	strb	r3, [r5, #20]
		module->buffer_length		=	0;
     8f6:	2300      	movs	r3, #0
     8f8:	8363      	strh	r3, [r4, #26]
		module->status				=	STATUS_OK;
     8fa:	3325      	adds	r3, #37	; 0x25
     8fc:	2200      	movs	r2, #0
     8fe:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     900:	7aa3      	ldrb	r3, [r4, #10]
     902:	2b00      	cmp	r3, #0
     904:	d107      	bne.n	916 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     906:	2301      	movs	r3, #1
     908:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     90a:	07f3      	lsls	r3, r6, #31
     90c:	d5a7      	bpl.n	85e <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     90e:	68e3      	ldr	r3, [r4, #12]
     910:	0020      	movs	r0, r4
     912:	4798      	blx	r3
     914:	e7a3      	b.n	85e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     916:	0020      	movs	r0, r4
     918:	4b24      	ldr	r3, [pc, #144]	; (9ac <_i2c_master_interrupt_handler+0x1e0>)
     91a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     91c:	686a      	ldr	r2, [r5, #4]
     91e:	23c0      	movs	r3, #192	; 0xc0
     920:	029b      	lsls	r3, r3, #10
     922:	4313      	orrs	r3, r2
     924:	606b      	str	r3, [r5, #4]
     926:	e7f0      	b.n	90a <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     928:	2324      	movs	r3, #36	; 0x24
     92a:	5ce3      	ldrb	r3, [r4, r3]
     92c:	2b00      	cmp	r3, #0
     92e:	d103      	bne.n	938 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     930:	0020      	movs	r0, r4
     932:	4b20      	ldr	r3, [pc, #128]	; (9b4 <_i2c_master_interrupt_handler+0x1e8>)
     934:	4798      	blx	r3
     936:	e792      	b.n	85e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     938:	0020      	movs	r0, r4
     93a:	4b1d      	ldr	r3, [pc, #116]	; (9b0 <_i2c_master_interrupt_handler+0x1e4>)
     93c:	4798      	blx	r3
     93e:	e78e      	b.n	85e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     940:	331f      	adds	r3, #31
     942:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     944:	2b01      	cmp	r3, #1
     946:	d196      	bne.n	876 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     948:	7e2b      	ldrb	r3, [r5, #24]
     94a:	079b      	lsls	r3, r3, #30
     94c:	d501      	bpl.n	952 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     94e:	2302      	movs	r3, #2
     950:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     952:	2303      	movs	r3, #3
     954:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     956:	2300      	movs	r3, #0
     958:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     95a:	3325      	adds	r3, #37	; 0x25
     95c:	2200      	movs	r2, #0
     95e:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     960:	07b3      	lsls	r3, r6, #30
     962:	d503      	bpl.n	96c <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     964:	2324      	movs	r3, #36	; 0x24
     966:	5ce3      	ldrb	r3, [r4, r3]
     968:	2b01      	cmp	r3, #1
     96a:	d00b      	beq.n	984 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     96c:	07f3      	lsls	r3, r6, #31
     96e:	d400      	bmi.n	972 <_i2c_master_interrupt_handler+0x1a6>
     970:	e781      	b.n	876 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     972:	2324      	movs	r3, #36	; 0x24
     974:	5ce3      	ldrb	r3, [r4, r3]
     976:	2b00      	cmp	r3, #0
     978:	d000      	beq.n	97c <_i2c_master_interrupt_handler+0x1b0>
     97a:	e77c      	b.n	876 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     97c:	68e3      	ldr	r3, [r4, #12]
     97e:	0020      	movs	r0, r4
     980:	4798      	blx	r3
     982:	e778      	b.n	876 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     984:	6923      	ldr	r3, [r4, #16]
     986:	0020      	movs	r0, r4
     988:	4798      	blx	r3
     98a:	e774      	b.n	876 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     98c:	0020      	movs	r0, r4
     98e:	4b07      	ldr	r3, [pc, #28]	; (9ac <_i2c_master_interrupt_handler+0x1e0>)
     990:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     992:	686a      	ldr	r2, [r5, #4]
     994:	23e0      	movs	r3, #224	; 0xe0
     996:	02db      	lsls	r3, r3, #11
     998:	4313      	orrs	r3, r2
     99a:	606b      	str	r3, [r5, #4]
     99c:	e780      	b.n	8a0 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     99e:	6963      	ldr	r3, [r4, #20]
     9a0:	0020      	movs	r0, r4
     9a2:	4798      	blx	r3
}
     9a4:	e77f      	b.n	8a6 <_i2c_master_interrupt_handler+0xda>
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	20000f3c 	.word	0x20000f3c
     9ac:	00000659 	.word	0x00000659
     9b0:	00000665 	.word	0x00000665
     9b4:	000006ed 	.word	0x000006ed

000009b8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ba:	46c6      	mov	lr, r8
     9bc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     9be:	0080      	lsls	r0, r0, #2
     9c0:	4b0e      	ldr	r3, [pc, #56]	; (9fc <_tcc_interrupt_handler+0x44>)
     9c2:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     9c4:	683b      	ldr	r3, [r7, #0]
     9c6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     9ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     9cc:	4013      	ands	r3, r2
     9ce:	401e      	ands	r6, r3
     9d0:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     9d2:	4b0b      	ldr	r3, [pc, #44]	; (a00 <_tcc_interrupt_handler+0x48>)
     9d4:	4698      	mov	r8, r3
     9d6:	e002      	b.n	9de <_tcc_interrupt_handler+0x26>
     9d8:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     9da:	2c30      	cmp	r4, #48	; 0x30
     9dc:	d00a      	beq.n	9f4 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     9de:	4643      	mov	r3, r8
     9e0:	58e5      	ldr	r5, [r4, r3]
     9e2:	4235      	tst	r5, r6
     9e4:	d0f8      	beq.n	9d8 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     9e6:	193b      	adds	r3, r7, r4
     9e8:	685b      	ldr	r3, [r3, #4]
     9ea:	0038      	movs	r0, r7
     9ec:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     9ee:	683b      	ldr	r3, [r7, #0]
     9f0:	62dd      	str	r5, [r3, #44]	; 0x2c
     9f2:	e7f1      	b.n	9d8 <_tcc_interrupt_handler+0x20>
		}
	}
}
     9f4:	bc04      	pop	{r2}
     9f6:	4690      	mov	r8, r2
     9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	20000df8 	.word	0x20000df8
     a00:	0000544c 	.word	0x0000544c

00000a04 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     a04:	b510      	push	{r4, lr}
     a06:	2000      	movs	r0, #0
     a08:	4b01      	ldr	r3, [pc, #4]	; (a10 <TCC0_Handler+0xc>)
     a0a:	4798      	blx	r3
     a0c:	bd10      	pop	{r4, pc}
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	000009b9 	.word	0x000009b9

00000a14 <TCC1_Handler>:
     a14:	b510      	push	{r4, lr}
     a16:	2001      	movs	r0, #1
     a18:	4b01      	ldr	r3, [pc, #4]	; (a20 <TCC1_Handler+0xc>)
     a1a:	4798      	blx	r3
     a1c:	bd10      	pop	{r4, pc}
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	000009b9 	.word	0x000009b9

00000a24 <TCC2_Handler>:
     a24:	b510      	push	{r4, lr}
     a26:	2002      	movs	r0, #2
     a28:	4b01      	ldr	r3, [pc, #4]	; (a30 <TCC2_Handler+0xc>)
     a2a:	4798      	blx	r3
     a2c:	bd10      	pop	{r4, pc}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	000009b9 	.word	0x000009b9

00000a34 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     a34:	1c93      	adds	r3, r2, #2
     a36:	009b      	lsls	r3, r3, #2
     a38:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     a3a:	2a02      	cmp	r2, #2
     a3c:	d009      	beq.n	a52 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     a3e:	2a03      	cmp	r2, #3
     a40:	d00c      	beq.n	a5c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     a42:	2301      	movs	r3, #1
     a44:	4093      	lsls	r3, r2
     a46:	001a      	movs	r2, r3
     a48:	7e03      	ldrb	r3, [r0, #24]
     a4a:	4313      	orrs	r3, r2
     a4c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     a4e:	2000      	movs	r0, #0
     a50:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     a52:	7e03      	ldrb	r3, [r0, #24]
     a54:	2210      	movs	r2, #16
     a56:	4313      	orrs	r3, r2
     a58:	7603      	strb	r3, [r0, #24]
     a5a:	e7f8      	b.n	a4e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     a5c:	7e03      	ldrb	r3, [r0, #24]
     a5e:	2220      	movs	r2, #32
     a60:	4313      	orrs	r3, r2
     a62:	7603      	strb	r3, [r0, #24]
     a64:	e7f3      	b.n	a4e <tc_register_callback+0x1a>
	...

00000a68 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     a68:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     a6a:	0080      	lsls	r0, r0, #2
     a6c:	4b16      	ldr	r3, [pc, #88]	; (ac8 <_tc_interrupt_handler+0x60>)
     a6e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     a70:	6823      	ldr	r3, [r4, #0]
     a72:	7b9d      	ldrb	r5, [r3, #14]
     a74:	7e22      	ldrb	r2, [r4, #24]
     a76:	7e63      	ldrb	r3, [r4, #25]
     a78:	4013      	ands	r3, r2
     a7a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     a7c:	07eb      	lsls	r3, r5, #31
     a7e:	d406      	bmi.n	a8e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     a80:	07ab      	lsls	r3, r5, #30
     a82:	d40b      	bmi.n	a9c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     a84:	06eb      	lsls	r3, r5, #27
     a86:	d410      	bmi.n	aaa <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     a88:	06ab      	lsls	r3, r5, #26
     a8a:	d415      	bmi.n	ab8 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     a8c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     a8e:	0020      	movs	r0, r4
     a90:	68a3      	ldr	r3, [r4, #8]
     a92:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     a94:	2301      	movs	r3, #1
     a96:	6822      	ldr	r2, [r4, #0]
     a98:	7393      	strb	r3, [r2, #14]
     a9a:	e7f1      	b.n	a80 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     a9c:	0020      	movs	r0, r4
     a9e:	68e3      	ldr	r3, [r4, #12]
     aa0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     aa2:	2302      	movs	r3, #2
     aa4:	6822      	ldr	r2, [r4, #0]
     aa6:	7393      	strb	r3, [r2, #14]
     aa8:	e7ec      	b.n	a84 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     aaa:	0020      	movs	r0, r4
     aac:	6923      	ldr	r3, [r4, #16]
     aae:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     ab0:	2310      	movs	r3, #16
     ab2:	6822      	ldr	r2, [r4, #0]
     ab4:	7393      	strb	r3, [r2, #14]
     ab6:	e7e7      	b.n	a88 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     ab8:	0020      	movs	r0, r4
     aba:	6963      	ldr	r3, [r4, #20]
     abc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     abe:	6823      	ldr	r3, [r4, #0]
     ac0:	2220      	movs	r2, #32
     ac2:	739a      	strb	r2, [r3, #14]
}
     ac4:	e7e2      	b.n	a8c <_tc_interrupt_handler+0x24>
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	20000e04 	.word	0x20000e04

00000acc <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     acc:	b510      	push	{r4, lr}
     ace:	2000      	movs	r0, #0
     ad0:	4b01      	ldr	r3, [pc, #4]	; (ad8 <TC3_Handler+0xc>)
     ad2:	4798      	blx	r3
     ad4:	bd10      	pop	{r4, pc}
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	00000a69 	.word	0x00000a69

00000adc <TC4_Handler>:
     adc:	b510      	push	{r4, lr}
     ade:	2001      	movs	r0, #1
     ae0:	4b01      	ldr	r3, [pc, #4]	; (ae8 <TC4_Handler+0xc>)
     ae2:	4798      	blx	r3
     ae4:	bd10      	pop	{r4, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00000a69 	.word	0x00000a69

00000aec <TC5_Handler>:
     aec:	b510      	push	{r4, lr}
     aee:	2002      	movs	r0, #2
     af0:	4b01      	ldr	r3, [pc, #4]	; (af8 <TC5_Handler+0xc>)
     af2:	4798      	blx	r3
     af4:	bd10      	pop	{r4, pc}
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	00000a69 	.word	0x00000a69

00000afc <TC6_Handler>:
     afc:	b510      	push	{r4, lr}
     afe:	2003      	movs	r0, #3
     b00:	4b01      	ldr	r3, [pc, #4]	; (b08 <TC6_Handler+0xc>)
     b02:	4798      	blx	r3
     b04:	bd10      	pop	{r4, pc}
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	00000a69 	.word	0x00000a69

00000b0c <TC7_Handler>:
     b0c:	b510      	push	{r4, lr}
     b0e:	2004      	movs	r0, #4
     b10:	4b01      	ldr	r3, [pc, #4]	; (b18 <TC7_Handler+0xc>)
     b12:	4798      	blx	r3
     b14:	bd10      	pop	{r4, pc}
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	00000a69 	.word	0x00000a69

00000b1c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     b1c:	b530      	push	{r4, r5, lr}
     b1e:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     b20:	a901      	add	r1, sp, #4
     b22:	4b0c      	ldr	r3, [pc, #48]	; (b54 <_tc_get_inst_index+0x38>)
     b24:	000a      	movs	r2, r1
     b26:	cb32      	ldmia	r3!, {r1, r4, r5}
     b28:	c232      	stmia	r2!, {r1, r4, r5}
     b2a:	cb12      	ldmia	r3!, {r1, r4}
     b2c:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     b2e:	9b01      	ldr	r3, [sp, #4]
     b30:	4298      	cmp	r0, r3
     b32:	d00b      	beq.n	b4c <_tc_get_inst_index+0x30>
     b34:	2301      	movs	r3, #1
     b36:	a901      	add	r1, sp, #4
     b38:	009a      	lsls	r2, r3, #2
     b3a:	5852      	ldr	r2, [r2, r1]
     b3c:	4282      	cmp	r2, r0
     b3e:	d006      	beq.n	b4e <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     b40:	3301      	adds	r3, #1
     b42:	2b05      	cmp	r3, #5
     b44:	d1f8      	bne.n	b38 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     b46:	2000      	movs	r0, #0
}
     b48:	b007      	add	sp, #28
     b4a:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     b4c:	2300      	movs	r3, #0
			return i;
     b4e:	b2d8      	uxtb	r0, r3
     b50:	e7fa      	b.n	b48 <_tc_get_inst_index+0x2c>
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	0000547c 	.word	0x0000547c

00000b58 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     b58:	b5f0      	push	{r4, r5, r6, r7, lr}
     b5a:	b089      	sub	sp, #36	; 0x24
     b5c:	0004      	movs	r4, r0
     b5e:	000d      	movs	r5, r1
     b60:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     b62:	0008      	movs	r0, r1
     b64:	4b84      	ldr	r3, [pc, #528]	; (d78 <tc_init+0x220>)
     b66:	4798      	blx	r3
     b68:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     b6a:	ab06      	add	r3, sp, #24
     b6c:	221b      	movs	r2, #27
     b6e:	701a      	strb	r2, [r3, #0]
     b70:	3201      	adds	r2, #1
     b72:	705a      	strb	r2, [r3, #1]
     b74:	709a      	strb	r2, [r3, #2]
     b76:	3201      	adds	r2, #1
     b78:	70da      	strb	r2, [r3, #3]
     b7a:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     b7c:	3a13      	subs	r2, #19
     b7e:	497f      	ldr	r1, [pc, #508]	; (d7c <tc_init+0x224>)
     b80:	3114      	adds	r1, #20
     b82:	a803      	add	r0, sp, #12
     b84:	4b7e      	ldr	r3, [pc, #504]	; (d80 <tc_init+0x228>)
     b86:	4798      	blx	r3
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     b88:	2300      	movs	r3, #0
     b8a:	60a3      	str	r3, [r4, #8]
     b8c:	60e3      	str	r3, [r4, #12]
     b8e:	6123      	str	r3, [r4, #16]
     b90:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     b92:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     b94:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     b96:	00ba      	lsls	r2, r7, #2
     b98:	4b7a      	ldr	r3, [pc, #488]	; (d84 <tc_init+0x22c>)
     b9a:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     b9c:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     b9e:	78b3      	ldrb	r3, [r6, #2]
     ba0:	2b08      	cmp	r3, #8
     ba2:	d006      	beq.n	bb2 <tc_init+0x5a>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     ba4:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     ba6:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     ba8:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     baa:	07db      	lsls	r3, r3, #31
     bac:	d505      	bpl.n	bba <tc_init+0x62>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     bae:	b009      	add	sp, #36	; 0x24
     bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     bb2:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     bb4:	07fa      	lsls	r2, r7, #31
     bb6:	d5fa      	bpl.n	bae <tc_init+0x56>
     bb8:	e7f4      	b.n	ba4 <tc_init+0x4c>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     bba:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     bbc:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     bbe:	06db      	lsls	r3, r3, #27
     bc0:	d4f5      	bmi.n	bae <tc_init+0x56>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     bc2:	882b      	ldrh	r3, [r5, #0]
     bc4:	079b      	lsls	r3, r3, #30
     bc6:	d4f2      	bmi.n	bae <tc_init+0x56>
	if (config->pwm_channel[0].enabled) {
     bc8:	7c33      	ldrb	r3, [r6, #16]
     bca:	2b00      	cmp	r3, #0
     bcc:	d179      	bne.n	cc2 <tc_init+0x16a>
	if (config->pwm_channel[1].enabled) {
     bce:	7f33      	ldrb	r3, [r6, #28]
     bd0:	2b00      	cmp	r3, #0
     bd2:	d000      	beq.n	bd6 <tc_init+0x7e>
     bd4:	e081      	b.n	cda <tc_init+0x182>
     bd6:	496c      	ldr	r1, [pc, #432]	; (d88 <tc_init+0x230>)
     bd8:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     bda:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     bdc:	ab03      	add	r3, sp, #12
     bde:	5ad3      	ldrh	r3, [r2, r3]
     be0:	4303      	orrs	r3, r0
     be2:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     be4:	78b3      	ldrb	r3, [r6, #2]
     be6:	2b08      	cmp	r3, #8
     be8:	d100      	bne.n	bec <tc_init+0x94>
     bea:	e086      	b.n	cfa <tc_init+0x1a2>
	gclk_chan_config.source_generator = config->clock_source;
     bec:	a901      	add	r1, sp, #4
     bee:	7833      	ldrb	r3, [r6, #0]
     bf0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     bf2:	ab06      	add	r3, sp, #24
     bf4:	5ddf      	ldrb	r7, [r3, r7]
     bf6:	0038      	movs	r0, r7
     bf8:	4b64      	ldr	r3, [pc, #400]	; (d8c <tc_init+0x234>)
     bfa:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     bfc:	0038      	movs	r0, r7
     bfe:	4b64      	ldr	r3, [pc, #400]	; (d90 <tc_init+0x238>)
     c00:	4798      	blx	r3
	ctrla_tmp =
     c02:	8931      	ldrh	r1, [r6, #8]
     c04:	88b3      	ldrh	r3, [r6, #4]
     c06:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     c08:	78b1      	ldrb	r1, [r6, #2]
     c0a:	79b2      	ldrb	r2, [r6, #6]
     c0c:	4311      	orrs	r1, r2
	ctrla_tmp =
     c0e:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     c10:	7873      	ldrb	r3, [r6, #1]
     c12:	2b00      	cmp	r3, #0
     c14:	d002      	beq.n	c1c <tc_init+0xc4>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     c16:	2380      	movs	r3, #128	; 0x80
     c18:	011b      	lsls	r3, r3, #4
     c1a:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c1c:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c1e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     c20:	b25b      	sxtb	r3, r3
     c22:	2b00      	cmp	r3, #0
     c24:	dbfb      	blt.n	c1e <tc_init+0xc6>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     c26:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     c28:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     c2a:	1e4b      	subs	r3, r1, #1
     c2c:	4199      	sbcs	r1, r3
     c2e:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     c30:	7bb3      	ldrb	r3, [r6, #14]
     c32:	2b00      	cmp	r3, #0
     c34:	d001      	beq.n	c3a <tc_init+0xe2>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     c36:	2301      	movs	r3, #1
     c38:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c3a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c3c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     c3e:	b25b      	sxtb	r3, r3
     c40:	2b00      	cmp	r3, #0
     c42:	dbfb      	blt.n	c3c <tc_init+0xe4>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     c44:	23ff      	movs	r3, #255	; 0xff
     c46:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     c48:	2900      	cmp	r1, #0
     c4a:	d005      	beq.n	c58 <tc_init+0x100>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c4c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c4e:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     c50:	b25b      	sxtb	r3, r3
     c52:	2b00      	cmp	r3, #0
     c54:	dbfb      	blt.n	c4e <tc_init+0xf6>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     c56:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     c58:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     c5a:	7af3      	ldrb	r3, [r6, #11]
     c5c:	2b00      	cmp	r3, #0
     c5e:	d001      	beq.n	c64 <tc_init+0x10c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     c60:	2310      	movs	r3, #16
     c62:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     c64:	7b33      	ldrb	r3, [r6, #12]
     c66:	2b00      	cmp	r3, #0
     c68:	d001      	beq.n	c6e <tc_init+0x116>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     c6a:	2320      	movs	r3, #32
     c6c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c6e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c70:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     c72:	b25b      	sxtb	r3, r3
     c74:	2b00      	cmp	r3, #0
     c76:	dbfb      	blt.n	c70 <tc_init+0x118>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     c78:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c7a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c7c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     c7e:	b25b      	sxtb	r3, r3
     c80:	2b00      	cmp	r3, #0
     c82:	dbfb      	blt.n	c7c <tc_init+0x124>
	switch (module_inst->counter_size) {
     c84:	7923      	ldrb	r3, [r4, #4]
     c86:	2b04      	cmp	r3, #4
     c88:	d03f      	beq.n	d0a <tc_init+0x1b2>
     c8a:	2b08      	cmp	r3, #8
     c8c:	d05e      	beq.n	d4c <tc_init+0x1f4>
	return STATUS_ERR_INVALID_ARG;
     c8e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     c90:	2b00      	cmp	r3, #0
     c92:	d000      	beq.n	c96 <tc_init+0x13e>
     c94:	e78b      	b.n	bae <tc_init+0x56>
     c96:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c98:	b25b      	sxtb	r3, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	dbfb      	blt.n	c96 <tc_init+0x13e>
				= config->counter_16_bit.value;
     c9e:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     ca0:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     ca2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     ca4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     ca6:	b25b      	sxtb	r3, r3
     ca8:	2b00      	cmp	r3, #0
     caa:	dbfb      	blt.n	ca4 <tc_init+0x14c>
					config->counter_16_bit.compare_capture_channel[0];
     cac:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     cae:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     cb0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     cb2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     cb4:	b25b      	sxtb	r3, r3
     cb6:	2b00      	cmp	r3, #0
     cb8:	dbfb      	blt.n	cb2 <tc_init+0x15a>
					config->counter_16_bit.compare_capture_channel[1];
     cba:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     cbc:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     cbe:	2000      	movs	r0, #0
     cc0:	e775      	b.n	bae <tc_init+0x56>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     cc2:	a902      	add	r1, sp, #8
     cc4:	2301      	movs	r3, #1
     cc6:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     cc8:	2200      	movs	r2, #0
     cca:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     ccc:	7e32      	ldrb	r2, [r6, #24]
     cce:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     cd0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     cd2:	7d30      	ldrb	r0, [r6, #20]
     cd4:	4b2f      	ldr	r3, [pc, #188]	; (d94 <tc_init+0x23c>)
     cd6:	4798      	blx	r3
     cd8:	e779      	b.n	bce <tc_init+0x76>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     cda:	a902      	add	r1, sp, #8
     cdc:	2301      	movs	r3, #1
     cde:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     ce0:	2200      	movs	r2, #0
     ce2:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     ce4:	3224      	adds	r2, #36	; 0x24
     ce6:	18b2      	adds	r2, r6, r2
     ce8:	7812      	ldrb	r2, [r2, #0]
     cea:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     cec:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     cee:	331f      	adds	r3, #31
     cf0:	18f3      	adds	r3, r6, r3
     cf2:	7818      	ldrb	r0, [r3, #0]
     cf4:	4b27      	ldr	r3, [pc, #156]	; (d94 <tc_init+0x23c>)
     cf6:	4798      	blx	r3
     cf8:	e76d      	b.n	bd6 <tc_init+0x7e>
     cfa:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     cfc:	1c7a      	adds	r2, r7, #1
     cfe:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     d00:	ab03      	add	r3, sp, #12
     d02:	5ad3      	ldrh	r3, [r2, r3]
     d04:	4303      	orrs	r3, r0
     d06:	620b      	str	r3, [r1, #32]
     d08:	e770      	b.n	bec <tc_init+0x94>
     d0a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d0c:	b25b      	sxtb	r3, r3
     d0e:	2b00      	cmp	r3, #0
     d10:	dbfb      	blt.n	d0a <tc_init+0x1b2>
					config->counter_8_bit.value;
     d12:	2328      	movs	r3, #40	; 0x28
     d14:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     d16:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d18:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d1a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d1c:	b25b      	sxtb	r3, r3
     d1e:	2b00      	cmp	r3, #0
     d20:	dbfb      	blt.n	d1a <tc_init+0x1c2>
					config->counter_8_bit.period;
     d22:	2329      	movs	r3, #41	; 0x29
     d24:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     d26:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d28:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d2a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d2c:	b25b      	sxtb	r3, r3
     d2e:	2b00      	cmp	r3, #0
     d30:	dbfb      	blt.n	d2a <tc_init+0x1d2>
					config->counter_8_bit.compare_capture_channel[0];
     d32:	232a      	movs	r3, #42	; 0x2a
     d34:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     d36:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d38:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d3a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d3c:	b25b      	sxtb	r3, r3
     d3e:	2b00      	cmp	r3, #0
     d40:	dbfb      	blt.n	d3a <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
     d42:	232b      	movs	r3, #43	; 0x2b
     d44:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     d46:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     d48:	2000      	movs	r0, #0
     d4a:	e730      	b.n	bae <tc_init+0x56>
     d4c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d4e:	b25b      	sxtb	r3, r3
     d50:	2b00      	cmp	r3, #0
     d52:	dbfb      	blt.n	d4c <tc_init+0x1f4>
				= config->counter_32_bit.value;
     d54:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     d56:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d58:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d5a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d5c:	b25b      	sxtb	r3, r3
     d5e:	2b00      	cmp	r3, #0
     d60:	dbfb      	blt.n	d5a <tc_init+0x202>
			hw->COUNT32.CC[0].reg =
     d62:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     d64:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d66:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d68:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d6a:	b25b      	sxtb	r3, r3
     d6c:	2b00      	cmp	r3, #0
     d6e:	dbfb      	blt.n	d68 <tc_init+0x210>
					config->counter_32_bit.compare_capture_channel[1];
     d70:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     d72:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     d74:	2000      	movs	r0, #0
     d76:	e71a      	b.n	bae <tc_init+0x56>
     d78:	00000b1d 	.word	0x00000b1d
     d7c:	0000547c 	.word	0x0000547c
     d80:	00005355 	.word	0x00005355
     d84:	20000e04 	.word	0x20000e04
     d88:	40000400 	.word	0x40000400
     d8c:	000035f1 	.word	0x000035f1
     d90:	00003565 	.word	0x00003565
     d94:	000036e9 	.word	0x000036e9

00000d98 <resetOutput>:



void resetOutput(uint8_t port)
{
	outputPort[port].address			=		0x00;
     d98:	4b05      	ldr	r3, [pc, #20]	; (db0 <resetOutput+0x18>)
     d9a:	00c0      	lsls	r0, r0, #3
     d9c:	2200      	movs	r2, #0
     d9e:	54c2      	strb	r2, [r0, r3]
	outputPort[port].readDataLength     =		0x00;
     da0:	1818      	adds	r0, r3, r0
     da2:	70c2      	strb	r2, [r0, #3]
	outputPort[port].writeDataLength1   =		0x00;
     da4:	7102      	strb	r2, [r0, #4]
	outputPort[port].writeDataLength2   =		0x00;
     da6:	7142      	strb	r2, [r0, #5]
	outputPort[port].initialization     =       false;
     da8:	7182      	strb	r2, [r0, #6]
	outputPort[port].currentState		=		NOTHINGCONNECTED;
     daa:	7042      	strb	r2, [r0, #1]
};
     dac:	4770      	bx	lr
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	200010d4 	.word	0x200010d4

00000db4 <checkSetOutputs>:



void  checkSetOutputs()
{
     db4:	b5f0      	push	{r4, r5, r6, r7, lr}
     db6:	46d6      	mov	lr, sl
     db8:	464f      	mov	r7, r9
     dba:	4646      	mov	r6, r8
     dbc:	b5c0      	push	{r6, r7, lr}
     dbe:	b084      	sub	sp, #16
     dc0:	2501      	movs	r5, #1
     dc2:	2400      	movs	r4, #0
	//delay_cycles_ms(5);
	//outputPort[3].currentState		  =		OUTPUT_LEDMATRIX;
	
	for(i=0; i<NO_OUTPUTS;i++)
	{
		outputConnected	= outputsConnected[i];
     dc4:	4f2c      	ldr	r7, [pc, #176]	; (e78 <checkSetOutputs+0xc4>)
		if(outputConnected != outputPort[i].currentState)
     dc6:	4e2d      	ldr	r6, [pc, #180]	; (e7c <checkSetOutputs+0xc8>)
     dc8:	e00b      	b.n	de2 <checkSetOutputs+0x2e>
						}
					//}
					break;
					
				case NOTHINGCONNECTED:
					switch(outputPort[i].currentState)
     dca:	00e2      	lsls	r2, r4, #3
     dcc:	4b2b      	ldr	r3, [pc, #172]	; (e7c <checkSetOutputs+0xc8>)
     dce:	469c      	mov	ip, r3
     dd0:	4462      	add	r2, ip
     dd2:	7853      	ldrb	r3, [r2, #1]
     dd4:	2b03      	cmp	r3, #3
     dd6:	d042      	beq.n	e5e <checkSetOutputs+0xaa>
     dd8:	3401      	adds	r4, #1
     dda:	3501      	adds	r5, #1
     ddc:	b2ed      	uxtb	r5, r5
	for(i=0; i<NO_OUTPUTS;i++)
     dde:	2c04      	cmp	r4, #4
     de0:	d043      	beq.n	e6a <checkSetOutputs+0xb6>
     de2:	b2e0      	uxtb	r0, r4
		outputConnected	= outputsConnected[i];
     de4:	5d39      	ldrb	r1, [r7, r4]
		if(outputConnected != outputPort[i].currentState)
     de6:	00e3      	lsls	r3, r4, #3
     de8:	18f3      	adds	r3, r6, r3
     dea:	785b      	ldrb	r3, [r3, #1]
     dec:	b2db      	uxtb	r3, r3
     dee:	4299      	cmp	r1, r3
     df0:	d0f2      	beq.n	dd8 <checkSetOutputs+0x24>
			switch(outputConnected)
     df2:	2900      	cmp	r1, #0
     df4:	d0e9      	beq.n	dca <checkSetOutputs+0x16>
     df6:	2903      	cmp	r1, #3
     df8:	d1ee      	bne.n	dd8 <checkSetOutputs+0x24>
						if(outputPort[i].initialization	  == 		false)
     dfa:	00e1      	lsls	r1, r4, #3
     dfc:	4b1f      	ldr	r3, [pc, #124]	; (e7c <checkSetOutputs+0xc8>)
     dfe:	185b      	adds	r3, r3, r1
     e00:	799b      	ldrb	r3, [r3, #6]
     e02:	2b00      	cmp	r3, #0
     e04:	d1e8      	bne.n	dd8 <checkSetOutputs+0x24>
							outputPort[i].address 			  =		LEDMATRIX_I2C_SLAVE_ADDRESS;
     e06:	4b1d      	ldr	r3, [pc, #116]	; (e7c <checkSetOutputs+0xc8>)
     e08:	4699      	mov	r9, r3
     e0a:	468a      	mov	sl, r1
     e0c:	2311      	movs	r3, #17
     e0e:	464a      	mov	r2, r9
     e10:	548b      	strb	r3, [r1, r2]
							outputPort[i].readDataLength     =		LEDMATRIX_READ_DATA_LENGTH;
     e12:	46c8      	mov	r8, r9
     e14:	44d0      	add	r8, sl
     e16:	3b0f      	subs	r3, #15
     e18:	4642      	mov	r2, r8
     e1a:	70d3      	strb	r3, [r2, #3]
							outputPort[i].writeDataLength1   =		LEDMATRIX_WRITE_DATA_LENGTH_1;
     e1c:	3347      	adds	r3, #71	; 0x47
     e1e:	7113      	strb	r3, [r2, #4]
							outputPort[i].writeDataLength2   =		LEDMATRIX_WRITE_DATA_LENGTH_2;
     e20:	3b44      	subs	r3, #68	; 0x44
     e22:	7153      	strb	r3, [r2, #5]
							enableI2CModule(i+1);
     e24:	0028      	movs	r0, r5
     e26:	4b16      	ldr	r3, [pc, #88]	; (e80 <checkSetOutputs+0xcc>)
     e28:	4798      	blx	r3
								.address     = outputPort[i].address ,
     e2a:	464b      	mov	r3, r9
     e2c:	4652      	mov	r2, sl
     e2e:	5cd3      	ldrb	r3, [r2, r3]
							struct i2c_master_packet wr_packet = {
     e30:	a901      	add	r1, sp, #4
     e32:	800b      	strh	r3, [r1, #0]
								.data_length = outputPort[i].writeDataLength1,
     e34:	4643      	mov	r3, r8
     e36:	791b      	ldrb	r3, [r3, #4]
							struct i2c_master_packet wr_packet = {
     e38:	804b      	strh	r3, [r1, #2]
     e3a:	4b12      	ldr	r3, [pc, #72]	; (e84 <checkSetOutputs+0xd0>)
     e3c:	604b      	str	r3, [r1, #4]
     e3e:	2300      	movs	r3, #0
     e40:	720b      	strb	r3, [r1, #8]
     e42:	724b      	strb	r3, [r1, #9]
     e44:	728b      	strb	r3, [r1, #10]
							I2CWrite((i+1) , &wr_packet);
     e46:	0028      	movs	r0, r5
     e48:	4b0f      	ldr	r3, [pc, #60]	; (e88 <checkSetOutputs+0xd4>)
     e4a:	4798      	blx	r3
							delay_cycles_ms(5);
     e4c:	2005      	movs	r0, #5
     e4e:	4b0f      	ldr	r3, [pc, #60]	; (e8c <checkSetOutputs+0xd8>)
     e50:	4798      	blx	r3
							outputPort[i].initialization	  =		true;
     e52:	2301      	movs	r3, #1
     e54:	4642      	mov	r2, r8
     e56:	7193      	strb	r3, [r2, #6]
							outputPort[i].currentState		  =		OUTPUT_LEDMATRIX;
     e58:	3302      	adds	r3, #2
     e5a:	7053      	strb	r3, [r2, #1]
     e5c:	e7bc      	b.n	dd8 <checkSetOutputs+0x24>
					{
						case OUTPUT_LEDMATRIX:
							resetOutput(i);
     e5e:	4b0c      	ldr	r3, [pc, #48]	; (e90 <checkSetOutputs+0xdc>)
     e60:	4798      	blx	r3
							disableI2CModule(i+1);
     e62:	0028      	movs	r0, r5
     e64:	4b0b      	ldr	r3, [pc, #44]	; (e94 <checkSetOutputs+0xe0>)
     e66:	4798      	blx	r3
							break;
     e68:	e7b6      	b.n	dd8 <checkSetOutputs+0x24>
		}
		
	}
	
	
}
     e6a:	b004      	add	sp, #16
     e6c:	bc1c      	pop	{r2, r3, r4}
     e6e:	4690      	mov	r8, r2
     e70:	4699      	mov	r9, r3
     e72:	46a2      	mov	sl, r4
     e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e76:	46c0      	nop			; (mov r8, r8)
     e78:	20000f74 	.word	0x20000f74
     e7c:	200010d4 	.word	0x200010d4
     e80:	00001305 	.word	0x00001305
     e84:	20000000 	.word	0x20000000
     e88:	00001159 	.word	0x00001159
     e8c:	00001825 	.word	0x00001825
     e90:	00000d99 	.word	0x00000d99
     e94:	00001469 	.word	0x00001469

00000e98 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     e98:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     e9a:	2207      	movs	r2, #7
     e9c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     e9e:	421a      	tst	r2, r3
     ea0:	d1fc      	bne.n	e9c <_i2c_master_wait_for_sync+0x4>
}
     ea2:	4770      	bx	lr

00000ea4 <i2c_read_complete_callback_1>:
	}
}

void i2c_read_complete_callback_1(struct i2c_master_module *const module)
{
	outputPort[0].I2CStatus = IDLE_MODE;
     ea4:	2201      	movs	r2, #1
     ea6:	4b01      	ldr	r3, [pc, #4]	; (eac <i2c_read_complete_callback_1+0x8>)
     ea8:	71da      	strb	r2, [r3, #7]
}
     eaa:	4770      	bx	lr
     eac:	200010d4 	.word	0x200010d4

00000eb0 <i2c_read_complete_callback_2>:

void i2c_read_complete_callback_2(struct i2c_master_module *const module)
{
	outputPort[1].I2CStatus = IDLE_MODE;
     eb0:	2201      	movs	r2, #1
     eb2:	4b01      	ldr	r3, [pc, #4]	; (eb8 <i2c_read_complete_callback_2+0x8>)
     eb4:	73da      	strb	r2, [r3, #15]
}
     eb6:	4770      	bx	lr
     eb8:	200010d4 	.word	0x200010d4

00000ebc <i2c_read_complete_callback_3>:

void i2c_read_complete_callback_3(struct i2c_master_module *const module)
{
	outputPort[2].I2CStatus = IDLE_MODE;
     ebc:	2201      	movs	r2, #1
     ebe:	4b01      	ldr	r3, [pc, #4]	; (ec4 <i2c_read_complete_callback_3+0x8>)
     ec0:	75da      	strb	r2, [r3, #23]
}
     ec2:	4770      	bx	lr
     ec4:	200010d4 	.word	0x200010d4

00000ec8 <i2c_write_complete_callback_1>:
	rd_packet_1.address     = outputPort[0].address;
	rd_packet_1.data_length = outputPort[0].readDataLength;
	rd_packet_1.data        = rd_buffer_1;
	i2c_master_read_packet_job(&i2c_master_instance_1,&rd_packet_1);
	*/
	outputPort[0].I2CStatus = IDLE_MODE;
     ec8:	2201      	movs	r2, #1
     eca:	4b01      	ldr	r3, [pc, #4]	; (ed0 <i2c_write_complete_callback_1+0x8>)
     ecc:	71da      	strb	r2, [r3, #7]
}
     ece:	4770      	bx	lr
     ed0:	200010d4 	.word	0x200010d4

00000ed4 <i2c_write_complete_callback_2>:
	rd_packet_2.address     = outputPort[1].address;
	rd_packet_2.data_length = outputPort[1].readDataLength;
	rd_packet_2.data        = rd_buffer_2;
	i2c_master_read_packet_job(&i2c_master_instance_2,&rd_packet_2);
	*/
	outputPort[1].I2CStatus = IDLE_MODE;
     ed4:	2201      	movs	r2, #1
     ed6:	4b01      	ldr	r3, [pc, #4]	; (edc <i2c_write_complete_callback_2+0x8>)
     ed8:	73da      	strb	r2, [r3, #15]
}
     eda:	4770      	bx	lr
     edc:	200010d4 	.word	0x200010d4

00000ee0 <i2c_write_complete_callback_3>:
	rd_packet_3.address     = outputPort[2].address;
	rd_packet_3.data_length = outputPort[2].readDataLength;
	rd_packet_3.data        = rd_buffer_3;
	i2c_master_read_packet_job(&i2c_master_instance_3,&rd_packet_3);
	*/
	outputPort[2].I2CStatus = IDLE_MODE;
     ee0:	2201      	movs	r2, #1
     ee2:	4b01      	ldr	r3, [pc, #4]	; (ee8 <i2c_write_complete_callback_3+0x8>)
     ee4:	75da      	strb	r2, [r3, #23]
}
     ee6:	4770      	bx	lr
     ee8:	200010d4 	.word	0x200010d4

00000eec <i2c_write_complete_callback_4>:
	rd_packet_4.data_length = outputPort[3].readDataLength;
	rd_packet_4.data        = rd_buffer_4;
	i2c_master_read_packet_job(&i2c_master_instance_4,&rd_packet_4);
	*/
	
	outputPort[3].I2CStatus = IDLE_MODE;
     eec:	2201      	movs	r2, #1
     eee:	4b01      	ldr	r3, [pc, #4]	; (ef4 <i2c_write_complete_callback_4+0x8>)
     ef0:	77da      	strb	r2, [r3, #31]
}
     ef2:	4770      	bx	lr
     ef4:	200010d4 	.word	0x200010d4

00000ef8 <I2CRead>:
{
     ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     efa:	46de      	mov	lr, fp
     efc:	4657      	mov	r7, sl
     efe:	464e      	mov	r6, r9
     f00:	4645      	mov	r5, r8
     f02:	b5e0      	push	{r5, r6, r7, lr}
     f04:	000d      	movs	r5, r1
	switch(instanceNo)
     f06:	2802      	cmp	r0, #2
     f08:	d100      	bne.n	f0c <I2CRead+0x14>
     f0a:	e08f      	b.n	102c <I2CRead+0x134>
     f0c:	d946      	bls.n	f9c <I2CRead+0xa4>
     f0e:	2803      	cmp	r0, #3
     f10:	d100      	bne.n	f14 <I2CRead+0x1c>
     f12:	e0cc      	b.n	10ae <I2CRead+0x1b6>
     f14:	2804      	cmp	r0, #4
     f16:	d000      	beq.n	f1a <I2CRead+0x22>
     f18:	e082      	b.n	1020 <I2CRead+0x128>
     f1a:	4c86      	ldr	r4, [pc, #536]	; (1134 <I2CRead+0x23c>)
			while (i2c_master_read_packet_wait(&i2c_master_instance_4, rd_packet) !=STATUS_OK) {
     f1c:	4e86      	ldr	r6, [pc, #536]	; (1138 <I2CRead+0x240>)
     f1e:	4f87      	ldr	r7, [pc, #540]	; (113c <I2CRead+0x244>)
     f20:	0029      	movs	r1, r5
     f22:	0030      	movs	r0, r6
     f24:	47b8      	blx	r7
     f26:	2800      	cmp	r0, #0
     f28:	d07a      	beq.n	1020 <I2CRead+0x128>
     f2a:	3c01      	subs	r4, #1
     f2c:	b2a4      	uxth	r4, r4
				if (timeout++ == TIMEOUT) {
     f2e:	2c00      	cmp	r4, #0
     f30:	d1f6      	bne.n	f20 <I2CRead+0x28>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f32:	4d81      	ldr	r5, [pc, #516]	; (1138 <I2CRead+0x240>)
     f34:	682c      	ldr	r4, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     f36:	0020      	movs	r0, r4
     f38:	4b81      	ldr	r3, [pc, #516]	; (1140 <I2CRead+0x248>)
     f3a:	4699      	mov	r9, r3
     f3c:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f3e:	271f      	movs	r7, #31
     f40:	4038      	ands	r0, r7
     f42:	2601      	movs	r6, #1
     f44:	0032      	movs	r2, r6
     f46:	4082      	lsls	r2, r0
     f48:	4b7e      	ldr	r3, [pc, #504]	; (1144 <I2CRead+0x24c>)
     f4a:	4698      	mov	r8, r3
     f4c:	2380      	movs	r3, #128	; 0x80
     f4e:	4641      	mov	r1, r8
     f50:	50ca      	str	r2, [r1, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
     f52:	0028      	movs	r0, r5
     f54:	4b7c      	ldr	r3, [pc, #496]	; (1148 <I2CRead+0x250>)
     f56:	469b      	mov	fp, r3
     f58:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
     f5a:	2383      	movs	r3, #131	; 0x83
     f5c:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
     f5e:	7623      	strb	r3, [r4, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     f60:	6823      	ldr	r3, [r4, #0]
     f62:	2202      	movs	r2, #2
     f64:	4692      	mov	sl, r2
     f66:	4393      	bics	r3, r2
     f68:	6023      	str	r3, [r4, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f6a:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
     f6c:	0028      	movs	r0, r5
     f6e:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     f70:	6823      	ldr	r3, [r4, #0]
     f72:	4652      	mov	r2, sl
     f74:	4313      	orrs	r3, r2
     f76:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     f78:	6828      	ldr	r0, [r5, #0]
     f7a:	47c8      	blx	r9
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f7c:	4007      	ands	r7, r0
     f7e:	40be      	lsls	r6, r7
     f80:	4643      	mov	r3, r8
     f82:	601e      	str	r6, [r3, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     f84:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     f86:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     f88:	2110      	movs	r1, #16
     f8a:	8b62      	ldrh	r2, [r4, #26]
     f8c:	420a      	tst	r2, r1
     f8e:	d147      	bne.n	1020 <I2CRead+0x128>
		timeout_counter++;
     f90:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     f92:	4283      	cmp	r3, r0
     f94:	d3f9      	bcc.n	f8a <I2CRead+0x92>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     f96:	2310      	movs	r3, #16
     f98:	8363      	strh	r3, [r4, #26]
     f9a:	e041      	b.n	1020 <I2CRead+0x128>
	switch(instanceNo)
     f9c:	2801      	cmp	r0, #1
     f9e:	d13f      	bne.n	1020 <I2CRead+0x128>
     fa0:	4c64      	ldr	r4, [pc, #400]	; (1134 <I2CRead+0x23c>)
			while (i2c_master_read_packet_wait(&i2c_master_instance_1, rd_packet) !=STATUS_OK) {
     fa2:	4e6a      	ldr	r6, [pc, #424]	; (114c <I2CRead+0x254>)
     fa4:	4f65      	ldr	r7, [pc, #404]	; (113c <I2CRead+0x244>)
     fa6:	0029      	movs	r1, r5
     fa8:	0030      	movs	r0, r6
     faa:	47b8      	blx	r7
     fac:	2800      	cmp	r0, #0
     fae:	d037      	beq.n	1020 <I2CRead+0x128>
     fb0:	3c01      	subs	r4, #1
     fb2:	b2a4      	uxth	r4, r4
				if (timeout++ == TIMEOUT) {
     fb4:	2c00      	cmp	r4, #0
     fb6:	d1f6      	bne.n	fa6 <I2CRead+0xae>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     fb8:	4d64      	ldr	r5, [pc, #400]	; (114c <I2CRead+0x254>)
     fba:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     fbc:	0020      	movs	r0, r4
     fbe:	4b60      	ldr	r3, [pc, #384]	; (1140 <I2CRead+0x248>)
     fc0:	4699      	mov	r9, r3
     fc2:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     fc4:	271f      	movs	r7, #31
     fc6:	4038      	ands	r0, r7
     fc8:	2601      	movs	r6, #1
     fca:	0032      	movs	r2, r6
     fcc:	4082      	lsls	r2, r0
     fce:	4b5d      	ldr	r3, [pc, #372]	; (1144 <I2CRead+0x24c>)
     fd0:	4698      	mov	r8, r3
     fd2:	2380      	movs	r3, #128	; 0x80
     fd4:	4641      	mov	r1, r8
     fd6:	50ca      	str	r2, [r1, r3]
	_i2c_master_wait_for_sync(module);
     fd8:	0028      	movs	r0, r5
     fda:	4b5b      	ldr	r3, [pc, #364]	; (1148 <I2CRead+0x250>)
     fdc:	469b      	mov	fp, r3
     fde:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
     fe0:	2383      	movs	r3, #131	; 0x83
     fe2:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
     fe4:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     fe6:	6823      	ldr	r3, [r4, #0]
     fe8:	2202      	movs	r2, #2
     fea:	4692      	mov	sl, r2
     fec:	4393      	bics	r3, r2
     fee:	6023      	str	r3, [r4, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ff0:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
     ff2:	0028      	movs	r0, r5
     ff4:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     ff6:	6823      	ldr	r3, [r4, #0]
     ff8:	4652      	mov	r2, sl
     ffa:	4313      	orrs	r3, r2
     ffc:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     ffe:	6828      	ldr	r0, [r5, #0]
    1000:	47c8      	blx	r9
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1002:	4007      	ands	r7, r0
    1004:	40be      	lsls	r6, r7
    1006:	4643      	mov	r3, r8
    1008:	601e      	str	r6, [r3, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    100a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    100c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    100e:	2110      	movs	r1, #16
    1010:	8b62      	ldrh	r2, [r4, #26]
    1012:	420a      	tst	r2, r1
    1014:	d104      	bne.n	1020 <I2CRead+0x128>
		timeout_counter++;
    1016:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1018:	4283      	cmp	r3, r0
    101a:	d3f9      	bcc.n	1010 <I2CRead+0x118>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    101c:	2310      	movs	r3, #16
    101e:	8363      	strh	r3, [r4, #26]
}
    1020:	bc3c      	pop	{r2, r3, r4, r5}
    1022:	4690      	mov	r8, r2
    1024:	4699      	mov	r9, r3
    1026:	46a2      	mov	sl, r4
    1028:	46ab      	mov	fp, r5
    102a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch(instanceNo)
    102c:	4c41      	ldr	r4, [pc, #260]	; (1134 <I2CRead+0x23c>)
			while (i2c_master_read_packet_wait(&i2c_master_instance_2, rd_packet) !=STATUS_OK) {
    102e:	4e48      	ldr	r6, [pc, #288]	; (1150 <I2CRead+0x258>)
    1030:	4f42      	ldr	r7, [pc, #264]	; (113c <I2CRead+0x244>)
    1032:	0029      	movs	r1, r5
    1034:	0030      	movs	r0, r6
    1036:	47b8      	blx	r7
    1038:	2800      	cmp	r0, #0
    103a:	d0f1      	beq.n	1020 <I2CRead+0x128>
    103c:	3c01      	subs	r4, #1
    103e:	b2a4      	uxth	r4, r4
				if (timeout++ == TIMEOUT) {
    1040:	2c00      	cmp	r4, #0
    1042:	d1f6      	bne.n	1032 <I2CRead+0x13a>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1044:	4d42      	ldr	r5, [pc, #264]	; (1150 <I2CRead+0x258>)
    1046:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1048:	0020      	movs	r0, r4
    104a:	4b3d      	ldr	r3, [pc, #244]	; (1140 <I2CRead+0x248>)
    104c:	4699      	mov	r9, r3
    104e:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1050:	271f      	movs	r7, #31
    1052:	4038      	ands	r0, r7
    1054:	2601      	movs	r6, #1
    1056:	0032      	movs	r2, r6
    1058:	4082      	lsls	r2, r0
    105a:	4b3a      	ldr	r3, [pc, #232]	; (1144 <I2CRead+0x24c>)
    105c:	4698      	mov	r8, r3
    105e:	2380      	movs	r3, #128	; 0x80
    1060:	4641      	mov	r1, r8
    1062:	50ca      	str	r2, [r1, r3]
	_i2c_master_wait_for_sync(module);
    1064:	0028      	movs	r0, r5
    1066:	4b38      	ldr	r3, [pc, #224]	; (1148 <I2CRead+0x250>)
    1068:	469b      	mov	fp, r3
    106a:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    106c:	2383      	movs	r3, #131	; 0x83
    106e:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1070:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1072:	6823      	ldr	r3, [r4, #0]
    1074:	2202      	movs	r2, #2
    1076:	4692      	mov	sl, r2
    1078:	4393      	bics	r3, r2
    107a:	6023      	str	r3, [r4, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    107c:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    107e:	0028      	movs	r0, r5
    1080:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1082:	6823      	ldr	r3, [r4, #0]
    1084:	4652      	mov	r2, sl
    1086:	4313      	orrs	r3, r2
    1088:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    108a:	6828      	ldr	r0, [r5, #0]
    108c:	47c8      	blx	r9
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    108e:	4007      	ands	r7, r0
    1090:	40be      	lsls	r6, r7
    1092:	4643      	mov	r3, r8
    1094:	601e      	str	r6, [r3, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1096:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1098:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    109a:	2110      	movs	r1, #16
    109c:	8b62      	ldrh	r2, [r4, #26]
    109e:	420a      	tst	r2, r1
    10a0:	d1be      	bne.n	1020 <I2CRead+0x128>
		timeout_counter++;
    10a2:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    10a4:	4283      	cmp	r3, r0
    10a6:	d3f9      	bcc.n	109c <I2CRead+0x1a4>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    10a8:	2310      	movs	r3, #16
    10aa:	8363      	strh	r3, [r4, #26]
    10ac:	e7b8      	b.n	1020 <I2CRead+0x128>
	switch(instanceNo)
    10ae:	4c21      	ldr	r4, [pc, #132]	; (1134 <I2CRead+0x23c>)
			while (i2c_master_read_packet_wait(&i2c_master_instance_3, rd_packet) !=STATUS_OK) {
    10b0:	4e28      	ldr	r6, [pc, #160]	; (1154 <I2CRead+0x25c>)
    10b2:	4f22      	ldr	r7, [pc, #136]	; (113c <I2CRead+0x244>)
    10b4:	0029      	movs	r1, r5
    10b6:	0030      	movs	r0, r6
    10b8:	47b8      	blx	r7
    10ba:	2800      	cmp	r0, #0
    10bc:	d0b0      	beq.n	1020 <I2CRead+0x128>
    10be:	3c01      	subs	r4, #1
    10c0:	b2a4      	uxth	r4, r4
				if (timeout++ == TIMEOUT) {
    10c2:	2c00      	cmp	r4, #0
    10c4:	d1f6      	bne.n	10b4 <I2CRead+0x1bc>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    10c6:	4d23      	ldr	r5, [pc, #140]	; (1154 <I2CRead+0x25c>)
    10c8:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    10ca:	0020      	movs	r0, r4
    10cc:	4b1c      	ldr	r3, [pc, #112]	; (1140 <I2CRead+0x248>)
    10ce:	4699      	mov	r9, r3
    10d0:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    10d2:	271f      	movs	r7, #31
    10d4:	4038      	ands	r0, r7
    10d6:	2601      	movs	r6, #1
    10d8:	0032      	movs	r2, r6
    10da:	4082      	lsls	r2, r0
    10dc:	4b19      	ldr	r3, [pc, #100]	; (1144 <I2CRead+0x24c>)
    10de:	4698      	mov	r8, r3
    10e0:	2380      	movs	r3, #128	; 0x80
    10e2:	4641      	mov	r1, r8
    10e4:	50ca      	str	r2, [r1, r3]
	_i2c_master_wait_for_sync(module);
    10e6:	0028      	movs	r0, r5
    10e8:	4b17      	ldr	r3, [pc, #92]	; (1148 <I2CRead+0x250>)
    10ea:	469b      	mov	fp, r3
    10ec:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    10ee:	2383      	movs	r3, #131	; 0x83
    10f0:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    10f2:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    10f4:	6823      	ldr	r3, [r4, #0]
    10f6:	2202      	movs	r2, #2
    10f8:	4692      	mov	sl, r2
    10fa:	4393      	bics	r3, r2
    10fc:	6023      	str	r3, [r4, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    10fe:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1100:	0028      	movs	r0, r5
    1102:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1104:	6823      	ldr	r3, [r4, #0]
    1106:	4652      	mov	r2, sl
    1108:	4313      	orrs	r3, r2
    110a:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    110c:	6828      	ldr	r0, [r5, #0]
    110e:	47c8      	blx	r9
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1110:	4007      	ands	r7, r0
    1112:	40be      	lsls	r6, r7
    1114:	4643      	mov	r3, r8
    1116:	601e      	str	r6, [r3, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1118:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    111a:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    111c:	2110      	movs	r1, #16
    111e:	8b62      	ldrh	r2, [r4, #26]
    1120:	420a      	tst	r2, r1
    1122:	d000      	beq.n	1126 <I2CRead+0x22e>
    1124:	e77c      	b.n	1020 <I2CRead+0x128>
		timeout_counter++;
    1126:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1128:	4283      	cmp	r3, r0
    112a:	d3f8      	bcc.n	111e <I2CRead+0x226>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    112c:	2310      	movs	r3, #16
    112e:	8363      	strh	r3, [r4, #26]
    1130:	e776      	b.n	1020 <I2CRead+0x128>
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	000003e9 	.word	0x000003e9
    1138:	20000e98 	.word	0x20000e98
    113c:	00000635 	.word	0x00000635
    1140:	00002135 	.word	0x00002135
    1144:	e000e100 	.word	0xe000e100
    1148:	00000e99 	.word	0x00000e99
    114c:	20000e58 	.word	0x20000e58
    1150:	20000e18 	.word	0x20000e18
    1154:	20000ec0 	.word	0x20000ec0

00001158 <I2CWrite>:
{
    1158:	b500      	push	{lr}
    115a:	b083      	sub	sp, #12
	volatile uint32_t err_code = 0;
    115c:	2300      	movs	r3, #0
    115e:	9301      	str	r3, [sp, #4]
	switch(instanceNo)
    1160:	2802      	cmp	r0, #2
    1162:	d010      	beq.n	1186 <I2CWrite+0x2e>
    1164:	d908      	bls.n	1178 <I2CWrite+0x20>
    1166:	2803      	cmp	r0, #3
    1168:	d011      	beq.n	118e <I2CWrite+0x36>
    116a:	2804      	cmp	r0, #4
    116c:	d109      	bne.n	1182 <I2CWrite+0x2a>
			err_code = i2c_master_write_packet_job(&i2c_master_instance_4, wr_packet);
    116e:	480a      	ldr	r0, [pc, #40]	; (1198 <I2CWrite+0x40>)
    1170:	4b0a      	ldr	r3, [pc, #40]	; (119c <I2CWrite+0x44>)
    1172:	4798      	blx	r3
    1174:	9001      	str	r0, [sp, #4]
}
    1176:	e004      	b.n	1182 <I2CWrite+0x2a>
	switch(instanceNo)
    1178:	2801      	cmp	r0, #1
    117a:	d102      	bne.n	1182 <I2CWrite+0x2a>
			 i2c_master_write_packet_job(&i2c_master_instance_1, wr_packet);
    117c:	4808      	ldr	r0, [pc, #32]	; (11a0 <I2CWrite+0x48>)
    117e:	4b07      	ldr	r3, [pc, #28]	; (119c <I2CWrite+0x44>)
    1180:	4798      	blx	r3
}
    1182:	b003      	add	sp, #12
    1184:	bd00      	pop	{pc}
			i2c_master_write_packet_job(&i2c_master_instance_2, wr_packet);
    1186:	4807      	ldr	r0, [pc, #28]	; (11a4 <I2CWrite+0x4c>)
    1188:	4b04      	ldr	r3, [pc, #16]	; (119c <I2CWrite+0x44>)
    118a:	4798      	blx	r3
			break;
    118c:	e7f9      	b.n	1182 <I2CWrite+0x2a>
			i2c_master_write_packet_job(&i2c_master_instance_3, wr_packet);
    118e:	4806      	ldr	r0, [pc, #24]	; (11a8 <I2CWrite+0x50>)
    1190:	4b02      	ldr	r3, [pc, #8]	; (119c <I2CWrite+0x44>)
    1192:	4798      	blx	r3
			break;
    1194:	e7f5      	b.n	1182 <I2CWrite+0x2a>
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	20000e98 	.word	0x20000e98
    119c:	000007a9 	.word	0x000007a9
    11a0:	20000e58 	.word	0x20000e58
    11a4:	20000e18 	.word	0x20000e18
    11a8:	20000ec0 	.word	0x20000ec0

000011ac <initializeI2CModules>:
{
	rewrite = true;
}
*/
void initializeI2CModules()
{
    11ac:	b530      	push	{r4, r5, lr}
    11ae:	b08f      	sub	sp, #60	; 0x3c
	config->baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
    11b0:	ab01      	add	r3, sp, #4
    11b2:	22c8      	movs	r2, #200	; 0xc8
    11b4:	0052      	lsls	r2, r2, #1
    11b6:	9201      	str	r2, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    11b8:	4a38      	ldr	r2, [pc, #224]	; (129c <initializeI2CModules+0xf0>)
    11ba:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    11bc:	2200      	movs	r2, #0
    11be:	9203      	str	r2, [sp, #12]
	config->generator_source = GCLK_GENERATOR_0;
    11c0:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    11c2:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    11c4:	2180      	movs	r1, #128	; 0x80
    11c6:	0389      	lsls	r1, r1, #14
    11c8:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    11ca:	2101      	movs	r1, #1
    11cc:	4249      	negs	r1, r1
    11ce:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    11d0:	8299      	strh	r1, [r3, #20]
	config->scl_low_timeout  = false;
    11d2:	3125      	adds	r1, #37	; 0x25
    11d4:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    11d6:	920b      	str	r2, [sp, #44]	; 0x2c
	config->scl_stretch_only_after_ack_bit = false;
    11d8:	3108      	adds	r1, #8
    11da:	545a      	strb	r2, [r3, r1]
	config->slave_scl_low_extend_timeout   = false;
    11dc:	3101      	adds	r1, #1
    11de:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    11e0:	3101      	adds	r1, #1
    11e2:	545a      	strb	r2, [r3, r1]
	config->sda_scl_rise_time_ns = 215;
    11e4:	32d7      	adds	r2, #215	; 0xd7
    11e6:	861a      	strh	r2, [r3, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
	//Output 1 
	config_i2c_master.pinmux_pad0    = OUTPUT1_I2C_SDA;
    11e8:	4a2d      	ldr	r2, [pc, #180]	; (12a0 <initializeI2CModules+0xf4>)
    11ea:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT1_I2C_SCL;
    11ec:	4a2d      	ldr	r2, [pc, #180]	; (12a4 <initializeI2CModules+0xf8>)
    11ee:	9209      	str	r2, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_1,  CONF_I2C_MASTER_MODULE_OUTPUT_1, &config_i2c_master)   != STATUS_OK);
    11f0:	4d2d      	ldr	r5, [pc, #180]	; (12a8 <initializeI2CModules+0xfc>)
    11f2:	4c2e      	ldr	r4, [pc, #184]	; (12ac <initializeI2CModules+0x100>)
    11f4:	aa01      	add	r2, sp, #4
    11f6:	492e      	ldr	r1, [pc, #184]	; (12b0 <initializeI2CModules+0x104>)
    11f8:	0028      	movs	r0, r5
    11fa:	47a0      	blx	r4
    11fc:	2800      	cmp	r0, #0
    11fe:	d1f9      	bne.n	11f4 <initializeI2CModules+0x48>
	i2c_master_register_callback(&i2c_master_instance_1, i2c_write_complete_callback_1,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1200:	4d29      	ldr	r5, [pc, #164]	; (12a8 <initializeI2CModules+0xfc>)
    1202:	2200      	movs	r2, #0
    1204:	492b      	ldr	r1, [pc, #172]	; (12b4 <initializeI2CModules+0x108>)
    1206:	0028      	movs	r0, r5
    1208:	4c2b      	ldr	r4, [pc, #172]	; (12b8 <initializeI2CModules+0x10c>)
    120a:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_1, i2c_read_complete_callback_1,I2C_MASTER_CALLBACK_READ_COMPLETE);
    120c:	2201      	movs	r2, #1
    120e:	492b      	ldr	r1, [pc, #172]	; (12bc <initializeI2CModules+0x110>)
    1210:	0028      	movs	r0, r5
    1212:	47a0      	blx	r4
	
	//Output 2
	config_i2c_master.pinmux_pad0    = OUTPUT2_I2C_SDA;
    1214:	4b2a      	ldr	r3, [pc, #168]	; (12c0 <initializeI2CModules+0x114>)
    1216:	9308      	str	r3, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT2_I2C_SCL;
    1218:	4b2a      	ldr	r3, [pc, #168]	; (12c4 <initializeI2CModules+0x118>)
    121a:	9309      	str	r3, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_2,  CONF_I2C_MASTER_MODULE_OUTPUT_2, &config_i2c_master)   != STATUS_OK);
    121c:	4d2a      	ldr	r5, [pc, #168]	; (12c8 <initializeI2CModules+0x11c>)
    121e:	4c23      	ldr	r4, [pc, #140]	; (12ac <initializeI2CModules+0x100>)
    1220:	aa01      	add	r2, sp, #4
    1222:	492a      	ldr	r1, [pc, #168]	; (12cc <initializeI2CModules+0x120>)
    1224:	0028      	movs	r0, r5
    1226:	47a0      	blx	r4
    1228:	2800      	cmp	r0, #0
    122a:	d1f9      	bne.n	1220 <initializeI2CModules+0x74>
	i2c_master_register_callback(&i2c_master_instance_2, i2c_write_complete_callback_2, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    122c:	4d26      	ldr	r5, [pc, #152]	; (12c8 <initializeI2CModules+0x11c>)
    122e:	2200      	movs	r2, #0
    1230:	4927      	ldr	r1, [pc, #156]	; (12d0 <initializeI2CModules+0x124>)
    1232:	0028      	movs	r0, r5
    1234:	4c20      	ldr	r4, [pc, #128]	; (12b8 <initializeI2CModules+0x10c>)
    1236:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_2, i2c_read_complete_callback_2,  I2C_MASTER_CALLBACK_READ_COMPLETE);
    1238:	2201      	movs	r2, #1
    123a:	4926      	ldr	r1, [pc, #152]	; (12d4 <initializeI2CModules+0x128>)
    123c:	0028      	movs	r0, r5
    123e:	47a0      	blx	r4
	
	//Output 3
	config_i2c_master.pinmux_pad0    = OUTPUT3_I2C_SDA;
    1240:	4b25      	ldr	r3, [pc, #148]	; (12d8 <initializeI2CModules+0x12c>)
    1242:	9308      	str	r3, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT3_I2C_SCL;
    1244:	4b25      	ldr	r3, [pc, #148]	; (12dc <initializeI2CModules+0x130>)
    1246:	9309      	str	r3, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_3,  CONF_I2C_MASTER_MODULE_OUTPUT_3, &config_i2c_master)   != STATUS_OK);
    1248:	4d25      	ldr	r5, [pc, #148]	; (12e0 <initializeI2CModules+0x134>)
    124a:	4c18      	ldr	r4, [pc, #96]	; (12ac <initializeI2CModules+0x100>)
    124c:	aa01      	add	r2, sp, #4
    124e:	4925      	ldr	r1, [pc, #148]	; (12e4 <initializeI2CModules+0x138>)
    1250:	0028      	movs	r0, r5
    1252:	47a0      	blx	r4
    1254:	2800      	cmp	r0, #0
    1256:	d1f9      	bne.n	124c <initializeI2CModules+0xa0>
	i2c_master_register_callback(&i2c_master_instance_3, i2c_write_complete_callback_3,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1258:	4d21      	ldr	r5, [pc, #132]	; (12e0 <initializeI2CModules+0x134>)
    125a:	2200      	movs	r2, #0
    125c:	4922      	ldr	r1, [pc, #136]	; (12e8 <initializeI2CModules+0x13c>)
    125e:	0028      	movs	r0, r5
    1260:	4c15      	ldr	r4, [pc, #84]	; (12b8 <initializeI2CModules+0x10c>)
    1262:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_3, i2c_read_complete_callback_3,  I2C_MASTER_CALLBACK_READ_COMPLETE);
    1264:	2201      	movs	r2, #1
    1266:	4921      	ldr	r1, [pc, #132]	; (12ec <initializeI2CModules+0x140>)
    1268:	0028      	movs	r0, r5
    126a:	47a0      	blx	r4
	
	//Output 4
	config_i2c_master.pinmux_pad0    = OUTPUT4_I2C_SDA;
    126c:	ab01      	add	r3, sp, #4
    126e:	4a20      	ldr	r2, [pc, #128]	; (12f0 <initializeI2CModules+0x144>)
    1270:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT4_I2C_SCL;
    1272:	4a20      	ldr	r2, [pc, #128]	; (12f4 <initializeI2CModules+0x148>)
    1274:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
    1276:	22fa      	movs	r2, #250	; 0xfa
    1278:	0092      	lsls	r2, r2, #2
    127a:	82da      	strh	r2, [r3, #22]
	
	while(i2c_master_init(&i2c_master_instance_4,  CONF_I2C_MASTER_MODULE_OUTPUT_4, &config_i2c_master)   != STATUS_OK);
    127c:	4d1e      	ldr	r5, [pc, #120]	; (12f8 <initializeI2CModules+0x14c>)
    127e:	4c0b      	ldr	r4, [pc, #44]	; (12ac <initializeI2CModules+0x100>)
    1280:	aa01      	add	r2, sp, #4
    1282:	491e      	ldr	r1, [pc, #120]	; (12fc <initializeI2CModules+0x150>)
    1284:	0028      	movs	r0, r5
    1286:	47a0      	blx	r4
    1288:	2800      	cmp	r0, #0
    128a:	d1f9      	bne.n	1280 <initializeI2CModules+0xd4>
	i2c_master_register_callback(&i2c_master_instance_4, i2c_write_complete_callback_4, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    128c:	2200      	movs	r2, #0
    128e:	491c      	ldr	r1, [pc, #112]	; (1300 <initializeI2CModules+0x154>)
    1290:	4819      	ldr	r0, [pc, #100]	; (12f8 <initializeI2CModules+0x14c>)
    1292:	4b09      	ldr	r3, [pc, #36]	; (12b8 <initializeI2CModules+0x10c>)
    1294:	4798      	blx	r3
			//	break;
			//}
		//}
	
	
}
    1296:	b00f      	add	sp, #60	; 0x3c
    1298:	bd30      	pop	{r4, r5, pc}
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	00000d48 	.word	0x00000d48
    12a0:	00080002 	.word	0x00080002
    12a4:	00090002 	.word	0x00090002
    12a8:	20000e58 	.word	0x20000e58
    12ac:	00000121 	.word	0x00000121
    12b0:	42000800 	.word	0x42000800
    12b4:	00000ec9 	.word	0x00000ec9
    12b8:	00000791 	.word	0x00000791
    12bc:	00000ea5 	.word	0x00000ea5
    12c0:	000c0002 	.word	0x000c0002
    12c4:	000d0002 	.word	0x000d0002
    12c8:	20000e18 	.word	0x20000e18
    12cc:	42001000 	.word	0x42001000
    12d0:	00000ed5 	.word	0x00000ed5
    12d4:	00000eb1 	.word	0x00000eb1
    12d8:	00100002 	.word	0x00100002
    12dc:	00110002 	.word	0x00110002
    12e0:	20000ec0 	.word	0x20000ec0
    12e4:	42000c00 	.word	0x42000c00
    12e8:	00000ee1 	.word	0x00000ee1
    12ec:	00000ebd 	.word	0x00000ebd
    12f0:	00160002 	.word	0x00160002
    12f4:	00170002 	.word	0x00170002
    12f8:	20000e98 	.word	0x20000e98
    12fc:	42001400 	.word	0x42001400
    1300:	00000eed 	.word	0x00000eed

00001304 <enableI2CModule>:

void enableI2CModule(uint8_t port)
{
    1304:	b570      	push	{r4, r5, r6, lr}
	switch(port)
    1306:	2802      	cmp	r0, #2
    1308:	d051      	beq.n	13ae <enableI2CModule+0xaa>
    130a:	d927      	bls.n	135c <enableI2CModule+0x58>
    130c:	2803      	cmp	r0, #3
    130e:	d100      	bne.n	1312 <enableI2CModule+0xe>
    1310:	e074      	b.n	13fc <enableI2CModule+0xf8>
    1312:	2804      	cmp	r0, #4
    1314:	d14a      	bne.n	13ac <enableI2CModule+0xa8>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1316:	4d4d      	ldr	r5, [pc, #308]	; (144c <enableI2CModule+0x148>)
    1318:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    131a:	0028      	movs	r0, r5
    131c:	4b4c      	ldr	r3, [pc, #304]	; (1450 <enableI2CModule+0x14c>)
    131e:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1320:	6823      	ldr	r3, [r4, #0]
    1322:	2202      	movs	r2, #2
    1324:	4313      	orrs	r3, r2
    1326:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1328:	6828      	ldr	r0, [r5, #0]
    132a:	4b4a      	ldr	r3, [pc, #296]	; (1454 <enableI2CModule+0x150>)
    132c:	4798      	blx	r3
    132e:	231f      	movs	r3, #31
    1330:	4018      	ands	r0, r3
    1332:	3b1e      	subs	r3, #30
    1334:	4083      	lsls	r3, r0
    1336:	4a48      	ldr	r2, [pc, #288]	; (1458 <enableI2CModule+0x154>)
    1338:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    133a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    133c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    133e:	2110      	movs	r1, #16
    1340:	8b62      	ldrh	r2, [r4, #26]
    1342:	420a      	tst	r2, r1
    1344:	d104      	bne.n	1350 <enableI2CModule+0x4c>
		timeout_counter++;
    1346:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1348:	4283      	cmp	r3, r0
    134a:	d3f9      	bcc.n	1340 <enableI2CModule+0x3c>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    134c:	2310      	movs	r3, #16
    134e:	8363      	strh	r3, [r4, #26]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1350:	4a3e      	ldr	r2, [pc, #248]	; (144c <enableI2CModule+0x148>)
    1352:	7e53      	ldrb	r3, [r2, #25]
    1354:	2101      	movs	r1, #1
    1356:	430b      	orrs	r3, r1
    1358:	7653      	strb	r3, [r2, #25]
			
		default:
			break;
	}
	
}
    135a:	e027      	b.n	13ac <enableI2CModule+0xa8>
	switch(port)
    135c:	2801      	cmp	r0, #1
    135e:	d125      	bne.n	13ac <enableI2CModule+0xa8>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1360:	4d3e      	ldr	r5, [pc, #248]	; (145c <enableI2CModule+0x158>)
    1362:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1364:	0028      	movs	r0, r5
    1366:	4b3a      	ldr	r3, [pc, #232]	; (1450 <enableI2CModule+0x14c>)
    1368:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    136a:	6823      	ldr	r3, [r4, #0]
    136c:	2202      	movs	r2, #2
    136e:	4313      	orrs	r3, r2
    1370:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1372:	6828      	ldr	r0, [r5, #0]
    1374:	4b37      	ldr	r3, [pc, #220]	; (1454 <enableI2CModule+0x150>)
    1376:	4798      	blx	r3
    1378:	231f      	movs	r3, #31
    137a:	4018      	ands	r0, r3
    137c:	3b1e      	subs	r3, #30
    137e:	4083      	lsls	r3, r0
    1380:	4a35      	ldr	r2, [pc, #212]	; (1458 <enableI2CModule+0x154>)
    1382:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1384:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1386:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1388:	2110      	movs	r1, #16
    138a:	8b62      	ldrh	r2, [r4, #26]
    138c:	420a      	tst	r2, r1
    138e:	d104      	bne.n	139a <enableI2CModule+0x96>
		timeout_counter++;
    1390:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1392:	4283      	cmp	r3, r0
    1394:	d3f9      	bcc.n	138a <enableI2CModule+0x86>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1396:	2310      	movs	r3, #16
    1398:	8363      	strh	r3, [r4, #26]
    139a:	4b30      	ldr	r3, [pc, #192]	; (145c <enableI2CModule+0x158>)
    139c:	7e5a      	ldrb	r2, [r3, #25]
    139e:	2101      	movs	r1, #1
    13a0:	430a      	orrs	r2, r1
    13a2:	765a      	strb	r2, [r3, #25]
    13a4:	7e5a      	ldrb	r2, [r3, #25]
    13a6:	3101      	adds	r1, #1
    13a8:	430a      	orrs	r2, r1
    13aa:	765a      	strb	r2, [r3, #25]
}
    13ac:	bd70      	pop	{r4, r5, r6, pc}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13ae:	4d2c      	ldr	r5, [pc, #176]	; (1460 <enableI2CModule+0x15c>)
    13b0:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    13b2:	0028      	movs	r0, r5
    13b4:	4b26      	ldr	r3, [pc, #152]	; (1450 <enableI2CModule+0x14c>)
    13b6:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    13b8:	6823      	ldr	r3, [r4, #0]
    13ba:	2202      	movs	r2, #2
    13bc:	4313      	orrs	r3, r2
    13be:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    13c0:	6828      	ldr	r0, [r5, #0]
    13c2:	4b24      	ldr	r3, [pc, #144]	; (1454 <enableI2CModule+0x150>)
    13c4:	4798      	blx	r3
    13c6:	231f      	movs	r3, #31
    13c8:	4018      	ands	r0, r3
    13ca:	3b1e      	subs	r3, #30
    13cc:	4083      	lsls	r3, r0
    13ce:	4a22      	ldr	r2, [pc, #136]	; (1458 <enableI2CModule+0x154>)
    13d0:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    13d2:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    13d4:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    13d6:	2110      	movs	r1, #16
    13d8:	8b62      	ldrh	r2, [r4, #26]
    13da:	420a      	tst	r2, r1
    13dc:	d104      	bne.n	13e8 <enableI2CModule+0xe4>
		timeout_counter++;
    13de:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    13e0:	4283      	cmp	r3, r0
    13e2:	d3f9      	bcc.n	13d8 <enableI2CModule+0xd4>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    13e4:	2310      	movs	r3, #16
    13e6:	8363      	strh	r3, [r4, #26]
    13e8:	4b1d      	ldr	r3, [pc, #116]	; (1460 <enableI2CModule+0x15c>)
    13ea:	7e5a      	ldrb	r2, [r3, #25]
    13ec:	2101      	movs	r1, #1
    13ee:	430a      	orrs	r2, r1
    13f0:	765a      	strb	r2, [r3, #25]
    13f2:	7e5a      	ldrb	r2, [r3, #25]
    13f4:	3101      	adds	r1, #1
    13f6:	430a      	orrs	r2, r1
    13f8:	765a      	strb	r2, [r3, #25]
    13fa:	e7d7      	b.n	13ac <enableI2CModule+0xa8>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13fc:	4d19      	ldr	r5, [pc, #100]	; (1464 <enableI2CModule+0x160>)
    13fe:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1400:	0028      	movs	r0, r5
    1402:	4b13      	ldr	r3, [pc, #76]	; (1450 <enableI2CModule+0x14c>)
    1404:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1406:	6823      	ldr	r3, [r4, #0]
    1408:	2202      	movs	r2, #2
    140a:	4313      	orrs	r3, r2
    140c:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    140e:	6828      	ldr	r0, [r5, #0]
    1410:	4b10      	ldr	r3, [pc, #64]	; (1454 <enableI2CModule+0x150>)
    1412:	4798      	blx	r3
    1414:	231f      	movs	r3, #31
    1416:	4018      	ands	r0, r3
    1418:	3b1e      	subs	r3, #30
    141a:	4083      	lsls	r3, r0
    141c:	4a0e      	ldr	r2, [pc, #56]	; (1458 <enableI2CModule+0x154>)
    141e:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1420:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1422:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1424:	2110      	movs	r1, #16
    1426:	8b62      	ldrh	r2, [r4, #26]
    1428:	420a      	tst	r2, r1
    142a:	d104      	bne.n	1436 <enableI2CModule+0x132>
		timeout_counter++;
    142c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    142e:	4283      	cmp	r3, r0
    1430:	d3f9      	bcc.n	1426 <enableI2CModule+0x122>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1432:	2310      	movs	r3, #16
    1434:	8363      	strh	r3, [r4, #26]
    1436:	4b0b      	ldr	r3, [pc, #44]	; (1464 <enableI2CModule+0x160>)
    1438:	7e5a      	ldrb	r2, [r3, #25]
    143a:	2101      	movs	r1, #1
    143c:	430a      	orrs	r2, r1
    143e:	765a      	strb	r2, [r3, #25]
    1440:	7e5a      	ldrb	r2, [r3, #25]
    1442:	3101      	adds	r1, #1
    1444:	430a      	orrs	r2, r1
    1446:	765a      	strb	r2, [r3, #25]
    1448:	e7b0      	b.n	13ac <enableI2CModule+0xa8>
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	20000e98 	.word	0x20000e98
    1450:	00000e99 	.word	0x00000e99
    1454:	00002135 	.word	0x00002135
    1458:	e000e100 	.word	0xe000e100
    145c:	20000e58 	.word	0x20000e58
    1460:	20000e18 	.word	0x20000e18
    1464:	20000ec0 	.word	0x20000ec0

00001468 <disableI2CModule>:

void disableI2CModule(uint8_t port)
{
    1468:	b570      	push	{r4, r5, r6, lr}

	switch(port)
    146a:	2802      	cmp	r0, #2
    146c:	d03c      	beq.n	14e8 <disableI2CModule+0x80>
    146e:	d91e      	bls.n	14ae <disableI2CModule+0x46>
    1470:	2803      	cmp	r0, #3
    1472:	d054      	beq.n	151e <disableI2CModule+0xb6>
    1474:	2804      	cmp	r0, #4
    1476:	d136      	bne.n	14e6 <disableI2CModule+0x7e>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1478:	4d36      	ldr	r5, [pc, #216]	; (1554 <disableI2CModule+0xec>)
    147a:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    147c:	0020      	movs	r0, r4
    147e:	4b36      	ldr	r3, [pc, #216]	; (1558 <disableI2CModule+0xf0>)
    1480:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1482:	231f      	movs	r3, #31
    1484:	4018      	ands	r0, r3
    1486:	2601      	movs	r6, #1
    1488:	0031      	movs	r1, r6
    148a:	4081      	lsls	r1, r0
    148c:	3361      	adds	r3, #97	; 0x61
    148e:	4a33      	ldr	r2, [pc, #204]	; (155c <disableI2CModule+0xf4>)
    1490:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    1492:	0028      	movs	r0, r5
    1494:	4b32      	ldr	r3, [pc, #200]	; (1560 <disableI2CModule+0xf8>)
    1496:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1498:	2383      	movs	r3, #131	; 0x83
    149a:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    149c:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    149e:	6823      	ldr	r3, [r4, #0]
    14a0:	2202      	movs	r2, #2
    14a2:	4393      	bics	r3, r2
    14a4:	6023      	str	r3, [r4, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as disabled */
	module->enabled_callback &= ~(1 << callback_type);
    14a6:	7e6b      	ldrb	r3, [r5, #25]
    14a8:	43b3      	bics	r3, r6
    14aa:	766b      	strb	r3, [r5, #25]
		
		default:
			break;
	}
	
}
    14ac:	e01b      	b.n	14e6 <disableI2CModule+0x7e>
	switch(port)
    14ae:	2801      	cmp	r0, #1
    14b0:	d119      	bne.n	14e6 <disableI2CModule+0x7e>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14b2:	4d2c      	ldr	r5, [pc, #176]	; (1564 <disableI2CModule+0xfc>)
    14b4:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    14b6:	0020      	movs	r0, r4
    14b8:	4b27      	ldr	r3, [pc, #156]	; (1558 <disableI2CModule+0xf0>)
    14ba:	4798      	blx	r3
    14bc:	231f      	movs	r3, #31
    14be:	4018      	ands	r0, r3
    14c0:	2601      	movs	r6, #1
    14c2:	0031      	movs	r1, r6
    14c4:	4081      	lsls	r1, r0
    14c6:	3361      	adds	r3, #97	; 0x61
    14c8:	4a24      	ldr	r2, [pc, #144]	; (155c <disableI2CModule+0xf4>)
    14ca:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    14cc:	0028      	movs	r0, r5
    14ce:	4b24      	ldr	r3, [pc, #144]	; (1560 <disableI2CModule+0xf8>)
    14d0:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    14d2:	2383      	movs	r3, #131	; 0x83
    14d4:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    14d6:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    14d8:	6823      	ldr	r3, [r4, #0]
    14da:	2202      	movs	r2, #2
    14dc:	4393      	bics	r3, r2
    14de:	6023      	str	r3, [r4, #0]
    14e0:	7e6b      	ldrb	r3, [r5, #25]
    14e2:	43b3      	bics	r3, r6
    14e4:	766b      	strb	r3, [r5, #25]
}
    14e6:	bd70      	pop	{r4, r5, r6, pc}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14e8:	4d1f      	ldr	r5, [pc, #124]	; (1568 <disableI2CModule+0x100>)
    14ea:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    14ec:	0020      	movs	r0, r4
    14ee:	4b1a      	ldr	r3, [pc, #104]	; (1558 <disableI2CModule+0xf0>)
    14f0:	4798      	blx	r3
    14f2:	231f      	movs	r3, #31
    14f4:	4018      	ands	r0, r3
    14f6:	2601      	movs	r6, #1
    14f8:	0031      	movs	r1, r6
    14fa:	4081      	lsls	r1, r0
    14fc:	3361      	adds	r3, #97	; 0x61
    14fe:	4a17      	ldr	r2, [pc, #92]	; (155c <disableI2CModule+0xf4>)
    1500:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    1502:	0028      	movs	r0, r5
    1504:	4b16      	ldr	r3, [pc, #88]	; (1560 <disableI2CModule+0xf8>)
    1506:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1508:	2383      	movs	r3, #131	; 0x83
    150a:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    150c:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    150e:	6823      	ldr	r3, [r4, #0]
    1510:	2202      	movs	r2, #2
    1512:	4393      	bics	r3, r2
    1514:	6023      	str	r3, [r4, #0]
    1516:	7e6b      	ldrb	r3, [r5, #25]
    1518:	43b3      	bics	r3, r6
    151a:	766b      	strb	r3, [r5, #25]
    151c:	e7e3      	b.n	14e6 <disableI2CModule+0x7e>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    151e:	4d13      	ldr	r5, [pc, #76]	; (156c <disableI2CModule+0x104>)
    1520:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1522:	0020      	movs	r0, r4
    1524:	4b0c      	ldr	r3, [pc, #48]	; (1558 <disableI2CModule+0xf0>)
    1526:	4798      	blx	r3
    1528:	231f      	movs	r3, #31
    152a:	4018      	ands	r0, r3
    152c:	2601      	movs	r6, #1
    152e:	0031      	movs	r1, r6
    1530:	4081      	lsls	r1, r0
    1532:	3361      	adds	r3, #97	; 0x61
    1534:	4a09      	ldr	r2, [pc, #36]	; (155c <disableI2CModule+0xf4>)
    1536:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    1538:	0028      	movs	r0, r5
    153a:	4b09      	ldr	r3, [pc, #36]	; (1560 <disableI2CModule+0xf8>)
    153c:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    153e:	2383      	movs	r3, #131	; 0x83
    1540:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1542:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1544:	6823      	ldr	r3, [r4, #0]
    1546:	2202      	movs	r2, #2
    1548:	4393      	bics	r3, r2
    154a:	6023      	str	r3, [r4, #0]
    154c:	7e6b      	ldrb	r3, [r5, #25]
    154e:	43b3      	bics	r3, r6
    1550:	766b      	strb	r3, [r5, #25]
    1552:	e7c8      	b.n	14e6 <disableI2CModule+0x7e>
    1554:	20000e98 	.word	0x20000e98
    1558:	00002135 	.word	0x00002135
    155c:	e000e100 	.word	0xe000e100
    1560:	00000e99 	.word	0x00000e99
    1564:	20000e58 	.word	0x20000e58
    1568:	20000e18 	.word	0x20000e18
    156c:	20000ec0 	.word	0x20000ec0

00001570 <checkSendOutputs>:
static bool timerOutput = false;

extern volatile struct outputPorts  outputPort[4];

void checkSendOutputs()
{
    1570:	b5f0      	push	{r4, r5, r6, r7, lr}
    1572:	46d6      	mov	lr, sl
    1574:	464f      	mov	r7, r9
    1576:	b580      	push	{r7, lr}
    1578:	b085      	sub	sp, #20
	uint8_t i =0;
	uint8_t temp =0;
	static uint8_t rd_buffer[20] ;
	
	if(readySendI2CRead == true)
    157a:	4b20      	ldr	r3, [pc, #128]	; (15fc <checkSendOutputs+0x8c>)
    157c:	781b      	ldrb	r3, [r3, #0]
    157e:	2b00      	cmp	r3, #0
    1580:	d037      	beq.n	15f2 <checkSendOutputs+0x82>
	{
		readySendI2CRead = false;
    1582:	2200      	movs	r2, #0
    1584:	4b1d      	ldr	r3, [pc, #116]	; (15fc <checkSendOutputs+0x8c>)
    1586:	701a      	strb	r2, [r3, #0]
    1588:	4f1d      	ldr	r7, [pc, #116]	; (1600 <checkSendOutputs+0x90>)
    158a:	2401      	movs	r4, #1
    158c:	2600      	movs	r6, #0
		for(i=0;i<NO_OUTPUTS;i++)
		{
			if(outputPort[i].currentState != NOTHINGCONNECTED)
    158e:	4d1d      	ldr	r5, [pc, #116]	; (1604 <checkSendOutputs+0x94>)
    1590:	e005      	b.n	159e <checkSendOutputs+0x2e>
    1592:	3601      	adds	r6, #1
    1594:	3401      	adds	r4, #1
    1596:	b2e4      	uxtb	r4, r4
    1598:	3705      	adds	r7, #5
		for(i=0;i<NO_OUTPUTS;i++)
    159a:	2c05      	cmp	r4, #5
    159c:	d029      	beq.n	15f2 <checkSendOutputs+0x82>
			if(outputPort[i].currentState != NOTHINGCONNECTED)
    159e:	00f3      	lsls	r3, r6, #3
    15a0:	18eb      	adds	r3, r5, r3
    15a2:	785b      	ldrb	r3, [r3, #1]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d0f4      	beq.n	1592 <checkSendOutputs+0x22>
			{
				switch(outputPort[i].currentState)
    15a8:	00f3      	lsls	r3, r6, #3
    15aa:	4916      	ldr	r1, [pc, #88]	; (1604 <checkSendOutputs+0x94>)
    15ac:	468c      	mov	ip, r1
    15ae:	4463      	add	r3, ip
    15b0:	785b      	ldrb	r3, [r3, #1]
    15b2:	2b03      	cmp	r3, #3
    15b4:	d1ed      	bne.n	1592 <checkSendOutputs+0x22>
					case OUTPUT_LEDMATRIX:
						
						//Read the dial values regularly 
						//if(i == 3)
						//{
						sensorOutputs[20 + i*5]		=	 i + 4;
    15b6:	1ce3      	adds	r3, r4, #3
    15b8:	b2db      	uxtb	r3, r3
    15ba:	4699      	mov	r9, r3
    15bc:	753b      	strb	r3, [r7, #20]
						struct i2c_master_packet rd_packet = {
							.address		 = outputPort[i].address, 
    15be:	00f2      	lsls	r2, r6, #3
    15c0:	5c53      	ldrb	r3, [r2, r1]
						struct i2c_master_packet rd_packet = {
    15c2:	a901      	add	r1, sp, #4
    15c4:	800b      	strh	r3, [r1, #0]
							.data_length	 = outputPort[i].readDataLength,
    15c6:	4462      	add	r2, ip
    15c8:	78d3      	ldrb	r3, [r2, #3]
						struct i2c_master_packet rd_packet = {
    15ca:	804b      	strh	r3, [r1, #2]
    15cc:	4b0e      	ldr	r3, [pc, #56]	; (1608 <checkSendOutputs+0x98>)
    15ce:	469a      	mov	sl, r3
    15d0:	604b      	str	r3, [r1, #4]
    15d2:	2300      	movs	r3, #0
    15d4:	720b      	strb	r3, [r1, #8]
    15d6:	724b      	strb	r3, [r1, #9]
    15d8:	728b      	strb	r3, [r1, #10]
							.high_speed      = false,
							.hs_master_code  = 0x0,
						};
							
						//outputPort[i].I2CStatus =	BUSY_MODE; 
						I2CRead((i+1) , &rd_packet);
    15da:	0020      	movs	r0, r4
    15dc:	4b0b      	ldr	r3, [pc, #44]	; (160c <checkSendOutputs+0x9c>)
    15de:	4798      	blx	r3
						sensorOutputs[20 + i*5]		=	 i + 4;
    15e0:	464b      	mov	r3, r9
    15e2:	753b      	strb	r3, [r7, #20]
						sensorOutputs[20 + i*5 + 1] =    rd_buffer[0] ;
    15e4:	4653      	mov	r3, sl
    15e6:	781b      	ldrb	r3, [r3, #0]
    15e8:	757b      	strb	r3, [r7, #21]
						sensorOutputs[20 + i*5 + 2] = 	 rd_buffer[1] ;
    15ea:	4653      	mov	r3, sl
    15ec:	785b      	ldrb	r3, [r3, #1]
    15ee:	75bb      	strb	r3, [r7, #22]
						//delay_cycles_ms(3);
						//sensor
						//read the sensor values 
						//}
						
						break;
    15f0:	e7cf      	b.n	1592 <checkSendOutputs+0x22>
						break;
				}
			}
		}
	}
}
    15f2:	b005      	add	sp, #20
    15f4:	bc0c      	pop	{r2, r3}
    15f6:	4691      	mov	r9, r2
    15f8:	469a      	mov	sl, r3
    15fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15fc:	20000dec 	.word	0x20000dec
    1600:	20000f78 	.word	0x20000f78
    1604:	200010d4 	.word	0x200010d4
    1608:	200000d8 	.word	0x200000d8
    160c:	00000ef9 	.word	0x00000ef9

00001610 <sendInfoCallback>:
}

void sendInfoCallback()
{
	static uint8_t tempCount = 0;
	tempCount++;
    1610:	4b08      	ldr	r3, [pc, #32]	; (1634 <sendInfoCallback+0x24>)
    1612:	781b      	ldrb	r3, [r3, #0]
    1614:	3301      	adds	r3, #1
    1616:	b2db      	uxtb	r3, r3
	if(tempCount>1)
    1618:	2b01      	cmp	r3, #1
    161a:	d908      	bls.n	162e <sendInfoCallback+0x1e>
	{
		tempCount = 0;
    161c:	2200      	movs	r2, #0
    161e:	4b05      	ldr	r3, [pc, #20]	; (1634 <sendInfoCallback+0x24>)
    1620:	701a      	strb	r2, [r3, #0]
		readySendData = true;
    1622:	2301      	movs	r3, #1
    1624:	4a04      	ldr	r2, [pc, #16]	; (1638 <sendInfoCallback+0x28>)
    1626:	7013      	strb	r3, [r2, #0]
		readySendI2CRead = true;
    1628:	4a04      	ldr	r2, [pc, #16]	; (163c <sendInfoCallback+0x2c>)
    162a:	7013      	strb	r3, [r2, #0]
	}
	
	//usart_write_buffer_wait(&usart_instance, transmit_value ,VERSION_SET_LEN);
}
    162c:	4770      	bx	lr
	tempCount++;
    162e:	4a01      	ldr	r2, [pc, #4]	; (1634 <sendInfoCallback+0x24>)
    1630:	7013      	strb	r3, [r2, #0]
    1632:	e7fb      	b.n	162c <sendInfoCallback+0x1c>
    1634:	20000100 	.word	0x20000100
    1638:	20000deb 	.word	0x20000deb
    163c:	20000dec 	.word	0x20000dec

00001640 <configureTimer>:
{
    1640:	b510      	push	{r4, lr}
    1642:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1644:	aa01      	add	r2, sp, #4
    1646:	2300      	movs	r3, #0
    1648:	2100      	movs	r1, #0
    164a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    164c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    164e:	2000      	movs	r0, #0
    1650:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1652:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1654:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1656:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    1658:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    165a:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    165c:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    165e:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1660:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1662:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1664:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1666:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1668:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    166a:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0]		=		true;
    166c:	3301      	adds	r3, #1
    166e:	72d3      	strb	r3, [r2, #11]
	config_tc.counter_size						=		TC_COUNTER_SIZE_8BIT; //8
    1670:	3303      	adds	r3, #3
    1672:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source						=		GCLK_GENERATOR_3;
    1674:	3b01      	subs	r3, #1
    1676:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler					=		TC_CLOCK_PRESCALER_DIV1024; //1024
    1678:	23e0      	movs	r3, #224	; 0xe0
    167a:	00db      	lsls	r3, r3, #3
    167c:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period				=		0xFF;
    167e:	21ff      	movs	r1, #255	; 0xff
    1680:	2329      	movs	r3, #41	; 0x29
    1682:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_encoder_capture, SEND_TIMER , &config_tc);
    1684:	4c07      	ldr	r4, [pc, #28]	; (16a4 <configureTimer+0x64>)
    1686:	4908      	ldr	r1, [pc, #32]	; (16a8 <configureTimer+0x68>)
    1688:	0020      	movs	r0, r4
    168a:	4b08      	ldr	r3, [pc, #32]	; (16ac <configureTimer+0x6c>)
    168c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    168e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1690:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1692:	b25b      	sxtb	r3, r3
    1694:	2b00      	cmp	r3, #0
    1696:	dbfb      	blt.n	1690 <configureTimer+0x50>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1698:	8813      	ldrh	r3, [r2, #0]
    169a:	2102      	movs	r1, #2
    169c:	430b      	orrs	r3, r1
    169e:	8013      	strh	r3, [r2, #0]
}
    16a0:	b00e      	add	sp, #56	; 0x38
    16a2:	bd10      	pop	{r4, pc}
    16a4:	20000f1c 	.word	0x20000f1c
    16a8:	42003c00 	.word	0x42003c00
    16ac:	00000b59 	.word	0x00000b59

000016b0 <arrangeSensorData>:
{
    16b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16b2:	2300      	movs	r3, #0
		sendSensorOutputs[i]	= sensorOutputs[i];
    16b4:	4921      	ldr	r1, [pc, #132]	; (173c <arrangeSensorData+0x8c>)
    16b6:	5cca      	ldrb	r2, [r1, r3]
    16b8:	54c2      	strb	r2, [r0, r3]
    16ba:	3301      	adds	r3, #1
	for(i=0;i<4;i++)
    16bc:	2b04      	cmp	r3, #4
    16be:	d1fa      	bne.n	16b6 <arrangeSensorData+0x6>
    16c0:	2400      	movs	r4, #0
    16c2:	2500      	movs	r5, #0
		if(inputsConnected[i] != NOTHINGCONNECTED )
    16c4:	4e1e      	ldr	r6, [pc, #120]	; (1740 <arrangeSensorData+0x90>)
    16c6:	e004      	b.n	16d2 <arrangeSensorData+0x22>
			countSensorOutputs++;
    16c8:	3501      	adds	r5, #1
    16ca:	b2ed      	uxtb	r5, r5
    16cc:	3401      	adds	r4, #1
	for(i=0;i<3;i++)
    16ce:	2c03      	cmp	r4, #3
    16d0:	d014      	beq.n	16fc <arrangeSensorData+0x4c>
		if(inputsConnected[i] != NOTHINGCONNECTED )
    16d2:	5d33      	ldrb	r3, [r6, r4]
    16d4:	2b00      	cmp	r3, #0
    16d6:	d0f9      	beq.n	16cc <arrangeSensorData+0x1c>
    16d8:	00a3      	lsls	r3, r4, #2
    16da:	191b      	adds	r3, r3, r4
    16dc:	3304      	adds	r3, #4
    16de:	4a17      	ldr	r2, [pc, #92]	; (173c <arrangeSensorData+0x8c>)
    16e0:	4694      	mov	ip, r2
    16e2:	4463      	add	r3, ip
				sendSensorOutputs[countSensorOutputs*5 + j + 4] = sensorOutputs[5*i + 4+j];
    16e4:	00a9      	lsls	r1, r5, #2
    16e6:	1949      	adds	r1, r1, r5
    16e8:	1842      	adds	r2, r0, r1
    16ea:	3105      	adds	r1, #5
    16ec:	1841      	adds	r1, r0, r1
    16ee:	781f      	ldrb	r7, [r3, #0]
    16f0:	7117      	strb	r7, [r2, #4]
    16f2:	3301      	adds	r3, #1
    16f4:	3201      	adds	r2, #1
			for(j=0;j<5;j++)
    16f6:	428a      	cmp	r2, r1
    16f8:	d1f9      	bne.n	16ee <arrangeSensorData+0x3e>
    16fa:	e7e5      	b.n	16c8 <arrangeSensorData+0x18>
    16fc:	2300      	movs	r3, #0
		if(outputsConnected[i] != NOTHINGCONNECTED )
    16fe:	4c11      	ldr	r4, [pc, #68]	; (1744 <arrangeSensorData+0x94>)
    1700:	e004      	b.n	170c <arrangeSensorData+0x5c>
					countSensorOutputs++;
    1702:	3501      	adds	r5, #1
    1704:	b2ed      	uxtb	r5, r5
    1706:	3301      	adds	r3, #1
	for(i=0;i<4;i++)
    1708:	2b04      	cmp	r3, #4
    170a:	d016      	beq.n	173a <arrangeSensorData+0x8a>
			if(outputsConnected[i] == OUTPUT_LEDMATRIX)
    170c:	5ce2      	ldrb	r2, [r4, r3]
    170e:	2a03      	cmp	r2, #3
    1710:	d1f9      	bne.n	1706 <arrangeSensorData+0x56>
				if(countSensorOutputs < 3)
    1712:	2d02      	cmp	r5, #2
    1714:	d8f7      	bhi.n	1706 <arrangeSensorData+0x56>
    1716:	009a      	lsls	r2, r3, #2
    1718:	18d2      	adds	r2, r2, r3
    171a:	3214      	adds	r2, #20
    171c:	4907      	ldr	r1, [pc, #28]	; (173c <arrangeSensorData+0x8c>)
    171e:	468c      	mov	ip, r1
    1720:	4462      	add	r2, ip
						sendSensorOutputs[countSensorOutputs*5 + j + 4] = sensorOutputs[5*i + 20+j];
    1722:	00ae      	lsls	r6, r5, #2
    1724:	1976      	adds	r6, r6, r5
    1726:	1981      	adds	r1, r0, r6
    1728:	3605      	adds	r6, #5
    172a:	1986      	adds	r6, r0, r6
    172c:	7817      	ldrb	r7, [r2, #0]
    172e:	710f      	strb	r7, [r1, #4]
    1730:	3201      	adds	r2, #1
    1732:	3101      	adds	r1, #1
					for(j=0;j<5;j++)
    1734:	428e      	cmp	r6, r1
    1736:	d1f9      	bne.n	172c <arrangeSensorData+0x7c>
    1738:	e7e3      	b.n	1702 <arrangeSensorData+0x52>
}
    173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    173c:	20000f78 	.word	0x20000f78
    1740:	20000de8 	.word	0x20000de8
    1744:	20000f74 	.word	0x20000f74

00001748 <sendDataBLE>:
{
    1748:	b510      	push	{r4, lr}
	if(readySendData)
    174a:	4b09      	ldr	r3, [pc, #36]	; (1770 <sendDataBLE+0x28>)
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	2b00      	cmp	r3, #0
    1750:	d100      	bne.n	1754 <sendDataBLE+0xc>
}
    1752:	bd10      	pop	{r4, pc}
		readySendData = false;
    1754:	2200      	movs	r2, #0
    1756:	4b06      	ldr	r3, [pc, #24]	; (1770 <sendDataBLE+0x28>)
    1758:	701a      	strb	r2, [r3, #0]
		arrangeSensorData(sendSensorOutputs);
    175a:	4c06      	ldr	r4, [pc, #24]	; (1774 <sendDataBLE+0x2c>)
    175c:	0020      	movs	r0, r4
    175e:	4b06      	ldr	r3, [pc, #24]	; (1778 <sendDataBLE+0x30>)
    1760:	4798      	blx	r3
		usart_write_buffer_wait(&usart_instance, sendSensorOutputs, LENGTH_SENSORS_DATA );
    1762:	2214      	movs	r2, #20
    1764:	0021      	movs	r1, r4
    1766:	4805      	ldr	r0, [pc, #20]	; (177c <sendDataBLE+0x34>)
    1768:	4b05      	ldr	r3, [pc, #20]	; (1780 <sendDataBLE+0x38>)
    176a:	4798      	blx	r3
}
    176c:	e7f1      	b.n	1752 <sendDataBLE+0xa>
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	20000deb 	.word	0x20000deb
    1774:	200000ec 	.word	0x200000ec
    1778:	000016b1 	.word	0x000016b1
    177c:	20000ee8 	.word	0x20000ee8
    1780:	00002535 	.word	0x00002535

00001784 <configureTimerCallbacks>:


void configureTimerCallbacks()
{
    1784:	b510      	push	{r4, lr}
	tc_register_callback(&tc_encoder_capture, sendInfoCallback,TC_CALLBACK_OVERFLOW);
    1786:	4c0c      	ldr	r4, [pc, #48]	; (17b8 <configureTimerCallbacks+0x34>)
    1788:	2200      	movs	r2, #0
    178a:	490c      	ldr	r1, [pc, #48]	; (17bc <configureTimerCallbacks+0x38>)
    178c:	0020      	movs	r0, r4
    178e:	4b0c      	ldr	r3, [pc, #48]	; (17c0 <configureTimerCallbacks+0x3c>)
    1790:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1792:	6820      	ldr	r0, [r4, #0]
    1794:	4b0b      	ldr	r3, [pc, #44]	; (17c4 <configureTimerCallbacks+0x40>)
    1796:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1798:	4b0b      	ldr	r3, [pc, #44]	; (17c8 <configureTimerCallbacks+0x44>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    179a:	5c1a      	ldrb	r2, [r3, r0]
    179c:	231f      	movs	r3, #31
    179e:	4013      	ands	r3, r2
    17a0:	2201      	movs	r2, #1
    17a2:	0011      	movs	r1, r2
    17a4:	4099      	lsls	r1, r3
    17a6:	4b09      	ldr	r3, [pc, #36]	; (17cc <configureTimerCallbacks+0x48>)
    17a8:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    17aa:	7e63      	ldrb	r3, [r4, #25]
    17ac:	2101      	movs	r1, #1
    17ae:	430b      	orrs	r3, r1
    17b0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    17b2:	6823      	ldr	r3, [r4, #0]
    17b4:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_encoder_capture, TC_CALLBACK_OVERFLOW);
}
    17b6:	bd10      	pop	{r4, pc}
    17b8:	20000f1c 	.word	0x20000f1c
    17bc:	00001611 	.word	0x00001611
    17c0:	00000a35 	.word	0x00000a35
    17c4:	00000b1d 	.word	0x00000b1d
    17c8:	0000549c 	.word	0x0000549c
    17cc:	e000e100 	.word	0xe000e100

000017d0 <configureSendInfo>:


//Send data to BLE every 60msec so that notifications can be sent in a timely manner
void configureSendInfo()
{
    17d0:	b510      	push	{r4, lr}
	configureTimer();
    17d2:	4b02      	ldr	r3, [pc, #8]	; (17dc <configureSendInfo+0xc>)
    17d4:	4798      	blx	r3
	configureTimerCallbacks();
    17d6:	4b02      	ldr	r3, [pc, #8]	; (17e0 <configureSendInfo+0x10>)
    17d8:	4798      	blx	r3
    17da:	bd10      	pop	{r4, pc}
    17dc:	00001641 	.word	0x00001641
    17e0:	00001785 	.word	0x00001785

000017e4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    17e4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    17e6:	2000      	movs	r0, #0
    17e8:	4b08      	ldr	r3, [pc, #32]	; (180c <delay_init+0x28>)
    17ea:	4798      	blx	r3
    17ec:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    17ee:	4c08      	ldr	r4, [pc, #32]	; (1810 <delay_init+0x2c>)
    17f0:	21fa      	movs	r1, #250	; 0xfa
    17f2:	0089      	lsls	r1, r1, #2
    17f4:	47a0      	blx	r4
    17f6:	4b07      	ldr	r3, [pc, #28]	; (1814 <delay_init+0x30>)
    17f8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    17fa:	4907      	ldr	r1, [pc, #28]	; (1818 <delay_init+0x34>)
    17fc:	0028      	movs	r0, r5
    17fe:	47a0      	blx	r4
    1800:	4b06      	ldr	r3, [pc, #24]	; (181c <delay_init+0x38>)
    1802:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1804:	2205      	movs	r2, #5
    1806:	4b06      	ldr	r3, [pc, #24]	; (1820 <delay_init+0x3c>)
    1808:	601a      	str	r2, [r3, #0]
}
    180a:	bd70      	pop	{r4, r5, r6, pc}
    180c:	000034d9 	.word	0x000034d9
    1810:	000038c5 	.word	0x000038c5
    1814:	2000004c 	.word	0x2000004c
    1818:	000f4240 	.word	0x000f4240
    181c:	20000050 	.word	0x20000050
    1820:	e000e010 	.word	0xe000e010

00001824 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1824:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1826:	4b08      	ldr	r3, [pc, #32]	; (1848 <delay_cycles_ms+0x24>)
    1828:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    182a:	4a08      	ldr	r2, [pc, #32]	; (184c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    182c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    182e:	2180      	movs	r1, #128	; 0x80
    1830:	0249      	lsls	r1, r1, #9
	while (n--) {
    1832:	3801      	subs	r0, #1
    1834:	d307      	bcc.n	1846 <delay_cycles_ms+0x22>
	if (n > 0) {
    1836:	2c00      	cmp	r4, #0
    1838:	d0fb      	beq.n	1832 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    183a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    183c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    183e:	6813      	ldr	r3, [r2, #0]
    1840:	420b      	tst	r3, r1
    1842:	d0fc      	beq.n	183e <delay_cycles_ms+0x1a>
    1844:	e7f5      	b.n	1832 <delay_cycles_ms+0xe>
	}
}
    1846:	bd30      	pop	{r4, r5, pc}
    1848:	2000004c 	.word	0x2000004c
    184c:	e000e010 	.word	0xe000e010

00001850 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1850:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1852:	2200      	movs	r2, #0
    1854:	2300      	movs	r3, #0
    1856:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1858:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    185a:	2100      	movs	r1, #0
    185c:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    185e:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1860:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    1862:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    1864:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    1866:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    1868:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    186a:	24c0      	movs	r4, #192	; 0xc0
    186c:	0164      	lsls	r4, r4, #5
    186e:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1870:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1872:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    1874:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    1876:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    1878:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    187a:	242a      	movs	r4, #42	; 0x2a
    187c:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    187e:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1880:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1882:	3c06      	subs	r4, #6
    1884:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    1886:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    1888:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    188a:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    188c:	232b      	movs	r3, #43	; 0x2b
    188e:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    1890:	3301      	adds	r3, #1
    1892:	54c1      	strb	r1, [r0, r3]
}
    1894:	bd10      	pop	{r4, pc}
	...

00001898 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1898:	b5f0      	push	{r4, r5, r6, r7, lr}
    189a:	46d6      	mov	lr, sl
    189c:	464f      	mov	r7, r9
    189e:	4646      	mov	r6, r8
    18a0:	b5c0      	push	{r6, r7, lr}
    18a2:	b096      	sub	sp, #88	; 0x58
    18a4:	0007      	movs	r7, r0
    18a6:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    18a8:	6001      	str	r1, [r0, #0]
    18aa:	4ac6      	ldr	r2, [pc, #792]	; (1bc4 <adc_init+0x32c>)
    18ac:	6a10      	ldr	r0, [r2, #32]
    18ae:	2380      	movs	r3, #128	; 0x80
    18b0:	025b      	lsls	r3, r3, #9
    18b2:	4303      	orrs	r3, r0
    18b4:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    18b6:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    18b8:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    18ba:	07db      	lsls	r3, r3, #31
    18bc:	d505      	bpl.n	18ca <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    18be:	b016      	add	sp, #88	; 0x58
    18c0:	bc1c      	pop	{r2, r3, r4}
    18c2:	4690      	mov	r8, r2
    18c4:	4699      	mov	r9, r3
    18c6:	46a2      	mov	sl, r4
    18c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    18ca:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    18cc:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    18ce:	079b      	lsls	r3, r3, #30
    18d0:	d4f5      	bmi.n	18be <adc_init+0x26>
	module_inst->reference = config->reference;
    18d2:	7873      	ldrb	r3, [r6, #1]
    18d4:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    18d6:	2b00      	cmp	r3, #0
    18d8:	d104      	bne.n	18e4 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    18da:	4abb      	ldr	r2, [pc, #748]	; (1bc8 <adc_init+0x330>)
    18dc:	6c13      	ldr	r3, [r2, #64]	; 0x40
    18de:	2104      	movs	r1, #4
    18e0:	430b      	orrs	r3, r1
    18e2:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    18e4:	2300      	movs	r3, #0
    18e6:	60bb      	str	r3, [r7, #8]
    18e8:	60fb      	str	r3, [r7, #12]
    18ea:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    18ec:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    18ee:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    18f0:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    18f2:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    18f4:	4bb5      	ldr	r3, [pc, #724]	; (1bcc <adc_init+0x334>)
    18f6:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    18f8:	232a      	movs	r3, #42	; 0x2a
    18fa:	5cf3      	ldrb	r3, [r6, r3]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d105      	bne.n	190c <adc_init+0x74>
    1900:	7d33      	ldrb	r3, [r6, #20]
    1902:	2b00      	cmp	r3, #0
    1904:	d102      	bne.n	190c <adc_init+0x74>
		module_inst->software_trigger = true;
    1906:	3301      	adds	r3, #1
    1908:	777b      	strb	r3, [r7, #29]
    190a:	e001      	b.n	1910 <adc_init+0x78>
		module_inst->software_trigger = false;
    190c:	2300      	movs	r3, #0
    190e:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1910:	683b      	ldr	r3, [r7, #0]
    1912:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1914:	7833      	ldrb	r3, [r6, #0]
    1916:	466a      	mov	r2, sp
    1918:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    191a:	4669      	mov	r1, sp
    191c:	201e      	movs	r0, #30
    191e:	4bac      	ldr	r3, [pc, #688]	; (1bd0 <adc_init+0x338>)
    1920:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1922:	201e      	movs	r0, #30
    1924:	4bab      	ldr	r3, [pc, #684]	; (1bd4 <adc_init+0x33c>)
    1926:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    1928:	232c      	movs	r3, #44	; 0x2c
    192a:	5cf2      	ldrb	r2, [r6, r3]
    192c:	2a00      	cmp	r2, #0
    192e:	d054      	beq.n	19da <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1930:	3b01      	subs	r3, #1
    1932:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1934:	7b33      	ldrb	r3, [r6, #12]
    1936:	18eb      	adds	r3, r5, r3
    1938:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    193a:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    193c:	b2c9      	uxtb	r1, r1
    193e:	428b      	cmp	r3, r1
    1940:	d221      	bcs.n	1986 <adc_init+0xee>
    1942:	1952      	adds	r2, r2, r5
    1944:	b2d3      	uxtb	r3, r2
    1946:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    1948:	4ba3      	ldr	r3, [pc, #652]	; (1bd8 <adc_init+0x340>)
    194a:	469a      	mov	sl, r3
    194c:	e003      	b.n	1956 <adc_init+0xbe>
			offset++;
    194e:	3501      	adds	r5, #1
    1950:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1952:	454d      	cmp	r5, r9
    1954:	d017      	beq.n	1986 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1956:	240f      	movs	r4, #15
    1958:	402c      	ands	r4, r5
    195a:	7b33      	ldrb	r3, [r6, #12]
    195c:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    195e:	2250      	movs	r2, #80	; 0x50
    1960:	499e      	ldr	r1, [pc, #632]	; (1bdc <adc_init+0x344>)
    1962:	a802      	add	r0, sp, #8
    1964:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1966:	2c13      	cmp	r4, #19
    1968:	d8f1      	bhi.n	194e <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    196a:	00a4      	lsls	r4, r4, #2
    196c:	ab02      	add	r3, sp, #8
    196e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1970:	a901      	add	r1, sp, #4
    1972:	2300      	movs	r3, #0
    1974:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1976:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1978:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    197a:	3301      	adds	r3, #1
    197c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    197e:	b2c0      	uxtb	r0, r0
    1980:	4b97      	ldr	r3, [pc, #604]	; (1be0 <adc_init+0x348>)
    1982:	4798      	blx	r3
    1984:	e7e3      	b.n	194e <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    1986:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1988:	2250      	movs	r2, #80	; 0x50
    198a:	4994      	ldr	r1, [pc, #592]	; (1bdc <adc_init+0x344>)
    198c:	a802      	add	r0, sp, #8
    198e:	4b92      	ldr	r3, [pc, #584]	; (1bd8 <adc_init+0x340>)
    1990:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1992:	2c13      	cmp	r4, #19
    1994:	d913      	bls.n	19be <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1996:	7d73      	ldrb	r3, [r6, #21]
    1998:	009b      	lsls	r3, r3, #2
    199a:	b2db      	uxtb	r3, r3
    199c:	4642      	mov	r2, r8
    199e:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    19a0:	7db3      	ldrb	r3, [r6, #22]
    19a2:	01db      	lsls	r3, r3, #7
    19a4:	7872      	ldrb	r2, [r6, #1]
    19a6:	4313      	orrs	r3, r2
    19a8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    19aa:	4642      	mov	r2, r8
    19ac:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    19ae:	7933      	ldrb	r3, [r6, #4]
    19b0:	2b34      	cmp	r3, #52	; 0x34
    19b2:	d900      	bls.n	19b6 <adc_init+0x11e>
    19b4:	e17b      	b.n	1cae <adc_init+0x416>
    19b6:	009b      	lsls	r3, r3, #2
    19b8:	4a8a      	ldr	r2, [pc, #552]	; (1be4 <adc_init+0x34c>)
    19ba:	58d3      	ldr	r3, [r2, r3]
    19bc:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    19be:	00a4      	lsls	r4, r4, #2
    19c0:	ab02      	add	r3, sp, #8
    19c2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    19c4:	a901      	add	r1, sp, #4
    19c6:	2300      	movs	r3, #0
    19c8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    19ca:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    19cc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    19ce:	3301      	adds	r3, #1
    19d0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    19d2:	b2c0      	uxtb	r0, r0
    19d4:	4b82      	ldr	r3, [pc, #520]	; (1be0 <adc_init+0x348>)
    19d6:	4798      	blx	r3
    19d8:	e7dd      	b.n	1996 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    19da:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    19dc:	2250      	movs	r2, #80	; 0x50
    19de:	497f      	ldr	r1, [pc, #508]	; (1bdc <adc_init+0x344>)
    19e0:	a802      	add	r0, sp, #8
    19e2:	4b7d      	ldr	r3, [pc, #500]	; (1bd8 <adc_init+0x340>)
    19e4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    19e6:	2c13      	cmp	r4, #19
    19e8:	d915      	bls.n	1a16 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    19ea:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    19ec:	2250      	movs	r2, #80	; 0x50
    19ee:	497b      	ldr	r1, [pc, #492]	; (1bdc <adc_init+0x344>)
    19f0:	a802      	add	r0, sp, #8
    19f2:	4b79      	ldr	r3, [pc, #484]	; (1bd8 <adc_init+0x340>)
    19f4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    19f6:	2c13      	cmp	r4, #19
    19f8:	d8cd      	bhi.n	1996 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    19fa:	00a4      	lsls	r4, r4, #2
    19fc:	ab02      	add	r3, sp, #8
    19fe:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1a00:	a901      	add	r1, sp, #4
    1a02:	2300      	movs	r3, #0
    1a04:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1a06:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1a08:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1a0a:	3301      	adds	r3, #1
    1a0c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1a0e:	b2c0      	uxtb	r0, r0
    1a10:	4b73      	ldr	r3, [pc, #460]	; (1be0 <adc_init+0x348>)
    1a12:	4798      	blx	r3
    1a14:	e7bf      	b.n	1996 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1a16:	00a4      	lsls	r4, r4, #2
    1a18:	ab02      	add	r3, sp, #8
    1a1a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1a1c:	a901      	add	r1, sp, #4
    1a1e:	2300      	movs	r3, #0
    1a20:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1a22:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1a24:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1a26:	3301      	adds	r3, #1
    1a28:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1a2a:	b2c0      	uxtb	r0, r0
    1a2c:	4b6c      	ldr	r3, [pc, #432]	; (1be0 <adc_init+0x348>)
    1a2e:	4798      	blx	r3
    1a30:	e7db      	b.n	19ea <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1a32:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1a34:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    1a36:	2102      	movs	r1, #2
    1a38:	e01a      	b.n	1a70 <adc_init+0x1d8>
		adjres = config->divide_result;
    1a3a:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1a3c:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1a3e:	2410      	movs	r4, #16
    1a40:	e016      	b.n	1a70 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1a42:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1a44:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1a46:	2101      	movs	r1, #1
    1a48:	e012      	b.n	1a70 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    1a4a:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1a4c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1a4e:	2100      	movs	r1, #0
    1a50:	e00e      	b.n	1a70 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1a52:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1a54:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    1a56:	2100      	movs	r1, #0
    1a58:	e00a      	b.n	1a70 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1a5a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1a5c:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    1a5e:	2100      	movs	r1, #0
    1a60:	e006      	b.n	1a70 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1a62:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1a64:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    1a66:	2100      	movs	r1, #0
    1a68:	e002      	b.n	1a70 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    1a6a:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    1a6c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1a6e:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1a70:	0109      	lsls	r1, r1, #4
    1a72:	2270      	movs	r2, #112	; 0x70
    1a74:	400a      	ands	r2, r1
    1a76:	4313      	orrs	r3, r2
    1a78:	4642      	mov	r2, r8
    1a7a:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    1a7c:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    1a7e:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    1a80:	2b3f      	cmp	r3, #63	; 0x3f
    1a82:	d900      	bls.n	1a86 <adc_init+0x1ee>
    1a84:	e71b      	b.n	18be <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    1a86:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1a88:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1a8a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1a8c:	b25b      	sxtb	r3, r3
    1a8e:	2b00      	cmp	r3, #0
    1a90:	dbfb      	blt.n	1a8a <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1a92:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1a94:	8872      	ldrh	r2, [r6, #2]
    1a96:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1a98:	2224      	movs	r2, #36	; 0x24
    1a9a:	5cb2      	ldrb	r2, [r6, r2]
    1a9c:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1a9e:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1aa0:	7d32      	ldrb	r2, [r6, #20]
    1aa2:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1aa4:	4313      	orrs	r3, r2
    1aa6:	7cb2      	ldrb	r2, [r6, #18]
    1aa8:	0052      	lsls	r2, r2, #1
    1aaa:	4313      	orrs	r3, r2
    1aac:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    1aae:	4642      	mov	r2, r8
    1ab0:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1ab2:	7e33      	ldrb	r3, [r6, #24]
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d020      	beq.n	1afa <adc_init+0x262>
		switch (resolution) {
    1ab8:	2c10      	cmp	r4, #16
    1aba:	d100      	bne.n	1abe <adc_init+0x226>
    1abc:	e0d9      	b.n	1c72 <adc_init+0x3da>
    1abe:	d800      	bhi.n	1ac2 <adc_init+0x22a>
    1ac0:	e098      	b.n	1bf4 <adc_init+0x35c>
    1ac2:	2c20      	cmp	r4, #32
    1ac4:	d100      	bne.n	1ac8 <adc_init+0x230>
    1ac6:	e0b6      	b.n	1c36 <adc_init+0x39e>
    1ac8:	2c30      	cmp	r4, #48	; 0x30
    1aca:	d116      	bne.n	1afa <adc_init+0x262>
			if (config->differential_mode &&
    1acc:	7cf2      	ldrb	r2, [r6, #19]
    1ace:	2a00      	cmp	r2, #0
    1ad0:	d00a      	beq.n	1ae8 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1ad2:	69f2      	ldr	r2, [r6, #28]
    1ad4:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    1ad6:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1ad8:	2aff      	cmp	r2, #255	; 0xff
    1ada:	d900      	bls.n	1ade <adc_init+0x246>
    1adc:	e6ef      	b.n	18be <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    1ade:	6a32      	ldr	r2, [r6, #32]
    1ae0:	3280      	adds	r2, #128	; 0x80
    1ae2:	2aff      	cmp	r2, #255	; 0xff
    1ae4:	d900      	bls.n	1ae8 <adc_init+0x250>
    1ae6:	e6ea      	b.n	18be <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    1ae8:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    1aea:	69f2      	ldr	r2, [r6, #28]
    1aec:	2aff      	cmp	r2, #255	; 0xff
    1aee:	dd00      	ble.n	1af2 <adc_init+0x25a>
    1af0:	e6e5      	b.n	18be <adc_init+0x26>
    1af2:	6a32      	ldr	r2, [r6, #32]
    1af4:	2aff      	cmp	r2, #255	; 0xff
    1af6:	dd00      	ble.n	1afa <adc_init+0x262>
    1af8:	e6e1      	b.n	18be <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1afa:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1afc:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1afe:	b252      	sxtb	r2, r2
    1b00:	2a00      	cmp	r2, #0
    1b02:	dbfb      	blt.n	1afc <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1b04:	4642      	mov	r2, r8
    1b06:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    1b08:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b0a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1b0c:	b25b      	sxtb	r3, r3
    1b0e:	2b00      	cmp	r3, #0
    1b10:	dbfb      	blt.n	1b0a <adc_init+0x272>
	adc_module->WINLT.reg =
    1b12:	8bb3      	ldrh	r3, [r6, #28]
    1b14:	4642      	mov	r2, r8
    1b16:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    1b18:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b1a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1b1c:	b25b      	sxtb	r3, r3
    1b1e:	2b00      	cmp	r3, #0
    1b20:	dbfb      	blt.n	1b1a <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1b22:	8c33      	ldrh	r3, [r6, #32]
    1b24:	4642      	mov	r2, r8
    1b26:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1b28:	232c      	movs	r3, #44	; 0x2c
    1b2a:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d005      	beq.n	1b3c <adc_init+0x2a4>
		inputs_to_scan--;
    1b30:	3b01      	subs	r3, #1
    1b32:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1b34:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1b36:	2b0f      	cmp	r3, #15
    1b38:	d900      	bls.n	1b3c <adc_init+0x2a4>
    1b3a:	e6c0      	b.n	18be <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1b3c:	222b      	movs	r2, #43	; 0x2b
    1b3e:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1b40:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1b42:	290f      	cmp	r1, #15
    1b44:	d900      	bls.n	1b48 <adc_init+0x2b0>
    1b46:	e6ba      	b.n	18be <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1b48:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b4a:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1b4c:	b252      	sxtb	r2, r2
    1b4e:	2a00      	cmp	r2, #0
    1b50:	dbfb      	blt.n	1b4a <adc_init+0x2b2>
			config->negative_input |
    1b52:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1b54:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    1b56:	4302      	orrs	r2, r0
    1b58:	68b0      	ldr	r0, [r6, #8]
    1b5a:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    1b5c:	0509      	lsls	r1, r1, #20
			config->negative_input |
    1b5e:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1b60:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1b62:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1b64:	4642      	mov	r2, r8
    1b66:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    1b68:	232a      	movs	r3, #42	; 0x2a
    1b6a:	5cf3      	ldrb	r3, [r6, r3]
    1b6c:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    1b6e:	230f      	movs	r3, #15
    1b70:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1b72:	3315      	adds	r3, #21
    1b74:	5cf3      	ldrb	r3, [r6, r3]
    1b76:	2b00      	cmp	r3, #0
    1b78:	d012      	beq.n	1ba0 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1b7a:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    1b7c:	4a1a      	ldr	r2, [pc, #104]	; (1be8 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    1b7e:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1b80:	4293      	cmp	r3, r2
    1b82:	d900      	bls.n	1b86 <adc_init+0x2ee>
    1b84:	e69b      	b.n	18be <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1b86:	4642      	mov	r2, r8
    1b88:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    1b8a:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    1b8c:	2380      	movs	r3, #128	; 0x80
    1b8e:	011b      	lsls	r3, r3, #4
    1b90:	18d3      	adds	r3, r2, r3
    1b92:	4915      	ldr	r1, [pc, #84]	; (1be8 <adc_init+0x350>)
    1b94:	b29b      	uxth	r3, r3
    1b96:	428b      	cmp	r3, r1
    1b98:	d900      	bls.n	1b9c <adc_init+0x304>
    1b9a:	e690      	b.n	18be <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1b9c:	4643      	mov	r3, r8
    1b9e:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1ba0:	4b12      	ldr	r3, [pc, #72]	; (1bec <adc_init+0x354>)
    1ba2:	681b      	ldr	r3, [r3, #0]
    1ba4:	015b      	lsls	r3, r3, #5
    1ba6:	22e0      	movs	r2, #224	; 0xe0
    1ba8:	00d2      	lsls	r2, r2, #3
    1baa:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    1bac:	4a10      	ldr	r2, [pc, #64]	; (1bf0 <adc_init+0x358>)
    1bae:	6851      	ldr	r1, [r2, #4]
    1bb0:	0149      	lsls	r1, r1, #5
    1bb2:	6812      	ldr	r2, [r2, #0]
    1bb4:	0ed2      	lsrs	r2, r2, #27
    1bb6:	430a      	orrs	r2, r1
    1bb8:	b2d2      	uxtb	r2, r2
			) |
    1bba:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1bbc:	4642      	mov	r2, r8
    1bbe:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    1bc0:	2000      	movs	r0, #0
    1bc2:	e67c      	b.n	18be <adc_init+0x26>
    1bc4:	40000400 	.word	0x40000400
    1bc8:	40000800 	.word	0x40000800
    1bcc:	20000f38 	.word	0x20000f38
    1bd0:	000035f1 	.word	0x000035f1
    1bd4:	00003565 	.word	0x00003565
    1bd8:	00005355 	.word	0x00005355
    1bdc:	00005578 	.word	0x00005578
    1be0:	000036e9 	.word	0x000036e9
    1be4:	000054a4 	.word	0x000054a4
    1be8:	00000fff 	.word	0x00000fff
    1bec:	00806024 	.word	0x00806024
    1bf0:	00806020 	.word	0x00806020
		switch (resolution) {
    1bf4:	2c00      	cmp	r4, #0
    1bf6:	d000      	beq.n	1bfa <adc_init+0x362>
    1bf8:	e77f      	b.n	1afa <adc_init+0x262>
			if (config->differential_mode &&
    1bfa:	7cf2      	ldrb	r2, [r6, #19]
    1bfc:	2a00      	cmp	r2, #0
    1bfe:	d00f      	beq.n	1c20 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    1c00:	69f2      	ldr	r2, [r6, #28]
    1c02:	2180      	movs	r1, #128	; 0x80
    1c04:	0109      	lsls	r1, r1, #4
    1c06:	468c      	mov	ip, r1
    1c08:	4462      	add	r2, ip
			if (config->differential_mode &&
    1c0a:	492a      	ldr	r1, [pc, #168]	; (1cb4 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1c0c:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1c0e:	428a      	cmp	r2, r1
    1c10:	d900      	bls.n	1c14 <adc_init+0x37c>
    1c12:	e654      	b.n	18be <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1c14:	6a32      	ldr	r2, [r6, #32]
    1c16:	4462      	add	r2, ip
    1c18:	4926      	ldr	r1, [pc, #152]	; (1cb4 <adc_init+0x41c>)
    1c1a:	428a      	cmp	r2, r1
    1c1c:	d900      	bls.n	1c20 <adc_init+0x388>
    1c1e:	e64e      	b.n	18be <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    1c20:	4a24      	ldr	r2, [pc, #144]	; (1cb4 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1c22:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1c24:	69f1      	ldr	r1, [r6, #28]
    1c26:	4291      	cmp	r1, r2
    1c28:	dd00      	ble.n	1c2c <adc_init+0x394>
    1c2a:	e648      	b.n	18be <adc_init+0x26>
    1c2c:	6a31      	ldr	r1, [r6, #32]
    1c2e:	4291      	cmp	r1, r2
    1c30:	dd00      	ble.n	1c34 <adc_init+0x39c>
    1c32:	e644      	b.n	18be <adc_init+0x26>
    1c34:	e761      	b.n	1afa <adc_init+0x262>
			if (config->differential_mode &&
    1c36:	7cf2      	ldrb	r2, [r6, #19]
    1c38:	2a00      	cmp	r2, #0
    1c3a:	d00f      	beq.n	1c5c <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    1c3c:	69f2      	ldr	r2, [r6, #28]
    1c3e:	2180      	movs	r1, #128	; 0x80
    1c40:	0089      	lsls	r1, r1, #2
    1c42:	468c      	mov	ip, r1
    1c44:	4462      	add	r2, ip
			if (config->differential_mode &&
    1c46:	491c      	ldr	r1, [pc, #112]	; (1cb8 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1c48:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1c4a:	428a      	cmp	r2, r1
    1c4c:	d900      	bls.n	1c50 <adc_init+0x3b8>
    1c4e:	e636      	b.n	18be <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    1c50:	6a32      	ldr	r2, [r6, #32]
    1c52:	4462      	add	r2, ip
    1c54:	4918      	ldr	r1, [pc, #96]	; (1cb8 <adc_init+0x420>)
    1c56:	428a      	cmp	r2, r1
    1c58:	d900      	bls.n	1c5c <adc_init+0x3c4>
    1c5a:	e630      	b.n	18be <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1c5c:	4a16      	ldr	r2, [pc, #88]	; (1cb8 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1c5e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    1c60:	69f1      	ldr	r1, [r6, #28]
    1c62:	4291      	cmp	r1, r2
    1c64:	dd00      	ble.n	1c68 <adc_init+0x3d0>
    1c66:	e62a      	b.n	18be <adc_init+0x26>
    1c68:	6a31      	ldr	r1, [r6, #32]
    1c6a:	4291      	cmp	r1, r2
    1c6c:	dd00      	ble.n	1c70 <adc_init+0x3d8>
    1c6e:	e626      	b.n	18be <adc_init+0x26>
    1c70:	e743      	b.n	1afa <adc_init+0x262>
			if (config->differential_mode &&
    1c72:	7cf2      	ldrb	r2, [r6, #19]
    1c74:	2a00      	cmp	r2, #0
    1c76:	d00f      	beq.n	1c98 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    1c78:	69f2      	ldr	r2, [r6, #28]
    1c7a:	2180      	movs	r1, #128	; 0x80
    1c7c:	0209      	lsls	r1, r1, #8
    1c7e:	468c      	mov	ip, r1
    1c80:	4462      	add	r2, ip
			if (config->differential_mode &&
    1c82:	490e      	ldr	r1, [pc, #56]	; (1cbc <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1c84:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1c86:	428a      	cmp	r2, r1
    1c88:	d900      	bls.n	1c8c <adc_init+0x3f4>
    1c8a:	e618      	b.n	18be <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    1c8c:	6a32      	ldr	r2, [r6, #32]
    1c8e:	4462      	add	r2, ip
    1c90:	490a      	ldr	r1, [pc, #40]	; (1cbc <adc_init+0x424>)
    1c92:	428a      	cmp	r2, r1
    1c94:	d900      	bls.n	1c98 <adc_init+0x400>
    1c96:	e612      	b.n	18be <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    1c98:	4a08      	ldr	r2, [pc, #32]	; (1cbc <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1c9a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    1c9c:	69f1      	ldr	r1, [r6, #28]
    1c9e:	4291      	cmp	r1, r2
    1ca0:	dd00      	ble.n	1ca4 <adc_init+0x40c>
    1ca2:	e60c      	b.n	18be <adc_init+0x26>
    1ca4:	6a31      	ldr	r1, [r6, #32]
    1ca6:	4291      	cmp	r1, r2
    1ca8:	dd00      	ble.n	1cac <adc_init+0x414>
    1caa:	e608      	b.n	18be <adc_init+0x26>
    1cac:	e725      	b.n	1afa <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    1cae:	2017      	movs	r0, #23
    1cb0:	e605      	b.n	18be <adc_init+0x26>
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	00000fff 	.word	0x00000fff
    1cb8:	000003ff 	.word	0x000003ff
    1cbc:	0000ffff 	.word	0x0000ffff

00001cc0 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1cc0:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1cc2:	4b2e      	ldr	r3, [pc, #184]	; (1d7c <ADC_Handler+0xbc>)
    1cc4:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    1cc6:	6823      	ldr	r3, [r4, #0]
    1cc8:	7e1d      	ldrb	r5, [r3, #24]
    1cca:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    1ccc:	07ea      	lsls	r2, r5, #31
    1cce:	d505      	bpl.n	1cdc <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1cd0:	7ee2      	ldrb	r2, [r4, #27]
    1cd2:	07d2      	lsls	r2, r2, #31
    1cd4:	d502      	bpl.n	1cdc <ADC_Handler+0x1c>
    1cd6:	7ea2      	ldrb	r2, [r4, #26]
    1cd8:	07d2      	lsls	r2, r2, #31
    1cda:	d416      	bmi.n	1d0a <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    1cdc:	076b      	lsls	r3, r5, #29
    1cde:	d508      	bpl.n	1cf2 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1ce0:	2304      	movs	r3, #4
    1ce2:	6822      	ldr	r2, [r4, #0]
    1ce4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1ce6:	7ee3      	ldrb	r3, [r4, #27]
    1ce8:	079b      	lsls	r3, r3, #30
    1cea:	d502      	bpl.n	1cf2 <ADC_Handler+0x32>
    1cec:	7ea3      	ldrb	r3, [r4, #26]
    1cee:	079b      	lsls	r3, r3, #30
    1cf0:	d43c      	bmi.n	1d6c <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    1cf2:	07ab      	lsls	r3, r5, #30
    1cf4:	d508      	bpl.n	1d08 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1cf6:	2302      	movs	r3, #2
    1cf8:	6822      	ldr	r2, [r4, #0]
    1cfa:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1cfc:	7ee3      	ldrb	r3, [r4, #27]
    1cfe:	075b      	lsls	r3, r3, #29
    1d00:	d502      	bpl.n	1d08 <ADC_Handler+0x48>
    1d02:	7ea3      	ldrb	r3, [r4, #26]
    1d04:	075b      	lsls	r3, r3, #29
    1d06:	d435      	bmi.n	1d74 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    1d08:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1d0a:	2201      	movs	r2, #1
    1d0c:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    1d0e:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1d10:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    1d12:	b25b      	sxtb	r3, r3
    1d14:	2b00      	cmp	r3, #0
    1d16:	dbfb      	blt.n	1d10 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    1d18:	6961      	ldr	r1, [r4, #20]
    1d1a:	1c8b      	adds	r3, r1, #2
    1d1c:	6163      	str	r3, [r4, #20]
    1d1e:	8b53      	ldrh	r3, [r2, #26]
    1d20:	b29b      	uxth	r3, r3
    1d22:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    1d24:	8b23      	ldrh	r3, [r4, #24]
    1d26:	3b01      	subs	r3, #1
    1d28:	b29b      	uxth	r3, r3
    1d2a:	8323      	strh	r3, [r4, #24]
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d011      	beq.n	1d54 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
    1d30:	7f63      	ldrb	r3, [r4, #29]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d0d2      	beq.n	1cdc <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1d36:	6822      	ldr	r2, [r4, #0]
    1d38:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1d3a:	b25b      	sxtb	r3, r3
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	dbfb      	blt.n	1d38 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1d40:	7b13      	ldrb	r3, [r2, #12]
    1d42:	2102      	movs	r1, #2
    1d44:	430b      	orrs	r3, r1
    1d46:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    1d48:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1d4a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1d4c:	b25b      	sxtb	r3, r3
    1d4e:	2b00      	cmp	r3, #0
    1d50:	dbfb      	blt.n	1d4a <ADC_Handler+0x8a>
    1d52:	e7c3      	b.n	1cdc <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    1d54:	7f23      	ldrb	r3, [r4, #28]
    1d56:	2b05      	cmp	r3, #5
    1d58:	d1c0      	bne.n	1cdc <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    1d5a:	2300      	movs	r3, #0
    1d5c:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    1d5e:	3301      	adds	r3, #1
    1d60:	6822      	ldr	r2, [r4, #0]
    1d62:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1d64:	0020      	movs	r0, r4
    1d66:	68a3      	ldr	r3, [r4, #8]
    1d68:	4798      	blx	r3
    1d6a:	e7b7      	b.n	1cdc <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1d6c:	0020      	movs	r0, r4
    1d6e:	68e3      	ldr	r3, [r4, #12]
    1d70:	4798      	blx	r3
    1d72:	e7be      	b.n	1cf2 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1d74:	6923      	ldr	r3, [r4, #16]
    1d76:	0020      	movs	r0, r4
    1d78:	4798      	blx	r3
}
    1d7a:	e7c5      	b.n	1d08 <ADC_Handler+0x48>
    1d7c:	20000f38 	.word	0x20000f38

00001d80 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d82:	46de      	mov	lr, fp
    1d84:	4657      	mov	r7, sl
    1d86:	464e      	mov	r6, r9
    1d88:	4645      	mov	r5, r8
    1d8a:	b5e0      	push	{r5, r6, r7, lr}
    1d8c:	b087      	sub	sp, #28
    1d8e:	4680      	mov	r8, r0
    1d90:	9104      	str	r1, [sp, #16]
    1d92:	0016      	movs	r6, r2
    1d94:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1d96:	2200      	movs	r2, #0
    1d98:	2300      	movs	r3, #0
    1d9a:	2100      	movs	r1, #0
    1d9c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1d9e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1da0:	2001      	movs	r0, #1
    1da2:	0021      	movs	r1, r4
    1da4:	9600      	str	r6, [sp, #0]
    1da6:	9701      	str	r7, [sp, #4]
    1da8:	465c      	mov	r4, fp
    1daa:	9403      	str	r4, [sp, #12]
    1dac:	4644      	mov	r4, r8
    1dae:	9405      	str	r4, [sp, #20]
    1db0:	e013      	b.n	1dda <long_division+0x5a>
    1db2:	2420      	movs	r4, #32
    1db4:	1a64      	subs	r4, r4, r1
    1db6:	0005      	movs	r5, r0
    1db8:	40e5      	lsrs	r5, r4
    1dba:	46a8      	mov	r8, r5
    1dbc:	e014      	b.n	1de8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1dbe:	9c00      	ldr	r4, [sp, #0]
    1dc0:	9d01      	ldr	r5, [sp, #4]
    1dc2:	1b12      	subs	r2, r2, r4
    1dc4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1dc6:	465c      	mov	r4, fp
    1dc8:	464d      	mov	r5, r9
    1dca:	432c      	orrs	r4, r5
    1dcc:	46a3      	mov	fp, r4
    1dce:	9c03      	ldr	r4, [sp, #12]
    1dd0:	4645      	mov	r5, r8
    1dd2:	432c      	orrs	r4, r5
    1dd4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1dd6:	3901      	subs	r1, #1
    1dd8:	d325      	bcc.n	1e26 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1dda:	2420      	movs	r4, #32
    1ddc:	4264      	negs	r4, r4
    1dde:	190c      	adds	r4, r1, r4
    1de0:	d4e7      	bmi.n	1db2 <long_division+0x32>
    1de2:	0005      	movs	r5, r0
    1de4:	40a5      	lsls	r5, r4
    1de6:	46a8      	mov	r8, r5
    1de8:	0004      	movs	r4, r0
    1dea:	408c      	lsls	r4, r1
    1dec:	46a1      	mov	r9, r4
		r = r << 1;
    1dee:	1892      	adds	r2, r2, r2
    1df0:	415b      	adcs	r3, r3
    1df2:	0014      	movs	r4, r2
    1df4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1df6:	9e05      	ldr	r6, [sp, #20]
    1df8:	464f      	mov	r7, r9
    1dfa:	403e      	ands	r6, r7
    1dfc:	46b4      	mov	ip, r6
    1dfe:	9e04      	ldr	r6, [sp, #16]
    1e00:	4647      	mov	r7, r8
    1e02:	403e      	ands	r6, r7
    1e04:	46b2      	mov	sl, r6
    1e06:	4666      	mov	r6, ip
    1e08:	4657      	mov	r7, sl
    1e0a:	433e      	orrs	r6, r7
    1e0c:	d003      	beq.n	1e16 <long_division+0x96>
			r |= 0x01;
    1e0e:	0006      	movs	r6, r0
    1e10:	4326      	orrs	r6, r4
    1e12:	0032      	movs	r2, r6
    1e14:	002b      	movs	r3, r5
		if (r >= d) {
    1e16:	9c00      	ldr	r4, [sp, #0]
    1e18:	9d01      	ldr	r5, [sp, #4]
    1e1a:	429d      	cmp	r5, r3
    1e1c:	d8db      	bhi.n	1dd6 <long_division+0x56>
    1e1e:	d1ce      	bne.n	1dbe <long_division+0x3e>
    1e20:	4294      	cmp	r4, r2
    1e22:	d8d8      	bhi.n	1dd6 <long_division+0x56>
    1e24:	e7cb      	b.n	1dbe <long_division+0x3e>
    1e26:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1e28:	4658      	mov	r0, fp
    1e2a:	0019      	movs	r1, r3
    1e2c:	b007      	add	sp, #28
    1e2e:	bc3c      	pop	{r2, r3, r4, r5}
    1e30:	4690      	mov	r8, r2
    1e32:	4699      	mov	r9, r3
    1e34:	46a2      	mov	sl, r4
    1e36:	46ab      	mov	fp, r5
    1e38:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e3a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1e3a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1e3c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e3e:	2340      	movs	r3, #64	; 0x40
    1e40:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1e42:	4281      	cmp	r1, r0
    1e44:	d202      	bcs.n	1e4c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1e46:	0018      	movs	r0, r3
    1e48:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1e4a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1e4c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1e4e:	1c63      	adds	r3, r4, #1
    1e50:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1e52:	4288      	cmp	r0, r1
    1e54:	d9f9      	bls.n	1e4a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e56:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1e58:	2cff      	cmp	r4, #255	; 0xff
    1e5a:	d8f4      	bhi.n	1e46 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1e5c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1e5e:	2300      	movs	r3, #0
    1e60:	e7f1      	b.n	1e46 <_sercom_get_sync_baud_val+0xc>
	...

00001e64 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e66:	b083      	sub	sp, #12
    1e68:	000f      	movs	r7, r1
    1e6a:	0016      	movs	r6, r2
    1e6c:	aa08      	add	r2, sp, #32
    1e6e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1e70:	0004      	movs	r4, r0
    1e72:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e74:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1e76:	42bc      	cmp	r4, r7
    1e78:	d902      	bls.n	1e80 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1e7a:	0010      	movs	r0, r2
    1e7c:	b003      	add	sp, #12
    1e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1e80:	2b00      	cmp	r3, #0
    1e82:	d114      	bne.n	1eae <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1e84:	0002      	movs	r2, r0
    1e86:	0008      	movs	r0, r1
    1e88:	2100      	movs	r1, #0
    1e8a:	4c19      	ldr	r4, [pc, #100]	; (1ef0 <_sercom_get_async_baud_val+0x8c>)
    1e8c:	47a0      	blx	r4
    1e8e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1e90:	003a      	movs	r2, r7
    1e92:	2300      	movs	r3, #0
    1e94:	2000      	movs	r0, #0
    1e96:	4c17      	ldr	r4, [pc, #92]	; (1ef4 <_sercom_get_async_baud_val+0x90>)
    1e98:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1e9a:	2200      	movs	r2, #0
    1e9c:	2301      	movs	r3, #1
    1e9e:	1a12      	subs	r2, r2, r0
    1ea0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1ea2:	0c12      	lsrs	r2, r2, #16
    1ea4:	041b      	lsls	r3, r3, #16
    1ea6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1ea8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1eaa:	2200      	movs	r2, #0
    1eac:	e7e5      	b.n	1e7a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1eae:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1eb0:	2b01      	cmp	r3, #1
    1eb2:	d1f9      	bne.n	1ea8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1eb4:	000a      	movs	r2, r1
    1eb6:	2300      	movs	r3, #0
    1eb8:	2100      	movs	r1, #0
    1eba:	4c0d      	ldr	r4, [pc, #52]	; (1ef0 <_sercom_get_async_baud_val+0x8c>)
    1ebc:	47a0      	blx	r4
    1ebe:	0002      	movs	r2, r0
    1ec0:	000b      	movs	r3, r1
    1ec2:	9200      	str	r2, [sp, #0]
    1ec4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1ec6:	0038      	movs	r0, r7
    1ec8:	2100      	movs	r1, #0
    1eca:	4c0a      	ldr	r4, [pc, #40]	; (1ef4 <_sercom_get_async_baud_val+0x90>)
    1ecc:	47a0      	blx	r4
    1ece:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1ed0:	2380      	movs	r3, #128	; 0x80
    1ed2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ed4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1ed6:	4298      	cmp	r0, r3
    1ed8:	d8cf      	bhi.n	1e7a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1eda:	0f79      	lsrs	r1, r7, #29
    1edc:	00f8      	lsls	r0, r7, #3
    1ede:	9a00      	ldr	r2, [sp, #0]
    1ee0:	9b01      	ldr	r3, [sp, #4]
    1ee2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1ee4:	00ea      	lsls	r2, r5, #3
    1ee6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1ee8:	b2d2      	uxtb	r2, r2
    1eea:	0352      	lsls	r2, r2, #13
    1eec:	432a      	orrs	r2, r5
    1eee:	e7db      	b.n	1ea8 <_sercom_get_async_baud_val+0x44>
    1ef0:	000039dd 	.word	0x000039dd
    1ef4:	00001d81 	.word	0x00001d81

00001ef8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1ef8:	b510      	push	{r4, lr}
    1efa:	b082      	sub	sp, #8
    1efc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1efe:	4b0e      	ldr	r3, [pc, #56]	; (1f38 <sercom_set_gclk_generator+0x40>)
    1f00:	781b      	ldrb	r3, [r3, #0]
    1f02:	2b00      	cmp	r3, #0
    1f04:	d007      	beq.n	1f16 <sercom_set_gclk_generator+0x1e>
    1f06:	2900      	cmp	r1, #0
    1f08:	d105      	bne.n	1f16 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1f0a:	4b0b      	ldr	r3, [pc, #44]	; (1f38 <sercom_set_gclk_generator+0x40>)
    1f0c:	785b      	ldrb	r3, [r3, #1]
    1f0e:	4283      	cmp	r3, r0
    1f10:	d010      	beq.n	1f34 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1f12:	201d      	movs	r0, #29
    1f14:	e00c      	b.n	1f30 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1f16:	a901      	add	r1, sp, #4
    1f18:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1f1a:	2013      	movs	r0, #19
    1f1c:	4b07      	ldr	r3, [pc, #28]	; (1f3c <sercom_set_gclk_generator+0x44>)
    1f1e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1f20:	2013      	movs	r0, #19
    1f22:	4b07      	ldr	r3, [pc, #28]	; (1f40 <sercom_set_gclk_generator+0x48>)
    1f24:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1f26:	4b04      	ldr	r3, [pc, #16]	; (1f38 <sercom_set_gclk_generator+0x40>)
    1f28:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1f2a:	2201      	movs	r2, #1
    1f2c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1f2e:	2000      	movs	r0, #0
}
    1f30:	b002      	add	sp, #8
    1f32:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1f34:	2000      	movs	r0, #0
    1f36:	e7fb      	b.n	1f30 <sercom_set_gclk_generator+0x38>
    1f38:	20000104 	.word	0x20000104
    1f3c:	000035f1 	.word	0x000035f1
    1f40:	00003565 	.word	0x00003565

00001f44 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1f44:	4b40      	ldr	r3, [pc, #256]	; (2048 <STACK_SIZE+0x48>)
    1f46:	4298      	cmp	r0, r3
    1f48:	d031      	beq.n	1fae <_sercom_get_default_pad+0x6a>
    1f4a:	d90a      	bls.n	1f62 <_sercom_get_default_pad+0x1e>
    1f4c:	4b3f      	ldr	r3, [pc, #252]	; (204c <STACK_SIZE+0x4c>)
    1f4e:	4298      	cmp	r0, r3
    1f50:	d04d      	beq.n	1fee <_sercom_get_default_pad+0xaa>
    1f52:	4b3f      	ldr	r3, [pc, #252]	; (2050 <STACK_SIZE+0x50>)
    1f54:	4298      	cmp	r0, r3
    1f56:	d05a      	beq.n	200e <STACK_SIZE+0xe>
    1f58:	4b3e      	ldr	r3, [pc, #248]	; (2054 <STACK_SIZE+0x54>)
    1f5a:	4298      	cmp	r0, r3
    1f5c:	d037      	beq.n	1fce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1f5e:	2000      	movs	r0, #0
}
    1f60:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1f62:	4b3d      	ldr	r3, [pc, #244]	; (2058 <STACK_SIZE+0x58>)
    1f64:	4298      	cmp	r0, r3
    1f66:	d00c      	beq.n	1f82 <_sercom_get_default_pad+0x3e>
    1f68:	4b3c      	ldr	r3, [pc, #240]	; (205c <STACK_SIZE+0x5c>)
    1f6a:	4298      	cmp	r0, r3
    1f6c:	d1f7      	bne.n	1f5e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f6e:	2901      	cmp	r1, #1
    1f70:	d017      	beq.n	1fa2 <_sercom_get_default_pad+0x5e>
    1f72:	2900      	cmp	r1, #0
    1f74:	d05d      	beq.n	2032 <STACK_SIZE+0x32>
    1f76:	2902      	cmp	r1, #2
    1f78:	d015      	beq.n	1fa6 <_sercom_get_default_pad+0x62>
    1f7a:	2903      	cmp	r1, #3
    1f7c:	d015      	beq.n	1faa <_sercom_get_default_pad+0x66>
	return 0;
    1f7e:	2000      	movs	r0, #0
    1f80:	e7ee      	b.n	1f60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f82:	2901      	cmp	r1, #1
    1f84:	d007      	beq.n	1f96 <_sercom_get_default_pad+0x52>
    1f86:	2900      	cmp	r1, #0
    1f88:	d051      	beq.n	202e <STACK_SIZE+0x2e>
    1f8a:	2902      	cmp	r1, #2
    1f8c:	d005      	beq.n	1f9a <_sercom_get_default_pad+0x56>
    1f8e:	2903      	cmp	r1, #3
    1f90:	d005      	beq.n	1f9e <_sercom_get_default_pad+0x5a>
	return 0;
    1f92:	2000      	movs	r0, #0
    1f94:	e7e4      	b.n	1f60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f96:	4832      	ldr	r0, [pc, #200]	; (2060 <STACK_SIZE+0x60>)
    1f98:	e7e2      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1f9a:	4832      	ldr	r0, [pc, #200]	; (2064 <STACK_SIZE+0x64>)
    1f9c:	e7e0      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1f9e:	4832      	ldr	r0, [pc, #200]	; (2068 <STACK_SIZE+0x68>)
    1fa0:	e7de      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1fa2:	4832      	ldr	r0, [pc, #200]	; (206c <STACK_SIZE+0x6c>)
    1fa4:	e7dc      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1fa6:	4832      	ldr	r0, [pc, #200]	; (2070 <STACK_SIZE+0x70>)
    1fa8:	e7da      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1faa:	4832      	ldr	r0, [pc, #200]	; (2074 <STACK_SIZE+0x74>)
    1fac:	e7d8      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1fae:	2901      	cmp	r1, #1
    1fb0:	d007      	beq.n	1fc2 <_sercom_get_default_pad+0x7e>
    1fb2:	2900      	cmp	r1, #0
    1fb4:	d03f      	beq.n	2036 <STACK_SIZE+0x36>
    1fb6:	2902      	cmp	r1, #2
    1fb8:	d005      	beq.n	1fc6 <_sercom_get_default_pad+0x82>
    1fba:	2903      	cmp	r1, #3
    1fbc:	d005      	beq.n	1fca <_sercom_get_default_pad+0x86>
	return 0;
    1fbe:	2000      	movs	r0, #0
    1fc0:	e7ce      	b.n	1f60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1fc2:	482d      	ldr	r0, [pc, #180]	; (2078 <STACK_SIZE+0x78>)
    1fc4:	e7cc      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1fc6:	482d      	ldr	r0, [pc, #180]	; (207c <STACK_SIZE+0x7c>)
    1fc8:	e7ca      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1fca:	482d      	ldr	r0, [pc, #180]	; (2080 <STACK_SIZE+0x80>)
    1fcc:	e7c8      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1fce:	2901      	cmp	r1, #1
    1fd0:	d007      	beq.n	1fe2 <_sercom_get_default_pad+0x9e>
    1fd2:	2900      	cmp	r1, #0
    1fd4:	d031      	beq.n	203a <STACK_SIZE+0x3a>
    1fd6:	2902      	cmp	r1, #2
    1fd8:	d005      	beq.n	1fe6 <_sercom_get_default_pad+0xa2>
    1fda:	2903      	cmp	r1, #3
    1fdc:	d005      	beq.n	1fea <_sercom_get_default_pad+0xa6>
	return 0;
    1fde:	2000      	movs	r0, #0
    1fe0:	e7be      	b.n	1f60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1fe2:	4828      	ldr	r0, [pc, #160]	; (2084 <STACK_SIZE+0x84>)
    1fe4:	e7bc      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1fe6:	4828      	ldr	r0, [pc, #160]	; (2088 <STACK_SIZE+0x88>)
    1fe8:	e7ba      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1fea:	4828      	ldr	r0, [pc, #160]	; (208c <STACK_SIZE+0x8c>)
    1fec:	e7b8      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    1fee:	2901      	cmp	r1, #1
    1ff0:	d007      	beq.n	2002 <STACK_SIZE+0x2>
    1ff2:	2900      	cmp	r1, #0
    1ff4:	d023      	beq.n	203e <STACK_SIZE+0x3e>
    1ff6:	2902      	cmp	r1, #2
    1ff8:	d005      	beq.n	2006 <STACK_SIZE+0x6>
    1ffa:	2903      	cmp	r1, #3
    1ffc:	d005      	beq.n	200a <STACK_SIZE+0xa>
	return 0;
    1ffe:	2000      	movs	r0, #0
    2000:	e7ae      	b.n	1f60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2002:	4823      	ldr	r0, [pc, #140]	; (2090 <STACK_SIZE+0x90>)
    2004:	e7ac      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    2006:	4823      	ldr	r0, [pc, #140]	; (2094 <STACK_SIZE+0x94>)
    2008:	e7aa      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    200a:	4823      	ldr	r0, [pc, #140]	; (2098 <STACK_SIZE+0x98>)
    200c:	e7a8      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    200e:	2901      	cmp	r1, #1
    2010:	d007      	beq.n	2022 <STACK_SIZE+0x22>
    2012:	2900      	cmp	r1, #0
    2014:	d015      	beq.n	2042 <STACK_SIZE+0x42>
    2016:	2902      	cmp	r1, #2
    2018:	d005      	beq.n	2026 <STACK_SIZE+0x26>
    201a:	2903      	cmp	r1, #3
    201c:	d005      	beq.n	202a <STACK_SIZE+0x2a>
	return 0;
    201e:	2000      	movs	r0, #0
    2020:	e79e      	b.n	1f60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2022:	481e      	ldr	r0, [pc, #120]	; (209c <STACK_SIZE+0x9c>)
    2024:	e79c      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    2026:	481e      	ldr	r0, [pc, #120]	; (20a0 <STACK_SIZE+0xa0>)
    2028:	e79a      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    202a:	481e      	ldr	r0, [pc, #120]	; (20a4 <STACK_SIZE+0xa4>)
    202c:	e798      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    202e:	481e      	ldr	r0, [pc, #120]	; (20a8 <STACK_SIZE+0xa8>)
    2030:	e796      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    2032:	2003      	movs	r0, #3
    2034:	e794      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    2036:	481d      	ldr	r0, [pc, #116]	; (20ac <STACK_SIZE+0xac>)
    2038:	e792      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    203a:	481d      	ldr	r0, [pc, #116]	; (20b0 <STACK_SIZE+0xb0>)
    203c:	e790      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    203e:	481d      	ldr	r0, [pc, #116]	; (20b4 <STACK_SIZE+0xb4>)
    2040:	e78e      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    2042:	481d      	ldr	r0, [pc, #116]	; (20b8 <STACK_SIZE+0xb8>)
    2044:	e78c      	b.n	1f60 <_sercom_get_default_pad+0x1c>
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	42001000 	.word	0x42001000
    204c:	42001800 	.word	0x42001800
    2050:	42001c00 	.word	0x42001c00
    2054:	42001400 	.word	0x42001400
    2058:	42000800 	.word	0x42000800
    205c:	42000c00 	.word	0x42000c00
    2060:	00050003 	.word	0x00050003
    2064:	00060003 	.word	0x00060003
    2068:	00070003 	.word	0x00070003
    206c:	00010003 	.word	0x00010003
    2070:	001e0003 	.word	0x001e0003
    2074:	001f0003 	.word	0x001f0003
    2078:	00090003 	.word	0x00090003
    207c:	000a0003 	.word	0x000a0003
    2080:	000b0003 	.word	0x000b0003
    2084:	00110003 	.word	0x00110003
    2088:	00120003 	.word	0x00120003
    208c:	00130003 	.word	0x00130003
    2090:	000d0003 	.word	0x000d0003
    2094:	000e0003 	.word	0x000e0003
    2098:	000f0003 	.word	0x000f0003
    209c:	00170003 	.word	0x00170003
    20a0:	00180003 	.word	0x00180003
    20a4:	00190003 	.word	0x00190003
    20a8:	00040003 	.word	0x00040003
    20ac:	00080003 	.word	0x00080003
    20b0:	00100003 	.word	0x00100003
    20b4:	000c0003 	.word	0x000c0003
    20b8:	00160003 	.word	0x00160003

000020bc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    20bc:	b530      	push	{r4, r5, lr}
    20be:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    20c0:	4b0b      	ldr	r3, [pc, #44]	; (20f0 <_sercom_get_sercom_inst_index+0x34>)
    20c2:	466a      	mov	r2, sp
    20c4:	cb32      	ldmia	r3!, {r1, r4, r5}
    20c6:	c232      	stmia	r2!, {r1, r4, r5}
    20c8:	cb32      	ldmia	r3!, {r1, r4, r5}
    20ca:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    20cc:	9b00      	ldr	r3, [sp, #0]
    20ce:	4283      	cmp	r3, r0
    20d0:	d00b      	beq.n	20ea <_sercom_get_sercom_inst_index+0x2e>
    20d2:	2301      	movs	r3, #1
    20d4:	009a      	lsls	r2, r3, #2
    20d6:	4669      	mov	r1, sp
    20d8:	5852      	ldr	r2, [r2, r1]
    20da:	4282      	cmp	r2, r0
    20dc:	d006      	beq.n	20ec <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    20de:	3301      	adds	r3, #1
    20e0:	2b06      	cmp	r3, #6
    20e2:	d1f7      	bne.n	20d4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    20e4:	2000      	movs	r0, #0
}
    20e6:	b007      	add	sp, #28
    20e8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    20ea:	2300      	movs	r3, #0
			return i;
    20ec:	b2d8      	uxtb	r0, r3
    20ee:	e7fa      	b.n	20e6 <_sercom_get_sercom_inst_index+0x2a>
    20f0:	000055c8 	.word	0x000055c8

000020f4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    20f4:	4770      	bx	lr
	...

000020f8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    20fa:	4b0a      	ldr	r3, [pc, #40]	; (2124 <_sercom_set_handler+0x2c>)
    20fc:	781b      	ldrb	r3, [r3, #0]
    20fe:	2b00      	cmp	r3, #0
    2100:	d10c      	bne.n	211c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2102:	4f09      	ldr	r7, [pc, #36]	; (2128 <_sercom_set_handler+0x30>)
    2104:	4e09      	ldr	r6, [pc, #36]	; (212c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2106:	4d0a      	ldr	r5, [pc, #40]	; (2130 <_sercom_set_handler+0x38>)
    2108:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    210a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    210c:	195a      	adds	r2, r3, r5
    210e:	6014      	str	r4, [r2, #0]
    2110:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2112:	2b18      	cmp	r3, #24
    2114:	d1f9      	bne.n	210a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2116:	2201      	movs	r2, #1
    2118:	4b02      	ldr	r3, [pc, #8]	; (2124 <_sercom_set_handler+0x2c>)
    211a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    211c:	0080      	lsls	r0, r0, #2
    211e:	4b02      	ldr	r3, [pc, #8]	; (2128 <_sercom_set_handler+0x30>)
    2120:	50c1      	str	r1, [r0, r3]
}
    2122:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2124:	20000106 	.word	0x20000106
    2128:	20000108 	.word	0x20000108
    212c:	000020f5 	.word	0x000020f5
    2130:	20000f3c 	.word	0x20000f3c

00002134 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2134:	b500      	push	{lr}
    2136:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2138:	2309      	movs	r3, #9
    213a:	466a      	mov	r2, sp
    213c:	7013      	strb	r3, [r2, #0]
    213e:	3301      	adds	r3, #1
    2140:	7053      	strb	r3, [r2, #1]
    2142:	3301      	adds	r3, #1
    2144:	7093      	strb	r3, [r2, #2]
    2146:	3301      	adds	r3, #1
    2148:	70d3      	strb	r3, [r2, #3]
    214a:	3301      	adds	r3, #1
    214c:	7113      	strb	r3, [r2, #4]
    214e:	3301      	adds	r3, #1
    2150:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2152:	4b03      	ldr	r3, [pc, #12]	; (2160 <_sercom_get_interrupt_vector+0x2c>)
    2154:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2156:	466b      	mov	r3, sp
    2158:	5618      	ldrsb	r0, [r3, r0]
}
    215a:	b003      	add	sp, #12
    215c:	bd00      	pop	{pc}
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	000020bd 	.word	0x000020bd

00002164 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2164:	b510      	push	{r4, lr}
    2166:	4b02      	ldr	r3, [pc, #8]	; (2170 <SERCOM0_Handler+0xc>)
    2168:	681b      	ldr	r3, [r3, #0]
    216a:	2000      	movs	r0, #0
    216c:	4798      	blx	r3
    216e:	bd10      	pop	{r4, pc}
    2170:	20000108 	.word	0x20000108

00002174 <SERCOM1_Handler>:
    2174:	b510      	push	{r4, lr}
    2176:	4b02      	ldr	r3, [pc, #8]	; (2180 <SERCOM1_Handler+0xc>)
    2178:	685b      	ldr	r3, [r3, #4]
    217a:	2001      	movs	r0, #1
    217c:	4798      	blx	r3
    217e:	bd10      	pop	{r4, pc}
    2180:	20000108 	.word	0x20000108

00002184 <SERCOM2_Handler>:
    2184:	b510      	push	{r4, lr}
    2186:	4b02      	ldr	r3, [pc, #8]	; (2190 <SERCOM2_Handler+0xc>)
    2188:	689b      	ldr	r3, [r3, #8]
    218a:	2002      	movs	r0, #2
    218c:	4798      	blx	r3
    218e:	bd10      	pop	{r4, pc}
    2190:	20000108 	.word	0x20000108

00002194 <SERCOM3_Handler>:
    2194:	b510      	push	{r4, lr}
    2196:	4b02      	ldr	r3, [pc, #8]	; (21a0 <SERCOM3_Handler+0xc>)
    2198:	68db      	ldr	r3, [r3, #12]
    219a:	2003      	movs	r0, #3
    219c:	4798      	blx	r3
    219e:	bd10      	pop	{r4, pc}
    21a0:	20000108 	.word	0x20000108

000021a4 <SERCOM4_Handler>:
    21a4:	b510      	push	{r4, lr}
    21a6:	4b02      	ldr	r3, [pc, #8]	; (21b0 <SERCOM4_Handler+0xc>)
    21a8:	691b      	ldr	r3, [r3, #16]
    21aa:	2004      	movs	r0, #4
    21ac:	4798      	blx	r3
    21ae:	bd10      	pop	{r4, pc}
    21b0:	20000108 	.word	0x20000108

000021b4 <SERCOM5_Handler>:
    21b4:	b510      	push	{r4, lr}
    21b6:	4b02      	ldr	r3, [pc, #8]	; (21c0 <SERCOM5_Handler+0xc>)
    21b8:	695b      	ldr	r3, [r3, #20]
    21ba:	2005      	movs	r0, #5
    21bc:	4798      	blx	r3
    21be:	bd10      	pop	{r4, pc}
    21c0:	20000108 	.word	0x20000108

000021c4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    21c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21c6:	46de      	mov	lr, fp
    21c8:	4657      	mov	r7, sl
    21ca:	464e      	mov	r6, r9
    21cc:	4645      	mov	r5, r8
    21ce:	b5e0      	push	{r5, r6, r7, lr}
    21d0:	b091      	sub	sp, #68	; 0x44
    21d2:	0005      	movs	r5, r0
    21d4:	000c      	movs	r4, r1
    21d6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    21d8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    21da:	0008      	movs	r0, r1
    21dc:	4bbc      	ldr	r3, [pc, #752]	; (24d0 <usart_init+0x30c>)
    21de:	4798      	blx	r3
    21e0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    21e2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    21e4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    21e6:	07db      	lsls	r3, r3, #31
    21e8:	d506      	bpl.n	21f8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    21ea:	b011      	add	sp, #68	; 0x44
    21ec:	bc3c      	pop	{r2, r3, r4, r5}
    21ee:	4690      	mov	r8, r2
    21f0:	4699      	mov	r9, r3
    21f2:	46a2      	mov	sl, r4
    21f4:	46ab      	mov	fp, r5
    21f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    21f8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    21fa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    21fc:	079b      	lsls	r3, r3, #30
    21fe:	d4f4      	bmi.n	21ea <usart_init+0x26>
    2200:	49b4      	ldr	r1, [pc, #720]	; (24d4 <usart_init+0x310>)
    2202:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2204:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2206:	2301      	movs	r3, #1
    2208:	40bb      	lsls	r3, r7
    220a:	4303      	orrs	r3, r0
    220c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    220e:	a90f      	add	r1, sp, #60	; 0x3c
    2210:	272d      	movs	r7, #45	; 0x2d
    2212:	5df3      	ldrb	r3, [r6, r7]
    2214:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2216:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2218:	b2d3      	uxtb	r3, r2
    221a:	9302      	str	r3, [sp, #8]
    221c:	0018      	movs	r0, r3
    221e:	4bae      	ldr	r3, [pc, #696]	; (24d8 <usart_init+0x314>)
    2220:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2222:	9802      	ldr	r0, [sp, #8]
    2224:	4bad      	ldr	r3, [pc, #692]	; (24dc <usart_init+0x318>)
    2226:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2228:	5df0      	ldrb	r0, [r6, r7]
    222a:	2100      	movs	r1, #0
    222c:	4bac      	ldr	r3, [pc, #688]	; (24e0 <usart_init+0x31c>)
    222e:	4798      	blx	r3
	module->character_size = config->character_size;
    2230:	7af3      	ldrb	r3, [r6, #11]
    2232:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2234:	2324      	movs	r3, #36	; 0x24
    2236:	5cf3      	ldrb	r3, [r6, r3]
    2238:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    223a:	2325      	movs	r3, #37	; 0x25
    223c:	5cf3      	ldrb	r3, [r6, r3]
    223e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2240:	7ef3      	ldrb	r3, [r6, #27]
    2242:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2244:	7f33      	ldrb	r3, [r6, #28]
    2246:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2248:	682b      	ldr	r3, [r5, #0]
    224a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    224c:	0018      	movs	r0, r3
    224e:	4ba0      	ldr	r3, [pc, #640]	; (24d0 <usart_init+0x30c>)
    2250:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2252:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2254:	2200      	movs	r2, #0
    2256:	230e      	movs	r3, #14
    2258:	a906      	add	r1, sp, #24
    225a:	468c      	mov	ip, r1
    225c:	4463      	add	r3, ip
    225e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2260:	8a32      	ldrh	r2, [r6, #16]
    2262:	9202      	str	r2, [sp, #8]
    2264:	2380      	movs	r3, #128	; 0x80
    2266:	01db      	lsls	r3, r3, #7
    2268:	429a      	cmp	r2, r3
    226a:	d100      	bne.n	226e <usart_init+0xaa>
    226c:	e09e      	b.n	23ac <usart_init+0x1e8>
    226e:	d90f      	bls.n	2290 <usart_init+0xcc>
    2270:	23c0      	movs	r3, #192	; 0xc0
    2272:	01db      	lsls	r3, r3, #7
    2274:	9a02      	ldr	r2, [sp, #8]
    2276:	429a      	cmp	r2, r3
    2278:	d100      	bne.n	227c <usart_init+0xb8>
    227a:	e092      	b.n	23a2 <usart_init+0x1de>
    227c:	2380      	movs	r3, #128	; 0x80
    227e:	021b      	lsls	r3, r3, #8
    2280:	429a      	cmp	r2, r3
    2282:	d000      	beq.n	2286 <usart_init+0xc2>
    2284:	e11f      	b.n	24c6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2286:	2303      	movs	r3, #3
    2288:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    228a:	2300      	movs	r3, #0
    228c:	9307      	str	r3, [sp, #28]
    228e:	e008      	b.n	22a2 <usart_init+0xde>
	switch (config->sample_rate) {
    2290:	2380      	movs	r3, #128	; 0x80
    2292:	019b      	lsls	r3, r3, #6
    2294:	429a      	cmp	r2, r3
    2296:	d000      	beq.n	229a <usart_init+0xd6>
    2298:	e115      	b.n	24c6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    229a:	2310      	movs	r3, #16
    229c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    229e:	3b0f      	subs	r3, #15
    22a0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    22a2:	6833      	ldr	r3, [r6, #0]
    22a4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    22a6:	68f3      	ldr	r3, [r6, #12]
    22a8:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    22aa:	6973      	ldr	r3, [r6, #20]
    22ac:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    22ae:	7e33      	ldrb	r3, [r6, #24]
    22b0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    22b2:	2326      	movs	r3, #38	; 0x26
    22b4:	5cf3      	ldrb	r3, [r6, r3]
    22b6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    22b8:	6873      	ldr	r3, [r6, #4]
    22ba:	4699      	mov	r9, r3
	switch (transfer_mode)
    22bc:	2b00      	cmp	r3, #0
    22be:	d100      	bne.n	22c2 <usart_init+0xfe>
    22c0:	e0a0      	b.n	2404 <usart_init+0x240>
    22c2:	2380      	movs	r3, #128	; 0x80
    22c4:	055b      	lsls	r3, r3, #21
    22c6:	4599      	cmp	r9, r3
    22c8:	d100      	bne.n	22cc <usart_init+0x108>
    22ca:	e084      	b.n	23d6 <usart_init+0x212>
	if(config->encoding_format_enable) {
    22cc:	7e73      	ldrb	r3, [r6, #25]
    22ce:	2b00      	cmp	r3, #0
    22d0:	d002      	beq.n	22d8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    22d2:	7eb3      	ldrb	r3, [r6, #26]
    22d4:	4642      	mov	r2, r8
    22d6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    22d8:	682a      	ldr	r2, [r5, #0]
    22da:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    22dc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    22de:	2b00      	cmp	r3, #0
    22e0:	d1fc      	bne.n	22dc <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    22e2:	330e      	adds	r3, #14
    22e4:	aa06      	add	r2, sp, #24
    22e6:	4694      	mov	ip, r2
    22e8:	4463      	add	r3, ip
    22ea:	881b      	ldrh	r3, [r3, #0]
    22ec:	4642      	mov	r2, r8
    22ee:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    22f0:	9b05      	ldr	r3, [sp, #20]
    22f2:	9a03      	ldr	r2, [sp, #12]
    22f4:	4313      	orrs	r3, r2
    22f6:	9a04      	ldr	r2, [sp, #16]
    22f8:	4313      	orrs	r3, r2
    22fa:	464a      	mov	r2, r9
    22fc:	4313      	orrs	r3, r2
    22fe:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2300:	465b      	mov	r3, fp
    2302:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2304:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2306:	4653      	mov	r3, sl
    2308:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    230a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    230c:	2327      	movs	r3, #39	; 0x27
    230e:	5cf3      	ldrb	r3, [r6, r3]
    2310:	2b00      	cmp	r3, #0
    2312:	d101      	bne.n	2318 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2314:	3304      	adds	r3, #4
    2316:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2318:	7e73      	ldrb	r3, [r6, #25]
    231a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    231c:	7f32      	ldrb	r2, [r6, #28]
    231e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2320:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2322:	7f72      	ldrb	r2, [r6, #29]
    2324:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2326:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2328:	2224      	movs	r2, #36	; 0x24
    232a:	5cb2      	ldrb	r2, [r6, r2]
    232c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    232e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2330:	2225      	movs	r2, #37	; 0x25
    2332:	5cb2      	ldrb	r2, [r6, r2]
    2334:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2336:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2338:	7ab1      	ldrb	r1, [r6, #10]
    233a:	7af2      	ldrb	r2, [r6, #11]
    233c:	4311      	orrs	r1, r2
    233e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2340:	8933      	ldrh	r3, [r6, #8]
    2342:	2bff      	cmp	r3, #255	; 0xff
    2344:	d100      	bne.n	2348 <usart_init+0x184>
    2346:	e081      	b.n	244c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2348:	2280      	movs	r2, #128	; 0x80
    234a:	0452      	lsls	r2, r2, #17
    234c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    234e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2350:	232c      	movs	r3, #44	; 0x2c
    2352:	5cf3      	ldrb	r3, [r6, r3]
    2354:	2b00      	cmp	r3, #0
    2356:	d103      	bne.n	2360 <usart_init+0x19c>
    2358:	4b62      	ldr	r3, [pc, #392]	; (24e4 <usart_init+0x320>)
    235a:	789b      	ldrb	r3, [r3, #2]
    235c:	079b      	lsls	r3, r3, #30
    235e:	d501      	bpl.n	2364 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2360:	2380      	movs	r3, #128	; 0x80
    2362:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2364:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2366:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2368:	2b00      	cmp	r3, #0
    236a:	d1fc      	bne.n	2366 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    236c:	4643      	mov	r3, r8
    236e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2370:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2372:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2374:	2b00      	cmp	r3, #0
    2376:	d1fc      	bne.n	2372 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2378:	4643      	mov	r3, r8
    237a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    237c:	ab0e      	add	r3, sp, #56	; 0x38
    237e:	2280      	movs	r2, #128	; 0x80
    2380:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2382:	2200      	movs	r2, #0
    2384:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2386:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2388:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    238a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    238c:	930a      	str	r3, [sp, #40]	; 0x28
    238e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2390:	930b      	str	r3, [sp, #44]	; 0x2c
    2392:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2394:	930c      	str	r3, [sp, #48]	; 0x30
    2396:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2398:	9302      	str	r3, [sp, #8]
    239a:	930d      	str	r3, [sp, #52]	; 0x34
    239c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    239e:	ae0a      	add	r6, sp, #40	; 0x28
    23a0:	e063      	b.n	246a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    23a2:	2308      	movs	r3, #8
    23a4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    23a6:	3b07      	subs	r3, #7
    23a8:	9307      	str	r3, [sp, #28]
    23aa:	e77a      	b.n	22a2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    23ac:	6833      	ldr	r3, [r6, #0]
    23ae:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    23b0:	68f3      	ldr	r3, [r6, #12]
    23b2:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    23b4:	6973      	ldr	r3, [r6, #20]
    23b6:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    23b8:	7e33      	ldrb	r3, [r6, #24]
    23ba:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    23bc:	2326      	movs	r3, #38	; 0x26
    23be:	5cf3      	ldrb	r3, [r6, r3]
    23c0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    23c2:	6873      	ldr	r3, [r6, #4]
    23c4:	4699      	mov	r9, r3
	switch (transfer_mode)
    23c6:	2b00      	cmp	r3, #0
    23c8:	d018      	beq.n	23fc <usart_init+0x238>
    23ca:	2380      	movs	r3, #128	; 0x80
    23cc:	055b      	lsls	r3, r3, #21
    23ce:	4599      	cmp	r9, r3
    23d0:	d001      	beq.n	23d6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    23d2:	2000      	movs	r0, #0
    23d4:	e025      	b.n	2422 <usart_init+0x25e>
			if (!config->use_external_clock) {
    23d6:	2327      	movs	r3, #39	; 0x27
    23d8:	5cf3      	ldrb	r3, [r6, r3]
    23da:	2b00      	cmp	r3, #0
    23dc:	d000      	beq.n	23e0 <usart_init+0x21c>
    23de:	e775      	b.n	22cc <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    23e0:	6a33      	ldr	r3, [r6, #32]
    23e2:	001f      	movs	r7, r3
    23e4:	b2c0      	uxtb	r0, r0
    23e6:	4b40      	ldr	r3, [pc, #256]	; (24e8 <usart_init+0x324>)
    23e8:	4798      	blx	r3
    23ea:	0001      	movs	r1, r0
    23ec:	220e      	movs	r2, #14
    23ee:	ab06      	add	r3, sp, #24
    23f0:	469c      	mov	ip, r3
    23f2:	4462      	add	r2, ip
    23f4:	0038      	movs	r0, r7
    23f6:	4b3d      	ldr	r3, [pc, #244]	; (24ec <usart_init+0x328>)
    23f8:	4798      	blx	r3
    23fa:	e012      	b.n	2422 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    23fc:	2308      	movs	r3, #8
    23fe:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2400:	2300      	movs	r3, #0
    2402:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2404:	2327      	movs	r3, #39	; 0x27
    2406:	5cf3      	ldrb	r3, [r6, r3]
    2408:	2b00      	cmp	r3, #0
    240a:	d00e      	beq.n	242a <usart_init+0x266>
				status_code =
    240c:	9b06      	ldr	r3, [sp, #24]
    240e:	9300      	str	r3, [sp, #0]
    2410:	9b07      	ldr	r3, [sp, #28]
    2412:	220e      	movs	r2, #14
    2414:	a906      	add	r1, sp, #24
    2416:	468c      	mov	ip, r1
    2418:	4462      	add	r2, ip
    241a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    241c:	6a30      	ldr	r0, [r6, #32]
    241e:	4f34      	ldr	r7, [pc, #208]	; (24f0 <usart_init+0x32c>)
    2420:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2422:	2800      	cmp	r0, #0
    2424:	d000      	beq.n	2428 <usart_init+0x264>
    2426:	e6e0      	b.n	21ea <usart_init+0x26>
    2428:	e750      	b.n	22cc <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    242a:	6a33      	ldr	r3, [r6, #32]
    242c:	001f      	movs	r7, r3
    242e:	b2c0      	uxtb	r0, r0
    2430:	4b2d      	ldr	r3, [pc, #180]	; (24e8 <usart_init+0x324>)
    2432:	4798      	blx	r3
    2434:	0001      	movs	r1, r0
				status_code =
    2436:	9b06      	ldr	r3, [sp, #24]
    2438:	9300      	str	r3, [sp, #0]
    243a:	9b07      	ldr	r3, [sp, #28]
    243c:	220e      	movs	r2, #14
    243e:	a806      	add	r0, sp, #24
    2440:	4684      	mov	ip, r0
    2442:	4462      	add	r2, ip
    2444:	0038      	movs	r0, r7
    2446:	4f2a      	ldr	r7, [pc, #168]	; (24f0 <usart_init+0x32c>)
    2448:	47b8      	blx	r7
    244a:	e7ea      	b.n	2422 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    244c:	7ef3      	ldrb	r3, [r6, #27]
    244e:	2b00      	cmp	r3, #0
    2450:	d100      	bne.n	2454 <usart_init+0x290>
    2452:	e77d      	b.n	2350 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2454:	2380      	movs	r3, #128	; 0x80
    2456:	04db      	lsls	r3, r3, #19
    2458:	431f      	orrs	r7, r3
    245a:	e779      	b.n	2350 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    245c:	0020      	movs	r0, r4
    245e:	4b25      	ldr	r3, [pc, #148]	; (24f4 <usart_init+0x330>)
    2460:	4798      	blx	r3
    2462:	e007      	b.n	2474 <usart_init+0x2b0>
    2464:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2466:	2f04      	cmp	r7, #4
    2468:	d00d      	beq.n	2486 <usart_init+0x2c2>
    246a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    246c:	00bb      	lsls	r3, r7, #2
    246e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2470:	2800      	cmp	r0, #0
    2472:	d0f3      	beq.n	245c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2474:	1c43      	adds	r3, r0, #1
    2476:	d0f5      	beq.n	2464 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2478:	a90e      	add	r1, sp, #56	; 0x38
    247a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    247c:	0c00      	lsrs	r0, r0, #16
    247e:	b2c0      	uxtb	r0, r0
    2480:	4b1d      	ldr	r3, [pc, #116]	; (24f8 <usart_init+0x334>)
    2482:	4798      	blx	r3
    2484:	e7ee      	b.n	2464 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2486:	2300      	movs	r3, #0
    2488:	60eb      	str	r3, [r5, #12]
    248a:	612b      	str	r3, [r5, #16]
    248c:	616b      	str	r3, [r5, #20]
    248e:	61ab      	str	r3, [r5, #24]
    2490:	61eb      	str	r3, [r5, #28]
    2492:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2494:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2496:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2498:	2200      	movs	r2, #0
    249a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    249c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    249e:	3330      	adds	r3, #48	; 0x30
    24a0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    24a2:	3301      	adds	r3, #1
    24a4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    24a6:	3301      	adds	r3, #1
    24a8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    24aa:	3301      	adds	r3, #1
    24ac:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    24ae:	6828      	ldr	r0, [r5, #0]
    24b0:	4b07      	ldr	r3, [pc, #28]	; (24d0 <usart_init+0x30c>)
    24b2:	4798      	blx	r3
    24b4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    24b6:	4911      	ldr	r1, [pc, #68]	; (24fc <usart_init+0x338>)
    24b8:	4b11      	ldr	r3, [pc, #68]	; (2500 <usart_init+0x33c>)
    24ba:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    24bc:	00a4      	lsls	r4, r4, #2
    24be:	4b11      	ldr	r3, [pc, #68]	; (2504 <usart_init+0x340>)
    24c0:	50e5      	str	r5, [r4, r3]
	return status_code;
    24c2:	2000      	movs	r0, #0
    24c4:	e691      	b.n	21ea <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    24c6:	2310      	movs	r3, #16
    24c8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    24ca:	2300      	movs	r3, #0
    24cc:	9307      	str	r3, [sp, #28]
    24ce:	e6e8      	b.n	22a2 <usart_init+0xde>
    24d0:	000020bd 	.word	0x000020bd
    24d4:	40000400 	.word	0x40000400
    24d8:	000035f1 	.word	0x000035f1
    24dc:	00003565 	.word	0x00003565
    24e0:	00001ef9 	.word	0x00001ef9
    24e4:	41002000 	.word	0x41002000
    24e8:	0000360d 	.word	0x0000360d
    24ec:	00001e3b 	.word	0x00001e3b
    24f0:	00001e65 	.word	0x00001e65
    24f4:	00001f45 	.word	0x00001f45
    24f8:	000036e9 	.word	0x000036e9
    24fc:	0000267d 	.word	0x0000267d
    2500:	000020f9 	.word	0x000020f9
    2504:	20000f3c 	.word	0x20000f3c

00002508 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2508:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    250a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    250c:	2a00      	cmp	r2, #0
    250e:	d101      	bne.n	2514 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2510:	0018      	movs	r0, r3
    2512:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2514:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2516:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2518:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    251a:	2a00      	cmp	r2, #0
    251c:	d1f8      	bne.n	2510 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    251e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2520:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2522:	2a00      	cmp	r2, #0
    2524:	d1fc      	bne.n	2520 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2526:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2528:	2102      	movs	r1, #2
    252a:	7e1a      	ldrb	r2, [r3, #24]
    252c:	420a      	tst	r2, r1
    252e:	d0fc      	beq.n	252a <usart_write_wait+0x22>
	return STATUS_OK;
    2530:	2300      	movs	r3, #0
    2532:	e7ed      	b.n	2510 <usart_write_wait+0x8>

00002534 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2534:	b5f0      	push	{r4, r5, r6, r7, lr}
    2536:	46ce      	mov	lr, r9
    2538:	4647      	mov	r7, r8
    253a:	b580      	push	{r7, lr}
    253c:	b083      	sub	sp, #12
    253e:	0005      	movs	r5, r0
    2540:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2542:	2017      	movs	r0, #23
	if (length == 0) {
    2544:	2a00      	cmp	r2, #0
    2546:	d104      	bne.n	2552 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    2548:	b003      	add	sp, #12
    254a:	bc0c      	pop	{r2, r3}
    254c:	4690      	mov	r8, r2
    254e:	4699      	mov	r9, r3
    2550:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    2552:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    2554:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    2556:	2b00      	cmp	r3, #0
    2558:	d0f6      	beq.n	2548 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    255a:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    255c:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    255e:	2b00      	cmp	r3, #0
    2560:	d1fc      	bne.n	255c <usart_write_buffer_wait+0x28>
	while (length--) {
    2562:	3a01      	subs	r2, #1
    2564:	b293      	uxth	r3, r2
    2566:	4699      	mov	r9, r3
    2568:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    256a:	2701      	movs	r7, #1
	while (length--) {
    256c:	4b1f      	ldr	r3, [pc, #124]	; (25ec <usart_write_buffer_wait+0xb8>)
    256e:	4698      	mov	r8, r3
    2570:	e011      	b.n	2596 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    2572:	1c73      	adds	r3, r6, #1
    2574:	b29b      	uxth	r3, r3
    2576:	9a01      	ldr	r2, [sp, #4]
    2578:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    257a:	796a      	ldrb	r2, [r5, #5]
    257c:	2a01      	cmp	r2, #1
    257e:	d017      	beq.n	25b0 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    2580:	b289      	uxth	r1, r1
    2582:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    2584:	0028      	movs	r0, r5
    2586:	4b1a      	ldr	r3, [pc, #104]	; (25f0 <usart_write_buffer_wait+0xbc>)
    2588:	4798      	blx	r3
	while (length--) {
    258a:	464b      	mov	r3, r9
    258c:	3b01      	subs	r3, #1
    258e:	b29b      	uxth	r3, r3
    2590:	4699      	mov	r9, r3
    2592:	4543      	cmp	r3, r8
    2594:	d013      	beq.n	25be <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    2596:	7e23      	ldrb	r3, [r4, #24]
    2598:	423b      	tst	r3, r7
    259a:	d1ea      	bne.n	2572 <usart_write_buffer_wait+0x3e>
    259c:	4b13      	ldr	r3, [pc, #76]	; (25ec <usart_write_buffer_wait+0xb8>)
    259e:	7e22      	ldrb	r2, [r4, #24]
    25a0:	423a      	tst	r2, r7
    25a2:	d1e6      	bne.n	2572 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    25a4:	2b01      	cmp	r3, #1
    25a6:	d019      	beq.n	25dc <usart_write_buffer_wait+0xa8>
    25a8:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    25aa:	2b00      	cmp	r3, #0
    25ac:	d1f7      	bne.n	259e <usart_write_buffer_wait+0x6a>
    25ae:	e7e0      	b.n	2572 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    25b0:	3602      	adds	r6, #2
    25b2:	b2b6      	uxth	r6, r6
    25b4:	9a01      	ldr	r2, [sp, #4]
    25b6:	5cd3      	ldrb	r3, [r2, r3]
    25b8:	021b      	lsls	r3, r3, #8
    25ba:	4319      	orrs	r1, r3
    25bc:	e7e2      	b.n	2584 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    25be:	7e23      	ldrb	r3, [r4, #24]
    25c0:	079b      	lsls	r3, r3, #30
    25c2:	d40d      	bmi.n	25e0 <usart_write_buffer_wait+0xac>
    25c4:	4b09      	ldr	r3, [pc, #36]	; (25ec <usart_write_buffer_wait+0xb8>)
    25c6:	2102      	movs	r1, #2
    25c8:	7e22      	ldrb	r2, [r4, #24]
    25ca:	420a      	tst	r2, r1
    25cc:	d10a      	bne.n	25e4 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    25ce:	2b01      	cmp	r3, #1
    25d0:	d00a      	beq.n	25e8 <usart_write_buffer_wait+0xb4>
    25d2:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    25d4:	2b00      	cmp	r3, #0
    25d6:	d1f7      	bne.n	25c8 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    25d8:	2000      	movs	r0, #0
    25da:	e7b5      	b.n	2548 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    25dc:	2012      	movs	r0, #18
    25de:	e7b3      	b.n	2548 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    25e0:	2000      	movs	r0, #0
    25e2:	e7b1      	b.n	2548 <usart_write_buffer_wait+0x14>
    25e4:	2000      	movs	r0, #0
    25e6:	e7af      	b.n	2548 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    25e8:	2012      	movs	r0, #18
    25ea:	e7ad      	b.n	2548 <usart_write_buffer_wait+0x14>
    25ec:	0000ffff 	.word	0x0000ffff
    25f0:	00002509 	.word	0x00002509

000025f4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    25f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25f6:	0004      	movs	r4, r0
    25f8:	000d      	movs	r5, r1
    25fa:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    25fc:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    25fe:	4b0f      	ldr	r3, [pc, #60]	; (263c <_usart_read_buffer+0x48>)
    2600:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2602:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2604:	b29b      	uxth	r3, r3
    2606:	2b00      	cmp	r3, #0
    2608:	d003      	beq.n	2612 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    260a:	4b0d      	ldr	r3, [pc, #52]	; (2640 <_usart_read_buffer+0x4c>)
    260c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    260e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2612:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2614:	4b0a      	ldr	r3, [pc, #40]	; (2640 <_usart_read_buffer+0x4c>)
    2616:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2618:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    261a:	2205      	movs	r2, #5
    261c:	2332      	movs	r3, #50	; 0x32
    261e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2620:	3b2e      	subs	r3, #46	; 0x2e
    2622:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2624:	7a23      	ldrb	r3, [r4, #8]
    2626:	2b00      	cmp	r3, #0
    2628:	d001      	beq.n	262e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    262a:	2320      	movs	r3, #32
    262c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    262e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2630:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2632:	2b00      	cmp	r3, #0
    2634:	d0ec      	beq.n	2610 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2636:	2308      	movs	r3, #8
    2638:	75bb      	strb	r3, [r7, #22]
    263a:	e7e9      	b.n	2610 <_usart_read_buffer+0x1c>
    263c:	00002f5d 	.word	0x00002f5d
    2640:	00002f9d 	.word	0x00002f9d

00002644 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2644:	1c93      	adds	r3, r2, #2
    2646:	009b      	lsls	r3, r3, #2
    2648:	18c3      	adds	r3, r0, r3
    264a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    264c:	2130      	movs	r1, #48	; 0x30
    264e:	2301      	movs	r3, #1
    2650:	4093      	lsls	r3, r2
    2652:	001a      	movs	r2, r3
    2654:	5c43      	ldrb	r3, [r0, r1]
    2656:	4313      	orrs	r3, r2
    2658:	5443      	strb	r3, [r0, r1]
}
    265a:	4770      	bx	lr

0000265c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    265c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    265e:	2317      	movs	r3, #23
	if (length == 0) {
    2660:	2a00      	cmp	r2, #0
    2662:	d101      	bne.n	2668 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2664:	0018      	movs	r0, r3
    2666:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2668:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    266a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    266c:	2c00      	cmp	r4, #0
    266e:	d0f9      	beq.n	2664 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2670:	4b01      	ldr	r3, [pc, #4]	; (2678 <usart_read_buffer_job+0x1c>)
    2672:	4798      	blx	r3
    2674:	0003      	movs	r3, r0
    2676:	e7f5      	b.n	2664 <usart_read_buffer_job+0x8>
    2678:	000025f5 	.word	0x000025f5

0000267c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    267e:	0080      	lsls	r0, r0, #2
    2680:	4b51      	ldr	r3, [pc, #324]	; (27c8 <_usart_interrupt_handler+0x14c>)
    2682:	58c6      	ldr	r6, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2684:	6834      	ldr	r4, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    2686:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2688:	2b00      	cmp	r3, #0
    268a:	d1fc      	bne.n	2686 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    268c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    268e:	7da5      	ldrb	r5, [r4, #22]
    2690:	401d      	ands	r5, r3
	callback_status = module->callback_reg_mask &
    2692:	2330      	movs	r3, #48	; 0x30
    2694:	5cf3      	ldrb	r3, [r6, r3]
    2696:	2231      	movs	r2, #49	; 0x31
    2698:	5cb7      	ldrb	r7, [r6, r2]
    269a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    269c:	07eb      	lsls	r3, r5, #31
    269e:	d522      	bpl.n	26e6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    26a0:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    26a2:	b29b      	uxth	r3, r3
    26a4:	2b00      	cmp	r3, #0
    26a6:	d01c      	beq.n	26e2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    26a8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    26aa:	7813      	ldrb	r3, [r2, #0]
    26ac:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    26ae:	1c51      	adds	r1, r2, #1
    26b0:	62b1      	str	r1, [r6, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    26b2:	7971      	ldrb	r1, [r6, #5]
    26b4:	2901      	cmp	r1, #1
    26b6:	d00e      	beq.n	26d6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    26b8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    26ba:	05db      	lsls	r3, r3, #23
    26bc:	0ddb      	lsrs	r3, r3, #23
    26be:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    26c0:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    26c2:	3b01      	subs	r3, #1
    26c4:	b29b      	uxth	r3, r3
    26c6:	85f3      	strh	r3, [r6, #46]	; 0x2e
    26c8:	2b00      	cmp	r3, #0
    26ca:	d10c      	bne.n	26e6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    26cc:	3301      	adds	r3, #1
    26ce:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    26d0:	3301      	adds	r3, #1
    26d2:	75a3      	strb	r3, [r4, #22]
    26d4:	e007      	b.n	26e6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    26d6:	7851      	ldrb	r1, [r2, #1]
    26d8:	0209      	lsls	r1, r1, #8
    26da:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    26dc:	3202      	adds	r2, #2
    26de:	62b2      	str	r2, [r6, #40]	; 0x28
    26e0:	e7eb      	b.n	26ba <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    26e2:	2301      	movs	r3, #1
    26e4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    26e6:	07ab      	lsls	r3, r5, #30
    26e8:	d506      	bpl.n	26f8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    26ea:	2302      	movs	r3, #2
    26ec:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    26ee:	2200      	movs	r2, #0
    26f0:	3331      	adds	r3, #49	; 0x31
    26f2:	54f2      	strb	r2, [r6, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    26f4:	07fb      	lsls	r3, r7, #31
    26f6:	d428      	bmi.n	274a <_usart_interrupt_handler+0xce>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    26f8:	076b      	lsls	r3, r5, #29
    26fa:	d510      	bpl.n	271e <_usart_interrupt_handler+0xa2>

		//if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    26fc:	8b63      	ldrh	r3, [r4, #26]
    26fe:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2700:	071a      	lsls	r2, r3, #28
    2702:	d426      	bmi.n	2752 <_usart_interrupt_handler+0xd6>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2704:	223f      	movs	r2, #63	; 0x3f
    2706:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) 
    2708:	2b00      	cmp	r3, #0
    270a:	d04a      	beq.n	27a2 <_usart_interrupt_handler+0x126>
			{
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    270c:	079a      	lsls	r2, r3, #30
    270e:	d523      	bpl.n	2758 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2710:	221a      	movs	r2, #26
    2712:	2332      	movs	r3, #50	; 0x32
    2714:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2716:	3b30      	subs	r3, #48	; 0x30
    2718:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    271a:	077b      	lsls	r3, r7, #29
    271c:	d43d      	bmi.n	279a <_usart_interrupt_handler+0x11e>
			//usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		//}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    271e:	06eb      	lsls	r3, r5, #27
    2720:	d504      	bpl.n	272c <_usart_interrupt_handler+0xb0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2722:	2310      	movs	r3, #16
    2724:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2726:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2728:	06fb      	lsls	r3, r7, #27
    272a:	d440      	bmi.n	27ae <_usart_interrupt_handler+0x132>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    272c:	06ab      	lsls	r3, r5, #26
    272e:	d504      	bpl.n	273a <_usart_interrupt_handler+0xbe>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2730:	2320      	movs	r3, #32
    2732:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2734:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2736:	073b      	lsls	r3, r7, #28
    2738:	d43d      	bmi.n	27b6 <_usart_interrupt_handler+0x13a>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    273a:	072b      	lsls	r3, r5, #28
    273c:	d504      	bpl.n	2748 <_usart_interrupt_handler+0xcc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    273e:	2308      	movs	r3, #8
    2740:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2742:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2744:	06bb      	lsls	r3, r7, #26
    2746:	d43a      	bmi.n	27be <_usart_interrupt_handler+0x142>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    274a:	0030      	movs	r0, r6
    274c:	68f3      	ldr	r3, [r6, #12]
    274e:	4798      	blx	r3
    2750:	e7d2      	b.n	26f8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2752:	2237      	movs	r2, #55	; 0x37
    2754:	4013      	ands	r3, r2
    2756:	e7d7      	b.n	2708 <_usart_interrupt_handler+0x8c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2758:	075a      	lsls	r2, r3, #29
    275a:	d505      	bpl.n	2768 <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_OVERFLOW;
    275c:	221e      	movs	r2, #30
    275e:	2332      	movs	r3, #50	; 0x32
    2760:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2762:	3b2e      	subs	r3, #46	; 0x2e
    2764:	8363      	strh	r3, [r4, #26]
    2766:	e7d8      	b.n	271a <_usart_interrupt_handler+0x9e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2768:	07da      	lsls	r2, r3, #31
    276a:	d505      	bpl.n	2778 <_usart_interrupt_handler+0xfc>
					module->rx_status = STATUS_ERR_BAD_DATA;
    276c:	2213      	movs	r2, #19
    276e:	2332      	movs	r3, #50	; 0x32
    2770:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2772:	3b31      	subs	r3, #49	; 0x31
    2774:	8363      	strh	r3, [r4, #26]
    2776:	e7d0      	b.n	271a <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2778:	06da      	lsls	r2, r3, #27
    277a:	d505      	bpl.n	2788 <_usart_interrupt_handler+0x10c>
					module->rx_status = STATUS_ERR_PROTOCOL;
    277c:	2242      	movs	r2, #66	; 0x42
    277e:	2332      	movs	r3, #50	; 0x32
    2780:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2782:	3b22      	subs	r3, #34	; 0x22
    2784:	8363      	strh	r3, [r4, #26]
    2786:	e7c8      	b.n	271a <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2788:	2220      	movs	r2, #32
    278a:	421a      	tst	r2, r3
    278c:	d0c5      	beq.n	271a <_usart_interrupt_handler+0x9e>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    278e:	3221      	adds	r2, #33	; 0x21
    2790:	2332      	movs	r3, #50	; 0x32
    2792:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2794:	3b12      	subs	r3, #18
    2796:	8363      	strh	r3, [r4, #26]
    2798:	e7bf      	b.n	271a <_usart_interrupt_handler+0x9e>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    279a:	0030      	movs	r0, r6
    279c:	6973      	ldr	r3, [r6, #20]
    279e:	4798      	blx	r3
    27a0:	e7bd      	b.n	271e <_usart_interrupt_handler+0xa2>
				if (callback_status
    27a2:	07bb      	lsls	r3, r7, #30
    27a4:	d5bb      	bpl.n	271e <_usart_interrupt_handler+0xa2>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    27a6:	0030      	movs	r0, r6
    27a8:	6933      	ldr	r3, [r6, #16]
    27aa:	4798      	blx	r3
    27ac:	e7b7      	b.n	271e <_usart_interrupt_handler+0xa2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    27ae:	0030      	movs	r0, r6
    27b0:	69f3      	ldr	r3, [r6, #28]
    27b2:	4798      	blx	r3
    27b4:	e7ba      	b.n	272c <_usart_interrupt_handler+0xb0>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    27b6:	0030      	movs	r0, r6
    27b8:	69b3      	ldr	r3, [r6, #24]
    27ba:	4798      	blx	r3
    27bc:	e7bd      	b.n	273a <_usart_interrupt_handler+0xbe>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    27be:	6a33      	ldr	r3, [r6, #32]
    27c0:	0030      	movs	r0, r6
    27c2:	4798      	blx	r3
}
    27c4:	e7c0      	b.n	2748 <_usart_interrupt_handler+0xcc>
    27c6:	46c0      	nop			; (mov r8, r8)
    27c8:	20000f3c 	.word	0x20000f3c

000027cc <configureADC>:
#include    "FlutterADC.h"
#define OUTPUT1_DET_AI			4	
uint16_t* ADCResult = NULL;

void configureADC()
{
    27cc:	b510      	push	{r4, lr}
    27ce:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	ADCResult = malloc(sizeof(uint16_t));
    27d0:	2002      	movs	r0, #2
    27d2:	4b19      	ldr	r3, [pc, #100]	; (2838 <configureADC+0x6c>)
    27d4:	4798      	blx	r3
    27d6:	4b19      	ldr	r3, [pc, #100]	; (283c <configureADC+0x70>)
    27d8:	6018      	str	r0, [r3, #0]
	
	adc_get_config_defaults(&conf_adc);
    27da:	4668      	mov	r0, sp
    27dc:	4b18      	ldr	r3, [pc, #96]	; (2840 <configureADC+0x74>)
    27de:	4798      	blx	r3

	conf_adc.reference			=  ADC_REFCTRL_REFSEL_INT1V;
    27e0:	2300      	movs	r3, #0
    27e2:	466a      	mov	r2, sp
    27e4:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	=  ADC_CLOCK_PRESCALER_DIV32;
    27e6:	23c0      	movs	r3, #192	; 0xc0
    27e8:	009b      	lsls	r3, r3, #2
    27ea:	8053      	strh	r3, [r2, #2]
	conf_adc.positive_input		=  OUTPUT1_DET_AI;
    27ec:	2304      	movs	r3, #4
    27ee:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input		=  ADC_NEGATIVE_INPUT_GND;
    27f0:	23c0      	movs	r3, #192	; 0xc0
    27f2:	015b      	lsls	r3, r3, #5
    27f4:	81d3      	strh	r3, [r2, #14]
	conf_adc.resolution			=  ADC_RESOLUTION_8BIT;
    27f6:	2330      	movs	r3, #48	; 0x30
    27f8:	7113      	strb	r3, [r2, #4]
	conf_adc.clock_source       = GCLK_GENERATOR_3;
    27fa:	3b2d      	subs	r3, #45	; 0x2d
    27fc:	7013      	strb	r3, [r2, #0]
	//conf_adc.left_adjust		=  true;

	adc_init(&adc_instance, ADC, &conf_adc);
    27fe:	4c11      	ldr	r4, [pc, #68]	; (2844 <configureADC+0x78>)
    2800:	4911      	ldr	r1, [pc, #68]	; (2848 <configureADC+0x7c>)
    2802:	0020      	movs	r0, r4
    2804:	4b11      	ldr	r3, [pc, #68]	; (284c <configureADC+0x80>)
    2806:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2808:	6822      	ldr	r2, [r4, #0]
    280a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    280c:	b25b      	sxtb	r3, r3
    280e:	2b00      	cmp	r3, #0
    2810:	dbfb      	blt.n	280a <configureADC+0x3e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2812:	2180      	movs	r1, #128	; 0x80
    2814:	0409      	lsls	r1, r1, #16
    2816:	4b0e      	ldr	r3, [pc, #56]	; (2850 <configureADC+0x84>)
    2818:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    281a:	230f      	movs	r3, #15
    281c:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    281e:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2820:	7813      	ldrb	r3, [r2, #0]
    2822:	2102      	movs	r1, #2
    2824:	430b      	orrs	r3, r1
    2826:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    2828:	4b06      	ldr	r3, [pc, #24]	; (2844 <configureADC+0x78>)
    282a:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    282c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    282e:	b25b      	sxtb	r3, r3
    2830:	2b00      	cmp	r3, #0
    2832:	dbfb      	blt.n	282c <configureADC+0x60>
	adc_enable(&adc_instance);
}
    2834:	b00c      	add	sp, #48	; 0x30
    2836:	bd10      	pop	{r4, pc}
    2838:	00005341 	.word	0x00005341
    283c:	20000120 	.word	0x20000120
    2840:	00001851 	.word	0x00001851
    2844:	20000f54 	.word	0x20000f54
    2848:	42004000 	.word	0x42004000
    284c:	00001899 	.word	0x00001899
    2850:	e000e100 	.word	0xe000e100

00002854 <adc_start_read_result>:




uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    2854:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    2856:	4b2d      	ldr	r3, [pc, #180]	; (290c <adc_start_read_result+0xb8>)
    2858:	6819      	ldr	r1, [r3, #0]
    285a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    285c:	b25b      	sxtb	r3, r3
    285e:	2b00      	cmp	r3, #0
    2860:	dbfb      	blt.n	285a <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2862:	690b      	ldr	r3, [r1, #16]
    2864:	221f      	movs	r2, #31
    2866:	4393      	bics	r3, r2
    2868:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    286a:	6108      	str	r0, [r1, #16]
    286c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    286e:	b25b      	sxtb	r3, r3
    2870:	2b00      	cmp	r3, #0
    2872:	dbfb      	blt.n	286c <adc_start_read_result+0x18>
    2874:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2876:	b25b      	sxtb	r3, r3
    2878:	2b00      	cmp	r3, #0
    287a:	dbfb      	blt.n	2874 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    287c:	7b0b      	ldrb	r3, [r1, #12]
    287e:	2202      	movs	r2, #2
    2880:	4313      	orrs	r3, r2
    2882:	730b      	strb	r3, [r1, #12]
    2884:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2886:	b25b      	sxtb	r3, r3
    2888:	2b00      	cmp	r3, #0
    288a:	dbfb      	blt.n	2884 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    288c:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    288e:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2890:	2402      	movs	r4, #2
    2892:	e001      	b.n	2898 <adc_start_read_result+0x44>
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    2894:	4210      	tst	r0, r2
    2896:	d10a      	bne.n	28ae <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2898:	7e0b      	ldrb	r3, [r1, #24]
    289a:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    289c:	0002      	movs	r2, r0
    289e:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    28a0:	421d      	tst	r5, r3
    28a2:	d000      	beq.n	28a6 <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    28a4:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    28a6:	421c      	tst	r4, r3
    28a8:	d0f4      	beq.n	2894 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    28aa:	432a      	orrs	r2, r5
    28ac:	e7f2      	b.n	2894 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    28ae:	7e0a      	ldrb	r2, [r1, #24]
    28b0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    28b2:	2301      	movs	r3, #1
    28b4:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    28b6:	0750      	lsls	r0, r2, #29
    28b8:	d501      	bpl.n	28be <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    28ba:	2002      	movs	r0, #2
    28bc:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    28be:	0792      	lsls	r2, r2, #30
    28c0:	d501      	bpl.n	28c6 <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    28c2:	2204      	movs	r2, #4
    28c4:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    28c6:	07db      	lsls	r3, r3, #31
    28c8:	d403      	bmi.n	28d2 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
	temp = *ADCResult;
    28ca:	4b11      	ldr	r3, [pc, #68]	; (2910 <adc_start_read_result+0xbc>)
    28cc:	681b      	ldr	r3, [r3, #0]
	return temp;
    28ce:	8818      	ldrh	r0, [r3, #0]
    28d0:	bd30      	pop	{r4, r5, pc}
    28d2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    28d4:	b25b      	sxtb	r3, r3
    28d6:	2b00      	cmp	r3, #0
    28d8:	dbfb      	blt.n	28d2 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
    28da:	4b0d      	ldr	r3, [pc, #52]	; (2910 <adc_start_read_result+0xbc>)
    28dc:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    28de:	8b4a      	ldrh	r2, [r1, #26]
    28e0:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    28e2:	4b0a      	ldr	r3, [pc, #40]	; (290c <adc_start_read_result+0xb8>)
    28e4:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    28e6:	2301      	movs	r3, #1
    28e8:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    28ea:	7e0a      	ldrb	r2, [r1, #24]
    28ec:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    28ee:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    28f0:	0750      	lsls	r0, r2, #29
    28f2:	d501      	bpl.n	28f8 <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    28f4:	2002      	movs	r0, #2
    28f6:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    28f8:	0792      	lsls	r2, r2, #30
    28fa:	d501      	bpl.n	2900 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    28fc:	2204      	movs	r2, #4
    28fe:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2900:	075b      	lsls	r3, r3, #29
    2902:	d5e2      	bpl.n	28ca <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    2904:	2302      	movs	r3, #2
    2906:	760b      	strb	r3, [r1, #24]
    2908:	e7df      	b.n	28ca <adc_start_read_result+0x76>
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	20000f54 	.word	0x20000f54
    2910:	20000120 	.word	0x20000120

00002914 <UARTReceiveBytes>:
#define LEN_LEDMATRIX_SETALL	  72

//#define LEN_COMMON_SETALL		

void UARTReceiveBytes(uint8_t* receiveData ,uint8_t countReceive)
{
    2914:	b530      	push	{r4, r5, lr}
	uint8_t i =0;
	while((headPointer - tailPointer) < countReceive )
    2916:	4d0c      	ldr	r5, [pc, #48]	; (2948 <UARTReceiveBytes+0x34>)
    2918:	4c0c      	ldr	r4, [pc, #48]	; (294c <UARTReceiveBytes+0x38>)
    291a:	782b      	ldrb	r3, [r5, #0]
    291c:	7822      	ldrb	r2, [r4, #0]
    291e:	1a9b      	subs	r3, r3, r2
    2920:	428b      	cmp	r3, r1
    2922:	dbfa      	blt.n	291a <UARTReceiveBytes+0x6>
	{
	}
	for(i=1;i<=countReceive;i++)
    2924:	2900      	cmp	r1, #0
    2926:	d00e      	beq.n	2946 <UARTReceiveBytes+0x32>
    2928:	2301      	movs	r3, #1
	{
		receiveData[i] = ringBuffer[tailPointer];
    292a:	4c08      	ldr	r4, [pc, #32]	; (294c <UARTReceiveBytes+0x38>)
    292c:	4d08      	ldr	r5, [pc, #32]	; (2950 <UARTReceiveBytes+0x3c>)
    292e:	7822      	ldrb	r2, [r4, #0]
    2930:	b2d2      	uxtb	r2, r2
    2932:	5caa      	ldrb	r2, [r5, r2]
    2934:	54c2      	strb	r2, [r0, r3]
		tailPointer++;
    2936:	7822      	ldrb	r2, [r4, #0]
    2938:	3201      	adds	r2, #1
    293a:	b2d2      	uxtb	r2, r2
    293c:	7022      	strb	r2, [r4, #0]
	for(i=1;i<=countReceive;i++)
    293e:	3301      	adds	r3, #1
    2940:	b2db      	uxtb	r3, r3
    2942:	4299      	cmp	r1, r3
    2944:	d2f3      	bcs.n	292e <UARTReceiveBytes+0x1a>
	}
}
    2946:	bd30      	pop	{r4, r5, pc}
    2948:	200010d0 	.word	0x200010d0
    294c:	200010f4 	.word	0x200010f4
    2950:	200010f8 	.word	0x200010f8

00002954 <transferLEDMatrixValues>:

void transferLEDMatrixValues(uint8_t* tempTransfer , uint8_t port)
{
    2954:	b570      	push	{r4, r5, r6, lr}
    2956:	b084      	sub	sp, #16
    2958:	2300      	movs	r3, #0
	uint32_t err_code = 0;
	//static bool firstTime = true;
	static uint8_t LEDMatrixValues[LEN_LEDMATRIX_SETALL+1]; 
	for(i=0;i<(LEN_LEDMATRIX_SETALL+1);i++)
	{
		LEDMatrixValues[i] = tempTransfer[i] ;
    295a:	4c11      	ldr	r4, [pc, #68]	; (29a0 <transferLEDMatrixValues+0x4c>)
    295c:	5cc2      	ldrb	r2, [r0, r3]
    295e:	551a      	strb	r2, [r3, r4]
    2960:	3301      	adds	r3, #1
	for(i=0;i<(LEN_LEDMATRIX_SETALL+1);i++)
    2962:	2b49      	cmp	r3, #73	; 0x49
    2964:	d1fa      	bne.n	295c <transferLEDMatrixValues+0x8>
	}
	struct i2c_master_packet wr_packet = {
		.address     = outputPort[port].address ,
    2966:	4b0f      	ldr	r3, [pc, #60]	; (29a4 <transferLEDMatrixValues+0x50>)
    2968:	00ca      	lsls	r2, r1, #3
    296a:	5cd0      	ldrb	r0, [r2, r3]
	struct i2c_master_packet wr_packet = {
    296c:	ac01      	add	r4, sp, #4
    296e:	8020      	strh	r0, [r4, #0]
		.data_length = outputPort[port].writeDataLength1,
    2970:	189b      	adds	r3, r3, r2
    2972:	791b      	ldrb	r3, [r3, #4]
	struct i2c_master_packet wr_packet = {
    2974:	8063      	strh	r3, [r4, #2]
    2976:	4b0a      	ldr	r3, [pc, #40]	; (29a0 <transferLEDMatrixValues+0x4c>)
    2978:	9302      	str	r3, [sp, #8]
    297a:	2300      	movs	r3, #0
    297c:	7223      	strb	r3, [r4, #8]
    297e:	7263      	strb	r3, [r4, #9]
    2980:	72a3      	strb	r3, [r4, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	//while(outputPort[port].I2CStatus == BUSY_MODE);
	//outputPort[port].I2CStatus = BUSY_MODE;
	I2CWrite((port+1) , &wr_packet);
    2982:	3101      	adds	r1, #1
    2984:	b2cd      	uxtb	r5, r1
    2986:	0021      	movs	r1, r4
    2988:	0028      	movs	r0, r5
    298a:	4e07      	ldr	r6, [pc, #28]	; (29a8 <transferLEDMatrixValues+0x54>)
    298c:	47b0      	blx	r6
	delay_cycles_ms(1);
    298e:	2001      	movs	r0, #1
    2990:	4b06      	ldr	r3, [pc, #24]	; (29ac <transferLEDMatrixValues+0x58>)
    2992:	4798      	blx	r3
	I2CWrite((port+1) , &wr_packet);
    2994:	0021      	movs	r1, r4
    2996:	0028      	movs	r0, r5
    2998:	47b0      	blx	r6
		
	}
	firstTime = false;
	*/
	
}
    299a:	b004      	add	sp, #16
    299c:	bd70      	pop	{r4, r5, r6, pc}
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	20000124 	.word	0x20000124
    29a4:	200010d4 	.word	0x200010d4
    29a8:	00001159 	.word	0x00001159
    29ac:	00001825 	.word	0x00001825

000029b0 <checkUART>:


void checkUART()
{
    29b0:	b510      	push	{r4, lr}
	uint8_t i =0;
	uint8_t port = 3;
	static uint8_t receivedValue[100];
	if(headPointer != tailPointer)
    29b2:	4b2b      	ldr	r3, [pc, #172]	; (2a60 <checkUART+0xb0>)
    29b4:	781b      	ldrb	r3, [r3, #0]
    29b6:	4a2b      	ldr	r2, [pc, #172]	; (2a64 <checkUART+0xb4>)
    29b8:	7812      	ldrb	r2, [r2, #0]
    29ba:	b2db      	uxtb	r3, r3
    29bc:	4293      	cmp	r3, r2
    29be:	d03c      	beq.n	2a3a <checkUART+0x8a>
	{
		receivedValue[0]  = ringBuffer[tailPointer];
    29c0:	4928      	ldr	r1, [pc, #160]	; (2a64 <checkUART+0xb4>)
    29c2:	780b      	ldrb	r3, [r1, #0]
    29c4:	b2db      	uxtb	r3, r3
    29c6:	4a28      	ldr	r2, [pc, #160]	; (2a68 <checkUART+0xb8>)
    29c8:	5cd3      	ldrb	r3, [r2, r3]
    29ca:	b2db      	uxtb	r3, r3
    29cc:	4a27      	ldr	r2, [pc, #156]	; (2a6c <checkUART+0xbc>)
    29ce:	7013      	strb	r3, [r2, #0]
		tailPointer++;
    29d0:	780a      	ldrb	r2, [r1, #0]
    29d2:	3201      	adds	r2, #1
    29d4:	b2d2      	uxtb	r2, r2
    29d6:	700a      	strb	r2, [r1, #0]
		switch(receivedValue[0])
    29d8:	2b4c      	cmp	r3, #76	; 0x4c
    29da:	d021      	beq.n	2a20 <checkUART+0x70>
    29dc:	d90f      	bls.n	29fe <checkUART+0x4e>
    29de:	2b62      	cmp	r3, #98	; 0x62
    29e0:	d117      	bne.n	2a12 <checkUART+0x62>
		{
			case TEST:
				break;
			case BROADCAST:
				UARTReceiveBytes(receivedValue , LEN_BROADCAST_COMMAND );
    29e2:	4c22      	ldr	r4, [pc, #136]	; (2a6c <checkUART+0xbc>)
    29e4:	2101      	movs	r1, #1
    29e6:	0020      	movs	r0, r4
    29e8:	4b21      	ldr	r3, [pc, #132]	; (2a70 <checkUART+0xc0>)
    29ea:	4798      	blx	r3
				if(receivedValue[1]  == START_BROADCAST)
    29ec:	7863      	ldrb	r3, [r4, #1]
    29ee:	2b67      	cmp	r3, #103	; 0x67
    29f0:	d012      	beq.n	2a18 <checkUART+0x68>
				{
					broadcastFlag = true;
				}
				else if(receivedValue[1] == STOP_BROADCAST)
    29f2:	2b73      	cmp	r3, #115	; 0x73
    29f4:	d12a      	bne.n	2a4c <checkUART+0x9c>
				{
					broadcastFlag = false;
    29f6:	2200      	movs	r2, #0
    29f8:	4b1e      	ldr	r3, [pc, #120]	; (2a74 <checkUART+0xc4>)
    29fa:	701a      	strb	r2, [r3, #0]
    29fc:	e026      	b.n	2a4c <checkUART+0x9c>
		switch(receivedValue[0])
    29fe:	2b01      	cmp	r3, #1
    2a00:	d024      	beq.n	2a4c <checkUART+0x9c>
    2a02:	2b43      	cmp	r3, #67	; 0x43
    2a04:	d022      	beq.n	2a4c <checkUART+0x9c>
			*/
				break;
			case STOP_BROADCAST:
				break;
			default:
			    headPointer = 0;
    2a06:	2300      	movs	r3, #0
    2a08:	4a15      	ldr	r2, [pc, #84]	; (2a60 <checkUART+0xb0>)
    2a0a:	7013      	strb	r3, [r2, #0]
			    tailPointer = 0;
    2a0c:	4a15      	ldr	r2, [pc, #84]	; (2a64 <checkUART+0xb4>)
    2a0e:	7013      	strb	r3, [r2, #0]
				break;
    2a10:	e01c      	b.n	2a4c <checkUART+0x9c>
		switch(receivedValue[0])
    2a12:	2b73      	cmp	r3, #115	; 0x73
    2a14:	d1f7      	bne.n	2a06 <checkUART+0x56>
    2a16:	e019      	b.n	2a4c <checkUART+0x9c>
					broadcastFlag = true;
    2a18:	2201      	movs	r2, #1
    2a1a:	4b16      	ldr	r3, [pc, #88]	; (2a74 <checkUART+0xc4>)
    2a1c:	701a      	strb	r2, [r3, #0]
    2a1e:	e015      	b.n	2a4c <checkUART+0x9c>
				UARTReceiveBytes(receivedValue , LEN_LEDMATRIX_SETALL );
    2a20:	2148      	movs	r1, #72	; 0x48
    2a22:	4812      	ldr	r0, [pc, #72]	; (2a6c <checkUART+0xbc>)
    2a24:	4b12      	ldr	r3, [pc, #72]	; (2a70 <checkUART+0xc0>)
    2a26:	4798      	blx	r3
					if(outputPort[port].currentState == 	OUTPUT_LEDMATRIX )
    2a28:	4b13      	ldr	r3, [pc, #76]	; (2a78 <checkUART+0xc8>)
    2a2a:	7e5b      	ldrb	r3, [r3, #25]
    2a2c:	2b03      	cmp	r3, #3
    2a2e:	d10d      	bne.n	2a4c <checkUART+0x9c>
						transferLEDMatrixValues(receivedValue,port);
    2a30:	2103      	movs	r1, #3
    2a32:	480e      	ldr	r0, [pc, #56]	; (2a6c <checkUART+0xbc>)
    2a34:	4b11      	ldr	r3, [pc, #68]	; (2a7c <checkUART+0xcc>)
    2a36:	4798      	blx	r3
    2a38:	e008      	b.n	2a4c <checkUART+0x9c>
		}
	}
	else if(broadcastFlag == true)
    2a3a:	4b0e      	ldr	r3, [pc, #56]	; (2a74 <checkUART+0xc4>)
    2a3c:	781b      	ldrb	r3, [r3, #0]
    2a3e:	2b01      	cmp	r3, #1
    2a40:	d005      	beq.n	2a4e <checkUART+0x9e>
		tailPointer = 0;
		sendDataBLE();
	}
	else
	{
		headPointer = 0;
    2a42:	2300      	movs	r3, #0
    2a44:	4a06      	ldr	r2, [pc, #24]	; (2a60 <checkUART+0xb0>)
    2a46:	7013      	strb	r3, [r2, #0]
		tailPointer = 0;
    2a48:	4a06      	ldr	r2, [pc, #24]	; (2a64 <checkUART+0xb4>)
    2a4a:	7013      	strb	r3, [r2, #0]
	}
    2a4c:	bd10      	pop	{r4, pc}
		headPointer = 0;
    2a4e:	2300      	movs	r3, #0
    2a50:	4a03      	ldr	r2, [pc, #12]	; (2a60 <checkUART+0xb0>)
    2a52:	7013      	strb	r3, [r2, #0]
		tailPointer = 0;
    2a54:	4a03      	ldr	r2, [pc, #12]	; (2a64 <checkUART+0xb4>)
    2a56:	7013      	strb	r3, [r2, #0]
		sendDataBLE();
    2a58:	4b09      	ldr	r3, [pc, #36]	; (2a80 <checkUART+0xd0>)
    2a5a:	4798      	blx	r3
    2a5c:	e7f6      	b.n	2a4c <checkUART+0x9c>
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	200010d0 	.word	0x200010d0
    2a64:	200010f4 	.word	0x200010f4
    2a68:	200010f8 	.word	0x200010f8
    2a6c:	20000170 	.word	0x20000170
    2a70:	00002915 	.word	0x00002915
    2a74:	2000016d 	.word	0x2000016d
    2a78:	200010d4 	.word	0x200010d4
    2a7c:	00002955 	.word	0x00002955
    2a80:	00001749 	.word	0x00001749

00002a84 <readSensors>:
extern uint8_t NoInDevCon ;
extern uint8_t inputsConnected[3];
extern uint8_t sensorOutputs[40];

void readSensors()
{
    2a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a86:	4f19      	ldr	r7, [pc, #100]	; (2aec <readSensors+0x68>)
    2a88:	4e19      	ldr	r6, [pc, #100]	; (2af0 <readSensors+0x6c>)
    2a8a:	4c1a      	ldr	r4, [pc, #104]	; (2af4 <readSensors+0x70>)
    2a8c:	2501      	movs	r5, #1
    2a8e:	e00b      	b.n	2aa8 <readSensors+0x24>
		for(i=0;i<NO_SENSORS;i++)
		{
			switch(inputsConnected[i])
			{
				case ANALOG_LIGHT_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    2a90:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2a92:	7820      	ldrb	r0, [r4, #0]
    2a94:	4b18      	ldr	r3, [pc, #96]	; (2af8 <readSensors+0x74>)
    2a96:	4798      	blx	r3
    2a98:	7170      	strb	r0, [r6, #5]
    2a9a:	3501      	adds	r5, #1
    2a9c:	b2ed      	uxtb	r5, r5
    2a9e:	3701      	adds	r7, #1
    2aa0:	3605      	adds	r6, #5
    2aa2:	3401      	adds	r4, #1
		for(i=0;i<NO_SENSORS;i++)
    2aa4:	2d04      	cmp	r5, #4
    2aa6:	d020      	beq.n	2aea <readSensors+0x66>
			switch(inputsConnected[i])
    2aa8:	783b      	ldrb	r3, [r7, #0]
    2aaa:	3b1b      	subs	r3, #27
    2aac:	b2da      	uxtb	r2, r3
    2aae:	2a04      	cmp	r2, #4
    2ab0:	d8f3      	bhi.n	2a9a <readSensors+0x16>
    2ab2:	0093      	lsls	r3, r2, #2
    2ab4:	4a11      	ldr	r2, [pc, #68]	; (2afc <readSensors+0x78>)
    2ab6:	58d3      	ldr	r3, [r2, r3]
    2ab8:	469f      	mov	pc, r3
					break;
				case ANALOG_DISTANCE_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    2aba:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2abc:	7820      	ldrb	r0, [r4, #0]
    2abe:	4b0e      	ldr	r3, [pc, #56]	; (2af8 <readSensors+0x74>)
    2ac0:	4798      	blx	r3
    2ac2:	7170      	strb	r0, [r6, #5]
					break;
    2ac4:	e7e9      	b.n	2a9a <readSensors+0x16>
				case ANALOG_SOUND_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    2ac6:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2ac8:	7820      	ldrb	r0, [r4, #0]
    2aca:	4b0b      	ldr	r3, [pc, #44]	; (2af8 <readSensors+0x74>)
    2acc:	4798      	blx	r3
    2ace:	7170      	strb	r0, [r6, #5]
					break;
    2ad0:	e7e3      	b.n	2a9a <readSensors+0x16>
				case ANALOG_DIAL:
					sensorOutputs[5*i + 4]     = i+1;
    2ad2:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2ad4:	7820      	ldrb	r0, [r4, #0]
    2ad6:	4b08      	ldr	r3, [pc, #32]	; (2af8 <readSensors+0x74>)
    2ad8:	4798      	blx	r3
    2ada:	7170      	strb	r0, [r6, #5]
					break;
    2adc:	e7dd      	b.n	2a9a <readSensors+0x16>
				case ANALOG_TEMPERATURE:
					sensorOutputs[5*i + 4]     = i+1;
    2ade:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2ae0:	7820      	ldrb	r0, [r4, #0]
    2ae2:	4b05      	ldr	r3, [pc, #20]	; (2af8 <readSensors+0x74>)
    2ae4:	4798      	blx	r3
    2ae6:	7170      	strb	r0, [r6, #5]
					break;
    2ae8:	e7d7      	b.n	2a9a <readSensors+0x16>
					*/
					break;
			}
		}
	//}
}
    2aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2aec:	20000de8 	.word	0x20000de8
    2af0:	20000f78 	.word	0x20000f78
    2af4:	000055f4 	.word	0x000055f4
    2af8:	00002855 	.word	0x00002855
    2afc:	000055e0 	.word	0x000055e0

00002b00 <usart_read_callback>:
	usart_enable(&usart_instance);
}

//USART callback with a ring buffer 
void usart_read_callback(struct usart_module *const usart_module)
{
    2b00:	b082      	sub	sp, #8
	volatile uint16_t recData = 0;
    2b02:	466b      	mov	r3, sp
    2b04:	1d99      	adds	r1, r3, #6
    2b06:	2300      	movs	r3, #0
    2b08:	800b      	strh	r3, [r1, #0]
	recData = (usart_instance.hw->USART.DATA.reg & SERCOM_USART_DATA_MASK);
    2b0a:	4b0b      	ldr	r3, [pc, #44]	; (2b38 <usart_read_callback+0x38>)
    2b0c:	681b      	ldr	r3, [r3, #0]
    2b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2b10:	05db      	lsls	r3, r3, #23
    2b12:	0ddb      	lsrs	r3, r3, #23
    2b14:	800b      	strh	r3, [r1, #0]
	*(ringBuffer + headPointer) = (uint8_t)recData;
    2b16:	4a09      	ldr	r2, [pc, #36]	; (2b3c <usart_read_callback+0x3c>)
    2b18:	7810      	ldrb	r0, [r2, #0]
    2b1a:	4b09      	ldr	r3, [pc, #36]	; (2b40 <usart_read_callback+0x40>)
    2b1c:	181b      	adds	r3, r3, r0
    2b1e:	8809      	ldrh	r1, [r1, #0]
    2b20:	b2c9      	uxtb	r1, r1
    2b22:	7019      	strb	r1, [r3, #0]
	headPointer++;
    2b24:	7813      	ldrb	r3, [r2, #0]
    2b26:	3301      	adds	r3, #1
    2b28:	b2db      	uxtb	r3, r3
    2b2a:	7013      	strb	r3, [r2, #0]
	recDataStatus = true;
    2b2c:	2201      	movs	r2, #1
    2b2e:	4b05      	ldr	r3, [pc, #20]	; (2b44 <usart_read_callback+0x44>)
    2b30:	701a      	strb	r2, [r3, #0]
}
    2b32:	b002      	add	sp, #8
    2b34:	4770      	bx	lr
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	20000ee8 	.word	0x20000ee8
    2b3c:	200010d0 	.word	0x200010d0
    2b40:	200010f8 	.word	0x200010f8
    2b44:	20000fa0 	.word	0x20000fa0

00002b48 <serialInit>:
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}

//Main function 
void serialInit()
{
    2b48:	b530      	push	{r4, r5, lr}
    2b4a:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2b4c:	ab01      	add	r3, sp, #4
    2b4e:	2280      	movs	r2, #128	; 0x80
    2b50:	05d2      	lsls	r2, r2, #23
    2b52:	9201      	str	r2, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2b54:	2200      	movs	r2, #0
    2b56:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    2b58:	21ff      	movs	r1, #255	; 0xff
    2b5a:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    2b5c:	2100      	movs	r1, #0
    2b5e:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2b60:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2b62:	2001      	movs	r0, #1
    2b64:	2424      	movs	r4, #36	; 0x24
    2b66:	5518      	strb	r0, [r3, r4]
	config->transmitter_enable = true;
    2b68:	3401      	adds	r4, #1
    2b6a:	5518      	strb	r0, [r3, r4]
	config->clock_polarity_inverted = false;
    2b6c:	3025      	adds	r0, #37	; 0x25
    2b6e:	541a      	strb	r2, [r3, r0]
	config->use_external_clock = false;
    2b70:	3001      	adds	r0, #1
    2b72:	541a      	strb	r2, [r3, r0]
	config->ext_clock_freq   = 0;
    2b74:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2b76:	3005      	adds	r0, #5
    2b78:	541a      	strb	r2, [r3, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2b7a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2b7c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2b7e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2b80:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2b82:	7719      	strb	r1, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2b84:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    2b86:	2213      	movs	r2, #19
    2b88:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2b8a:	7759      	strb	r1, [r3, #29]
	config_usart.baudrate    = BAUDRATE_BLE;
    2b8c:	22e1      	movs	r2, #225	; 0xe1
    2b8e:	0252      	lsls	r2, r2, #9
    2b90:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_SERCOM_MUX_SETTING;
    2b92:	2280      	movs	r2, #128	; 0x80
    2b94:	0392      	lsls	r2, r2, #14
    2b96:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = USART_SERCOM_PINMUX_PAD0_TX;
    2b98:	4a1b      	ldr	r2, [pc, #108]	; (2c08 <serialInit+0xc0>)
    2b9a:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = USART_SERCOM_PINMUX_PAD1_UNUSED;
    2b9c:	2201      	movs	r2, #1
    2b9e:	4252      	negs	r2, r2
    2ba0:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = USART_SERCOM_PINMUX_PAD2_RX;
    2ba2:	491a      	ldr	r1, [pc, #104]	; (2c0c <serialInit+0xc4>)
    2ba4:	6399      	str	r1, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = USART_SERCOM_PINMUX_PAD3_UNUSED;
    2ba6:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.generator_source = GCLK_GENERATOR_3;
    2ba8:	2103      	movs	r1, #3
    2baa:	322e      	adds	r2, #46	; 0x2e
    2bac:	5499      	strb	r1, [r3, r2]
	while (usart_init(&usart_instance,BLE_UART_MODULE, &config_usart) != STATUS_OK){}
    2bae:	4d18      	ldr	r5, [pc, #96]	; (2c10 <serialInit+0xc8>)
    2bb0:	4c18      	ldr	r4, [pc, #96]	; (2c14 <serialInit+0xcc>)
    2bb2:	aa01      	add	r2, sp, #4
    2bb4:	4918      	ldr	r1, [pc, #96]	; (2c18 <serialInit+0xd0>)
    2bb6:	0028      	movs	r0, r5
    2bb8:	47a0      	blx	r4
    2bba:	2800      	cmp	r0, #0
    2bbc:	d1f9      	bne.n	2bb2 <serialInit+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bbe:	4d14      	ldr	r5, [pc, #80]	; (2c10 <serialInit+0xc8>)
    2bc0:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2bc2:	0020      	movs	r0, r4
    2bc4:	4b15      	ldr	r3, [pc, #84]	; (2c1c <serialInit+0xd4>)
    2bc6:	4798      	blx	r3
    2bc8:	231f      	movs	r3, #31
    2bca:	4018      	ands	r0, r3
    2bcc:	3b1e      	subs	r3, #30
    2bce:	4083      	lsls	r3, r0
    2bd0:	4a13      	ldr	r2, [pc, #76]	; (2c20 <serialInit+0xd8>)
    2bd2:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bd4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2bd6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2bd8:	2b00      	cmp	r3, #0
    2bda:	d1fc      	bne.n	2bd6 <serialInit+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2bdc:	6823      	ldr	r3, [r4, #0]
    2bde:	2202      	movs	r2, #2
    2be0:	4313      	orrs	r3, r2
    2be2:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    2be4:	4c0a      	ldr	r4, [pc, #40]	; (2c10 <serialInit+0xc8>)
    2be6:	3a01      	subs	r2, #1
    2be8:	490e      	ldr	r1, [pc, #56]	; (2c24 <serialInit+0xdc>)
    2bea:	0020      	movs	r0, r4
    2bec:	4b0e      	ldr	r3, [pc, #56]	; (2c28 <serialInit+0xe0>)
    2bee:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2bf0:	2231      	movs	r2, #49	; 0x31
    2bf2:	5ca3      	ldrb	r3, [r4, r2]
    2bf4:	2102      	movs	r1, #2
    2bf6:	430b      	orrs	r3, r1
    2bf8:	54a3      	strb	r3, [r4, r2]
	uint8_t temp_buffer[MAX_RX_BUFFER_LENGTH];
	configureUSART();
	configureUSARTCallbacks();
	usart_read_buffer_job(&usart_instance,(uint8_t *)temp_buffer, MAX_RX_BUFFER_LENGTH);
    2bfa:	3a30      	subs	r2, #48	; 0x30
    2bfc:	a911      	add	r1, sp, #68	; 0x44
    2bfe:	0020      	movs	r0, r4
    2c00:	4b0a      	ldr	r3, [pc, #40]	; (2c2c <serialInit+0xe4>)
    2c02:	4798      	blx	r3
    2c04:	b013      	add	sp, #76	; 0x4c
    2c06:	bd30      	pop	{r4, r5, pc}
    2c08:	002c0002 	.word	0x002c0002
    2c0c:	002e0002 	.word	0x002e0002
    2c10:	20000ee8 	.word	0x20000ee8
    2c14:	000021c5 	.word	0x000021c5
    2c18:	42001800 	.word	0x42001800
    2c1c:	00002135 	.word	0x00002135
    2c20:	e000e100 	.word	0xe000e100
    2c24:	00002b01 	.word	0x00002b01
    2c28:	00002645 	.word	0x00002645
    2c2c:	0000265d 	.word	0x0000265d

00002c30 <inputOutputConnection>:

uint8_t  inputOutputConnection(uint8_t analogInput)
{
	uint8_t inputOutput = 100;
	
	if((analogInput > MIN_THRES_LIGHT) && (analogInput <= MAX_THRES_LIGHT))
    2c30:	0003      	movs	r3, r0
    2c32:	330f      	adds	r3, #15
    2c34:	b2db      	uxtb	r3, r3
	{
		inputOutput	=		ANALOG_LIGHT_SENSOR;
    2c36:	221f      	movs	r2, #31
	if((analogInput > MIN_THRES_LIGHT) && (analogInput <= MAX_THRES_LIGHT))
    2c38:	2b09      	cmp	r3, #9
    2c3a:	d801      	bhi.n	2c40 <inputOutputConnection+0x10>
	else if((analogInput > MIN_THRES_NOTHING) && (analogInput <= MAX_THRES_NOTHING))
	{
		inputOutput	=		NOTHINGCONNECTED;
	}
	return inputOutput;
}
    2c3c:	0010      	movs	r0, r2
    2c3e:	4770      	bx	lr
	else if((analogInput > MIN_THRES_DIAL) && (analogInput <= MAX_THRES_DIAL))
    2c40:	0003      	movs	r3, r0
    2c42:	3319      	adds	r3, #25
    2c44:	b2db      	uxtb	r3, r3
		inputOutput	=		ANALOG_DIAL;
    2c46:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_DIAL) && (analogInput <= MAX_THRES_DIAL))
    2c48:	2b09      	cmp	r3, #9
    2c4a:	d9f7      	bls.n	2c3c <inputOutputConnection+0xc>
	else if((analogInput > MIN_THRES_DISTANCE) && (analogInput <= MAX_THRES_DISTANCE))
    2c4c:	0003      	movs	r3, r0
    2c4e:	3323      	adds	r3, #35	; 0x23
    2c50:	b2db      	uxtb	r3, r3
		inputOutput	=	    ANALOG_DISTANCE_SENSOR;
    2c52:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_DISTANCE) && (analogInput <= MAX_THRES_DISTANCE))
    2c54:	2b09      	cmp	r3, #9
    2c56:	d9f1      	bls.n	2c3c <inputOutputConnection+0xc>
	else if((analogInput > MIN_THRES_SOUND) && (analogInput <= MAX_THRES_SOUND))
    2c58:	0003      	movs	r3, r0
    2c5a:	332d      	adds	r3, #45	; 0x2d
    2c5c:	b2db      	uxtb	r3, r3
		inputOutput	=		ANALOG_SOUND_SENSOR;
    2c5e:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_SOUND) && (analogInput <= MAX_THRES_SOUND))
    2c60:	2b09      	cmp	r3, #9
    2c62:	d9eb      	bls.n	2c3c <inputOutputConnection+0xc>
		inputOutput	=		OUTPUT_SERVO_POSITION;
    2c64:	3a1a      	subs	r2, #26
	else if((analogInput > MIN_THRES_SERVO) && (analogInput <= MAX_THRES_SERVO))
    2c66:	0003      	movs	r3, r0
    2c68:	3b0b      	subs	r3, #11
    2c6a:	2b09      	cmp	r3, #9
    2c6c:	d9e6      	bls.n	2c3c <inputOutputConnection+0xc>
		inputOutput	=		OUTPUT_LEDMATRIX;
    2c6e:	3201      	adds	r2, #1
	else if((analogInput > MIN_THRES_LEDMATRIX) && (analogInput <= MAX_THRES_LEDMATRIX))
    2c70:	3b14      	subs	r3, #20
    2c72:	2b27      	cmp	r3, #39	; 0x27
    2c74:	d9e2      	bls.n	2c3c <inputOutputConnection+0xc>
	uint8_t inputOutput = 100;
    2c76:	3261      	adds	r2, #97	; 0x61
	else if((analogInput > MIN_THRES_NOTHING) && (analogInput <= MAX_THRES_NOTHING))
    2c78:	28fa      	cmp	r0, #250	; 0xfa
    2c7a:	d9df      	bls.n	2c3c <inputOutputConnection+0xc>
		inputOutput	=		NOTHINGCONNECTED;
    2c7c:	2200      	movs	r2, #0
    2c7e:	e7dd      	b.n	2c3c <inputOutputConnection+0xc>

00002c80 <convertAnalogOutputs>:


void convertAnalogOutputs(uint8_t* analogOutput)
{
    2c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c82:	0006      	movs	r6, r0
    2c84:	4d34      	ldr	r5, [pc, #208]	; (2d58 <convertAnalogOutputs+0xd8>)
    2c86:	2400      	movs	r4, #0
	uint8_t tempOutput = 0;
	uint8_t i =0;
	uint8_t tempOutputCount = 0;
	for(i=0;i<NO_OUTPUTS;i++)
	{
		tempOutput	=   inputOutputConnection(analogOutput[i]);
    2c88:	4f34      	ldr	r7, [pc, #208]	; (2d5c <convertAnalogOutputs+0xdc>)
    2c8a:	e011      	b.n	2cb0 <convertAnalogOutputs+0x30>
    2c8c:	0029      	movs	r1, r5
				connecting[i] = true;
				tempOutputsConnected[i] = tempOutput;
			}
			else
			{
				if((connecting[i] == true) && (tempOutputsConnected[i] == tempOutput ))
    2c8e:	782a      	ldrb	r2, [r5, #0]
    2c90:	2a01      	cmp	r2, #1
    2c92:	d020      	beq.n	2cd6 <convertAnalogOutputs+0x56>
						countConnecting[i] = 0;
					}
				}
				else
				{
					connecting[i] = false;
    2c94:	2300      	movs	r3, #0
    2c96:	700b      	strb	r3, [r1, #0]
					countConnecting[i] = 0;
    2c98:	4a31      	ldr	r2, [pc, #196]	; (2d60 <convertAnalogOutputs+0xe0>)
    2c9a:	54a3      	strb	r3, [r4, r2]
					tempOutputsConnected[i] = NOTHINGCONNECTED;
    2c9c:	4a31      	ldr	r2, [pc, #196]	; (2d64 <convertAnalogOutputs+0xe4>)
    2c9e:	54a3      	strb	r3, [r4, r2]
				countDisconnection[i] = 0;
				outputsConnected[i]	= NOTHINGCONNECTED;
			}
		}
		
		previousOutputsConnected[i] = outputsConnected[i];
    2ca0:	4b31      	ldr	r3, [pc, #196]	; (2d68 <convertAnalogOutputs+0xe8>)
    2ca2:	5d1a      	ldrb	r2, [r3, r4]
    2ca4:	4b31      	ldr	r3, [pc, #196]	; (2d6c <convertAnalogOutputs+0xec>)
    2ca6:	54e2      	strb	r2, [r4, r3]
    2ca8:	3401      	adds	r4, #1
    2caa:	3501      	adds	r5, #1
	for(i=0;i<NO_OUTPUTS;i++)
    2cac:	2c04      	cmp	r4, #4
    2cae:	d03a      	beq.n	2d26 <convertAnalogOutputs+0xa6>
		tempOutput	=   inputOutputConnection(analogOutput[i]);
    2cb0:	5d30      	ldrb	r0, [r6, r4]
    2cb2:	47b8      	blx	r7
    2cb4:	1e03      	subs	r3, r0, #0
		if(tempOutput != NOTHINGCONNECTED)
    2cb6:	d01f      	beq.n	2cf8 <convertAnalogOutputs+0x78>
			countDisconnection[i] = 0;
    2cb8:	2200      	movs	r2, #0
    2cba:	492d      	ldr	r1, [pc, #180]	; (2d70 <convertAnalogOutputs+0xf0>)
    2cbc:	5462      	strb	r2, [r4, r1]
			if((previousOutputsConnected[i] == NOTHINGCONNECTED) && (connecting[i] == false))
    2cbe:	4a2b      	ldr	r2, [pc, #172]	; (2d6c <convertAnalogOutputs+0xec>)
    2cc0:	5ca2      	ldrb	r2, [r4, r2]
    2cc2:	2a00      	cmp	r2, #0
    2cc4:	d1e2      	bne.n	2c8c <convertAnalogOutputs+0xc>
    2cc6:	782a      	ldrb	r2, [r5, #0]
    2cc8:	2a00      	cmp	r2, #0
    2cca:	d1df      	bne.n	2c8c <convertAnalogOutputs+0xc>
				connecting[i] = true;
    2ccc:	2301      	movs	r3, #1
    2cce:	702b      	strb	r3, [r5, #0]
				tempOutputsConnected[i] = tempOutput;
    2cd0:	4b24      	ldr	r3, [pc, #144]	; (2d64 <convertAnalogOutputs+0xe4>)
    2cd2:	54e0      	strb	r0, [r4, r3]
    2cd4:	e7e4      	b.n	2ca0 <convertAnalogOutputs+0x20>
				if((connecting[i] == true) && (tempOutputsConnected[i] == tempOutput ))
    2cd6:	4a23      	ldr	r2, [pc, #140]	; (2d64 <convertAnalogOutputs+0xe4>)
    2cd8:	5ca2      	ldrb	r2, [r4, r2]
    2cda:	429a      	cmp	r2, r3
    2cdc:	d1da      	bne.n	2c94 <convertAnalogOutputs+0x14>
					countConnecting[i]++;
    2cde:	4a20      	ldr	r2, [pc, #128]	; (2d60 <convertAnalogOutputs+0xe0>)
    2ce0:	5ca3      	ldrb	r3, [r4, r2]
    2ce2:	3301      	adds	r3, #1
    2ce4:	b2db      	uxtb	r3, r3
    2ce6:	54a3      	strb	r3, [r4, r2]
					if(countConnecting[i] > COUNT_CONNECTING_THRESHOLD)
    2ce8:	2b05      	cmp	r3, #5
    2cea:	d9d9      	bls.n	2ca0 <convertAnalogOutputs+0x20>
						outputsConnected[i] = tempOutput;
    2cec:	4b1e      	ldr	r3, [pc, #120]	; (2d68 <convertAnalogOutputs+0xe8>)
    2cee:	5518      	strb	r0, [r3, r4]
						connecting[i] = false;
    2cf0:	2300      	movs	r3, #0
    2cf2:	702b      	strb	r3, [r5, #0]
						countConnecting[i] = 0;
    2cf4:	54a3      	strb	r3, [r4, r2]
    2cf6:	e7d3      	b.n	2ca0 <convertAnalogOutputs+0x20>
			countDisconnection[i]++;
    2cf8:	4b1d      	ldr	r3, [pc, #116]	; (2d70 <convertAnalogOutputs+0xf0>)
    2cfa:	5ce3      	ldrb	r3, [r4, r3]
    2cfc:	3301      	adds	r3, #1
    2cfe:	b2db      	uxtb	r3, r3
    2d00:	4a1b      	ldr	r2, [pc, #108]	; (2d70 <convertAnalogOutputs+0xf0>)
    2d02:	54a3      	strb	r3, [r4, r2]
			if(countDisconnection[i] > COUNT_CONNECTING_THRESHOLD)
    2d04:	2b05      	cmp	r3, #5
    2d06:	d9cb      	bls.n	2ca0 <convertAnalogOutputs+0x20>
				if(i==3)
    2d08:	b2e3      	uxtb	r3, r4
    2d0a:	2b03      	cmp	r3, #3
    2d0c:	d006      	beq.n	2d1c <convertAnalogOutputs+0x9c>
				countDisconnection[i] = 0;
    2d0e:	2300      	movs	r3, #0
    2d10:	4a17      	ldr	r2, [pc, #92]	; (2d70 <convertAnalogOutputs+0xf0>)
    2d12:	54a3      	strb	r3, [r4, r2]
				outputsConnected[i]	= NOTHINGCONNECTED;
    2d14:	4a14      	ldr	r2, [pc, #80]	; (2d68 <convertAnalogOutputs+0xe8>)
    2d16:	18a2      	adds	r2, r4, r2
    2d18:	7013      	strb	r3, [r2, #0]
    2d1a:	e7c1      	b.n	2ca0 <convertAnalogOutputs+0x20>
					countDisconnection[3] = 0;
    2d1c:	2300      	movs	r3, #0
    2d1e:	70d3      	strb	r3, [r2, #3]
				    outputsConnected[3]	= NOTHINGCONNECTED;
    2d20:	4a11      	ldr	r2, [pc, #68]	; (2d68 <convertAnalogOutputs+0xe8>)
    2d22:	70d3      	strb	r3, [r2, #3]
    2d24:	e7f3      	b.n	2d0e <convertAnalogOutputs+0x8e>
	}
	temp_test_outputs_connected_1[temp_count] = analogOutput[0] ;
    2d26:	4b13      	ldr	r3, [pc, #76]	; (2d74 <convertAnalogOutputs+0xf4>)
    2d28:	881b      	ldrh	r3, [r3, #0]
    2d2a:	7831      	ldrb	r1, [r6, #0]
    2d2c:	4a12      	ldr	r2, [pc, #72]	; (2d78 <convertAnalogOutputs+0xf8>)
    2d2e:	54d1      	strb	r1, [r2, r3]
	temp_test_outputs_connected_2[temp_count] = analogOutput[1] ;
    2d30:	7871      	ldrb	r1, [r6, #1]
    2d32:	4a12      	ldr	r2, [pc, #72]	; (2d7c <convertAnalogOutputs+0xfc>)
    2d34:	54d1      	strb	r1, [r2, r3]
	temp_test_outputs_connected_3[temp_count] = analogOutput[3] ;
    2d36:	78f1      	ldrb	r1, [r6, #3]
    2d38:	4a11      	ldr	r2, [pc, #68]	; (2d80 <convertAnalogOutputs+0x100>)
    2d3a:	54d1      	strb	r1, [r2, r3]
	
	temp_count++;
    2d3c:	3301      	adds	r3, #1
    2d3e:	b29b      	uxth	r3, r3
	if(temp_count == 500)
    2d40:	22fa      	movs	r2, #250	; 0xfa
    2d42:	0052      	lsls	r2, r2, #1
    2d44:	4293      	cmp	r3, r2
    2d46:	d002      	beq.n	2d4e <convertAnalogOutputs+0xce>
	temp_count++;
    2d48:	4a0a      	ldr	r2, [pc, #40]	; (2d74 <convertAnalogOutputs+0xf4>)
    2d4a:	8013      	strh	r3, [r2, #0]
	{
		temp_count = 0;
	}
	
}
    2d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp_count = 0;
    2d4e:	2200      	movs	r2, #0
    2d50:	4b08      	ldr	r3, [pc, #32]	; (2d74 <convertAnalogOutputs+0xf4>)
    2d52:	801a      	strh	r2, [r3, #0]
}
    2d54:	e7fa      	b.n	2d4c <convertAnalogOutputs+0xcc>
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	200001dc 	.word	0x200001dc
    2d5c:	00002c31 	.word	0x00002c31
    2d60:	200001e4 	.word	0x200001e4
    2d64:	20000204 	.word	0x20000204
    2d68:	20000f74 	.word	0x20000f74
    2d6c:	200001f8 	.word	0x200001f8
    2d70:	200001ec 	.word	0x200001ec
    2d74:	20000208 	.word	0x20000208
    2d78:	200007e8 	.word	0x200007e8
    2d7c:	200009dc 	.word	0x200009dc
    2d80:	20000bd0 	.word	0x20000bd0

00002d84 <convertAnalogInputs>:




void convertAnalogInputs(uint8_t* analogInputs)
{
    2d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d86:	0006      	movs	r6, r0
    2d88:	4d30      	ldr	r5, [pc, #192]	; (2e4c <convertAnalogInputs+0xc8>)
    2d8a:	2400      	movs	r4, #0
	uint8_t tempInput = 0;
	uint8_t i =0;
	uint8_t tempInputCount = 0;
	for(i=0;i<NO_SENSORS;i++)
	{
		tempInput			=		inputOutputConnection(analogInputs[i]);
    2d8c:	4f30      	ldr	r7, [pc, #192]	; (2e50 <convertAnalogInputs+0xcc>)
    2d8e:	e011      	b.n	2db4 <convertAnalogInputs+0x30>
    2d90:	0029      	movs	r1, r5
				connecting[i] = true;
				tempInputsConnected[i] = tempInput;
			}
			else 
			{
				if((connecting[i] == true) && (tempInputsConnected[i] == tempInput ))
    2d92:	782a      	ldrb	r2, [r5, #0]
    2d94:	2a01      	cmp	r2, #1
    2d96:	d020      	beq.n	2dda <convertAnalogInputs+0x56>
						countConnecting[i] = 0;
					}
				}
				else
				{
					connecting[i] = false;
    2d98:	2300      	movs	r3, #0
    2d9a:	700b      	strb	r3, [r1, #0]
					countConnecting[i] = 0;
    2d9c:	4a2d      	ldr	r2, [pc, #180]	; (2e54 <convertAnalogInputs+0xd0>)
    2d9e:	54a3      	strb	r3, [r4, r2]
					tempInputsConnected[i] = NOTHINGCONNECTED;
    2da0:	4a2d      	ldr	r2, [pc, #180]	; (2e58 <convertAnalogInputs+0xd4>)
    2da2:	54a3      	strb	r3, [r4, r2]
				countDisconnection[i]	= 0;
				inputsConnected[i]		= NOTHINGCONNECTED;
			}
		}
		
		previousInputsConnected[i] = inputsConnected[i];
    2da4:	4b2d      	ldr	r3, [pc, #180]	; (2e5c <convertAnalogInputs+0xd8>)
    2da6:	5d1a      	ldrb	r2, [r3, r4]
    2da8:	4b2d      	ldr	r3, [pc, #180]	; (2e60 <convertAnalogInputs+0xdc>)
    2daa:	54e2      	strb	r2, [r4, r3]
    2dac:	3401      	adds	r4, #1
    2dae:	3501      	adds	r5, #1
	for(i=0;i<NO_SENSORS;i++)
    2db0:	2c03      	cmp	r4, #3
    2db2:	d033      	beq.n	2e1c <convertAnalogInputs+0x98>
		tempInput			=		inputOutputConnection(analogInputs[i]);
    2db4:	5d30      	ldrb	r0, [r6, r4]
    2db6:	47b8      	blx	r7
    2db8:	1e03      	subs	r3, r0, #0
		if(tempInput != NOTHINGCONNECTED)
    2dba:	d01f      	beq.n	2dfc <convertAnalogInputs+0x78>
			countDisconnection[i] = 0;
    2dbc:	2200      	movs	r2, #0
    2dbe:	4929      	ldr	r1, [pc, #164]	; (2e64 <convertAnalogInputs+0xe0>)
    2dc0:	5462      	strb	r2, [r4, r1]
			if((previousInputsConnected[i] == NOTHINGCONNECTED) && (connecting[i] == false))
    2dc2:	4a27      	ldr	r2, [pc, #156]	; (2e60 <convertAnalogInputs+0xdc>)
    2dc4:	5ca2      	ldrb	r2, [r4, r2]
    2dc6:	2a00      	cmp	r2, #0
    2dc8:	d1e2      	bne.n	2d90 <convertAnalogInputs+0xc>
    2dca:	782a      	ldrb	r2, [r5, #0]
    2dcc:	2a00      	cmp	r2, #0
    2dce:	d1df      	bne.n	2d90 <convertAnalogInputs+0xc>
				connecting[i] = true;
    2dd0:	2301      	movs	r3, #1
    2dd2:	702b      	strb	r3, [r5, #0]
				tempInputsConnected[i] = tempInput;
    2dd4:	4b20      	ldr	r3, [pc, #128]	; (2e58 <convertAnalogInputs+0xd4>)
    2dd6:	54e0      	strb	r0, [r4, r3]
    2dd8:	e7e4      	b.n	2da4 <convertAnalogInputs+0x20>
				if((connecting[i] == true) && (tempInputsConnected[i] == tempInput ))
    2dda:	4a1f      	ldr	r2, [pc, #124]	; (2e58 <convertAnalogInputs+0xd4>)
    2ddc:	5ca2      	ldrb	r2, [r4, r2]
    2dde:	429a      	cmp	r2, r3
    2de0:	d1da      	bne.n	2d98 <convertAnalogInputs+0x14>
					countConnecting[i]++;
    2de2:	4a1c      	ldr	r2, [pc, #112]	; (2e54 <convertAnalogInputs+0xd0>)
    2de4:	5ca3      	ldrb	r3, [r4, r2]
    2de6:	3301      	adds	r3, #1
    2de8:	b2db      	uxtb	r3, r3
    2dea:	54a3      	strb	r3, [r4, r2]
					if(countConnecting[i] > COUNT_CONNECTING_THRESHOLD)
    2dec:	2b05      	cmp	r3, #5
    2dee:	d9d9      	bls.n	2da4 <convertAnalogInputs+0x20>
						inputsConnected[i] = tempInput;
    2df0:	4b1a      	ldr	r3, [pc, #104]	; (2e5c <convertAnalogInputs+0xd8>)
    2df2:	5518      	strb	r0, [r3, r4]
						connecting[i] = false;
    2df4:	2300      	movs	r3, #0
    2df6:	702b      	strb	r3, [r5, #0]
						countConnecting[i] = 0;
    2df8:	54a3      	strb	r3, [r4, r2]
    2dfa:	e7d3      	b.n	2da4 <convertAnalogInputs+0x20>
			countDisconnection[i]++;
    2dfc:	4b19      	ldr	r3, [pc, #100]	; (2e64 <convertAnalogInputs+0xe0>)
    2dfe:	5ce3      	ldrb	r3, [r4, r3]
    2e00:	3301      	adds	r3, #1
    2e02:	b2db      	uxtb	r3, r3
			if(countDisconnection[i] > COUNT_CONNECTING_THRESHOLD)
    2e04:	2b05      	cmp	r3, #5
    2e06:	d802      	bhi.n	2e0e <convertAnalogInputs+0x8a>
			countDisconnection[i]++;
    2e08:	4a16      	ldr	r2, [pc, #88]	; (2e64 <convertAnalogInputs+0xe0>)
    2e0a:	54a3      	strb	r3, [r4, r2]
    2e0c:	e7ca      	b.n	2da4 <convertAnalogInputs+0x20>
				countDisconnection[i]	= 0;
    2e0e:	2300      	movs	r3, #0
    2e10:	4a14      	ldr	r2, [pc, #80]	; (2e64 <convertAnalogInputs+0xe0>)
    2e12:	54a3      	strb	r3, [r4, r2]
				inputsConnected[i]		= NOTHINGCONNECTED;
    2e14:	4a11      	ldr	r2, [pc, #68]	; (2e5c <convertAnalogInputs+0xd8>)
    2e16:	18a2      	adds	r2, r4, r2
    2e18:	7013      	strb	r3, [r2, #0]
    2e1a:	e7c3      	b.n	2da4 <convertAnalogInputs+0x20>
	{
		NoInDevCon = tempInputCount;
	}
	*/
	
	temp_test_inputs_connected_1[temp_count] = analogInputs[0] ;
    2e1c:	4b12      	ldr	r3, [pc, #72]	; (2e68 <convertAnalogInputs+0xe4>)
    2e1e:	881b      	ldrh	r3, [r3, #0]
    2e20:	7831      	ldrb	r1, [r6, #0]
    2e22:	4a12      	ldr	r2, [pc, #72]	; (2e6c <convertAnalogInputs+0xe8>)
    2e24:	54d1      	strb	r1, [r2, r3]
	temp_test_inputs_connected_2[temp_count] = analogInputs[1];
    2e26:	7871      	ldrb	r1, [r6, #1]
    2e28:	4a11      	ldr	r2, [pc, #68]	; (2e70 <convertAnalogInputs+0xec>)
    2e2a:	54d1      	strb	r1, [r2, r3]
	temp_test_inputs_connected_3[temp_count] = analogInputs[2] ;
    2e2c:	78b1      	ldrb	r1, [r6, #2]
    2e2e:	4a11      	ldr	r2, [pc, #68]	; (2e74 <convertAnalogInputs+0xf0>)
    2e30:	54d1      	strb	r1, [r2, r3]
	
	temp_count++;
    2e32:	3301      	adds	r3, #1
    2e34:	b29b      	uxth	r3, r3
	if(temp_count == 500)
    2e36:	22fa      	movs	r2, #250	; 0xfa
    2e38:	0052      	lsls	r2, r2, #1
    2e3a:	4293      	cmp	r3, r2
    2e3c:	d002      	beq.n	2e44 <convertAnalogInputs+0xc0>
	temp_count++;
    2e3e:	4a0a      	ldr	r2, [pc, #40]	; (2e68 <convertAnalogInputs+0xe4>)
    2e40:	8013      	strh	r3, [r2, #0]
	{
		temp_count = 0;
	}
}
    2e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp_count = 0;
    2e44:	2200      	movs	r2, #0
    2e46:	4b08      	ldr	r3, [pc, #32]	; (2e68 <convertAnalogInputs+0xe4>)
    2e48:	801a      	strh	r2, [r3, #0]
}
    2e4a:	e7fa      	b.n	2e42 <convertAnalogInputs+0xbe>
    2e4c:	200001e0 	.word	0x200001e0
    2e50:	00002c31 	.word	0x00002c31
    2e54:	200001e8 	.word	0x200001e8
    2e58:	20000200 	.word	0x20000200
    2e5c:	20000de8 	.word	0x20000de8
    2e60:	200001f4 	.word	0x200001f4
    2e64:	200001f0 	.word	0x200001f0
    2e68:	2000020a 	.word	0x2000020a
    2e6c:	2000020c 	.word	0x2000020c
    2e70:	20000400 	.word	0x20000400
    2e74:	200005f4 	.word	0x200005f4

00002e78 <checkOutputs>:



void checkOutputs()
{
    2e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e7a:	2400      	movs	r4, #0
	uint8_t i =0;
	static uint8_t analogOutput[4];
	for(i=0;i<4;i++)
	{
		analogOutput[i] = adc_start_read_result(outputDetectAnalogChannles[i]);
    2e7c:	4f06      	ldr	r7, [pc, #24]	; (2e98 <checkOutputs+0x20>)
    2e7e:	4e07      	ldr	r6, [pc, #28]	; (2e9c <checkOutputs+0x24>)
    2e80:	4d07      	ldr	r5, [pc, #28]	; (2ea0 <checkOutputs+0x28>)
    2e82:	5de0      	ldrb	r0, [r4, r7]
    2e84:	47b0      	blx	r6
    2e86:	5560      	strb	r0, [r4, r5]
    2e88:	3401      	adds	r4, #1
	for(i=0;i<4;i++)
    2e8a:	2c04      	cmp	r4, #4
    2e8c:	d1f9      	bne.n	2e82 <checkOutputs+0xa>
	}
	convertAnalogOutputs(analogOutput);
    2e8e:	4804      	ldr	r0, [pc, #16]	; (2ea0 <checkOutputs+0x28>)
    2e90:	4b04      	ldr	r3, [pc, #16]	; (2ea4 <checkOutputs+0x2c>)
    2e92:	4798      	blx	r3
}
    2e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	000055f8 	.word	0x000055f8
    2e9c:	00002855 	.word	0x00002855
    2ea0:	200001d8 	.word	0x200001d8
    2ea4:	00002c81 	.word	0x00002c81

00002ea8 <checkInputs>:


void checkInputs()
{
    2ea8:	b570      	push	{r4, r5, r6, lr}
	uint8_t i =0;
	static uint8_t analogInput[4];
	for(i=0;i<3;i++)
	{
		analogInput[i]			= adc_start_read_result(sensorDetectAnalogChannles[i]);
    2eaa:	200e      	movs	r0, #14
    2eac:	4d06      	ldr	r5, [pc, #24]	; (2ec8 <checkInputs+0x20>)
    2eae:	47a8      	blx	r5
    2eb0:	4c06      	ldr	r4, [pc, #24]	; (2ecc <checkInputs+0x24>)
    2eb2:	7020      	strb	r0, [r4, #0]
    2eb4:	200d      	movs	r0, #13
    2eb6:	47a8      	blx	r5
    2eb8:	7060      	strb	r0, [r4, #1]
    2eba:	2012      	movs	r0, #18
    2ebc:	47a8      	blx	r5
    2ebe:	70a0      	strb	r0, [r4, #2]
	}
	convertAnalogInputs(analogInput);
    2ec0:	0020      	movs	r0, r4
    2ec2:	4b03      	ldr	r3, [pc, #12]	; (2ed0 <checkInputs+0x28>)
    2ec4:	4798      	blx	r3
}
    2ec6:	bd70      	pop	{r4, r5, r6, pc}
    2ec8:	00002855 	.word	0x00002855
    2ecc:	200001d4 	.word	0x200001d4
    2ed0:	00002d85 	.word	0x00002d85

00002ed4 <loadIdentifier>:
	uint32_t temp				= 0;
	uint8_t  i					= 0;
	
	for(i=0;i<NO_OUTPUTS;i++)
	{
		temp		         =  outputsConnected[i];
    2ed4:	4a12      	ldr	r2, [pc, #72]	; (2f20 <loadIdentifier+0x4c>)
    2ed6:	7813      	ldrb	r3, [r2, #0]
		current_identifier  |=  temp << (28 - 4*i);
    2ed8:	071b      	lsls	r3, r3, #28
		temp		         =  outputsConnected[i];
    2eda:	7851      	ldrb	r1, [r2, #1]
		current_identifier  |=  temp << (28 - 4*i);
    2edc:	0609      	lsls	r1, r1, #24
    2ede:	430b      	orrs	r3, r1
	}
	
	for(i=0;i<NO_SENSORS;i++)
	{
		temp		  =  inputsConnected[i];
    2ee0:	4910      	ldr	r1, [pc, #64]	; (2f24 <loadIdentifier+0x50>)
    2ee2:	7808      	ldrb	r0, [r1, #0]
		current_identifier  |=  temp << (11-(5*i));
    2ee4:	02c0      	lsls	r0, r0, #11
    2ee6:	4303      	orrs	r3, r0
		temp		  =  inputsConnected[i];
    2ee8:	7848      	ldrb	r0, [r1, #1]
		current_identifier  |=  temp << (11-(5*i));
    2eea:	0180      	lsls	r0, r0, #6
    2eec:	4303      	orrs	r3, r0
		temp		         =  outputsConnected[i];
    2eee:	7890      	ldrb	r0, [r2, #2]
		current_identifier  |=  temp << (28 - 4*i);
    2ef0:	0500      	lsls	r0, r0, #20
    2ef2:	4303      	orrs	r3, r0
		temp		  =  inputsConnected[i];
    2ef4:	7889      	ldrb	r1, [r1, #2]
		current_identifier  |=  temp << (11-(5*i));
    2ef6:	0049      	lsls	r1, r1, #1
    2ef8:	430b      	orrs	r3, r1
		temp		         =  outputsConnected[i];
    2efa:	78d2      	ldrb	r2, [r2, #3]
		current_identifier  |=  temp << (28 - 4*i);
    2efc:	0412      	lsls	r2, r2, #16
		current_identifier  |=  temp << (11-(5*i));
    2efe:	4313      	orrs	r3, r2
	}

	if(current_identifier != previous_identifier)
    2f00:	4a09      	ldr	r2, [pc, #36]	; (2f28 <loadIdentifier+0x54>)
    2f02:	6812      	ldr	r2, [r2, #0]
    2f04:	4293      	cmp	r3, r2
    2f06:	d009      	beq.n	2f1c <loadIdentifier+0x48>
	{
		for(i=0;i<4;i++)
		{
			sensorOutputs[i] = (current_identifier >> 8* (3-i)) & 0x000000FF ;
    2f08:	4a08      	ldr	r2, [pc, #32]	; (2f2c <loadIdentifier+0x58>)
    2f0a:	0e19      	lsrs	r1, r3, #24
    2f0c:	7011      	strb	r1, [r2, #0]
    2f0e:	0c19      	lsrs	r1, r3, #16
    2f10:	7051      	strb	r1, [r2, #1]
    2f12:	0a19      	lsrs	r1, r3, #8
    2f14:	7091      	strb	r1, [r2, #2]
    2f16:	70d3      	strb	r3, [r2, #3]
		}
		previous_identifier = current_identifier;
    2f18:	4a03      	ldr	r2, [pc, #12]	; (2f28 <loadIdentifier+0x54>)
    2f1a:	6013      	str	r3, [r2, #0]
	}
}
    2f1c:	4770      	bx	lr
    2f1e:	46c0      	nop			; (mov r8, r8)
    2f20:	20000f74 	.word	0x20000f74
    2f24:	20000de8 	.word	0x20000de8
    2f28:	200001fc 	.word	0x200001fc
    2f2c:	20000f78 	.word	0x20000f78

00002f30 <checkOutputsInputs>:

void checkOutputsInputs()
{
    2f30:	b510      	push	{r4, lr}
	checkOutputs();
    2f32:	4b03      	ldr	r3, [pc, #12]	; (2f40 <checkOutputsInputs+0x10>)
    2f34:	4798      	blx	r3
	checkInputs();
    2f36:	4b03      	ldr	r3, [pc, #12]	; (2f44 <checkOutputsInputs+0x14>)
    2f38:	4798      	blx	r3
	loadIdentifier(); //Set the identifier which will be used in the notifications by the Bluetooth
    2f3a:	4b03      	ldr	r3, [pc, #12]	; (2f48 <checkOutputsInputs+0x18>)
    2f3c:	4798      	blx	r3
}
    2f3e:	bd10      	pop	{r4, pc}
    2f40:	00002e79 	.word	0x00002e79
    2f44:	00002ea9 	.word	0x00002ea9
    2f48:	00002ed5 	.word	0x00002ed5

00002f4c <configureInputOutputDetection>:


void configureInputOutputDetection()
{
    2f4c:	b510      	push	{r4, lr}
	configureADC();
    2f4e:	4b01      	ldr	r3, [pc, #4]	; (2f54 <configureInputOutputDetection+0x8>)
    2f50:	4798      	blx	r3
    2f52:	bd10      	pop	{r4, pc}
    2f54:	000027cd 	.word	0x000027cd

00002f58 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2f58:	4770      	bx	lr
	...

00002f5c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2f5c:	4b0c      	ldr	r3, [pc, #48]	; (2f90 <cpu_irq_enter_critical+0x34>)
    2f5e:	681b      	ldr	r3, [r3, #0]
    2f60:	2b00      	cmp	r3, #0
    2f62:	d106      	bne.n	2f72 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f64:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2f68:	2b00      	cmp	r3, #0
    2f6a:	d007      	beq.n	2f7c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2f6c:	2200      	movs	r2, #0
    2f6e:	4b09      	ldr	r3, [pc, #36]	; (2f94 <cpu_irq_enter_critical+0x38>)
    2f70:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2f72:	4a07      	ldr	r2, [pc, #28]	; (2f90 <cpu_irq_enter_critical+0x34>)
    2f74:	6813      	ldr	r3, [r2, #0]
    2f76:	3301      	adds	r3, #1
    2f78:	6013      	str	r3, [r2, #0]
}
    2f7a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2f7c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2f7e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2f82:	2200      	movs	r2, #0
    2f84:	4b04      	ldr	r3, [pc, #16]	; (2f98 <cpu_irq_enter_critical+0x3c>)
    2f86:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2f88:	3201      	adds	r2, #1
    2f8a:	4b02      	ldr	r3, [pc, #8]	; (2f94 <cpu_irq_enter_critical+0x38>)
    2f8c:	701a      	strb	r2, [r3, #0]
    2f8e:	e7f0      	b.n	2f72 <cpu_irq_enter_critical+0x16>
    2f90:	20000dc4 	.word	0x20000dc4
    2f94:	20000dc8 	.word	0x20000dc8
    2f98:	20000054 	.word	0x20000054

00002f9c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2f9c:	4b08      	ldr	r3, [pc, #32]	; (2fc0 <cpu_irq_leave_critical+0x24>)
    2f9e:	681a      	ldr	r2, [r3, #0]
    2fa0:	3a01      	subs	r2, #1
    2fa2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2fa4:	681b      	ldr	r3, [r3, #0]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d109      	bne.n	2fbe <cpu_irq_leave_critical+0x22>
    2faa:	4b06      	ldr	r3, [pc, #24]	; (2fc4 <cpu_irq_leave_critical+0x28>)
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d005      	beq.n	2fbe <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2fb2:	2201      	movs	r2, #1
    2fb4:	4b04      	ldr	r3, [pc, #16]	; (2fc8 <cpu_irq_leave_critical+0x2c>)
    2fb6:	701a      	strb	r2, [r3, #0]
    2fb8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2fbc:	b662      	cpsie	i
	}
}
    2fbe:	4770      	bx	lr
    2fc0:	20000dc4 	.word	0x20000dc4
    2fc4:	20000dc8 	.word	0x20000dc8
    2fc8:	20000054 	.word	0x20000054

00002fcc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2fcc:	b510      	push	{r4, lr}
	switch (clock_source) {
    2fce:	2808      	cmp	r0, #8
    2fd0:	d803      	bhi.n	2fda <system_clock_source_get_hz+0xe>
    2fd2:	0080      	lsls	r0, r0, #2
    2fd4:	4b1b      	ldr	r3, [pc, #108]	; (3044 <system_clock_source_get_hz+0x78>)
    2fd6:	581b      	ldr	r3, [r3, r0]
    2fd8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2fda:	2000      	movs	r0, #0
    2fdc:	e030      	b.n	3040 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2fde:	4b1a      	ldr	r3, [pc, #104]	; (3048 <system_clock_source_get_hz+0x7c>)
    2fe0:	6918      	ldr	r0, [r3, #16]
    2fe2:	e02d      	b.n	3040 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2fe4:	4b19      	ldr	r3, [pc, #100]	; (304c <system_clock_source_get_hz+0x80>)
    2fe6:	6a1b      	ldr	r3, [r3, #32]
    2fe8:	059b      	lsls	r3, r3, #22
    2fea:	0f9b      	lsrs	r3, r3, #30
    2fec:	4818      	ldr	r0, [pc, #96]	; (3050 <system_clock_source_get_hz+0x84>)
    2fee:	40d8      	lsrs	r0, r3
    2ff0:	e026      	b.n	3040 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2ff2:	4b15      	ldr	r3, [pc, #84]	; (3048 <system_clock_source_get_hz+0x7c>)
    2ff4:	6958      	ldr	r0, [r3, #20]
    2ff6:	e023      	b.n	3040 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ff8:	4b13      	ldr	r3, [pc, #76]	; (3048 <system_clock_source_get_hz+0x7c>)
    2ffa:	681b      	ldr	r3, [r3, #0]
			return 0;
    2ffc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ffe:	079b      	lsls	r3, r3, #30
    3000:	d51e      	bpl.n	3040 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3002:	4912      	ldr	r1, [pc, #72]	; (304c <system_clock_source_get_hz+0x80>)
    3004:	2210      	movs	r2, #16
    3006:	68cb      	ldr	r3, [r1, #12]
    3008:	421a      	tst	r2, r3
    300a:	d0fc      	beq.n	3006 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    300c:	4b0e      	ldr	r3, [pc, #56]	; (3048 <system_clock_source_get_hz+0x7c>)
    300e:	681b      	ldr	r3, [r3, #0]
    3010:	075b      	lsls	r3, r3, #29
    3012:	d401      	bmi.n	3018 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    3014:	480f      	ldr	r0, [pc, #60]	; (3054 <system_clock_source_get_hz+0x88>)
    3016:	e013      	b.n	3040 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3018:	2000      	movs	r0, #0
    301a:	4b0f      	ldr	r3, [pc, #60]	; (3058 <system_clock_source_get_hz+0x8c>)
    301c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    301e:	4b0a      	ldr	r3, [pc, #40]	; (3048 <system_clock_source_get_hz+0x7c>)
    3020:	689b      	ldr	r3, [r3, #8]
    3022:	041b      	lsls	r3, r3, #16
    3024:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3026:	4358      	muls	r0, r3
    3028:	e00a      	b.n	3040 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    302a:	2350      	movs	r3, #80	; 0x50
    302c:	4a07      	ldr	r2, [pc, #28]	; (304c <system_clock_source_get_hz+0x80>)
    302e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3030:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3032:	075b      	lsls	r3, r3, #29
    3034:	d504      	bpl.n	3040 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    3036:	4b04      	ldr	r3, [pc, #16]	; (3048 <system_clock_source_get_hz+0x7c>)
    3038:	68d8      	ldr	r0, [r3, #12]
    303a:	e001      	b.n	3040 <system_clock_source_get_hz+0x74>
		return 32768UL;
    303c:	2080      	movs	r0, #128	; 0x80
    303e:	0200      	lsls	r0, r0, #8
	}
}
    3040:	bd10      	pop	{r4, pc}
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	000055fc 	.word	0x000055fc
    3048:	20000dcc 	.word	0x20000dcc
    304c:	40000800 	.word	0x40000800
    3050:	007a1200 	.word	0x007a1200
    3054:	02dc6c00 	.word	0x02dc6c00
    3058:	0000360d 	.word	0x0000360d

0000305c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    305c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    305e:	490c      	ldr	r1, [pc, #48]	; (3090 <system_clock_source_osc8m_set_config+0x34>)
    3060:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3062:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3064:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3066:	7840      	ldrb	r0, [r0, #1]
    3068:	2201      	movs	r2, #1
    306a:	4010      	ands	r0, r2
    306c:	0180      	lsls	r0, r0, #6
    306e:	2640      	movs	r6, #64	; 0x40
    3070:	43b3      	bics	r3, r6
    3072:	4303      	orrs	r3, r0
    3074:	402a      	ands	r2, r5
    3076:	01d2      	lsls	r2, r2, #7
    3078:	2080      	movs	r0, #128	; 0x80
    307a:	4383      	bics	r3, r0
    307c:	4313      	orrs	r3, r2
    307e:	2203      	movs	r2, #3
    3080:	4022      	ands	r2, r4
    3082:	0212      	lsls	r2, r2, #8
    3084:	4803      	ldr	r0, [pc, #12]	; (3094 <system_clock_source_osc8m_set_config+0x38>)
    3086:	4003      	ands	r3, r0
    3088:	4313      	orrs	r3, r2
    308a:	620b      	str	r3, [r1, #32]
}
    308c:	bd70      	pop	{r4, r5, r6, pc}
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	40000800 	.word	0x40000800
    3094:	fffffcff 	.word	0xfffffcff

00003098 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    3098:	b5f0      	push	{r4, r5, r6, r7, lr}
    309a:	46ce      	mov	lr, r9
    309c:	4647      	mov	r7, r8
    309e:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    30a0:	4b19      	ldr	r3, [pc, #100]	; (3108 <system_clock_source_osc32k_set_config+0x70>)
    30a2:	4699      	mov	r9, r3
    30a4:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    30a6:	7841      	ldrb	r1, [r0, #1]
    30a8:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    30aa:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    30ac:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    30ae:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    30b0:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    30b2:	7880      	ldrb	r0, [r0, #2]
    30b4:	2101      	movs	r1, #1
    30b6:	4008      	ands	r0, r1
    30b8:	0080      	lsls	r0, r0, #2
    30ba:	2204      	movs	r2, #4
    30bc:	4393      	bics	r3, r2
    30be:	4303      	orrs	r3, r0
    30c0:	4660      	mov	r0, ip
    30c2:	4008      	ands	r0, r1
    30c4:	00c0      	lsls	r0, r0, #3
    30c6:	3204      	adds	r2, #4
    30c8:	4393      	bics	r3, r2
    30ca:	4303      	orrs	r3, r0
    30cc:	0038      	movs	r0, r7
    30ce:	4008      	ands	r0, r1
    30d0:	0180      	lsls	r0, r0, #6
    30d2:	2740      	movs	r7, #64	; 0x40
    30d4:	43bb      	bics	r3, r7
    30d6:	4303      	orrs	r3, r0
    30d8:	0030      	movs	r0, r6
    30da:	4008      	ands	r0, r1
    30dc:	01c0      	lsls	r0, r0, #7
    30de:	2680      	movs	r6, #128	; 0x80
    30e0:	43b3      	bics	r3, r6
    30e2:	4303      	orrs	r3, r0
    30e4:	2007      	movs	r0, #7
    30e6:	4005      	ands	r5, r0
    30e8:	022d      	lsls	r5, r5, #8
    30ea:	4808      	ldr	r0, [pc, #32]	; (310c <system_clock_source_osc32k_set_config+0x74>)
    30ec:	4003      	ands	r3, r0
    30ee:	432b      	orrs	r3, r5
    30f0:	4021      	ands	r1, r4
    30f2:	0309      	lsls	r1, r1, #12
    30f4:	4806      	ldr	r0, [pc, #24]	; (3110 <system_clock_source_osc32k_set_config+0x78>)
    30f6:	4003      	ands	r3, r0
    30f8:	430b      	orrs	r3, r1
    30fa:	464a      	mov	r2, r9
    30fc:	6193      	str	r3, [r2, #24]
}
    30fe:	bc0c      	pop	{r2, r3}
    3100:	4690      	mov	r8, r2
    3102:	4699      	mov	r9, r3
    3104:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	40000800 	.word	0x40000800
    310c:	fffff8ff 	.word	0xfffff8ff
    3110:	ffffefff 	.word	0xffffefff

00003114 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3114:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3116:	7a03      	ldrb	r3, [r0, #8]
    3118:	069b      	lsls	r3, r3, #26
    311a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    311c:	8942      	ldrh	r2, [r0, #10]
    311e:	0592      	lsls	r2, r2, #22
    3120:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3122:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3124:	4918      	ldr	r1, [pc, #96]	; (3188 <system_clock_source_dfll_set_config+0x74>)
    3126:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3128:	7983      	ldrb	r3, [r0, #6]
    312a:	79c2      	ldrb	r2, [r0, #7]
    312c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    312e:	8842      	ldrh	r2, [r0, #2]
    3130:	8884      	ldrh	r4, [r0, #4]
    3132:	4322      	orrs	r2, r4
    3134:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3136:	7842      	ldrb	r2, [r0, #1]
    3138:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    313a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    313c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    313e:	7803      	ldrb	r3, [r0, #0]
    3140:	2b04      	cmp	r3, #4
    3142:	d011      	beq.n	3168 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3144:	2b20      	cmp	r3, #32
    3146:	d10e      	bne.n	3166 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3148:	7b03      	ldrb	r3, [r0, #12]
    314a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    314c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    314e:	4313      	orrs	r3, r2
    3150:	89c2      	ldrh	r2, [r0, #14]
    3152:	0412      	lsls	r2, r2, #16
    3154:	490d      	ldr	r1, [pc, #52]	; (318c <system_clock_source_dfll_set_config+0x78>)
    3156:	400a      	ands	r2, r1
    3158:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    315a:	4a0b      	ldr	r2, [pc, #44]	; (3188 <system_clock_source_dfll_set_config+0x74>)
    315c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    315e:	6811      	ldr	r1, [r2, #0]
    3160:	4b0b      	ldr	r3, [pc, #44]	; (3190 <system_clock_source_dfll_set_config+0x7c>)
    3162:	430b      	orrs	r3, r1
    3164:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    3166:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3168:	7b03      	ldrb	r3, [r0, #12]
    316a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    316c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    316e:	4313      	orrs	r3, r2
    3170:	89c2      	ldrh	r2, [r0, #14]
    3172:	0412      	lsls	r2, r2, #16
    3174:	4905      	ldr	r1, [pc, #20]	; (318c <system_clock_source_dfll_set_config+0x78>)
    3176:	400a      	ands	r2, r1
    3178:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    317a:	4a03      	ldr	r2, [pc, #12]	; (3188 <system_clock_source_dfll_set_config+0x74>)
    317c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    317e:	6813      	ldr	r3, [r2, #0]
    3180:	2104      	movs	r1, #4
    3182:	430b      	orrs	r3, r1
    3184:	6013      	str	r3, [r2, #0]
    3186:	e7ee      	b.n	3166 <system_clock_source_dfll_set_config+0x52>
    3188:	20000dcc 	.word	0x20000dcc
    318c:	03ff0000 	.word	0x03ff0000
    3190:	00000424 	.word	0x00000424

00003194 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3194:	2808      	cmp	r0, #8
    3196:	d803      	bhi.n	31a0 <system_clock_source_enable+0xc>
    3198:	0080      	lsls	r0, r0, #2
    319a:	4b25      	ldr	r3, [pc, #148]	; (3230 <system_clock_source_enable+0x9c>)
    319c:	581b      	ldr	r3, [r3, r0]
    319e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    31a0:	2017      	movs	r0, #23
    31a2:	e044      	b.n	322e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    31a4:	4a23      	ldr	r2, [pc, #140]	; (3234 <system_clock_source_enable+0xa0>)
    31a6:	6a13      	ldr	r3, [r2, #32]
    31a8:	2102      	movs	r1, #2
    31aa:	430b      	orrs	r3, r1
    31ac:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    31ae:	2000      	movs	r0, #0
    31b0:	e03d      	b.n	322e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    31b2:	4a20      	ldr	r2, [pc, #128]	; (3234 <system_clock_source_enable+0xa0>)
    31b4:	6993      	ldr	r3, [r2, #24]
    31b6:	2102      	movs	r1, #2
    31b8:	430b      	orrs	r3, r1
    31ba:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    31bc:	2000      	movs	r0, #0
		break;
    31be:	e036      	b.n	322e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    31c0:	4a1c      	ldr	r2, [pc, #112]	; (3234 <system_clock_source_enable+0xa0>)
    31c2:	8a13      	ldrh	r3, [r2, #16]
    31c4:	2102      	movs	r1, #2
    31c6:	430b      	orrs	r3, r1
    31c8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    31ca:	2000      	movs	r0, #0
		break;
    31cc:	e02f      	b.n	322e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    31ce:	4a19      	ldr	r2, [pc, #100]	; (3234 <system_clock_source_enable+0xa0>)
    31d0:	8a93      	ldrh	r3, [r2, #20]
    31d2:	2102      	movs	r1, #2
    31d4:	430b      	orrs	r3, r1
    31d6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    31d8:	2000      	movs	r0, #0
		break;
    31da:	e028      	b.n	322e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    31dc:	4916      	ldr	r1, [pc, #88]	; (3238 <system_clock_source_enable+0xa4>)
    31de:	680b      	ldr	r3, [r1, #0]
    31e0:	2202      	movs	r2, #2
    31e2:	4313      	orrs	r3, r2
    31e4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    31e6:	4b13      	ldr	r3, [pc, #76]	; (3234 <system_clock_source_enable+0xa0>)
    31e8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    31ea:	0019      	movs	r1, r3
    31ec:	320e      	adds	r2, #14
    31ee:	68cb      	ldr	r3, [r1, #12]
    31f0:	421a      	tst	r2, r3
    31f2:	d0fc      	beq.n	31ee <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    31f4:	4a10      	ldr	r2, [pc, #64]	; (3238 <system_clock_source_enable+0xa4>)
    31f6:	6891      	ldr	r1, [r2, #8]
    31f8:	4b0e      	ldr	r3, [pc, #56]	; (3234 <system_clock_source_enable+0xa0>)
    31fa:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    31fc:	6852      	ldr	r2, [r2, #4]
    31fe:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3200:	2200      	movs	r2, #0
    3202:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3204:	0019      	movs	r1, r3
    3206:	3210      	adds	r2, #16
    3208:	68cb      	ldr	r3, [r1, #12]
    320a:	421a      	tst	r2, r3
    320c:	d0fc      	beq.n	3208 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    320e:	4b0a      	ldr	r3, [pc, #40]	; (3238 <system_clock_source_enable+0xa4>)
    3210:	681b      	ldr	r3, [r3, #0]
    3212:	b29b      	uxth	r3, r3
    3214:	4a07      	ldr	r2, [pc, #28]	; (3234 <system_clock_source_enable+0xa0>)
    3216:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3218:	2000      	movs	r0, #0
    321a:	e008      	b.n	322e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    321c:	4905      	ldr	r1, [pc, #20]	; (3234 <system_clock_source_enable+0xa0>)
    321e:	2244      	movs	r2, #68	; 0x44
    3220:	5c8b      	ldrb	r3, [r1, r2]
    3222:	2002      	movs	r0, #2
    3224:	4303      	orrs	r3, r0
    3226:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3228:	2000      	movs	r0, #0
		break;
    322a:	e000      	b.n	322e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    322c:	2000      	movs	r0, #0
}
    322e:	4770      	bx	lr
    3230:	00005620 	.word	0x00005620
    3234:	40000800 	.word	0x40000800
    3238:	20000dcc 	.word	0x20000dcc

0000323c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    323c:	b5f0      	push	{r4, r5, r6, r7, lr}
    323e:	46ce      	mov	lr, r9
    3240:	4647      	mov	r7, r8
    3242:	b580      	push	{r7, lr}
    3244:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3246:	22c2      	movs	r2, #194	; 0xc2
    3248:	00d2      	lsls	r2, r2, #3
    324a:	4b4d      	ldr	r3, [pc, #308]	; (3380 <system_clock_init+0x144>)
    324c:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    324e:	494d      	ldr	r1, [pc, #308]	; (3384 <system_clock_init+0x148>)
    3250:	684b      	ldr	r3, [r1, #4]
    3252:	221e      	movs	r2, #30
    3254:	4393      	bics	r3, r2
    3256:	3a1c      	subs	r2, #28
    3258:	4313      	orrs	r3, r2
    325a:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    325c:	ab01      	add	r3, sp, #4
    325e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3260:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3262:	4d49      	ldr	r5, [pc, #292]	; (3388 <system_clock_init+0x14c>)
    3264:	b2e0      	uxtb	r0, r4
    3266:	a901      	add	r1, sp, #4
    3268:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    326a:	3401      	adds	r4, #1
    326c:	2c25      	cmp	r4, #37	; 0x25
    326e:	d1f9      	bne.n	3264 <system_clock_init+0x28>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    3270:	4c46      	ldr	r4, [pc, #280]	; (338c <system_clock_init+0x150>)
	SYSCTRL->OSC32K.bit.CALIB =
    3272:	6823      	ldr	r3, [r4, #0]
    3274:	04db      	lsls	r3, r3, #19
    3276:	4942      	ldr	r1, [pc, #264]	; (3380 <system_clock_init+0x144>)
    3278:	698a      	ldr	r2, [r1, #24]
    327a:	0e5b      	lsrs	r3, r3, #25
    327c:	041b      	lsls	r3, r3, #16
    327e:	4844      	ldr	r0, [pc, #272]	; (3390 <system_clock_init+0x154>)
    3280:	4002      	ands	r2, r0
    3282:	4313      	orrs	r3, r2
    3284:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    3286:	a80a      	add	r0, sp, #40	; 0x28
    3288:	2301      	movs	r3, #1
    328a:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    328c:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    328e:	2500      	movs	r5, #0
    3290:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    3292:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    3294:	3306      	adds	r3, #6
    3296:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    3298:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    329a:	4b3e      	ldr	r3, [pc, #248]	; (3394 <system_clock_init+0x158>)
    329c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    329e:	2004      	movs	r0, #4
    32a0:	4b3d      	ldr	r3, [pc, #244]	; (3398 <system_clock_init+0x15c>)
    32a2:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    32a4:	ab05      	add	r3, sp, #20
    32a6:	2200      	movs	r2, #0
    32a8:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    32aa:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    32ac:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    32ae:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    32b0:	213f      	movs	r1, #63	; 0x3f
    32b2:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    32b4:	393b      	subs	r1, #59	; 0x3b
    32b6:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    32b8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    32ba:	6823      	ldr	r3, [r4, #0]
    32bc:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    32be:	2b3f      	cmp	r3, #63	; 0x3f
    32c0:	d05b      	beq.n	337a <system_clock_init+0x13e>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    32c2:	a805      	add	r0, sp, #20
    32c4:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    32c6:	23b7      	movs	r3, #183	; 0xb7
    32c8:	00db      	lsls	r3, r3, #3
    32ca:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    32cc:	2307      	movs	r3, #7
    32ce:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    32d0:	3338      	adds	r3, #56	; 0x38
    32d2:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    32d4:	4b31      	ldr	r3, [pc, #196]	; (339c <system_clock_init+0x160>)
    32d6:	4798      	blx	r3
	config->run_in_standby  = false;
    32d8:	a804      	add	r0, sp, #16
    32da:	2500      	movs	r5, #0
    32dc:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    32de:	2601      	movs	r6, #1
    32e0:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    32e2:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    32e4:	4b2e      	ldr	r3, [pc, #184]	; (33a0 <system_clock_init+0x164>)
    32e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    32e8:	2006      	movs	r0, #6
    32ea:	4f2b      	ldr	r7, [pc, #172]	; (3398 <system_clock_init+0x15c>)
    32ec:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    32ee:	4b2d      	ldr	r3, [pc, #180]	; (33a4 <system_clock_init+0x168>)
    32f0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    32f2:	ac01      	add	r4, sp, #4
    32f4:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    32f6:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    32f8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    32fa:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    32fc:	2304      	movs	r3, #4
    32fe:	7023      	strb	r3, [r4, #0]
    3300:	0021      	movs	r1, r4
    3302:	2001      	movs	r0, #1
    3304:	4b28      	ldr	r3, [pc, #160]	; (33a8 <system_clock_init+0x16c>)
    3306:	4699      	mov	r9, r3
    3308:	4798      	blx	r3
    330a:	2001      	movs	r0, #1
    330c:	4b27      	ldr	r3, [pc, #156]	; (33ac <system_clock_init+0x170>)
    330e:	4698      	mov	r8, r3
    3310:	4798      	blx	r3
	config->division_factor    = 1;
    3312:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3314:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3316:	2306      	movs	r3, #6
    3318:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    331a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    331c:	7265      	strb	r5, [r4, #9]
    331e:	0021      	movs	r1, r4
    3320:	2003      	movs	r0, #3
    3322:	47c8      	blx	r9
    3324:	2003      	movs	r0, #3
    3326:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3328:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    332a:	0021      	movs	r1, r4
    332c:	2000      	movs	r0, #0
    332e:	4b16      	ldr	r3, [pc, #88]	; (3388 <system_clock_init+0x14c>)
    3330:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    3332:	2000      	movs	r0, #0
    3334:	4b1e      	ldr	r3, [pc, #120]	; (33b0 <system_clock_init+0x174>)
    3336:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    3338:	2007      	movs	r0, #7
    333a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    333c:	4910      	ldr	r1, [pc, #64]	; (3380 <system_clock_init+0x144>)
    333e:	22d0      	movs	r2, #208	; 0xd0
    3340:	68cb      	ldr	r3, [r1, #12]
    3342:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3344:	2bd0      	cmp	r3, #208	; 0xd0
    3346:	d1fb      	bne.n	3340 <system_clock_init+0x104>
	PM->CPUSEL.reg = (uint32_t)divider;
    3348:	4a1a      	ldr	r2, [pc, #104]	; (33b4 <system_clock_init+0x178>)
    334a:	2300      	movs	r3, #0
    334c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    334e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3350:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3352:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    3354:	a901      	add	r1, sp, #4
    3356:	2201      	movs	r2, #1
    3358:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    335a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    335c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    335e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3360:	3307      	adds	r3, #7
    3362:	700b      	strb	r3, [r1, #0]
    3364:	2000      	movs	r0, #0
    3366:	4b10      	ldr	r3, [pc, #64]	; (33a8 <system_clock_init+0x16c>)
    3368:	4798      	blx	r3
    336a:	2000      	movs	r0, #0
    336c:	4b0f      	ldr	r3, [pc, #60]	; (33ac <system_clock_init+0x170>)
    336e:	4798      	blx	r3
#endif
}
    3370:	b00d      	add	sp, #52	; 0x34
    3372:	bc0c      	pop	{r2, r3}
    3374:	4690      	mov	r8, r2
    3376:	4699      	mov	r9, r3
    3378:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    337a:	3b20      	subs	r3, #32
    337c:	e7a1      	b.n	32c2 <system_clock_init+0x86>
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	40000800 	.word	0x40000800
    3384:	41004000 	.word	0x41004000
    3388:	000035f1 	.word	0x000035f1
    338c:	00806024 	.word	0x00806024
    3390:	ff80ffff 	.word	0xff80ffff
    3394:	00003099 	.word	0x00003099
    3398:	00003195 	.word	0x00003195
    339c:	00003115 	.word	0x00003115
    33a0:	0000305d 	.word	0x0000305d
    33a4:	000033b9 	.word	0x000033b9
    33a8:	000033dd 	.word	0x000033dd
    33ac:	00003495 	.word	0x00003495
    33b0:	00003565 	.word	0x00003565
    33b4:	40000400 	.word	0x40000400

000033b8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    33b8:	4a06      	ldr	r2, [pc, #24]	; (33d4 <system_gclk_init+0x1c>)
    33ba:	6993      	ldr	r3, [r2, #24]
    33bc:	2108      	movs	r1, #8
    33be:	430b      	orrs	r3, r1
    33c0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    33c2:	2201      	movs	r2, #1
    33c4:	4b04      	ldr	r3, [pc, #16]	; (33d8 <system_gclk_init+0x20>)
    33c6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    33c8:	0019      	movs	r1, r3
    33ca:	780b      	ldrb	r3, [r1, #0]
    33cc:	4213      	tst	r3, r2
    33ce:	d1fc      	bne.n	33ca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    33d0:	4770      	bx	lr
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	40000400 	.word	0x40000400
    33d8:	40000c00 	.word	0x40000c00

000033dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    33dc:	b570      	push	{r4, r5, r6, lr}
    33de:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    33e0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    33e2:	780d      	ldrb	r5, [r1, #0]
    33e4:	022d      	lsls	r5, r5, #8
    33e6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    33e8:	784b      	ldrb	r3, [r1, #1]
    33ea:	2b00      	cmp	r3, #0
    33ec:	d002      	beq.n	33f4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    33ee:	2380      	movs	r3, #128	; 0x80
    33f0:	02db      	lsls	r3, r3, #11
    33f2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    33f4:	7a4b      	ldrb	r3, [r1, #9]
    33f6:	2b00      	cmp	r3, #0
    33f8:	d002      	beq.n	3400 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    33fa:	2380      	movs	r3, #128	; 0x80
    33fc:	031b      	lsls	r3, r3, #12
    33fe:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3400:	6848      	ldr	r0, [r1, #4]
    3402:	2801      	cmp	r0, #1
    3404:	d910      	bls.n	3428 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3406:	1e43      	subs	r3, r0, #1
    3408:	4218      	tst	r0, r3
    340a:	d134      	bne.n	3476 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    340c:	2802      	cmp	r0, #2
    340e:	d930      	bls.n	3472 <system_gclk_gen_set_config+0x96>
    3410:	2302      	movs	r3, #2
    3412:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3414:	3201      	adds	r2, #1
						mask <<= 1) {
    3416:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3418:	4298      	cmp	r0, r3
    341a:	d8fb      	bhi.n	3414 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    341c:	0212      	lsls	r2, r2, #8
    341e:	4332      	orrs	r2, r6
    3420:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3422:	2380      	movs	r3, #128	; 0x80
    3424:	035b      	lsls	r3, r3, #13
    3426:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3428:	7a0b      	ldrb	r3, [r1, #8]
    342a:	2b00      	cmp	r3, #0
    342c:	d002      	beq.n	3434 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    342e:	2380      	movs	r3, #128	; 0x80
    3430:	039b      	lsls	r3, r3, #14
    3432:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3434:	4a13      	ldr	r2, [pc, #76]	; (3484 <system_gclk_gen_set_config+0xa8>)
    3436:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3438:	b25b      	sxtb	r3, r3
    343a:	2b00      	cmp	r3, #0
    343c:	dbfb      	blt.n	3436 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    343e:	4b12      	ldr	r3, [pc, #72]	; (3488 <system_gclk_gen_set_config+0xac>)
    3440:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3442:	4b12      	ldr	r3, [pc, #72]	; (348c <system_gclk_gen_set_config+0xb0>)
    3444:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3446:	4a0f      	ldr	r2, [pc, #60]	; (3484 <system_gclk_gen_set_config+0xa8>)
    3448:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    344a:	b25b      	sxtb	r3, r3
    344c:	2b00      	cmp	r3, #0
    344e:	dbfb      	blt.n	3448 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3450:	4b0c      	ldr	r3, [pc, #48]	; (3484 <system_gclk_gen_set_config+0xa8>)
    3452:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3454:	001a      	movs	r2, r3
    3456:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3458:	b25b      	sxtb	r3, r3
    345a:	2b00      	cmp	r3, #0
    345c:	dbfb      	blt.n	3456 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    345e:	4a09      	ldr	r2, [pc, #36]	; (3484 <system_gclk_gen_set_config+0xa8>)
    3460:	6853      	ldr	r3, [r2, #4]
    3462:	2180      	movs	r1, #128	; 0x80
    3464:	0249      	lsls	r1, r1, #9
    3466:	400b      	ands	r3, r1
    3468:	431d      	orrs	r5, r3
    346a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    346c:	4b08      	ldr	r3, [pc, #32]	; (3490 <system_gclk_gen_set_config+0xb4>)
    346e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3470:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3472:	2200      	movs	r2, #0
    3474:	e7d2      	b.n	341c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3476:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3478:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    347a:	2380      	movs	r3, #128	; 0x80
    347c:	029b      	lsls	r3, r3, #10
    347e:	431d      	orrs	r5, r3
    3480:	e7d2      	b.n	3428 <system_gclk_gen_set_config+0x4c>
    3482:	46c0      	nop			; (mov r8, r8)
    3484:	40000c00 	.word	0x40000c00
    3488:	00002f5d 	.word	0x00002f5d
    348c:	40000c08 	.word	0x40000c08
    3490:	00002f9d 	.word	0x00002f9d

00003494 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3494:	b510      	push	{r4, lr}
    3496:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3498:	4a0b      	ldr	r2, [pc, #44]	; (34c8 <system_gclk_gen_enable+0x34>)
    349a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    349c:	b25b      	sxtb	r3, r3
    349e:	2b00      	cmp	r3, #0
    34a0:	dbfb      	blt.n	349a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    34a2:	4b0a      	ldr	r3, [pc, #40]	; (34cc <system_gclk_gen_enable+0x38>)
    34a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    34a6:	4b0a      	ldr	r3, [pc, #40]	; (34d0 <system_gclk_gen_enable+0x3c>)
    34a8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    34aa:	4a07      	ldr	r2, [pc, #28]	; (34c8 <system_gclk_gen_enable+0x34>)
    34ac:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    34ae:	b25b      	sxtb	r3, r3
    34b0:	2b00      	cmp	r3, #0
    34b2:	dbfb      	blt.n	34ac <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    34b4:	4a04      	ldr	r2, [pc, #16]	; (34c8 <system_gclk_gen_enable+0x34>)
    34b6:	6851      	ldr	r1, [r2, #4]
    34b8:	2380      	movs	r3, #128	; 0x80
    34ba:	025b      	lsls	r3, r3, #9
    34bc:	430b      	orrs	r3, r1
    34be:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    34c0:	4b04      	ldr	r3, [pc, #16]	; (34d4 <system_gclk_gen_enable+0x40>)
    34c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    34c4:	bd10      	pop	{r4, pc}
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	40000c00 	.word	0x40000c00
    34cc:	00002f5d 	.word	0x00002f5d
    34d0:	40000c04 	.word	0x40000c04
    34d4:	00002f9d 	.word	0x00002f9d

000034d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    34d8:	b570      	push	{r4, r5, r6, lr}
    34da:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    34dc:	4a1a      	ldr	r2, [pc, #104]	; (3548 <system_gclk_gen_get_hz+0x70>)
    34de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    34e0:	b25b      	sxtb	r3, r3
    34e2:	2b00      	cmp	r3, #0
    34e4:	dbfb      	blt.n	34de <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    34e6:	4b19      	ldr	r3, [pc, #100]	; (354c <system_gclk_gen_get_hz+0x74>)
    34e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    34ea:	4b19      	ldr	r3, [pc, #100]	; (3550 <system_gclk_gen_get_hz+0x78>)
    34ec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    34ee:	4a16      	ldr	r2, [pc, #88]	; (3548 <system_gclk_gen_get_hz+0x70>)
    34f0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    34f2:	b25b      	sxtb	r3, r3
    34f4:	2b00      	cmp	r3, #0
    34f6:	dbfb      	blt.n	34f0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    34f8:	4e13      	ldr	r6, [pc, #76]	; (3548 <system_gclk_gen_get_hz+0x70>)
    34fa:	6870      	ldr	r0, [r6, #4]
    34fc:	04c0      	lsls	r0, r0, #19
    34fe:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3500:	4b14      	ldr	r3, [pc, #80]	; (3554 <system_gclk_gen_get_hz+0x7c>)
    3502:	4798      	blx	r3
    3504:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3506:	4b12      	ldr	r3, [pc, #72]	; (3550 <system_gclk_gen_get_hz+0x78>)
    3508:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    350a:	6876      	ldr	r6, [r6, #4]
    350c:	02f6      	lsls	r6, r6, #11
    350e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3510:	4b11      	ldr	r3, [pc, #68]	; (3558 <system_gclk_gen_get_hz+0x80>)
    3512:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3514:	4a0c      	ldr	r2, [pc, #48]	; (3548 <system_gclk_gen_get_hz+0x70>)
    3516:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3518:	b25b      	sxtb	r3, r3
    351a:	2b00      	cmp	r3, #0
    351c:	dbfb      	blt.n	3516 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    351e:	4b0a      	ldr	r3, [pc, #40]	; (3548 <system_gclk_gen_get_hz+0x70>)
    3520:	689c      	ldr	r4, [r3, #8]
    3522:	0224      	lsls	r4, r4, #8
    3524:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3526:	4b0d      	ldr	r3, [pc, #52]	; (355c <system_gclk_gen_get_hz+0x84>)
    3528:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    352a:	2e00      	cmp	r6, #0
    352c:	d107      	bne.n	353e <system_gclk_gen_get_hz+0x66>
    352e:	2c01      	cmp	r4, #1
    3530:	d907      	bls.n	3542 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3532:	0021      	movs	r1, r4
    3534:	0028      	movs	r0, r5
    3536:	4b0a      	ldr	r3, [pc, #40]	; (3560 <system_gclk_gen_get_hz+0x88>)
    3538:	4798      	blx	r3
    353a:	0005      	movs	r5, r0
    353c:	e001      	b.n	3542 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    353e:	3401      	adds	r4, #1
    3540:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3542:	0028      	movs	r0, r5
    3544:	bd70      	pop	{r4, r5, r6, pc}
    3546:	46c0      	nop			; (mov r8, r8)
    3548:	40000c00 	.word	0x40000c00
    354c:	00002f5d 	.word	0x00002f5d
    3550:	40000c04 	.word	0x40000c04
    3554:	00002fcd 	.word	0x00002fcd
    3558:	40000c08 	.word	0x40000c08
    355c:	00002f9d 	.word	0x00002f9d
    3560:	000038c5 	.word	0x000038c5

00003564 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3564:	b510      	push	{r4, lr}
    3566:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3568:	4b06      	ldr	r3, [pc, #24]	; (3584 <system_gclk_chan_enable+0x20>)
    356a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    356c:	4b06      	ldr	r3, [pc, #24]	; (3588 <system_gclk_chan_enable+0x24>)
    356e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3570:	4a06      	ldr	r2, [pc, #24]	; (358c <system_gclk_chan_enable+0x28>)
    3572:	8853      	ldrh	r3, [r2, #2]
    3574:	2180      	movs	r1, #128	; 0x80
    3576:	01c9      	lsls	r1, r1, #7
    3578:	430b      	orrs	r3, r1
    357a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    357c:	4b04      	ldr	r3, [pc, #16]	; (3590 <system_gclk_chan_enable+0x2c>)
    357e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3580:	bd10      	pop	{r4, pc}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	00002f5d 	.word	0x00002f5d
    3588:	40000c02 	.word	0x40000c02
    358c:	40000c00 	.word	0x40000c00
    3590:	00002f9d 	.word	0x00002f9d

00003594 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3594:	b510      	push	{r4, lr}
    3596:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3598:	4b0f      	ldr	r3, [pc, #60]	; (35d8 <system_gclk_chan_disable+0x44>)
    359a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    359c:	4b0f      	ldr	r3, [pc, #60]	; (35dc <system_gclk_chan_disable+0x48>)
    359e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    35a0:	4a0f      	ldr	r2, [pc, #60]	; (35e0 <system_gclk_chan_disable+0x4c>)
    35a2:	8853      	ldrh	r3, [r2, #2]
    35a4:	051b      	lsls	r3, r3, #20
    35a6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    35a8:	8853      	ldrh	r3, [r2, #2]
    35aa:	490e      	ldr	r1, [pc, #56]	; (35e4 <system_gclk_chan_disable+0x50>)
    35ac:	400b      	ands	r3, r1
    35ae:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    35b0:	8853      	ldrh	r3, [r2, #2]
    35b2:	490d      	ldr	r1, [pc, #52]	; (35e8 <system_gclk_chan_disable+0x54>)
    35b4:	400b      	ands	r3, r1
    35b6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    35b8:	0011      	movs	r1, r2
    35ba:	2280      	movs	r2, #128	; 0x80
    35bc:	01d2      	lsls	r2, r2, #7
    35be:	884b      	ldrh	r3, [r1, #2]
    35c0:	4213      	tst	r3, r2
    35c2:	d1fc      	bne.n	35be <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    35c4:	4906      	ldr	r1, [pc, #24]	; (35e0 <system_gclk_chan_disable+0x4c>)
    35c6:	884a      	ldrh	r2, [r1, #2]
    35c8:	0203      	lsls	r3, r0, #8
    35ca:	4806      	ldr	r0, [pc, #24]	; (35e4 <system_gclk_chan_disable+0x50>)
    35cc:	4002      	ands	r2, r0
    35ce:	4313      	orrs	r3, r2
    35d0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    35d2:	4b06      	ldr	r3, [pc, #24]	; (35ec <system_gclk_chan_disable+0x58>)
    35d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    35d6:	bd10      	pop	{r4, pc}
    35d8:	00002f5d 	.word	0x00002f5d
    35dc:	40000c02 	.word	0x40000c02
    35e0:	40000c00 	.word	0x40000c00
    35e4:	fffff0ff 	.word	0xfffff0ff
    35e8:	ffffbfff 	.word	0xffffbfff
    35ec:	00002f9d 	.word	0x00002f9d

000035f0 <system_gclk_chan_set_config>:
{
    35f0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    35f2:	780c      	ldrb	r4, [r1, #0]
    35f4:	0224      	lsls	r4, r4, #8
    35f6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    35f8:	4b02      	ldr	r3, [pc, #8]	; (3604 <system_gclk_chan_set_config+0x14>)
    35fa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    35fc:	b2a4      	uxth	r4, r4
    35fe:	4b02      	ldr	r3, [pc, #8]	; (3608 <system_gclk_chan_set_config+0x18>)
    3600:	805c      	strh	r4, [r3, #2]
}
    3602:	bd10      	pop	{r4, pc}
    3604:	00003595 	.word	0x00003595
    3608:	40000c00 	.word	0x40000c00

0000360c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    360c:	b510      	push	{r4, lr}
    360e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3610:	4b06      	ldr	r3, [pc, #24]	; (362c <system_gclk_chan_get_hz+0x20>)
    3612:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3614:	4b06      	ldr	r3, [pc, #24]	; (3630 <system_gclk_chan_get_hz+0x24>)
    3616:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3618:	4b06      	ldr	r3, [pc, #24]	; (3634 <system_gclk_chan_get_hz+0x28>)
    361a:	885c      	ldrh	r4, [r3, #2]
    361c:	0524      	lsls	r4, r4, #20
    361e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3620:	4b05      	ldr	r3, [pc, #20]	; (3638 <system_gclk_chan_get_hz+0x2c>)
    3622:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3624:	0020      	movs	r0, r4
    3626:	4b05      	ldr	r3, [pc, #20]	; (363c <system_gclk_chan_get_hz+0x30>)
    3628:	4798      	blx	r3
}
    362a:	bd10      	pop	{r4, pc}
    362c:	00002f5d 	.word	0x00002f5d
    3630:	40000c02 	.word	0x40000c02
    3634:	40000c00 	.word	0x40000c00
    3638:	00002f9d 	.word	0x00002f9d
    363c:	000034d9 	.word	0x000034d9

00003640 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3640:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3642:	78d3      	ldrb	r3, [r2, #3]
    3644:	2b00      	cmp	r3, #0
    3646:	d135      	bne.n	36b4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3648:	7813      	ldrb	r3, [r2, #0]
    364a:	2b80      	cmp	r3, #128	; 0x80
    364c:	d029      	beq.n	36a2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    364e:	061b      	lsls	r3, r3, #24
    3650:	2480      	movs	r4, #128	; 0x80
    3652:	0264      	lsls	r4, r4, #9
    3654:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3656:	7854      	ldrb	r4, [r2, #1]
    3658:	2502      	movs	r5, #2
    365a:	43ac      	bics	r4, r5
    365c:	d106      	bne.n	366c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    365e:	7894      	ldrb	r4, [r2, #2]
    3660:	2c00      	cmp	r4, #0
    3662:	d120      	bne.n	36a6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3664:	2480      	movs	r4, #128	; 0x80
    3666:	02a4      	lsls	r4, r4, #10
    3668:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    366a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    366c:	7854      	ldrb	r4, [r2, #1]
    366e:	3c01      	subs	r4, #1
    3670:	2c01      	cmp	r4, #1
    3672:	d91c      	bls.n	36ae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3674:	040d      	lsls	r5, r1, #16
    3676:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3678:	24a0      	movs	r4, #160	; 0xa0
    367a:	05e4      	lsls	r4, r4, #23
    367c:	432c      	orrs	r4, r5
    367e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3680:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3682:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3684:	24d0      	movs	r4, #208	; 0xd0
    3686:	0624      	lsls	r4, r4, #24
    3688:	432c      	orrs	r4, r5
    368a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    368c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    368e:	78d4      	ldrb	r4, [r2, #3]
    3690:	2c00      	cmp	r4, #0
    3692:	d122      	bne.n	36da <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3694:	035b      	lsls	r3, r3, #13
    3696:	d51c      	bpl.n	36d2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3698:	7893      	ldrb	r3, [r2, #2]
    369a:	2b01      	cmp	r3, #1
    369c:	d01e      	beq.n	36dc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    369e:	6141      	str	r1, [r0, #20]
    36a0:	e017      	b.n	36d2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    36a2:	2300      	movs	r3, #0
    36a4:	e7d7      	b.n	3656 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    36a6:	24c0      	movs	r4, #192	; 0xc0
    36a8:	02e4      	lsls	r4, r4, #11
    36aa:	4323      	orrs	r3, r4
    36ac:	e7dd      	b.n	366a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    36ae:	4c0d      	ldr	r4, [pc, #52]	; (36e4 <_system_pinmux_config+0xa4>)
    36b0:	4023      	ands	r3, r4
    36b2:	e7df      	b.n	3674 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    36b4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    36b6:	040c      	lsls	r4, r1, #16
    36b8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    36ba:	23a0      	movs	r3, #160	; 0xa0
    36bc:	05db      	lsls	r3, r3, #23
    36be:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    36c0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    36c2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    36c4:	23d0      	movs	r3, #208	; 0xd0
    36c6:	061b      	lsls	r3, r3, #24
    36c8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    36ca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    36cc:	78d3      	ldrb	r3, [r2, #3]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d103      	bne.n	36da <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    36d2:	7853      	ldrb	r3, [r2, #1]
    36d4:	3b01      	subs	r3, #1
    36d6:	2b01      	cmp	r3, #1
    36d8:	d902      	bls.n	36e0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    36da:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    36dc:	6181      	str	r1, [r0, #24]
    36de:	e7f8      	b.n	36d2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    36e0:	6081      	str	r1, [r0, #8]
}
    36e2:	e7fa      	b.n	36da <_system_pinmux_config+0x9a>
    36e4:	fffbffff 	.word	0xfffbffff

000036e8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    36e8:	b510      	push	{r4, lr}
    36ea:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    36ec:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    36ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    36f0:	2900      	cmp	r1, #0
    36f2:	d104      	bne.n	36fe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    36f4:	0943      	lsrs	r3, r0, #5
    36f6:	01db      	lsls	r3, r3, #7
    36f8:	4905      	ldr	r1, [pc, #20]	; (3710 <system_pinmux_pin_set_config+0x28>)
    36fa:	468c      	mov	ip, r1
    36fc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    36fe:	241f      	movs	r4, #31
    3700:	4020      	ands	r0, r4
    3702:	2101      	movs	r1, #1
    3704:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3706:	0018      	movs	r0, r3
    3708:	4b02      	ldr	r3, [pc, #8]	; (3714 <system_pinmux_pin_set_config+0x2c>)
    370a:	4798      	blx	r3
}
    370c:	bd10      	pop	{r4, pc}
    370e:	46c0      	nop			; (mov r8, r8)
    3710:	41004400 	.word	0x41004400
    3714:	00003641 	.word	0x00003641

00003718 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3718:	4770      	bx	lr
	...

0000371c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    371c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    371e:	4b05      	ldr	r3, [pc, #20]	; (3734 <system_init+0x18>)
    3720:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3722:	4b05      	ldr	r3, [pc, #20]	; (3738 <system_init+0x1c>)
    3724:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3726:	4b05      	ldr	r3, [pc, #20]	; (373c <system_init+0x20>)
    3728:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    372a:	4b05      	ldr	r3, [pc, #20]	; (3740 <system_init+0x24>)
    372c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    372e:	4b05      	ldr	r3, [pc, #20]	; (3744 <system_init+0x28>)
    3730:	4798      	blx	r3
}
    3732:	bd10      	pop	{r4, pc}
    3734:	0000323d 	.word	0x0000323d
    3738:	00002f59 	.word	0x00002f59
    373c:	00003719 	.word	0x00003719
    3740:	00003719 	.word	0x00003719
    3744:	00003719 	.word	0x00003719

00003748 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3748:	e7fe      	b.n	3748 <Dummy_Handler>
	...

0000374c <Reset_Handler>:
{
    374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    374e:	4a2a      	ldr	r2, [pc, #168]	; (37f8 <Reset_Handler+0xac>)
    3750:	4b2a      	ldr	r3, [pc, #168]	; (37fc <Reset_Handler+0xb0>)
    3752:	429a      	cmp	r2, r3
    3754:	d011      	beq.n	377a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    3756:	001a      	movs	r2, r3
    3758:	4b29      	ldr	r3, [pc, #164]	; (3800 <Reset_Handler+0xb4>)
    375a:	429a      	cmp	r2, r3
    375c:	d20d      	bcs.n	377a <Reset_Handler+0x2e>
    375e:	4a29      	ldr	r2, [pc, #164]	; (3804 <Reset_Handler+0xb8>)
    3760:	3303      	adds	r3, #3
    3762:	1a9b      	subs	r3, r3, r2
    3764:	089b      	lsrs	r3, r3, #2
    3766:	3301      	adds	r3, #1
    3768:	009b      	lsls	r3, r3, #2
    376a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    376c:	4823      	ldr	r0, [pc, #140]	; (37fc <Reset_Handler+0xb0>)
    376e:	4922      	ldr	r1, [pc, #136]	; (37f8 <Reset_Handler+0xac>)
    3770:	588c      	ldr	r4, [r1, r2]
    3772:	5084      	str	r4, [r0, r2]
    3774:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3776:	429a      	cmp	r2, r3
    3778:	d1fa      	bne.n	3770 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    377a:	4a23      	ldr	r2, [pc, #140]	; (3808 <Reset_Handler+0xbc>)
    377c:	4b23      	ldr	r3, [pc, #140]	; (380c <Reset_Handler+0xc0>)
    377e:	429a      	cmp	r2, r3
    3780:	d20a      	bcs.n	3798 <Reset_Handler+0x4c>
    3782:	43d3      	mvns	r3, r2
    3784:	4921      	ldr	r1, [pc, #132]	; (380c <Reset_Handler+0xc0>)
    3786:	185b      	adds	r3, r3, r1
    3788:	2103      	movs	r1, #3
    378a:	438b      	bics	r3, r1
    378c:	3304      	adds	r3, #4
    378e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3790:	2100      	movs	r1, #0
    3792:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3794:	4293      	cmp	r3, r2
    3796:	d1fc      	bne.n	3792 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3798:	4a1d      	ldr	r2, [pc, #116]	; (3810 <Reset_Handler+0xc4>)
    379a:	21ff      	movs	r1, #255	; 0xff
    379c:	4b1d      	ldr	r3, [pc, #116]	; (3814 <Reset_Handler+0xc8>)
    379e:	438b      	bics	r3, r1
    37a0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    37a2:	39fd      	subs	r1, #253	; 0xfd
    37a4:	2390      	movs	r3, #144	; 0x90
    37a6:	005b      	lsls	r3, r3, #1
    37a8:	4a1b      	ldr	r2, [pc, #108]	; (3818 <Reset_Handler+0xcc>)
    37aa:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    37ac:	4a1b      	ldr	r2, [pc, #108]	; (381c <Reset_Handler+0xd0>)
    37ae:	78d3      	ldrb	r3, [r2, #3]
    37b0:	2503      	movs	r5, #3
    37b2:	43ab      	bics	r3, r5
    37b4:	2402      	movs	r4, #2
    37b6:	4323      	orrs	r3, r4
    37b8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    37ba:	78d3      	ldrb	r3, [r2, #3]
    37bc:	270c      	movs	r7, #12
    37be:	43bb      	bics	r3, r7
    37c0:	2608      	movs	r6, #8
    37c2:	4333      	orrs	r3, r6
    37c4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    37c6:	4b16      	ldr	r3, [pc, #88]	; (3820 <Reset_Handler+0xd4>)
    37c8:	7b98      	ldrb	r0, [r3, #14]
    37ca:	2230      	movs	r2, #48	; 0x30
    37cc:	4390      	bics	r0, r2
    37ce:	2220      	movs	r2, #32
    37d0:	4310      	orrs	r0, r2
    37d2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    37d4:	7b99      	ldrb	r1, [r3, #14]
    37d6:	43b9      	bics	r1, r7
    37d8:	4331      	orrs	r1, r6
    37da:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    37dc:	7b9a      	ldrb	r2, [r3, #14]
    37de:	43aa      	bics	r2, r5
    37e0:	4322      	orrs	r2, r4
    37e2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    37e4:	4a0f      	ldr	r2, [pc, #60]	; (3824 <Reset_Handler+0xd8>)
    37e6:	6853      	ldr	r3, [r2, #4]
    37e8:	2180      	movs	r1, #128	; 0x80
    37ea:	430b      	orrs	r3, r1
    37ec:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    37ee:	4b0e      	ldr	r3, [pc, #56]	; (3828 <Reset_Handler+0xdc>)
    37f0:	4798      	blx	r3
        main();
    37f2:	4b0e      	ldr	r3, [pc, #56]	; (382c <Reset_Handler+0xe0>)
    37f4:	4798      	blx	r3
    37f6:	e7fe      	b.n	37f6 <Reset_Handler+0xaa>
    37f8:	000056e4 	.word	0x000056e4
    37fc:	20000000 	.word	0x20000000
    3800:	200000bc 	.word	0x200000bc
    3804:	20000004 	.word	0x20000004
    3808:	200000bc 	.word	0x200000bc
    380c:	200011fc 	.word	0x200011fc
    3810:	e000ed00 	.word	0xe000ed00
    3814:	00000000 	.word	0x00000000
    3818:	41007000 	.word	0x41007000
    381c:	41005000 	.word	0x41005000
    3820:	41004800 	.word	0x41004800
    3824:	41004000 	.word	0x41004000
    3828:	000052f9 	.word	0x000052f9
    382c:	00003855 	.word	0x00003855

00003830 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3830:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3832:	4a06      	ldr	r2, [pc, #24]	; (384c <_sbrk+0x1c>)
    3834:	6812      	ldr	r2, [r2, #0]
    3836:	2a00      	cmp	r2, #0
    3838:	d004      	beq.n	3844 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    383a:	4a04      	ldr	r2, [pc, #16]	; (384c <_sbrk+0x1c>)
    383c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    383e:	18c3      	adds	r3, r0, r3
    3840:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3842:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3844:	4902      	ldr	r1, [pc, #8]	; (3850 <_sbrk+0x20>)
    3846:	4a01      	ldr	r2, [pc, #4]	; (384c <_sbrk+0x1c>)
    3848:	6011      	str	r1, [r2, #0]
    384a:	e7f6      	b.n	383a <_sbrk+0xa>
    384c:	20000de4 	.word	0x20000de4
    3850:	20003200 	.word	0x20003200

00003854 <main>:
};
*/ 


int main (void)
{
    3854:	b570      	push	{r4, r5, r6, lr}
	system_init();
    3856:	4b0f      	ldr	r3, [pc, #60]	; (3894 <main+0x40>)
    3858:	4798      	blx	r3
	delay_init();
    385a:	4b0f      	ldr	r3, [pc, #60]	; (3898 <main+0x44>)
    385c:	4798      	blx	r3
	configureSendInfo();
    385e:	4b0f      	ldr	r3, [pc, #60]	; (389c <main+0x48>)
    3860:	4798      	blx	r3
	initializeI2CModules();
    3862:	4b0f      	ldr	r3, [pc, #60]	; (38a0 <main+0x4c>)
    3864:	4798      	blx	r3
	delay_cycles_ms(500);
    3866:	20fa      	movs	r0, #250	; 0xfa
    3868:	0040      	lsls	r0, r0, #1
    386a:	4b0e      	ldr	r3, [pc, #56]	; (38a4 <main+0x50>)
    386c:	4798      	blx	r3
	//enableServoTCC();
	//USART -- 115200
	serialInit();
    386e:	4b0e      	ldr	r3, [pc, #56]	; (38a8 <main+0x54>)
    3870:	4798      	blx	r3
	configureInputOutputDetection();
    3872:	4b0e      	ldr	r3, [pc, #56]	; (38ac <main+0x58>)
    3874:	4798      	blx	r3
	while(1)
	{
		
		checkOutputsInputs();
    3876:	4e0e      	ldr	r6, [pc, #56]	; (38b0 <main+0x5c>)
		checkSetOutputs();
    3878:	4d0e      	ldr	r5, [pc, #56]	; (38b4 <main+0x60>)
		readSensors();
    387a:	4c0f      	ldr	r4, [pc, #60]	; (38b8 <main+0x64>)
		checkOutputsInputs();
    387c:	47b0      	blx	r6
		checkSetOutputs();
    387e:	47a8      	blx	r5
		readSensors();
    3880:	47a0      	blx	r4
		//setOutputs();
		checkUART();
    3882:	4b0e      	ldr	r3, [pc, #56]	; (38bc <main+0x68>)
    3884:	4798      	blx	r3
		delay_ms(5);
    3886:	2005      	movs	r0, #5
    3888:	4b06      	ldr	r3, [pc, #24]	; (38a4 <main+0x50>)
    388a:	4798      	blx	r3
		checkSendOutputs();
    388c:	4b0c      	ldr	r3, [pc, #48]	; (38c0 <main+0x6c>)
    388e:	4798      	blx	r3
    3890:	e7f4      	b.n	387c <main+0x28>
    3892:	46c0      	nop			; (mov r8, r8)
    3894:	0000371d 	.word	0x0000371d
    3898:	000017e5 	.word	0x000017e5
    389c:	000017d1 	.word	0x000017d1
    38a0:	000011ad 	.word	0x000011ad
    38a4:	00001825 	.word	0x00001825
    38a8:	00002b49 	.word	0x00002b49
    38ac:	00002f4d 	.word	0x00002f4d
    38b0:	00002f31 	.word	0x00002f31
    38b4:	00000db5 	.word	0x00000db5
    38b8:	00002a85 	.word	0x00002a85
    38bc:	000029b1 	.word	0x000029b1
    38c0:	00001571 	.word	0x00001571

000038c4 <__udivsi3>:
    38c4:	2200      	movs	r2, #0
    38c6:	0843      	lsrs	r3, r0, #1
    38c8:	428b      	cmp	r3, r1
    38ca:	d374      	bcc.n	39b6 <__udivsi3+0xf2>
    38cc:	0903      	lsrs	r3, r0, #4
    38ce:	428b      	cmp	r3, r1
    38d0:	d35f      	bcc.n	3992 <__udivsi3+0xce>
    38d2:	0a03      	lsrs	r3, r0, #8
    38d4:	428b      	cmp	r3, r1
    38d6:	d344      	bcc.n	3962 <__udivsi3+0x9e>
    38d8:	0b03      	lsrs	r3, r0, #12
    38da:	428b      	cmp	r3, r1
    38dc:	d328      	bcc.n	3930 <__udivsi3+0x6c>
    38de:	0c03      	lsrs	r3, r0, #16
    38e0:	428b      	cmp	r3, r1
    38e2:	d30d      	bcc.n	3900 <__udivsi3+0x3c>
    38e4:	22ff      	movs	r2, #255	; 0xff
    38e6:	0209      	lsls	r1, r1, #8
    38e8:	ba12      	rev	r2, r2
    38ea:	0c03      	lsrs	r3, r0, #16
    38ec:	428b      	cmp	r3, r1
    38ee:	d302      	bcc.n	38f6 <__udivsi3+0x32>
    38f0:	1212      	asrs	r2, r2, #8
    38f2:	0209      	lsls	r1, r1, #8
    38f4:	d065      	beq.n	39c2 <__udivsi3+0xfe>
    38f6:	0b03      	lsrs	r3, r0, #12
    38f8:	428b      	cmp	r3, r1
    38fa:	d319      	bcc.n	3930 <__udivsi3+0x6c>
    38fc:	e000      	b.n	3900 <__udivsi3+0x3c>
    38fe:	0a09      	lsrs	r1, r1, #8
    3900:	0bc3      	lsrs	r3, r0, #15
    3902:	428b      	cmp	r3, r1
    3904:	d301      	bcc.n	390a <__udivsi3+0x46>
    3906:	03cb      	lsls	r3, r1, #15
    3908:	1ac0      	subs	r0, r0, r3
    390a:	4152      	adcs	r2, r2
    390c:	0b83      	lsrs	r3, r0, #14
    390e:	428b      	cmp	r3, r1
    3910:	d301      	bcc.n	3916 <__udivsi3+0x52>
    3912:	038b      	lsls	r3, r1, #14
    3914:	1ac0      	subs	r0, r0, r3
    3916:	4152      	adcs	r2, r2
    3918:	0b43      	lsrs	r3, r0, #13
    391a:	428b      	cmp	r3, r1
    391c:	d301      	bcc.n	3922 <__udivsi3+0x5e>
    391e:	034b      	lsls	r3, r1, #13
    3920:	1ac0      	subs	r0, r0, r3
    3922:	4152      	adcs	r2, r2
    3924:	0b03      	lsrs	r3, r0, #12
    3926:	428b      	cmp	r3, r1
    3928:	d301      	bcc.n	392e <__udivsi3+0x6a>
    392a:	030b      	lsls	r3, r1, #12
    392c:	1ac0      	subs	r0, r0, r3
    392e:	4152      	adcs	r2, r2
    3930:	0ac3      	lsrs	r3, r0, #11
    3932:	428b      	cmp	r3, r1
    3934:	d301      	bcc.n	393a <__udivsi3+0x76>
    3936:	02cb      	lsls	r3, r1, #11
    3938:	1ac0      	subs	r0, r0, r3
    393a:	4152      	adcs	r2, r2
    393c:	0a83      	lsrs	r3, r0, #10
    393e:	428b      	cmp	r3, r1
    3940:	d301      	bcc.n	3946 <__udivsi3+0x82>
    3942:	028b      	lsls	r3, r1, #10
    3944:	1ac0      	subs	r0, r0, r3
    3946:	4152      	adcs	r2, r2
    3948:	0a43      	lsrs	r3, r0, #9
    394a:	428b      	cmp	r3, r1
    394c:	d301      	bcc.n	3952 <__udivsi3+0x8e>
    394e:	024b      	lsls	r3, r1, #9
    3950:	1ac0      	subs	r0, r0, r3
    3952:	4152      	adcs	r2, r2
    3954:	0a03      	lsrs	r3, r0, #8
    3956:	428b      	cmp	r3, r1
    3958:	d301      	bcc.n	395e <__udivsi3+0x9a>
    395a:	020b      	lsls	r3, r1, #8
    395c:	1ac0      	subs	r0, r0, r3
    395e:	4152      	adcs	r2, r2
    3960:	d2cd      	bcs.n	38fe <__udivsi3+0x3a>
    3962:	09c3      	lsrs	r3, r0, #7
    3964:	428b      	cmp	r3, r1
    3966:	d301      	bcc.n	396c <__udivsi3+0xa8>
    3968:	01cb      	lsls	r3, r1, #7
    396a:	1ac0      	subs	r0, r0, r3
    396c:	4152      	adcs	r2, r2
    396e:	0983      	lsrs	r3, r0, #6
    3970:	428b      	cmp	r3, r1
    3972:	d301      	bcc.n	3978 <__udivsi3+0xb4>
    3974:	018b      	lsls	r3, r1, #6
    3976:	1ac0      	subs	r0, r0, r3
    3978:	4152      	adcs	r2, r2
    397a:	0943      	lsrs	r3, r0, #5
    397c:	428b      	cmp	r3, r1
    397e:	d301      	bcc.n	3984 <__udivsi3+0xc0>
    3980:	014b      	lsls	r3, r1, #5
    3982:	1ac0      	subs	r0, r0, r3
    3984:	4152      	adcs	r2, r2
    3986:	0903      	lsrs	r3, r0, #4
    3988:	428b      	cmp	r3, r1
    398a:	d301      	bcc.n	3990 <__udivsi3+0xcc>
    398c:	010b      	lsls	r3, r1, #4
    398e:	1ac0      	subs	r0, r0, r3
    3990:	4152      	adcs	r2, r2
    3992:	08c3      	lsrs	r3, r0, #3
    3994:	428b      	cmp	r3, r1
    3996:	d301      	bcc.n	399c <__udivsi3+0xd8>
    3998:	00cb      	lsls	r3, r1, #3
    399a:	1ac0      	subs	r0, r0, r3
    399c:	4152      	adcs	r2, r2
    399e:	0883      	lsrs	r3, r0, #2
    39a0:	428b      	cmp	r3, r1
    39a2:	d301      	bcc.n	39a8 <__udivsi3+0xe4>
    39a4:	008b      	lsls	r3, r1, #2
    39a6:	1ac0      	subs	r0, r0, r3
    39a8:	4152      	adcs	r2, r2
    39aa:	0843      	lsrs	r3, r0, #1
    39ac:	428b      	cmp	r3, r1
    39ae:	d301      	bcc.n	39b4 <__udivsi3+0xf0>
    39b0:	004b      	lsls	r3, r1, #1
    39b2:	1ac0      	subs	r0, r0, r3
    39b4:	4152      	adcs	r2, r2
    39b6:	1a41      	subs	r1, r0, r1
    39b8:	d200      	bcs.n	39bc <__udivsi3+0xf8>
    39ba:	4601      	mov	r1, r0
    39bc:	4152      	adcs	r2, r2
    39be:	4610      	mov	r0, r2
    39c0:	4770      	bx	lr
    39c2:	e7ff      	b.n	39c4 <__udivsi3+0x100>
    39c4:	b501      	push	{r0, lr}
    39c6:	2000      	movs	r0, #0
    39c8:	f000 f806 	bl	39d8 <__aeabi_idiv0>
    39cc:	bd02      	pop	{r1, pc}
    39ce:	46c0      	nop			; (mov r8, r8)

000039d0 <__aeabi_uidivmod>:
    39d0:	2900      	cmp	r1, #0
    39d2:	d0f7      	beq.n	39c4 <__udivsi3+0x100>
    39d4:	e776      	b.n	38c4 <__udivsi3>
    39d6:	4770      	bx	lr

000039d8 <__aeabi_idiv0>:
    39d8:	4770      	bx	lr
    39da:	46c0      	nop			; (mov r8, r8)

000039dc <__aeabi_lmul>:
    39dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39de:	46ce      	mov	lr, r9
    39e0:	4647      	mov	r7, r8
    39e2:	0415      	lsls	r5, r2, #16
    39e4:	0c2d      	lsrs	r5, r5, #16
    39e6:	002e      	movs	r6, r5
    39e8:	b580      	push	{r7, lr}
    39ea:	0407      	lsls	r7, r0, #16
    39ec:	0c14      	lsrs	r4, r2, #16
    39ee:	0c3f      	lsrs	r7, r7, #16
    39f0:	4699      	mov	r9, r3
    39f2:	0c03      	lsrs	r3, r0, #16
    39f4:	437e      	muls	r6, r7
    39f6:	435d      	muls	r5, r3
    39f8:	4367      	muls	r7, r4
    39fa:	4363      	muls	r3, r4
    39fc:	197f      	adds	r7, r7, r5
    39fe:	0c34      	lsrs	r4, r6, #16
    3a00:	19e4      	adds	r4, r4, r7
    3a02:	469c      	mov	ip, r3
    3a04:	42a5      	cmp	r5, r4
    3a06:	d903      	bls.n	3a10 <__aeabi_lmul+0x34>
    3a08:	2380      	movs	r3, #128	; 0x80
    3a0a:	025b      	lsls	r3, r3, #9
    3a0c:	4698      	mov	r8, r3
    3a0e:	44c4      	add	ip, r8
    3a10:	464b      	mov	r3, r9
    3a12:	4351      	muls	r1, r2
    3a14:	4343      	muls	r3, r0
    3a16:	0436      	lsls	r6, r6, #16
    3a18:	0c36      	lsrs	r6, r6, #16
    3a1a:	0c25      	lsrs	r5, r4, #16
    3a1c:	0424      	lsls	r4, r4, #16
    3a1e:	4465      	add	r5, ip
    3a20:	19a4      	adds	r4, r4, r6
    3a22:	1859      	adds	r1, r3, r1
    3a24:	1949      	adds	r1, r1, r5
    3a26:	0020      	movs	r0, r4
    3a28:	bc0c      	pop	{r2, r3}
    3a2a:	4690      	mov	r8, r2
    3a2c:	4699      	mov	r9, r3
    3a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003a30 <__aeabi_dadd>:
    3a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a32:	4645      	mov	r5, r8
    3a34:	46de      	mov	lr, fp
    3a36:	4657      	mov	r7, sl
    3a38:	464e      	mov	r6, r9
    3a3a:	030c      	lsls	r4, r1, #12
    3a3c:	b5e0      	push	{r5, r6, r7, lr}
    3a3e:	004e      	lsls	r6, r1, #1
    3a40:	0fc9      	lsrs	r1, r1, #31
    3a42:	4688      	mov	r8, r1
    3a44:	000d      	movs	r5, r1
    3a46:	0a61      	lsrs	r1, r4, #9
    3a48:	0f44      	lsrs	r4, r0, #29
    3a4a:	430c      	orrs	r4, r1
    3a4c:	00c7      	lsls	r7, r0, #3
    3a4e:	0319      	lsls	r1, r3, #12
    3a50:	0058      	lsls	r0, r3, #1
    3a52:	0fdb      	lsrs	r3, r3, #31
    3a54:	469b      	mov	fp, r3
    3a56:	0a4b      	lsrs	r3, r1, #9
    3a58:	0f51      	lsrs	r1, r2, #29
    3a5a:	430b      	orrs	r3, r1
    3a5c:	0d76      	lsrs	r6, r6, #21
    3a5e:	0d40      	lsrs	r0, r0, #21
    3a60:	0019      	movs	r1, r3
    3a62:	00d2      	lsls	r2, r2, #3
    3a64:	45d8      	cmp	r8, fp
    3a66:	d100      	bne.n	3a6a <__aeabi_dadd+0x3a>
    3a68:	e0ae      	b.n	3bc8 <__aeabi_dadd+0x198>
    3a6a:	1a35      	subs	r5, r6, r0
    3a6c:	2d00      	cmp	r5, #0
    3a6e:	dc00      	bgt.n	3a72 <__aeabi_dadd+0x42>
    3a70:	e0f6      	b.n	3c60 <__aeabi_dadd+0x230>
    3a72:	2800      	cmp	r0, #0
    3a74:	d10f      	bne.n	3a96 <__aeabi_dadd+0x66>
    3a76:	4313      	orrs	r3, r2
    3a78:	d100      	bne.n	3a7c <__aeabi_dadd+0x4c>
    3a7a:	e0db      	b.n	3c34 <__aeabi_dadd+0x204>
    3a7c:	1e6b      	subs	r3, r5, #1
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d000      	beq.n	3a84 <__aeabi_dadd+0x54>
    3a82:	e137      	b.n	3cf4 <__aeabi_dadd+0x2c4>
    3a84:	1aba      	subs	r2, r7, r2
    3a86:	4297      	cmp	r7, r2
    3a88:	41bf      	sbcs	r7, r7
    3a8a:	1a64      	subs	r4, r4, r1
    3a8c:	427f      	negs	r7, r7
    3a8e:	1be4      	subs	r4, r4, r7
    3a90:	2601      	movs	r6, #1
    3a92:	0017      	movs	r7, r2
    3a94:	e024      	b.n	3ae0 <__aeabi_dadd+0xb0>
    3a96:	4bc6      	ldr	r3, [pc, #792]	; (3db0 <__aeabi_dadd+0x380>)
    3a98:	429e      	cmp	r6, r3
    3a9a:	d04d      	beq.n	3b38 <__aeabi_dadd+0x108>
    3a9c:	2380      	movs	r3, #128	; 0x80
    3a9e:	041b      	lsls	r3, r3, #16
    3aa0:	4319      	orrs	r1, r3
    3aa2:	2d38      	cmp	r5, #56	; 0x38
    3aa4:	dd00      	ble.n	3aa8 <__aeabi_dadd+0x78>
    3aa6:	e107      	b.n	3cb8 <__aeabi_dadd+0x288>
    3aa8:	2d1f      	cmp	r5, #31
    3aaa:	dd00      	ble.n	3aae <__aeabi_dadd+0x7e>
    3aac:	e138      	b.n	3d20 <__aeabi_dadd+0x2f0>
    3aae:	2020      	movs	r0, #32
    3ab0:	1b43      	subs	r3, r0, r5
    3ab2:	469a      	mov	sl, r3
    3ab4:	000b      	movs	r3, r1
    3ab6:	4650      	mov	r0, sl
    3ab8:	4083      	lsls	r3, r0
    3aba:	4699      	mov	r9, r3
    3abc:	0013      	movs	r3, r2
    3abe:	4648      	mov	r0, r9
    3ac0:	40eb      	lsrs	r3, r5
    3ac2:	4318      	orrs	r0, r3
    3ac4:	0003      	movs	r3, r0
    3ac6:	4650      	mov	r0, sl
    3ac8:	4082      	lsls	r2, r0
    3aca:	1e50      	subs	r0, r2, #1
    3acc:	4182      	sbcs	r2, r0
    3ace:	40e9      	lsrs	r1, r5
    3ad0:	431a      	orrs	r2, r3
    3ad2:	1aba      	subs	r2, r7, r2
    3ad4:	1a61      	subs	r1, r4, r1
    3ad6:	4297      	cmp	r7, r2
    3ad8:	41a4      	sbcs	r4, r4
    3ada:	0017      	movs	r7, r2
    3adc:	4264      	negs	r4, r4
    3ade:	1b0c      	subs	r4, r1, r4
    3ae0:	0223      	lsls	r3, r4, #8
    3ae2:	d562      	bpl.n	3baa <__aeabi_dadd+0x17a>
    3ae4:	0264      	lsls	r4, r4, #9
    3ae6:	0a65      	lsrs	r5, r4, #9
    3ae8:	2d00      	cmp	r5, #0
    3aea:	d100      	bne.n	3aee <__aeabi_dadd+0xbe>
    3aec:	e0df      	b.n	3cae <__aeabi_dadd+0x27e>
    3aee:	0028      	movs	r0, r5
    3af0:	f001 fbe4 	bl	52bc <__clzsi2>
    3af4:	0003      	movs	r3, r0
    3af6:	3b08      	subs	r3, #8
    3af8:	2b1f      	cmp	r3, #31
    3afa:	dd00      	ble.n	3afe <__aeabi_dadd+0xce>
    3afc:	e0d2      	b.n	3ca4 <__aeabi_dadd+0x274>
    3afe:	2220      	movs	r2, #32
    3b00:	003c      	movs	r4, r7
    3b02:	1ad2      	subs	r2, r2, r3
    3b04:	409d      	lsls	r5, r3
    3b06:	40d4      	lsrs	r4, r2
    3b08:	409f      	lsls	r7, r3
    3b0a:	4325      	orrs	r5, r4
    3b0c:	429e      	cmp	r6, r3
    3b0e:	dd00      	ble.n	3b12 <__aeabi_dadd+0xe2>
    3b10:	e0c4      	b.n	3c9c <__aeabi_dadd+0x26c>
    3b12:	1b9e      	subs	r6, r3, r6
    3b14:	1c73      	adds	r3, r6, #1
    3b16:	2b1f      	cmp	r3, #31
    3b18:	dd00      	ble.n	3b1c <__aeabi_dadd+0xec>
    3b1a:	e0f1      	b.n	3d00 <__aeabi_dadd+0x2d0>
    3b1c:	2220      	movs	r2, #32
    3b1e:	0038      	movs	r0, r7
    3b20:	0029      	movs	r1, r5
    3b22:	1ad2      	subs	r2, r2, r3
    3b24:	40d8      	lsrs	r0, r3
    3b26:	4091      	lsls	r1, r2
    3b28:	4097      	lsls	r7, r2
    3b2a:	002c      	movs	r4, r5
    3b2c:	4301      	orrs	r1, r0
    3b2e:	1e78      	subs	r0, r7, #1
    3b30:	4187      	sbcs	r7, r0
    3b32:	40dc      	lsrs	r4, r3
    3b34:	2600      	movs	r6, #0
    3b36:	430f      	orrs	r7, r1
    3b38:	077b      	lsls	r3, r7, #29
    3b3a:	d009      	beq.n	3b50 <__aeabi_dadd+0x120>
    3b3c:	230f      	movs	r3, #15
    3b3e:	403b      	ands	r3, r7
    3b40:	2b04      	cmp	r3, #4
    3b42:	d005      	beq.n	3b50 <__aeabi_dadd+0x120>
    3b44:	1d3b      	adds	r3, r7, #4
    3b46:	42bb      	cmp	r3, r7
    3b48:	41bf      	sbcs	r7, r7
    3b4a:	427f      	negs	r7, r7
    3b4c:	19e4      	adds	r4, r4, r7
    3b4e:	001f      	movs	r7, r3
    3b50:	0223      	lsls	r3, r4, #8
    3b52:	d52c      	bpl.n	3bae <__aeabi_dadd+0x17e>
    3b54:	4b96      	ldr	r3, [pc, #600]	; (3db0 <__aeabi_dadd+0x380>)
    3b56:	3601      	adds	r6, #1
    3b58:	429e      	cmp	r6, r3
    3b5a:	d100      	bne.n	3b5e <__aeabi_dadd+0x12e>
    3b5c:	e09a      	b.n	3c94 <__aeabi_dadd+0x264>
    3b5e:	4645      	mov	r5, r8
    3b60:	4b94      	ldr	r3, [pc, #592]	; (3db4 <__aeabi_dadd+0x384>)
    3b62:	08ff      	lsrs	r7, r7, #3
    3b64:	401c      	ands	r4, r3
    3b66:	0760      	lsls	r0, r4, #29
    3b68:	0576      	lsls	r6, r6, #21
    3b6a:	0264      	lsls	r4, r4, #9
    3b6c:	4307      	orrs	r7, r0
    3b6e:	0b24      	lsrs	r4, r4, #12
    3b70:	0d76      	lsrs	r6, r6, #21
    3b72:	2100      	movs	r1, #0
    3b74:	0324      	lsls	r4, r4, #12
    3b76:	0b23      	lsrs	r3, r4, #12
    3b78:	0d0c      	lsrs	r4, r1, #20
    3b7a:	4a8f      	ldr	r2, [pc, #572]	; (3db8 <__aeabi_dadd+0x388>)
    3b7c:	0524      	lsls	r4, r4, #20
    3b7e:	431c      	orrs	r4, r3
    3b80:	4014      	ands	r4, r2
    3b82:	0533      	lsls	r3, r6, #20
    3b84:	4323      	orrs	r3, r4
    3b86:	005b      	lsls	r3, r3, #1
    3b88:	07ed      	lsls	r5, r5, #31
    3b8a:	085b      	lsrs	r3, r3, #1
    3b8c:	432b      	orrs	r3, r5
    3b8e:	0038      	movs	r0, r7
    3b90:	0019      	movs	r1, r3
    3b92:	bc3c      	pop	{r2, r3, r4, r5}
    3b94:	4690      	mov	r8, r2
    3b96:	4699      	mov	r9, r3
    3b98:	46a2      	mov	sl, r4
    3b9a:	46ab      	mov	fp, r5
    3b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b9e:	4664      	mov	r4, ip
    3ba0:	4304      	orrs	r4, r0
    3ba2:	d100      	bne.n	3ba6 <__aeabi_dadd+0x176>
    3ba4:	e211      	b.n	3fca <__aeabi_dadd+0x59a>
    3ba6:	0004      	movs	r4, r0
    3ba8:	4667      	mov	r7, ip
    3baa:	077b      	lsls	r3, r7, #29
    3bac:	d1c6      	bne.n	3b3c <__aeabi_dadd+0x10c>
    3bae:	4645      	mov	r5, r8
    3bb0:	0760      	lsls	r0, r4, #29
    3bb2:	08ff      	lsrs	r7, r7, #3
    3bb4:	4307      	orrs	r7, r0
    3bb6:	08e4      	lsrs	r4, r4, #3
    3bb8:	4b7d      	ldr	r3, [pc, #500]	; (3db0 <__aeabi_dadd+0x380>)
    3bba:	429e      	cmp	r6, r3
    3bbc:	d030      	beq.n	3c20 <__aeabi_dadd+0x1f0>
    3bbe:	0324      	lsls	r4, r4, #12
    3bc0:	0576      	lsls	r6, r6, #21
    3bc2:	0b24      	lsrs	r4, r4, #12
    3bc4:	0d76      	lsrs	r6, r6, #21
    3bc6:	e7d4      	b.n	3b72 <__aeabi_dadd+0x142>
    3bc8:	1a33      	subs	r3, r6, r0
    3bca:	469a      	mov	sl, r3
    3bcc:	2b00      	cmp	r3, #0
    3bce:	dd78      	ble.n	3cc2 <__aeabi_dadd+0x292>
    3bd0:	2800      	cmp	r0, #0
    3bd2:	d031      	beq.n	3c38 <__aeabi_dadd+0x208>
    3bd4:	4876      	ldr	r0, [pc, #472]	; (3db0 <__aeabi_dadd+0x380>)
    3bd6:	4286      	cmp	r6, r0
    3bd8:	d0ae      	beq.n	3b38 <__aeabi_dadd+0x108>
    3bda:	2080      	movs	r0, #128	; 0x80
    3bdc:	0400      	lsls	r0, r0, #16
    3bde:	4301      	orrs	r1, r0
    3be0:	4653      	mov	r3, sl
    3be2:	2b38      	cmp	r3, #56	; 0x38
    3be4:	dc00      	bgt.n	3be8 <__aeabi_dadd+0x1b8>
    3be6:	e0e9      	b.n	3dbc <__aeabi_dadd+0x38c>
    3be8:	430a      	orrs	r2, r1
    3bea:	1e51      	subs	r1, r2, #1
    3bec:	418a      	sbcs	r2, r1
    3bee:	2100      	movs	r1, #0
    3bf0:	19d2      	adds	r2, r2, r7
    3bf2:	42ba      	cmp	r2, r7
    3bf4:	41bf      	sbcs	r7, r7
    3bf6:	1909      	adds	r1, r1, r4
    3bf8:	427c      	negs	r4, r7
    3bfa:	0017      	movs	r7, r2
    3bfc:	190c      	adds	r4, r1, r4
    3bfe:	0223      	lsls	r3, r4, #8
    3c00:	d5d3      	bpl.n	3baa <__aeabi_dadd+0x17a>
    3c02:	4b6b      	ldr	r3, [pc, #428]	; (3db0 <__aeabi_dadd+0x380>)
    3c04:	3601      	adds	r6, #1
    3c06:	429e      	cmp	r6, r3
    3c08:	d100      	bne.n	3c0c <__aeabi_dadd+0x1dc>
    3c0a:	e13a      	b.n	3e82 <__aeabi_dadd+0x452>
    3c0c:	2001      	movs	r0, #1
    3c0e:	4b69      	ldr	r3, [pc, #420]	; (3db4 <__aeabi_dadd+0x384>)
    3c10:	401c      	ands	r4, r3
    3c12:	087b      	lsrs	r3, r7, #1
    3c14:	4007      	ands	r7, r0
    3c16:	431f      	orrs	r7, r3
    3c18:	07e0      	lsls	r0, r4, #31
    3c1a:	4307      	orrs	r7, r0
    3c1c:	0864      	lsrs	r4, r4, #1
    3c1e:	e78b      	b.n	3b38 <__aeabi_dadd+0x108>
    3c20:	0023      	movs	r3, r4
    3c22:	433b      	orrs	r3, r7
    3c24:	d100      	bne.n	3c28 <__aeabi_dadd+0x1f8>
    3c26:	e1cb      	b.n	3fc0 <__aeabi_dadd+0x590>
    3c28:	2280      	movs	r2, #128	; 0x80
    3c2a:	0312      	lsls	r2, r2, #12
    3c2c:	4314      	orrs	r4, r2
    3c2e:	0324      	lsls	r4, r4, #12
    3c30:	0b24      	lsrs	r4, r4, #12
    3c32:	e79e      	b.n	3b72 <__aeabi_dadd+0x142>
    3c34:	002e      	movs	r6, r5
    3c36:	e77f      	b.n	3b38 <__aeabi_dadd+0x108>
    3c38:	0008      	movs	r0, r1
    3c3a:	4310      	orrs	r0, r2
    3c3c:	d100      	bne.n	3c40 <__aeabi_dadd+0x210>
    3c3e:	e0b4      	b.n	3daa <__aeabi_dadd+0x37a>
    3c40:	1e58      	subs	r0, r3, #1
    3c42:	2800      	cmp	r0, #0
    3c44:	d000      	beq.n	3c48 <__aeabi_dadd+0x218>
    3c46:	e0de      	b.n	3e06 <__aeabi_dadd+0x3d6>
    3c48:	18ba      	adds	r2, r7, r2
    3c4a:	42ba      	cmp	r2, r7
    3c4c:	419b      	sbcs	r3, r3
    3c4e:	1864      	adds	r4, r4, r1
    3c50:	425b      	negs	r3, r3
    3c52:	18e4      	adds	r4, r4, r3
    3c54:	0017      	movs	r7, r2
    3c56:	2601      	movs	r6, #1
    3c58:	0223      	lsls	r3, r4, #8
    3c5a:	d5a6      	bpl.n	3baa <__aeabi_dadd+0x17a>
    3c5c:	2602      	movs	r6, #2
    3c5e:	e7d5      	b.n	3c0c <__aeabi_dadd+0x1dc>
    3c60:	2d00      	cmp	r5, #0
    3c62:	d16e      	bne.n	3d42 <__aeabi_dadd+0x312>
    3c64:	1c70      	adds	r0, r6, #1
    3c66:	0540      	lsls	r0, r0, #21
    3c68:	0d40      	lsrs	r0, r0, #21
    3c6a:	2801      	cmp	r0, #1
    3c6c:	dc00      	bgt.n	3c70 <__aeabi_dadd+0x240>
    3c6e:	e0f9      	b.n	3e64 <__aeabi_dadd+0x434>
    3c70:	1ab8      	subs	r0, r7, r2
    3c72:	4684      	mov	ip, r0
    3c74:	4287      	cmp	r7, r0
    3c76:	4180      	sbcs	r0, r0
    3c78:	1ae5      	subs	r5, r4, r3
    3c7a:	4240      	negs	r0, r0
    3c7c:	1a2d      	subs	r5, r5, r0
    3c7e:	0228      	lsls	r0, r5, #8
    3c80:	d400      	bmi.n	3c84 <__aeabi_dadd+0x254>
    3c82:	e089      	b.n	3d98 <__aeabi_dadd+0x368>
    3c84:	1bd7      	subs	r7, r2, r7
    3c86:	42ba      	cmp	r2, r7
    3c88:	4192      	sbcs	r2, r2
    3c8a:	1b1c      	subs	r4, r3, r4
    3c8c:	4252      	negs	r2, r2
    3c8e:	1aa5      	subs	r5, r4, r2
    3c90:	46d8      	mov	r8, fp
    3c92:	e729      	b.n	3ae8 <__aeabi_dadd+0xb8>
    3c94:	4645      	mov	r5, r8
    3c96:	2400      	movs	r4, #0
    3c98:	2700      	movs	r7, #0
    3c9a:	e76a      	b.n	3b72 <__aeabi_dadd+0x142>
    3c9c:	4c45      	ldr	r4, [pc, #276]	; (3db4 <__aeabi_dadd+0x384>)
    3c9e:	1af6      	subs	r6, r6, r3
    3ca0:	402c      	ands	r4, r5
    3ca2:	e749      	b.n	3b38 <__aeabi_dadd+0x108>
    3ca4:	003d      	movs	r5, r7
    3ca6:	3828      	subs	r0, #40	; 0x28
    3ca8:	4085      	lsls	r5, r0
    3caa:	2700      	movs	r7, #0
    3cac:	e72e      	b.n	3b0c <__aeabi_dadd+0xdc>
    3cae:	0038      	movs	r0, r7
    3cb0:	f001 fb04 	bl	52bc <__clzsi2>
    3cb4:	3020      	adds	r0, #32
    3cb6:	e71d      	b.n	3af4 <__aeabi_dadd+0xc4>
    3cb8:	430a      	orrs	r2, r1
    3cba:	1e51      	subs	r1, r2, #1
    3cbc:	418a      	sbcs	r2, r1
    3cbe:	2100      	movs	r1, #0
    3cc0:	e707      	b.n	3ad2 <__aeabi_dadd+0xa2>
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d000      	beq.n	3cc8 <__aeabi_dadd+0x298>
    3cc6:	e0f3      	b.n	3eb0 <__aeabi_dadd+0x480>
    3cc8:	1c70      	adds	r0, r6, #1
    3cca:	0543      	lsls	r3, r0, #21
    3ccc:	0d5b      	lsrs	r3, r3, #21
    3cce:	2b01      	cmp	r3, #1
    3cd0:	dc00      	bgt.n	3cd4 <__aeabi_dadd+0x2a4>
    3cd2:	e0ad      	b.n	3e30 <__aeabi_dadd+0x400>
    3cd4:	4b36      	ldr	r3, [pc, #216]	; (3db0 <__aeabi_dadd+0x380>)
    3cd6:	4298      	cmp	r0, r3
    3cd8:	d100      	bne.n	3cdc <__aeabi_dadd+0x2ac>
    3cda:	e0d1      	b.n	3e80 <__aeabi_dadd+0x450>
    3cdc:	18ba      	adds	r2, r7, r2
    3cde:	42ba      	cmp	r2, r7
    3ce0:	41bf      	sbcs	r7, r7
    3ce2:	1864      	adds	r4, r4, r1
    3ce4:	427f      	negs	r7, r7
    3ce6:	19e4      	adds	r4, r4, r7
    3ce8:	07e7      	lsls	r7, r4, #31
    3cea:	0852      	lsrs	r2, r2, #1
    3cec:	4317      	orrs	r7, r2
    3cee:	0864      	lsrs	r4, r4, #1
    3cf0:	0006      	movs	r6, r0
    3cf2:	e721      	b.n	3b38 <__aeabi_dadd+0x108>
    3cf4:	482e      	ldr	r0, [pc, #184]	; (3db0 <__aeabi_dadd+0x380>)
    3cf6:	4285      	cmp	r5, r0
    3cf8:	d100      	bne.n	3cfc <__aeabi_dadd+0x2cc>
    3cfa:	e093      	b.n	3e24 <__aeabi_dadd+0x3f4>
    3cfc:	001d      	movs	r5, r3
    3cfe:	e6d0      	b.n	3aa2 <__aeabi_dadd+0x72>
    3d00:	0029      	movs	r1, r5
    3d02:	3e1f      	subs	r6, #31
    3d04:	40f1      	lsrs	r1, r6
    3d06:	2b20      	cmp	r3, #32
    3d08:	d100      	bne.n	3d0c <__aeabi_dadd+0x2dc>
    3d0a:	e08d      	b.n	3e28 <__aeabi_dadd+0x3f8>
    3d0c:	2240      	movs	r2, #64	; 0x40
    3d0e:	1ad3      	subs	r3, r2, r3
    3d10:	409d      	lsls	r5, r3
    3d12:	432f      	orrs	r7, r5
    3d14:	1e7d      	subs	r5, r7, #1
    3d16:	41af      	sbcs	r7, r5
    3d18:	2400      	movs	r4, #0
    3d1a:	430f      	orrs	r7, r1
    3d1c:	2600      	movs	r6, #0
    3d1e:	e744      	b.n	3baa <__aeabi_dadd+0x17a>
    3d20:	002b      	movs	r3, r5
    3d22:	0008      	movs	r0, r1
    3d24:	3b20      	subs	r3, #32
    3d26:	40d8      	lsrs	r0, r3
    3d28:	0003      	movs	r3, r0
    3d2a:	2d20      	cmp	r5, #32
    3d2c:	d100      	bne.n	3d30 <__aeabi_dadd+0x300>
    3d2e:	e07d      	b.n	3e2c <__aeabi_dadd+0x3fc>
    3d30:	2040      	movs	r0, #64	; 0x40
    3d32:	1b45      	subs	r5, r0, r5
    3d34:	40a9      	lsls	r1, r5
    3d36:	430a      	orrs	r2, r1
    3d38:	1e51      	subs	r1, r2, #1
    3d3a:	418a      	sbcs	r2, r1
    3d3c:	2100      	movs	r1, #0
    3d3e:	431a      	orrs	r2, r3
    3d40:	e6c7      	b.n	3ad2 <__aeabi_dadd+0xa2>
    3d42:	2e00      	cmp	r6, #0
    3d44:	d050      	beq.n	3de8 <__aeabi_dadd+0x3b8>
    3d46:	4e1a      	ldr	r6, [pc, #104]	; (3db0 <__aeabi_dadd+0x380>)
    3d48:	42b0      	cmp	r0, r6
    3d4a:	d057      	beq.n	3dfc <__aeabi_dadd+0x3cc>
    3d4c:	2680      	movs	r6, #128	; 0x80
    3d4e:	426b      	negs	r3, r5
    3d50:	4699      	mov	r9, r3
    3d52:	0436      	lsls	r6, r6, #16
    3d54:	4334      	orrs	r4, r6
    3d56:	464b      	mov	r3, r9
    3d58:	2b38      	cmp	r3, #56	; 0x38
    3d5a:	dd00      	ble.n	3d5e <__aeabi_dadd+0x32e>
    3d5c:	e0d6      	b.n	3f0c <__aeabi_dadd+0x4dc>
    3d5e:	2b1f      	cmp	r3, #31
    3d60:	dd00      	ble.n	3d64 <__aeabi_dadd+0x334>
    3d62:	e135      	b.n	3fd0 <__aeabi_dadd+0x5a0>
    3d64:	2620      	movs	r6, #32
    3d66:	1af5      	subs	r5, r6, r3
    3d68:	0026      	movs	r6, r4
    3d6a:	40ae      	lsls	r6, r5
    3d6c:	46b2      	mov	sl, r6
    3d6e:	003e      	movs	r6, r7
    3d70:	40de      	lsrs	r6, r3
    3d72:	46ac      	mov	ip, r5
    3d74:	0035      	movs	r5, r6
    3d76:	4656      	mov	r6, sl
    3d78:	432e      	orrs	r6, r5
    3d7a:	4665      	mov	r5, ip
    3d7c:	40af      	lsls	r7, r5
    3d7e:	1e7d      	subs	r5, r7, #1
    3d80:	41af      	sbcs	r7, r5
    3d82:	40dc      	lsrs	r4, r3
    3d84:	4337      	orrs	r7, r6
    3d86:	1bd7      	subs	r7, r2, r7
    3d88:	42ba      	cmp	r2, r7
    3d8a:	4192      	sbcs	r2, r2
    3d8c:	1b0c      	subs	r4, r1, r4
    3d8e:	4252      	negs	r2, r2
    3d90:	1aa4      	subs	r4, r4, r2
    3d92:	0006      	movs	r6, r0
    3d94:	46d8      	mov	r8, fp
    3d96:	e6a3      	b.n	3ae0 <__aeabi_dadd+0xb0>
    3d98:	4664      	mov	r4, ip
    3d9a:	4667      	mov	r7, ip
    3d9c:	432c      	orrs	r4, r5
    3d9e:	d000      	beq.n	3da2 <__aeabi_dadd+0x372>
    3da0:	e6a2      	b.n	3ae8 <__aeabi_dadd+0xb8>
    3da2:	2500      	movs	r5, #0
    3da4:	2600      	movs	r6, #0
    3da6:	2700      	movs	r7, #0
    3da8:	e706      	b.n	3bb8 <__aeabi_dadd+0x188>
    3daa:	001e      	movs	r6, r3
    3dac:	e6c4      	b.n	3b38 <__aeabi_dadd+0x108>
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	000007ff 	.word	0x000007ff
    3db4:	ff7fffff 	.word	0xff7fffff
    3db8:	800fffff 	.word	0x800fffff
    3dbc:	2b1f      	cmp	r3, #31
    3dbe:	dc63      	bgt.n	3e88 <__aeabi_dadd+0x458>
    3dc0:	2020      	movs	r0, #32
    3dc2:	1ac3      	subs	r3, r0, r3
    3dc4:	0008      	movs	r0, r1
    3dc6:	4098      	lsls	r0, r3
    3dc8:	469c      	mov	ip, r3
    3dca:	4683      	mov	fp, r0
    3dcc:	4653      	mov	r3, sl
    3dce:	0010      	movs	r0, r2
    3dd0:	40d8      	lsrs	r0, r3
    3dd2:	0003      	movs	r3, r0
    3dd4:	4658      	mov	r0, fp
    3dd6:	4318      	orrs	r0, r3
    3dd8:	4663      	mov	r3, ip
    3dda:	409a      	lsls	r2, r3
    3ddc:	1e53      	subs	r3, r2, #1
    3dde:	419a      	sbcs	r2, r3
    3de0:	4653      	mov	r3, sl
    3de2:	4302      	orrs	r2, r0
    3de4:	40d9      	lsrs	r1, r3
    3de6:	e703      	b.n	3bf0 <__aeabi_dadd+0x1c0>
    3de8:	0026      	movs	r6, r4
    3dea:	433e      	orrs	r6, r7
    3dec:	d006      	beq.n	3dfc <__aeabi_dadd+0x3cc>
    3dee:	43eb      	mvns	r3, r5
    3df0:	4699      	mov	r9, r3
    3df2:	2b00      	cmp	r3, #0
    3df4:	d0c7      	beq.n	3d86 <__aeabi_dadd+0x356>
    3df6:	4e94      	ldr	r6, [pc, #592]	; (4048 <__aeabi_dadd+0x618>)
    3df8:	42b0      	cmp	r0, r6
    3dfa:	d1ac      	bne.n	3d56 <__aeabi_dadd+0x326>
    3dfc:	000c      	movs	r4, r1
    3dfe:	0017      	movs	r7, r2
    3e00:	0006      	movs	r6, r0
    3e02:	46d8      	mov	r8, fp
    3e04:	e698      	b.n	3b38 <__aeabi_dadd+0x108>
    3e06:	4b90      	ldr	r3, [pc, #576]	; (4048 <__aeabi_dadd+0x618>)
    3e08:	459a      	cmp	sl, r3
    3e0a:	d00b      	beq.n	3e24 <__aeabi_dadd+0x3f4>
    3e0c:	4682      	mov	sl, r0
    3e0e:	e6e7      	b.n	3be0 <__aeabi_dadd+0x1b0>
    3e10:	2800      	cmp	r0, #0
    3e12:	d000      	beq.n	3e16 <__aeabi_dadd+0x3e6>
    3e14:	e09e      	b.n	3f54 <__aeabi_dadd+0x524>
    3e16:	0018      	movs	r0, r3
    3e18:	4310      	orrs	r0, r2
    3e1a:	d100      	bne.n	3e1e <__aeabi_dadd+0x3ee>
    3e1c:	e0e9      	b.n	3ff2 <__aeabi_dadd+0x5c2>
    3e1e:	001c      	movs	r4, r3
    3e20:	0017      	movs	r7, r2
    3e22:	46d8      	mov	r8, fp
    3e24:	4e88      	ldr	r6, [pc, #544]	; (4048 <__aeabi_dadd+0x618>)
    3e26:	e687      	b.n	3b38 <__aeabi_dadd+0x108>
    3e28:	2500      	movs	r5, #0
    3e2a:	e772      	b.n	3d12 <__aeabi_dadd+0x2e2>
    3e2c:	2100      	movs	r1, #0
    3e2e:	e782      	b.n	3d36 <__aeabi_dadd+0x306>
    3e30:	0023      	movs	r3, r4
    3e32:	433b      	orrs	r3, r7
    3e34:	2e00      	cmp	r6, #0
    3e36:	d000      	beq.n	3e3a <__aeabi_dadd+0x40a>
    3e38:	e0ab      	b.n	3f92 <__aeabi_dadd+0x562>
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d100      	bne.n	3e40 <__aeabi_dadd+0x410>
    3e3e:	e0e7      	b.n	4010 <__aeabi_dadd+0x5e0>
    3e40:	000b      	movs	r3, r1
    3e42:	4313      	orrs	r3, r2
    3e44:	d100      	bne.n	3e48 <__aeabi_dadd+0x418>
    3e46:	e677      	b.n	3b38 <__aeabi_dadd+0x108>
    3e48:	18ba      	adds	r2, r7, r2
    3e4a:	42ba      	cmp	r2, r7
    3e4c:	41bf      	sbcs	r7, r7
    3e4e:	1864      	adds	r4, r4, r1
    3e50:	427f      	negs	r7, r7
    3e52:	19e4      	adds	r4, r4, r7
    3e54:	0223      	lsls	r3, r4, #8
    3e56:	d400      	bmi.n	3e5a <__aeabi_dadd+0x42a>
    3e58:	e0f2      	b.n	4040 <__aeabi_dadd+0x610>
    3e5a:	4b7c      	ldr	r3, [pc, #496]	; (404c <__aeabi_dadd+0x61c>)
    3e5c:	0017      	movs	r7, r2
    3e5e:	401c      	ands	r4, r3
    3e60:	0006      	movs	r6, r0
    3e62:	e669      	b.n	3b38 <__aeabi_dadd+0x108>
    3e64:	0020      	movs	r0, r4
    3e66:	4338      	orrs	r0, r7
    3e68:	2e00      	cmp	r6, #0
    3e6a:	d1d1      	bne.n	3e10 <__aeabi_dadd+0x3e0>
    3e6c:	2800      	cmp	r0, #0
    3e6e:	d15b      	bne.n	3f28 <__aeabi_dadd+0x4f8>
    3e70:	001c      	movs	r4, r3
    3e72:	4314      	orrs	r4, r2
    3e74:	d100      	bne.n	3e78 <__aeabi_dadd+0x448>
    3e76:	e0a8      	b.n	3fca <__aeabi_dadd+0x59a>
    3e78:	001c      	movs	r4, r3
    3e7a:	0017      	movs	r7, r2
    3e7c:	46d8      	mov	r8, fp
    3e7e:	e65b      	b.n	3b38 <__aeabi_dadd+0x108>
    3e80:	0006      	movs	r6, r0
    3e82:	2400      	movs	r4, #0
    3e84:	2700      	movs	r7, #0
    3e86:	e697      	b.n	3bb8 <__aeabi_dadd+0x188>
    3e88:	4650      	mov	r0, sl
    3e8a:	000b      	movs	r3, r1
    3e8c:	3820      	subs	r0, #32
    3e8e:	40c3      	lsrs	r3, r0
    3e90:	4699      	mov	r9, r3
    3e92:	4653      	mov	r3, sl
    3e94:	2b20      	cmp	r3, #32
    3e96:	d100      	bne.n	3e9a <__aeabi_dadd+0x46a>
    3e98:	e095      	b.n	3fc6 <__aeabi_dadd+0x596>
    3e9a:	2340      	movs	r3, #64	; 0x40
    3e9c:	4650      	mov	r0, sl
    3e9e:	1a1b      	subs	r3, r3, r0
    3ea0:	4099      	lsls	r1, r3
    3ea2:	430a      	orrs	r2, r1
    3ea4:	1e51      	subs	r1, r2, #1
    3ea6:	418a      	sbcs	r2, r1
    3ea8:	464b      	mov	r3, r9
    3eaa:	2100      	movs	r1, #0
    3eac:	431a      	orrs	r2, r3
    3eae:	e69f      	b.n	3bf0 <__aeabi_dadd+0x1c0>
    3eb0:	2e00      	cmp	r6, #0
    3eb2:	d130      	bne.n	3f16 <__aeabi_dadd+0x4e6>
    3eb4:	0026      	movs	r6, r4
    3eb6:	433e      	orrs	r6, r7
    3eb8:	d067      	beq.n	3f8a <__aeabi_dadd+0x55a>
    3eba:	43db      	mvns	r3, r3
    3ebc:	469a      	mov	sl, r3
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d01c      	beq.n	3efc <__aeabi_dadd+0x4cc>
    3ec2:	4e61      	ldr	r6, [pc, #388]	; (4048 <__aeabi_dadd+0x618>)
    3ec4:	42b0      	cmp	r0, r6
    3ec6:	d060      	beq.n	3f8a <__aeabi_dadd+0x55a>
    3ec8:	4653      	mov	r3, sl
    3eca:	2b38      	cmp	r3, #56	; 0x38
    3ecc:	dd00      	ble.n	3ed0 <__aeabi_dadd+0x4a0>
    3ece:	e096      	b.n	3ffe <__aeabi_dadd+0x5ce>
    3ed0:	2b1f      	cmp	r3, #31
    3ed2:	dd00      	ble.n	3ed6 <__aeabi_dadd+0x4a6>
    3ed4:	e09f      	b.n	4016 <__aeabi_dadd+0x5e6>
    3ed6:	2620      	movs	r6, #32
    3ed8:	1af3      	subs	r3, r6, r3
    3eda:	0026      	movs	r6, r4
    3edc:	409e      	lsls	r6, r3
    3ede:	469c      	mov	ip, r3
    3ee0:	46b3      	mov	fp, r6
    3ee2:	4653      	mov	r3, sl
    3ee4:	003e      	movs	r6, r7
    3ee6:	40de      	lsrs	r6, r3
    3ee8:	0033      	movs	r3, r6
    3eea:	465e      	mov	r6, fp
    3eec:	431e      	orrs	r6, r3
    3eee:	4663      	mov	r3, ip
    3ef0:	409f      	lsls	r7, r3
    3ef2:	1e7b      	subs	r3, r7, #1
    3ef4:	419f      	sbcs	r7, r3
    3ef6:	4653      	mov	r3, sl
    3ef8:	40dc      	lsrs	r4, r3
    3efa:	4337      	orrs	r7, r6
    3efc:	18bf      	adds	r7, r7, r2
    3efe:	4297      	cmp	r7, r2
    3f00:	4192      	sbcs	r2, r2
    3f02:	1864      	adds	r4, r4, r1
    3f04:	4252      	negs	r2, r2
    3f06:	18a4      	adds	r4, r4, r2
    3f08:	0006      	movs	r6, r0
    3f0a:	e678      	b.n	3bfe <__aeabi_dadd+0x1ce>
    3f0c:	4327      	orrs	r7, r4
    3f0e:	1e7c      	subs	r4, r7, #1
    3f10:	41a7      	sbcs	r7, r4
    3f12:	2400      	movs	r4, #0
    3f14:	e737      	b.n	3d86 <__aeabi_dadd+0x356>
    3f16:	4e4c      	ldr	r6, [pc, #304]	; (4048 <__aeabi_dadd+0x618>)
    3f18:	42b0      	cmp	r0, r6
    3f1a:	d036      	beq.n	3f8a <__aeabi_dadd+0x55a>
    3f1c:	2680      	movs	r6, #128	; 0x80
    3f1e:	425b      	negs	r3, r3
    3f20:	0436      	lsls	r6, r6, #16
    3f22:	469a      	mov	sl, r3
    3f24:	4334      	orrs	r4, r6
    3f26:	e7cf      	b.n	3ec8 <__aeabi_dadd+0x498>
    3f28:	0018      	movs	r0, r3
    3f2a:	4310      	orrs	r0, r2
    3f2c:	d100      	bne.n	3f30 <__aeabi_dadd+0x500>
    3f2e:	e603      	b.n	3b38 <__aeabi_dadd+0x108>
    3f30:	1ab8      	subs	r0, r7, r2
    3f32:	4684      	mov	ip, r0
    3f34:	4567      	cmp	r7, ip
    3f36:	41ad      	sbcs	r5, r5
    3f38:	1ae0      	subs	r0, r4, r3
    3f3a:	426d      	negs	r5, r5
    3f3c:	1b40      	subs	r0, r0, r5
    3f3e:	0205      	lsls	r5, r0, #8
    3f40:	d400      	bmi.n	3f44 <__aeabi_dadd+0x514>
    3f42:	e62c      	b.n	3b9e <__aeabi_dadd+0x16e>
    3f44:	1bd7      	subs	r7, r2, r7
    3f46:	42ba      	cmp	r2, r7
    3f48:	4192      	sbcs	r2, r2
    3f4a:	1b1c      	subs	r4, r3, r4
    3f4c:	4252      	negs	r2, r2
    3f4e:	1aa4      	subs	r4, r4, r2
    3f50:	46d8      	mov	r8, fp
    3f52:	e5f1      	b.n	3b38 <__aeabi_dadd+0x108>
    3f54:	0018      	movs	r0, r3
    3f56:	4310      	orrs	r0, r2
    3f58:	d100      	bne.n	3f5c <__aeabi_dadd+0x52c>
    3f5a:	e763      	b.n	3e24 <__aeabi_dadd+0x3f4>
    3f5c:	08f8      	lsrs	r0, r7, #3
    3f5e:	0767      	lsls	r7, r4, #29
    3f60:	4307      	orrs	r7, r0
    3f62:	2080      	movs	r0, #128	; 0x80
    3f64:	08e4      	lsrs	r4, r4, #3
    3f66:	0300      	lsls	r0, r0, #12
    3f68:	4204      	tst	r4, r0
    3f6a:	d008      	beq.n	3f7e <__aeabi_dadd+0x54e>
    3f6c:	08dd      	lsrs	r5, r3, #3
    3f6e:	4205      	tst	r5, r0
    3f70:	d105      	bne.n	3f7e <__aeabi_dadd+0x54e>
    3f72:	08d2      	lsrs	r2, r2, #3
    3f74:	0759      	lsls	r1, r3, #29
    3f76:	4311      	orrs	r1, r2
    3f78:	000f      	movs	r7, r1
    3f7a:	002c      	movs	r4, r5
    3f7c:	46d8      	mov	r8, fp
    3f7e:	0f7b      	lsrs	r3, r7, #29
    3f80:	00e4      	lsls	r4, r4, #3
    3f82:	431c      	orrs	r4, r3
    3f84:	00ff      	lsls	r7, r7, #3
    3f86:	4e30      	ldr	r6, [pc, #192]	; (4048 <__aeabi_dadd+0x618>)
    3f88:	e5d6      	b.n	3b38 <__aeabi_dadd+0x108>
    3f8a:	000c      	movs	r4, r1
    3f8c:	0017      	movs	r7, r2
    3f8e:	0006      	movs	r6, r0
    3f90:	e5d2      	b.n	3b38 <__aeabi_dadd+0x108>
    3f92:	2b00      	cmp	r3, #0
    3f94:	d038      	beq.n	4008 <__aeabi_dadd+0x5d8>
    3f96:	000b      	movs	r3, r1
    3f98:	4313      	orrs	r3, r2
    3f9a:	d100      	bne.n	3f9e <__aeabi_dadd+0x56e>
    3f9c:	e742      	b.n	3e24 <__aeabi_dadd+0x3f4>
    3f9e:	08f8      	lsrs	r0, r7, #3
    3fa0:	0767      	lsls	r7, r4, #29
    3fa2:	4307      	orrs	r7, r0
    3fa4:	2080      	movs	r0, #128	; 0x80
    3fa6:	08e4      	lsrs	r4, r4, #3
    3fa8:	0300      	lsls	r0, r0, #12
    3faa:	4204      	tst	r4, r0
    3fac:	d0e7      	beq.n	3f7e <__aeabi_dadd+0x54e>
    3fae:	08cb      	lsrs	r3, r1, #3
    3fb0:	4203      	tst	r3, r0
    3fb2:	d1e4      	bne.n	3f7e <__aeabi_dadd+0x54e>
    3fb4:	08d2      	lsrs	r2, r2, #3
    3fb6:	0749      	lsls	r1, r1, #29
    3fb8:	4311      	orrs	r1, r2
    3fba:	000f      	movs	r7, r1
    3fbc:	001c      	movs	r4, r3
    3fbe:	e7de      	b.n	3f7e <__aeabi_dadd+0x54e>
    3fc0:	2700      	movs	r7, #0
    3fc2:	2400      	movs	r4, #0
    3fc4:	e5d5      	b.n	3b72 <__aeabi_dadd+0x142>
    3fc6:	2100      	movs	r1, #0
    3fc8:	e76b      	b.n	3ea2 <__aeabi_dadd+0x472>
    3fca:	2500      	movs	r5, #0
    3fcc:	2700      	movs	r7, #0
    3fce:	e5f3      	b.n	3bb8 <__aeabi_dadd+0x188>
    3fd0:	464e      	mov	r6, r9
    3fd2:	0025      	movs	r5, r4
    3fd4:	3e20      	subs	r6, #32
    3fd6:	40f5      	lsrs	r5, r6
    3fd8:	464b      	mov	r3, r9
    3fda:	002e      	movs	r6, r5
    3fdc:	2b20      	cmp	r3, #32
    3fde:	d02d      	beq.n	403c <__aeabi_dadd+0x60c>
    3fe0:	2540      	movs	r5, #64	; 0x40
    3fe2:	1aed      	subs	r5, r5, r3
    3fe4:	40ac      	lsls	r4, r5
    3fe6:	4327      	orrs	r7, r4
    3fe8:	1e7c      	subs	r4, r7, #1
    3fea:	41a7      	sbcs	r7, r4
    3fec:	2400      	movs	r4, #0
    3fee:	4337      	orrs	r7, r6
    3ff0:	e6c9      	b.n	3d86 <__aeabi_dadd+0x356>
    3ff2:	2480      	movs	r4, #128	; 0x80
    3ff4:	2500      	movs	r5, #0
    3ff6:	0324      	lsls	r4, r4, #12
    3ff8:	4e13      	ldr	r6, [pc, #76]	; (4048 <__aeabi_dadd+0x618>)
    3ffa:	2700      	movs	r7, #0
    3ffc:	e5dc      	b.n	3bb8 <__aeabi_dadd+0x188>
    3ffe:	4327      	orrs	r7, r4
    4000:	1e7c      	subs	r4, r7, #1
    4002:	41a7      	sbcs	r7, r4
    4004:	2400      	movs	r4, #0
    4006:	e779      	b.n	3efc <__aeabi_dadd+0x4cc>
    4008:	000c      	movs	r4, r1
    400a:	0017      	movs	r7, r2
    400c:	4e0e      	ldr	r6, [pc, #56]	; (4048 <__aeabi_dadd+0x618>)
    400e:	e593      	b.n	3b38 <__aeabi_dadd+0x108>
    4010:	000c      	movs	r4, r1
    4012:	0017      	movs	r7, r2
    4014:	e590      	b.n	3b38 <__aeabi_dadd+0x108>
    4016:	4656      	mov	r6, sl
    4018:	0023      	movs	r3, r4
    401a:	3e20      	subs	r6, #32
    401c:	40f3      	lsrs	r3, r6
    401e:	4699      	mov	r9, r3
    4020:	4653      	mov	r3, sl
    4022:	2b20      	cmp	r3, #32
    4024:	d00e      	beq.n	4044 <__aeabi_dadd+0x614>
    4026:	2340      	movs	r3, #64	; 0x40
    4028:	4656      	mov	r6, sl
    402a:	1b9b      	subs	r3, r3, r6
    402c:	409c      	lsls	r4, r3
    402e:	4327      	orrs	r7, r4
    4030:	1e7c      	subs	r4, r7, #1
    4032:	41a7      	sbcs	r7, r4
    4034:	464b      	mov	r3, r9
    4036:	2400      	movs	r4, #0
    4038:	431f      	orrs	r7, r3
    403a:	e75f      	b.n	3efc <__aeabi_dadd+0x4cc>
    403c:	2400      	movs	r4, #0
    403e:	e7d2      	b.n	3fe6 <__aeabi_dadd+0x5b6>
    4040:	0017      	movs	r7, r2
    4042:	e5b2      	b.n	3baa <__aeabi_dadd+0x17a>
    4044:	2400      	movs	r4, #0
    4046:	e7f2      	b.n	402e <__aeabi_dadd+0x5fe>
    4048:	000007ff 	.word	0x000007ff
    404c:	ff7fffff 	.word	0xff7fffff

00004050 <__aeabi_ddiv>:
    4050:	b5f0      	push	{r4, r5, r6, r7, lr}
    4052:	4657      	mov	r7, sl
    4054:	4645      	mov	r5, r8
    4056:	46de      	mov	lr, fp
    4058:	464e      	mov	r6, r9
    405a:	b5e0      	push	{r5, r6, r7, lr}
    405c:	004c      	lsls	r4, r1, #1
    405e:	030e      	lsls	r6, r1, #12
    4060:	b087      	sub	sp, #28
    4062:	4683      	mov	fp, r0
    4064:	4692      	mov	sl, r2
    4066:	001d      	movs	r5, r3
    4068:	4680      	mov	r8, r0
    406a:	0b36      	lsrs	r6, r6, #12
    406c:	0d64      	lsrs	r4, r4, #21
    406e:	0fcf      	lsrs	r7, r1, #31
    4070:	2c00      	cmp	r4, #0
    4072:	d04f      	beq.n	4114 <__aeabi_ddiv+0xc4>
    4074:	4b6f      	ldr	r3, [pc, #444]	; (4234 <__aeabi_ddiv+0x1e4>)
    4076:	429c      	cmp	r4, r3
    4078:	d035      	beq.n	40e6 <__aeabi_ddiv+0x96>
    407a:	2380      	movs	r3, #128	; 0x80
    407c:	0f42      	lsrs	r2, r0, #29
    407e:	041b      	lsls	r3, r3, #16
    4080:	00f6      	lsls	r6, r6, #3
    4082:	4313      	orrs	r3, r2
    4084:	4333      	orrs	r3, r6
    4086:	4699      	mov	r9, r3
    4088:	00c3      	lsls	r3, r0, #3
    408a:	4698      	mov	r8, r3
    408c:	4b6a      	ldr	r3, [pc, #424]	; (4238 <__aeabi_ddiv+0x1e8>)
    408e:	2600      	movs	r6, #0
    4090:	469c      	mov	ip, r3
    4092:	2300      	movs	r3, #0
    4094:	4464      	add	r4, ip
    4096:	9303      	str	r3, [sp, #12]
    4098:	032b      	lsls	r3, r5, #12
    409a:	0b1b      	lsrs	r3, r3, #12
    409c:	469b      	mov	fp, r3
    409e:	006b      	lsls	r3, r5, #1
    40a0:	0fed      	lsrs	r5, r5, #31
    40a2:	4650      	mov	r0, sl
    40a4:	0d5b      	lsrs	r3, r3, #21
    40a6:	9501      	str	r5, [sp, #4]
    40a8:	d05e      	beq.n	4168 <__aeabi_ddiv+0x118>
    40aa:	4a62      	ldr	r2, [pc, #392]	; (4234 <__aeabi_ddiv+0x1e4>)
    40ac:	4293      	cmp	r3, r2
    40ae:	d053      	beq.n	4158 <__aeabi_ddiv+0x108>
    40b0:	465a      	mov	r2, fp
    40b2:	00d1      	lsls	r1, r2, #3
    40b4:	2280      	movs	r2, #128	; 0x80
    40b6:	0f40      	lsrs	r0, r0, #29
    40b8:	0412      	lsls	r2, r2, #16
    40ba:	4302      	orrs	r2, r0
    40bc:	430a      	orrs	r2, r1
    40be:	4693      	mov	fp, r2
    40c0:	4652      	mov	r2, sl
    40c2:	00d1      	lsls	r1, r2, #3
    40c4:	4a5c      	ldr	r2, [pc, #368]	; (4238 <__aeabi_ddiv+0x1e8>)
    40c6:	4694      	mov	ip, r2
    40c8:	2200      	movs	r2, #0
    40ca:	4463      	add	r3, ip
    40cc:	0038      	movs	r0, r7
    40ce:	4068      	eors	r0, r5
    40d0:	4684      	mov	ip, r0
    40d2:	9002      	str	r0, [sp, #8]
    40d4:	1ae4      	subs	r4, r4, r3
    40d6:	4316      	orrs	r6, r2
    40d8:	2e0f      	cmp	r6, #15
    40da:	d900      	bls.n	40de <__aeabi_ddiv+0x8e>
    40dc:	e0b4      	b.n	4248 <__aeabi_ddiv+0x1f8>
    40de:	4b57      	ldr	r3, [pc, #348]	; (423c <__aeabi_ddiv+0x1ec>)
    40e0:	00b6      	lsls	r6, r6, #2
    40e2:	599b      	ldr	r3, [r3, r6]
    40e4:	469f      	mov	pc, r3
    40e6:	0003      	movs	r3, r0
    40e8:	4333      	orrs	r3, r6
    40ea:	4699      	mov	r9, r3
    40ec:	d16c      	bne.n	41c8 <__aeabi_ddiv+0x178>
    40ee:	2300      	movs	r3, #0
    40f0:	4698      	mov	r8, r3
    40f2:	3302      	adds	r3, #2
    40f4:	2608      	movs	r6, #8
    40f6:	9303      	str	r3, [sp, #12]
    40f8:	e7ce      	b.n	4098 <__aeabi_ddiv+0x48>
    40fa:	46cb      	mov	fp, r9
    40fc:	4641      	mov	r1, r8
    40fe:	9a03      	ldr	r2, [sp, #12]
    4100:	9701      	str	r7, [sp, #4]
    4102:	2a02      	cmp	r2, #2
    4104:	d165      	bne.n	41d2 <__aeabi_ddiv+0x182>
    4106:	9b01      	ldr	r3, [sp, #4]
    4108:	4c4a      	ldr	r4, [pc, #296]	; (4234 <__aeabi_ddiv+0x1e4>)
    410a:	469c      	mov	ip, r3
    410c:	2300      	movs	r3, #0
    410e:	2200      	movs	r2, #0
    4110:	4698      	mov	r8, r3
    4112:	e06b      	b.n	41ec <__aeabi_ddiv+0x19c>
    4114:	0003      	movs	r3, r0
    4116:	4333      	orrs	r3, r6
    4118:	4699      	mov	r9, r3
    411a:	d04e      	beq.n	41ba <__aeabi_ddiv+0x16a>
    411c:	2e00      	cmp	r6, #0
    411e:	d100      	bne.n	4122 <__aeabi_ddiv+0xd2>
    4120:	e1bc      	b.n	449c <__aeabi_ddiv+0x44c>
    4122:	0030      	movs	r0, r6
    4124:	f001 f8ca 	bl	52bc <__clzsi2>
    4128:	0003      	movs	r3, r0
    412a:	3b0b      	subs	r3, #11
    412c:	2b1c      	cmp	r3, #28
    412e:	dd00      	ble.n	4132 <__aeabi_ddiv+0xe2>
    4130:	e1ac      	b.n	448c <__aeabi_ddiv+0x43c>
    4132:	221d      	movs	r2, #29
    4134:	1ad3      	subs	r3, r2, r3
    4136:	465a      	mov	r2, fp
    4138:	0001      	movs	r1, r0
    413a:	40da      	lsrs	r2, r3
    413c:	3908      	subs	r1, #8
    413e:	408e      	lsls	r6, r1
    4140:	0013      	movs	r3, r2
    4142:	4333      	orrs	r3, r6
    4144:	4699      	mov	r9, r3
    4146:	465b      	mov	r3, fp
    4148:	408b      	lsls	r3, r1
    414a:	4698      	mov	r8, r3
    414c:	2300      	movs	r3, #0
    414e:	4c3c      	ldr	r4, [pc, #240]	; (4240 <__aeabi_ddiv+0x1f0>)
    4150:	2600      	movs	r6, #0
    4152:	1a24      	subs	r4, r4, r0
    4154:	9303      	str	r3, [sp, #12]
    4156:	e79f      	b.n	4098 <__aeabi_ddiv+0x48>
    4158:	4651      	mov	r1, sl
    415a:	465a      	mov	r2, fp
    415c:	4311      	orrs	r1, r2
    415e:	d129      	bne.n	41b4 <__aeabi_ddiv+0x164>
    4160:	2200      	movs	r2, #0
    4162:	4693      	mov	fp, r2
    4164:	3202      	adds	r2, #2
    4166:	e7b1      	b.n	40cc <__aeabi_ddiv+0x7c>
    4168:	4659      	mov	r1, fp
    416a:	4301      	orrs	r1, r0
    416c:	d01e      	beq.n	41ac <__aeabi_ddiv+0x15c>
    416e:	465b      	mov	r3, fp
    4170:	2b00      	cmp	r3, #0
    4172:	d100      	bne.n	4176 <__aeabi_ddiv+0x126>
    4174:	e19e      	b.n	44b4 <__aeabi_ddiv+0x464>
    4176:	4658      	mov	r0, fp
    4178:	f001 f8a0 	bl	52bc <__clzsi2>
    417c:	0003      	movs	r3, r0
    417e:	3b0b      	subs	r3, #11
    4180:	2b1c      	cmp	r3, #28
    4182:	dd00      	ble.n	4186 <__aeabi_ddiv+0x136>
    4184:	e18f      	b.n	44a6 <__aeabi_ddiv+0x456>
    4186:	0002      	movs	r2, r0
    4188:	4659      	mov	r1, fp
    418a:	3a08      	subs	r2, #8
    418c:	4091      	lsls	r1, r2
    418e:	468b      	mov	fp, r1
    4190:	211d      	movs	r1, #29
    4192:	1acb      	subs	r3, r1, r3
    4194:	4651      	mov	r1, sl
    4196:	40d9      	lsrs	r1, r3
    4198:	000b      	movs	r3, r1
    419a:	4659      	mov	r1, fp
    419c:	430b      	orrs	r3, r1
    419e:	4651      	mov	r1, sl
    41a0:	469b      	mov	fp, r3
    41a2:	4091      	lsls	r1, r2
    41a4:	4b26      	ldr	r3, [pc, #152]	; (4240 <__aeabi_ddiv+0x1f0>)
    41a6:	2200      	movs	r2, #0
    41a8:	1a1b      	subs	r3, r3, r0
    41aa:	e78f      	b.n	40cc <__aeabi_ddiv+0x7c>
    41ac:	2300      	movs	r3, #0
    41ae:	2201      	movs	r2, #1
    41b0:	469b      	mov	fp, r3
    41b2:	e78b      	b.n	40cc <__aeabi_ddiv+0x7c>
    41b4:	4651      	mov	r1, sl
    41b6:	2203      	movs	r2, #3
    41b8:	e788      	b.n	40cc <__aeabi_ddiv+0x7c>
    41ba:	2300      	movs	r3, #0
    41bc:	4698      	mov	r8, r3
    41be:	3301      	adds	r3, #1
    41c0:	2604      	movs	r6, #4
    41c2:	2400      	movs	r4, #0
    41c4:	9303      	str	r3, [sp, #12]
    41c6:	e767      	b.n	4098 <__aeabi_ddiv+0x48>
    41c8:	2303      	movs	r3, #3
    41ca:	46b1      	mov	r9, r6
    41cc:	9303      	str	r3, [sp, #12]
    41ce:	260c      	movs	r6, #12
    41d0:	e762      	b.n	4098 <__aeabi_ddiv+0x48>
    41d2:	2a03      	cmp	r2, #3
    41d4:	d100      	bne.n	41d8 <__aeabi_ddiv+0x188>
    41d6:	e25c      	b.n	4692 <__aeabi_ddiv+0x642>
    41d8:	9b01      	ldr	r3, [sp, #4]
    41da:	2a01      	cmp	r2, #1
    41dc:	d000      	beq.n	41e0 <__aeabi_ddiv+0x190>
    41de:	e1e4      	b.n	45aa <__aeabi_ddiv+0x55a>
    41e0:	4013      	ands	r3, r2
    41e2:	469c      	mov	ip, r3
    41e4:	2300      	movs	r3, #0
    41e6:	2400      	movs	r4, #0
    41e8:	2200      	movs	r2, #0
    41ea:	4698      	mov	r8, r3
    41ec:	2100      	movs	r1, #0
    41ee:	0312      	lsls	r2, r2, #12
    41f0:	0b13      	lsrs	r3, r2, #12
    41f2:	0d0a      	lsrs	r2, r1, #20
    41f4:	0512      	lsls	r2, r2, #20
    41f6:	431a      	orrs	r2, r3
    41f8:	0523      	lsls	r3, r4, #20
    41fa:	4c12      	ldr	r4, [pc, #72]	; (4244 <__aeabi_ddiv+0x1f4>)
    41fc:	4640      	mov	r0, r8
    41fe:	4022      	ands	r2, r4
    4200:	4313      	orrs	r3, r2
    4202:	4662      	mov	r2, ip
    4204:	005b      	lsls	r3, r3, #1
    4206:	07d2      	lsls	r2, r2, #31
    4208:	085b      	lsrs	r3, r3, #1
    420a:	4313      	orrs	r3, r2
    420c:	0019      	movs	r1, r3
    420e:	b007      	add	sp, #28
    4210:	bc3c      	pop	{r2, r3, r4, r5}
    4212:	4690      	mov	r8, r2
    4214:	4699      	mov	r9, r3
    4216:	46a2      	mov	sl, r4
    4218:	46ab      	mov	fp, r5
    421a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    421c:	2300      	movs	r3, #0
    421e:	2280      	movs	r2, #128	; 0x80
    4220:	469c      	mov	ip, r3
    4222:	0312      	lsls	r2, r2, #12
    4224:	4698      	mov	r8, r3
    4226:	4c03      	ldr	r4, [pc, #12]	; (4234 <__aeabi_ddiv+0x1e4>)
    4228:	e7e0      	b.n	41ec <__aeabi_ddiv+0x19c>
    422a:	2300      	movs	r3, #0
    422c:	4c01      	ldr	r4, [pc, #4]	; (4234 <__aeabi_ddiv+0x1e4>)
    422e:	2200      	movs	r2, #0
    4230:	4698      	mov	r8, r3
    4232:	e7db      	b.n	41ec <__aeabi_ddiv+0x19c>
    4234:	000007ff 	.word	0x000007ff
    4238:	fffffc01 	.word	0xfffffc01
    423c:	00005644 	.word	0x00005644
    4240:	fffffc0d 	.word	0xfffffc0d
    4244:	800fffff 	.word	0x800fffff
    4248:	45d9      	cmp	r9, fp
    424a:	d900      	bls.n	424e <__aeabi_ddiv+0x1fe>
    424c:	e139      	b.n	44c2 <__aeabi_ddiv+0x472>
    424e:	d100      	bne.n	4252 <__aeabi_ddiv+0x202>
    4250:	e134      	b.n	44bc <__aeabi_ddiv+0x46c>
    4252:	2300      	movs	r3, #0
    4254:	4646      	mov	r6, r8
    4256:	464d      	mov	r5, r9
    4258:	469a      	mov	sl, r3
    425a:	3c01      	subs	r4, #1
    425c:	465b      	mov	r3, fp
    425e:	0e0a      	lsrs	r2, r1, #24
    4260:	021b      	lsls	r3, r3, #8
    4262:	431a      	orrs	r2, r3
    4264:	020b      	lsls	r3, r1, #8
    4266:	0c17      	lsrs	r7, r2, #16
    4268:	9303      	str	r3, [sp, #12]
    426a:	0413      	lsls	r3, r2, #16
    426c:	0c1b      	lsrs	r3, r3, #16
    426e:	0039      	movs	r1, r7
    4270:	0028      	movs	r0, r5
    4272:	4690      	mov	r8, r2
    4274:	9301      	str	r3, [sp, #4]
    4276:	f7ff fb25 	bl	38c4 <__udivsi3>
    427a:	0002      	movs	r2, r0
    427c:	9b01      	ldr	r3, [sp, #4]
    427e:	4683      	mov	fp, r0
    4280:	435a      	muls	r2, r3
    4282:	0028      	movs	r0, r5
    4284:	0039      	movs	r1, r7
    4286:	4691      	mov	r9, r2
    4288:	f7ff fba2 	bl	39d0 <__aeabi_uidivmod>
    428c:	0c35      	lsrs	r5, r6, #16
    428e:	0409      	lsls	r1, r1, #16
    4290:	430d      	orrs	r5, r1
    4292:	45a9      	cmp	r9, r5
    4294:	d90d      	bls.n	42b2 <__aeabi_ddiv+0x262>
    4296:	465b      	mov	r3, fp
    4298:	4445      	add	r5, r8
    429a:	3b01      	subs	r3, #1
    429c:	45a8      	cmp	r8, r5
    429e:	d900      	bls.n	42a2 <__aeabi_ddiv+0x252>
    42a0:	e13a      	b.n	4518 <__aeabi_ddiv+0x4c8>
    42a2:	45a9      	cmp	r9, r5
    42a4:	d800      	bhi.n	42a8 <__aeabi_ddiv+0x258>
    42a6:	e137      	b.n	4518 <__aeabi_ddiv+0x4c8>
    42a8:	2302      	movs	r3, #2
    42aa:	425b      	negs	r3, r3
    42ac:	469c      	mov	ip, r3
    42ae:	4445      	add	r5, r8
    42b0:	44e3      	add	fp, ip
    42b2:	464b      	mov	r3, r9
    42b4:	1aeb      	subs	r3, r5, r3
    42b6:	0039      	movs	r1, r7
    42b8:	0018      	movs	r0, r3
    42ba:	9304      	str	r3, [sp, #16]
    42bc:	f7ff fb02 	bl	38c4 <__udivsi3>
    42c0:	9b01      	ldr	r3, [sp, #4]
    42c2:	0005      	movs	r5, r0
    42c4:	4343      	muls	r3, r0
    42c6:	0039      	movs	r1, r7
    42c8:	9804      	ldr	r0, [sp, #16]
    42ca:	4699      	mov	r9, r3
    42cc:	f7ff fb80 	bl	39d0 <__aeabi_uidivmod>
    42d0:	0433      	lsls	r3, r6, #16
    42d2:	0409      	lsls	r1, r1, #16
    42d4:	0c1b      	lsrs	r3, r3, #16
    42d6:	430b      	orrs	r3, r1
    42d8:	4599      	cmp	r9, r3
    42da:	d909      	bls.n	42f0 <__aeabi_ddiv+0x2a0>
    42dc:	4443      	add	r3, r8
    42de:	1e6a      	subs	r2, r5, #1
    42e0:	4598      	cmp	r8, r3
    42e2:	d900      	bls.n	42e6 <__aeabi_ddiv+0x296>
    42e4:	e11a      	b.n	451c <__aeabi_ddiv+0x4cc>
    42e6:	4599      	cmp	r9, r3
    42e8:	d800      	bhi.n	42ec <__aeabi_ddiv+0x29c>
    42ea:	e117      	b.n	451c <__aeabi_ddiv+0x4cc>
    42ec:	3d02      	subs	r5, #2
    42ee:	4443      	add	r3, r8
    42f0:	464a      	mov	r2, r9
    42f2:	1a9b      	subs	r3, r3, r2
    42f4:	465a      	mov	r2, fp
    42f6:	0412      	lsls	r2, r2, #16
    42f8:	432a      	orrs	r2, r5
    42fa:	9903      	ldr	r1, [sp, #12]
    42fc:	4693      	mov	fp, r2
    42fe:	0c10      	lsrs	r0, r2, #16
    4300:	0c0a      	lsrs	r2, r1, #16
    4302:	4691      	mov	r9, r2
    4304:	0409      	lsls	r1, r1, #16
    4306:	465a      	mov	r2, fp
    4308:	0c09      	lsrs	r1, r1, #16
    430a:	464e      	mov	r6, r9
    430c:	000d      	movs	r5, r1
    430e:	0412      	lsls	r2, r2, #16
    4310:	0c12      	lsrs	r2, r2, #16
    4312:	4345      	muls	r5, r0
    4314:	9105      	str	r1, [sp, #20]
    4316:	4351      	muls	r1, r2
    4318:	4372      	muls	r2, r6
    431a:	4370      	muls	r0, r6
    431c:	1952      	adds	r2, r2, r5
    431e:	0c0e      	lsrs	r6, r1, #16
    4320:	18b2      	adds	r2, r6, r2
    4322:	4295      	cmp	r5, r2
    4324:	d903      	bls.n	432e <__aeabi_ddiv+0x2de>
    4326:	2580      	movs	r5, #128	; 0x80
    4328:	026d      	lsls	r5, r5, #9
    432a:	46ac      	mov	ip, r5
    432c:	4460      	add	r0, ip
    432e:	0c15      	lsrs	r5, r2, #16
    4330:	0409      	lsls	r1, r1, #16
    4332:	0412      	lsls	r2, r2, #16
    4334:	0c09      	lsrs	r1, r1, #16
    4336:	1828      	adds	r0, r5, r0
    4338:	1852      	adds	r2, r2, r1
    433a:	4283      	cmp	r3, r0
    433c:	d200      	bcs.n	4340 <__aeabi_ddiv+0x2f0>
    433e:	e0ce      	b.n	44de <__aeabi_ddiv+0x48e>
    4340:	d100      	bne.n	4344 <__aeabi_ddiv+0x2f4>
    4342:	e0c8      	b.n	44d6 <__aeabi_ddiv+0x486>
    4344:	1a1d      	subs	r5, r3, r0
    4346:	4653      	mov	r3, sl
    4348:	1a9e      	subs	r6, r3, r2
    434a:	45b2      	cmp	sl, r6
    434c:	4192      	sbcs	r2, r2
    434e:	4252      	negs	r2, r2
    4350:	1aab      	subs	r3, r5, r2
    4352:	469a      	mov	sl, r3
    4354:	4598      	cmp	r8, r3
    4356:	d100      	bne.n	435a <__aeabi_ddiv+0x30a>
    4358:	e117      	b.n	458a <__aeabi_ddiv+0x53a>
    435a:	0039      	movs	r1, r7
    435c:	0018      	movs	r0, r3
    435e:	f7ff fab1 	bl	38c4 <__udivsi3>
    4362:	9b01      	ldr	r3, [sp, #4]
    4364:	0005      	movs	r5, r0
    4366:	4343      	muls	r3, r0
    4368:	0039      	movs	r1, r7
    436a:	4650      	mov	r0, sl
    436c:	9304      	str	r3, [sp, #16]
    436e:	f7ff fb2f 	bl	39d0 <__aeabi_uidivmod>
    4372:	9804      	ldr	r0, [sp, #16]
    4374:	040b      	lsls	r3, r1, #16
    4376:	0c31      	lsrs	r1, r6, #16
    4378:	4319      	orrs	r1, r3
    437a:	4288      	cmp	r0, r1
    437c:	d909      	bls.n	4392 <__aeabi_ddiv+0x342>
    437e:	4441      	add	r1, r8
    4380:	1e6b      	subs	r3, r5, #1
    4382:	4588      	cmp	r8, r1
    4384:	d900      	bls.n	4388 <__aeabi_ddiv+0x338>
    4386:	e107      	b.n	4598 <__aeabi_ddiv+0x548>
    4388:	4288      	cmp	r0, r1
    438a:	d800      	bhi.n	438e <__aeabi_ddiv+0x33e>
    438c:	e104      	b.n	4598 <__aeabi_ddiv+0x548>
    438e:	3d02      	subs	r5, #2
    4390:	4441      	add	r1, r8
    4392:	9b04      	ldr	r3, [sp, #16]
    4394:	1acb      	subs	r3, r1, r3
    4396:	0018      	movs	r0, r3
    4398:	0039      	movs	r1, r7
    439a:	9304      	str	r3, [sp, #16]
    439c:	f7ff fa92 	bl	38c4 <__udivsi3>
    43a0:	9b01      	ldr	r3, [sp, #4]
    43a2:	4682      	mov	sl, r0
    43a4:	4343      	muls	r3, r0
    43a6:	0039      	movs	r1, r7
    43a8:	9804      	ldr	r0, [sp, #16]
    43aa:	9301      	str	r3, [sp, #4]
    43ac:	f7ff fb10 	bl	39d0 <__aeabi_uidivmod>
    43b0:	9801      	ldr	r0, [sp, #4]
    43b2:	040b      	lsls	r3, r1, #16
    43b4:	0431      	lsls	r1, r6, #16
    43b6:	0c09      	lsrs	r1, r1, #16
    43b8:	4319      	orrs	r1, r3
    43ba:	4288      	cmp	r0, r1
    43bc:	d90d      	bls.n	43da <__aeabi_ddiv+0x38a>
    43be:	4653      	mov	r3, sl
    43c0:	4441      	add	r1, r8
    43c2:	3b01      	subs	r3, #1
    43c4:	4588      	cmp	r8, r1
    43c6:	d900      	bls.n	43ca <__aeabi_ddiv+0x37a>
    43c8:	e0e8      	b.n	459c <__aeabi_ddiv+0x54c>
    43ca:	4288      	cmp	r0, r1
    43cc:	d800      	bhi.n	43d0 <__aeabi_ddiv+0x380>
    43ce:	e0e5      	b.n	459c <__aeabi_ddiv+0x54c>
    43d0:	2302      	movs	r3, #2
    43d2:	425b      	negs	r3, r3
    43d4:	469c      	mov	ip, r3
    43d6:	4441      	add	r1, r8
    43d8:	44e2      	add	sl, ip
    43da:	9b01      	ldr	r3, [sp, #4]
    43dc:	042d      	lsls	r5, r5, #16
    43de:	1ace      	subs	r6, r1, r3
    43e0:	4651      	mov	r1, sl
    43e2:	4329      	orrs	r1, r5
    43e4:	9d05      	ldr	r5, [sp, #20]
    43e6:	464f      	mov	r7, r9
    43e8:	002a      	movs	r2, r5
    43ea:	040b      	lsls	r3, r1, #16
    43ec:	0c08      	lsrs	r0, r1, #16
    43ee:	0c1b      	lsrs	r3, r3, #16
    43f0:	435a      	muls	r2, r3
    43f2:	4345      	muls	r5, r0
    43f4:	437b      	muls	r3, r7
    43f6:	4378      	muls	r0, r7
    43f8:	195b      	adds	r3, r3, r5
    43fa:	0c17      	lsrs	r7, r2, #16
    43fc:	18fb      	adds	r3, r7, r3
    43fe:	429d      	cmp	r5, r3
    4400:	d903      	bls.n	440a <__aeabi_ddiv+0x3ba>
    4402:	2580      	movs	r5, #128	; 0x80
    4404:	026d      	lsls	r5, r5, #9
    4406:	46ac      	mov	ip, r5
    4408:	4460      	add	r0, ip
    440a:	0c1d      	lsrs	r5, r3, #16
    440c:	0412      	lsls	r2, r2, #16
    440e:	041b      	lsls	r3, r3, #16
    4410:	0c12      	lsrs	r2, r2, #16
    4412:	1828      	adds	r0, r5, r0
    4414:	189b      	adds	r3, r3, r2
    4416:	4286      	cmp	r6, r0
    4418:	d200      	bcs.n	441c <__aeabi_ddiv+0x3cc>
    441a:	e093      	b.n	4544 <__aeabi_ddiv+0x4f4>
    441c:	d100      	bne.n	4420 <__aeabi_ddiv+0x3d0>
    441e:	e08e      	b.n	453e <__aeabi_ddiv+0x4ee>
    4420:	2301      	movs	r3, #1
    4422:	4319      	orrs	r1, r3
    4424:	4ba0      	ldr	r3, [pc, #640]	; (46a8 <__aeabi_ddiv+0x658>)
    4426:	18e3      	adds	r3, r4, r3
    4428:	2b00      	cmp	r3, #0
    442a:	dc00      	bgt.n	442e <__aeabi_ddiv+0x3de>
    442c:	e099      	b.n	4562 <__aeabi_ddiv+0x512>
    442e:	074a      	lsls	r2, r1, #29
    4430:	d000      	beq.n	4434 <__aeabi_ddiv+0x3e4>
    4432:	e09e      	b.n	4572 <__aeabi_ddiv+0x522>
    4434:	465a      	mov	r2, fp
    4436:	01d2      	lsls	r2, r2, #7
    4438:	d506      	bpl.n	4448 <__aeabi_ddiv+0x3f8>
    443a:	465a      	mov	r2, fp
    443c:	4b9b      	ldr	r3, [pc, #620]	; (46ac <__aeabi_ddiv+0x65c>)
    443e:	401a      	ands	r2, r3
    4440:	2380      	movs	r3, #128	; 0x80
    4442:	4693      	mov	fp, r2
    4444:	00db      	lsls	r3, r3, #3
    4446:	18e3      	adds	r3, r4, r3
    4448:	4a99      	ldr	r2, [pc, #612]	; (46b0 <__aeabi_ddiv+0x660>)
    444a:	4293      	cmp	r3, r2
    444c:	dd68      	ble.n	4520 <__aeabi_ddiv+0x4d0>
    444e:	2301      	movs	r3, #1
    4450:	9a02      	ldr	r2, [sp, #8]
    4452:	4c98      	ldr	r4, [pc, #608]	; (46b4 <__aeabi_ddiv+0x664>)
    4454:	401a      	ands	r2, r3
    4456:	2300      	movs	r3, #0
    4458:	4694      	mov	ip, r2
    445a:	4698      	mov	r8, r3
    445c:	2200      	movs	r2, #0
    445e:	e6c5      	b.n	41ec <__aeabi_ddiv+0x19c>
    4460:	2280      	movs	r2, #128	; 0x80
    4462:	464b      	mov	r3, r9
    4464:	0312      	lsls	r2, r2, #12
    4466:	4213      	tst	r3, r2
    4468:	d00a      	beq.n	4480 <__aeabi_ddiv+0x430>
    446a:	465b      	mov	r3, fp
    446c:	4213      	tst	r3, r2
    446e:	d106      	bne.n	447e <__aeabi_ddiv+0x42e>
    4470:	431a      	orrs	r2, r3
    4472:	0312      	lsls	r2, r2, #12
    4474:	0b12      	lsrs	r2, r2, #12
    4476:	46ac      	mov	ip, r5
    4478:	4688      	mov	r8, r1
    447a:	4c8e      	ldr	r4, [pc, #568]	; (46b4 <__aeabi_ddiv+0x664>)
    447c:	e6b6      	b.n	41ec <__aeabi_ddiv+0x19c>
    447e:	464b      	mov	r3, r9
    4480:	431a      	orrs	r2, r3
    4482:	0312      	lsls	r2, r2, #12
    4484:	0b12      	lsrs	r2, r2, #12
    4486:	46bc      	mov	ip, r7
    4488:	4c8a      	ldr	r4, [pc, #552]	; (46b4 <__aeabi_ddiv+0x664>)
    448a:	e6af      	b.n	41ec <__aeabi_ddiv+0x19c>
    448c:	0003      	movs	r3, r0
    448e:	465a      	mov	r2, fp
    4490:	3b28      	subs	r3, #40	; 0x28
    4492:	409a      	lsls	r2, r3
    4494:	2300      	movs	r3, #0
    4496:	4691      	mov	r9, r2
    4498:	4698      	mov	r8, r3
    449a:	e657      	b.n	414c <__aeabi_ddiv+0xfc>
    449c:	4658      	mov	r0, fp
    449e:	f000 ff0d 	bl	52bc <__clzsi2>
    44a2:	3020      	adds	r0, #32
    44a4:	e640      	b.n	4128 <__aeabi_ddiv+0xd8>
    44a6:	0003      	movs	r3, r0
    44a8:	4652      	mov	r2, sl
    44aa:	3b28      	subs	r3, #40	; 0x28
    44ac:	409a      	lsls	r2, r3
    44ae:	2100      	movs	r1, #0
    44b0:	4693      	mov	fp, r2
    44b2:	e677      	b.n	41a4 <__aeabi_ddiv+0x154>
    44b4:	f000 ff02 	bl	52bc <__clzsi2>
    44b8:	3020      	adds	r0, #32
    44ba:	e65f      	b.n	417c <__aeabi_ddiv+0x12c>
    44bc:	4588      	cmp	r8, r1
    44be:	d200      	bcs.n	44c2 <__aeabi_ddiv+0x472>
    44c0:	e6c7      	b.n	4252 <__aeabi_ddiv+0x202>
    44c2:	464b      	mov	r3, r9
    44c4:	07de      	lsls	r6, r3, #31
    44c6:	085d      	lsrs	r5, r3, #1
    44c8:	4643      	mov	r3, r8
    44ca:	085b      	lsrs	r3, r3, #1
    44cc:	431e      	orrs	r6, r3
    44ce:	4643      	mov	r3, r8
    44d0:	07db      	lsls	r3, r3, #31
    44d2:	469a      	mov	sl, r3
    44d4:	e6c2      	b.n	425c <__aeabi_ddiv+0x20c>
    44d6:	2500      	movs	r5, #0
    44d8:	4592      	cmp	sl, r2
    44da:	d300      	bcc.n	44de <__aeabi_ddiv+0x48e>
    44dc:	e733      	b.n	4346 <__aeabi_ddiv+0x2f6>
    44de:	9e03      	ldr	r6, [sp, #12]
    44e0:	4659      	mov	r1, fp
    44e2:	46b4      	mov	ip, r6
    44e4:	44e2      	add	sl, ip
    44e6:	45b2      	cmp	sl, r6
    44e8:	41ad      	sbcs	r5, r5
    44ea:	426d      	negs	r5, r5
    44ec:	4445      	add	r5, r8
    44ee:	18eb      	adds	r3, r5, r3
    44f0:	3901      	subs	r1, #1
    44f2:	4598      	cmp	r8, r3
    44f4:	d207      	bcs.n	4506 <__aeabi_ddiv+0x4b6>
    44f6:	4298      	cmp	r0, r3
    44f8:	d900      	bls.n	44fc <__aeabi_ddiv+0x4ac>
    44fa:	e07f      	b.n	45fc <__aeabi_ddiv+0x5ac>
    44fc:	d100      	bne.n	4500 <__aeabi_ddiv+0x4b0>
    44fe:	e0bc      	b.n	467a <__aeabi_ddiv+0x62a>
    4500:	1a1d      	subs	r5, r3, r0
    4502:	468b      	mov	fp, r1
    4504:	e71f      	b.n	4346 <__aeabi_ddiv+0x2f6>
    4506:	4598      	cmp	r8, r3
    4508:	d1fa      	bne.n	4500 <__aeabi_ddiv+0x4b0>
    450a:	9d03      	ldr	r5, [sp, #12]
    450c:	4555      	cmp	r5, sl
    450e:	d9f2      	bls.n	44f6 <__aeabi_ddiv+0x4a6>
    4510:	4643      	mov	r3, r8
    4512:	468b      	mov	fp, r1
    4514:	1a1d      	subs	r5, r3, r0
    4516:	e716      	b.n	4346 <__aeabi_ddiv+0x2f6>
    4518:	469b      	mov	fp, r3
    451a:	e6ca      	b.n	42b2 <__aeabi_ddiv+0x262>
    451c:	0015      	movs	r5, r2
    451e:	e6e7      	b.n	42f0 <__aeabi_ddiv+0x2a0>
    4520:	465a      	mov	r2, fp
    4522:	08c9      	lsrs	r1, r1, #3
    4524:	0752      	lsls	r2, r2, #29
    4526:	430a      	orrs	r2, r1
    4528:	055b      	lsls	r3, r3, #21
    452a:	4690      	mov	r8, r2
    452c:	0d5c      	lsrs	r4, r3, #21
    452e:	465a      	mov	r2, fp
    4530:	2301      	movs	r3, #1
    4532:	9902      	ldr	r1, [sp, #8]
    4534:	0252      	lsls	r2, r2, #9
    4536:	4019      	ands	r1, r3
    4538:	0b12      	lsrs	r2, r2, #12
    453a:	468c      	mov	ip, r1
    453c:	e656      	b.n	41ec <__aeabi_ddiv+0x19c>
    453e:	2b00      	cmp	r3, #0
    4540:	d100      	bne.n	4544 <__aeabi_ddiv+0x4f4>
    4542:	e76f      	b.n	4424 <__aeabi_ddiv+0x3d4>
    4544:	4446      	add	r6, r8
    4546:	1e4a      	subs	r2, r1, #1
    4548:	45b0      	cmp	r8, r6
    454a:	d929      	bls.n	45a0 <__aeabi_ddiv+0x550>
    454c:	0011      	movs	r1, r2
    454e:	4286      	cmp	r6, r0
    4550:	d000      	beq.n	4554 <__aeabi_ddiv+0x504>
    4552:	e765      	b.n	4420 <__aeabi_ddiv+0x3d0>
    4554:	9a03      	ldr	r2, [sp, #12]
    4556:	4293      	cmp	r3, r2
    4558:	d000      	beq.n	455c <__aeabi_ddiv+0x50c>
    455a:	e761      	b.n	4420 <__aeabi_ddiv+0x3d0>
    455c:	e762      	b.n	4424 <__aeabi_ddiv+0x3d4>
    455e:	2101      	movs	r1, #1
    4560:	4249      	negs	r1, r1
    4562:	2001      	movs	r0, #1
    4564:	1ac2      	subs	r2, r0, r3
    4566:	2a38      	cmp	r2, #56	; 0x38
    4568:	dd21      	ble.n	45ae <__aeabi_ddiv+0x55e>
    456a:	9b02      	ldr	r3, [sp, #8]
    456c:	4003      	ands	r3, r0
    456e:	469c      	mov	ip, r3
    4570:	e638      	b.n	41e4 <__aeabi_ddiv+0x194>
    4572:	220f      	movs	r2, #15
    4574:	400a      	ands	r2, r1
    4576:	2a04      	cmp	r2, #4
    4578:	d100      	bne.n	457c <__aeabi_ddiv+0x52c>
    457a:	e75b      	b.n	4434 <__aeabi_ddiv+0x3e4>
    457c:	000a      	movs	r2, r1
    457e:	1d11      	adds	r1, r2, #4
    4580:	4291      	cmp	r1, r2
    4582:	4192      	sbcs	r2, r2
    4584:	4252      	negs	r2, r2
    4586:	4493      	add	fp, r2
    4588:	e754      	b.n	4434 <__aeabi_ddiv+0x3e4>
    458a:	4b47      	ldr	r3, [pc, #284]	; (46a8 <__aeabi_ddiv+0x658>)
    458c:	18e3      	adds	r3, r4, r3
    458e:	2b00      	cmp	r3, #0
    4590:	dde5      	ble.n	455e <__aeabi_ddiv+0x50e>
    4592:	2201      	movs	r2, #1
    4594:	4252      	negs	r2, r2
    4596:	e7f2      	b.n	457e <__aeabi_ddiv+0x52e>
    4598:	001d      	movs	r5, r3
    459a:	e6fa      	b.n	4392 <__aeabi_ddiv+0x342>
    459c:	469a      	mov	sl, r3
    459e:	e71c      	b.n	43da <__aeabi_ddiv+0x38a>
    45a0:	42b0      	cmp	r0, r6
    45a2:	d839      	bhi.n	4618 <__aeabi_ddiv+0x5c8>
    45a4:	d06e      	beq.n	4684 <__aeabi_ddiv+0x634>
    45a6:	0011      	movs	r1, r2
    45a8:	e73a      	b.n	4420 <__aeabi_ddiv+0x3d0>
    45aa:	9302      	str	r3, [sp, #8]
    45ac:	e73a      	b.n	4424 <__aeabi_ddiv+0x3d4>
    45ae:	2a1f      	cmp	r2, #31
    45b0:	dc3c      	bgt.n	462c <__aeabi_ddiv+0x5dc>
    45b2:	2320      	movs	r3, #32
    45b4:	1a9b      	subs	r3, r3, r2
    45b6:	000c      	movs	r4, r1
    45b8:	4658      	mov	r0, fp
    45ba:	4099      	lsls	r1, r3
    45bc:	4098      	lsls	r0, r3
    45be:	1e4b      	subs	r3, r1, #1
    45c0:	4199      	sbcs	r1, r3
    45c2:	465b      	mov	r3, fp
    45c4:	40d4      	lsrs	r4, r2
    45c6:	40d3      	lsrs	r3, r2
    45c8:	4320      	orrs	r0, r4
    45ca:	4308      	orrs	r0, r1
    45cc:	001a      	movs	r2, r3
    45ce:	0743      	lsls	r3, r0, #29
    45d0:	d009      	beq.n	45e6 <__aeabi_ddiv+0x596>
    45d2:	230f      	movs	r3, #15
    45d4:	4003      	ands	r3, r0
    45d6:	2b04      	cmp	r3, #4
    45d8:	d005      	beq.n	45e6 <__aeabi_ddiv+0x596>
    45da:	0001      	movs	r1, r0
    45dc:	1d08      	adds	r0, r1, #4
    45de:	4288      	cmp	r0, r1
    45e0:	419b      	sbcs	r3, r3
    45e2:	425b      	negs	r3, r3
    45e4:	18d2      	adds	r2, r2, r3
    45e6:	0213      	lsls	r3, r2, #8
    45e8:	d53a      	bpl.n	4660 <__aeabi_ddiv+0x610>
    45ea:	2301      	movs	r3, #1
    45ec:	9a02      	ldr	r2, [sp, #8]
    45ee:	2401      	movs	r4, #1
    45f0:	401a      	ands	r2, r3
    45f2:	2300      	movs	r3, #0
    45f4:	4694      	mov	ip, r2
    45f6:	4698      	mov	r8, r3
    45f8:	2200      	movs	r2, #0
    45fa:	e5f7      	b.n	41ec <__aeabi_ddiv+0x19c>
    45fc:	2102      	movs	r1, #2
    45fe:	4249      	negs	r1, r1
    4600:	468c      	mov	ip, r1
    4602:	9d03      	ldr	r5, [sp, #12]
    4604:	44e3      	add	fp, ip
    4606:	46ac      	mov	ip, r5
    4608:	44e2      	add	sl, ip
    460a:	45aa      	cmp	sl, r5
    460c:	41ad      	sbcs	r5, r5
    460e:	426d      	negs	r5, r5
    4610:	4445      	add	r5, r8
    4612:	18ed      	adds	r5, r5, r3
    4614:	1a2d      	subs	r5, r5, r0
    4616:	e696      	b.n	4346 <__aeabi_ddiv+0x2f6>
    4618:	1e8a      	subs	r2, r1, #2
    461a:	9903      	ldr	r1, [sp, #12]
    461c:	004d      	lsls	r5, r1, #1
    461e:	428d      	cmp	r5, r1
    4620:	4189      	sbcs	r1, r1
    4622:	4249      	negs	r1, r1
    4624:	4441      	add	r1, r8
    4626:	1876      	adds	r6, r6, r1
    4628:	9503      	str	r5, [sp, #12]
    462a:	e78f      	b.n	454c <__aeabi_ddiv+0x4fc>
    462c:	201f      	movs	r0, #31
    462e:	4240      	negs	r0, r0
    4630:	1ac3      	subs	r3, r0, r3
    4632:	4658      	mov	r0, fp
    4634:	40d8      	lsrs	r0, r3
    4636:	0003      	movs	r3, r0
    4638:	2a20      	cmp	r2, #32
    463a:	d028      	beq.n	468e <__aeabi_ddiv+0x63e>
    463c:	2040      	movs	r0, #64	; 0x40
    463e:	465d      	mov	r5, fp
    4640:	1a82      	subs	r2, r0, r2
    4642:	4095      	lsls	r5, r2
    4644:	4329      	orrs	r1, r5
    4646:	1e4a      	subs	r2, r1, #1
    4648:	4191      	sbcs	r1, r2
    464a:	4319      	orrs	r1, r3
    464c:	2307      	movs	r3, #7
    464e:	2200      	movs	r2, #0
    4650:	400b      	ands	r3, r1
    4652:	d009      	beq.n	4668 <__aeabi_ddiv+0x618>
    4654:	230f      	movs	r3, #15
    4656:	2200      	movs	r2, #0
    4658:	400b      	ands	r3, r1
    465a:	0008      	movs	r0, r1
    465c:	2b04      	cmp	r3, #4
    465e:	d1bd      	bne.n	45dc <__aeabi_ddiv+0x58c>
    4660:	0001      	movs	r1, r0
    4662:	0753      	lsls	r3, r2, #29
    4664:	0252      	lsls	r2, r2, #9
    4666:	0b12      	lsrs	r2, r2, #12
    4668:	08c9      	lsrs	r1, r1, #3
    466a:	4319      	orrs	r1, r3
    466c:	2301      	movs	r3, #1
    466e:	4688      	mov	r8, r1
    4670:	9902      	ldr	r1, [sp, #8]
    4672:	2400      	movs	r4, #0
    4674:	4019      	ands	r1, r3
    4676:	468c      	mov	ip, r1
    4678:	e5b8      	b.n	41ec <__aeabi_ddiv+0x19c>
    467a:	4552      	cmp	r2, sl
    467c:	d8be      	bhi.n	45fc <__aeabi_ddiv+0x5ac>
    467e:	468b      	mov	fp, r1
    4680:	2500      	movs	r5, #0
    4682:	e660      	b.n	4346 <__aeabi_ddiv+0x2f6>
    4684:	9d03      	ldr	r5, [sp, #12]
    4686:	429d      	cmp	r5, r3
    4688:	d3c6      	bcc.n	4618 <__aeabi_ddiv+0x5c8>
    468a:	0011      	movs	r1, r2
    468c:	e762      	b.n	4554 <__aeabi_ddiv+0x504>
    468e:	2500      	movs	r5, #0
    4690:	e7d8      	b.n	4644 <__aeabi_ddiv+0x5f4>
    4692:	2280      	movs	r2, #128	; 0x80
    4694:	465b      	mov	r3, fp
    4696:	0312      	lsls	r2, r2, #12
    4698:	431a      	orrs	r2, r3
    469a:	9b01      	ldr	r3, [sp, #4]
    469c:	0312      	lsls	r2, r2, #12
    469e:	0b12      	lsrs	r2, r2, #12
    46a0:	469c      	mov	ip, r3
    46a2:	4688      	mov	r8, r1
    46a4:	4c03      	ldr	r4, [pc, #12]	; (46b4 <__aeabi_ddiv+0x664>)
    46a6:	e5a1      	b.n	41ec <__aeabi_ddiv+0x19c>
    46a8:	000003ff 	.word	0x000003ff
    46ac:	feffffff 	.word	0xfeffffff
    46b0:	000007fe 	.word	0x000007fe
    46b4:	000007ff 	.word	0x000007ff

000046b8 <__aeabi_dmul>:
    46b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ba:	4657      	mov	r7, sl
    46bc:	4645      	mov	r5, r8
    46be:	46de      	mov	lr, fp
    46c0:	464e      	mov	r6, r9
    46c2:	b5e0      	push	{r5, r6, r7, lr}
    46c4:	030c      	lsls	r4, r1, #12
    46c6:	4698      	mov	r8, r3
    46c8:	004e      	lsls	r6, r1, #1
    46ca:	0b23      	lsrs	r3, r4, #12
    46cc:	b087      	sub	sp, #28
    46ce:	0007      	movs	r7, r0
    46d0:	4692      	mov	sl, r2
    46d2:	469b      	mov	fp, r3
    46d4:	0d76      	lsrs	r6, r6, #21
    46d6:	0fcd      	lsrs	r5, r1, #31
    46d8:	2e00      	cmp	r6, #0
    46da:	d06b      	beq.n	47b4 <__aeabi_dmul+0xfc>
    46dc:	4b6d      	ldr	r3, [pc, #436]	; (4894 <__aeabi_dmul+0x1dc>)
    46de:	429e      	cmp	r6, r3
    46e0:	d035      	beq.n	474e <__aeabi_dmul+0x96>
    46e2:	2480      	movs	r4, #128	; 0x80
    46e4:	465b      	mov	r3, fp
    46e6:	0f42      	lsrs	r2, r0, #29
    46e8:	0424      	lsls	r4, r4, #16
    46ea:	00db      	lsls	r3, r3, #3
    46ec:	4314      	orrs	r4, r2
    46ee:	431c      	orrs	r4, r3
    46f0:	00c3      	lsls	r3, r0, #3
    46f2:	4699      	mov	r9, r3
    46f4:	4b68      	ldr	r3, [pc, #416]	; (4898 <__aeabi_dmul+0x1e0>)
    46f6:	46a3      	mov	fp, r4
    46f8:	469c      	mov	ip, r3
    46fa:	2300      	movs	r3, #0
    46fc:	2700      	movs	r7, #0
    46fe:	4466      	add	r6, ip
    4700:	9302      	str	r3, [sp, #8]
    4702:	4643      	mov	r3, r8
    4704:	031c      	lsls	r4, r3, #12
    4706:	005a      	lsls	r2, r3, #1
    4708:	0fdb      	lsrs	r3, r3, #31
    470a:	4650      	mov	r0, sl
    470c:	0b24      	lsrs	r4, r4, #12
    470e:	0d52      	lsrs	r2, r2, #21
    4710:	4698      	mov	r8, r3
    4712:	d100      	bne.n	4716 <__aeabi_dmul+0x5e>
    4714:	e076      	b.n	4804 <__aeabi_dmul+0x14c>
    4716:	4b5f      	ldr	r3, [pc, #380]	; (4894 <__aeabi_dmul+0x1dc>)
    4718:	429a      	cmp	r2, r3
    471a:	d06d      	beq.n	47f8 <__aeabi_dmul+0x140>
    471c:	2380      	movs	r3, #128	; 0x80
    471e:	0f41      	lsrs	r1, r0, #29
    4720:	041b      	lsls	r3, r3, #16
    4722:	430b      	orrs	r3, r1
    4724:	495c      	ldr	r1, [pc, #368]	; (4898 <__aeabi_dmul+0x1e0>)
    4726:	00e4      	lsls	r4, r4, #3
    4728:	468c      	mov	ip, r1
    472a:	431c      	orrs	r4, r3
    472c:	00c3      	lsls	r3, r0, #3
    472e:	2000      	movs	r0, #0
    4730:	4462      	add	r2, ip
    4732:	4641      	mov	r1, r8
    4734:	18b6      	adds	r6, r6, r2
    4736:	4069      	eors	r1, r5
    4738:	1c72      	adds	r2, r6, #1
    473a:	9101      	str	r1, [sp, #4]
    473c:	4694      	mov	ip, r2
    473e:	4307      	orrs	r7, r0
    4740:	2f0f      	cmp	r7, #15
    4742:	d900      	bls.n	4746 <__aeabi_dmul+0x8e>
    4744:	e0b0      	b.n	48a8 <__aeabi_dmul+0x1f0>
    4746:	4a55      	ldr	r2, [pc, #340]	; (489c <__aeabi_dmul+0x1e4>)
    4748:	00bf      	lsls	r7, r7, #2
    474a:	59d2      	ldr	r2, [r2, r7]
    474c:	4697      	mov	pc, r2
    474e:	465b      	mov	r3, fp
    4750:	4303      	orrs	r3, r0
    4752:	4699      	mov	r9, r3
    4754:	d000      	beq.n	4758 <__aeabi_dmul+0xa0>
    4756:	e087      	b.n	4868 <__aeabi_dmul+0x1b0>
    4758:	2300      	movs	r3, #0
    475a:	469b      	mov	fp, r3
    475c:	3302      	adds	r3, #2
    475e:	2708      	movs	r7, #8
    4760:	9302      	str	r3, [sp, #8]
    4762:	e7ce      	b.n	4702 <__aeabi_dmul+0x4a>
    4764:	4642      	mov	r2, r8
    4766:	9201      	str	r2, [sp, #4]
    4768:	2802      	cmp	r0, #2
    476a:	d067      	beq.n	483c <__aeabi_dmul+0x184>
    476c:	2803      	cmp	r0, #3
    476e:	d100      	bne.n	4772 <__aeabi_dmul+0xba>
    4770:	e20e      	b.n	4b90 <__aeabi_dmul+0x4d8>
    4772:	2801      	cmp	r0, #1
    4774:	d000      	beq.n	4778 <__aeabi_dmul+0xc0>
    4776:	e162      	b.n	4a3e <__aeabi_dmul+0x386>
    4778:	2300      	movs	r3, #0
    477a:	2400      	movs	r4, #0
    477c:	2200      	movs	r2, #0
    477e:	4699      	mov	r9, r3
    4780:	9901      	ldr	r1, [sp, #4]
    4782:	4001      	ands	r1, r0
    4784:	b2cd      	uxtb	r5, r1
    4786:	2100      	movs	r1, #0
    4788:	0312      	lsls	r2, r2, #12
    478a:	0d0b      	lsrs	r3, r1, #20
    478c:	0b12      	lsrs	r2, r2, #12
    478e:	051b      	lsls	r3, r3, #20
    4790:	4313      	orrs	r3, r2
    4792:	4a43      	ldr	r2, [pc, #268]	; (48a0 <__aeabi_dmul+0x1e8>)
    4794:	0524      	lsls	r4, r4, #20
    4796:	4013      	ands	r3, r2
    4798:	431c      	orrs	r4, r3
    479a:	0064      	lsls	r4, r4, #1
    479c:	07ed      	lsls	r5, r5, #31
    479e:	0864      	lsrs	r4, r4, #1
    47a0:	432c      	orrs	r4, r5
    47a2:	4648      	mov	r0, r9
    47a4:	0021      	movs	r1, r4
    47a6:	b007      	add	sp, #28
    47a8:	bc3c      	pop	{r2, r3, r4, r5}
    47aa:	4690      	mov	r8, r2
    47ac:	4699      	mov	r9, r3
    47ae:	46a2      	mov	sl, r4
    47b0:	46ab      	mov	fp, r5
    47b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47b4:	4303      	orrs	r3, r0
    47b6:	4699      	mov	r9, r3
    47b8:	d04f      	beq.n	485a <__aeabi_dmul+0x1a2>
    47ba:	465b      	mov	r3, fp
    47bc:	2b00      	cmp	r3, #0
    47be:	d100      	bne.n	47c2 <__aeabi_dmul+0x10a>
    47c0:	e189      	b.n	4ad6 <__aeabi_dmul+0x41e>
    47c2:	4658      	mov	r0, fp
    47c4:	f000 fd7a 	bl	52bc <__clzsi2>
    47c8:	0003      	movs	r3, r0
    47ca:	3b0b      	subs	r3, #11
    47cc:	2b1c      	cmp	r3, #28
    47ce:	dd00      	ble.n	47d2 <__aeabi_dmul+0x11a>
    47d0:	e17a      	b.n	4ac8 <__aeabi_dmul+0x410>
    47d2:	221d      	movs	r2, #29
    47d4:	1ad3      	subs	r3, r2, r3
    47d6:	003a      	movs	r2, r7
    47d8:	0001      	movs	r1, r0
    47da:	465c      	mov	r4, fp
    47dc:	40da      	lsrs	r2, r3
    47de:	3908      	subs	r1, #8
    47e0:	408c      	lsls	r4, r1
    47e2:	0013      	movs	r3, r2
    47e4:	408f      	lsls	r7, r1
    47e6:	4323      	orrs	r3, r4
    47e8:	469b      	mov	fp, r3
    47ea:	46b9      	mov	r9, r7
    47ec:	2300      	movs	r3, #0
    47ee:	4e2d      	ldr	r6, [pc, #180]	; (48a4 <__aeabi_dmul+0x1ec>)
    47f0:	2700      	movs	r7, #0
    47f2:	1a36      	subs	r6, r6, r0
    47f4:	9302      	str	r3, [sp, #8]
    47f6:	e784      	b.n	4702 <__aeabi_dmul+0x4a>
    47f8:	4653      	mov	r3, sl
    47fa:	4323      	orrs	r3, r4
    47fc:	d12a      	bne.n	4854 <__aeabi_dmul+0x19c>
    47fe:	2400      	movs	r4, #0
    4800:	2002      	movs	r0, #2
    4802:	e796      	b.n	4732 <__aeabi_dmul+0x7a>
    4804:	4653      	mov	r3, sl
    4806:	4323      	orrs	r3, r4
    4808:	d020      	beq.n	484c <__aeabi_dmul+0x194>
    480a:	2c00      	cmp	r4, #0
    480c:	d100      	bne.n	4810 <__aeabi_dmul+0x158>
    480e:	e157      	b.n	4ac0 <__aeabi_dmul+0x408>
    4810:	0020      	movs	r0, r4
    4812:	f000 fd53 	bl	52bc <__clzsi2>
    4816:	0003      	movs	r3, r0
    4818:	3b0b      	subs	r3, #11
    481a:	2b1c      	cmp	r3, #28
    481c:	dd00      	ble.n	4820 <__aeabi_dmul+0x168>
    481e:	e149      	b.n	4ab4 <__aeabi_dmul+0x3fc>
    4820:	211d      	movs	r1, #29
    4822:	1acb      	subs	r3, r1, r3
    4824:	4651      	mov	r1, sl
    4826:	0002      	movs	r2, r0
    4828:	40d9      	lsrs	r1, r3
    482a:	4653      	mov	r3, sl
    482c:	3a08      	subs	r2, #8
    482e:	4094      	lsls	r4, r2
    4830:	4093      	lsls	r3, r2
    4832:	430c      	orrs	r4, r1
    4834:	4a1b      	ldr	r2, [pc, #108]	; (48a4 <__aeabi_dmul+0x1ec>)
    4836:	1a12      	subs	r2, r2, r0
    4838:	2000      	movs	r0, #0
    483a:	e77a      	b.n	4732 <__aeabi_dmul+0x7a>
    483c:	2501      	movs	r5, #1
    483e:	9b01      	ldr	r3, [sp, #4]
    4840:	4c14      	ldr	r4, [pc, #80]	; (4894 <__aeabi_dmul+0x1dc>)
    4842:	401d      	ands	r5, r3
    4844:	2300      	movs	r3, #0
    4846:	2200      	movs	r2, #0
    4848:	4699      	mov	r9, r3
    484a:	e79c      	b.n	4786 <__aeabi_dmul+0xce>
    484c:	2400      	movs	r4, #0
    484e:	2200      	movs	r2, #0
    4850:	2001      	movs	r0, #1
    4852:	e76e      	b.n	4732 <__aeabi_dmul+0x7a>
    4854:	4653      	mov	r3, sl
    4856:	2003      	movs	r0, #3
    4858:	e76b      	b.n	4732 <__aeabi_dmul+0x7a>
    485a:	2300      	movs	r3, #0
    485c:	469b      	mov	fp, r3
    485e:	3301      	adds	r3, #1
    4860:	2704      	movs	r7, #4
    4862:	2600      	movs	r6, #0
    4864:	9302      	str	r3, [sp, #8]
    4866:	e74c      	b.n	4702 <__aeabi_dmul+0x4a>
    4868:	2303      	movs	r3, #3
    486a:	4681      	mov	r9, r0
    486c:	270c      	movs	r7, #12
    486e:	9302      	str	r3, [sp, #8]
    4870:	e747      	b.n	4702 <__aeabi_dmul+0x4a>
    4872:	2280      	movs	r2, #128	; 0x80
    4874:	2300      	movs	r3, #0
    4876:	2500      	movs	r5, #0
    4878:	0312      	lsls	r2, r2, #12
    487a:	4699      	mov	r9, r3
    487c:	4c05      	ldr	r4, [pc, #20]	; (4894 <__aeabi_dmul+0x1dc>)
    487e:	e782      	b.n	4786 <__aeabi_dmul+0xce>
    4880:	465c      	mov	r4, fp
    4882:	464b      	mov	r3, r9
    4884:	9802      	ldr	r0, [sp, #8]
    4886:	e76f      	b.n	4768 <__aeabi_dmul+0xb0>
    4888:	465c      	mov	r4, fp
    488a:	464b      	mov	r3, r9
    488c:	9501      	str	r5, [sp, #4]
    488e:	9802      	ldr	r0, [sp, #8]
    4890:	e76a      	b.n	4768 <__aeabi_dmul+0xb0>
    4892:	46c0      	nop			; (mov r8, r8)
    4894:	000007ff 	.word	0x000007ff
    4898:	fffffc01 	.word	0xfffffc01
    489c:	00005684 	.word	0x00005684
    48a0:	800fffff 	.word	0x800fffff
    48a4:	fffffc0d 	.word	0xfffffc0d
    48a8:	464a      	mov	r2, r9
    48aa:	4649      	mov	r1, r9
    48ac:	0c17      	lsrs	r7, r2, #16
    48ae:	0c1a      	lsrs	r2, r3, #16
    48b0:	041b      	lsls	r3, r3, #16
    48b2:	0c1b      	lsrs	r3, r3, #16
    48b4:	0408      	lsls	r0, r1, #16
    48b6:	0019      	movs	r1, r3
    48b8:	0c00      	lsrs	r0, r0, #16
    48ba:	4341      	muls	r1, r0
    48bc:	0015      	movs	r5, r2
    48be:	4688      	mov	r8, r1
    48c0:	0019      	movs	r1, r3
    48c2:	437d      	muls	r5, r7
    48c4:	4379      	muls	r1, r7
    48c6:	9503      	str	r5, [sp, #12]
    48c8:	4689      	mov	r9, r1
    48ca:	0029      	movs	r1, r5
    48cc:	0015      	movs	r5, r2
    48ce:	4345      	muls	r5, r0
    48d0:	444d      	add	r5, r9
    48d2:	9502      	str	r5, [sp, #8]
    48d4:	4645      	mov	r5, r8
    48d6:	0c2d      	lsrs	r5, r5, #16
    48d8:	46aa      	mov	sl, r5
    48da:	9d02      	ldr	r5, [sp, #8]
    48dc:	4455      	add	r5, sl
    48de:	45a9      	cmp	r9, r5
    48e0:	d906      	bls.n	48f0 <__aeabi_dmul+0x238>
    48e2:	468a      	mov	sl, r1
    48e4:	2180      	movs	r1, #128	; 0x80
    48e6:	0249      	lsls	r1, r1, #9
    48e8:	4689      	mov	r9, r1
    48ea:	44ca      	add	sl, r9
    48ec:	4651      	mov	r1, sl
    48ee:	9103      	str	r1, [sp, #12]
    48f0:	0c29      	lsrs	r1, r5, #16
    48f2:	9104      	str	r1, [sp, #16]
    48f4:	4641      	mov	r1, r8
    48f6:	0409      	lsls	r1, r1, #16
    48f8:	042d      	lsls	r5, r5, #16
    48fa:	0c09      	lsrs	r1, r1, #16
    48fc:	4688      	mov	r8, r1
    48fe:	0029      	movs	r1, r5
    4900:	0c25      	lsrs	r5, r4, #16
    4902:	0424      	lsls	r4, r4, #16
    4904:	4441      	add	r1, r8
    4906:	0c24      	lsrs	r4, r4, #16
    4908:	9105      	str	r1, [sp, #20]
    490a:	0021      	movs	r1, r4
    490c:	4341      	muls	r1, r0
    490e:	4688      	mov	r8, r1
    4910:	0021      	movs	r1, r4
    4912:	4379      	muls	r1, r7
    4914:	468a      	mov	sl, r1
    4916:	4368      	muls	r0, r5
    4918:	4641      	mov	r1, r8
    491a:	4450      	add	r0, sl
    491c:	4681      	mov	r9, r0
    491e:	0c08      	lsrs	r0, r1, #16
    4920:	4448      	add	r0, r9
    4922:	436f      	muls	r7, r5
    4924:	4582      	cmp	sl, r0
    4926:	d903      	bls.n	4930 <__aeabi_dmul+0x278>
    4928:	2180      	movs	r1, #128	; 0x80
    492a:	0249      	lsls	r1, r1, #9
    492c:	4689      	mov	r9, r1
    492e:	444f      	add	r7, r9
    4930:	0c01      	lsrs	r1, r0, #16
    4932:	4689      	mov	r9, r1
    4934:	0039      	movs	r1, r7
    4936:	4449      	add	r1, r9
    4938:	9102      	str	r1, [sp, #8]
    493a:	4641      	mov	r1, r8
    493c:	040f      	lsls	r7, r1, #16
    493e:	9904      	ldr	r1, [sp, #16]
    4940:	0c3f      	lsrs	r7, r7, #16
    4942:	4688      	mov	r8, r1
    4944:	0400      	lsls	r0, r0, #16
    4946:	19c0      	adds	r0, r0, r7
    4948:	4480      	add	r8, r0
    494a:	4641      	mov	r1, r8
    494c:	9104      	str	r1, [sp, #16]
    494e:	4659      	mov	r1, fp
    4950:	0c0f      	lsrs	r7, r1, #16
    4952:	0409      	lsls	r1, r1, #16
    4954:	0c09      	lsrs	r1, r1, #16
    4956:	4688      	mov	r8, r1
    4958:	4359      	muls	r1, r3
    495a:	468a      	mov	sl, r1
    495c:	0039      	movs	r1, r7
    495e:	4351      	muls	r1, r2
    4960:	4689      	mov	r9, r1
    4962:	4641      	mov	r1, r8
    4964:	434a      	muls	r2, r1
    4966:	4651      	mov	r1, sl
    4968:	0c09      	lsrs	r1, r1, #16
    496a:	468b      	mov	fp, r1
    496c:	437b      	muls	r3, r7
    496e:	18d2      	adds	r2, r2, r3
    4970:	445a      	add	r2, fp
    4972:	4293      	cmp	r3, r2
    4974:	d903      	bls.n	497e <__aeabi_dmul+0x2c6>
    4976:	2380      	movs	r3, #128	; 0x80
    4978:	025b      	lsls	r3, r3, #9
    497a:	469b      	mov	fp, r3
    497c:	44d9      	add	r9, fp
    497e:	4651      	mov	r1, sl
    4980:	0409      	lsls	r1, r1, #16
    4982:	0c09      	lsrs	r1, r1, #16
    4984:	468a      	mov	sl, r1
    4986:	4641      	mov	r1, r8
    4988:	4361      	muls	r1, r4
    498a:	437c      	muls	r4, r7
    498c:	0c13      	lsrs	r3, r2, #16
    498e:	0412      	lsls	r2, r2, #16
    4990:	444b      	add	r3, r9
    4992:	4452      	add	r2, sl
    4994:	46a1      	mov	r9, r4
    4996:	468a      	mov	sl, r1
    4998:	003c      	movs	r4, r7
    499a:	4641      	mov	r1, r8
    499c:	436c      	muls	r4, r5
    499e:	434d      	muls	r5, r1
    49a0:	4651      	mov	r1, sl
    49a2:	444d      	add	r5, r9
    49a4:	0c0f      	lsrs	r7, r1, #16
    49a6:	197d      	adds	r5, r7, r5
    49a8:	45a9      	cmp	r9, r5
    49aa:	d903      	bls.n	49b4 <__aeabi_dmul+0x2fc>
    49ac:	2180      	movs	r1, #128	; 0x80
    49ae:	0249      	lsls	r1, r1, #9
    49b0:	4688      	mov	r8, r1
    49b2:	4444      	add	r4, r8
    49b4:	9f04      	ldr	r7, [sp, #16]
    49b6:	9903      	ldr	r1, [sp, #12]
    49b8:	46b8      	mov	r8, r7
    49ba:	4441      	add	r1, r8
    49bc:	468b      	mov	fp, r1
    49be:	4583      	cmp	fp, r0
    49c0:	4180      	sbcs	r0, r0
    49c2:	4241      	negs	r1, r0
    49c4:	4688      	mov	r8, r1
    49c6:	4651      	mov	r1, sl
    49c8:	0408      	lsls	r0, r1, #16
    49ca:	042f      	lsls	r7, r5, #16
    49cc:	0c00      	lsrs	r0, r0, #16
    49ce:	183f      	adds	r7, r7, r0
    49d0:	4658      	mov	r0, fp
    49d2:	9902      	ldr	r1, [sp, #8]
    49d4:	1810      	adds	r0, r2, r0
    49d6:	4689      	mov	r9, r1
    49d8:	4290      	cmp	r0, r2
    49da:	4192      	sbcs	r2, r2
    49dc:	444f      	add	r7, r9
    49de:	46ba      	mov	sl, r7
    49e0:	4252      	negs	r2, r2
    49e2:	4699      	mov	r9, r3
    49e4:	4693      	mov	fp, r2
    49e6:	44c2      	add	sl, r8
    49e8:	44d1      	add	r9, sl
    49ea:	44cb      	add	fp, r9
    49ec:	428f      	cmp	r7, r1
    49ee:	41bf      	sbcs	r7, r7
    49f0:	45c2      	cmp	sl, r8
    49f2:	4189      	sbcs	r1, r1
    49f4:	4599      	cmp	r9, r3
    49f6:	419b      	sbcs	r3, r3
    49f8:	4593      	cmp	fp, r2
    49fa:	4192      	sbcs	r2, r2
    49fc:	427f      	negs	r7, r7
    49fe:	4249      	negs	r1, r1
    4a00:	0c2d      	lsrs	r5, r5, #16
    4a02:	4252      	negs	r2, r2
    4a04:	430f      	orrs	r7, r1
    4a06:	425b      	negs	r3, r3
    4a08:	4313      	orrs	r3, r2
    4a0a:	197f      	adds	r7, r7, r5
    4a0c:	18ff      	adds	r7, r7, r3
    4a0e:	465b      	mov	r3, fp
    4a10:	193c      	adds	r4, r7, r4
    4a12:	0ddb      	lsrs	r3, r3, #23
    4a14:	9a05      	ldr	r2, [sp, #20]
    4a16:	0264      	lsls	r4, r4, #9
    4a18:	431c      	orrs	r4, r3
    4a1a:	0243      	lsls	r3, r0, #9
    4a1c:	4313      	orrs	r3, r2
    4a1e:	1e5d      	subs	r5, r3, #1
    4a20:	41ab      	sbcs	r3, r5
    4a22:	465a      	mov	r2, fp
    4a24:	0dc0      	lsrs	r0, r0, #23
    4a26:	4303      	orrs	r3, r0
    4a28:	0252      	lsls	r2, r2, #9
    4a2a:	4313      	orrs	r3, r2
    4a2c:	01e2      	lsls	r2, r4, #7
    4a2e:	d556      	bpl.n	4ade <__aeabi_dmul+0x426>
    4a30:	2001      	movs	r0, #1
    4a32:	085a      	lsrs	r2, r3, #1
    4a34:	4003      	ands	r3, r0
    4a36:	4313      	orrs	r3, r2
    4a38:	07e2      	lsls	r2, r4, #31
    4a3a:	4313      	orrs	r3, r2
    4a3c:	0864      	lsrs	r4, r4, #1
    4a3e:	485a      	ldr	r0, [pc, #360]	; (4ba8 <__aeabi_dmul+0x4f0>)
    4a40:	4460      	add	r0, ip
    4a42:	2800      	cmp	r0, #0
    4a44:	dd4d      	ble.n	4ae2 <__aeabi_dmul+0x42a>
    4a46:	075a      	lsls	r2, r3, #29
    4a48:	d009      	beq.n	4a5e <__aeabi_dmul+0x3a6>
    4a4a:	220f      	movs	r2, #15
    4a4c:	401a      	ands	r2, r3
    4a4e:	2a04      	cmp	r2, #4
    4a50:	d005      	beq.n	4a5e <__aeabi_dmul+0x3a6>
    4a52:	1d1a      	adds	r2, r3, #4
    4a54:	429a      	cmp	r2, r3
    4a56:	419b      	sbcs	r3, r3
    4a58:	425b      	negs	r3, r3
    4a5a:	18e4      	adds	r4, r4, r3
    4a5c:	0013      	movs	r3, r2
    4a5e:	01e2      	lsls	r2, r4, #7
    4a60:	d504      	bpl.n	4a6c <__aeabi_dmul+0x3b4>
    4a62:	2080      	movs	r0, #128	; 0x80
    4a64:	4a51      	ldr	r2, [pc, #324]	; (4bac <__aeabi_dmul+0x4f4>)
    4a66:	00c0      	lsls	r0, r0, #3
    4a68:	4014      	ands	r4, r2
    4a6a:	4460      	add	r0, ip
    4a6c:	4a50      	ldr	r2, [pc, #320]	; (4bb0 <__aeabi_dmul+0x4f8>)
    4a6e:	4290      	cmp	r0, r2
    4a70:	dd00      	ble.n	4a74 <__aeabi_dmul+0x3bc>
    4a72:	e6e3      	b.n	483c <__aeabi_dmul+0x184>
    4a74:	2501      	movs	r5, #1
    4a76:	08db      	lsrs	r3, r3, #3
    4a78:	0762      	lsls	r2, r4, #29
    4a7a:	431a      	orrs	r2, r3
    4a7c:	0264      	lsls	r4, r4, #9
    4a7e:	9b01      	ldr	r3, [sp, #4]
    4a80:	4691      	mov	r9, r2
    4a82:	0b22      	lsrs	r2, r4, #12
    4a84:	0544      	lsls	r4, r0, #21
    4a86:	0d64      	lsrs	r4, r4, #21
    4a88:	401d      	ands	r5, r3
    4a8a:	e67c      	b.n	4786 <__aeabi_dmul+0xce>
    4a8c:	2280      	movs	r2, #128	; 0x80
    4a8e:	4659      	mov	r1, fp
    4a90:	0312      	lsls	r2, r2, #12
    4a92:	4211      	tst	r1, r2
    4a94:	d008      	beq.n	4aa8 <__aeabi_dmul+0x3f0>
    4a96:	4214      	tst	r4, r2
    4a98:	d106      	bne.n	4aa8 <__aeabi_dmul+0x3f0>
    4a9a:	4322      	orrs	r2, r4
    4a9c:	0312      	lsls	r2, r2, #12
    4a9e:	0b12      	lsrs	r2, r2, #12
    4aa0:	4645      	mov	r5, r8
    4aa2:	4699      	mov	r9, r3
    4aa4:	4c43      	ldr	r4, [pc, #268]	; (4bb4 <__aeabi_dmul+0x4fc>)
    4aa6:	e66e      	b.n	4786 <__aeabi_dmul+0xce>
    4aa8:	465b      	mov	r3, fp
    4aaa:	431a      	orrs	r2, r3
    4aac:	0312      	lsls	r2, r2, #12
    4aae:	0b12      	lsrs	r2, r2, #12
    4ab0:	4c40      	ldr	r4, [pc, #256]	; (4bb4 <__aeabi_dmul+0x4fc>)
    4ab2:	e668      	b.n	4786 <__aeabi_dmul+0xce>
    4ab4:	0003      	movs	r3, r0
    4ab6:	4654      	mov	r4, sl
    4ab8:	3b28      	subs	r3, #40	; 0x28
    4aba:	409c      	lsls	r4, r3
    4abc:	2300      	movs	r3, #0
    4abe:	e6b9      	b.n	4834 <__aeabi_dmul+0x17c>
    4ac0:	f000 fbfc 	bl	52bc <__clzsi2>
    4ac4:	3020      	adds	r0, #32
    4ac6:	e6a6      	b.n	4816 <__aeabi_dmul+0x15e>
    4ac8:	0003      	movs	r3, r0
    4aca:	3b28      	subs	r3, #40	; 0x28
    4acc:	409f      	lsls	r7, r3
    4ace:	2300      	movs	r3, #0
    4ad0:	46bb      	mov	fp, r7
    4ad2:	4699      	mov	r9, r3
    4ad4:	e68a      	b.n	47ec <__aeabi_dmul+0x134>
    4ad6:	f000 fbf1 	bl	52bc <__clzsi2>
    4ada:	3020      	adds	r0, #32
    4adc:	e674      	b.n	47c8 <__aeabi_dmul+0x110>
    4ade:	46b4      	mov	ip, r6
    4ae0:	e7ad      	b.n	4a3e <__aeabi_dmul+0x386>
    4ae2:	2501      	movs	r5, #1
    4ae4:	1a2a      	subs	r2, r5, r0
    4ae6:	2a38      	cmp	r2, #56	; 0x38
    4ae8:	dd06      	ble.n	4af8 <__aeabi_dmul+0x440>
    4aea:	9b01      	ldr	r3, [sp, #4]
    4aec:	2400      	movs	r4, #0
    4aee:	401d      	ands	r5, r3
    4af0:	2300      	movs	r3, #0
    4af2:	2200      	movs	r2, #0
    4af4:	4699      	mov	r9, r3
    4af6:	e646      	b.n	4786 <__aeabi_dmul+0xce>
    4af8:	2a1f      	cmp	r2, #31
    4afa:	dc21      	bgt.n	4b40 <__aeabi_dmul+0x488>
    4afc:	2520      	movs	r5, #32
    4afe:	0020      	movs	r0, r4
    4b00:	1aad      	subs	r5, r5, r2
    4b02:	001e      	movs	r6, r3
    4b04:	40ab      	lsls	r3, r5
    4b06:	40a8      	lsls	r0, r5
    4b08:	40d6      	lsrs	r6, r2
    4b0a:	1e5d      	subs	r5, r3, #1
    4b0c:	41ab      	sbcs	r3, r5
    4b0e:	4330      	orrs	r0, r6
    4b10:	4318      	orrs	r0, r3
    4b12:	40d4      	lsrs	r4, r2
    4b14:	0743      	lsls	r3, r0, #29
    4b16:	d009      	beq.n	4b2c <__aeabi_dmul+0x474>
    4b18:	230f      	movs	r3, #15
    4b1a:	4003      	ands	r3, r0
    4b1c:	2b04      	cmp	r3, #4
    4b1e:	d005      	beq.n	4b2c <__aeabi_dmul+0x474>
    4b20:	0003      	movs	r3, r0
    4b22:	1d18      	adds	r0, r3, #4
    4b24:	4298      	cmp	r0, r3
    4b26:	419b      	sbcs	r3, r3
    4b28:	425b      	negs	r3, r3
    4b2a:	18e4      	adds	r4, r4, r3
    4b2c:	0223      	lsls	r3, r4, #8
    4b2e:	d521      	bpl.n	4b74 <__aeabi_dmul+0x4bc>
    4b30:	2501      	movs	r5, #1
    4b32:	9b01      	ldr	r3, [sp, #4]
    4b34:	2401      	movs	r4, #1
    4b36:	401d      	ands	r5, r3
    4b38:	2300      	movs	r3, #0
    4b3a:	2200      	movs	r2, #0
    4b3c:	4699      	mov	r9, r3
    4b3e:	e622      	b.n	4786 <__aeabi_dmul+0xce>
    4b40:	251f      	movs	r5, #31
    4b42:	0021      	movs	r1, r4
    4b44:	426d      	negs	r5, r5
    4b46:	1a28      	subs	r0, r5, r0
    4b48:	40c1      	lsrs	r1, r0
    4b4a:	0008      	movs	r0, r1
    4b4c:	2a20      	cmp	r2, #32
    4b4e:	d01d      	beq.n	4b8c <__aeabi_dmul+0x4d4>
    4b50:	355f      	adds	r5, #95	; 0x5f
    4b52:	1aaa      	subs	r2, r5, r2
    4b54:	4094      	lsls	r4, r2
    4b56:	4323      	orrs	r3, r4
    4b58:	1e5c      	subs	r4, r3, #1
    4b5a:	41a3      	sbcs	r3, r4
    4b5c:	2507      	movs	r5, #7
    4b5e:	4303      	orrs	r3, r0
    4b60:	401d      	ands	r5, r3
    4b62:	2200      	movs	r2, #0
    4b64:	2d00      	cmp	r5, #0
    4b66:	d009      	beq.n	4b7c <__aeabi_dmul+0x4c4>
    4b68:	220f      	movs	r2, #15
    4b6a:	2400      	movs	r4, #0
    4b6c:	401a      	ands	r2, r3
    4b6e:	0018      	movs	r0, r3
    4b70:	2a04      	cmp	r2, #4
    4b72:	d1d6      	bne.n	4b22 <__aeabi_dmul+0x46a>
    4b74:	0003      	movs	r3, r0
    4b76:	0765      	lsls	r5, r4, #29
    4b78:	0264      	lsls	r4, r4, #9
    4b7a:	0b22      	lsrs	r2, r4, #12
    4b7c:	08db      	lsrs	r3, r3, #3
    4b7e:	432b      	orrs	r3, r5
    4b80:	2501      	movs	r5, #1
    4b82:	4699      	mov	r9, r3
    4b84:	9b01      	ldr	r3, [sp, #4]
    4b86:	2400      	movs	r4, #0
    4b88:	401d      	ands	r5, r3
    4b8a:	e5fc      	b.n	4786 <__aeabi_dmul+0xce>
    4b8c:	2400      	movs	r4, #0
    4b8e:	e7e2      	b.n	4b56 <__aeabi_dmul+0x49e>
    4b90:	2280      	movs	r2, #128	; 0x80
    4b92:	2501      	movs	r5, #1
    4b94:	0312      	lsls	r2, r2, #12
    4b96:	4322      	orrs	r2, r4
    4b98:	9901      	ldr	r1, [sp, #4]
    4b9a:	0312      	lsls	r2, r2, #12
    4b9c:	0b12      	lsrs	r2, r2, #12
    4b9e:	400d      	ands	r5, r1
    4ba0:	4699      	mov	r9, r3
    4ba2:	4c04      	ldr	r4, [pc, #16]	; (4bb4 <__aeabi_dmul+0x4fc>)
    4ba4:	e5ef      	b.n	4786 <__aeabi_dmul+0xce>
    4ba6:	46c0      	nop			; (mov r8, r8)
    4ba8:	000003ff 	.word	0x000003ff
    4bac:	feffffff 	.word	0xfeffffff
    4bb0:	000007fe 	.word	0x000007fe
    4bb4:	000007ff 	.word	0x000007ff

00004bb8 <__aeabi_dsub>:
    4bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bba:	4646      	mov	r6, r8
    4bbc:	46d6      	mov	lr, sl
    4bbe:	464f      	mov	r7, r9
    4bc0:	030c      	lsls	r4, r1, #12
    4bc2:	b5c0      	push	{r6, r7, lr}
    4bc4:	0fcd      	lsrs	r5, r1, #31
    4bc6:	004e      	lsls	r6, r1, #1
    4bc8:	0a61      	lsrs	r1, r4, #9
    4bca:	0f44      	lsrs	r4, r0, #29
    4bcc:	430c      	orrs	r4, r1
    4bce:	00c1      	lsls	r1, r0, #3
    4bd0:	0058      	lsls	r0, r3, #1
    4bd2:	0d40      	lsrs	r0, r0, #21
    4bd4:	4684      	mov	ip, r0
    4bd6:	468a      	mov	sl, r1
    4bd8:	000f      	movs	r7, r1
    4bda:	0319      	lsls	r1, r3, #12
    4bdc:	0f50      	lsrs	r0, r2, #29
    4bde:	0a49      	lsrs	r1, r1, #9
    4be0:	4301      	orrs	r1, r0
    4be2:	48c6      	ldr	r0, [pc, #792]	; (4efc <__aeabi_dsub+0x344>)
    4be4:	0d76      	lsrs	r6, r6, #21
    4be6:	46a8      	mov	r8, r5
    4be8:	0fdb      	lsrs	r3, r3, #31
    4bea:	00d2      	lsls	r2, r2, #3
    4bec:	4584      	cmp	ip, r0
    4bee:	d100      	bne.n	4bf2 <__aeabi_dsub+0x3a>
    4bf0:	e0d8      	b.n	4da4 <__aeabi_dsub+0x1ec>
    4bf2:	2001      	movs	r0, #1
    4bf4:	4043      	eors	r3, r0
    4bf6:	42ab      	cmp	r3, r5
    4bf8:	d100      	bne.n	4bfc <__aeabi_dsub+0x44>
    4bfa:	e0a6      	b.n	4d4a <__aeabi_dsub+0x192>
    4bfc:	4660      	mov	r0, ip
    4bfe:	1a35      	subs	r5, r6, r0
    4c00:	2d00      	cmp	r5, #0
    4c02:	dc00      	bgt.n	4c06 <__aeabi_dsub+0x4e>
    4c04:	e105      	b.n	4e12 <__aeabi_dsub+0x25a>
    4c06:	2800      	cmp	r0, #0
    4c08:	d110      	bne.n	4c2c <__aeabi_dsub+0x74>
    4c0a:	000b      	movs	r3, r1
    4c0c:	4313      	orrs	r3, r2
    4c0e:	d100      	bne.n	4c12 <__aeabi_dsub+0x5a>
    4c10:	e0d7      	b.n	4dc2 <__aeabi_dsub+0x20a>
    4c12:	1e6b      	subs	r3, r5, #1
    4c14:	2b00      	cmp	r3, #0
    4c16:	d000      	beq.n	4c1a <__aeabi_dsub+0x62>
    4c18:	e14b      	b.n	4eb2 <__aeabi_dsub+0x2fa>
    4c1a:	4653      	mov	r3, sl
    4c1c:	1a9f      	subs	r7, r3, r2
    4c1e:	45ba      	cmp	sl, r7
    4c20:	4180      	sbcs	r0, r0
    4c22:	1a64      	subs	r4, r4, r1
    4c24:	4240      	negs	r0, r0
    4c26:	1a24      	subs	r4, r4, r0
    4c28:	2601      	movs	r6, #1
    4c2a:	e01e      	b.n	4c6a <__aeabi_dsub+0xb2>
    4c2c:	4bb3      	ldr	r3, [pc, #716]	; (4efc <__aeabi_dsub+0x344>)
    4c2e:	429e      	cmp	r6, r3
    4c30:	d048      	beq.n	4cc4 <__aeabi_dsub+0x10c>
    4c32:	2380      	movs	r3, #128	; 0x80
    4c34:	041b      	lsls	r3, r3, #16
    4c36:	4319      	orrs	r1, r3
    4c38:	2d38      	cmp	r5, #56	; 0x38
    4c3a:	dd00      	ble.n	4c3e <__aeabi_dsub+0x86>
    4c3c:	e119      	b.n	4e72 <__aeabi_dsub+0x2ba>
    4c3e:	2d1f      	cmp	r5, #31
    4c40:	dd00      	ble.n	4c44 <__aeabi_dsub+0x8c>
    4c42:	e14c      	b.n	4ede <__aeabi_dsub+0x326>
    4c44:	2320      	movs	r3, #32
    4c46:	000f      	movs	r7, r1
    4c48:	1b5b      	subs	r3, r3, r5
    4c4a:	0010      	movs	r0, r2
    4c4c:	409a      	lsls	r2, r3
    4c4e:	409f      	lsls	r7, r3
    4c50:	40e8      	lsrs	r0, r5
    4c52:	1e53      	subs	r3, r2, #1
    4c54:	419a      	sbcs	r2, r3
    4c56:	40e9      	lsrs	r1, r5
    4c58:	4307      	orrs	r7, r0
    4c5a:	4317      	orrs	r7, r2
    4c5c:	4653      	mov	r3, sl
    4c5e:	1bdf      	subs	r7, r3, r7
    4c60:	1a61      	subs	r1, r4, r1
    4c62:	45ba      	cmp	sl, r7
    4c64:	41a4      	sbcs	r4, r4
    4c66:	4264      	negs	r4, r4
    4c68:	1b0c      	subs	r4, r1, r4
    4c6a:	0223      	lsls	r3, r4, #8
    4c6c:	d400      	bmi.n	4c70 <__aeabi_dsub+0xb8>
    4c6e:	e0c5      	b.n	4dfc <__aeabi_dsub+0x244>
    4c70:	0264      	lsls	r4, r4, #9
    4c72:	0a65      	lsrs	r5, r4, #9
    4c74:	2d00      	cmp	r5, #0
    4c76:	d100      	bne.n	4c7a <__aeabi_dsub+0xc2>
    4c78:	e0f6      	b.n	4e68 <__aeabi_dsub+0x2b0>
    4c7a:	0028      	movs	r0, r5
    4c7c:	f000 fb1e 	bl	52bc <__clzsi2>
    4c80:	0003      	movs	r3, r0
    4c82:	3b08      	subs	r3, #8
    4c84:	2b1f      	cmp	r3, #31
    4c86:	dd00      	ble.n	4c8a <__aeabi_dsub+0xd2>
    4c88:	e0e9      	b.n	4e5e <__aeabi_dsub+0x2a6>
    4c8a:	2220      	movs	r2, #32
    4c8c:	003c      	movs	r4, r7
    4c8e:	1ad2      	subs	r2, r2, r3
    4c90:	409d      	lsls	r5, r3
    4c92:	40d4      	lsrs	r4, r2
    4c94:	409f      	lsls	r7, r3
    4c96:	4325      	orrs	r5, r4
    4c98:	429e      	cmp	r6, r3
    4c9a:	dd00      	ble.n	4c9e <__aeabi_dsub+0xe6>
    4c9c:	e0db      	b.n	4e56 <__aeabi_dsub+0x29e>
    4c9e:	1b9e      	subs	r6, r3, r6
    4ca0:	1c73      	adds	r3, r6, #1
    4ca2:	2b1f      	cmp	r3, #31
    4ca4:	dd00      	ble.n	4ca8 <__aeabi_dsub+0xf0>
    4ca6:	e10a      	b.n	4ebe <__aeabi_dsub+0x306>
    4ca8:	2220      	movs	r2, #32
    4caa:	0038      	movs	r0, r7
    4cac:	1ad2      	subs	r2, r2, r3
    4cae:	0029      	movs	r1, r5
    4cb0:	4097      	lsls	r7, r2
    4cb2:	002c      	movs	r4, r5
    4cb4:	4091      	lsls	r1, r2
    4cb6:	40d8      	lsrs	r0, r3
    4cb8:	1e7a      	subs	r2, r7, #1
    4cba:	4197      	sbcs	r7, r2
    4cbc:	40dc      	lsrs	r4, r3
    4cbe:	2600      	movs	r6, #0
    4cc0:	4301      	orrs	r1, r0
    4cc2:	430f      	orrs	r7, r1
    4cc4:	077b      	lsls	r3, r7, #29
    4cc6:	d009      	beq.n	4cdc <__aeabi_dsub+0x124>
    4cc8:	230f      	movs	r3, #15
    4cca:	403b      	ands	r3, r7
    4ccc:	2b04      	cmp	r3, #4
    4cce:	d005      	beq.n	4cdc <__aeabi_dsub+0x124>
    4cd0:	1d3b      	adds	r3, r7, #4
    4cd2:	42bb      	cmp	r3, r7
    4cd4:	41bf      	sbcs	r7, r7
    4cd6:	427f      	negs	r7, r7
    4cd8:	19e4      	adds	r4, r4, r7
    4cda:	001f      	movs	r7, r3
    4cdc:	0223      	lsls	r3, r4, #8
    4cde:	d525      	bpl.n	4d2c <__aeabi_dsub+0x174>
    4ce0:	4b86      	ldr	r3, [pc, #536]	; (4efc <__aeabi_dsub+0x344>)
    4ce2:	3601      	adds	r6, #1
    4ce4:	429e      	cmp	r6, r3
    4ce6:	d100      	bne.n	4cea <__aeabi_dsub+0x132>
    4ce8:	e0af      	b.n	4e4a <__aeabi_dsub+0x292>
    4cea:	4b85      	ldr	r3, [pc, #532]	; (4f00 <__aeabi_dsub+0x348>)
    4cec:	2501      	movs	r5, #1
    4cee:	401c      	ands	r4, r3
    4cf0:	4643      	mov	r3, r8
    4cf2:	0762      	lsls	r2, r4, #29
    4cf4:	08ff      	lsrs	r7, r7, #3
    4cf6:	0264      	lsls	r4, r4, #9
    4cf8:	0576      	lsls	r6, r6, #21
    4cfa:	4317      	orrs	r7, r2
    4cfc:	0b24      	lsrs	r4, r4, #12
    4cfe:	0d76      	lsrs	r6, r6, #21
    4d00:	401d      	ands	r5, r3
    4d02:	2100      	movs	r1, #0
    4d04:	0324      	lsls	r4, r4, #12
    4d06:	0b23      	lsrs	r3, r4, #12
    4d08:	0d0c      	lsrs	r4, r1, #20
    4d0a:	4a7e      	ldr	r2, [pc, #504]	; (4f04 <__aeabi_dsub+0x34c>)
    4d0c:	0524      	lsls	r4, r4, #20
    4d0e:	431c      	orrs	r4, r3
    4d10:	4014      	ands	r4, r2
    4d12:	0533      	lsls	r3, r6, #20
    4d14:	4323      	orrs	r3, r4
    4d16:	005b      	lsls	r3, r3, #1
    4d18:	07ed      	lsls	r5, r5, #31
    4d1a:	085b      	lsrs	r3, r3, #1
    4d1c:	432b      	orrs	r3, r5
    4d1e:	0038      	movs	r0, r7
    4d20:	0019      	movs	r1, r3
    4d22:	bc1c      	pop	{r2, r3, r4}
    4d24:	4690      	mov	r8, r2
    4d26:	4699      	mov	r9, r3
    4d28:	46a2      	mov	sl, r4
    4d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d2c:	2501      	movs	r5, #1
    4d2e:	4643      	mov	r3, r8
    4d30:	0762      	lsls	r2, r4, #29
    4d32:	08ff      	lsrs	r7, r7, #3
    4d34:	4317      	orrs	r7, r2
    4d36:	08e4      	lsrs	r4, r4, #3
    4d38:	401d      	ands	r5, r3
    4d3a:	4b70      	ldr	r3, [pc, #448]	; (4efc <__aeabi_dsub+0x344>)
    4d3c:	429e      	cmp	r6, r3
    4d3e:	d036      	beq.n	4dae <__aeabi_dsub+0x1f6>
    4d40:	0324      	lsls	r4, r4, #12
    4d42:	0576      	lsls	r6, r6, #21
    4d44:	0b24      	lsrs	r4, r4, #12
    4d46:	0d76      	lsrs	r6, r6, #21
    4d48:	e7db      	b.n	4d02 <__aeabi_dsub+0x14a>
    4d4a:	4663      	mov	r3, ip
    4d4c:	1af3      	subs	r3, r6, r3
    4d4e:	2b00      	cmp	r3, #0
    4d50:	dc00      	bgt.n	4d54 <__aeabi_dsub+0x19c>
    4d52:	e094      	b.n	4e7e <__aeabi_dsub+0x2c6>
    4d54:	4660      	mov	r0, ip
    4d56:	2800      	cmp	r0, #0
    4d58:	d035      	beq.n	4dc6 <__aeabi_dsub+0x20e>
    4d5a:	4868      	ldr	r0, [pc, #416]	; (4efc <__aeabi_dsub+0x344>)
    4d5c:	4286      	cmp	r6, r0
    4d5e:	d0b1      	beq.n	4cc4 <__aeabi_dsub+0x10c>
    4d60:	2780      	movs	r7, #128	; 0x80
    4d62:	043f      	lsls	r7, r7, #16
    4d64:	4339      	orrs	r1, r7
    4d66:	2b38      	cmp	r3, #56	; 0x38
    4d68:	dc00      	bgt.n	4d6c <__aeabi_dsub+0x1b4>
    4d6a:	e0fd      	b.n	4f68 <__aeabi_dsub+0x3b0>
    4d6c:	430a      	orrs	r2, r1
    4d6e:	0017      	movs	r7, r2
    4d70:	2100      	movs	r1, #0
    4d72:	1e7a      	subs	r2, r7, #1
    4d74:	4197      	sbcs	r7, r2
    4d76:	4457      	add	r7, sl
    4d78:	4557      	cmp	r7, sl
    4d7a:	4180      	sbcs	r0, r0
    4d7c:	1909      	adds	r1, r1, r4
    4d7e:	4244      	negs	r4, r0
    4d80:	190c      	adds	r4, r1, r4
    4d82:	0223      	lsls	r3, r4, #8
    4d84:	d53a      	bpl.n	4dfc <__aeabi_dsub+0x244>
    4d86:	4b5d      	ldr	r3, [pc, #372]	; (4efc <__aeabi_dsub+0x344>)
    4d88:	3601      	adds	r6, #1
    4d8a:	429e      	cmp	r6, r3
    4d8c:	d100      	bne.n	4d90 <__aeabi_dsub+0x1d8>
    4d8e:	e14b      	b.n	5028 <__aeabi_dsub+0x470>
    4d90:	2201      	movs	r2, #1
    4d92:	4b5b      	ldr	r3, [pc, #364]	; (4f00 <__aeabi_dsub+0x348>)
    4d94:	401c      	ands	r4, r3
    4d96:	087b      	lsrs	r3, r7, #1
    4d98:	4017      	ands	r7, r2
    4d9a:	431f      	orrs	r7, r3
    4d9c:	07e2      	lsls	r2, r4, #31
    4d9e:	4317      	orrs	r7, r2
    4da0:	0864      	lsrs	r4, r4, #1
    4da2:	e78f      	b.n	4cc4 <__aeabi_dsub+0x10c>
    4da4:	0008      	movs	r0, r1
    4da6:	4310      	orrs	r0, r2
    4da8:	d000      	beq.n	4dac <__aeabi_dsub+0x1f4>
    4daa:	e724      	b.n	4bf6 <__aeabi_dsub+0x3e>
    4dac:	e721      	b.n	4bf2 <__aeabi_dsub+0x3a>
    4dae:	0023      	movs	r3, r4
    4db0:	433b      	orrs	r3, r7
    4db2:	d100      	bne.n	4db6 <__aeabi_dsub+0x1fe>
    4db4:	e1b9      	b.n	512a <__aeabi_dsub+0x572>
    4db6:	2280      	movs	r2, #128	; 0x80
    4db8:	0312      	lsls	r2, r2, #12
    4dba:	4314      	orrs	r4, r2
    4dbc:	0324      	lsls	r4, r4, #12
    4dbe:	0b24      	lsrs	r4, r4, #12
    4dc0:	e79f      	b.n	4d02 <__aeabi_dsub+0x14a>
    4dc2:	002e      	movs	r6, r5
    4dc4:	e77e      	b.n	4cc4 <__aeabi_dsub+0x10c>
    4dc6:	0008      	movs	r0, r1
    4dc8:	4310      	orrs	r0, r2
    4dca:	d100      	bne.n	4dce <__aeabi_dsub+0x216>
    4dcc:	e0ca      	b.n	4f64 <__aeabi_dsub+0x3ac>
    4dce:	1e58      	subs	r0, r3, #1
    4dd0:	4684      	mov	ip, r0
    4dd2:	2800      	cmp	r0, #0
    4dd4:	d000      	beq.n	4dd8 <__aeabi_dsub+0x220>
    4dd6:	e0e7      	b.n	4fa8 <__aeabi_dsub+0x3f0>
    4dd8:	4452      	add	r2, sl
    4dda:	4552      	cmp	r2, sl
    4ddc:	4180      	sbcs	r0, r0
    4dde:	1864      	adds	r4, r4, r1
    4de0:	4240      	negs	r0, r0
    4de2:	1824      	adds	r4, r4, r0
    4de4:	0017      	movs	r7, r2
    4de6:	2601      	movs	r6, #1
    4de8:	0223      	lsls	r3, r4, #8
    4dea:	d507      	bpl.n	4dfc <__aeabi_dsub+0x244>
    4dec:	2602      	movs	r6, #2
    4dee:	e7cf      	b.n	4d90 <__aeabi_dsub+0x1d8>
    4df0:	4664      	mov	r4, ip
    4df2:	432c      	orrs	r4, r5
    4df4:	d100      	bne.n	4df8 <__aeabi_dsub+0x240>
    4df6:	e1b3      	b.n	5160 <__aeabi_dsub+0x5a8>
    4df8:	002c      	movs	r4, r5
    4dfa:	4667      	mov	r7, ip
    4dfc:	077b      	lsls	r3, r7, #29
    4dfe:	d000      	beq.n	4e02 <__aeabi_dsub+0x24a>
    4e00:	e762      	b.n	4cc8 <__aeabi_dsub+0x110>
    4e02:	0763      	lsls	r3, r4, #29
    4e04:	08ff      	lsrs	r7, r7, #3
    4e06:	431f      	orrs	r7, r3
    4e08:	2501      	movs	r5, #1
    4e0a:	4643      	mov	r3, r8
    4e0c:	08e4      	lsrs	r4, r4, #3
    4e0e:	401d      	ands	r5, r3
    4e10:	e793      	b.n	4d3a <__aeabi_dsub+0x182>
    4e12:	2d00      	cmp	r5, #0
    4e14:	d178      	bne.n	4f08 <__aeabi_dsub+0x350>
    4e16:	1c75      	adds	r5, r6, #1
    4e18:	056d      	lsls	r5, r5, #21
    4e1a:	0d6d      	lsrs	r5, r5, #21
    4e1c:	2d01      	cmp	r5, #1
    4e1e:	dc00      	bgt.n	4e22 <__aeabi_dsub+0x26a>
    4e20:	e0f2      	b.n	5008 <__aeabi_dsub+0x450>
    4e22:	4650      	mov	r0, sl
    4e24:	1a80      	subs	r0, r0, r2
    4e26:	4582      	cmp	sl, r0
    4e28:	41bf      	sbcs	r7, r7
    4e2a:	1a65      	subs	r5, r4, r1
    4e2c:	427f      	negs	r7, r7
    4e2e:	1bed      	subs	r5, r5, r7
    4e30:	4684      	mov	ip, r0
    4e32:	0228      	lsls	r0, r5, #8
    4e34:	d400      	bmi.n	4e38 <__aeabi_dsub+0x280>
    4e36:	e08c      	b.n	4f52 <__aeabi_dsub+0x39a>
    4e38:	4650      	mov	r0, sl
    4e3a:	1a17      	subs	r7, r2, r0
    4e3c:	42ba      	cmp	r2, r7
    4e3e:	4192      	sbcs	r2, r2
    4e40:	1b0c      	subs	r4, r1, r4
    4e42:	4255      	negs	r5, r2
    4e44:	1b65      	subs	r5, r4, r5
    4e46:	4698      	mov	r8, r3
    4e48:	e714      	b.n	4c74 <__aeabi_dsub+0xbc>
    4e4a:	2501      	movs	r5, #1
    4e4c:	4643      	mov	r3, r8
    4e4e:	2400      	movs	r4, #0
    4e50:	401d      	ands	r5, r3
    4e52:	2700      	movs	r7, #0
    4e54:	e755      	b.n	4d02 <__aeabi_dsub+0x14a>
    4e56:	4c2a      	ldr	r4, [pc, #168]	; (4f00 <__aeabi_dsub+0x348>)
    4e58:	1af6      	subs	r6, r6, r3
    4e5a:	402c      	ands	r4, r5
    4e5c:	e732      	b.n	4cc4 <__aeabi_dsub+0x10c>
    4e5e:	003d      	movs	r5, r7
    4e60:	3828      	subs	r0, #40	; 0x28
    4e62:	4085      	lsls	r5, r0
    4e64:	2700      	movs	r7, #0
    4e66:	e717      	b.n	4c98 <__aeabi_dsub+0xe0>
    4e68:	0038      	movs	r0, r7
    4e6a:	f000 fa27 	bl	52bc <__clzsi2>
    4e6e:	3020      	adds	r0, #32
    4e70:	e706      	b.n	4c80 <__aeabi_dsub+0xc8>
    4e72:	430a      	orrs	r2, r1
    4e74:	0017      	movs	r7, r2
    4e76:	2100      	movs	r1, #0
    4e78:	1e7a      	subs	r2, r7, #1
    4e7a:	4197      	sbcs	r7, r2
    4e7c:	e6ee      	b.n	4c5c <__aeabi_dsub+0xa4>
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d000      	beq.n	4e84 <__aeabi_dsub+0x2cc>
    4e82:	e0e5      	b.n	5050 <__aeabi_dsub+0x498>
    4e84:	1c73      	adds	r3, r6, #1
    4e86:	469c      	mov	ip, r3
    4e88:	055b      	lsls	r3, r3, #21
    4e8a:	0d5b      	lsrs	r3, r3, #21
    4e8c:	2b01      	cmp	r3, #1
    4e8e:	dc00      	bgt.n	4e92 <__aeabi_dsub+0x2da>
    4e90:	e09f      	b.n	4fd2 <__aeabi_dsub+0x41a>
    4e92:	4b1a      	ldr	r3, [pc, #104]	; (4efc <__aeabi_dsub+0x344>)
    4e94:	459c      	cmp	ip, r3
    4e96:	d100      	bne.n	4e9a <__aeabi_dsub+0x2e2>
    4e98:	e0c5      	b.n	5026 <__aeabi_dsub+0x46e>
    4e9a:	4452      	add	r2, sl
    4e9c:	4552      	cmp	r2, sl
    4e9e:	4180      	sbcs	r0, r0
    4ea0:	1864      	adds	r4, r4, r1
    4ea2:	4240      	negs	r0, r0
    4ea4:	1824      	adds	r4, r4, r0
    4ea6:	07e7      	lsls	r7, r4, #31
    4ea8:	0852      	lsrs	r2, r2, #1
    4eaa:	4317      	orrs	r7, r2
    4eac:	0864      	lsrs	r4, r4, #1
    4eae:	4666      	mov	r6, ip
    4eb0:	e708      	b.n	4cc4 <__aeabi_dsub+0x10c>
    4eb2:	4812      	ldr	r0, [pc, #72]	; (4efc <__aeabi_dsub+0x344>)
    4eb4:	4285      	cmp	r5, r0
    4eb6:	d100      	bne.n	4eba <__aeabi_dsub+0x302>
    4eb8:	e085      	b.n	4fc6 <__aeabi_dsub+0x40e>
    4eba:	001d      	movs	r5, r3
    4ebc:	e6bc      	b.n	4c38 <__aeabi_dsub+0x80>
    4ebe:	0029      	movs	r1, r5
    4ec0:	3e1f      	subs	r6, #31
    4ec2:	40f1      	lsrs	r1, r6
    4ec4:	2b20      	cmp	r3, #32
    4ec6:	d100      	bne.n	4eca <__aeabi_dsub+0x312>
    4ec8:	e07f      	b.n	4fca <__aeabi_dsub+0x412>
    4eca:	2240      	movs	r2, #64	; 0x40
    4ecc:	1ad3      	subs	r3, r2, r3
    4ece:	409d      	lsls	r5, r3
    4ed0:	432f      	orrs	r7, r5
    4ed2:	1e7d      	subs	r5, r7, #1
    4ed4:	41af      	sbcs	r7, r5
    4ed6:	2400      	movs	r4, #0
    4ed8:	430f      	orrs	r7, r1
    4eda:	2600      	movs	r6, #0
    4edc:	e78e      	b.n	4dfc <__aeabi_dsub+0x244>
    4ede:	002b      	movs	r3, r5
    4ee0:	000f      	movs	r7, r1
    4ee2:	3b20      	subs	r3, #32
    4ee4:	40df      	lsrs	r7, r3
    4ee6:	2d20      	cmp	r5, #32
    4ee8:	d071      	beq.n	4fce <__aeabi_dsub+0x416>
    4eea:	2340      	movs	r3, #64	; 0x40
    4eec:	1b5d      	subs	r5, r3, r5
    4eee:	40a9      	lsls	r1, r5
    4ef0:	430a      	orrs	r2, r1
    4ef2:	1e51      	subs	r1, r2, #1
    4ef4:	418a      	sbcs	r2, r1
    4ef6:	2100      	movs	r1, #0
    4ef8:	4317      	orrs	r7, r2
    4efa:	e6af      	b.n	4c5c <__aeabi_dsub+0xa4>
    4efc:	000007ff 	.word	0x000007ff
    4f00:	ff7fffff 	.word	0xff7fffff
    4f04:	800fffff 	.word	0x800fffff
    4f08:	2e00      	cmp	r6, #0
    4f0a:	d03e      	beq.n	4f8a <__aeabi_dsub+0x3d2>
    4f0c:	4eb3      	ldr	r6, [pc, #716]	; (51dc <__aeabi_dsub+0x624>)
    4f0e:	45b4      	cmp	ip, r6
    4f10:	d045      	beq.n	4f9e <__aeabi_dsub+0x3e6>
    4f12:	2680      	movs	r6, #128	; 0x80
    4f14:	0436      	lsls	r6, r6, #16
    4f16:	426d      	negs	r5, r5
    4f18:	4334      	orrs	r4, r6
    4f1a:	2d38      	cmp	r5, #56	; 0x38
    4f1c:	dd00      	ble.n	4f20 <__aeabi_dsub+0x368>
    4f1e:	e0a8      	b.n	5072 <__aeabi_dsub+0x4ba>
    4f20:	2d1f      	cmp	r5, #31
    4f22:	dd00      	ble.n	4f26 <__aeabi_dsub+0x36e>
    4f24:	e11f      	b.n	5166 <__aeabi_dsub+0x5ae>
    4f26:	2620      	movs	r6, #32
    4f28:	0027      	movs	r7, r4
    4f2a:	4650      	mov	r0, sl
    4f2c:	1b76      	subs	r6, r6, r5
    4f2e:	40b7      	lsls	r7, r6
    4f30:	40e8      	lsrs	r0, r5
    4f32:	4307      	orrs	r7, r0
    4f34:	4650      	mov	r0, sl
    4f36:	40b0      	lsls	r0, r6
    4f38:	1e46      	subs	r6, r0, #1
    4f3a:	41b0      	sbcs	r0, r6
    4f3c:	40ec      	lsrs	r4, r5
    4f3e:	4338      	orrs	r0, r7
    4f40:	1a17      	subs	r7, r2, r0
    4f42:	42ba      	cmp	r2, r7
    4f44:	4192      	sbcs	r2, r2
    4f46:	1b0c      	subs	r4, r1, r4
    4f48:	4252      	negs	r2, r2
    4f4a:	1aa4      	subs	r4, r4, r2
    4f4c:	4666      	mov	r6, ip
    4f4e:	4698      	mov	r8, r3
    4f50:	e68b      	b.n	4c6a <__aeabi_dsub+0xb2>
    4f52:	4664      	mov	r4, ip
    4f54:	4667      	mov	r7, ip
    4f56:	432c      	orrs	r4, r5
    4f58:	d000      	beq.n	4f5c <__aeabi_dsub+0x3a4>
    4f5a:	e68b      	b.n	4c74 <__aeabi_dsub+0xbc>
    4f5c:	2500      	movs	r5, #0
    4f5e:	2600      	movs	r6, #0
    4f60:	2700      	movs	r7, #0
    4f62:	e6ea      	b.n	4d3a <__aeabi_dsub+0x182>
    4f64:	001e      	movs	r6, r3
    4f66:	e6ad      	b.n	4cc4 <__aeabi_dsub+0x10c>
    4f68:	2b1f      	cmp	r3, #31
    4f6a:	dc60      	bgt.n	502e <__aeabi_dsub+0x476>
    4f6c:	2720      	movs	r7, #32
    4f6e:	1af8      	subs	r0, r7, r3
    4f70:	000f      	movs	r7, r1
    4f72:	4684      	mov	ip, r0
    4f74:	4087      	lsls	r7, r0
    4f76:	0010      	movs	r0, r2
    4f78:	40d8      	lsrs	r0, r3
    4f7a:	4307      	orrs	r7, r0
    4f7c:	4660      	mov	r0, ip
    4f7e:	4082      	lsls	r2, r0
    4f80:	1e50      	subs	r0, r2, #1
    4f82:	4182      	sbcs	r2, r0
    4f84:	40d9      	lsrs	r1, r3
    4f86:	4317      	orrs	r7, r2
    4f88:	e6f5      	b.n	4d76 <__aeabi_dsub+0x1be>
    4f8a:	0026      	movs	r6, r4
    4f8c:	4650      	mov	r0, sl
    4f8e:	4306      	orrs	r6, r0
    4f90:	d005      	beq.n	4f9e <__aeabi_dsub+0x3e6>
    4f92:	43ed      	mvns	r5, r5
    4f94:	2d00      	cmp	r5, #0
    4f96:	d0d3      	beq.n	4f40 <__aeabi_dsub+0x388>
    4f98:	4e90      	ldr	r6, [pc, #576]	; (51dc <__aeabi_dsub+0x624>)
    4f9a:	45b4      	cmp	ip, r6
    4f9c:	d1bd      	bne.n	4f1a <__aeabi_dsub+0x362>
    4f9e:	000c      	movs	r4, r1
    4fa0:	0017      	movs	r7, r2
    4fa2:	4666      	mov	r6, ip
    4fa4:	4698      	mov	r8, r3
    4fa6:	e68d      	b.n	4cc4 <__aeabi_dsub+0x10c>
    4fa8:	488c      	ldr	r0, [pc, #560]	; (51dc <__aeabi_dsub+0x624>)
    4faa:	4283      	cmp	r3, r0
    4fac:	d00b      	beq.n	4fc6 <__aeabi_dsub+0x40e>
    4fae:	4663      	mov	r3, ip
    4fb0:	e6d9      	b.n	4d66 <__aeabi_dsub+0x1ae>
    4fb2:	2d00      	cmp	r5, #0
    4fb4:	d000      	beq.n	4fb8 <__aeabi_dsub+0x400>
    4fb6:	e096      	b.n	50e6 <__aeabi_dsub+0x52e>
    4fb8:	0008      	movs	r0, r1
    4fba:	4310      	orrs	r0, r2
    4fbc:	d100      	bne.n	4fc0 <__aeabi_dsub+0x408>
    4fbe:	e0e2      	b.n	5186 <__aeabi_dsub+0x5ce>
    4fc0:	000c      	movs	r4, r1
    4fc2:	0017      	movs	r7, r2
    4fc4:	4698      	mov	r8, r3
    4fc6:	4e85      	ldr	r6, [pc, #532]	; (51dc <__aeabi_dsub+0x624>)
    4fc8:	e67c      	b.n	4cc4 <__aeabi_dsub+0x10c>
    4fca:	2500      	movs	r5, #0
    4fcc:	e780      	b.n	4ed0 <__aeabi_dsub+0x318>
    4fce:	2100      	movs	r1, #0
    4fd0:	e78e      	b.n	4ef0 <__aeabi_dsub+0x338>
    4fd2:	0023      	movs	r3, r4
    4fd4:	4650      	mov	r0, sl
    4fd6:	4303      	orrs	r3, r0
    4fd8:	2e00      	cmp	r6, #0
    4fda:	d000      	beq.n	4fde <__aeabi_dsub+0x426>
    4fdc:	e0a8      	b.n	5130 <__aeabi_dsub+0x578>
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d100      	bne.n	4fe4 <__aeabi_dsub+0x42c>
    4fe2:	e0de      	b.n	51a2 <__aeabi_dsub+0x5ea>
    4fe4:	000b      	movs	r3, r1
    4fe6:	4313      	orrs	r3, r2
    4fe8:	d100      	bne.n	4fec <__aeabi_dsub+0x434>
    4fea:	e66b      	b.n	4cc4 <__aeabi_dsub+0x10c>
    4fec:	4452      	add	r2, sl
    4fee:	4552      	cmp	r2, sl
    4ff0:	4180      	sbcs	r0, r0
    4ff2:	1864      	adds	r4, r4, r1
    4ff4:	4240      	negs	r0, r0
    4ff6:	1824      	adds	r4, r4, r0
    4ff8:	0017      	movs	r7, r2
    4ffa:	0223      	lsls	r3, r4, #8
    4ffc:	d400      	bmi.n	5000 <__aeabi_dsub+0x448>
    4ffe:	e6fd      	b.n	4dfc <__aeabi_dsub+0x244>
    5000:	4b77      	ldr	r3, [pc, #476]	; (51e0 <__aeabi_dsub+0x628>)
    5002:	4666      	mov	r6, ip
    5004:	401c      	ands	r4, r3
    5006:	e65d      	b.n	4cc4 <__aeabi_dsub+0x10c>
    5008:	0025      	movs	r5, r4
    500a:	4650      	mov	r0, sl
    500c:	4305      	orrs	r5, r0
    500e:	2e00      	cmp	r6, #0
    5010:	d1cf      	bne.n	4fb2 <__aeabi_dsub+0x3fa>
    5012:	2d00      	cmp	r5, #0
    5014:	d14f      	bne.n	50b6 <__aeabi_dsub+0x4fe>
    5016:	000c      	movs	r4, r1
    5018:	4314      	orrs	r4, r2
    501a:	d100      	bne.n	501e <__aeabi_dsub+0x466>
    501c:	e0a0      	b.n	5160 <__aeabi_dsub+0x5a8>
    501e:	000c      	movs	r4, r1
    5020:	0017      	movs	r7, r2
    5022:	4698      	mov	r8, r3
    5024:	e64e      	b.n	4cc4 <__aeabi_dsub+0x10c>
    5026:	4666      	mov	r6, ip
    5028:	2400      	movs	r4, #0
    502a:	2700      	movs	r7, #0
    502c:	e685      	b.n	4d3a <__aeabi_dsub+0x182>
    502e:	001f      	movs	r7, r3
    5030:	0008      	movs	r0, r1
    5032:	3f20      	subs	r7, #32
    5034:	40f8      	lsrs	r0, r7
    5036:	0007      	movs	r7, r0
    5038:	2b20      	cmp	r3, #32
    503a:	d100      	bne.n	503e <__aeabi_dsub+0x486>
    503c:	e08e      	b.n	515c <__aeabi_dsub+0x5a4>
    503e:	2040      	movs	r0, #64	; 0x40
    5040:	1ac3      	subs	r3, r0, r3
    5042:	4099      	lsls	r1, r3
    5044:	430a      	orrs	r2, r1
    5046:	1e51      	subs	r1, r2, #1
    5048:	418a      	sbcs	r2, r1
    504a:	2100      	movs	r1, #0
    504c:	4317      	orrs	r7, r2
    504e:	e692      	b.n	4d76 <__aeabi_dsub+0x1be>
    5050:	2e00      	cmp	r6, #0
    5052:	d114      	bne.n	507e <__aeabi_dsub+0x4c6>
    5054:	0026      	movs	r6, r4
    5056:	4650      	mov	r0, sl
    5058:	4306      	orrs	r6, r0
    505a:	d062      	beq.n	5122 <__aeabi_dsub+0x56a>
    505c:	43db      	mvns	r3, r3
    505e:	2b00      	cmp	r3, #0
    5060:	d15c      	bne.n	511c <__aeabi_dsub+0x564>
    5062:	1887      	adds	r7, r0, r2
    5064:	4297      	cmp	r7, r2
    5066:	4192      	sbcs	r2, r2
    5068:	1864      	adds	r4, r4, r1
    506a:	4252      	negs	r2, r2
    506c:	18a4      	adds	r4, r4, r2
    506e:	4666      	mov	r6, ip
    5070:	e687      	b.n	4d82 <__aeabi_dsub+0x1ca>
    5072:	4650      	mov	r0, sl
    5074:	4320      	orrs	r0, r4
    5076:	1e44      	subs	r4, r0, #1
    5078:	41a0      	sbcs	r0, r4
    507a:	2400      	movs	r4, #0
    507c:	e760      	b.n	4f40 <__aeabi_dsub+0x388>
    507e:	4e57      	ldr	r6, [pc, #348]	; (51dc <__aeabi_dsub+0x624>)
    5080:	45b4      	cmp	ip, r6
    5082:	d04e      	beq.n	5122 <__aeabi_dsub+0x56a>
    5084:	2680      	movs	r6, #128	; 0x80
    5086:	0436      	lsls	r6, r6, #16
    5088:	425b      	negs	r3, r3
    508a:	4334      	orrs	r4, r6
    508c:	2b38      	cmp	r3, #56	; 0x38
    508e:	dd00      	ble.n	5092 <__aeabi_dsub+0x4da>
    5090:	e07f      	b.n	5192 <__aeabi_dsub+0x5da>
    5092:	2b1f      	cmp	r3, #31
    5094:	dd00      	ble.n	5098 <__aeabi_dsub+0x4e0>
    5096:	e08b      	b.n	51b0 <__aeabi_dsub+0x5f8>
    5098:	2620      	movs	r6, #32
    509a:	0027      	movs	r7, r4
    509c:	4650      	mov	r0, sl
    509e:	1af6      	subs	r6, r6, r3
    50a0:	40b7      	lsls	r7, r6
    50a2:	40d8      	lsrs	r0, r3
    50a4:	4307      	orrs	r7, r0
    50a6:	4650      	mov	r0, sl
    50a8:	40b0      	lsls	r0, r6
    50aa:	1e46      	subs	r6, r0, #1
    50ac:	41b0      	sbcs	r0, r6
    50ae:	4307      	orrs	r7, r0
    50b0:	40dc      	lsrs	r4, r3
    50b2:	18bf      	adds	r7, r7, r2
    50b4:	e7d6      	b.n	5064 <__aeabi_dsub+0x4ac>
    50b6:	000d      	movs	r5, r1
    50b8:	4315      	orrs	r5, r2
    50ba:	d100      	bne.n	50be <__aeabi_dsub+0x506>
    50bc:	e602      	b.n	4cc4 <__aeabi_dsub+0x10c>
    50be:	4650      	mov	r0, sl
    50c0:	1a80      	subs	r0, r0, r2
    50c2:	4582      	cmp	sl, r0
    50c4:	41bf      	sbcs	r7, r7
    50c6:	1a65      	subs	r5, r4, r1
    50c8:	427f      	negs	r7, r7
    50ca:	1bed      	subs	r5, r5, r7
    50cc:	4684      	mov	ip, r0
    50ce:	0228      	lsls	r0, r5, #8
    50d0:	d400      	bmi.n	50d4 <__aeabi_dsub+0x51c>
    50d2:	e68d      	b.n	4df0 <__aeabi_dsub+0x238>
    50d4:	4650      	mov	r0, sl
    50d6:	1a17      	subs	r7, r2, r0
    50d8:	42ba      	cmp	r2, r7
    50da:	4192      	sbcs	r2, r2
    50dc:	1b0c      	subs	r4, r1, r4
    50de:	4252      	negs	r2, r2
    50e0:	1aa4      	subs	r4, r4, r2
    50e2:	4698      	mov	r8, r3
    50e4:	e5ee      	b.n	4cc4 <__aeabi_dsub+0x10c>
    50e6:	000d      	movs	r5, r1
    50e8:	4315      	orrs	r5, r2
    50ea:	d100      	bne.n	50ee <__aeabi_dsub+0x536>
    50ec:	e76b      	b.n	4fc6 <__aeabi_dsub+0x40e>
    50ee:	4650      	mov	r0, sl
    50f0:	0767      	lsls	r7, r4, #29
    50f2:	08c0      	lsrs	r0, r0, #3
    50f4:	4307      	orrs	r7, r0
    50f6:	2080      	movs	r0, #128	; 0x80
    50f8:	08e4      	lsrs	r4, r4, #3
    50fa:	0300      	lsls	r0, r0, #12
    50fc:	4204      	tst	r4, r0
    50fe:	d007      	beq.n	5110 <__aeabi_dsub+0x558>
    5100:	08cd      	lsrs	r5, r1, #3
    5102:	4205      	tst	r5, r0
    5104:	d104      	bne.n	5110 <__aeabi_dsub+0x558>
    5106:	002c      	movs	r4, r5
    5108:	4698      	mov	r8, r3
    510a:	08d7      	lsrs	r7, r2, #3
    510c:	0749      	lsls	r1, r1, #29
    510e:	430f      	orrs	r7, r1
    5110:	0f7b      	lsrs	r3, r7, #29
    5112:	00e4      	lsls	r4, r4, #3
    5114:	431c      	orrs	r4, r3
    5116:	00ff      	lsls	r7, r7, #3
    5118:	4e30      	ldr	r6, [pc, #192]	; (51dc <__aeabi_dsub+0x624>)
    511a:	e5d3      	b.n	4cc4 <__aeabi_dsub+0x10c>
    511c:	4e2f      	ldr	r6, [pc, #188]	; (51dc <__aeabi_dsub+0x624>)
    511e:	45b4      	cmp	ip, r6
    5120:	d1b4      	bne.n	508c <__aeabi_dsub+0x4d4>
    5122:	000c      	movs	r4, r1
    5124:	0017      	movs	r7, r2
    5126:	4666      	mov	r6, ip
    5128:	e5cc      	b.n	4cc4 <__aeabi_dsub+0x10c>
    512a:	2700      	movs	r7, #0
    512c:	2400      	movs	r4, #0
    512e:	e5e8      	b.n	4d02 <__aeabi_dsub+0x14a>
    5130:	2b00      	cmp	r3, #0
    5132:	d039      	beq.n	51a8 <__aeabi_dsub+0x5f0>
    5134:	000b      	movs	r3, r1
    5136:	4313      	orrs	r3, r2
    5138:	d100      	bne.n	513c <__aeabi_dsub+0x584>
    513a:	e744      	b.n	4fc6 <__aeabi_dsub+0x40e>
    513c:	08c0      	lsrs	r0, r0, #3
    513e:	0767      	lsls	r7, r4, #29
    5140:	4307      	orrs	r7, r0
    5142:	2080      	movs	r0, #128	; 0x80
    5144:	08e4      	lsrs	r4, r4, #3
    5146:	0300      	lsls	r0, r0, #12
    5148:	4204      	tst	r4, r0
    514a:	d0e1      	beq.n	5110 <__aeabi_dsub+0x558>
    514c:	08cb      	lsrs	r3, r1, #3
    514e:	4203      	tst	r3, r0
    5150:	d1de      	bne.n	5110 <__aeabi_dsub+0x558>
    5152:	08d7      	lsrs	r7, r2, #3
    5154:	0749      	lsls	r1, r1, #29
    5156:	430f      	orrs	r7, r1
    5158:	001c      	movs	r4, r3
    515a:	e7d9      	b.n	5110 <__aeabi_dsub+0x558>
    515c:	2100      	movs	r1, #0
    515e:	e771      	b.n	5044 <__aeabi_dsub+0x48c>
    5160:	2500      	movs	r5, #0
    5162:	2700      	movs	r7, #0
    5164:	e5e9      	b.n	4d3a <__aeabi_dsub+0x182>
    5166:	002e      	movs	r6, r5
    5168:	0027      	movs	r7, r4
    516a:	3e20      	subs	r6, #32
    516c:	40f7      	lsrs	r7, r6
    516e:	2d20      	cmp	r5, #32
    5170:	d02f      	beq.n	51d2 <__aeabi_dsub+0x61a>
    5172:	2640      	movs	r6, #64	; 0x40
    5174:	1b75      	subs	r5, r6, r5
    5176:	40ac      	lsls	r4, r5
    5178:	4650      	mov	r0, sl
    517a:	4320      	orrs	r0, r4
    517c:	1e44      	subs	r4, r0, #1
    517e:	41a0      	sbcs	r0, r4
    5180:	2400      	movs	r4, #0
    5182:	4338      	orrs	r0, r7
    5184:	e6dc      	b.n	4f40 <__aeabi_dsub+0x388>
    5186:	2480      	movs	r4, #128	; 0x80
    5188:	2500      	movs	r5, #0
    518a:	0324      	lsls	r4, r4, #12
    518c:	4e13      	ldr	r6, [pc, #76]	; (51dc <__aeabi_dsub+0x624>)
    518e:	2700      	movs	r7, #0
    5190:	e5d3      	b.n	4d3a <__aeabi_dsub+0x182>
    5192:	4650      	mov	r0, sl
    5194:	4320      	orrs	r0, r4
    5196:	0007      	movs	r7, r0
    5198:	1e78      	subs	r0, r7, #1
    519a:	4187      	sbcs	r7, r0
    519c:	2400      	movs	r4, #0
    519e:	18bf      	adds	r7, r7, r2
    51a0:	e760      	b.n	5064 <__aeabi_dsub+0x4ac>
    51a2:	000c      	movs	r4, r1
    51a4:	0017      	movs	r7, r2
    51a6:	e58d      	b.n	4cc4 <__aeabi_dsub+0x10c>
    51a8:	000c      	movs	r4, r1
    51aa:	0017      	movs	r7, r2
    51ac:	4e0b      	ldr	r6, [pc, #44]	; (51dc <__aeabi_dsub+0x624>)
    51ae:	e589      	b.n	4cc4 <__aeabi_dsub+0x10c>
    51b0:	001e      	movs	r6, r3
    51b2:	0027      	movs	r7, r4
    51b4:	3e20      	subs	r6, #32
    51b6:	40f7      	lsrs	r7, r6
    51b8:	2b20      	cmp	r3, #32
    51ba:	d00c      	beq.n	51d6 <__aeabi_dsub+0x61e>
    51bc:	2640      	movs	r6, #64	; 0x40
    51be:	1af3      	subs	r3, r6, r3
    51c0:	409c      	lsls	r4, r3
    51c2:	4650      	mov	r0, sl
    51c4:	4320      	orrs	r0, r4
    51c6:	1e44      	subs	r4, r0, #1
    51c8:	41a0      	sbcs	r0, r4
    51ca:	4307      	orrs	r7, r0
    51cc:	2400      	movs	r4, #0
    51ce:	18bf      	adds	r7, r7, r2
    51d0:	e748      	b.n	5064 <__aeabi_dsub+0x4ac>
    51d2:	2400      	movs	r4, #0
    51d4:	e7d0      	b.n	5178 <__aeabi_dsub+0x5c0>
    51d6:	2400      	movs	r4, #0
    51d8:	e7f3      	b.n	51c2 <__aeabi_dsub+0x60a>
    51da:	46c0      	nop			; (mov r8, r8)
    51dc:	000007ff 	.word	0x000007ff
    51e0:	ff7fffff 	.word	0xff7fffff

000051e4 <__aeabi_d2iz>:
    51e4:	b530      	push	{r4, r5, lr}
    51e6:	4d13      	ldr	r5, [pc, #76]	; (5234 <__aeabi_d2iz+0x50>)
    51e8:	030a      	lsls	r2, r1, #12
    51ea:	004b      	lsls	r3, r1, #1
    51ec:	0b12      	lsrs	r2, r2, #12
    51ee:	0d5b      	lsrs	r3, r3, #21
    51f0:	0fc9      	lsrs	r1, r1, #31
    51f2:	2400      	movs	r4, #0
    51f4:	42ab      	cmp	r3, r5
    51f6:	dd10      	ble.n	521a <__aeabi_d2iz+0x36>
    51f8:	4c0f      	ldr	r4, [pc, #60]	; (5238 <__aeabi_d2iz+0x54>)
    51fa:	42a3      	cmp	r3, r4
    51fc:	dc0f      	bgt.n	521e <__aeabi_d2iz+0x3a>
    51fe:	2480      	movs	r4, #128	; 0x80
    5200:	4d0e      	ldr	r5, [pc, #56]	; (523c <__aeabi_d2iz+0x58>)
    5202:	0364      	lsls	r4, r4, #13
    5204:	4322      	orrs	r2, r4
    5206:	1aed      	subs	r5, r5, r3
    5208:	2d1f      	cmp	r5, #31
    520a:	dd0b      	ble.n	5224 <__aeabi_d2iz+0x40>
    520c:	480c      	ldr	r0, [pc, #48]	; (5240 <__aeabi_d2iz+0x5c>)
    520e:	1ac3      	subs	r3, r0, r3
    5210:	40da      	lsrs	r2, r3
    5212:	4254      	negs	r4, r2
    5214:	2900      	cmp	r1, #0
    5216:	d100      	bne.n	521a <__aeabi_d2iz+0x36>
    5218:	0014      	movs	r4, r2
    521a:	0020      	movs	r0, r4
    521c:	bd30      	pop	{r4, r5, pc}
    521e:	4b09      	ldr	r3, [pc, #36]	; (5244 <__aeabi_d2iz+0x60>)
    5220:	18cc      	adds	r4, r1, r3
    5222:	e7fa      	b.n	521a <__aeabi_d2iz+0x36>
    5224:	4c08      	ldr	r4, [pc, #32]	; (5248 <__aeabi_d2iz+0x64>)
    5226:	40e8      	lsrs	r0, r5
    5228:	46a4      	mov	ip, r4
    522a:	4463      	add	r3, ip
    522c:	409a      	lsls	r2, r3
    522e:	4302      	orrs	r2, r0
    5230:	e7ef      	b.n	5212 <__aeabi_d2iz+0x2e>
    5232:	46c0      	nop			; (mov r8, r8)
    5234:	000003fe 	.word	0x000003fe
    5238:	0000041d 	.word	0x0000041d
    523c:	00000433 	.word	0x00000433
    5240:	00000413 	.word	0x00000413
    5244:	7fffffff 	.word	0x7fffffff
    5248:	fffffbed 	.word	0xfffffbed

0000524c <__aeabi_ui2d>:
    524c:	b510      	push	{r4, lr}
    524e:	1e04      	subs	r4, r0, #0
    5250:	d028      	beq.n	52a4 <__aeabi_ui2d+0x58>
    5252:	f000 f833 	bl	52bc <__clzsi2>
    5256:	4b15      	ldr	r3, [pc, #84]	; (52ac <__aeabi_ui2d+0x60>)
    5258:	4a15      	ldr	r2, [pc, #84]	; (52b0 <__aeabi_ui2d+0x64>)
    525a:	1a1b      	subs	r3, r3, r0
    525c:	1ad2      	subs	r2, r2, r3
    525e:	2a1f      	cmp	r2, #31
    5260:	dd15      	ble.n	528e <__aeabi_ui2d+0x42>
    5262:	4a14      	ldr	r2, [pc, #80]	; (52b4 <__aeabi_ui2d+0x68>)
    5264:	1ad2      	subs	r2, r2, r3
    5266:	4094      	lsls	r4, r2
    5268:	2200      	movs	r2, #0
    526a:	0324      	lsls	r4, r4, #12
    526c:	055b      	lsls	r3, r3, #21
    526e:	0b24      	lsrs	r4, r4, #12
    5270:	0d5b      	lsrs	r3, r3, #21
    5272:	2100      	movs	r1, #0
    5274:	0010      	movs	r0, r2
    5276:	0324      	lsls	r4, r4, #12
    5278:	0d0a      	lsrs	r2, r1, #20
    527a:	0b24      	lsrs	r4, r4, #12
    527c:	0512      	lsls	r2, r2, #20
    527e:	4322      	orrs	r2, r4
    5280:	4c0d      	ldr	r4, [pc, #52]	; (52b8 <__aeabi_ui2d+0x6c>)
    5282:	051b      	lsls	r3, r3, #20
    5284:	4022      	ands	r2, r4
    5286:	4313      	orrs	r3, r2
    5288:	005b      	lsls	r3, r3, #1
    528a:	0859      	lsrs	r1, r3, #1
    528c:	bd10      	pop	{r4, pc}
    528e:	0021      	movs	r1, r4
    5290:	4091      	lsls	r1, r2
    5292:	000a      	movs	r2, r1
    5294:	210b      	movs	r1, #11
    5296:	1a08      	subs	r0, r1, r0
    5298:	40c4      	lsrs	r4, r0
    529a:	055b      	lsls	r3, r3, #21
    529c:	0324      	lsls	r4, r4, #12
    529e:	0b24      	lsrs	r4, r4, #12
    52a0:	0d5b      	lsrs	r3, r3, #21
    52a2:	e7e6      	b.n	5272 <__aeabi_ui2d+0x26>
    52a4:	2300      	movs	r3, #0
    52a6:	2400      	movs	r4, #0
    52a8:	2200      	movs	r2, #0
    52aa:	e7e2      	b.n	5272 <__aeabi_ui2d+0x26>
    52ac:	0000041e 	.word	0x0000041e
    52b0:	00000433 	.word	0x00000433
    52b4:	00000413 	.word	0x00000413
    52b8:	800fffff 	.word	0x800fffff

000052bc <__clzsi2>:
    52bc:	211c      	movs	r1, #28
    52be:	2301      	movs	r3, #1
    52c0:	041b      	lsls	r3, r3, #16
    52c2:	4298      	cmp	r0, r3
    52c4:	d301      	bcc.n	52ca <__clzsi2+0xe>
    52c6:	0c00      	lsrs	r0, r0, #16
    52c8:	3910      	subs	r1, #16
    52ca:	0a1b      	lsrs	r3, r3, #8
    52cc:	4298      	cmp	r0, r3
    52ce:	d301      	bcc.n	52d4 <__clzsi2+0x18>
    52d0:	0a00      	lsrs	r0, r0, #8
    52d2:	3908      	subs	r1, #8
    52d4:	091b      	lsrs	r3, r3, #4
    52d6:	4298      	cmp	r0, r3
    52d8:	d301      	bcc.n	52de <__clzsi2+0x22>
    52da:	0900      	lsrs	r0, r0, #4
    52dc:	3904      	subs	r1, #4
    52de:	a202      	add	r2, pc, #8	; (adr r2, 52e8 <__clzsi2+0x2c>)
    52e0:	5c10      	ldrb	r0, [r2, r0]
    52e2:	1840      	adds	r0, r0, r1
    52e4:	4770      	bx	lr
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	02020304 	.word	0x02020304
    52ec:	01010101 	.word	0x01010101
	...

000052f8 <__libc_init_array>:
    52f8:	b570      	push	{r4, r5, r6, lr}
    52fa:	2600      	movs	r6, #0
    52fc:	4d0c      	ldr	r5, [pc, #48]	; (5330 <__libc_init_array+0x38>)
    52fe:	4c0d      	ldr	r4, [pc, #52]	; (5334 <__libc_init_array+0x3c>)
    5300:	1b64      	subs	r4, r4, r5
    5302:	10a4      	asrs	r4, r4, #2
    5304:	42a6      	cmp	r6, r4
    5306:	d109      	bne.n	531c <__libc_init_array+0x24>
    5308:	2600      	movs	r6, #0
    530a:	f000 f9db 	bl	56c4 <_init>
    530e:	4d0a      	ldr	r5, [pc, #40]	; (5338 <__libc_init_array+0x40>)
    5310:	4c0a      	ldr	r4, [pc, #40]	; (533c <__libc_init_array+0x44>)
    5312:	1b64      	subs	r4, r4, r5
    5314:	10a4      	asrs	r4, r4, #2
    5316:	42a6      	cmp	r6, r4
    5318:	d105      	bne.n	5326 <__libc_init_array+0x2e>
    531a:	bd70      	pop	{r4, r5, r6, pc}
    531c:	00b3      	lsls	r3, r6, #2
    531e:	58eb      	ldr	r3, [r5, r3]
    5320:	4798      	blx	r3
    5322:	3601      	adds	r6, #1
    5324:	e7ee      	b.n	5304 <__libc_init_array+0xc>
    5326:	00b3      	lsls	r3, r6, #2
    5328:	58eb      	ldr	r3, [r5, r3]
    532a:	4798      	blx	r3
    532c:	3601      	adds	r6, #1
    532e:	e7f2      	b.n	5316 <__libc_init_array+0x1e>
    5330:	000056d0 	.word	0x000056d0
    5334:	000056d0 	.word	0x000056d0
    5338:	000056d0 	.word	0x000056d0
    533c:	000056d4 	.word	0x000056d4

00005340 <malloc>:
    5340:	b510      	push	{r4, lr}
    5342:	4b03      	ldr	r3, [pc, #12]	; (5350 <malloc+0x10>)
    5344:	0001      	movs	r1, r0
    5346:	6818      	ldr	r0, [r3, #0]
    5348:	f000 f80e 	bl	5368 <_malloc_r>
    534c:	bd10      	pop	{r4, pc}
    534e:	46c0      	nop			; (mov r8, r8)
    5350:	20000058 	.word	0x20000058

00005354 <memcpy>:
    5354:	2300      	movs	r3, #0
    5356:	b510      	push	{r4, lr}
    5358:	429a      	cmp	r2, r3
    535a:	d100      	bne.n	535e <memcpy+0xa>
    535c:	bd10      	pop	{r4, pc}
    535e:	5ccc      	ldrb	r4, [r1, r3]
    5360:	54c4      	strb	r4, [r0, r3]
    5362:	3301      	adds	r3, #1
    5364:	e7f8      	b.n	5358 <memcpy+0x4>
	...

00005368 <_malloc_r>:
    5368:	2303      	movs	r3, #3
    536a:	b570      	push	{r4, r5, r6, lr}
    536c:	1ccd      	adds	r5, r1, #3
    536e:	439d      	bics	r5, r3
    5370:	3508      	adds	r5, #8
    5372:	0006      	movs	r6, r0
    5374:	2d0c      	cmp	r5, #12
    5376:	d21e      	bcs.n	53b6 <_malloc_r+0x4e>
    5378:	250c      	movs	r5, #12
    537a:	42a9      	cmp	r1, r5
    537c:	d81d      	bhi.n	53ba <_malloc_r+0x52>
    537e:	0030      	movs	r0, r6
    5380:	f000 f862 	bl	5448 <__malloc_lock>
    5384:	4a25      	ldr	r2, [pc, #148]	; (541c <_malloc_r+0xb4>)
    5386:	6814      	ldr	r4, [r2, #0]
    5388:	0021      	movs	r1, r4
    538a:	2900      	cmp	r1, #0
    538c:	d119      	bne.n	53c2 <_malloc_r+0x5a>
    538e:	4c24      	ldr	r4, [pc, #144]	; (5420 <_malloc_r+0xb8>)
    5390:	6823      	ldr	r3, [r4, #0]
    5392:	2b00      	cmp	r3, #0
    5394:	d103      	bne.n	539e <_malloc_r+0x36>
    5396:	0030      	movs	r0, r6
    5398:	f000 f844 	bl	5424 <_sbrk_r>
    539c:	6020      	str	r0, [r4, #0]
    539e:	0029      	movs	r1, r5
    53a0:	0030      	movs	r0, r6
    53a2:	f000 f83f 	bl	5424 <_sbrk_r>
    53a6:	1c43      	adds	r3, r0, #1
    53a8:	d12c      	bne.n	5404 <_malloc_r+0x9c>
    53aa:	230c      	movs	r3, #12
    53ac:	0030      	movs	r0, r6
    53ae:	6033      	str	r3, [r6, #0]
    53b0:	f000 f84b 	bl	544a <__malloc_unlock>
    53b4:	e003      	b.n	53be <_malloc_r+0x56>
    53b6:	2d00      	cmp	r5, #0
    53b8:	dadf      	bge.n	537a <_malloc_r+0x12>
    53ba:	230c      	movs	r3, #12
    53bc:	6033      	str	r3, [r6, #0]
    53be:	2000      	movs	r0, #0
    53c0:	bd70      	pop	{r4, r5, r6, pc}
    53c2:	680b      	ldr	r3, [r1, #0]
    53c4:	1b5b      	subs	r3, r3, r5
    53c6:	d41a      	bmi.n	53fe <_malloc_r+0x96>
    53c8:	2b0b      	cmp	r3, #11
    53ca:	d903      	bls.n	53d4 <_malloc_r+0x6c>
    53cc:	600b      	str	r3, [r1, #0]
    53ce:	18cc      	adds	r4, r1, r3
    53d0:	6025      	str	r5, [r4, #0]
    53d2:	e003      	b.n	53dc <_malloc_r+0x74>
    53d4:	428c      	cmp	r4, r1
    53d6:	d10e      	bne.n	53f6 <_malloc_r+0x8e>
    53d8:	6863      	ldr	r3, [r4, #4]
    53da:	6013      	str	r3, [r2, #0]
    53dc:	0030      	movs	r0, r6
    53de:	f000 f834 	bl	544a <__malloc_unlock>
    53e2:	0020      	movs	r0, r4
    53e4:	2207      	movs	r2, #7
    53e6:	300b      	adds	r0, #11
    53e8:	1d23      	adds	r3, r4, #4
    53ea:	4390      	bics	r0, r2
    53ec:	1ac3      	subs	r3, r0, r3
    53ee:	d0e7      	beq.n	53c0 <_malloc_r+0x58>
    53f0:	425a      	negs	r2, r3
    53f2:	50e2      	str	r2, [r4, r3]
    53f4:	e7e4      	b.n	53c0 <_malloc_r+0x58>
    53f6:	684b      	ldr	r3, [r1, #4]
    53f8:	6063      	str	r3, [r4, #4]
    53fa:	000c      	movs	r4, r1
    53fc:	e7ee      	b.n	53dc <_malloc_r+0x74>
    53fe:	000c      	movs	r4, r1
    5400:	6849      	ldr	r1, [r1, #4]
    5402:	e7c2      	b.n	538a <_malloc_r+0x22>
    5404:	2303      	movs	r3, #3
    5406:	1cc4      	adds	r4, r0, #3
    5408:	439c      	bics	r4, r3
    540a:	42a0      	cmp	r0, r4
    540c:	d0e0      	beq.n	53d0 <_malloc_r+0x68>
    540e:	1a21      	subs	r1, r4, r0
    5410:	0030      	movs	r0, r6
    5412:	f000 f807 	bl	5424 <_sbrk_r>
    5416:	1c43      	adds	r3, r0, #1
    5418:	d1da      	bne.n	53d0 <_malloc_r+0x68>
    541a:	e7c6      	b.n	53aa <_malloc_r+0x42>
    541c:	20000df0 	.word	0x20000df0
    5420:	20000df4 	.word	0x20000df4

00005424 <_sbrk_r>:
    5424:	2300      	movs	r3, #0
    5426:	b570      	push	{r4, r5, r6, lr}
    5428:	4c06      	ldr	r4, [pc, #24]	; (5444 <_sbrk_r+0x20>)
    542a:	0005      	movs	r5, r0
    542c:	0008      	movs	r0, r1
    542e:	6023      	str	r3, [r4, #0]
    5430:	f7fe f9fe 	bl	3830 <_sbrk>
    5434:	1c43      	adds	r3, r0, #1
    5436:	d103      	bne.n	5440 <_sbrk_r+0x1c>
    5438:	6823      	ldr	r3, [r4, #0]
    543a:	2b00      	cmp	r3, #0
    543c:	d000      	beq.n	5440 <_sbrk_r+0x1c>
    543e:	602b      	str	r3, [r5, #0]
    5440:	bd70      	pop	{r4, r5, r6, pc}
    5442:	46c0      	nop			; (mov r8, r8)
    5444:	200011f8 	.word	0x200011f8

00005448 <__malloc_lock>:
    5448:	4770      	bx	lr

0000544a <__malloc_unlock>:
    544a:	4770      	bx	lr

0000544c <_tcc_intflag>:
    544c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    545c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    546c:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    547c:	2c00 4200 3000 4200 3400 4200 3800 4200     .,.B.0.B.4.B.8.B
    548c:	3c00 4200 0800 1000 2000 4000 8000 0000     .<.B..... .@....

0000549c <tc_interrupt_vectors.13123>:
    549c:	1312 1514 0016 0000 1a62 0000 1cae 0000     ........b.......
    54ac:	1cae 0000 1cae 0000 1cae 0000 1cae 0000     ................
    54bc:	1cae 0000 1cae 0000 1cae 0000 1cae 0000     ................
    54cc:	1cae 0000 1cae 0000 1cae 0000 1cae 0000     ................
    54dc:	1cae 0000 1cae 0000 1a4a 0000 1cae 0000     ........J.......
    54ec:	1cae 0000 1cae 0000 1cae 0000 1cae 0000     ................
    54fc:	1cae 0000 1cae 0000 1cae 0000 1cae 0000     ................
    550c:	1cae 0000 1cae 0000 1cae 0000 1cae 0000     ................
    551c:	1cae 0000 1cae 0000 1a5a 0000 1cae 0000     ........Z.......
    552c:	1cae 0000 1cae 0000 1cae 0000 1cae 0000     ................
    553c:	1cae 0000 1cae 0000 1cae 0000 1cae 0000     ................
    554c:	1cae 0000 1cae 0000 1cae 0000 1cae 0000     ................
    555c:	1cae 0000 1cae 0000 1a52 0000 1a6a 0000     ........R...j...
    556c:	1a32 0000 1a42 0000 1a3a 0000 0002 0000     2...B...:.......
    557c:	0003 0000 0028 0000 0029 0000 0004 0000     ....(...).......
    558c:	0005 0000 0006 0000 0007 0000 0020 0000     ............ ...
    559c:	0021 0000 0022 0000 0023 0000 0024 0000     !..."...#...$...
    55ac:	0025 0000 0026 0000 0027 0000 0008 0000     %...&...'.......
    55bc:	0009 0000 000a 0000 000b 0000 0800 4200     ...............B
    55cc:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    55dc:	1c00 4200 2ade 0000 2ac6 0000 2aba 0000     ...B.*...*...*..
    55ec:	2ad2 0000 2a90 0000                         .*...*..

000055f4 <inputAnalogChannles>:
    55f4:	0c00 0013                                   ....

000055f8 <outputDetectAnalogChannles>:
    55f8:	0504 0806 2fde 0000 2fda 0000 2fda 0000     ...../.../.../..
    5608:	303c 0000 303c 0000 2ff2 0000 2fe4 0000     <0..<0.../.../..
    5618:	2ff8 0000 302a 0000 31c0 0000 31a0 0000     ./..*0...1...1..
    5628:	31a0 0000 322c 0000 31b2 0000 31ce 0000     .1..,2...1...1..
    5638:	31a4 0000 31dc 0000 321c 0000 4248 0000     .1...1...2..HB..
    5648:	422a 0000 41e4 0000 4102 0000 41e4 0000     *B...A...A...A..
    5658:	421c 0000 41e4 0000 4102 0000 422a 0000     .B...A...A..*B..
    5668:	422a 0000 421c 0000 4102 0000 40fa 0000     *B...B...A...@..
    5678:	40fa 0000 40fa 0000 4460 0000 48a8 0000     .@...@..`D...H..
    5688:	4768 0000 4768 0000 4764 0000 4880 0000     hG..hG..dG...H..
    5698:	4880 0000 4872 0000 4764 0000 4880 0000     .H..rH..dG...H..
    56a8:	4872 0000 4880 0000 4764 0000 4888 0000     rH...H..dG...H..
    56b8:	4888 0000 4888 0000 4a8c 0000               .H...H...J..

000056c4 <_init>:
    56c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56c6:	46c0      	nop			; (mov r8, r8)
    56c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    56ca:	bc08      	pop	{r3}
    56cc:	469e      	mov	lr, r3
    56ce:	4770      	bx	lr

000056d0 <__init_array_start>:
    56d0:	000000dd 	.word	0x000000dd

000056d4 <_fini>:
    56d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56d6:	46c0      	nop			; (mov r8, r8)
    56d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    56da:	bc08      	pop	{r3}
    56dc:	469e      	mov	lr, r3
    56de:	4770      	bx	lr

000056e0 <__fini_array_start>:
    56e0:	000000b5 	.word	0x000000b5
