
FlutterSAMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f54  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  20000000  00004f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001108  200000a8  00004ffc  000200a8  2**2
                  ALLOC
  3 .stack        00002000  200011b0  00006104  000200a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b772  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f33  00000000  00000000  0006b89b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008201  00000000  00000000  000717ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000830  00000000  00000000  000799cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000920  00000000  00000000  0007a1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000adf8  00000000  00000000  0007ab1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015399  00000000  00000000  00085917  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e0ce  00000000  00000000  0009acb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000015b0  00000000  00000000  00128d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 31 00 20 e5 2f 00 00 e1 2f 00 00 e1 2f 00 00     .1. ./.../.../..
	...
      2c:	e1 2f 00 00 00 00 00 00 00 00 00 00 e1 2f 00 00     ./.........../..
      3c:	e1 2f 00 00 e1 2f 00 00 e1 2f 00 00 e1 2f 00 00     ./.../.../.../..
      4c:	e1 2f 00 00 e1 2f 00 00 e1 2f 00 00 e1 2f 00 00     ./.../.../.../..
      5c:	e1 2f 00 00 e1 2f 00 00 79 1c 00 00 89 1c 00 00     ./.../..y.......
      6c:	99 1c 00 00 a9 1c 00 00 b9 1c 00 00 c9 1c 00 00     ................
      7c:	21 09 00 00 31 09 00 00 41 09 00 00 e9 09 00 00     !...1...A.......
      8c:	f9 09 00 00 09 0a 00 00 19 0a 00 00 29 0a 00 00     ............)...
      9c:	d5 17 00 00 e1 2f 00 00 e1 2f 00 00 e1 2f 00 00     ...../.../.../..
      ac:	e1 2f 00 00 00 00 00 00                             ./......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a8 	.word	0x200000a8
      d4:	00000000 	.word	0x00000000
      d8:	00004f54 	.word	0x00004f54

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000ac 	.word	0x200000ac
     108:	00004f54 	.word	0x00004f54
     10c:	00004f54 	.word	0x00004f54
     110:	00000000 	.word	0x00000000

00000114 <i2c_master_init>:
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     116:	46d6      	mov	lr, sl
     118:	464f      	mov	r7, r9
     11a:	4646      	mov	r6, r8
     11c:	b5c0      	push	{r6, r7, lr}
     11e:	b08a      	sub	sp, #40	; 0x28
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     120:	0006      	movs	r6, r0
     122:	000f      	movs	r7, r1
				packet->data[counter++] = i2c_module->DATA.reg;
     124:	0014      	movs	r4, r2
		while (tmp_data_length--) {
     126:	6031      	str	r1, [r6, #0]
     128:	0008      	movs	r0, r1
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     12a:	4ba0      	ldr	r3, [pc, #640]	; (3ac <i2c_master_init+0x298>)
     12c:	4798      	blx	r3
     12e:	4aa0      	ldr	r2, [pc, #640]	; (3b0 <i2c_master_init+0x29c>)
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     130:	6a11      	ldr	r1, [r2, #32]
     132:	1c85      	adds	r5, r0, #2
     134:	2301      	movs	r3, #1
     136:	40ab      	lsls	r3, r5
     138:	430b      	orrs	r3, r1
     13a:	6213      	str	r3, [r2, #32]
     13c:	a909      	add	r1, sp, #36	; 0x24
     13e:	7b23      	ldrb	r3, [r4, #12]
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     140:	700b      	strb	r3, [r1, #0]
     142:	3014      	adds	r0, #20
     144:	b2c5      	uxtb	r5, r0
     146:	0028      	movs	r0, r5
     148:	4b9a      	ldr	r3, [pc, #616]	; (3b4 <i2c_master_init+0x2a0>)
     14a:	4798      	blx	r3
     14c:	0028      	movs	r0, r5
     14e:	4b9a      	ldr	r3, [pc, #616]	; (3b8 <i2c_master_init+0x2a4>)
				packet->data[counter++] = i2c_module->DATA.reg;
     150:	4798      	blx	r3
				tmp_status = _i2c_master_wait_for_bus(module);
     152:	7b20      	ldrb	r0, [r4, #12]
				break;
			}
		}

		if (module->send_stop) {
     154:	2100      	movs	r1, #0
     156:	4b99      	ldr	r3, [pc, #612]	; (3bc <i2c_master_init+0x2a8>)
     158:	4798      	blx	r3
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     15a:	683b      	ldr	r3, [r7, #0]
     15c:	201c      	movs	r0, #28
     15e:	079b      	lsls	r3, r3, #30
		packet->data[counter] = i2c_module->DATA.reg;
     160:	d505      	bpl.n	16e <i2c_master_init+0x5a>
     162:	b00a      	add	sp, #40	; 0x28
     164:	bc1c      	pop	{r2, r3, r4}
     166:	4690      	mov	r8, r2
     168:	4699      	mov	r9, r3
     16a:	46a2      	mov	sl, r4
     16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_i2c_master_wait_for_sync(module);
     16e:	683b      	ldr	r3, [r7, #0]
     170:	3817      	subs	r0, #23
     172:	07db      	lsls	r3, r3, #31
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     174:	d4f5      	bmi.n	162 <i2c_master_init+0x4e>
     176:	6830      	ldr	r0, [r6, #0]
     178:	4b8c      	ldr	r3, [pc, #560]	; (3ac <i2c_master_init+0x298>)
     17a:	4699      	mov	r9, r3
     17c:	4798      	blx	r3
     17e:	0005      	movs	r5, r0
				return STATUS_ERR_PACKET_COLLISION;
     180:	498f      	ldr	r1, [pc, #572]	; (3c0 <i2c_master_init+0x2ac>)
     182:	4b90      	ldr	r3, [pc, #576]	; (3c4 <i2c_master_init+0x2b0>)
     184:	4798      	blx	r3
     186:	00ad      	lsls	r5, r5, #2
     188:	4b8f      	ldr	r3, [pc, #572]	; (3c8 <i2c_master_init+0x2b4>)
     18a:	50ee      	str	r6, [r5, r3]
     18c:	2300      	movs	r3, #0
     18e:	7633      	strb	r3, [r6, #24]
     190:	7673      	strb	r3, [r6, #25]
     192:	2500      	movs	r5, #0
     194:	8373      	strh	r3, [r6, #26]
     196:	83b3      	strh	r3, [r6, #28]
     198:	2225      	movs	r2, #37	; 0x25
     19a:	54b5      	strb	r5, [r6, r2]
     19c:	6233      	str	r3, [r6, #32]
     19e:	3314      	adds	r3, #20
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     1a0:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1a2:	6833      	ldr	r3, [r6, #0]
     1a4:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     1a6:	0018      	movs	r0, r3
     1a8:	47c8      	blx	r9
     1aa:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1ac:	2380      	movs	r3, #128	; 0x80
     1ae:	aa08      	add	r2, sp, #32
     1b0:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1b2:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1b4:	2301      	movs	r3, #1
     1b6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     1b8:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1ba:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     1bc:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     1be:	2800      	cmp	r0, #0
     1c0:	d100      	bne.n	1c4 <i2c_master_init+0xb0>
     1c2:	e0af      	b.n	324 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1c4:	ab08      	add	r3, sp, #32
     1c6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1c8:	2302      	movs	r3, #2
     1ca:	aa08      	add	r2, sp, #32
     1cc:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     1ce:	0c00      	lsrs	r0, r0, #16
     1d0:	b2c0      	uxtb	r0, r0
     1d2:	0011      	movs	r1, r2
     1d4:	4b7d      	ldr	r3, [pc, #500]	; (3cc <i2c_master_init+0x2b8>)
     1d6:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     1d8:	2f00      	cmp	r7, #0
     1da:	d100      	bne.n	1de <i2c_master_init+0xca>
     1dc:	e0a7      	b.n	32e <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     1de:	ab08      	add	r3, sp, #32
     1e0:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1e2:	2302      	movs	r3, #2
     1e4:	aa08      	add	r2, sp, #32
     1e6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     1e8:	0c3f      	lsrs	r7, r7, #16
     1ea:	b2f8      	uxtb	r0, r7
     1ec:	0011      	movs	r1, r2
     1ee:	4b77      	ldr	r3, [pc, #476]	; (3cc <i2c_master_init+0x2b8>)
     1f0:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     1f2:	8aa3      	ldrh	r3, [r4, #20]
     1f4:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     1f6:	8ae3      	ldrh	r3, [r4, #22]
     1f8:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     1fa:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     1fc:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     1fe:	2b00      	cmp	r3, #0
     200:	d104      	bne.n	20c <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     202:	4b73      	ldr	r3, [pc, #460]	; (3d0 <i2c_master_init+0x2bc>)
     204:	789b      	ldrb	r3, [r3, #2]
     206:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     208:	0fdb      	lsrs	r3, r3, #31
     20a:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     20c:	68a1      	ldr	r1, [r4, #8]
     20e:	6923      	ldr	r3, [r4, #16]
     210:	430b      	orrs	r3, r1
     212:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     214:	2224      	movs	r2, #36	; 0x24
     216:	5ca2      	ldrb	r2, [r4, r2]
     218:	2a00      	cmp	r2, #0
     21a:	d002      	beq.n	222 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     21c:	2280      	movs	r2, #128	; 0x80
     21e:	05d2      	lsls	r2, r2, #23
     220:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     222:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     224:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     226:	222c      	movs	r2, #44	; 0x2c
     228:	5ca2      	ldrb	r2, [r4, r2]
     22a:	2a00      	cmp	r2, #0
     22c:	d103      	bne.n	236 <i2c_master_init+0x122>
     22e:	2280      	movs	r2, #128	; 0x80
     230:	0492      	lsls	r2, r2, #18
     232:	4291      	cmp	r1, r2
     234:	d102      	bne.n	23c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     236:	2280      	movs	r2, #128	; 0x80
     238:	0512      	lsls	r2, r2, #20
     23a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     23c:	222d      	movs	r2, #45	; 0x2d
     23e:	5ca2      	ldrb	r2, [r4, r2]
     240:	2a00      	cmp	r2, #0
     242:	d002      	beq.n	24a <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     244:	2280      	movs	r2, #128	; 0x80
     246:	0412      	lsls	r2, r2, #16
     248:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     24a:	222e      	movs	r2, #46	; 0x2e
     24c:	5ca2      	ldrb	r2, [r4, r2]
     24e:	2a00      	cmp	r2, #0
     250:	d002      	beq.n	258 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     252:	2280      	movs	r2, #128	; 0x80
     254:	03d2      	lsls	r2, r2, #15
     256:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     258:	4642      	mov	r2, r8
     25a:	6812      	ldr	r2, [r2, #0]
     25c:	4313      	orrs	r3, r2
     25e:	4642      	mov	r2, r8
     260:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     262:	2380      	movs	r3, #128	; 0x80
     264:	005b      	lsls	r3, r3, #1
     266:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     268:	4648      	mov	r0, r9
     26a:	3014      	adds	r0, #20
     26c:	b2c0      	uxtb	r0, r0
     26e:	4b59      	ldr	r3, [pc, #356]	; (3d4 <i2c_master_init+0x2c0>)
     270:	4798      	blx	r3
     272:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     274:	23fa      	movs	r3, #250	; 0xfa
     276:	009b      	lsls	r3, r3, #2
     278:	6822      	ldr	r2, [r4, #0]
     27a:	435a      	muls	r2, r3
     27c:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     27e:	6863      	ldr	r3, [r4, #4]
     280:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     282:	4d55      	ldr	r5, [pc, #340]	; (3d8 <i2c_master_init+0x2c4>)
     284:	47a8      	blx	r5
     286:	9000      	str	r0, [sp, #0]
     288:	9101      	str	r1, [sp, #4]
     28a:	464b      	mov	r3, r9
     28c:	0058      	lsls	r0, r3, #1
     28e:	47a8      	blx	r5
     290:	9002      	str	r0, [sp, #8]
     292:	9103      	str	r1, [sp, #12]
     294:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     296:	47a8      	blx	r5
     298:	9004      	str	r0, [sp, #16]
     29a:	9105      	str	r1, [sp, #20]
     29c:	4f4f      	ldr	r7, [pc, #316]	; (3dc <i2c_master_init+0x2c8>)
     29e:	4a50      	ldr	r2, [pc, #320]	; (3e0 <i2c_master_init+0x2cc>)
     2a0:	4b50      	ldr	r3, [pc, #320]	; (3e4 <i2c_master_init+0x2d0>)
     2a2:	9800      	ldr	r0, [sp, #0]
     2a4:	9901      	ldr	r1, [sp, #4]
     2a6:	47b8      	blx	r7
     2a8:	0002      	movs	r2, r0
     2aa:	000b      	movs	r3, r1
     2ac:	9804      	ldr	r0, [sp, #16]
     2ae:	9905      	ldr	r1, [sp, #20]
     2b0:	47b8      	blx	r7
     2b2:	4e4d      	ldr	r6, [pc, #308]	; (3e8 <i2c_master_init+0x2d4>)
     2b4:	2200      	movs	r2, #0
     2b6:	4b4d      	ldr	r3, [pc, #308]	; (3ec <i2c_master_init+0x2d8>)
     2b8:	47b0      	blx	r6
     2ba:	9004      	str	r0, [sp, #16]
     2bc:	9105      	str	r1, [sp, #20]
     2be:	4648      	mov	r0, r9
     2c0:	47a8      	blx	r5
     2c2:	0002      	movs	r2, r0
     2c4:	000b      	movs	r3, r1
     2c6:	9804      	ldr	r0, [sp, #16]
     2c8:	9905      	ldr	r1, [sp, #20]
     2ca:	47b8      	blx	r7
     2cc:	0002      	movs	r2, r0
     2ce:	000b      	movs	r3, r1
     2d0:	4d47      	ldr	r5, [pc, #284]	; (3f0 <i2c_master_init+0x2dc>)
     2d2:	9800      	ldr	r0, [sp, #0]
     2d4:	9901      	ldr	r1, [sp, #4]
     2d6:	47a8      	blx	r5
     2d8:	9a02      	ldr	r2, [sp, #8]
     2da:	9b03      	ldr	r3, [sp, #12]
     2dc:	47b0      	blx	r6
     2de:	2200      	movs	r2, #0
     2e0:	4b44      	ldr	r3, [pc, #272]	; (3f4 <i2c_master_init+0x2e0>)
     2e2:	47a8      	blx	r5
     2e4:	9a02      	ldr	r2, [sp, #8]
     2e6:	9b03      	ldr	r3, [sp, #12]
     2e8:	4d43      	ldr	r5, [pc, #268]	; (3f8 <i2c_master_init+0x2e4>)
     2ea:	47a8      	blx	r5
     2ec:	4b43      	ldr	r3, [pc, #268]	; (3fc <i2c_master_init+0x2e8>)
     2ee:	4798      	blx	r3
     2f0:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     2f2:	2380      	movs	r3, #128	; 0x80
     2f4:	049b      	lsls	r3, r3, #18
     2f6:	68a2      	ldr	r2, [r4, #8]
     2f8:	429a      	cmp	r2, r3
     2fa:	d01e      	beq.n	33a <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     2fc:	0003      	movs	r3, r0
     2fe:	2040      	movs	r0, #64	; 0x40
     300:	2dff      	cmp	r5, #255	; 0xff
     302:	d900      	bls.n	306 <i2c_master_init+0x1f2>
     304:	e72d      	b.n	162 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     306:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     308:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     30a:	25ff      	movs	r5, #255	; 0xff
     30c:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     30e:	0624      	lsls	r4, r4, #24
     310:	4325      	orrs	r5, r4
     312:	0400      	lsls	r0, r0, #16
     314:	23ff      	movs	r3, #255	; 0xff
     316:	041b      	lsls	r3, r3, #16
     318:	4018      	ands	r0, r3
     31a:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     31c:	4643      	mov	r3, r8
     31e:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     320:	2000      	movs	r0, #0
     322:	e71e      	b.n	162 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     324:	2100      	movs	r1, #0
     326:	4640      	mov	r0, r8
     328:	4b35      	ldr	r3, [pc, #212]	; (400 <i2c_master_init+0x2ec>)
     32a:	4798      	blx	r3
     32c:	e74a      	b.n	1c4 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     32e:	2101      	movs	r1, #1
     330:	4640      	mov	r0, r8
     332:	4b33      	ldr	r3, [pc, #204]	; (400 <i2c_master_init+0x2ec>)
     334:	4798      	blx	r3
     336:	0007      	movs	r7, r0
     338:	e751      	b.n	1de <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     33a:	26fa      	movs	r6, #250	; 0xfa
     33c:	00b6      	lsls	r6, r6, #2
     33e:	4653      	mov	r3, sl
     340:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     342:	9800      	ldr	r0, [sp, #0]
     344:	9901      	ldr	r1, [sp, #4]
     346:	0002      	movs	r2, r0
     348:	000b      	movs	r3, r1
     34a:	4c27      	ldr	r4, [pc, #156]	; (3e8 <i2c_master_init+0x2d4>)
     34c:	47a0      	blx	r4
     34e:	9000      	str	r0, [sp, #0]
     350:	9101      	str	r1, [sp, #4]
     352:	0030      	movs	r0, r6
     354:	4b20      	ldr	r3, [pc, #128]	; (3d8 <i2c_master_init+0x2c4>)
     356:	4798      	blx	r3
     358:	2200      	movs	r2, #0
     35a:	4b2a      	ldr	r3, [pc, #168]	; (404 <i2c_master_init+0x2f0>)
     35c:	47b8      	blx	r7
     35e:	0002      	movs	r2, r0
     360:	000b      	movs	r3, r1
     362:	9800      	ldr	r0, [sp, #0]
     364:	9901      	ldr	r1, [sp, #4]
     366:	4c24      	ldr	r4, [pc, #144]	; (3f8 <i2c_master_init+0x2e4>)
     368:	47a0      	blx	r4
     36a:	2200      	movs	r2, #0
     36c:	4b21      	ldr	r3, [pc, #132]	; (3f4 <i2c_master_init+0x2e0>)
     36e:	4c20      	ldr	r4, [pc, #128]	; (3f0 <i2c_master_init+0x2dc>)
     370:	47a0      	blx	r4
     372:	4b22      	ldr	r3, [pc, #136]	; (3fc <i2c_master_init+0x2e8>)
     374:	4798      	blx	r3
     376:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     378:	d00c      	beq.n	394 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     37a:	0031      	movs	r1, r6
     37c:	9807      	ldr	r0, [sp, #28]
     37e:	4b22      	ldr	r3, [pc, #136]	; (408 <i2c_master_init+0x2f4>)
     380:	4798      	blx	r3
     382:	3802      	subs	r0, #2
     384:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     386:	002b      	movs	r3, r5
     388:	2dff      	cmp	r5, #255	; 0xff
     38a:	d80c      	bhi.n	3a6 <i2c_master_init+0x292>
     38c:	28ff      	cmp	r0, #255	; 0xff
     38e:	d9bc      	bls.n	30a <i2c_master_init+0x1f6>
     390:	2040      	movs	r0, #64	; 0x40
     392:	e6e6      	b.n	162 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     394:	0071      	lsls	r1, r6, #1
     396:	1e48      	subs	r0, r1, #1
     398:	9b07      	ldr	r3, [sp, #28]
     39a:	469c      	mov	ip, r3
     39c:	4460      	add	r0, ip
     39e:	4b1a      	ldr	r3, [pc, #104]	; (408 <i2c_master_init+0x2f4>)
     3a0:	4798      	blx	r3
     3a2:	3801      	subs	r0, #1
     3a4:	e7ef      	b.n	386 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3a6:	2040      	movs	r0, #64	; 0x40
     3a8:	e6db      	b.n	162 <i2c_master_init+0x4e>
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	00001bd1 	.word	0x00001bd1
     3b0:	40000400 	.word	0x40000400
     3b4:	00002e89 	.word	0x00002e89
     3b8:	00002dfd 	.word	0x00002dfd
     3bc:	00001a0d 	.word	0x00001a0d
     3c0:	000006e9 	.word	0x000006e9
     3c4:	00001c0d 	.word	0x00001c0d
     3c8:	20000f04 	.word	0x20000f04
     3cc:	00002f81 	.word	0x00002f81
     3d0:	41002000 	.word	0x41002000
     3d4:	00002ea5 	.word	0x00002ea5
     3d8:	00004ad5 	.word	0x00004ad5
     3dc:	00003f41 	.word	0x00003f41
     3e0:	e826d695 	.word	0xe826d695
     3e4:	3e112e0b 	.word	0x3e112e0b
     3e8:	000032b9 	.word	0x000032b9
     3ec:	40240000 	.word	0x40240000
     3f0:	00004441 	.word	0x00004441
     3f4:	3ff00000 	.word	0x3ff00000
     3f8:	000038d9 	.word	0x000038d9
     3fc:	00004a6d 	.word	0x00004a6d
     400:	00001a59 	.word	0x00001a59
     404:	40080000 	.word	0x40080000
     408:	0000314d 	.word	0x0000314d

0000040c <_i2c_master_address_response>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     40c:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     40e:	7e1a      	ldrb	r2, [r3, #24]
     410:	0792      	lsls	r2, r2, #30
     412:	d507      	bpl.n	424 <_i2c_master_address_response+0x18>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     414:	2202      	movs	r2, #2
     416:	761a      	strb	r2, [r3, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     418:	8b5b      	ldrh	r3, [r3, #26]
     41a:	079b      	lsls	r3, r3, #30
			return STATUS_ERR_PACKET_COLLISION;
     41c:	2041      	movs	r0, #65	; 0x41
	return STATUS_OK;
     41e:	17db      	asrs	r3, r3, #31
     420:	4018      	ands	r0, r3
}
     422:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     424:	8b5a      	ldrh	r2, [r3, #26]
     426:	0752      	lsls	r2, r2, #29
     428:	d506      	bpl.n	438 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     42a:	6859      	ldr	r1, [r3, #4]
     42c:	22c0      	movs	r2, #192	; 0xc0
     42e:	0292      	lsls	r2, r2, #10
     430:	430a      	orrs	r2, r1
     432:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     434:	2018      	movs	r0, #24
     436:	e7f4      	b.n	422 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     438:	2000      	movs	r0, #0
     43a:	e7f2      	b.n	422 <_i2c_master_address_response+0x16>

0000043c <_i2c_master_wait_for_bus>:
{
     43c:	b530      	push	{r4, r5, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     43e:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
     440:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     442:	2401      	movs	r4, #1
     444:	2502      	movs	r5, #2
     446:	7e11      	ldrb	r1, [r2, #24]
     448:	4221      	tst	r1, r4
     44a:	d10b      	bne.n	464 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     44c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     44e:	4229      	tst	r1, r5
     450:	d106      	bne.n	460 <_i2c_master_wait_for_bus+0x24>
		if (++timeout_counter >= module->buffer_timeout) {
     452:	3301      	adds	r3, #1
     454:	b29b      	uxth	r3, r3
     456:	8901      	ldrh	r1, [r0, #8]
     458:	4299      	cmp	r1, r3
     45a:	d8f4      	bhi.n	446 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     45c:	2012      	movs	r0, #18
     45e:	e002      	b.n	466 <_i2c_master_wait_for_bus+0x2a>
	return STATUS_OK;
     460:	2000      	movs	r0, #0
     462:	e000      	b.n	466 <_i2c_master_wait_for_bus+0x2a>
     464:	2000      	movs	r0, #0
}
     466:	bd30      	pop	{r4, r5, pc}

00000468 <_i2c_master_send_hs_master_code>:
{
     468:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     46a:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     46c:	6862      	ldr	r2, [r4, #4]
     46e:	2380      	movs	r3, #128	; 0x80
     470:	02db      	lsls	r3, r3, #11
     472:	4313      	orrs	r3, r2
     474:	6063      	str	r3, [r4, #4]
	i2c_module->ADDR.reg = hs_master_code;
     476:	6261      	str	r1, [r4, #36]	; 0x24
	tmp_status = _i2c_master_wait_for_bus(module);
     478:	4b02      	ldr	r3, [pc, #8]	; (484 <_i2c_master_send_hs_master_code+0x1c>)
     47a:	4798      	blx	r3
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     47c:	2301      	movs	r3, #1
     47e:	7623      	strb	r3, [r4, #24]
}
     480:	bd10      	pop	{r4, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	0000043d 	.word	0x0000043d

00000488 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     488:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     48a:	2207      	movs	r2, #7
     48c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     48e:	421a      	tst	r2, r3
     490:	d1fc      	bne.n	48c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     492:	4770      	bx	lr

00000494 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     494:	b570      	push	{r4, r5, r6, lr}
     496:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     498:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     49a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     49c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     49e:	8b83      	ldrh	r3, [r0, #28]
     4a0:	1aed      	subs	r5, r5, r3
     4a2:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     4a4:	8b83      	ldrh	r3, [r0, #28]
     4a6:	3b01      	subs	r3, #1
     4a8:	b29b      	uxth	r3, r3
     4aa:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     4ac:	0113      	lsls	r3, r2, #4
     4ae:	d51d      	bpl.n	4ec <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     4b0:	7ac3      	ldrb	r3, [r0, #11]
     4b2:	2b00      	cmp	r3, #0
     4b4:	d003      	beq.n	4be <_i2c_master_read+0x2a>
     4b6:	8b83      	ldrh	r3, [r0, #28]
     4b8:	b29b      	uxth	r3, r3
     4ba:	2b01      	cmp	r3, #1
     4bc:	d010      	beq.n	4e0 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     4be:	8ba3      	ldrh	r3, [r4, #28]
     4c0:	b29b      	uxth	r3, r3
     4c2:	2b00      	cmp	r3, #0
     4c4:	d102      	bne.n	4cc <_i2c_master_read+0x38>
		if (module->send_stop) {
     4c6:	7aa3      	ldrb	r3, [r4, #10]
     4c8:	2b00      	cmp	r3, #0
     4ca:	d11c      	bne.n	506 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     4cc:	0020      	movs	r0, r4
     4ce:	4b12      	ldr	r3, [pc, #72]	; (518 <_i2c_master_read+0x84>)
     4d0:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     4d2:	6a23      	ldr	r3, [r4, #32]
     4d4:	195d      	adds	r5, r3, r5
     4d6:	2328      	movs	r3, #40	; 0x28
     4d8:	5cf3      	ldrb	r3, [r6, r3]
     4da:	b2db      	uxtb	r3, r3
     4dc:	702b      	strb	r3, [r5, #0]
}
     4de:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     4e0:	6872      	ldr	r2, [r6, #4]
     4e2:	2380      	movs	r3, #128	; 0x80
     4e4:	02db      	lsls	r3, r3, #11
     4e6:	4313      	orrs	r3, r2
     4e8:	6073      	str	r3, [r6, #4]
     4ea:	e7e8      	b.n	4be <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     4ec:	7ac3      	ldrb	r3, [r0, #11]
     4ee:	2b00      	cmp	r3, #0
     4f0:	d0e5      	beq.n	4be <_i2c_master_read+0x2a>
     4f2:	8b83      	ldrh	r3, [r0, #28]
     4f4:	b29b      	uxth	r3, r3
     4f6:	2b00      	cmp	r3, #0
     4f8:	d1e1      	bne.n	4be <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     4fa:	6872      	ldr	r2, [r6, #4]
     4fc:	2380      	movs	r3, #128	; 0x80
     4fe:	02db      	lsls	r3, r3, #11
     500:	4313      	orrs	r3, r2
     502:	6073      	str	r3, [r6, #4]
     504:	e7db      	b.n	4be <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     506:	0020      	movs	r0, r4
     508:	4b03      	ldr	r3, [pc, #12]	; (518 <_i2c_master_read+0x84>)
     50a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     50c:	6872      	ldr	r2, [r6, #4]
     50e:	23c0      	movs	r3, #192	; 0xc0
     510:	029b      	lsls	r3, r3, #10
     512:	4313      	orrs	r3, r2
     514:	6073      	str	r3, [r6, #4]
     516:	e7d9      	b.n	4cc <_i2c_master_read+0x38>
     518:	00000489 	.word	0x00000489

0000051c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     51c:	b570      	push	{r4, r5, r6, lr}
     51e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     520:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     522:	8b6b      	ldrh	r3, [r5, #26]
     524:	075b      	lsls	r3, r3, #29
     526:	d503      	bpl.n	530 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     528:	221e      	movs	r2, #30
     52a:	2325      	movs	r3, #37	; 0x25
     52c:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     52e:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     530:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     532:	8b83      	ldrh	r3, [r0, #28]
     534:	1af6      	subs	r6, r6, r3
     536:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     538:	8b83      	ldrh	r3, [r0, #28]
     53a:	3b01      	subs	r3, #1
     53c:	b29b      	uxth	r3, r3
     53e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     540:	4b04      	ldr	r3, [pc, #16]	; (554 <_i2c_master_write+0x38>)
     542:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     544:	6a23      	ldr	r3, [r4, #32]
     546:	199e      	adds	r6, r3, r6
     548:	7833      	ldrb	r3, [r6, #0]
     54a:	b2db      	uxtb	r3, r3
     54c:	2228      	movs	r2, #40	; 0x28
     54e:	54ab      	strb	r3, [r5, r2]
     550:	e7ed      	b.n	52e <_i2c_master_write+0x12>
     552:	46c0      	nop			; (mov r8, r8)
     554:	00000489 	.word	0x00000489

00000558 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     558:	b570      	push	{r4, r5, r6, lr}
     55a:	0005      	movs	r5, r0
     55c:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     55e:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     560:	7a4b      	ldrb	r3, [r1, #9]
     562:	2b00      	cmp	r3, #0
     564:	d11a      	bne.n	59c <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     566:	6873      	ldr	r3, [r6, #4]
     568:	4a13      	ldr	r2, [pc, #76]	; (5b8 <_i2c_master_write_packet+0x60>)
     56a:	4013      	ands	r3, r2
     56c:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     56e:	6863      	ldr	r3, [r4, #4]
     570:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     572:	8863      	ldrh	r3, [r4, #2]
     574:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     576:	2200      	movs	r2, #0
     578:	2324      	movs	r3, #36	; 0x24
     57a:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     57c:	3205      	adds	r2, #5
     57e:	3301      	adds	r3, #1
     580:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     582:	3b22      	subs	r3, #34	; 0x22
     584:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     586:	7a23      	ldrb	r3, [r4, #8]
     588:	2b00      	cmp	r3, #0
     58a:	d10b      	bne.n	5a4 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     58c:	8823      	ldrh	r3, [r4, #0]
     58e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     590:	7a62      	ldrb	r2, [r4, #9]
     592:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     594:	4313      	orrs	r3, r2
     596:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     598:	2000      	movs	r0, #0
     59a:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     59c:	7a89      	ldrb	r1, [r1, #10]
     59e:	4b07      	ldr	r3, [pc, #28]	; (5bc <_i2c_master_write_packet+0x64>)
     5a0:	4798      	blx	r3
     5a2:	e7e0      	b.n	566 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5a4:	8823      	ldrh	r3, [r4, #0]
     5a6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5a8:	7a62      	ldrb	r2, [r4, #9]
     5aa:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5ac:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5ae:	2280      	movs	r2, #128	; 0x80
     5b0:	0212      	lsls	r2, r2, #8
     5b2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5b4:	6273      	str	r3, [r6, #36]	; 0x24
     5b6:	e7ef      	b.n	598 <_i2c_master_write_packet+0x40>
     5b8:	fffbffff 	.word	0xfffbffff
     5bc:	00000469 	.word	0x00000469

000005c0 <_i2c_master_read_packet>:
{
     5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5c2:	0005      	movs	r5, r0
     5c4:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5c6:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     5c8:	684b      	ldr	r3, [r1, #4]
     5ca:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     5cc:	884b      	ldrh	r3, [r1, #2]
     5ce:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     5d0:	2201      	movs	r2, #1
     5d2:	2324      	movs	r3, #36	; 0x24
     5d4:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     5d6:	3204      	adds	r2, #4
     5d8:	3301      	adds	r3, #1
     5da:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     5dc:	6837      	ldr	r7, [r6, #0]
     5de:	013f      	lsls	r7, r7, #4
     5e0:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     5e2:	7a4b      	ldrb	r3, [r1, #9]
     5e4:	2b00      	cmp	r3, #0
     5e6:	d117      	bne.n	618 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     5e8:	2f00      	cmp	r7, #0
     5ea:	d002      	beq.n	5f2 <_i2c_master_read_packet+0x32>
     5ec:	8863      	ldrh	r3, [r4, #2]
     5ee:	2b01      	cmp	r3, #1
     5f0:	d016      	beq.n	620 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     5f2:	6873      	ldr	r3, [r6, #4]
     5f4:	4a20      	ldr	r2, [pc, #128]	; (678 <_i2c_master_read_packet+0xb8>)
     5f6:	4013      	ands	r3, r2
     5f8:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     5fa:	7a23      	ldrb	r3, [r4, #8]
     5fc:	2b00      	cmp	r3, #0
     5fe:	d115      	bne.n	62c <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     600:	2303      	movs	r3, #3
     602:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     604:	8823      	ldrh	r3, [r4, #0]
     606:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     608:	7a62      	ldrb	r2, [r4, #9]
     60a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     60c:	4313      	orrs	r3, r2
     60e:	2201      	movs	r2, #1
     610:	4313      	orrs	r3, r2
     612:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     614:	2000      	movs	r0, #0
}
     616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     618:	7a89      	ldrb	r1, [r1, #10]
     61a:	4b18      	ldr	r3, [pc, #96]	; (67c <_i2c_master_read_packet+0xbc>)
     61c:	4798      	blx	r3
     61e:	e7e3      	b.n	5e8 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     620:	6872      	ldr	r2, [r6, #4]
     622:	2380      	movs	r3, #128	; 0x80
     624:	02db      	lsls	r3, r3, #11
     626:	4313      	orrs	r3, r2
     628:	6073      	str	r3, [r6, #4]
     62a:	e7e6      	b.n	5fa <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     62c:	8823      	ldrh	r3, [r4, #0]
     62e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     630:	7a62      	ldrb	r2, [r4, #9]
     632:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     634:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     636:	2280      	movs	r2, #128	; 0x80
     638:	0212      	lsls	r2, r2, #8
     63a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     63c:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     63e:	0028      	movs	r0, r5
     640:	4b0f      	ldr	r3, [pc, #60]	; (680 <_i2c_master_read_packet+0xc0>)
     642:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     644:	6873      	ldr	r3, [r6, #4]
     646:	4a0c      	ldr	r2, [pc, #48]	; (678 <_i2c_master_read_packet+0xb8>)
     648:	4013      	ands	r3, r2
     64a:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     64c:	2800      	cmp	r0, #0
     64e:	d1e2      	bne.n	616 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     650:	0028      	movs	r0, r5
     652:	4b0c      	ldr	r3, [pc, #48]	; (684 <_i2c_master_read_packet+0xc4>)
     654:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     656:	2800      	cmp	r0, #0
     658:	d1dd      	bne.n	616 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     65a:	2303      	movs	r3, #3
     65c:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     65e:	8823      	ldrh	r3, [r4, #0]
     660:	0a1b      	lsrs	r3, r3, #8
     662:	2278      	movs	r2, #120	; 0x78
     664:	4313      	orrs	r3, r2
     666:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     668:	7a62      	ldrb	r2, [r4, #9]
     66a:	0392      	lsls	r2, r2, #14
     66c:	2101      	movs	r1, #1
     66e:	430a      	orrs	r2, r1
     670:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     672:	6273      	str	r3, [r6, #36]	; 0x24
     674:	e7cf      	b.n	616 <_i2c_master_read_packet+0x56>
     676:	46c0      	nop			; (mov r8, r8)
     678:	fffbffff 	.word	0xfffbffff
     67c:	00000469 	.word	0x00000469
     680:	0000043d 	.word	0x0000043d
     684:	0000040d 	.word	0x0000040d

00000688 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     688:	1c93      	adds	r3, r2, #2
     68a:	009b      	lsls	r3, r3, #2
     68c:	18c3      	adds	r3, r0, r3
     68e:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     690:	7e03      	ldrb	r3, [r0, #24]
     692:	2101      	movs	r1, #1
     694:	4091      	lsls	r1, r2
     696:	430b      	orrs	r3, r1
     698:	b2db      	uxtb	r3, r3
     69a:	7603      	strb	r3, [r0, #24]
}
     69c:	4770      	bx	lr
	...

000006a0 <i2c_master_read_packet_job>:
{
     6a0:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     6a2:	8b83      	ldrh	r3, [r0, #28]
     6a4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     6a6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     6a8:	2b00      	cmp	r3, #0
     6aa:	d001      	beq.n	6b0 <i2c_master_read_packet_job+0x10>
}
     6ac:	0010      	movs	r0, r2
     6ae:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     6b0:	3301      	adds	r3, #1
     6b2:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     6b4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     6b6:	4b02      	ldr	r3, [pc, #8]	; (6c0 <i2c_master_read_packet_job+0x20>)
     6b8:	4798      	blx	r3
     6ba:	0002      	movs	r2, r0
     6bc:	e7f6      	b.n	6ac <i2c_master_read_packet_job+0xc>
     6be:	46c0      	nop			; (mov r8, r8)
     6c0:	000005c1 	.word	0x000005c1

000006c4 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     6c4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     6c6:	8b83      	ldrh	r3, [r0, #28]
     6c8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     6ca:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     6cc:	2b00      	cmp	r3, #0
     6ce:	d001      	beq.n	6d4 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     6d0:	0010      	movs	r0, r2
     6d2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     6d4:	3301      	adds	r3, #1
     6d6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     6d8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     6da:	4b02      	ldr	r3, [pc, #8]	; (6e4 <i2c_master_write_packet_job+0x20>)
     6dc:	4798      	blx	r3
     6de:	0002      	movs	r2, r0
     6e0:	e7f6      	b.n	6d0 <i2c_master_write_packet_job+0xc>
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	00000559 	.word	0x00000559

000006e8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     6e8:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     6ea:	0080      	lsls	r0, r0, #2
     6ec:	4b75      	ldr	r3, [pc, #468]	; (8c4 <_i2c_master_interrupt_handler+0x1dc>)
     6ee:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6f0:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6f2:	682b      	ldr	r3, [r5, #0]
     6f4:	011b      	lsls	r3, r3, #4
     6f6:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     6f8:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     6fa:	7e26      	ldrb	r6, [r4, #24]
     6fc:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     6fe:	8b63      	ldrh	r3, [r4, #26]
     700:	b29b      	uxth	r3, r3
     702:	2b00      	cmp	r3, #0
     704:	d103      	bne.n	70e <_i2c_master_interrupt_handler+0x26>
     706:	8ba3      	ldrh	r3, [r4, #28]
     708:	b29b      	uxth	r3, r3
     70a:	2b00      	cmp	r3, #0
     70c:	d123      	bne.n	756 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     70e:	8b63      	ldrh	r3, [r4, #26]
     710:	b29b      	uxth	r3, r3
     712:	2b00      	cmp	r3, #0
     714:	d008      	beq.n	728 <_i2c_master_interrupt_handler+0x40>
     716:	8ba3      	ldrh	r3, [r4, #28]
     718:	b29b      	uxth	r3, r3
     71a:	2b00      	cmp	r3, #0
     71c:	d104      	bne.n	728 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     71e:	3325      	adds	r3, #37	; 0x25
     720:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     722:	2b05      	cmp	r3, #5
     724:	d100      	bne.n	728 <_i2c_master_interrupt_handler+0x40>
     726:	e06d      	b.n	804 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     728:	8b63      	ldrh	r3, [r4, #26]
     72a:	b29b      	uxth	r3, r3
     72c:	2b00      	cmp	r3, #0
     72e:	d024      	beq.n	77a <_i2c_master_interrupt_handler+0x92>
     730:	8ba3      	ldrh	r3, [r4, #28]
     732:	b29b      	uxth	r3, r3
     734:	2b00      	cmp	r3, #0
     736:	d020      	beq.n	77a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     738:	8b6b      	ldrh	r3, [r5, #26]
     73a:	069b      	lsls	r3, r3, #26
     73c:	d500      	bpl.n	740 <_i2c_master_interrupt_handler+0x58>
     73e:	e081      	b.n	844 <_i2c_master_interrupt_handler+0x15c>
     740:	2a00      	cmp	r2, #0
     742:	d004      	beq.n	74e <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     744:	8ba3      	ldrh	r3, [r4, #28]
     746:	b29b      	uxth	r3, r3
     748:	2b01      	cmp	r3, #1
     74a:	d100      	bne.n	74e <_i2c_master_interrupt_handler+0x66>
     74c:	e07a      	b.n	844 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     74e:	2241      	movs	r2, #65	; 0x41
     750:	2325      	movs	r3, #37	; 0x25
     752:	54e2      	strb	r2, [r4, r3]
     754:	e011      	b.n	77a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     756:	7e2b      	ldrb	r3, [r5, #24]
     758:	07db      	lsls	r3, r3, #31
     75a:	d507      	bpl.n	76c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     75c:	2301      	movs	r3, #1
     75e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     760:	8b6b      	ldrh	r3, [r5, #26]
     762:	079b      	lsls	r3, r3, #30
     764:	d52e      	bpl.n	7c4 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     766:	2241      	movs	r2, #65	; 0x41
     768:	2325      	movs	r3, #37	; 0x25
     76a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     76c:	8ba3      	ldrh	r3, [r4, #28]
     76e:	b29b      	uxth	r3, r3
     770:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     772:	2325      	movs	r3, #37	; 0x25
     774:	5ce3      	ldrb	r3, [r4, r3]
     776:	2b05      	cmp	r3, #5
     778:	d038      	beq.n	7ec <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     77a:	8b63      	ldrh	r3, [r4, #26]
     77c:	b29b      	uxth	r3, r3
     77e:	2b00      	cmp	r3, #0
     780:	d007      	beq.n	792 <_i2c_master_interrupt_handler+0xaa>
     782:	8ba3      	ldrh	r3, [r4, #28]
     784:	b29b      	uxth	r3, r3
     786:	2b00      	cmp	r3, #0
     788:	d103      	bne.n	792 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     78a:	3325      	adds	r3, #37	; 0x25
     78c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     78e:	2b05      	cmp	r3, #5
     790:	d064      	beq.n	85c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     792:	2325      	movs	r3, #37	; 0x25
     794:	5ce3      	ldrb	r3, [r4, r3]
     796:	2b05      	cmp	r3, #5
     798:	d013      	beq.n	7c2 <_i2c_master_interrupt_handler+0xda>
     79a:	2325      	movs	r3, #37	; 0x25
     79c:	5ce3      	ldrb	r3, [r4, r3]
     79e:	2b00      	cmp	r3, #0
     7a0:	d00f      	beq.n	7c2 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     7a2:	2303      	movs	r3, #3
     7a4:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     7a6:	2300      	movs	r3, #0
     7a8:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     7aa:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     7ac:	3325      	adds	r3, #37	; 0x25
     7ae:	5ce3      	ldrb	r3, [r4, r3]
     7b0:	2b41      	cmp	r3, #65	; 0x41
     7b2:	d003      	beq.n	7bc <_i2c_master_interrupt_handler+0xd4>
     7b4:	7aa3      	ldrb	r3, [r4, #10]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d000      	beq.n	7bc <_i2c_master_interrupt_handler+0xd4>
     7ba:	e075      	b.n	8a8 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     7bc:	0773      	lsls	r3, r6, #29
     7be:	d500      	bpl.n	7c2 <_i2c_master_interrupt_handler+0xda>
     7c0:	e07b      	b.n	8ba <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     7c2:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     7c4:	8b6b      	ldrh	r3, [r5, #26]
     7c6:	075b      	lsls	r3, r3, #29
     7c8:	d5d0      	bpl.n	76c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     7ca:	2218      	movs	r2, #24
     7cc:	2325      	movs	r3, #37	; 0x25
     7ce:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     7d0:	2300      	movs	r3, #0
     7d2:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     7d4:	7aa3      	ldrb	r3, [r4, #10]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d0c8      	beq.n	76c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     7da:	0020      	movs	r0, r4
     7dc:	4b3a      	ldr	r3, [pc, #232]	; (8c8 <_i2c_master_interrupt_handler+0x1e0>)
     7de:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7e0:	686a      	ldr	r2, [r5, #4]
     7e2:	23c0      	movs	r3, #192	; 0xc0
     7e4:	029b      	lsls	r3, r3, #10
     7e6:	4313      	orrs	r3, r2
     7e8:	606b      	str	r3, [r5, #4]
     7ea:	e7bf      	b.n	76c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     7ec:	331f      	adds	r3, #31
     7ee:	5ce3      	ldrb	r3, [r4, r3]
     7f0:	2b00      	cmp	r3, #0
     7f2:	d003      	beq.n	7fc <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     7f4:	0020      	movs	r0, r4
     7f6:	4b35      	ldr	r3, [pc, #212]	; (8cc <_i2c_master_interrupt_handler+0x1e4>)
     7f8:	4798      	blx	r3
     7fa:	e7be      	b.n	77a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     7fc:	0020      	movs	r0, r4
     7fe:	4b34      	ldr	r3, [pc, #208]	; (8d0 <_i2c_master_interrupt_handler+0x1e8>)
     800:	4798      	blx	r3
     802:	e7ba      	b.n	77a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     804:	331f      	adds	r3, #31
     806:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     808:	2b00      	cmp	r3, #0
     80a:	d000      	beq.n	80e <_i2c_master_interrupt_handler+0x126>
     80c:	e78c      	b.n	728 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     80e:	3303      	adds	r3, #3
     810:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     812:	2300      	movs	r3, #0
     814:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     816:	3325      	adds	r3, #37	; 0x25
     818:	2200      	movs	r2, #0
     81a:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     81c:	7aa3      	ldrb	r3, [r4, #10]
     81e:	2b00      	cmp	r3, #0
     820:	d107      	bne.n	832 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     822:	2301      	movs	r3, #1
     824:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     826:	07f3      	lsls	r3, r6, #31
     828:	d5a7      	bpl.n	77a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     82a:	68e3      	ldr	r3, [r4, #12]
     82c:	0020      	movs	r0, r4
     82e:	4798      	blx	r3
     830:	e7a3      	b.n	77a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     832:	0020      	movs	r0, r4
     834:	4b24      	ldr	r3, [pc, #144]	; (8c8 <_i2c_master_interrupt_handler+0x1e0>)
     836:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     838:	686a      	ldr	r2, [r5, #4]
     83a:	23c0      	movs	r3, #192	; 0xc0
     83c:	029b      	lsls	r3, r3, #10
     83e:	4313      	orrs	r3, r2
     840:	606b      	str	r3, [r5, #4]
     842:	e7f0      	b.n	826 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     844:	2324      	movs	r3, #36	; 0x24
     846:	5ce3      	ldrb	r3, [r4, r3]
     848:	2b00      	cmp	r3, #0
     84a:	d103      	bne.n	854 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     84c:	0020      	movs	r0, r4
     84e:	4b20      	ldr	r3, [pc, #128]	; (8d0 <_i2c_master_interrupt_handler+0x1e8>)
     850:	4798      	blx	r3
     852:	e792      	b.n	77a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     854:	0020      	movs	r0, r4
     856:	4b1d      	ldr	r3, [pc, #116]	; (8cc <_i2c_master_interrupt_handler+0x1e4>)
     858:	4798      	blx	r3
     85a:	e78e      	b.n	77a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     85c:	331f      	adds	r3, #31
     85e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     860:	2b01      	cmp	r3, #1
     862:	d196      	bne.n	792 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     864:	7e2b      	ldrb	r3, [r5, #24]
     866:	079b      	lsls	r3, r3, #30
     868:	d501      	bpl.n	86e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     86a:	2302      	movs	r3, #2
     86c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     86e:	2303      	movs	r3, #3
     870:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     872:	2300      	movs	r3, #0
     874:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     876:	3325      	adds	r3, #37	; 0x25
     878:	2200      	movs	r2, #0
     87a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     87c:	07b3      	lsls	r3, r6, #30
     87e:	d503      	bpl.n	888 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     880:	2324      	movs	r3, #36	; 0x24
     882:	5ce3      	ldrb	r3, [r4, r3]
     884:	2b01      	cmp	r3, #1
     886:	d00b      	beq.n	8a0 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     888:	07f3      	lsls	r3, r6, #31
     88a:	d400      	bmi.n	88e <_i2c_master_interrupt_handler+0x1a6>
     88c:	e781      	b.n	792 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     88e:	2324      	movs	r3, #36	; 0x24
     890:	5ce3      	ldrb	r3, [r4, r3]
     892:	2b00      	cmp	r3, #0
     894:	d000      	beq.n	898 <_i2c_master_interrupt_handler+0x1b0>
     896:	e77c      	b.n	792 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     898:	68e3      	ldr	r3, [r4, #12]
     89a:	0020      	movs	r0, r4
     89c:	4798      	blx	r3
     89e:	e778      	b.n	792 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     8a0:	6923      	ldr	r3, [r4, #16]
     8a2:	0020      	movs	r0, r4
     8a4:	4798      	blx	r3
     8a6:	e774      	b.n	792 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     8a8:	0020      	movs	r0, r4
     8aa:	4b07      	ldr	r3, [pc, #28]	; (8c8 <_i2c_master_interrupt_handler+0x1e0>)
     8ac:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     8ae:	686a      	ldr	r2, [r5, #4]
     8b0:	23e0      	movs	r3, #224	; 0xe0
     8b2:	02db      	lsls	r3, r3, #11
     8b4:	4313      	orrs	r3, r2
     8b6:	606b      	str	r3, [r5, #4]
     8b8:	e780      	b.n	7bc <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     8ba:	6963      	ldr	r3, [r4, #20]
     8bc:	0020      	movs	r0, r4
     8be:	4798      	blx	r3
}
     8c0:	e77f      	b.n	7c2 <_i2c_master_interrupt_handler+0xda>
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	20000f04 	.word	0x20000f04
     8c8:	00000489 	.word	0x00000489
     8cc:	00000495 	.word	0x00000495
     8d0:	0000051d 	.word	0x0000051d

000008d4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d6:	46c6      	mov	lr, r8
     8d8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     8da:	0080      	lsls	r0, r0, #2
     8dc:	4b0e      	ldr	r3, [pc, #56]	; (918 <_tcc_interrupt_handler+0x44>)
     8de:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     8e0:	683b      	ldr	r3, [r7, #0]
     8e2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     8e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     8e8:	4013      	ands	r3, r2
     8ea:	401e      	ands	r6, r3
     8ec:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     8ee:	4b0b      	ldr	r3, [pc, #44]	; (91c <_tcc_interrupt_handler+0x48>)
     8f0:	4698      	mov	r8, r3
     8f2:	e002      	b.n	8fa <_tcc_interrupt_handler+0x26>
     8f4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     8f6:	2c30      	cmp	r4, #48	; 0x30
     8f8:	d00a      	beq.n	910 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     8fa:	4643      	mov	r3, r8
     8fc:	58e5      	ldr	r5, [r4, r3]
     8fe:	4235      	tst	r5, r6
     900:	d0f8      	beq.n	8f4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     902:	193b      	adds	r3, r7, r4
     904:	685b      	ldr	r3, [r3, #4]
     906:	0038      	movs	r0, r7
     908:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     90a:	683b      	ldr	r3, [r7, #0]
     90c:	62dd      	str	r5, [r3, #44]	; 0x2c
     90e:	e7f1      	b.n	8f4 <_tcc_interrupt_handler+0x20>
		}
	}
}
     910:	bc04      	pop	{r2}
     912:	4690      	mov	r8, r2
     914:	bdf0      	pop	{r4, r5, r6, r7, pc}
     916:	46c0      	nop			; (mov r8, r8)
     918:	20000dc0 	.word	0x20000dc0
     91c:	00004cd4 	.word	0x00004cd4

00000920 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     920:	b510      	push	{r4, lr}
     922:	2000      	movs	r0, #0
     924:	4b01      	ldr	r3, [pc, #4]	; (92c <TCC0_Handler+0xc>)
     926:	4798      	blx	r3
     928:	bd10      	pop	{r4, pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	000008d5 	.word	0x000008d5

00000930 <TCC1_Handler>:
     930:	b510      	push	{r4, lr}
     932:	2001      	movs	r0, #1
     934:	4b01      	ldr	r3, [pc, #4]	; (93c <TCC1_Handler+0xc>)
     936:	4798      	blx	r3
     938:	bd10      	pop	{r4, pc}
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	000008d5 	.word	0x000008d5

00000940 <TCC2_Handler>:
     940:	b510      	push	{r4, lr}
     942:	2002      	movs	r0, #2
     944:	4b01      	ldr	r3, [pc, #4]	; (94c <TCC2_Handler+0xc>)
     946:	4798      	blx	r3
     948:	bd10      	pop	{r4, pc}
     94a:	46c0      	nop			; (mov r8, r8)
     94c:	000008d5 	.word	0x000008d5

00000950 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     950:	1c93      	adds	r3, r2, #2
     952:	009b      	lsls	r3, r3, #2
     954:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     956:	2a02      	cmp	r2, #2
     958:	d009      	beq.n	96e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     95a:	2a03      	cmp	r2, #3
     95c:	d00c      	beq.n	978 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     95e:	2301      	movs	r3, #1
     960:	4093      	lsls	r3, r2
     962:	001a      	movs	r2, r3
     964:	7e03      	ldrb	r3, [r0, #24]
     966:	4313      	orrs	r3, r2
     968:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     96a:	2000      	movs	r0, #0
     96c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     96e:	7e03      	ldrb	r3, [r0, #24]
     970:	2210      	movs	r2, #16
     972:	4313      	orrs	r3, r2
     974:	7603      	strb	r3, [r0, #24]
     976:	e7f8      	b.n	96a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     978:	7e03      	ldrb	r3, [r0, #24]
     97a:	2220      	movs	r2, #32
     97c:	4313      	orrs	r3, r2
     97e:	7603      	strb	r3, [r0, #24]
     980:	e7f3      	b.n	96a <tc_register_callback+0x1a>
	...

00000984 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     984:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     986:	0080      	lsls	r0, r0, #2
     988:	4b16      	ldr	r3, [pc, #88]	; (9e4 <_tc_interrupt_handler+0x60>)
     98a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     98c:	6823      	ldr	r3, [r4, #0]
     98e:	7b9d      	ldrb	r5, [r3, #14]
     990:	7e22      	ldrb	r2, [r4, #24]
     992:	7e63      	ldrb	r3, [r4, #25]
     994:	4013      	ands	r3, r2
     996:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     998:	07eb      	lsls	r3, r5, #31
     99a:	d406      	bmi.n	9aa <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     99c:	07ab      	lsls	r3, r5, #30
     99e:	d40b      	bmi.n	9b8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     9a0:	06eb      	lsls	r3, r5, #27
     9a2:	d410      	bmi.n	9c6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     9a4:	06ab      	lsls	r3, r5, #26
     9a6:	d415      	bmi.n	9d4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     9a8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     9aa:	0020      	movs	r0, r4
     9ac:	68a3      	ldr	r3, [r4, #8]
     9ae:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     9b0:	2301      	movs	r3, #1
     9b2:	6822      	ldr	r2, [r4, #0]
     9b4:	7393      	strb	r3, [r2, #14]
     9b6:	e7f1      	b.n	99c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     9b8:	0020      	movs	r0, r4
     9ba:	68e3      	ldr	r3, [r4, #12]
     9bc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     9be:	2302      	movs	r3, #2
     9c0:	6822      	ldr	r2, [r4, #0]
     9c2:	7393      	strb	r3, [r2, #14]
     9c4:	e7ec      	b.n	9a0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     9c6:	0020      	movs	r0, r4
     9c8:	6923      	ldr	r3, [r4, #16]
     9ca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     9cc:	2310      	movs	r3, #16
     9ce:	6822      	ldr	r2, [r4, #0]
     9d0:	7393      	strb	r3, [r2, #14]
     9d2:	e7e7      	b.n	9a4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     9d4:	0020      	movs	r0, r4
     9d6:	6963      	ldr	r3, [r4, #20]
     9d8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     9da:	6823      	ldr	r3, [r4, #0]
     9dc:	2220      	movs	r2, #32
     9de:	739a      	strb	r2, [r3, #14]
}
     9e0:	e7e2      	b.n	9a8 <_tc_interrupt_handler+0x24>
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	20000dcc 	.word	0x20000dcc

000009e8 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     9e8:	b510      	push	{r4, lr}
     9ea:	2000      	movs	r0, #0
     9ec:	4b01      	ldr	r3, [pc, #4]	; (9f4 <TC3_Handler+0xc>)
     9ee:	4798      	blx	r3
     9f0:	bd10      	pop	{r4, pc}
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	00000985 	.word	0x00000985

000009f8 <TC4_Handler>:
     9f8:	b510      	push	{r4, lr}
     9fa:	2001      	movs	r0, #1
     9fc:	4b01      	ldr	r3, [pc, #4]	; (a04 <TC4_Handler+0xc>)
     9fe:	4798      	blx	r3
     a00:	bd10      	pop	{r4, pc}
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	00000985 	.word	0x00000985

00000a08 <TC5_Handler>:
     a08:	b510      	push	{r4, lr}
     a0a:	2002      	movs	r0, #2
     a0c:	4b01      	ldr	r3, [pc, #4]	; (a14 <TC5_Handler+0xc>)
     a0e:	4798      	blx	r3
     a10:	bd10      	pop	{r4, pc}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	00000985 	.word	0x00000985

00000a18 <TC6_Handler>:
     a18:	b510      	push	{r4, lr}
     a1a:	2003      	movs	r0, #3
     a1c:	4b01      	ldr	r3, [pc, #4]	; (a24 <TC6_Handler+0xc>)
     a1e:	4798      	blx	r3
     a20:	bd10      	pop	{r4, pc}
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	00000985 	.word	0x00000985

00000a28 <TC7_Handler>:
     a28:	b510      	push	{r4, lr}
     a2a:	2004      	movs	r0, #4
     a2c:	4b01      	ldr	r3, [pc, #4]	; (a34 <TC7_Handler+0xc>)
     a2e:	4798      	blx	r3
     a30:	bd10      	pop	{r4, pc}
     a32:	46c0      	nop			; (mov r8, r8)
     a34:	00000985 	.word	0x00000985

00000a38 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     a38:	b530      	push	{r4, r5, lr}
     a3a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     a3c:	a901      	add	r1, sp, #4
     a3e:	4b0c      	ldr	r3, [pc, #48]	; (a70 <_tc_get_inst_index+0x38>)
     a40:	000a      	movs	r2, r1
     a42:	cb32      	ldmia	r3!, {r1, r4, r5}
     a44:	c232      	stmia	r2!, {r1, r4, r5}
     a46:	cb12      	ldmia	r3!, {r1, r4}
     a48:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     a4a:	9b01      	ldr	r3, [sp, #4]
     a4c:	4298      	cmp	r0, r3
     a4e:	d00b      	beq.n	a68 <_tc_get_inst_index+0x30>
     a50:	2301      	movs	r3, #1
     a52:	a901      	add	r1, sp, #4
     a54:	009a      	lsls	r2, r3, #2
     a56:	5852      	ldr	r2, [r2, r1]
     a58:	4282      	cmp	r2, r0
     a5a:	d006      	beq.n	a6a <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     a5c:	3301      	adds	r3, #1
     a5e:	2b05      	cmp	r3, #5
     a60:	d1f8      	bne.n	a54 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     a62:	2000      	movs	r0, #0
}
     a64:	b007      	add	sp, #28
     a66:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     a68:	2300      	movs	r3, #0
			return i;
     a6a:	b2d8      	uxtb	r0, r3
     a6c:	e7fa      	b.n	a64 <_tc_get_inst_index+0x2c>
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	00004d04 	.word	0x00004d04

00000a74 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     a74:	b5f0      	push	{r4, r5, r6, r7, lr}
     a76:	b089      	sub	sp, #36	; 0x24
     a78:	0004      	movs	r4, r0
     a7a:	000d      	movs	r5, r1
     a7c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     a7e:	0008      	movs	r0, r1
     a80:	4b84      	ldr	r3, [pc, #528]	; (c94 <tc_init+0x220>)
     a82:	4798      	blx	r3
     a84:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     a86:	ab06      	add	r3, sp, #24
     a88:	221b      	movs	r2, #27
     a8a:	701a      	strb	r2, [r3, #0]
     a8c:	3201      	adds	r2, #1
     a8e:	705a      	strb	r2, [r3, #1]
     a90:	709a      	strb	r2, [r3, #2]
     a92:	3201      	adds	r2, #1
     a94:	70da      	strb	r2, [r3, #3]
     a96:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     a98:	3a13      	subs	r2, #19
     a9a:	497f      	ldr	r1, [pc, #508]	; (c98 <tc_init+0x224>)
     a9c:	3114      	adds	r1, #20
     a9e:	a803      	add	r0, sp, #12
     aa0:	4b7e      	ldr	r3, [pc, #504]	; (c9c <tc_init+0x228>)
     aa2:	4798      	blx	r3
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     aa4:	2300      	movs	r3, #0
     aa6:	60a3      	str	r3, [r4, #8]
     aa8:	60e3      	str	r3, [r4, #12]
     aaa:	6123      	str	r3, [r4, #16]
     aac:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     aae:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     ab0:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     ab2:	00ba      	lsls	r2, r7, #2
     ab4:	4b7a      	ldr	r3, [pc, #488]	; (ca0 <tc_init+0x22c>)
     ab6:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     ab8:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     aba:	78b3      	ldrb	r3, [r6, #2]
     abc:	2b08      	cmp	r3, #8
     abe:	d006      	beq.n	ace <tc_init+0x5a>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     ac0:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     ac2:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     ac4:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     ac6:	07db      	lsls	r3, r3, #31
     ac8:	d505      	bpl.n	ad6 <tc_init+0x62>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     aca:	b009      	add	sp, #36	; 0x24
     acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     ace:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     ad0:	07fa      	lsls	r2, r7, #31
     ad2:	d5fa      	bpl.n	aca <tc_init+0x56>
     ad4:	e7f4      	b.n	ac0 <tc_init+0x4c>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     ad6:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     ad8:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     ada:	06db      	lsls	r3, r3, #27
     adc:	d4f5      	bmi.n	aca <tc_init+0x56>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     ade:	882b      	ldrh	r3, [r5, #0]
     ae0:	079b      	lsls	r3, r3, #30
     ae2:	d4f2      	bmi.n	aca <tc_init+0x56>
	if (config->pwm_channel[0].enabled) {
     ae4:	7c33      	ldrb	r3, [r6, #16]
     ae6:	2b00      	cmp	r3, #0
     ae8:	d179      	bne.n	bde <tc_init+0x16a>
	if (config->pwm_channel[1].enabled) {
     aea:	7f33      	ldrb	r3, [r6, #28]
     aec:	2b00      	cmp	r3, #0
     aee:	d000      	beq.n	af2 <tc_init+0x7e>
     af0:	e081      	b.n	bf6 <tc_init+0x182>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     af2:	496c      	ldr	r1, [pc, #432]	; (ca4 <tc_init+0x230>)
     af4:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     af6:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     af8:	ab03      	add	r3, sp, #12
     afa:	5ad3      	ldrh	r3, [r2, r3]
     afc:	4303      	orrs	r3, r0
     afe:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     b00:	78b3      	ldrb	r3, [r6, #2]
     b02:	2b08      	cmp	r3, #8
     b04:	d100      	bne.n	b08 <tc_init+0x94>
     b06:	e086      	b.n	c16 <tc_init+0x1a2>
	gclk_chan_config.source_generator = config->clock_source;
     b08:	a901      	add	r1, sp, #4
     b0a:	7833      	ldrb	r3, [r6, #0]
     b0c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     b0e:	ab06      	add	r3, sp, #24
     b10:	5ddf      	ldrb	r7, [r3, r7]
     b12:	0038      	movs	r0, r7
     b14:	4b64      	ldr	r3, [pc, #400]	; (ca8 <tc_init+0x234>)
     b16:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     b18:	0038      	movs	r0, r7
     b1a:	4b64      	ldr	r3, [pc, #400]	; (cac <tc_init+0x238>)
     b1c:	4798      	blx	r3
	ctrla_tmp =
     b1e:	8931      	ldrh	r1, [r6, #8]
     b20:	88b3      	ldrh	r3, [r6, #4]
     b22:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     b24:	78b1      	ldrb	r1, [r6, #2]
     b26:	79b2      	ldrb	r2, [r6, #6]
     b28:	4311      	orrs	r1, r2
	ctrla_tmp =
     b2a:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     b2c:	7873      	ldrb	r3, [r6, #1]
     b2e:	2b00      	cmp	r3, #0
     b30:	d002      	beq.n	b38 <tc_init+0xc4>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     b32:	2380      	movs	r3, #128	; 0x80
     b34:	011b      	lsls	r3, r3, #4
     b36:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b38:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b3a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     b3c:	b25b      	sxtb	r3, r3
     b3e:	2b00      	cmp	r3, #0
     b40:	dbfb      	blt.n	b3a <tc_init+0xc6>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     b42:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     b44:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     b46:	1e4b      	subs	r3, r1, #1
     b48:	4199      	sbcs	r1, r3
     b4a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     b4c:	7bb3      	ldrb	r3, [r6, #14]
     b4e:	2b00      	cmp	r3, #0
     b50:	d001      	beq.n	b56 <tc_init+0xe2>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     b52:	2301      	movs	r3, #1
     b54:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b56:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b58:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     b5a:	b25b      	sxtb	r3, r3
     b5c:	2b00      	cmp	r3, #0
     b5e:	dbfb      	blt.n	b58 <tc_init+0xe4>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     b60:	23ff      	movs	r3, #255	; 0xff
     b62:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     b64:	2900      	cmp	r1, #0
     b66:	d005      	beq.n	b74 <tc_init+0x100>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b68:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b6a:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     b6c:	b25b      	sxtb	r3, r3
     b6e:	2b00      	cmp	r3, #0
     b70:	dbfb      	blt.n	b6a <tc_init+0xf6>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     b72:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     b74:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     b76:	7af3      	ldrb	r3, [r6, #11]
     b78:	2b00      	cmp	r3, #0
     b7a:	d001      	beq.n	b80 <tc_init+0x10c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     b7c:	2310      	movs	r3, #16
     b7e:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     b80:	7b33      	ldrb	r3, [r6, #12]
     b82:	2b00      	cmp	r3, #0
     b84:	d001      	beq.n	b8a <tc_init+0x116>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     b86:	2320      	movs	r3, #32
     b88:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b8a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b8c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     b8e:	b25b      	sxtb	r3, r3
     b90:	2b00      	cmp	r3, #0
     b92:	dbfb      	blt.n	b8c <tc_init+0x118>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     b94:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b96:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b98:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     b9a:	b25b      	sxtb	r3, r3
     b9c:	2b00      	cmp	r3, #0
     b9e:	dbfb      	blt.n	b98 <tc_init+0x124>
	switch (module_inst->counter_size) {
     ba0:	7923      	ldrb	r3, [r4, #4]
     ba2:	2b04      	cmp	r3, #4
     ba4:	d03f      	beq.n	c26 <tc_init+0x1b2>
     ba6:	2b08      	cmp	r3, #8
     ba8:	d05e      	beq.n	c68 <tc_init+0x1f4>
	return STATUS_ERR_INVALID_ARG;
     baa:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     bac:	2b00      	cmp	r3, #0
     bae:	d000      	beq.n	bb2 <tc_init+0x13e>
     bb0:	e78b      	b.n	aca <tc_init+0x56>
     bb2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     bb4:	b25b      	sxtb	r3, r3
     bb6:	2b00      	cmp	r3, #0
     bb8:	dbfb      	blt.n	bb2 <tc_init+0x13e>
				= config->counter_16_bit.value;
     bba:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     bbc:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     bbe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     bc0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     bc2:	b25b      	sxtb	r3, r3
     bc4:	2b00      	cmp	r3, #0
     bc6:	dbfb      	blt.n	bc0 <tc_init+0x14c>
					config->counter_16_bit.compare_capture_channel[0];
     bc8:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     bca:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     bcc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     bce:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     bd0:	b25b      	sxtb	r3, r3
     bd2:	2b00      	cmp	r3, #0
     bd4:	dbfb      	blt.n	bce <tc_init+0x15a>
					config->counter_16_bit.compare_capture_channel[1];
     bd6:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     bd8:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     bda:	2000      	movs	r0, #0
     bdc:	e775      	b.n	aca <tc_init+0x56>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     bde:	a902      	add	r1, sp, #8
     be0:	2301      	movs	r3, #1
     be2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     be4:	2200      	movs	r2, #0
     be6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     be8:	7e32      	ldrb	r2, [r6, #24]
     bea:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     bec:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     bee:	7d30      	ldrb	r0, [r6, #20]
     bf0:	4b2f      	ldr	r3, [pc, #188]	; (cb0 <tc_init+0x23c>)
     bf2:	4798      	blx	r3
     bf4:	e779      	b.n	aea <tc_init+0x76>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     bf6:	a902      	add	r1, sp, #8
     bf8:	2301      	movs	r3, #1
     bfa:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     bfc:	2200      	movs	r2, #0
     bfe:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     c00:	3224      	adds	r2, #36	; 0x24
     c02:	18b2      	adds	r2, r6, r2
     c04:	7812      	ldrb	r2, [r2, #0]
     c06:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     c08:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     c0a:	331f      	adds	r3, #31
     c0c:	18f3      	adds	r3, r6, r3
     c0e:	7818      	ldrb	r0, [r3, #0]
     c10:	4b27      	ldr	r3, [pc, #156]	; (cb0 <tc_init+0x23c>)
     c12:	4798      	blx	r3
     c14:	e76d      	b.n	af2 <tc_init+0x7e>
     c16:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     c18:	1c7a      	adds	r2, r7, #1
     c1a:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     c1c:	ab03      	add	r3, sp, #12
     c1e:	5ad3      	ldrh	r3, [r2, r3]
     c20:	4303      	orrs	r3, r0
     c22:	620b      	str	r3, [r1, #32]
     c24:	e770      	b.n	b08 <tc_init+0x94>
     c26:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c28:	b25b      	sxtb	r3, r3
     c2a:	2b00      	cmp	r3, #0
     c2c:	dbfb      	blt.n	c26 <tc_init+0x1b2>
					config->counter_8_bit.value;
     c2e:	2328      	movs	r3, #40	; 0x28
     c30:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     c32:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c34:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c36:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c38:	b25b      	sxtb	r3, r3
     c3a:	2b00      	cmp	r3, #0
     c3c:	dbfb      	blt.n	c36 <tc_init+0x1c2>
					config->counter_8_bit.period;
     c3e:	2329      	movs	r3, #41	; 0x29
     c40:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     c42:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c44:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c46:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c48:	b25b      	sxtb	r3, r3
     c4a:	2b00      	cmp	r3, #0
     c4c:	dbfb      	blt.n	c46 <tc_init+0x1d2>
					config->counter_8_bit.compare_capture_channel[0];
     c4e:	232a      	movs	r3, #42	; 0x2a
     c50:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     c52:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c54:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c56:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c58:	b25b      	sxtb	r3, r3
     c5a:	2b00      	cmp	r3, #0
     c5c:	dbfb      	blt.n	c56 <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
     c5e:	232b      	movs	r3, #43	; 0x2b
     c60:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     c62:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     c64:	2000      	movs	r0, #0
     c66:	e730      	b.n	aca <tc_init+0x56>
     c68:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c6a:	b25b      	sxtb	r3, r3
     c6c:	2b00      	cmp	r3, #0
     c6e:	dbfb      	blt.n	c68 <tc_init+0x1f4>
				= config->counter_32_bit.value;
     c70:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     c72:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c74:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c76:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c78:	b25b      	sxtb	r3, r3
     c7a:	2b00      	cmp	r3, #0
     c7c:	dbfb      	blt.n	c76 <tc_init+0x202>
			hw->COUNT32.CC[0].reg =
     c7e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     c80:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c82:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c84:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c86:	b25b      	sxtb	r3, r3
     c88:	2b00      	cmp	r3, #0
     c8a:	dbfb      	blt.n	c84 <tc_init+0x210>
					config->counter_32_bit.compare_capture_channel[1];
     c8c:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     c8e:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     c90:	2000      	movs	r0, #0
     c92:	e71a      	b.n	aca <tc_init+0x56>
     c94:	00000a39 	.word	0x00000a39
     c98:	00004d04 	.word	0x00004d04
     c9c:	00004bdd 	.word	0x00004bdd
     ca0:	20000dcc 	.word	0x20000dcc
     ca4:	40000400 	.word	0x40000400
     ca8:	00002e89 	.word	0x00002e89
     cac:	00002dfd 	.word	0x00002dfd
     cb0:	00002f81 	.word	0x00002f81

00000cb4 <resetOutput>:



void resetOutput(uint8_t port)
{
	outputPort[port].address			=		0x00;
     cb4:	4b05      	ldr	r3, [pc, #20]	; (ccc <resetOutput+0x18>)
     cb6:	00c0      	lsls	r0, r0, #3
     cb8:	2200      	movs	r2, #0
     cba:	54c2      	strb	r2, [r0, r3]
	outputPort[port].readDataLength     =		0x00;
     cbc:	1818      	adds	r0, r3, r0
     cbe:	70c2      	strb	r2, [r0, #3]
	outputPort[port].writeDataLength1   =		0x00;
     cc0:	7102      	strb	r2, [r0, #4]
	outputPort[port].writeDataLength2   =		0x00;
     cc2:	7142      	strb	r2, [r0, #5]
	outputPort[port].initialization     =       false;
     cc4:	7182      	strb	r2, [r0, #6]
	outputPort[port].currentState		=		NOTHINGCONNECTED;
     cc6:	7042      	strb	r2, [r0, #1]
};
     cc8:	4770      	bx	lr
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	20001088 	.word	0x20001088

00000cd0 <checkSetOutputs>:



void  checkSetOutputs()
{
     cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cd2:	b085      	sub	sp, #20
     cd4:	4d21      	ldr	r5, [pc, #132]	; (d5c <checkSetOutputs+0x8c>)
     cd6:	2400      	movs	r4, #0
	//delay_cycles_ms(5);
	//outputPort[3].currentState		  =		OUTPUT_LEDMATRIX;
	
	for(i=0; i<NO_OUTPUTS;i++)
	{
		outputConnected	= outputsConnected[i];
     cd8:	4f21      	ldr	r7, [pc, #132]	; (d60 <checkSetOutputs+0x90>)
     cda:	e005      	b.n	ce8 <checkSetOutputs+0x18>
						}
					}
					break;
					
				case NOTHINGCONNECTED:
					switch(outputPort[i].currentState)
     cdc:	2a03      	cmp	r2, #3
     cde:	d035      	beq.n	d4c <checkSetOutputs+0x7c>
     ce0:	3401      	adds	r4, #1
     ce2:	3508      	adds	r5, #8
	for(i=0; i<NO_OUTPUTS;i++)
     ce4:	2c04      	cmp	r4, #4
     ce6:	d02f      	beq.n	d48 <checkSetOutputs+0x78>
     ce8:	b2e6      	uxtb	r6, r4
		outputConnected	= outputsConnected[i];
     cea:	5d3b      	ldrb	r3, [r7, r4]
		if(outputConnected != outputPort[i].currentState)
     cec:	786a      	ldrb	r2, [r5, #1]
     cee:	4293      	cmp	r3, r2
     cf0:	d0f6      	beq.n	ce0 <checkSetOutputs+0x10>
			switch(outputConnected)
     cf2:	2b00      	cmp	r3, #0
     cf4:	d0f2      	beq.n	cdc <checkSetOutputs+0xc>
     cf6:	2b03      	cmp	r3, #3
     cf8:	d1f2      	bne.n	ce0 <checkSetOutputs+0x10>
					if(i == 3) // Temporary
     cfa:	2e03      	cmp	r6, #3
     cfc:	d1f0      	bne.n	ce0 <checkSetOutputs+0x10>
						if(outputPort[i].initialization	  == 		false)
     cfe:	4b17      	ldr	r3, [pc, #92]	; (d5c <checkSetOutputs+0x8c>)
     d00:	7f9b      	ldrb	r3, [r3, #30]
     d02:	2b00      	cmp	r3, #0
     d04:	d120      	bne.n	d48 <checkSetOutputs+0x78>
							outputPort[i].address 			  =		LEDMATRIX_I2C_SLAVE_ADDRESS;
     d06:	4c15      	ldr	r4, [pc, #84]	; (d5c <checkSetOutputs+0x8c>)
     d08:	3311      	adds	r3, #17
     d0a:	7623      	strb	r3, [r4, #24]
							outputPort[i].readDataLength     =		LEDMATRIX_READ_DATA_LENGTH;
     d0c:	3b0f      	subs	r3, #15
     d0e:	76e3      	strb	r3, [r4, #27]
							outputPort[i].writeDataLength1   =		LEDMATRIX_WRITE_DATA_LENGTH_1;
     d10:	3335      	adds	r3, #53	; 0x35
     d12:	7723      	strb	r3, [r4, #28]
							outputPort[i].writeDataLength2   =		LEDMATRIX_WRITE_DATA_LENGTH_2;
     d14:	2505      	movs	r5, #5
     d16:	7765      	strb	r5, [r4, #29]
							enableI2CModule(i+1);
     d18:	2004      	movs	r0, #4
     d1a:	4b12      	ldr	r3, [pc, #72]	; (d64 <checkSetOutputs+0x94>)
     d1c:	4798      	blx	r3
							struct i2c_master_packet wr_packet = {
     d1e:	a901      	add	r1, sp, #4
								.address     = outputPort[3].address ,
     d20:	7e23      	ldrb	r3, [r4, #24]
							struct i2c_master_packet wr_packet = {
     d22:	800b      	strh	r3, [r1, #0]
								.data_length = outputPort[3].writeDataLength1,
     d24:	7f23      	ldrb	r3, [r4, #28]
							struct i2c_master_packet wr_packet = {
     d26:	804b      	strh	r3, [r1, #2]
     d28:	4b0f      	ldr	r3, [pc, #60]	; (d68 <checkSetOutputs+0x98>)
     d2a:	604b      	str	r3, [r1, #4]
     d2c:	2300      	movs	r3, #0
     d2e:	720b      	strb	r3, [r1, #8]
     d30:	724b      	strb	r3, [r1, #9]
     d32:	728b      	strb	r3, [r1, #10]
							I2CWrite((i+1) , &wr_packet);
     d34:	2004      	movs	r0, #4
     d36:	4b0d      	ldr	r3, [pc, #52]	; (d6c <checkSetOutputs+0x9c>)
     d38:	4798      	blx	r3
							delay_cycles_ms(5);
     d3a:	0028      	movs	r0, r5
     d3c:	4b0c      	ldr	r3, [pc, #48]	; (d70 <checkSetOutputs+0xa0>)
     d3e:	4798      	blx	r3
							outputPort[i].initialization	  =		true;
     d40:	2301      	movs	r3, #1
     d42:	77a3      	strb	r3, [r4, #30]
							outputPort[i].currentState		  =		OUTPUT_LEDMATRIX;
     d44:	3302      	adds	r3, #2
     d46:	7663      	strb	r3, [r4, #25]
		}
		
	}
	
	
}
     d48:	b005      	add	sp, #20
     d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
							resetOutput(i);
     d4c:	0030      	movs	r0, r6
     d4e:	4b09      	ldr	r3, [pc, #36]	; (d74 <checkSetOutputs+0xa4>)
     d50:	4798      	blx	r3
							disableI2CModule(i+1);
     d52:	3601      	adds	r6, #1
     d54:	b2f0      	uxtb	r0, r6
     d56:	4b08      	ldr	r3, [pc, #32]	; (d78 <checkSetOutputs+0xa8>)
     d58:	4798      	blx	r3
							break;
     d5a:	e7c1      	b.n	ce0 <checkSetOutputs+0x10>
     d5c:	20001088 	.word	0x20001088
     d60:	20000f3c 	.word	0x20000f3c
     d64:	00000f99 	.word	0x00000f99
     d68:	20000000 	.word	0x20000000
     d6c:	00000e25 	.word	0x00000e25
     d70:	00001339 	.word	0x00001339
     d74:	00000cb5 	.word	0x00000cb5
     d78:	000010e5 	.word	0x000010e5

00000d7c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     d7c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d7e:	2207      	movs	r2, #7
     d80:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     d82:	421a      	tst	r2, r3
     d84:	d1fc      	bne.n	d80 <_i2c_master_wait_for_sync+0x4>
}
     d86:	4770      	bx	lr

00000d88 <i2c_write_complete_callback_4>:
	rd_packet_4.address     = outputPort[3].address;
	rd_packet_4.data_length = outputPort[3].readDataLength;
	rd_packet_4.data        = rd_buffer_4;
	i2c_master_read_packet_job(&i2c_master_instance_4,&rd_packet_4);
	*/
	outputPort[3].I2CStatus = IDLE_MODE;
     d88:	2201      	movs	r2, #1
     d8a:	4b01      	ldr	r3, [pc, #4]	; (d90 <i2c_write_complete_callback_4+0x8>)
     d8c:	77da      	strb	r2, [r3, #31]
}
     d8e:	4770      	bx	lr
     d90:	20001088 	.word	0x20001088

00000d94 <i2c_write_complete_callback_1>:
{
     d94:	b510      	push	{r4, lr}
	rd_packet_1.address     = outputPort[0].address;
     d96:	4906      	ldr	r1, [pc, #24]	; (db0 <i2c_write_complete_callback_1+0x1c>)
     d98:	4b06      	ldr	r3, [pc, #24]	; (db4 <i2c_write_complete_callback_1+0x20>)
     d9a:	781a      	ldrb	r2, [r3, #0]
     d9c:	800a      	strh	r2, [r1, #0]
	rd_packet_1.data_length = outputPort[0].readDataLength;
     d9e:	78db      	ldrb	r3, [r3, #3]
     da0:	804b      	strh	r3, [r1, #2]
	rd_packet_1.data        = rd_buffer_1;
     da2:	4b05      	ldr	r3, [pc, #20]	; (db8 <i2c_write_complete_callback_1+0x24>)
     da4:	604b      	str	r3, [r1, #4]
	i2c_master_read_packet_job(&i2c_master_instance_1,&rd_packet_1);
     da6:	4805      	ldr	r0, [pc, #20]	; (dbc <i2c_write_complete_callback_1+0x28>)
     da8:	4b05      	ldr	r3, [pc, #20]	; (dc0 <i2c_write_complete_callback_1+0x2c>)
     daa:	4798      	blx	r3
}
     dac:	bd10      	pop	{r4, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	20000e54 	.word	0x20000e54
     db4:	20001088 	.word	0x20001088
     db8:	200000c4 	.word	0x200000c4
     dbc:	20000e20 	.word	0x20000e20
     dc0:	000006a1 	.word	0x000006a1

00000dc4 <i2c_write_complete_callback_2>:
{
     dc4:	b510      	push	{r4, lr}
	rd_packet_2.address     = outputPort[1].address;
     dc6:	4906      	ldr	r1, [pc, #24]	; (de0 <i2c_write_complete_callback_2+0x1c>)
     dc8:	4b06      	ldr	r3, [pc, #24]	; (de4 <i2c_write_complete_callback_2+0x20>)
     dca:	7a1a      	ldrb	r2, [r3, #8]
     dcc:	800a      	strh	r2, [r1, #0]
	rd_packet_2.data_length = outputPort[1].readDataLength;
     dce:	7adb      	ldrb	r3, [r3, #11]
     dd0:	804b      	strh	r3, [r1, #2]
	rd_packet_2.data        = rd_buffer_2;
     dd2:	4b05      	ldr	r3, [pc, #20]	; (de8 <i2c_write_complete_callback_2+0x24>)
     dd4:	604b      	str	r3, [r1, #4]
	i2c_master_read_packet_job(&i2c_master_instance_2,&rd_packet_2);
     dd6:	4805      	ldr	r0, [pc, #20]	; (dec <i2c_write_complete_callback_2+0x28>)
     dd8:	4b05      	ldr	r3, [pc, #20]	; (df0 <i2c_write_complete_callback_2+0x2c>)
     dda:	4798      	blx	r3
}
     ddc:	bd10      	pop	{r4, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	20000e14 	.word	0x20000e14
     de4:	20001088 	.word	0x20001088
     de8:	200000d8 	.word	0x200000d8
     dec:	20000de0 	.word	0x20000de0
     df0:	000006a1 	.word	0x000006a1

00000df4 <i2c_write_complete_callback_3>:
{
     df4:	b510      	push	{r4, lr}
	rd_packet_3.address     = outputPort[2].address;
     df6:	4906      	ldr	r1, [pc, #24]	; (e10 <i2c_write_complete_callback_3+0x1c>)
     df8:	4b06      	ldr	r3, [pc, #24]	; (e14 <i2c_write_complete_callback_3+0x20>)
     dfa:	7c1a      	ldrb	r2, [r3, #16]
     dfc:	800a      	strh	r2, [r1, #0]
	rd_packet_3.data_length = outputPort[2].readDataLength;
     dfe:	7cdb      	ldrb	r3, [r3, #19]
     e00:	804b      	strh	r3, [r1, #2]
	rd_packet_3.data        = rd_buffer_3;
     e02:	4b05      	ldr	r3, [pc, #20]	; (e18 <i2c_write_complete_callback_3+0x24>)
     e04:	604b      	str	r3, [r1, #4]
	i2c_master_read_packet_job(&i2c_master_instance_3,&rd_packet_3);
     e06:	4805      	ldr	r0, [pc, #20]	; (e1c <i2c_write_complete_callback_3+0x28>)
     e08:	4b05      	ldr	r3, [pc, #20]	; (e20 <i2c_write_complete_callback_3+0x2c>)
     e0a:	4798      	blx	r3
}
     e0c:	bd10      	pop	{r4, pc}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	20000e48 	.word	0x20000e48
     e14:	20001088 	.word	0x20001088
     e18:	200000ec 	.word	0x200000ec
     e1c:	20000e88 	.word	0x20000e88
     e20:	000006a1 	.word	0x000006a1

00000e24 <I2CWrite>:
{
     e24:	b510      	push	{r4, lr}
	switch(instanceNo)
     e26:	2802      	cmp	r0, #2
     e28:	d00e      	beq.n	e48 <I2CWrite+0x24>
     e2a:	d907      	bls.n	e3c <I2CWrite+0x18>
     e2c:	2803      	cmp	r0, #3
     e2e:	d00f      	beq.n	e50 <I2CWrite+0x2c>
     e30:	2804      	cmp	r0, #4
     e32:	d108      	bne.n	e46 <I2CWrite+0x22>
			i2c_master_write_packet_job(&i2c_master_instance_4, wr_packet);
     e34:	4808      	ldr	r0, [pc, #32]	; (e58 <I2CWrite+0x34>)
     e36:	4b09      	ldr	r3, [pc, #36]	; (e5c <I2CWrite+0x38>)
     e38:	4798      	blx	r3
}
     e3a:	e004      	b.n	e46 <I2CWrite+0x22>
	switch(instanceNo)
     e3c:	2801      	cmp	r0, #1
     e3e:	d102      	bne.n	e46 <I2CWrite+0x22>
			i2c_master_write_packet_job(&i2c_master_instance_1, wr_packet);
     e40:	4807      	ldr	r0, [pc, #28]	; (e60 <I2CWrite+0x3c>)
     e42:	4b06      	ldr	r3, [pc, #24]	; (e5c <I2CWrite+0x38>)
     e44:	4798      	blx	r3
}
     e46:	bd10      	pop	{r4, pc}
			i2c_master_write_packet_job(&i2c_master_instance_2, wr_packet);
     e48:	4806      	ldr	r0, [pc, #24]	; (e64 <I2CWrite+0x40>)
     e4a:	4b04      	ldr	r3, [pc, #16]	; (e5c <I2CWrite+0x38>)
     e4c:	4798      	blx	r3
			break;
     e4e:	e7fa      	b.n	e46 <I2CWrite+0x22>
			i2c_master_write_packet_job(&i2c_master_instance_3, wr_packet);
     e50:	4805      	ldr	r0, [pc, #20]	; (e68 <I2CWrite+0x44>)
     e52:	4b02      	ldr	r3, [pc, #8]	; (e5c <I2CWrite+0x38>)
     e54:	4798      	blx	r3
			break;
     e56:	e7f6      	b.n	e46 <I2CWrite+0x22>
     e58:	20000e60 	.word	0x20000e60
     e5c:	000006c5 	.word	0x000006c5
     e60:	20000e20 	.word	0x20000e20
     e64:	20000de0 	.word	0x20000de0
     e68:	20000e88 	.word	0x20000e88

00000e6c <initializeI2CModules>:
#define SLAVE_ADDRESS		10

void initializeI2CModules()
{
     e6c:	b530      	push	{r4, r5, lr}
     e6e:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
     e70:	ab01      	add	r3, sp, #4
     e72:	22c8      	movs	r2, #200	; 0xc8
     e74:	0052      	lsls	r2, r2, #1
     e76:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     e78:	4a30      	ldr	r2, [pc, #192]	; (f3c <initializeI2CModules+0xd0>)
     e7a:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     e7c:	2200      	movs	r2, #0
     e7e:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     e80:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     e82:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     e84:	2180      	movs	r1, #128	; 0x80
     e86:	0389      	lsls	r1, r1, #14
     e88:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
     e8a:	2101      	movs	r1, #1
     e8c:	4249      	negs	r1, r1
     e8e:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
     e90:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     e92:	3125      	adds	r1, #37	; 0x25
     e94:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     e96:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     e98:	3108      	adds	r1, #8
     e9a:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     e9c:	3101      	adds	r1, #1
     e9e:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
     ea0:	3101      	adds	r1, #1
     ea2:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     ea4:	32d7      	adds	r2, #215	; 0xd7
     ea6:	861a      	strh	r2, [r3, #48]	; 0x30
	uint16_t timeout = 0;
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	
	//Output 1 
	config_i2c_master.pinmux_pad0    = OUTPUT1_I2C_SDA;
     ea8:	4a25      	ldr	r2, [pc, #148]	; (f40 <initializeI2CModules+0xd4>)
     eaa:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT1_I2C_SCL;
     eac:	4a25      	ldr	r2, [pc, #148]	; (f44 <initializeI2CModules+0xd8>)
     eae:	9209      	str	r2, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_1,  CONF_I2C_MASTER_MODULE_OUTPUT_1, &config_i2c_master)   != STATUS_OK);
     eb0:	4d25      	ldr	r5, [pc, #148]	; (f48 <initializeI2CModules+0xdc>)
     eb2:	4c26      	ldr	r4, [pc, #152]	; (f4c <initializeI2CModules+0xe0>)
     eb4:	aa01      	add	r2, sp, #4
     eb6:	4926      	ldr	r1, [pc, #152]	; (f50 <initializeI2CModules+0xe4>)
     eb8:	0028      	movs	r0, r5
     eba:	47a0      	blx	r4
     ebc:	2800      	cmp	r0, #0
     ebe:	d1f9      	bne.n	eb4 <initializeI2CModules+0x48>
	i2c_master_register_callback(&i2c_master_instance_1, i2c_write_complete_callback_1,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
     ec0:	2200      	movs	r2, #0
     ec2:	4924      	ldr	r1, [pc, #144]	; (f54 <initializeI2CModules+0xe8>)
     ec4:	4820      	ldr	r0, [pc, #128]	; (f48 <initializeI2CModules+0xdc>)
     ec6:	4b24      	ldr	r3, [pc, #144]	; (f58 <initializeI2CModules+0xec>)
     ec8:	4798      	blx	r3
	
	//Output 2
	config_i2c_master.pinmux_pad0    = OUTPUT2_I2C_SDA;
     eca:	4b24      	ldr	r3, [pc, #144]	; (f5c <initializeI2CModules+0xf0>)
     ecc:	9308      	str	r3, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT2_I2C_SCL;
     ece:	4b24      	ldr	r3, [pc, #144]	; (f60 <initializeI2CModules+0xf4>)
     ed0:	9309      	str	r3, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_2,  CONF_I2C_MASTER_MODULE_OUTPUT_2, &config_i2c_master)   != STATUS_OK);
     ed2:	4d24      	ldr	r5, [pc, #144]	; (f64 <initializeI2CModules+0xf8>)
     ed4:	4c1d      	ldr	r4, [pc, #116]	; (f4c <initializeI2CModules+0xe0>)
     ed6:	aa01      	add	r2, sp, #4
     ed8:	4923      	ldr	r1, [pc, #140]	; (f68 <initializeI2CModules+0xfc>)
     eda:	0028      	movs	r0, r5
     edc:	47a0      	blx	r4
     ede:	2800      	cmp	r0, #0
     ee0:	d1f9      	bne.n	ed6 <initializeI2CModules+0x6a>
	i2c_master_register_callback(&i2c_master_instance_2, i2c_write_complete_callback_2, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
     ee2:	2200      	movs	r2, #0
     ee4:	4921      	ldr	r1, [pc, #132]	; (f6c <initializeI2CModules+0x100>)
     ee6:	481f      	ldr	r0, [pc, #124]	; (f64 <initializeI2CModules+0xf8>)
     ee8:	4b1b      	ldr	r3, [pc, #108]	; (f58 <initializeI2CModules+0xec>)
     eea:	4798      	blx	r3
	
	//Output 3
	config_i2c_master.pinmux_pad0    = OUTPUT3_I2C_SDA;
     eec:	4b20      	ldr	r3, [pc, #128]	; (f70 <initializeI2CModules+0x104>)
     eee:	9308      	str	r3, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT3_I2C_SCL;
     ef0:	4b20      	ldr	r3, [pc, #128]	; (f74 <initializeI2CModules+0x108>)
     ef2:	9309      	str	r3, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_3,  CONF_I2C_MASTER_MODULE_OUTPUT_3, &config_i2c_master)   != STATUS_OK);
     ef4:	4d20      	ldr	r5, [pc, #128]	; (f78 <initializeI2CModules+0x10c>)
     ef6:	4c15      	ldr	r4, [pc, #84]	; (f4c <initializeI2CModules+0xe0>)
     ef8:	aa01      	add	r2, sp, #4
     efa:	4920      	ldr	r1, [pc, #128]	; (f7c <initializeI2CModules+0x110>)
     efc:	0028      	movs	r0, r5
     efe:	47a0      	blx	r4
     f00:	2800      	cmp	r0, #0
     f02:	d1f9      	bne.n	ef8 <initializeI2CModules+0x8c>
	i2c_master_register_callback(&i2c_master_instance_3, i2c_write_complete_callback_3,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
     f04:	2200      	movs	r2, #0
     f06:	491e      	ldr	r1, [pc, #120]	; (f80 <initializeI2CModules+0x114>)
     f08:	481b      	ldr	r0, [pc, #108]	; (f78 <initializeI2CModules+0x10c>)
     f0a:	4b13      	ldr	r3, [pc, #76]	; (f58 <initializeI2CModules+0xec>)
     f0c:	4798      	blx	r3
	
	
	//Output 4
	config_i2c_master.pinmux_pad0    = OUTPUT4_I2C_SDA;
     f0e:	ab01      	add	r3, sp, #4
     f10:	4a1c      	ldr	r2, [pc, #112]	; (f84 <initializeI2CModules+0x118>)
     f12:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT4_I2C_SCL;
     f14:	4a1c      	ldr	r2, [pc, #112]	; (f88 <initializeI2CModules+0x11c>)
     f16:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
     f18:	22fa      	movs	r2, #250	; 0xfa
     f1a:	0092      	lsls	r2, r2, #2
     f1c:	82da      	strh	r2, [r3, #22]
	//config_i2c_master.generator_source = GCLK_GENERATOR_0;
	while(i2c_master_init(&i2c_master_instance_4,  CONF_I2C_MASTER_MODULE_OUTPUT_4, &config_i2c_master)   != STATUS_OK);
     f1e:	4d1b      	ldr	r5, [pc, #108]	; (f8c <initializeI2CModules+0x120>)
     f20:	4c0a      	ldr	r4, [pc, #40]	; (f4c <initializeI2CModules+0xe0>)
     f22:	aa01      	add	r2, sp, #4
     f24:	491a      	ldr	r1, [pc, #104]	; (f90 <initializeI2CModules+0x124>)
     f26:	0028      	movs	r0, r5
     f28:	47a0      	blx	r4
     f2a:	2800      	cmp	r0, #0
     f2c:	d1f9      	bne.n	f22 <initializeI2CModules+0xb6>
	i2c_master_register_callback(&i2c_master_instance_4, i2c_write_complete_callback_4, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
     f2e:	2200      	movs	r2, #0
     f30:	4918      	ldr	r1, [pc, #96]	; (f94 <initializeI2CModules+0x128>)
     f32:	4816      	ldr	r0, [pc, #88]	; (f8c <initializeI2CModules+0x120>)
     f34:	4b08      	ldr	r3, [pc, #32]	; (f58 <initializeI2CModules+0xec>)
     f36:	4798      	blx	r3
			//	break;
			//}
		//}
	
	
}
     f38:	b00f      	add	sp, #60	; 0x3c
     f3a:	bd30      	pop	{r4, r5, pc}
     f3c:	00000d48 	.word	0x00000d48
     f40:	00080002 	.word	0x00080002
     f44:	00090002 	.word	0x00090002
     f48:	20000e20 	.word	0x20000e20
     f4c:	00000115 	.word	0x00000115
     f50:	42000800 	.word	0x42000800
     f54:	00000d95 	.word	0x00000d95
     f58:	00000689 	.word	0x00000689
     f5c:	000c0002 	.word	0x000c0002
     f60:	000d0002 	.word	0x000d0002
     f64:	20000de0 	.word	0x20000de0
     f68:	42001000 	.word	0x42001000
     f6c:	00000dc5 	.word	0x00000dc5
     f70:	00100002 	.word	0x00100002
     f74:	00110002 	.word	0x00110002
     f78:	20000e88 	.word	0x20000e88
     f7c:	42000c00 	.word	0x42000c00
     f80:	00000df5 	.word	0x00000df5
     f84:	00160002 	.word	0x00160002
     f88:	00170002 	.word	0x00170002
     f8c:	20000e60 	.word	0x20000e60
     f90:	42001400 	.word	0x42001400
     f94:	00000d89 	.word	0x00000d89

00000f98 <enableI2CModule>:

void enableI2CModule(uint8_t port)
{
     f98:	b570      	push	{r4, r5, r6, lr}
	switch(port)
     f9a:	2802      	cmp	r0, #2
     f9c:	d04d      	beq.n	103a <enableI2CModule+0xa2>
     f9e:	d927      	bls.n	ff0 <enableI2CModule+0x58>
     fa0:	2803      	cmp	r0, #3
     fa2:	d100      	bne.n	fa6 <enableI2CModule+0xe>
     fa4:	e06c      	b.n	1080 <enableI2CModule+0xe8>
     fa6:	2804      	cmp	r0, #4
     fa8:	d146      	bne.n	1038 <enableI2CModule+0xa0>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     faa:	4d47      	ldr	r5, [pc, #284]	; (10c8 <enableI2CModule+0x130>)
     fac:	682c      	ldr	r4, [r5, #0]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
     fae:	0028      	movs	r0, r5
     fb0:	4b46      	ldr	r3, [pc, #280]	; (10cc <enableI2CModule+0x134>)
     fb2:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     fb4:	6823      	ldr	r3, [r4, #0]
     fb6:	2202      	movs	r2, #2
     fb8:	4313      	orrs	r3, r2
     fba:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     fbc:	6828      	ldr	r0, [r5, #0]
     fbe:	4b44      	ldr	r3, [pc, #272]	; (10d0 <enableI2CModule+0x138>)
     fc0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     fc2:	231f      	movs	r3, #31
     fc4:	4018      	ands	r0, r3
     fc6:	3b1e      	subs	r3, #30
     fc8:	4083      	lsls	r3, r0
     fca:	4a42      	ldr	r2, [pc, #264]	; (10d4 <enableI2CModule+0x13c>)
     fcc:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     fce:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     fd0:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     fd2:	2110      	movs	r1, #16
     fd4:	8b62      	ldrh	r2, [r4, #26]
     fd6:	420a      	tst	r2, r1
     fd8:	d104      	bne.n	fe4 <enableI2CModule+0x4c>
		timeout_counter++;
     fda:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     fdc:	4283      	cmp	r3, r0
     fde:	d3f9      	bcc.n	fd4 <enableI2CModule+0x3c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     fe0:	2310      	movs	r3, #16
     fe2:	8363      	strh	r3, [r4, #26]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
     fe4:	4a38      	ldr	r2, [pc, #224]	; (10c8 <enableI2CModule+0x130>)
     fe6:	7e53      	ldrb	r3, [r2, #25]
     fe8:	2101      	movs	r1, #1
     fea:	430b      	orrs	r3, r1
     fec:	7653      	strb	r3, [r2, #25]
			
		default:
			break;
	}
	
}
     fee:	e023      	b.n	1038 <enableI2CModule+0xa0>
	switch(port)
     ff0:	2801      	cmp	r0, #1
     ff2:	d121      	bne.n	1038 <enableI2CModule+0xa0>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ff4:	4d38      	ldr	r5, [pc, #224]	; (10d8 <enableI2CModule+0x140>)
     ff6:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
     ff8:	0028      	movs	r0, r5
     ffa:	4b34      	ldr	r3, [pc, #208]	; (10cc <enableI2CModule+0x134>)
     ffc:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     ffe:	6823      	ldr	r3, [r4, #0]
    1000:	2202      	movs	r2, #2
    1002:	4313      	orrs	r3, r2
    1004:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1006:	6828      	ldr	r0, [r5, #0]
    1008:	4b31      	ldr	r3, [pc, #196]	; (10d0 <enableI2CModule+0x138>)
    100a:	4798      	blx	r3
    100c:	231f      	movs	r3, #31
    100e:	4018      	ands	r0, r3
    1010:	3b1e      	subs	r3, #30
    1012:	4083      	lsls	r3, r0
    1014:	4a2f      	ldr	r2, [pc, #188]	; (10d4 <enableI2CModule+0x13c>)
    1016:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1018:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    101a:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    101c:	2110      	movs	r1, #16
    101e:	8b62      	ldrh	r2, [r4, #26]
    1020:	420a      	tst	r2, r1
    1022:	d104      	bne.n	102e <enableI2CModule+0x96>
		timeout_counter++;
    1024:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1026:	4283      	cmp	r3, r0
    1028:	d3f9      	bcc.n	101e <enableI2CModule+0x86>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    102a:	2310      	movs	r3, #16
    102c:	8363      	strh	r3, [r4, #26]
    102e:	4a2a      	ldr	r2, [pc, #168]	; (10d8 <enableI2CModule+0x140>)
    1030:	7e53      	ldrb	r3, [r2, #25]
    1032:	2101      	movs	r1, #1
    1034:	430b      	orrs	r3, r1
    1036:	7653      	strb	r3, [r2, #25]
}
    1038:	bd70      	pop	{r4, r5, r6, pc}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    103a:	4d28      	ldr	r5, [pc, #160]	; (10dc <enableI2CModule+0x144>)
    103c:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    103e:	0028      	movs	r0, r5
    1040:	4b22      	ldr	r3, [pc, #136]	; (10cc <enableI2CModule+0x134>)
    1042:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1044:	6823      	ldr	r3, [r4, #0]
    1046:	2202      	movs	r2, #2
    1048:	4313      	orrs	r3, r2
    104a:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    104c:	6828      	ldr	r0, [r5, #0]
    104e:	4b20      	ldr	r3, [pc, #128]	; (10d0 <enableI2CModule+0x138>)
    1050:	4798      	blx	r3
    1052:	231f      	movs	r3, #31
    1054:	4018      	ands	r0, r3
    1056:	3b1e      	subs	r3, #30
    1058:	4083      	lsls	r3, r0
    105a:	4a1e      	ldr	r2, [pc, #120]	; (10d4 <enableI2CModule+0x13c>)
    105c:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    105e:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1060:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1062:	2110      	movs	r1, #16
    1064:	8b62      	ldrh	r2, [r4, #26]
    1066:	420a      	tst	r2, r1
    1068:	d104      	bne.n	1074 <enableI2CModule+0xdc>
		timeout_counter++;
    106a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    106c:	4283      	cmp	r3, r0
    106e:	d3f9      	bcc.n	1064 <enableI2CModule+0xcc>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1070:	2310      	movs	r3, #16
    1072:	8363      	strh	r3, [r4, #26]
    1074:	4a19      	ldr	r2, [pc, #100]	; (10dc <enableI2CModule+0x144>)
    1076:	7e53      	ldrb	r3, [r2, #25]
    1078:	2101      	movs	r1, #1
    107a:	430b      	orrs	r3, r1
    107c:	7653      	strb	r3, [r2, #25]
    107e:	e7db      	b.n	1038 <enableI2CModule+0xa0>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1080:	4d17      	ldr	r5, [pc, #92]	; (10e0 <enableI2CModule+0x148>)
    1082:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1084:	0028      	movs	r0, r5
    1086:	4b11      	ldr	r3, [pc, #68]	; (10cc <enableI2CModule+0x134>)
    1088:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    108a:	6823      	ldr	r3, [r4, #0]
    108c:	2202      	movs	r2, #2
    108e:	4313      	orrs	r3, r2
    1090:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1092:	6828      	ldr	r0, [r5, #0]
    1094:	4b0e      	ldr	r3, [pc, #56]	; (10d0 <enableI2CModule+0x138>)
    1096:	4798      	blx	r3
    1098:	231f      	movs	r3, #31
    109a:	4018      	ands	r0, r3
    109c:	3b1e      	subs	r3, #30
    109e:	4083      	lsls	r3, r0
    10a0:	4a0c      	ldr	r2, [pc, #48]	; (10d4 <enableI2CModule+0x13c>)
    10a2:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    10a4:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    10a6:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    10a8:	2110      	movs	r1, #16
    10aa:	8b62      	ldrh	r2, [r4, #26]
    10ac:	420a      	tst	r2, r1
    10ae:	d104      	bne.n	10ba <enableI2CModule+0x122>
		timeout_counter++;
    10b0:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    10b2:	4283      	cmp	r3, r0
    10b4:	d3f9      	bcc.n	10aa <enableI2CModule+0x112>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    10b6:	2310      	movs	r3, #16
    10b8:	8363      	strh	r3, [r4, #26]
    10ba:	4a09      	ldr	r2, [pc, #36]	; (10e0 <enableI2CModule+0x148>)
    10bc:	7e53      	ldrb	r3, [r2, #25]
    10be:	2101      	movs	r1, #1
    10c0:	430b      	orrs	r3, r1
    10c2:	7653      	strb	r3, [r2, #25]
    10c4:	e7b8      	b.n	1038 <enableI2CModule+0xa0>
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	20000e60 	.word	0x20000e60
    10cc:	00000d7d 	.word	0x00000d7d
    10d0:	00001c49 	.word	0x00001c49
    10d4:	e000e100 	.word	0xe000e100
    10d8:	20000e20 	.word	0x20000e20
    10dc:	20000de0 	.word	0x20000de0
    10e0:	20000e88 	.word	0x20000e88

000010e4 <disableI2CModule>:

void disableI2CModule(uint8_t port)
{
    10e4:	b570      	push	{r4, r5, r6, lr}

	switch(port)
    10e6:	2802      	cmp	r0, #2
    10e8:	d03c      	beq.n	1164 <disableI2CModule+0x80>
    10ea:	d91e      	bls.n	112a <disableI2CModule+0x46>
    10ec:	2803      	cmp	r0, #3
    10ee:	d054      	beq.n	119a <disableI2CModule+0xb6>
    10f0:	2804      	cmp	r0, #4
    10f2:	d136      	bne.n	1162 <disableI2CModule+0x7e>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    10f4:	4d36      	ldr	r5, [pc, #216]	; (11d0 <disableI2CModule+0xec>)
    10f6:	682c      	ldr	r4, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    10f8:	0020      	movs	r0, r4
    10fa:	4b36      	ldr	r3, [pc, #216]	; (11d4 <disableI2CModule+0xf0>)
    10fc:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    10fe:	231f      	movs	r3, #31
    1100:	4018      	ands	r0, r3
    1102:	2601      	movs	r6, #1
    1104:	0031      	movs	r1, r6
    1106:	4081      	lsls	r1, r0
    1108:	3361      	adds	r3, #97	; 0x61
    110a:	4a33      	ldr	r2, [pc, #204]	; (11d8 <disableI2CModule+0xf4>)
    110c:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    110e:	0028      	movs	r0, r5
    1110:	4b32      	ldr	r3, [pc, #200]	; (11dc <disableI2CModule+0xf8>)
    1112:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1114:	2383      	movs	r3, #131	; 0x83
    1116:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1118:	7623      	strb	r3, [r4, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    111a:	6823      	ldr	r3, [r4, #0]
    111c:	2202      	movs	r2, #2
    111e:	4393      	bics	r3, r2
    1120:	6023      	str	r3, [r4, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as disabled */
	module->enabled_callback &= ~(1 << callback_type);
    1122:	7e6b      	ldrb	r3, [r5, #25]
    1124:	43b3      	bics	r3, r6
    1126:	766b      	strb	r3, [r5, #25]
		
		default:
			break;
	}
	
}
    1128:	e01b      	b.n	1162 <disableI2CModule+0x7e>
	switch(port)
    112a:	2801      	cmp	r0, #1
    112c:	d119      	bne.n	1162 <disableI2CModule+0x7e>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    112e:	4d2c      	ldr	r5, [pc, #176]	; (11e0 <disableI2CModule+0xfc>)
    1130:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1132:	0020      	movs	r0, r4
    1134:	4b27      	ldr	r3, [pc, #156]	; (11d4 <disableI2CModule+0xf0>)
    1136:	4798      	blx	r3
    1138:	231f      	movs	r3, #31
    113a:	4018      	ands	r0, r3
    113c:	2601      	movs	r6, #1
    113e:	0031      	movs	r1, r6
    1140:	4081      	lsls	r1, r0
    1142:	3361      	adds	r3, #97	; 0x61
    1144:	4a24      	ldr	r2, [pc, #144]	; (11d8 <disableI2CModule+0xf4>)
    1146:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    1148:	0028      	movs	r0, r5
    114a:	4b24      	ldr	r3, [pc, #144]	; (11dc <disableI2CModule+0xf8>)
    114c:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    114e:	2383      	movs	r3, #131	; 0x83
    1150:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1152:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1154:	6823      	ldr	r3, [r4, #0]
    1156:	2202      	movs	r2, #2
    1158:	4393      	bics	r3, r2
    115a:	6023      	str	r3, [r4, #0]
    115c:	7e6b      	ldrb	r3, [r5, #25]
    115e:	43b3      	bics	r3, r6
    1160:	766b      	strb	r3, [r5, #25]
}
    1162:	bd70      	pop	{r4, r5, r6, pc}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1164:	4d1f      	ldr	r5, [pc, #124]	; (11e4 <disableI2CModule+0x100>)
    1166:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1168:	0020      	movs	r0, r4
    116a:	4b1a      	ldr	r3, [pc, #104]	; (11d4 <disableI2CModule+0xf0>)
    116c:	4798      	blx	r3
    116e:	231f      	movs	r3, #31
    1170:	4018      	ands	r0, r3
    1172:	2601      	movs	r6, #1
    1174:	0031      	movs	r1, r6
    1176:	4081      	lsls	r1, r0
    1178:	3361      	adds	r3, #97	; 0x61
    117a:	4a17      	ldr	r2, [pc, #92]	; (11d8 <disableI2CModule+0xf4>)
    117c:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    117e:	0028      	movs	r0, r5
    1180:	4b16      	ldr	r3, [pc, #88]	; (11dc <disableI2CModule+0xf8>)
    1182:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1184:	2383      	movs	r3, #131	; 0x83
    1186:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1188:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    118a:	6823      	ldr	r3, [r4, #0]
    118c:	2202      	movs	r2, #2
    118e:	4393      	bics	r3, r2
    1190:	6023      	str	r3, [r4, #0]
    1192:	7e6b      	ldrb	r3, [r5, #25]
    1194:	43b3      	bics	r3, r6
    1196:	766b      	strb	r3, [r5, #25]
    1198:	e7e3      	b.n	1162 <disableI2CModule+0x7e>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    119a:	4d13      	ldr	r5, [pc, #76]	; (11e8 <disableI2CModule+0x104>)
    119c:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    119e:	0020      	movs	r0, r4
    11a0:	4b0c      	ldr	r3, [pc, #48]	; (11d4 <disableI2CModule+0xf0>)
    11a2:	4798      	blx	r3
    11a4:	231f      	movs	r3, #31
    11a6:	4018      	ands	r0, r3
    11a8:	2601      	movs	r6, #1
    11aa:	0031      	movs	r1, r6
    11ac:	4081      	lsls	r1, r0
    11ae:	3361      	adds	r3, #97	; 0x61
    11b0:	4a09      	ldr	r2, [pc, #36]	; (11d8 <disableI2CModule+0xf4>)
    11b2:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    11b4:	0028      	movs	r0, r5
    11b6:	4b09      	ldr	r3, [pc, #36]	; (11dc <disableI2CModule+0xf8>)
    11b8:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    11ba:	2383      	movs	r3, #131	; 0x83
    11bc:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    11be:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    11c0:	6823      	ldr	r3, [r4, #0]
    11c2:	2202      	movs	r2, #2
    11c4:	4393      	bics	r3, r2
    11c6:	6023      	str	r3, [r4, #0]
    11c8:	7e6b      	ldrb	r3, [r5, #25]
    11ca:	43b3      	bics	r3, r6
    11cc:	766b      	strb	r3, [r5, #25]
    11ce:	e7c8      	b.n	1162 <disableI2CModule+0x7e>
    11d0:	20000e60 	.word	0x20000e60
    11d4:	00001c49 	.word	0x00001c49
    11d8:	e000e100 	.word	0xe000e100
    11dc:	00000d7d 	.word	0x00000d7d
    11e0:	20000e20 	.word	0x20000e20
    11e4:	20000de0 	.word	0x20000de0
    11e8:	20000e88 	.word	0x20000e88

000011ec <sendInfoCallback>:
	}
}

void sendInfoCallback()
{
	readySendData = true;
    11ec:	2201      	movs	r2, #1
    11ee:	4b01      	ldr	r3, [pc, #4]	; (11f4 <sendInfoCallback+0x8>)
    11f0:	701a      	strb	r2, [r3, #0]
	//usart_write_buffer_wait(&usart_instance, transmit_value ,VERSION_SET_LEN);
}
    11f2:	4770      	bx	lr
    11f4:	20000db7 	.word	0x20000db7

000011f8 <configureTimer>:
{
    11f8:	b510      	push	{r4, lr}
    11fa:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    11fc:	aa01      	add	r2, sp, #4
    11fe:	2300      	movs	r3, #0
    1200:	2100      	movs	r1, #0
    1202:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1204:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1206:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1208:	2000      	movs	r0, #0
    120a:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    120c:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    120e:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1210:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    1212:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1214:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1216:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1218:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    121a:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    121c:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    121e:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1220:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1222:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1224:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0]		=		true;
    1226:	3301      	adds	r3, #1
    1228:	72d3      	strb	r3, [r2, #11]
	config_tc.counter_size						=		TC_COUNTER_SIZE_8BIT; //8
    122a:	3303      	adds	r3, #3
    122c:	7093      	strb	r3, [r2, #2]
	config_tc.clock_prescaler					=		TC_CLOCK_PRESCALER_DIV1024; //1024
    122e:	23e0      	movs	r3, #224	; 0xe0
    1230:	00db      	lsls	r3, r3, #3
    1232:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period				=		0xFF;
    1234:	21ff      	movs	r1, #255	; 0xff
    1236:	2329      	movs	r3, #41	; 0x29
    1238:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_encoder_capture, SEND_TIMER , &config_tc);
    123a:	4c08      	ldr	r4, [pc, #32]	; (125c <configureTimer+0x64>)
    123c:	4908      	ldr	r1, [pc, #32]	; (1260 <configureTimer+0x68>)
    123e:	0020      	movs	r0, r4
    1240:	4b08      	ldr	r3, [pc, #32]	; (1264 <configureTimer+0x6c>)
    1242:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1244:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1246:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1248:	b25b      	sxtb	r3, r3
    124a:	2b00      	cmp	r3, #0
    124c:	dbfb      	blt.n	1246 <configureTimer+0x4e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    124e:	8813      	ldrh	r3, [r2, #0]
    1250:	2102      	movs	r1, #2
    1252:	430b      	orrs	r3, r1
    1254:	8013      	strh	r3, [r2, #0]
}
    1256:	b00e      	add	sp, #56	; 0x38
    1258:	bd10      	pop	{r4, pc}
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	20000ee4 	.word	0x20000ee4
    1260:	42003c00 	.word	0x42003c00
    1264:	00000a75 	.word	0x00000a75

00001268 <sendDataBLE>:
{
    1268:	b510      	push	{r4, lr}
	if(readySendData)
    126a:	4b07      	ldr	r3, [pc, #28]	; (1288 <sendDataBLE+0x20>)
    126c:	781b      	ldrb	r3, [r3, #0]
    126e:	2b00      	cmp	r3, #0
    1270:	d100      	bne.n	1274 <sendDataBLE+0xc>
}
    1272:	bd10      	pop	{r4, pc}
		readySendData = false;
    1274:	2200      	movs	r2, #0
    1276:	4b04      	ldr	r3, [pc, #16]	; (1288 <sendDataBLE+0x20>)
    1278:	701a      	strb	r2, [r3, #0]
		usart_write_buffer_wait(&usart_instance, sensorOutputs , LENGTH_SENSORS_DATA );
    127a:	3214      	adds	r2, #20
    127c:	4903      	ldr	r1, [pc, #12]	; (128c <sendDataBLE+0x24>)
    127e:	4804      	ldr	r0, [pc, #16]	; (1290 <sendDataBLE+0x28>)
    1280:	4b04      	ldr	r3, [pc, #16]	; (1294 <sendDataBLE+0x2c>)
    1282:	4798      	blx	r3
}
    1284:	e7f5      	b.n	1272 <sendDataBLE+0xa>
    1286:	46c0      	nop			; (mov r8, r8)
    1288:	20000db7 	.word	0x20000db7
    128c:	20000f40 	.word	0x20000f40
    1290:	20000eb0 	.word	0x20000eb0
    1294:	00002049 	.word	0x00002049

00001298 <configureTimerCallbacks>:


void configureTimerCallbacks()
{
    1298:	b510      	push	{r4, lr}
	tc_register_callback(&tc_encoder_capture, sendInfoCallback,TC_CALLBACK_OVERFLOW);
    129a:	4c0c      	ldr	r4, [pc, #48]	; (12cc <configureTimerCallbacks+0x34>)
    129c:	2200      	movs	r2, #0
    129e:	490c      	ldr	r1, [pc, #48]	; (12d0 <configureTimerCallbacks+0x38>)
    12a0:	0020      	movs	r0, r4
    12a2:	4b0c      	ldr	r3, [pc, #48]	; (12d4 <configureTimerCallbacks+0x3c>)
    12a4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    12a6:	6820      	ldr	r0, [r4, #0]
    12a8:	4b0b      	ldr	r3, [pc, #44]	; (12d8 <configureTimerCallbacks+0x40>)
    12aa:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    12ac:	4b0b      	ldr	r3, [pc, #44]	; (12dc <configureTimerCallbacks+0x44>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12ae:	5c1a      	ldrb	r2, [r3, r0]
    12b0:	231f      	movs	r3, #31
    12b2:	4013      	ands	r3, r2
    12b4:	2201      	movs	r2, #1
    12b6:	0011      	movs	r1, r2
    12b8:	4099      	lsls	r1, r3
    12ba:	4b09      	ldr	r3, [pc, #36]	; (12e0 <configureTimerCallbacks+0x48>)
    12bc:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    12be:	7e63      	ldrb	r3, [r4, #25]
    12c0:	2101      	movs	r1, #1
    12c2:	430b      	orrs	r3, r1
    12c4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    12c6:	6823      	ldr	r3, [r4, #0]
    12c8:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_encoder_capture, TC_CALLBACK_OVERFLOW);
}
    12ca:	bd10      	pop	{r4, pc}
    12cc:	20000ee4 	.word	0x20000ee4
    12d0:	000011ed 	.word	0x000011ed
    12d4:	00000951 	.word	0x00000951
    12d8:	00000a39 	.word	0x00000a39
    12dc:	00004d24 	.word	0x00004d24
    12e0:	e000e100 	.word	0xe000e100

000012e4 <configureSendInfo>:


//Send data to BLE every 30msec so that notifications can be sent in a timely manner
void configureSendInfo()
{
    12e4:	b510      	push	{r4, lr}
	configureTimer();
    12e6:	4b02      	ldr	r3, [pc, #8]	; (12f0 <configureSendInfo+0xc>)
    12e8:	4798      	blx	r3
	configureTimerCallbacks();
    12ea:	4b02      	ldr	r3, [pc, #8]	; (12f4 <configureSendInfo+0x10>)
    12ec:	4798      	blx	r3
    12ee:	bd10      	pop	{r4, pc}
    12f0:	000011f9 	.word	0x000011f9
    12f4:	00001299 	.word	0x00001299

000012f8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    12f8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    12fa:	2000      	movs	r0, #0
    12fc:	4b08      	ldr	r3, [pc, #32]	; (1320 <delay_init+0x28>)
    12fe:	4798      	blx	r3
    1300:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1302:	4c08      	ldr	r4, [pc, #32]	; (1324 <delay_init+0x2c>)
    1304:	21fa      	movs	r1, #250	; 0xfa
    1306:	0089      	lsls	r1, r1, #2
    1308:	47a0      	blx	r4
    130a:	4b07      	ldr	r3, [pc, #28]	; (1328 <delay_init+0x30>)
    130c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    130e:	4907      	ldr	r1, [pc, #28]	; (132c <delay_init+0x34>)
    1310:	0028      	movs	r0, r5
    1312:	47a0      	blx	r4
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <delay_init+0x38>)
    1316:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1318:	2205      	movs	r2, #5
    131a:	4b06      	ldr	r3, [pc, #24]	; (1334 <delay_init+0x3c>)
    131c:	601a      	str	r2, [r3, #0]
}
    131e:	bd70      	pop	{r4, r5, r6, pc}
    1320:	00002d71 	.word	0x00002d71
    1324:	0000314d 	.word	0x0000314d
    1328:	20000038 	.word	0x20000038
    132c:	000f4240 	.word	0x000f4240
    1330:	2000003c 	.word	0x2000003c
    1334:	e000e010 	.word	0xe000e010

00001338 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1338:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    133a:	4b08      	ldr	r3, [pc, #32]	; (135c <delay_cycles_ms+0x24>)
    133c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    133e:	4a08      	ldr	r2, [pc, #32]	; (1360 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1340:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1342:	2180      	movs	r1, #128	; 0x80
    1344:	0249      	lsls	r1, r1, #9
	while (n--) {
    1346:	3801      	subs	r0, #1
    1348:	d307      	bcc.n	135a <delay_cycles_ms+0x22>
	if (n > 0) {
    134a:	2c00      	cmp	r4, #0
    134c:	d0fb      	beq.n	1346 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    134e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1350:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1352:	6813      	ldr	r3, [r2, #0]
    1354:	420b      	tst	r3, r1
    1356:	d0fc      	beq.n	1352 <delay_cycles_ms+0x1a>
    1358:	e7f5      	b.n	1346 <delay_cycles_ms+0xe>
	}
}
    135a:	bd30      	pop	{r4, r5, pc}
    135c:	20000038 	.word	0x20000038
    1360:	e000e010 	.word	0xe000e010

00001364 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1364:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1366:	2200      	movs	r2, #0
    1368:	2300      	movs	r3, #0
    136a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    136c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    136e:	2100      	movs	r1, #0
    1370:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1372:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1374:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    1376:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    1378:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    137a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    137c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    137e:	24c0      	movs	r4, #192	; 0xc0
    1380:	0164      	lsls	r4, r4, #5
    1382:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1384:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1386:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    1388:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    138a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    138c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    138e:	242a      	movs	r4, #42	; 0x2a
    1390:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    1392:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1394:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1396:	3c06      	subs	r4, #6
    1398:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    139a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    139c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    139e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    13a0:	232b      	movs	r3, #43	; 0x2b
    13a2:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    13a4:	3301      	adds	r3, #1
    13a6:	54c1      	strb	r1, [r0, r3]
}
    13a8:	bd10      	pop	{r4, pc}
	...

000013ac <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    13ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ae:	46d6      	mov	lr, sl
    13b0:	464f      	mov	r7, r9
    13b2:	4646      	mov	r6, r8
    13b4:	b5c0      	push	{r6, r7, lr}
    13b6:	b096      	sub	sp, #88	; 0x58
    13b8:	0007      	movs	r7, r0
    13ba:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    13bc:	6001      	str	r1, [r0, #0]
    13be:	4ac6      	ldr	r2, [pc, #792]	; (16d8 <adc_init+0x32c>)
    13c0:	6a10      	ldr	r0, [r2, #32]
    13c2:	2380      	movs	r3, #128	; 0x80
    13c4:	025b      	lsls	r3, r3, #9
    13c6:	4303      	orrs	r3, r0
    13c8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    13ca:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    13cc:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    13ce:	07db      	lsls	r3, r3, #31
    13d0:	d505      	bpl.n	13de <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    13d2:	b016      	add	sp, #88	; 0x58
    13d4:	bc1c      	pop	{r2, r3, r4}
    13d6:	4690      	mov	r8, r2
    13d8:	4699      	mov	r9, r3
    13da:	46a2      	mov	sl, r4
    13dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    13de:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    13e0:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    13e2:	079b      	lsls	r3, r3, #30
    13e4:	d4f5      	bmi.n	13d2 <adc_init+0x26>
	module_inst->reference = config->reference;
    13e6:	7873      	ldrb	r3, [r6, #1]
    13e8:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    13ea:	2b00      	cmp	r3, #0
    13ec:	d104      	bne.n	13f8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    13ee:	4abb      	ldr	r2, [pc, #748]	; (16dc <adc_init+0x330>)
    13f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
    13f2:	2104      	movs	r1, #4
    13f4:	430b      	orrs	r3, r1
    13f6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    13f8:	2300      	movs	r3, #0
    13fa:	60bb      	str	r3, [r7, #8]
    13fc:	60fb      	str	r3, [r7, #12]
    13fe:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1400:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    1402:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1404:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1406:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1408:	4bb5      	ldr	r3, [pc, #724]	; (16e0 <adc_init+0x334>)
    140a:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    140c:	232a      	movs	r3, #42	; 0x2a
    140e:	5cf3      	ldrb	r3, [r6, r3]
    1410:	2b00      	cmp	r3, #0
    1412:	d105      	bne.n	1420 <adc_init+0x74>
    1414:	7d33      	ldrb	r3, [r6, #20]
    1416:	2b00      	cmp	r3, #0
    1418:	d102      	bne.n	1420 <adc_init+0x74>
		module_inst->software_trigger = true;
    141a:	3301      	adds	r3, #1
    141c:	777b      	strb	r3, [r7, #29]
    141e:	e001      	b.n	1424 <adc_init+0x78>
		module_inst->software_trigger = false;
    1420:	2300      	movs	r3, #0
    1422:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1424:	683b      	ldr	r3, [r7, #0]
    1426:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1428:	7833      	ldrb	r3, [r6, #0]
    142a:	466a      	mov	r2, sp
    142c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    142e:	4669      	mov	r1, sp
    1430:	201e      	movs	r0, #30
    1432:	4bac      	ldr	r3, [pc, #688]	; (16e4 <adc_init+0x338>)
    1434:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1436:	201e      	movs	r0, #30
    1438:	4bab      	ldr	r3, [pc, #684]	; (16e8 <adc_init+0x33c>)
    143a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    143c:	232c      	movs	r3, #44	; 0x2c
    143e:	5cf2      	ldrb	r2, [r6, r3]
    1440:	2a00      	cmp	r2, #0
    1442:	d054      	beq.n	14ee <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1444:	3b01      	subs	r3, #1
    1446:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1448:	7b33      	ldrb	r3, [r6, #12]
    144a:	18eb      	adds	r3, r5, r3
    144c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    144e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1450:	b2c9      	uxtb	r1, r1
    1452:	428b      	cmp	r3, r1
    1454:	d221      	bcs.n	149a <adc_init+0xee>
    1456:	1952      	adds	r2, r2, r5
    1458:	b2d3      	uxtb	r3, r2
    145a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    145c:	4ba3      	ldr	r3, [pc, #652]	; (16ec <adc_init+0x340>)
    145e:	469a      	mov	sl, r3
    1460:	e003      	b.n	146a <adc_init+0xbe>
			offset++;
    1462:	3501      	adds	r5, #1
    1464:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1466:	454d      	cmp	r5, r9
    1468:	d017      	beq.n	149a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    146a:	240f      	movs	r4, #15
    146c:	402c      	ands	r4, r5
    146e:	7b33      	ldrb	r3, [r6, #12]
    1470:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    1472:	2250      	movs	r2, #80	; 0x50
    1474:	499e      	ldr	r1, [pc, #632]	; (16f0 <adc_init+0x344>)
    1476:	a802      	add	r0, sp, #8
    1478:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    147a:	2c13      	cmp	r4, #19
    147c:	d8f1      	bhi.n	1462 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    147e:	00a4      	lsls	r4, r4, #2
    1480:	ab02      	add	r3, sp, #8
    1482:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1484:	a901      	add	r1, sp, #4
    1486:	2300      	movs	r3, #0
    1488:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    148a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    148c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    148e:	3301      	adds	r3, #1
    1490:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1492:	b2c0      	uxtb	r0, r0
    1494:	4b97      	ldr	r3, [pc, #604]	; (16f4 <adc_init+0x348>)
    1496:	4798      	blx	r3
    1498:	e7e3      	b.n	1462 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    149a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    149c:	2250      	movs	r2, #80	; 0x50
    149e:	4994      	ldr	r1, [pc, #592]	; (16f0 <adc_init+0x344>)
    14a0:	a802      	add	r0, sp, #8
    14a2:	4b92      	ldr	r3, [pc, #584]	; (16ec <adc_init+0x340>)
    14a4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    14a6:	2c13      	cmp	r4, #19
    14a8:	d913      	bls.n	14d2 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    14aa:	7d73      	ldrb	r3, [r6, #21]
    14ac:	009b      	lsls	r3, r3, #2
    14ae:	b2db      	uxtb	r3, r3
    14b0:	4642      	mov	r2, r8
    14b2:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    14b4:	7db3      	ldrb	r3, [r6, #22]
    14b6:	01db      	lsls	r3, r3, #7
    14b8:	7872      	ldrb	r2, [r6, #1]
    14ba:	4313      	orrs	r3, r2
    14bc:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    14be:	4642      	mov	r2, r8
    14c0:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    14c2:	7933      	ldrb	r3, [r6, #4]
    14c4:	2b34      	cmp	r3, #52	; 0x34
    14c6:	d900      	bls.n	14ca <adc_init+0x11e>
    14c8:	e17b      	b.n	17c2 <adc_init+0x416>
    14ca:	009b      	lsls	r3, r3, #2
    14cc:	4a8a      	ldr	r2, [pc, #552]	; (16f8 <adc_init+0x34c>)
    14ce:	58d3      	ldr	r3, [r2, r3]
    14d0:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    14d2:	00a4      	lsls	r4, r4, #2
    14d4:	ab02      	add	r3, sp, #8
    14d6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14d8:	a901      	add	r1, sp, #4
    14da:	2300      	movs	r3, #0
    14dc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    14de:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    14e0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    14e2:	3301      	adds	r3, #1
    14e4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    14e6:	b2c0      	uxtb	r0, r0
    14e8:	4b82      	ldr	r3, [pc, #520]	; (16f4 <adc_init+0x348>)
    14ea:	4798      	blx	r3
    14ec:	e7dd      	b.n	14aa <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    14ee:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    14f0:	2250      	movs	r2, #80	; 0x50
    14f2:	497f      	ldr	r1, [pc, #508]	; (16f0 <adc_init+0x344>)
    14f4:	a802      	add	r0, sp, #8
    14f6:	4b7d      	ldr	r3, [pc, #500]	; (16ec <adc_init+0x340>)
    14f8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    14fa:	2c13      	cmp	r4, #19
    14fc:	d915      	bls.n	152a <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    14fe:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1500:	2250      	movs	r2, #80	; 0x50
    1502:	497b      	ldr	r1, [pc, #492]	; (16f0 <adc_init+0x344>)
    1504:	a802      	add	r0, sp, #8
    1506:	4b79      	ldr	r3, [pc, #484]	; (16ec <adc_init+0x340>)
    1508:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    150a:	2c13      	cmp	r4, #19
    150c:	d8cd      	bhi.n	14aa <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    150e:	00a4      	lsls	r4, r4, #2
    1510:	ab02      	add	r3, sp, #8
    1512:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1514:	a901      	add	r1, sp, #4
    1516:	2300      	movs	r3, #0
    1518:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    151a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    151c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    151e:	3301      	adds	r3, #1
    1520:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1522:	b2c0      	uxtb	r0, r0
    1524:	4b73      	ldr	r3, [pc, #460]	; (16f4 <adc_init+0x348>)
    1526:	4798      	blx	r3
    1528:	e7bf      	b.n	14aa <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    152a:	00a4      	lsls	r4, r4, #2
    152c:	ab02      	add	r3, sp, #8
    152e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1530:	a901      	add	r1, sp, #4
    1532:	2300      	movs	r3, #0
    1534:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1536:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1538:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    153a:	3301      	adds	r3, #1
    153c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    153e:	b2c0      	uxtb	r0, r0
    1540:	4b6c      	ldr	r3, [pc, #432]	; (16f4 <adc_init+0x348>)
    1542:	4798      	blx	r3
    1544:	e7db      	b.n	14fe <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1546:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1548:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    154a:	2102      	movs	r1, #2
    154c:	e01a      	b.n	1584 <adc_init+0x1d8>
		adjres = config->divide_result;
    154e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1550:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1552:	2410      	movs	r4, #16
    1554:	e016      	b.n	1584 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1556:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1558:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    155a:	2101      	movs	r1, #1
    155c:	e012      	b.n	1584 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    155e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1560:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1562:	2100      	movs	r1, #0
    1564:	e00e      	b.n	1584 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1566:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1568:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    156a:	2100      	movs	r1, #0
    156c:	e00a      	b.n	1584 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    156e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1570:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    1572:	2100      	movs	r1, #0
    1574:	e006      	b.n	1584 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1576:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1578:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    157a:	2100      	movs	r1, #0
    157c:	e002      	b.n	1584 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    157e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    1580:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1582:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1584:	0109      	lsls	r1, r1, #4
    1586:	2270      	movs	r2, #112	; 0x70
    1588:	400a      	ands	r2, r1
    158a:	4313      	orrs	r3, r2
    158c:	4642      	mov	r2, r8
    158e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    1590:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    1592:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    1594:	2b3f      	cmp	r3, #63	; 0x3f
    1596:	d900      	bls.n	159a <adc_init+0x1ee>
    1598:	e71b      	b.n	13d2 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    159a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    159c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    159e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    15a0:	b25b      	sxtb	r3, r3
    15a2:	2b00      	cmp	r3, #0
    15a4:	dbfb      	blt.n	159e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    15a6:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    15a8:	8872      	ldrh	r2, [r6, #2]
    15aa:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    15ac:	2224      	movs	r2, #36	; 0x24
    15ae:	5cb2      	ldrb	r2, [r6, r2]
    15b0:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    15b2:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    15b4:	7d32      	ldrb	r2, [r6, #20]
    15b6:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    15b8:	4313      	orrs	r3, r2
    15ba:	7cb2      	ldrb	r2, [r6, #18]
    15bc:	0052      	lsls	r2, r2, #1
    15be:	4313      	orrs	r3, r2
    15c0:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    15c2:	4642      	mov	r2, r8
    15c4:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    15c6:	7e33      	ldrb	r3, [r6, #24]
    15c8:	2b00      	cmp	r3, #0
    15ca:	d020      	beq.n	160e <adc_init+0x262>
		switch (resolution) {
    15cc:	2c10      	cmp	r4, #16
    15ce:	d100      	bne.n	15d2 <adc_init+0x226>
    15d0:	e0d9      	b.n	1786 <adc_init+0x3da>
    15d2:	d800      	bhi.n	15d6 <adc_init+0x22a>
    15d4:	e098      	b.n	1708 <adc_init+0x35c>
    15d6:	2c20      	cmp	r4, #32
    15d8:	d100      	bne.n	15dc <adc_init+0x230>
    15da:	e0b6      	b.n	174a <adc_init+0x39e>
    15dc:	2c30      	cmp	r4, #48	; 0x30
    15de:	d116      	bne.n	160e <adc_init+0x262>
			if (config->differential_mode &&
    15e0:	7cf2      	ldrb	r2, [r6, #19]
    15e2:	2a00      	cmp	r2, #0
    15e4:	d00a      	beq.n	15fc <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    15e6:	69f2      	ldr	r2, [r6, #28]
    15e8:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    15ea:	2017      	movs	r0, #23
			if (config->differential_mode &&
    15ec:	2aff      	cmp	r2, #255	; 0xff
    15ee:	d900      	bls.n	15f2 <adc_init+0x246>
    15f0:	e6ef      	b.n	13d2 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    15f2:	6a32      	ldr	r2, [r6, #32]
    15f4:	3280      	adds	r2, #128	; 0x80
    15f6:	2aff      	cmp	r2, #255	; 0xff
    15f8:	d900      	bls.n	15fc <adc_init+0x250>
    15fa:	e6ea      	b.n	13d2 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    15fc:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    15fe:	69f2      	ldr	r2, [r6, #28]
    1600:	2aff      	cmp	r2, #255	; 0xff
    1602:	dd00      	ble.n	1606 <adc_init+0x25a>
    1604:	e6e5      	b.n	13d2 <adc_init+0x26>
    1606:	6a32      	ldr	r2, [r6, #32]
    1608:	2aff      	cmp	r2, #255	; 0xff
    160a:	dd00      	ble.n	160e <adc_init+0x262>
    160c:	e6e1      	b.n	13d2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    160e:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1610:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1612:	b252      	sxtb	r2, r2
    1614:	2a00      	cmp	r2, #0
    1616:	dbfb      	blt.n	1610 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1618:	4642      	mov	r2, r8
    161a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    161c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    161e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1620:	b25b      	sxtb	r3, r3
    1622:	2b00      	cmp	r3, #0
    1624:	dbfb      	blt.n	161e <adc_init+0x272>
	adc_module->WINLT.reg =
    1626:	8bb3      	ldrh	r3, [r6, #28]
    1628:	4642      	mov	r2, r8
    162a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    162c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    162e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1630:	b25b      	sxtb	r3, r3
    1632:	2b00      	cmp	r3, #0
    1634:	dbfb      	blt.n	162e <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1636:	8c33      	ldrh	r3, [r6, #32]
    1638:	4642      	mov	r2, r8
    163a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    163c:	232c      	movs	r3, #44	; 0x2c
    163e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1640:	2b00      	cmp	r3, #0
    1642:	d005      	beq.n	1650 <adc_init+0x2a4>
		inputs_to_scan--;
    1644:	3b01      	subs	r3, #1
    1646:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1648:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    164a:	2b0f      	cmp	r3, #15
    164c:	d900      	bls.n	1650 <adc_init+0x2a4>
    164e:	e6c0      	b.n	13d2 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1650:	222b      	movs	r2, #43	; 0x2b
    1652:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1654:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1656:	290f      	cmp	r1, #15
    1658:	d900      	bls.n	165c <adc_init+0x2b0>
    165a:	e6ba      	b.n	13d2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    165c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    165e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1660:	b252      	sxtb	r2, r2
    1662:	2a00      	cmp	r2, #0
    1664:	dbfb      	blt.n	165e <adc_init+0x2b2>
			config->negative_input |
    1666:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1668:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    166a:	4302      	orrs	r2, r0
    166c:	68b0      	ldr	r0, [r6, #8]
    166e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    1670:	0509      	lsls	r1, r1, #20
			config->negative_input |
    1672:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1674:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1676:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1678:	4642      	mov	r2, r8
    167a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    167c:	232a      	movs	r3, #42	; 0x2a
    167e:	5cf3      	ldrb	r3, [r6, r3]
    1680:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    1682:	230f      	movs	r3, #15
    1684:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1686:	3315      	adds	r3, #21
    1688:	5cf3      	ldrb	r3, [r6, r3]
    168a:	2b00      	cmp	r3, #0
    168c:	d012      	beq.n	16b4 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    168e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    1690:	4a1a      	ldr	r2, [pc, #104]	; (16fc <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    1692:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1694:	4293      	cmp	r3, r2
    1696:	d900      	bls.n	169a <adc_init+0x2ee>
    1698:	e69b      	b.n	13d2 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    169a:	4642      	mov	r2, r8
    169c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    169e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    16a0:	2380      	movs	r3, #128	; 0x80
    16a2:	011b      	lsls	r3, r3, #4
    16a4:	18d3      	adds	r3, r2, r3
    16a6:	4915      	ldr	r1, [pc, #84]	; (16fc <adc_init+0x350>)
    16a8:	b29b      	uxth	r3, r3
    16aa:	428b      	cmp	r3, r1
    16ac:	d900      	bls.n	16b0 <adc_init+0x304>
    16ae:	e690      	b.n	13d2 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    16b0:	4643      	mov	r3, r8
    16b2:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    16b4:	4b12      	ldr	r3, [pc, #72]	; (1700 <adc_init+0x354>)
    16b6:	681b      	ldr	r3, [r3, #0]
    16b8:	015b      	lsls	r3, r3, #5
    16ba:	22e0      	movs	r2, #224	; 0xe0
    16bc:	00d2      	lsls	r2, r2, #3
    16be:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    16c0:	4a10      	ldr	r2, [pc, #64]	; (1704 <adc_init+0x358>)
    16c2:	6851      	ldr	r1, [r2, #4]
    16c4:	0149      	lsls	r1, r1, #5
    16c6:	6812      	ldr	r2, [r2, #0]
    16c8:	0ed2      	lsrs	r2, r2, #27
    16ca:	430a      	orrs	r2, r1
    16cc:	b2d2      	uxtb	r2, r2
			) |
    16ce:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    16d0:	4642      	mov	r2, r8
    16d2:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    16d4:	2000      	movs	r0, #0
    16d6:	e67c      	b.n	13d2 <adc_init+0x26>
    16d8:	40000400 	.word	0x40000400
    16dc:	40000800 	.word	0x40000800
    16e0:	20000f00 	.word	0x20000f00
    16e4:	00002e89 	.word	0x00002e89
    16e8:	00002dfd 	.word	0x00002dfd
    16ec:	00004bdd 	.word	0x00004bdd
    16f0:	00004e00 	.word	0x00004e00
    16f4:	00002f81 	.word	0x00002f81
    16f8:	00004d2c 	.word	0x00004d2c
    16fc:	00000fff 	.word	0x00000fff
    1700:	00806024 	.word	0x00806024
    1704:	00806020 	.word	0x00806020
		switch (resolution) {
    1708:	2c00      	cmp	r4, #0
    170a:	d000      	beq.n	170e <adc_init+0x362>
    170c:	e77f      	b.n	160e <adc_init+0x262>
			if (config->differential_mode &&
    170e:	7cf2      	ldrb	r2, [r6, #19]
    1710:	2a00      	cmp	r2, #0
    1712:	d00f      	beq.n	1734 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    1714:	69f2      	ldr	r2, [r6, #28]
    1716:	2180      	movs	r1, #128	; 0x80
    1718:	0109      	lsls	r1, r1, #4
    171a:	468c      	mov	ip, r1
    171c:	4462      	add	r2, ip
			if (config->differential_mode &&
    171e:	492a      	ldr	r1, [pc, #168]	; (17c8 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1720:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1722:	428a      	cmp	r2, r1
    1724:	d900      	bls.n	1728 <adc_init+0x37c>
    1726:	e654      	b.n	13d2 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1728:	6a32      	ldr	r2, [r6, #32]
    172a:	4462      	add	r2, ip
    172c:	4926      	ldr	r1, [pc, #152]	; (17c8 <adc_init+0x41c>)
    172e:	428a      	cmp	r2, r1
    1730:	d900      	bls.n	1734 <adc_init+0x388>
    1732:	e64e      	b.n	13d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    1734:	4a24      	ldr	r2, [pc, #144]	; (17c8 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1736:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1738:	69f1      	ldr	r1, [r6, #28]
    173a:	4291      	cmp	r1, r2
    173c:	dd00      	ble.n	1740 <adc_init+0x394>
    173e:	e648      	b.n	13d2 <adc_init+0x26>
    1740:	6a31      	ldr	r1, [r6, #32]
    1742:	4291      	cmp	r1, r2
    1744:	dd00      	ble.n	1748 <adc_init+0x39c>
    1746:	e644      	b.n	13d2 <adc_init+0x26>
    1748:	e761      	b.n	160e <adc_init+0x262>
			if (config->differential_mode &&
    174a:	7cf2      	ldrb	r2, [r6, #19]
    174c:	2a00      	cmp	r2, #0
    174e:	d00f      	beq.n	1770 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    1750:	69f2      	ldr	r2, [r6, #28]
    1752:	2180      	movs	r1, #128	; 0x80
    1754:	0089      	lsls	r1, r1, #2
    1756:	468c      	mov	ip, r1
    1758:	4462      	add	r2, ip
			if (config->differential_mode &&
    175a:	491c      	ldr	r1, [pc, #112]	; (17cc <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    175c:	2017      	movs	r0, #23
			if (config->differential_mode &&
    175e:	428a      	cmp	r2, r1
    1760:	d900      	bls.n	1764 <adc_init+0x3b8>
    1762:	e636      	b.n	13d2 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    1764:	6a32      	ldr	r2, [r6, #32]
    1766:	4462      	add	r2, ip
    1768:	4918      	ldr	r1, [pc, #96]	; (17cc <adc_init+0x420>)
    176a:	428a      	cmp	r2, r1
    176c:	d900      	bls.n	1770 <adc_init+0x3c4>
    176e:	e630      	b.n	13d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1770:	4a16      	ldr	r2, [pc, #88]	; (17cc <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1772:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    1774:	69f1      	ldr	r1, [r6, #28]
    1776:	4291      	cmp	r1, r2
    1778:	dd00      	ble.n	177c <adc_init+0x3d0>
    177a:	e62a      	b.n	13d2 <adc_init+0x26>
    177c:	6a31      	ldr	r1, [r6, #32]
    177e:	4291      	cmp	r1, r2
    1780:	dd00      	ble.n	1784 <adc_init+0x3d8>
    1782:	e626      	b.n	13d2 <adc_init+0x26>
    1784:	e743      	b.n	160e <adc_init+0x262>
			if (config->differential_mode &&
    1786:	7cf2      	ldrb	r2, [r6, #19]
    1788:	2a00      	cmp	r2, #0
    178a:	d00f      	beq.n	17ac <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    178c:	69f2      	ldr	r2, [r6, #28]
    178e:	2180      	movs	r1, #128	; 0x80
    1790:	0209      	lsls	r1, r1, #8
    1792:	468c      	mov	ip, r1
    1794:	4462      	add	r2, ip
			if (config->differential_mode &&
    1796:	490e      	ldr	r1, [pc, #56]	; (17d0 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1798:	2017      	movs	r0, #23
			if (config->differential_mode &&
    179a:	428a      	cmp	r2, r1
    179c:	d900      	bls.n	17a0 <adc_init+0x3f4>
    179e:	e618      	b.n	13d2 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    17a0:	6a32      	ldr	r2, [r6, #32]
    17a2:	4462      	add	r2, ip
    17a4:	490a      	ldr	r1, [pc, #40]	; (17d0 <adc_init+0x424>)
    17a6:	428a      	cmp	r2, r1
    17a8:	d900      	bls.n	17ac <adc_init+0x400>
    17aa:	e612      	b.n	13d2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    17ac:	4a08      	ldr	r2, [pc, #32]	; (17d0 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    17ae:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    17b0:	69f1      	ldr	r1, [r6, #28]
    17b2:	4291      	cmp	r1, r2
    17b4:	dd00      	ble.n	17b8 <adc_init+0x40c>
    17b6:	e60c      	b.n	13d2 <adc_init+0x26>
    17b8:	6a31      	ldr	r1, [r6, #32]
    17ba:	4291      	cmp	r1, r2
    17bc:	dd00      	ble.n	17c0 <adc_init+0x414>
    17be:	e608      	b.n	13d2 <adc_init+0x26>
    17c0:	e725      	b.n	160e <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    17c2:	2017      	movs	r0, #23
    17c4:	e605      	b.n	13d2 <adc_init+0x26>
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	00000fff 	.word	0x00000fff
    17cc:	000003ff 	.word	0x000003ff
    17d0:	0000ffff 	.word	0x0000ffff

000017d4 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    17d4:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    17d6:	4b2e      	ldr	r3, [pc, #184]	; (1890 <ADC_Handler+0xbc>)
    17d8:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    17da:	6823      	ldr	r3, [r4, #0]
    17dc:	7e1d      	ldrb	r5, [r3, #24]
    17de:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    17e0:	07ea      	lsls	r2, r5, #31
    17e2:	d505      	bpl.n	17f0 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    17e4:	7ee2      	ldrb	r2, [r4, #27]
    17e6:	07d2      	lsls	r2, r2, #31
    17e8:	d502      	bpl.n	17f0 <ADC_Handler+0x1c>
    17ea:	7ea2      	ldrb	r2, [r4, #26]
    17ec:	07d2      	lsls	r2, r2, #31
    17ee:	d416      	bmi.n	181e <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    17f0:	076b      	lsls	r3, r5, #29
    17f2:	d508      	bpl.n	1806 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    17f4:	2304      	movs	r3, #4
    17f6:	6822      	ldr	r2, [r4, #0]
    17f8:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    17fa:	7ee3      	ldrb	r3, [r4, #27]
    17fc:	079b      	lsls	r3, r3, #30
    17fe:	d502      	bpl.n	1806 <ADC_Handler+0x32>
    1800:	7ea3      	ldrb	r3, [r4, #26]
    1802:	079b      	lsls	r3, r3, #30
    1804:	d43c      	bmi.n	1880 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    1806:	07ab      	lsls	r3, r5, #30
    1808:	d508      	bpl.n	181c <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    180a:	2302      	movs	r3, #2
    180c:	6822      	ldr	r2, [r4, #0]
    180e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1810:	7ee3      	ldrb	r3, [r4, #27]
    1812:	075b      	lsls	r3, r3, #29
    1814:	d502      	bpl.n	181c <ADC_Handler+0x48>
    1816:	7ea3      	ldrb	r3, [r4, #26]
    1818:	075b      	lsls	r3, r3, #29
    181a:	d435      	bmi.n	1888 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    181c:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    181e:	2201      	movs	r2, #1
    1820:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    1822:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1824:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    1826:	b25b      	sxtb	r3, r3
    1828:	2b00      	cmp	r3, #0
    182a:	dbfb      	blt.n	1824 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    182c:	6961      	ldr	r1, [r4, #20]
    182e:	1c8b      	adds	r3, r1, #2
    1830:	6163      	str	r3, [r4, #20]
    1832:	8b53      	ldrh	r3, [r2, #26]
    1834:	b29b      	uxth	r3, r3
    1836:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    1838:	8b23      	ldrh	r3, [r4, #24]
    183a:	3b01      	subs	r3, #1
    183c:	b29b      	uxth	r3, r3
    183e:	8323      	strh	r3, [r4, #24]
    1840:	2b00      	cmp	r3, #0
    1842:	d011      	beq.n	1868 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
    1844:	7f63      	ldrb	r3, [r4, #29]
    1846:	2b00      	cmp	r3, #0
    1848:	d0d2      	beq.n	17f0 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    184a:	6822      	ldr	r2, [r4, #0]
    184c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    184e:	b25b      	sxtb	r3, r3
    1850:	2b00      	cmp	r3, #0
    1852:	dbfb      	blt.n	184c <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1854:	7b13      	ldrb	r3, [r2, #12]
    1856:	2102      	movs	r1, #2
    1858:	430b      	orrs	r3, r1
    185a:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    185c:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    185e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1860:	b25b      	sxtb	r3, r3
    1862:	2b00      	cmp	r3, #0
    1864:	dbfb      	blt.n	185e <ADC_Handler+0x8a>
    1866:	e7c3      	b.n	17f0 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    1868:	7f23      	ldrb	r3, [r4, #28]
    186a:	2b05      	cmp	r3, #5
    186c:	d1c0      	bne.n	17f0 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    186e:	2300      	movs	r3, #0
    1870:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    1872:	3301      	adds	r3, #1
    1874:	6822      	ldr	r2, [r4, #0]
    1876:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1878:	0020      	movs	r0, r4
    187a:	68a3      	ldr	r3, [r4, #8]
    187c:	4798      	blx	r3
    187e:	e7b7      	b.n	17f0 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1880:	0020      	movs	r0, r4
    1882:	68e3      	ldr	r3, [r4, #12]
    1884:	4798      	blx	r3
    1886:	e7be      	b.n	1806 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1888:	6923      	ldr	r3, [r4, #16]
    188a:	0020      	movs	r0, r4
    188c:	4798      	blx	r3
}
    188e:	e7c5      	b.n	181c <ADC_Handler+0x48>
    1890:	20000f00 	.word	0x20000f00

00001894 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1894:	b5f0      	push	{r4, r5, r6, r7, lr}
    1896:	46de      	mov	lr, fp
    1898:	4657      	mov	r7, sl
    189a:	464e      	mov	r6, r9
    189c:	4645      	mov	r5, r8
    189e:	b5e0      	push	{r5, r6, r7, lr}
    18a0:	b087      	sub	sp, #28
    18a2:	4680      	mov	r8, r0
    18a4:	9104      	str	r1, [sp, #16]
    18a6:	0016      	movs	r6, r2
    18a8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    18aa:	2200      	movs	r2, #0
    18ac:	2300      	movs	r3, #0
    18ae:	2100      	movs	r1, #0
    18b0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    18b2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    18b4:	2001      	movs	r0, #1
    18b6:	0021      	movs	r1, r4
    18b8:	9600      	str	r6, [sp, #0]
    18ba:	9701      	str	r7, [sp, #4]
    18bc:	465c      	mov	r4, fp
    18be:	9403      	str	r4, [sp, #12]
    18c0:	4644      	mov	r4, r8
    18c2:	9405      	str	r4, [sp, #20]
    18c4:	e013      	b.n	18ee <long_division+0x5a>
    18c6:	2420      	movs	r4, #32
    18c8:	1a64      	subs	r4, r4, r1
    18ca:	0005      	movs	r5, r0
    18cc:	40e5      	lsrs	r5, r4
    18ce:	46a8      	mov	r8, r5
    18d0:	e014      	b.n	18fc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    18d2:	9c00      	ldr	r4, [sp, #0]
    18d4:	9d01      	ldr	r5, [sp, #4]
    18d6:	1b12      	subs	r2, r2, r4
    18d8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    18da:	465c      	mov	r4, fp
    18dc:	464d      	mov	r5, r9
    18de:	432c      	orrs	r4, r5
    18e0:	46a3      	mov	fp, r4
    18e2:	9c03      	ldr	r4, [sp, #12]
    18e4:	4645      	mov	r5, r8
    18e6:	432c      	orrs	r4, r5
    18e8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    18ea:	3901      	subs	r1, #1
    18ec:	d325      	bcc.n	193a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    18ee:	2420      	movs	r4, #32
    18f0:	4264      	negs	r4, r4
    18f2:	190c      	adds	r4, r1, r4
    18f4:	d4e7      	bmi.n	18c6 <long_division+0x32>
    18f6:	0005      	movs	r5, r0
    18f8:	40a5      	lsls	r5, r4
    18fa:	46a8      	mov	r8, r5
    18fc:	0004      	movs	r4, r0
    18fe:	408c      	lsls	r4, r1
    1900:	46a1      	mov	r9, r4
		r = r << 1;
    1902:	1892      	adds	r2, r2, r2
    1904:	415b      	adcs	r3, r3
    1906:	0014      	movs	r4, r2
    1908:	001d      	movs	r5, r3
		if (n & bit_shift) {
    190a:	9e05      	ldr	r6, [sp, #20]
    190c:	464f      	mov	r7, r9
    190e:	403e      	ands	r6, r7
    1910:	46b4      	mov	ip, r6
    1912:	9e04      	ldr	r6, [sp, #16]
    1914:	4647      	mov	r7, r8
    1916:	403e      	ands	r6, r7
    1918:	46b2      	mov	sl, r6
    191a:	4666      	mov	r6, ip
    191c:	4657      	mov	r7, sl
    191e:	433e      	orrs	r6, r7
    1920:	d003      	beq.n	192a <long_division+0x96>
			r |= 0x01;
    1922:	0006      	movs	r6, r0
    1924:	4326      	orrs	r6, r4
    1926:	0032      	movs	r2, r6
    1928:	002b      	movs	r3, r5
		if (r >= d) {
    192a:	9c00      	ldr	r4, [sp, #0]
    192c:	9d01      	ldr	r5, [sp, #4]
    192e:	429d      	cmp	r5, r3
    1930:	d8db      	bhi.n	18ea <long_division+0x56>
    1932:	d1ce      	bne.n	18d2 <long_division+0x3e>
    1934:	4294      	cmp	r4, r2
    1936:	d8d8      	bhi.n	18ea <long_division+0x56>
    1938:	e7cb      	b.n	18d2 <long_division+0x3e>
    193a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    193c:	4658      	mov	r0, fp
    193e:	0019      	movs	r1, r3
    1940:	b007      	add	sp, #28
    1942:	bc3c      	pop	{r2, r3, r4, r5}
    1944:	4690      	mov	r8, r2
    1946:	4699      	mov	r9, r3
    1948:	46a2      	mov	sl, r4
    194a:	46ab      	mov	fp, r5
    194c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000194e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    194e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1950:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1952:	2340      	movs	r3, #64	; 0x40
    1954:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1956:	4281      	cmp	r1, r0
    1958:	d202      	bcs.n	1960 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    195a:	0018      	movs	r0, r3
    195c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    195e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1960:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1962:	1c63      	adds	r3, r4, #1
    1964:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1966:	4288      	cmp	r0, r1
    1968:	d9f9      	bls.n	195e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    196a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    196c:	2cff      	cmp	r4, #255	; 0xff
    196e:	d8f4      	bhi.n	195a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1970:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1972:	2300      	movs	r3, #0
    1974:	e7f1      	b.n	195a <_sercom_get_sync_baud_val+0xc>
	...

00001978 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1978:	b5f0      	push	{r4, r5, r6, r7, lr}
    197a:	b083      	sub	sp, #12
    197c:	000f      	movs	r7, r1
    197e:	0016      	movs	r6, r2
    1980:	aa08      	add	r2, sp, #32
    1982:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1984:	0004      	movs	r4, r0
    1986:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1988:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    198a:	42bc      	cmp	r4, r7
    198c:	d902      	bls.n	1994 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    198e:	0010      	movs	r0, r2
    1990:	b003      	add	sp, #12
    1992:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1994:	2b00      	cmp	r3, #0
    1996:	d114      	bne.n	19c2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1998:	0002      	movs	r2, r0
    199a:	0008      	movs	r0, r1
    199c:	2100      	movs	r1, #0
    199e:	4c19      	ldr	r4, [pc, #100]	; (1a04 <_sercom_get_async_baud_val+0x8c>)
    19a0:	47a0      	blx	r4
    19a2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    19a4:	003a      	movs	r2, r7
    19a6:	2300      	movs	r3, #0
    19a8:	2000      	movs	r0, #0
    19aa:	4c17      	ldr	r4, [pc, #92]	; (1a08 <_sercom_get_async_baud_val+0x90>)
    19ac:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    19ae:	2200      	movs	r2, #0
    19b0:	2301      	movs	r3, #1
    19b2:	1a12      	subs	r2, r2, r0
    19b4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    19b6:	0c12      	lsrs	r2, r2, #16
    19b8:	041b      	lsls	r3, r3, #16
    19ba:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    19bc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    19be:	2200      	movs	r2, #0
    19c0:	e7e5      	b.n	198e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    19c2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    19c4:	2b01      	cmp	r3, #1
    19c6:	d1f9      	bne.n	19bc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    19c8:	000a      	movs	r2, r1
    19ca:	2300      	movs	r3, #0
    19cc:	2100      	movs	r1, #0
    19ce:	4c0d      	ldr	r4, [pc, #52]	; (1a04 <_sercom_get_async_baud_val+0x8c>)
    19d0:	47a0      	blx	r4
    19d2:	0002      	movs	r2, r0
    19d4:	000b      	movs	r3, r1
    19d6:	9200      	str	r2, [sp, #0]
    19d8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    19da:	0038      	movs	r0, r7
    19dc:	2100      	movs	r1, #0
    19de:	4c0a      	ldr	r4, [pc, #40]	; (1a08 <_sercom_get_async_baud_val+0x90>)
    19e0:	47a0      	blx	r4
    19e2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    19e4:	2380      	movs	r3, #128	; 0x80
    19e6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19e8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    19ea:	4298      	cmp	r0, r3
    19ec:	d8cf      	bhi.n	198e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    19ee:	0f79      	lsrs	r1, r7, #29
    19f0:	00f8      	lsls	r0, r7, #3
    19f2:	9a00      	ldr	r2, [sp, #0]
    19f4:	9b01      	ldr	r3, [sp, #4]
    19f6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    19f8:	00ea      	lsls	r2, r5, #3
    19fa:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    19fc:	b2d2      	uxtb	r2, r2
    19fe:	0352      	lsls	r2, r2, #13
    1a00:	432a      	orrs	r2, r5
    1a02:	e7db      	b.n	19bc <_sercom_get_async_baud_val+0x44>
    1a04:	00003265 	.word	0x00003265
    1a08:	00001895 	.word	0x00001895

00001a0c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1a0c:	b510      	push	{r4, lr}
    1a0e:	b082      	sub	sp, #8
    1a10:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1a12:	4b0e      	ldr	r3, [pc, #56]	; (1a4c <sercom_set_gclk_generator+0x40>)
    1a14:	781b      	ldrb	r3, [r3, #0]
    1a16:	2b00      	cmp	r3, #0
    1a18:	d007      	beq.n	1a2a <sercom_set_gclk_generator+0x1e>
    1a1a:	2900      	cmp	r1, #0
    1a1c:	d105      	bne.n	1a2a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1a1e:	4b0b      	ldr	r3, [pc, #44]	; (1a4c <sercom_set_gclk_generator+0x40>)
    1a20:	785b      	ldrb	r3, [r3, #1]
    1a22:	4283      	cmp	r3, r0
    1a24:	d010      	beq.n	1a48 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1a26:	201d      	movs	r0, #29
    1a28:	e00c      	b.n	1a44 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1a2a:	a901      	add	r1, sp, #4
    1a2c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1a2e:	2013      	movs	r0, #19
    1a30:	4b07      	ldr	r3, [pc, #28]	; (1a50 <sercom_set_gclk_generator+0x44>)
    1a32:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1a34:	2013      	movs	r0, #19
    1a36:	4b07      	ldr	r3, [pc, #28]	; (1a54 <sercom_set_gclk_generator+0x48>)
    1a38:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1a3a:	4b04      	ldr	r3, [pc, #16]	; (1a4c <sercom_set_gclk_generator+0x40>)
    1a3c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1a3e:	2201      	movs	r2, #1
    1a40:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1a42:	2000      	movs	r0, #0
}
    1a44:	b002      	add	sp, #8
    1a46:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1a48:	2000      	movs	r0, #0
    1a4a:	e7fb      	b.n	1a44 <sercom_set_gclk_generator+0x38>
    1a4c:	20000100 	.word	0x20000100
    1a50:	00002e89 	.word	0x00002e89
    1a54:	00002dfd 	.word	0x00002dfd

00001a58 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1a58:	4b40      	ldr	r3, [pc, #256]	; (1b5c <_sercom_get_default_pad+0x104>)
    1a5a:	4298      	cmp	r0, r3
    1a5c:	d031      	beq.n	1ac2 <_sercom_get_default_pad+0x6a>
    1a5e:	d90a      	bls.n	1a76 <_sercom_get_default_pad+0x1e>
    1a60:	4b3f      	ldr	r3, [pc, #252]	; (1b60 <_sercom_get_default_pad+0x108>)
    1a62:	4298      	cmp	r0, r3
    1a64:	d04d      	beq.n	1b02 <_sercom_get_default_pad+0xaa>
    1a66:	4b3f      	ldr	r3, [pc, #252]	; (1b64 <_sercom_get_default_pad+0x10c>)
    1a68:	4298      	cmp	r0, r3
    1a6a:	d05a      	beq.n	1b22 <_sercom_get_default_pad+0xca>
    1a6c:	4b3e      	ldr	r3, [pc, #248]	; (1b68 <_sercom_get_default_pad+0x110>)
    1a6e:	4298      	cmp	r0, r3
    1a70:	d037      	beq.n	1ae2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1a72:	2000      	movs	r0, #0
}
    1a74:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1a76:	4b3d      	ldr	r3, [pc, #244]	; (1b6c <_sercom_get_default_pad+0x114>)
    1a78:	4298      	cmp	r0, r3
    1a7a:	d00c      	beq.n	1a96 <_sercom_get_default_pad+0x3e>
    1a7c:	4b3c      	ldr	r3, [pc, #240]	; (1b70 <_sercom_get_default_pad+0x118>)
    1a7e:	4298      	cmp	r0, r3
    1a80:	d1f7      	bne.n	1a72 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a82:	2901      	cmp	r1, #1
    1a84:	d017      	beq.n	1ab6 <_sercom_get_default_pad+0x5e>
    1a86:	2900      	cmp	r1, #0
    1a88:	d05d      	beq.n	1b46 <_sercom_get_default_pad+0xee>
    1a8a:	2902      	cmp	r1, #2
    1a8c:	d015      	beq.n	1aba <_sercom_get_default_pad+0x62>
    1a8e:	2903      	cmp	r1, #3
    1a90:	d015      	beq.n	1abe <_sercom_get_default_pad+0x66>
	return 0;
    1a92:	2000      	movs	r0, #0
    1a94:	e7ee      	b.n	1a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a96:	2901      	cmp	r1, #1
    1a98:	d007      	beq.n	1aaa <_sercom_get_default_pad+0x52>
    1a9a:	2900      	cmp	r1, #0
    1a9c:	d051      	beq.n	1b42 <_sercom_get_default_pad+0xea>
    1a9e:	2902      	cmp	r1, #2
    1aa0:	d005      	beq.n	1aae <_sercom_get_default_pad+0x56>
    1aa2:	2903      	cmp	r1, #3
    1aa4:	d005      	beq.n	1ab2 <_sercom_get_default_pad+0x5a>
	return 0;
    1aa6:	2000      	movs	r0, #0
    1aa8:	e7e4      	b.n	1a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1aaa:	4832      	ldr	r0, [pc, #200]	; (1b74 <_sercom_get_default_pad+0x11c>)
    1aac:	e7e2      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1aae:	4832      	ldr	r0, [pc, #200]	; (1b78 <_sercom_get_default_pad+0x120>)
    1ab0:	e7e0      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1ab2:	4832      	ldr	r0, [pc, #200]	; (1b7c <_sercom_get_default_pad+0x124>)
    1ab4:	e7de      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1ab6:	4832      	ldr	r0, [pc, #200]	; (1b80 <_sercom_get_default_pad+0x128>)
    1ab8:	e7dc      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1aba:	4832      	ldr	r0, [pc, #200]	; (1b84 <_sercom_get_default_pad+0x12c>)
    1abc:	e7da      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1abe:	4832      	ldr	r0, [pc, #200]	; (1b88 <_sercom_get_default_pad+0x130>)
    1ac0:	e7d8      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1ac2:	2901      	cmp	r1, #1
    1ac4:	d007      	beq.n	1ad6 <_sercom_get_default_pad+0x7e>
    1ac6:	2900      	cmp	r1, #0
    1ac8:	d03f      	beq.n	1b4a <_sercom_get_default_pad+0xf2>
    1aca:	2902      	cmp	r1, #2
    1acc:	d005      	beq.n	1ada <_sercom_get_default_pad+0x82>
    1ace:	2903      	cmp	r1, #3
    1ad0:	d005      	beq.n	1ade <_sercom_get_default_pad+0x86>
	return 0;
    1ad2:	2000      	movs	r0, #0
    1ad4:	e7ce      	b.n	1a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ad6:	482d      	ldr	r0, [pc, #180]	; (1b8c <_sercom_get_default_pad+0x134>)
    1ad8:	e7cc      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1ada:	482d      	ldr	r0, [pc, #180]	; (1b90 <_sercom_get_default_pad+0x138>)
    1adc:	e7ca      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1ade:	482d      	ldr	r0, [pc, #180]	; (1b94 <_sercom_get_default_pad+0x13c>)
    1ae0:	e7c8      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1ae2:	2901      	cmp	r1, #1
    1ae4:	d007      	beq.n	1af6 <_sercom_get_default_pad+0x9e>
    1ae6:	2900      	cmp	r1, #0
    1ae8:	d031      	beq.n	1b4e <_sercom_get_default_pad+0xf6>
    1aea:	2902      	cmp	r1, #2
    1aec:	d005      	beq.n	1afa <_sercom_get_default_pad+0xa2>
    1aee:	2903      	cmp	r1, #3
    1af0:	d005      	beq.n	1afe <_sercom_get_default_pad+0xa6>
	return 0;
    1af2:	2000      	movs	r0, #0
    1af4:	e7be      	b.n	1a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1af6:	4828      	ldr	r0, [pc, #160]	; (1b98 <_sercom_get_default_pad+0x140>)
    1af8:	e7bc      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1afa:	4828      	ldr	r0, [pc, #160]	; (1b9c <_sercom_get_default_pad+0x144>)
    1afc:	e7ba      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1afe:	4828      	ldr	r0, [pc, #160]	; (1ba0 <_sercom_get_default_pad+0x148>)
    1b00:	e7b8      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b02:	2901      	cmp	r1, #1
    1b04:	d007      	beq.n	1b16 <_sercom_get_default_pad+0xbe>
    1b06:	2900      	cmp	r1, #0
    1b08:	d023      	beq.n	1b52 <_sercom_get_default_pad+0xfa>
    1b0a:	2902      	cmp	r1, #2
    1b0c:	d005      	beq.n	1b1a <_sercom_get_default_pad+0xc2>
    1b0e:	2903      	cmp	r1, #3
    1b10:	d005      	beq.n	1b1e <_sercom_get_default_pad+0xc6>
	return 0;
    1b12:	2000      	movs	r0, #0
    1b14:	e7ae      	b.n	1a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b16:	4823      	ldr	r0, [pc, #140]	; (1ba4 <_sercom_get_default_pad+0x14c>)
    1b18:	e7ac      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b1a:	4823      	ldr	r0, [pc, #140]	; (1ba8 <_sercom_get_default_pad+0x150>)
    1b1c:	e7aa      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b1e:	4823      	ldr	r0, [pc, #140]	; (1bac <_sercom_get_default_pad+0x154>)
    1b20:	e7a8      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b22:	2901      	cmp	r1, #1
    1b24:	d007      	beq.n	1b36 <_sercom_get_default_pad+0xde>
    1b26:	2900      	cmp	r1, #0
    1b28:	d015      	beq.n	1b56 <_sercom_get_default_pad+0xfe>
    1b2a:	2902      	cmp	r1, #2
    1b2c:	d005      	beq.n	1b3a <_sercom_get_default_pad+0xe2>
    1b2e:	2903      	cmp	r1, #3
    1b30:	d005      	beq.n	1b3e <_sercom_get_default_pad+0xe6>
	return 0;
    1b32:	2000      	movs	r0, #0
    1b34:	e79e      	b.n	1a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b36:	481e      	ldr	r0, [pc, #120]	; (1bb0 <_sercom_get_default_pad+0x158>)
    1b38:	e79c      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b3a:	481e      	ldr	r0, [pc, #120]	; (1bb4 <_sercom_get_default_pad+0x15c>)
    1b3c:	e79a      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b3e:	481e      	ldr	r0, [pc, #120]	; (1bb8 <_sercom_get_default_pad+0x160>)
    1b40:	e798      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b42:	481e      	ldr	r0, [pc, #120]	; (1bbc <_sercom_get_default_pad+0x164>)
    1b44:	e796      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b46:	2003      	movs	r0, #3
    1b48:	e794      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b4a:	481d      	ldr	r0, [pc, #116]	; (1bc0 <_sercom_get_default_pad+0x168>)
    1b4c:	e792      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b4e:	481d      	ldr	r0, [pc, #116]	; (1bc4 <_sercom_get_default_pad+0x16c>)
    1b50:	e790      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b52:	481d      	ldr	r0, [pc, #116]	; (1bc8 <_sercom_get_default_pad+0x170>)
    1b54:	e78e      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b56:	481d      	ldr	r0, [pc, #116]	; (1bcc <_sercom_get_default_pad+0x174>)
    1b58:	e78c      	b.n	1a74 <_sercom_get_default_pad+0x1c>
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	42001000 	.word	0x42001000
    1b60:	42001800 	.word	0x42001800
    1b64:	42001c00 	.word	0x42001c00
    1b68:	42001400 	.word	0x42001400
    1b6c:	42000800 	.word	0x42000800
    1b70:	42000c00 	.word	0x42000c00
    1b74:	00050003 	.word	0x00050003
    1b78:	00060003 	.word	0x00060003
    1b7c:	00070003 	.word	0x00070003
    1b80:	00010003 	.word	0x00010003
    1b84:	001e0003 	.word	0x001e0003
    1b88:	001f0003 	.word	0x001f0003
    1b8c:	00090003 	.word	0x00090003
    1b90:	000a0003 	.word	0x000a0003
    1b94:	000b0003 	.word	0x000b0003
    1b98:	00110003 	.word	0x00110003
    1b9c:	00120003 	.word	0x00120003
    1ba0:	00130003 	.word	0x00130003
    1ba4:	000d0003 	.word	0x000d0003
    1ba8:	000e0003 	.word	0x000e0003
    1bac:	000f0003 	.word	0x000f0003
    1bb0:	00170003 	.word	0x00170003
    1bb4:	00180003 	.word	0x00180003
    1bb8:	00190003 	.word	0x00190003
    1bbc:	00040003 	.word	0x00040003
    1bc0:	00080003 	.word	0x00080003
    1bc4:	00100003 	.word	0x00100003
    1bc8:	000c0003 	.word	0x000c0003
    1bcc:	00160003 	.word	0x00160003

00001bd0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1bd0:	b530      	push	{r4, r5, lr}
    1bd2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1bd4:	4b0b      	ldr	r3, [pc, #44]	; (1c04 <_sercom_get_sercom_inst_index+0x34>)
    1bd6:	466a      	mov	r2, sp
    1bd8:	cb32      	ldmia	r3!, {r1, r4, r5}
    1bda:	c232      	stmia	r2!, {r1, r4, r5}
    1bdc:	cb32      	ldmia	r3!, {r1, r4, r5}
    1bde:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1be0:	9b00      	ldr	r3, [sp, #0]
    1be2:	4283      	cmp	r3, r0
    1be4:	d00b      	beq.n	1bfe <_sercom_get_sercom_inst_index+0x2e>
    1be6:	2301      	movs	r3, #1
    1be8:	009a      	lsls	r2, r3, #2
    1bea:	4669      	mov	r1, sp
    1bec:	5852      	ldr	r2, [r2, r1]
    1bee:	4282      	cmp	r2, r0
    1bf0:	d006      	beq.n	1c00 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1bf2:	3301      	adds	r3, #1
    1bf4:	2b06      	cmp	r3, #6
    1bf6:	d1f7      	bne.n	1be8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1bf8:	2000      	movs	r0, #0
}
    1bfa:	b007      	add	sp, #28
    1bfc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1bfe:	2300      	movs	r3, #0
			return i;
    1c00:	b2d8      	uxtb	r0, r3
    1c02:	e7fa      	b.n	1bfa <_sercom_get_sercom_inst_index+0x2a>
    1c04:	00004e50 	.word	0x00004e50

00001c08 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1c08:	4770      	bx	lr
	...

00001c0c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1c0e:	4b0a      	ldr	r3, [pc, #40]	; (1c38 <_sercom_set_handler+0x2c>)
    1c10:	781b      	ldrb	r3, [r3, #0]
    1c12:	2b00      	cmp	r3, #0
    1c14:	d10c      	bne.n	1c30 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1c16:	4f09      	ldr	r7, [pc, #36]	; (1c3c <_sercom_set_handler+0x30>)
    1c18:	4e09      	ldr	r6, [pc, #36]	; (1c40 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1c1a:	4d0a      	ldr	r5, [pc, #40]	; (1c44 <_sercom_set_handler+0x38>)
    1c1c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1c1e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1c20:	195a      	adds	r2, r3, r5
    1c22:	6014      	str	r4, [r2, #0]
    1c24:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c26:	2b18      	cmp	r3, #24
    1c28:	d1f9      	bne.n	1c1e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1c2a:	2201      	movs	r2, #1
    1c2c:	4b02      	ldr	r3, [pc, #8]	; (1c38 <_sercom_set_handler+0x2c>)
    1c2e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1c30:	0080      	lsls	r0, r0, #2
    1c32:	4b02      	ldr	r3, [pc, #8]	; (1c3c <_sercom_set_handler+0x30>)
    1c34:	50c1      	str	r1, [r0, r3]
}
    1c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c38:	20000102 	.word	0x20000102
    1c3c:	20000104 	.word	0x20000104
    1c40:	00001c09 	.word	0x00001c09
    1c44:	20000f04 	.word	0x20000f04

00001c48 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1c48:	b500      	push	{lr}
    1c4a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1c4c:	2309      	movs	r3, #9
    1c4e:	466a      	mov	r2, sp
    1c50:	7013      	strb	r3, [r2, #0]
    1c52:	3301      	adds	r3, #1
    1c54:	7053      	strb	r3, [r2, #1]
    1c56:	3301      	adds	r3, #1
    1c58:	7093      	strb	r3, [r2, #2]
    1c5a:	3301      	adds	r3, #1
    1c5c:	70d3      	strb	r3, [r2, #3]
    1c5e:	3301      	adds	r3, #1
    1c60:	7113      	strb	r3, [r2, #4]
    1c62:	3301      	adds	r3, #1
    1c64:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1c66:	4b03      	ldr	r3, [pc, #12]	; (1c74 <_sercom_get_interrupt_vector+0x2c>)
    1c68:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1c6a:	466b      	mov	r3, sp
    1c6c:	5618      	ldrsb	r0, [r3, r0]
}
    1c6e:	b003      	add	sp, #12
    1c70:	bd00      	pop	{pc}
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	00001bd1 	.word	0x00001bd1

00001c78 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1c78:	b510      	push	{r4, lr}
    1c7a:	4b02      	ldr	r3, [pc, #8]	; (1c84 <SERCOM0_Handler+0xc>)
    1c7c:	681b      	ldr	r3, [r3, #0]
    1c7e:	2000      	movs	r0, #0
    1c80:	4798      	blx	r3
    1c82:	bd10      	pop	{r4, pc}
    1c84:	20000104 	.word	0x20000104

00001c88 <SERCOM1_Handler>:
    1c88:	b510      	push	{r4, lr}
    1c8a:	4b02      	ldr	r3, [pc, #8]	; (1c94 <SERCOM1_Handler+0xc>)
    1c8c:	685b      	ldr	r3, [r3, #4]
    1c8e:	2001      	movs	r0, #1
    1c90:	4798      	blx	r3
    1c92:	bd10      	pop	{r4, pc}
    1c94:	20000104 	.word	0x20000104

00001c98 <SERCOM2_Handler>:
    1c98:	b510      	push	{r4, lr}
    1c9a:	4b02      	ldr	r3, [pc, #8]	; (1ca4 <SERCOM2_Handler+0xc>)
    1c9c:	689b      	ldr	r3, [r3, #8]
    1c9e:	2002      	movs	r0, #2
    1ca0:	4798      	blx	r3
    1ca2:	bd10      	pop	{r4, pc}
    1ca4:	20000104 	.word	0x20000104

00001ca8 <SERCOM3_Handler>:
    1ca8:	b510      	push	{r4, lr}
    1caa:	4b02      	ldr	r3, [pc, #8]	; (1cb4 <SERCOM3_Handler+0xc>)
    1cac:	68db      	ldr	r3, [r3, #12]
    1cae:	2003      	movs	r0, #3
    1cb0:	4798      	blx	r3
    1cb2:	bd10      	pop	{r4, pc}
    1cb4:	20000104 	.word	0x20000104

00001cb8 <SERCOM4_Handler>:
    1cb8:	b510      	push	{r4, lr}
    1cba:	4b02      	ldr	r3, [pc, #8]	; (1cc4 <SERCOM4_Handler+0xc>)
    1cbc:	691b      	ldr	r3, [r3, #16]
    1cbe:	2004      	movs	r0, #4
    1cc0:	4798      	blx	r3
    1cc2:	bd10      	pop	{r4, pc}
    1cc4:	20000104 	.word	0x20000104

00001cc8 <SERCOM5_Handler>:
    1cc8:	b510      	push	{r4, lr}
    1cca:	4b02      	ldr	r3, [pc, #8]	; (1cd4 <SERCOM5_Handler+0xc>)
    1ccc:	695b      	ldr	r3, [r3, #20]
    1cce:	2005      	movs	r0, #5
    1cd0:	4798      	blx	r3
    1cd2:	bd10      	pop	{r4, pc}
    1cd4:	20000104 	.word	0x20000104

00001cd8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cda:	46de      	mov	lr, fp
    1cdc:	4657      	mov	r7, sl
    1cde:	464e      	mov	r6, r9
    1ce0:	4645      	mov	r5, r8
    1ce2:	b5e0      	push	{r5, r6, r7, lr}
    1ce4:	b091      	sub	sp, #68	; 0x44
    1ce6:	0005      	movs	r5, r0
    1ce8:	000c      	movs	r4, r1
    1cea:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1cec:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1cee:	0008      	movs	r0, r1
    1cf0:	4bbc      	ldr	r3, [pc, #752]	; (1fe4 <usart_init+0x30c>)
    1cf2:	4798      	blx	r3
    1cf4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1cf6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1cf8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1cfa:	07db      	lsls	r3, r3, #31
    1cfc:	d506      	bpl.n	1d0c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1cfe:	b011      	add	sp, #68	; 0x44
    1d00:	bc3c      	pop	{r2, r3, r4, r5}
    1d02:	4690      	mov	r8, r2
    1d04:	4699      	mov	r9, r3
    1d06:	46a2      	mov	sl, r4
    1d08:	46ab      	mov	fp, r5
    1d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1d0c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1d0e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1d10:	079b      	lsls	r3, r3, #30
    1d12:	d4f4      	bmi.n	1cfe <usart_init+0x26>
    1d14:	49b4      	ldr	r1, [pc, #720]	; (1fe8 <usart_init+0x310>)
    1d16:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1d18:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1d1a:	2301      	movs	r3, #1
    1d1c:	40bb      	lsls	r3, r7
    1d1e:	4303      	orrs	r3, r0
    1d20:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1d22:	a90f      	add	r1, sp, #60	; 0x3c
    1d24:	272d      	movs	r7, #45	; 0x2d
    1d26:	5df3      	ldrb	r3, [r6, r7]
    1d28:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1d2a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1d2c:	b2d3      	uxtb	r3, r2
    1d2e:	9302      	str	r3, [sp, #8]
    1d30:	0018      	movs	r0, r3
    1d32:	4bae      	ldr	r3, [pc, #696]	; (1fec <usart_init+0x314>)
    1d34:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1d36:	9802      	ldr	r0, [sp, #8]
    1d38:	4bad      	ldr	r3, [pc, #692]	; (1ff0 <usart_init+0x318>)
    1d3a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1d3c:	5df0      	ldrb	r0, [r6, r7]
    1d3e:	2100      	movs	r1, #0
    1d40:	4bac      	ldr	r3, [pc, #688]	; (1ff4 <usart_init+0x31c>)
    1d42:	4798      	blx	r3
	module->character_size = config->character_size;
    1d44:	7af3      	ldrb	r3, [r6, #11]
    1d46:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1d48:	2324      	movs	r3, #36	; 0x24
    1d4a:	5cf3      	ldrb	r3, [r6, r3]
    1d4c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1d4e:	2325      	movs	r3, #37	; 0x25
    1d50:	5cf3      	ldrb	r3, [r6, r3]
    1d52:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1d54:	7ef3      	ldrb	r3, [r6, #27]
    1d56:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1d58:	7f33      	ldrb	r3, [r6, #28]
    1d5a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d5c:	682b      	ldr	r3, [r5, #0]
    1d5e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1d60:	0018      	movs	r0, r3
    1d62:	4ba0      	ldr	r3, [pc, #640]	; (1fe4 <usart_init+0x30c>)
    1d64:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1d66:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1d68:	2200      	movs	r2, #0
    1d6a:	230e      	movs	r3, #14
    1d6c:	a906      	add	r1, sp, #24
    1d6e:	468c      	mov	ip, r1
    1d70:	4463      	add	r3, ip
    1d72:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1d74:	8a32      	ldrh	r2, [r6, #16]
    1d76:	9202      	str	r2, [sp, #8]
    1d78:	2380      	movs	r3, #128	; 0x80
    1d7a:	01db      	lsls	r3, r3, #7
    1d7c:	429a      	cmp	r2, r3
    1d7e:	d100      	bne.n	1d82 <usart_init+0xaa>
    1d80:	e09e      	b.n	1ec0 <usart_init+0x1e8>
    1d82:	d90f      	bls.n	1da4 <usart_init+0xcc>
    1d84:	23c0      	movs	r3, #192	; 0xc0
    1d86:	01db      	lsls	r3, r3, #7
    1d88:	9a02      	ldr	r2, [sp, #8]
    1d8a:	429a      	cmp	r2, r3
    1d8c:	d100      	bne.n	1d90 <usart_init+0xb8>
    1d8e:	e092      	b.n	1eb6 <usart_init+0x1de>
    1d90:	2380      	movs	r3, #128	; 0x80
    1d92:	021b      	lsls	r3, r3, #8
    1d94:	429a      	cmp	r2, r3
    1d96:	d000      	beq.n	1d9a <usart_init+0xc2>
    1d98:	e11f      	b.n	1fda <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1d9a:	2303      	movs	r3, #3
    1d9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d9e:	2300      	movs	r3, #0
    1da0:	9307      	str	r3, [sp, #28]
    1da2:	e008      	b.n	1db6 <usart_init+0xde>
	switch (config->sample_rate) {
    1da4:	2380      	movs	r3, #128	; 0x80
    1da6:	019b      	lsls	r3, r3, #6
    1da8:	429a      	cmp	r2, r3
    1daa:	d000      	beq.n	1dae <usart_init+0xd6>
    1dac:	e115      	b.n	1fda <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1dae:	2310      	movs	r3, #16
    1db0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1db2:	3b0f      	subs	r3, #15
    1db4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1db6:	6833      	ldr	r3, [r6, #0]
    1db8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1dba:	68f3      	ldr	r3, [r6, #12]
    1dbc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1dbe:	6973      	ldr	r3, [r6, #20]
    1dc0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1dc2:	7e33      	ldrb	r3, [r6, #24]
    1dc4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1dc6:	2326      	movs	r3, #38	; 0x26
    1dc8:	5cf3      	ldrb	r3, [r6, r3]
    1dca:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1dcc:	6873      	ldr	r3, [r6, #4]
    1dce:	4699      	mov	r9, r3
	switch (transfer_mode)
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d100      	bne.n	1dd6 <usart_init+0xfe>
    1dd4:	e0a0      	b.n	1f18 <usart_init+0x240>
    1dd6:	2380      	movs	r3, #128	; 0x80
    1dd8:	055b      	lsls	r3, r3, #21
    1dda:	4599      	cmp	r9, r3
    1ddc:	d100      	bne.n	1de0 <usart_init+0x108>
    1dde:	e084      	b.n	1eea <usart_init+0x212>
	if(config->encoding_format_enable) {
    1de0:	7e73      	ldrb	r3, [r6, #25]
    1de2:	2b00      	cmp	r3, #0
    1de4:	d002      	beq.n	1dec <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1de6:	7eb3      	ldrb	r3, [r6, #26]
    1de8:	4642      	mov	r2, r8
    1dea:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1dec:	682a      	ldr	r2, [r5, #0]
    1dee:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1df0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1df2:	2b00      	cmp	r3, #0
    1df4:	d1fc      	bne.n	1df0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1df6:	330e      	adds	r3, #14
    1df8:	aa06      	add	r2, sp, #24
    1dfa:	4694      	mov	ip, r2
    1dfc:	4463      	add	r3, ip
    1dfe:	881b      	ldrh	r3, [r3, #0]
    1e00:	4642      	mov	r2, r8
    1e02:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1e04:	9b05      	ldr	r3, [sp, #20]
    1e06:	9a03      	ldr	r2, [sp, #12]
    1e08:	4313      	orrs	r3, r2
    1e0a:	9a04      	ldr	r2, [sp, #16]
    1e0c:	4313      	orrs	r3, r2
    1e0e:	464a      	mov	r2, r9
    1e10:	4313      	orrs	r3, r2
    1e12:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1e14:	465b      	mov	r3, fp
    1e16:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1e18:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1e1a:	4653      	mov	r3, sl
    1e1c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1e1e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1e20:	2327      	movs	r3, #39	; 0x27
    1e22:	5cf3      	ldrb	r3, [r6, r3]
    1e24:	2b00      	cmp	r3, #0
    1e26:	d101      	bne.n	1e2c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1e28:	3304      	adds	r3, #4
    1e2a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e2c:	7e73      	ldrb	r3, [r6, #25]
    1e2e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e30:	7f32      	ldrb	r2, [r6, #28]
    1e32:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e34:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e36:	7f72      	ldrb	r2, [r6, #29]
    1e38:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e3a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e3c:	2224      	movs	r2, #36	; 0x24
    1e3e:	5cb2      	ldrb	r2, [r6, r2]
    1e40:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e42:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1e44:	2225      	movs	r2, #37	; 0x25
    1e46:	5cb2      	ldrb	r2, [r6, r2]
    1e48:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e4a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1e4c:	7ab1      	ldrb	r1, [r6, #10]
    1e4e:	7af2      	ldrb	r2, [r6, #11]
    1e50:	4311      	orrs	r1, r2
    1e52:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1e54:	8933      	ldrh	r3, [r6, #8]
    1e56:	2bff      	cmp	r3, #255	; 0xff
    1e58:	d100      	bne.n	1e5c <usart_init+0x184>
    1e5a:	e081      	b.n	1f60 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1e5c:	2280      	movs	r2, #128	; 0x80
    1e5e:	0452      	lsls	r2, r2, #17
    1e60:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1e62:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1e64:	232c      	movs	r3, #44	; 0x2c
    1e66:	5cf3      	ldrb	r3, [r6, r3]
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d103      	bne.n	1e74 <usart_init+0x19c>
    1e6c:	4b62      	ldr	r3, [pc, #392]	; (1ff8 <usart_init+0x320>)
    1e6e:	789b      	ldrb	r3, [r3, #2]
    1e70:	079b      	lsls	r3, r3, #30
    1e72:	d501      	bpl.n	1e78 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1e74:	2380      	movs	r3, #128	; 0x80
    1e76:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e78:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e7a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d1fc      	bne.n	1e7a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1e80:	4643      	mov	r3, r8
    1e82:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e84:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e86:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d1fc      	bne.n	1e86 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1e8c:	4643      	mov	r3, r8
    1e8e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1e90:	ab0e      	add	r3, sp, #56	; 0x38
    1e92:	2280      	movs	r2, #128	; 0x80
    1e94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1e96:	2200      	movs	r2, #0
    1e98:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1e9a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1e9c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1e9e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1ea0:	930a      	str	r3, [sp, #40]	; 0x28
    1ea2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1ea4:	930b      	str	r3, [sp, #44]	; 0x2c
    1ea6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1ea8:	930c      	str	r3, [sp, #48]	; 0x30
    1eaa:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1eac:	9302      	str	r3, [sp, #8]
    1eae:	930d      	str	r3, [sp, #52]	; 0x34
    1eb0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1eb2:	ae0a      	add	r6, sp, #40	; 0x28
    1eb4:	e063      	b.n	1f7e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1eb6:	2308      	movs	r3, #8
    1eb8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1eba:	3b07      	subs	r3, #7
    1ebc:	9307      	str	r3, [sp, #28]
    1ebe:	e77a      	b.n	1db6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1ec0:	6833      	ldr	r3, [r6, #0]
    1ec2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1ec4:	68f3      	ldr	r3, [r6, #12]
    1ec6:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1ec8:	6973      	ldr	r3, [r6, #20]
    1eca:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1ecc:	7e33      	ldrb	r3, [r6, #24]
    1ece:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ed0:	2326      	movs	r3, #38	; 0x26
    1ed2:	5cf3      	ldrb	r3, [r6, r3]
    1ed4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1ed6:	6873      	ldr	r3, [r6, #4]
    1ed8:	4699      	mov	r9, r3
	switch (transfer_mode)
    1eda:	2b00      	cmp	r3, #0
    1edc:	d018      	beq.n	1f10 <usart_init+0x238>
    1ede:	2380      	movs	r3, #128	; 0x80
    1ee0:	055b      	lsls	r3, r3, #21
    1ee2:	4599      	cmp	r9, r3
    1ee4:	d001      	beq.n	1eea <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1ee6:	2000      	movs	r0, #0
    1ee8:	e025      	b.n	1f36 <usart_init+0x25e>
			if (!config->use_external_clock) {
    1eea:	2327      	movs	r3, #39	; 0x27
    1eec:	5cf3      	ldrb	r3, [r6, r3]
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d000      	beq.n	1ef4 <usart_init+0x21c>
    1ef2:	e775      	b.n	1de0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1ef4:	6a33      	ldr	r3, [r6, #32]
    1ef6:	001f      	movs	r7, r3
    1ef8:	b2c0      	uxtb	r0, r0
    1efa:	4b40      	ldr	r3, [pc, #256]	; (1ffc <usart_init+0x324>)
    1efc:	4798      	blx	r3
    1efe:	0001      	movs	r1, r0
    1f00:	220e      	movs	r2, #14
    1f02:	ab06      	add	r3, sp, #24
    1f04:	469c      	mov	ip, r3
    1f06:	4462      	add	r2, ip
    1f08:	0038      	movs	r0, r7
    1f0a:	4b3d      	ldr	r3, [pc, #244]	; (2000 <STACK_SIZE>)
    1f0c:	4798      	blx	r3
    1f0e:	e012      	b.n	1f36 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1f10:	2308      	movs	r3, #8
    1f12:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1f14:	2300      	movs	r3, #0
    1f16:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1f18:	2327      	movs	r3, #39	; 0x27
    1f1a:	5cf3      	ldrb	r3, [r6, r3]
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d00e      	beq.n	1f3e <usart_init+0x266>
				status_code =
    1f20:	9b06      	ldr	r3, [sp, #24]
    1f22:	9300      	str	r3, [sp, #0]
    1f24:	9b07      	ldr	r3, [sp, #28]
    1f26:	220e      	movs	r2, #14
    1f28:	a906      	add	r1, sp, #24
    1f2a:	468c      	mov	ip, r1
    1f2c:	4462      	add	r2, ip
    1f2e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1f30:	6a30      	ldr	r0, [r6, #32]
    1f32:	4f34      	ldr	r7, [pc, #208]	; (2004 <STACK_SIZE+0x4>)
    1f34:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1f36:	2800      	cmp	r0, #0
    1f38:	d000      	beq.n	1f3c <usart_init+0x264>
    1f3a:	e6e0      	b.n	1cfe <usart_init+0x26>
    1f3c:	e750      	b.n	1de0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1f3e:	6a33      	ldr	r3, [r6, #32]
    1f40:	001f      	movs	r7, r3
    1f42:	b2c0      	uxtb	r0, r0
    1f44:	4b2d      	ldr	r3, [pc, #180]	; (1ffc <usart_init+0x324>)
    1f46:	4798      	blx	r3
    1f48:	0001      	movs	r1, r0
				status_code =
    1f4a:	9b06      	ldr	r3, [sp, #24]
    1f4c:	9300      	str	r3, [sp, #0]
    1f4e:	9b07      	ldr	r3, [sp, #28]
    1f50:	220e      	movs	r2, #14
    1f52:	a806      	add	r0, sp, #24
    1f54:	4684      	mov	ip, r0
    1f56:	4462      	add	r2, ip
    1f58:	0038      	movs	r0, r7
    1f5a:	4f2a      	ldr	r7, [pc, #168]	; (2004 <STACK_SIZE+0x4>)
    1f5c:	47b8      	blx	r7
    1f5e:	e7ea      	b.n	1f36 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1f60:	7ef3      	ldrb	r3, [r6, #27]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d100      	bne.n	1f68 <usart_init+0x290>
    1f66:	e77d      	b.n	1e64 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1f68:	2380      	movs	r3, #128	; 0x80
    1f6a:	04db      	lsls	r3, r3, #19
    1f6c:	431f      	orrs	r7, r3
    1f6e:	e779      	b.n	1e64 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1f70:	0020      	movs	r0, r4
    1f72:	4b25      	ldr	r3, [pc, #148]	; (2008 <STACK_SIZE+0x8>)
    1f74:	4798      	blx	r3
    1f76:	e007      	b.n	1f88 <usart_init+0x2b0>
    1f78:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1f7a:	2f04      	cmp	r7, #4
    1f7c:	d00d      	beq.n	1f9a <usart_init+0x2c2>
    1f7e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1f80:	00bb      	lsls	r3, r7, #2
    1f82:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1f84:	2800      	cmp	r0, #0
    1f86:	d0f3      	beq.n	1f70 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1f88:	1c43      	adds	r3, r0, #1
    1f8a:	d0f5      	beq.n	1f78 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1f8c:	a90e      	add	r1, sp, #56	; 0x38
    1f8e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1f90:	0c00      	lsrs	r0, r0, #16
    1f92:	b2c0      	uxtb	r0, r0
    1f94:	4b1d      	ldr	r3, [pc, #116]	; (200c <STACK_SIZE+0xc>)
    1f96:	4798      	blx	r3
    1f98:	e7ee      	b.n	1f78 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1f9a:	2300      	movs	r3, #0
    1f9c:	60eb      	str	r3, [r5, #12]
    1f9e:	612b      	str	r3, [r5, #16]
    1fa0:	616b      	str	r3, [r5, #20]
    1fa2:	61ab      	str	r3, [r5, #24]
    1fa4:	61eb      	str	r3, [r5, #28]
    1fa6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1fa8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1faa:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1fac:	2200      	movs	r2, #0
    1fae:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1fb0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1fb2:	3330      	adds	r3, #48	; 0x30
    1fb4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1fb6:	3301      	adds	r3, #1
    1fb8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1fba:	3301      	adds	r3, #1
    1fbc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1fbe:	3301      	adds	r3, #1
    1fc0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1fc2:	6828      	ldr	r0, [r5, #0]
    1fc4:	4b07      	ldr	r3, [pc, #28]	; (1fe4 <usart_init+0x30c>)
    1fc6:	4798      	blx	r3
    1fc8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1fca:	4911      	ldr	r1, [pc, #68]	; (2010 <STACK_SIZE+0x10>)
    1fcc:	4b11      	ldr	r3, [pc, #68]	; (2014 <STACK_SIZE+0x14>)
    1fce:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1fd0:	00a4      	lsls	r4, r4, #2
    1fd2:	4b11      	ldr	r3, [pc, #68]	; (2018 <STACK_SIZE+0x18>)
    1fd4:	50e5      	str	r5, [r4, r3]
	return status_code;
    1fd6:	2000      	movs	r0, #0
    1fd8:	e691      	b.n	1cfe <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1fda:	2310      	movs	r3, #16
    1fdc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1fde:	2300      	movs	r3, #0
    1fe0:	9307      	str	r3, [sp, #28]
    1fe2:	e6e8      	b.n	1db6 <usart_init+0xde>
    1fe4:	00001bd1 	.word	0x00001bd1
    1fe8:	40000400 	.word	0x40000400
    1fec:	00002e89 	.word	0x00002e89
    1ff0:	00002dfd 	.word	0x00002dfd
    1ff4:	00001a0d 	.word	0x00001a0d
    1ff8:	41002000 	.word	0x41002000
    1ffc:	00002ea5 	.word	0x00002ea5
    2000:	0000194f 	.word	0x0000194f
    2004:	00001979 	.word	0x00001979
    2008:	00001a59 	.word	0x00001a59
    200c:	00002f81 	.word	0x00002f81
    2010:	00002191 	.word	0x00002191
    2014:	00001c0d 	.word	0x00001c0d
    2018:	20000f04 	.word	0x20000f04

0000201c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    201c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    201e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2020:	2a00      	cmp	r2, #0
    2022:	d101      	bne.n	2028 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2024:	0018      	movs	r0, r3
    2026:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2028:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    202a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    202c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    202e:	2a00      	cmp	r2, #0
    2030:	d1f8      	bne.n	2024 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2032:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2034:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2036:	2a00      	cmp	r2, #0
    2038:	d1fc      	bne.n	2034 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    203a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    203c:	2102      	movs	r1, #2
    203e:	7e1a      	ldrb	r2, [r3, #24]
    2040:	420a      	tst	r2, r1
    2042:	d0fc      	beq.n	203e <usart_write_wait+0x22>
	return STATUS_OK;
    2044:	2300      	movs	r3, #0
    2046:	e7ed      	b.n	2024 <usart_write_wait+0x8>

00002048 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2048:	b5f0      	push	{r4, r5, r6, r7, lr}
    204a:	46ce      	mov	lr, r9
    204c:	4647      	mov	r7, r8
    204e:	b580      	push	{r7, lr}
    2050:	b083      	sub	sp, #12
    2052:	0005      	movs	r5, r0
    2054:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2056:	2017      	movs	r0, #23
	if (length == 0) {
    2058:	2a00      	cmp	r2, #0
    205a:	d104      	bne.n	2066 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    205c:	b003      	add	sp, #12
    205e:	bc0c      	pop	{r2, r3}
    2060:	4690      	mov	r8, r2
    2062:	4699      	mov	r9, r3
    2064:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    2066:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    2068:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    206a:	2b00      	cmp	r3, #0
    206c:	d0f6      	beq.n	205c <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    206e:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2070:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2072:	2b00      	cmp	r3, #0
    2074:	d1fc      	bne.n	2070 <usart_write_buffer_wait+0x28>
	while (length--) {
    2076:	3a01      	subs	r2, #1
    2078:	b293      	uxth	r3, r2
    207a:	4699      	mov	r9, r3
    207c:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    207e:	2701      	movs	r7, #1
	while (length--) {
    2080:	4b1f      	ldr	r3, [pc, #124]	; (2100 <usart_write_buffer_wait+0xb8>)
    2082:	4698      	mov	r8, r3
    2084:	e011      	b.n	20aa <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    2086:	1c73      	adds	r3, r6, #1
    2088:	b29b      	uxth	r3, r3
    208a:	9a01      	ldr	r2, [sp, #4]
    208c:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    208e:	796a      	ldrb	r2, [r5, #5]
    2090:	2a01      	cmp	r2, #1
    2092:	d017      	beq.n	20c4 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    2094:	b289      	uxth	r1, r1
    2096:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    2098:	0028      	movs	r0, r5
    209a:	4b1a      	ldr	r3, [pc, #104]	; (2104 <usart_write_buffer_wait+0xbc>)
    209c:	4798      	blx	r3
	while (length--) {
    209e:	464b      	mov	r3, r9
    20a0:	3b01      	subs	r3, #1
    20a2:	b29b      	uxth	r3, r3
    20a4:	4699      	mov	r9, r3
    20a6:	4543      	cmp	r3, r8
    20a8:	d013      	beq.n	20d2 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    20aa:	7e23      	ldrb	r3, [r4, #24]
    20ac:	423b      	tst	r3, r7
    20ae:	d1ea      	bne.n	2086 <usart_write_buffer_wait+0x3e>
    20b0:	4b13      	ldr	r3, [pc, #76]	; (2100 <usart_write_buffer_wait+0xb8>)
    20b2:	7e22      	ldrb	r2, [r4, #24]
    20b4:	423a      	tst	r2, r7
    20b6:	d1e6      	bne.n	2086 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    20b8:	2b01      	cmp	r3, #1
    20ba:	d019      	beq.n	20f0 <usart_write_buffer_wait+0xa8>
    20bc:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    20be:	2b00      	cmp	r3, #0
    20c0:	d1f7      	bne.n	20b2 <usart_write_buffer_wait+0x6a>
    20c2:	e7e0      	b.n	2086 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    20c4:	3602      	adds	r6, #2
    20c6:	b2b6      	uxth	r6, r6
    20c8:	9a01      	ldr	r2, [sp, #4]
    20ca:	5cd3      	ldrb	r3, [r2, r3]
    20cc:	021b      	lsls	r3, r3, #8
    20ce:	4319      	orrs	r1, r3
    20d0:	e7e2      	b.n	2098 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    20d2:	7e23      	ldrb	r3, [r4, #24]
    20d4:	079b      	lsls	r3, r3, #30
    20d6:	d40d      	bmi.n	20f4 <usart_write_buffer_wait+0xac>
    20d8:	4b09      	ldr	r3, [pc, #36]	; (2100 <usart_write_buffer_wait+0xb8>)
    20da:	2102      	movs	r1, #2
    20dc:	7e22      	ldrb	r2, [r4, #24]
    20de:	420a      	tst	r2, r1
    20e0:	d10a      	bne.n	20f8 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    20e2:	2b01      	cmp	r3, #1
    20e4:	d00a      	beq.n	20fc <usart_write_buffer_wait+0xb4>
    20e6:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    20e8:	2b00      	cmp	r3, #0
    20ea:	d1f7      	bne.n	20dc <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    20ec:	2000      	movs	r0, #0
    20ee:	e7b5      	b.n	205c <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    20f0:	2012      	movs	r0, #18
    20f2:	e7b3      	b.n	205c <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    20f4:	2000      	movs	r0, #0
    20f6:	e7b1      	b.n	205c <usart_write_buffer_wait+0x14>
    20f8:	2000      	movs	r0, #0
    20fa:	e7af      	b.n	205c <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    20fc:	2012      	movs	r0, #18
    20fe:	e7ad      	b.n	205c <usart_write_buffer_wait+0x14>
    2100:	0000ffff 	.word	0x0000ffff
    2104:	0000201d 	.word	0x0000201d

00002108 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    210a:	0004      	movs	r4, r0
    210c:	000d      	movs	r5, r1
    210e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2110:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2112:	4b0f      	ldr	r3, [pc, #60]	; (2150 <_usart_read_buffer+0x48>)
    2114:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2116:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2118:	b29b      	uxth	r3, r3
    211a:	2b00      	cmp	r3, #0
    211c:	d003      	beq.n	2126 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    211e:	4b0d      	ldr	r3, [pc, #52]	; (2154 <_usart_read_buffer+0x4c>)
    2120:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2122:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2126:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2128:	4b0a      	ldr	r3, [pc, #40]	; (2154 <_usart_read_buffer+0x4c>)
    212a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    212c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    212e:	2205      	movs	r2, #5
    2130:	2332      	movs	r3, #50	; 0x32
    2132:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2134:	3b2e      	subs	r3, #46	; 0x2e
    2136:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2138:	7a23      	ldrb	r3, [r4, #8]
    213a:	2b00      	cmp	r3, #0
    213c:	d001      	beq.n	2142 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    213e:	2320      	movs	r3, #32
    2140:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2142:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2144:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2146:	2b00      	cmp	r3, #0
    2148:	d0ec      	beq.n	2124 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    214a:	2308      	movs	r3, #8
    214c:	75bb      	strb	r3, [r7, #22]
    214e:	e7e9      	b.n	2124 <_usart_read_buffer+0x1c>
    2150:	000029d5 	.word	0x000029d5
    2154:	00002a15 	.word	0x00002a15

00002158 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2158:	1c93      	adds	r3, r2, #2
    215a:	009b      	lsls	r3, r3, #2
    215c:	18c3      	adds	r3, r0, r3
    215e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2160:	2130      	movs	r1, #48	; 0x30
    2162:	2301      	movs	r3, #1
    2164:	4093      	lsls	r3, r2
    2166:	001a      	movs	r2, r3
    2168:	5c43      	ldrb	r3, [r0, r1]
    216a:	4313      	orrs	r3, r2
    216c:	5443      	strb	r3, [r0, r1]
}
    216e:	4770      	bx	lr

00002170 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2170:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2172:	2317      	movs	r3, #23
	if (length == 0) {
    2174:	2a00      	cmp	r2, #0
    2176:	d101      	bne.n	217c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2178:	0018      	movs	r0, r3
    217a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    217c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    217e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2180:	2c00      	cmp	r4, #0
    2182:	d0f9      	beq.n	2178 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2184:	4b01      	ldr	r3, [pc, #4]	; (218c <usart_read_buffer_job+0x1c>)
    2186:	4798      	blx	r3
    2188:	0003      	movs	r3, r0
    218a:	e7f5      	b.n	2178 <usart_read_buffer_job+0x8>
    218c:	00002109 	.word	0x00002109

00002190 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2192:	0080      	lsls	r0, r0, #2
    2194:	4b51      	ldr	r3, [pc, #324]	; (22dc <_usart_interrupt_handler+0x14c>)
    2196:	58c6      	ldr	r6, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2198:	6834      	ldr	r4, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    219a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    219c:	2b00      	cmp	r3, #0
    219e:	d1fc      	bne.n	219a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    21a0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    21a2:	7da5      	ldrb	r5, [r4, #22]
    21a4:	401d      	ands	r5, r3
	callback_status = module->callback_reg_mask &
    21a6:	2330      	movs	r3, #48	; 0x30
    21a8:	5cf3      	ldrb	r3, [r6, r3]
    21aa:	2231      	movs	r2, #49	; 0x31
    21ac:	5cb7      	ldrb	r7, [r6, r2]
    21ae:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    21b0:	07eb      	lsls	r3, r5, #31
    21b2:	d522      	bpl.n	21fa <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    21b4:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    21b6:	b29b      	uxth	r3, r3
    21b8:	2b00      	cmp	r3, #0
    21ba:	d01c      	beq.n	21f6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    21bc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    21be:	7813      	ldrb	r3, [r2, #0]
    21c0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    21c2:	1c51      	adds	r1, r2, #1
    21c4:	62b1      	str	r1, [r6, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    21c6:	7971      	ldrb	r1, [r6, #5]
    21c8:	2901      	cmp	r1, #1
    21ca:	d00e      	beq.n	21ea <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    21cc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    21ce:	05db      	lsls	r3, r3, #23
    21d0:	0ddb      	lsrs	r3, r3, #23
    21d2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    21d4:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    21d6:	3b01      	subs	r3, #1
    21d8:	b29b      	uxth	r3, r3
    21da:	85f3      	strh	r3, [r6, #46]	; 0x2e
    21dc:	2b00      	cmp	r3, #0
    21de:	d10c      	bne.n	21fa <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    21e0:	3301      	adds	r3, #1
    21e2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    21e4:	3301      	adds	r3, #1
    21e6:	75a3      	strb	r3, [r4, #22]
    21e8:	e007      	b.n	21fa <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    21ea:	7851      	ldrb	r1, [r2, #1]
    21ec:	0209      	lsls	r1, r1, #8
    21ee:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    21f0:	3202      	adds	r2, #2
    21f2:	62b2      	str	r2, [r6, #40]	; 0x28
    21f4:	e7eb      	b.n	21ce <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    21f6:	2301      	movs	r3, #1
    21f8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    21fa:	07ab      	lsls	r3, r5, #30
    21fc:	d506      	bpl.n	220c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    21fe:	2302      	movs	r3, #2
    2200:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2202:	2200      	movs	r2, #0
    2204:	3331      	adds	r3, #49	; 0x31
    2206:	54f2      	strb	r2, [r6, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2208:	07fb      	lsls	r3, r7, #31
    220a:	d428      	bmi.n	225e <_usart_interrupt_handler+0xce>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    220c:	076b      	lsls	r3, r5, #29
    220e:	d510      	bpl.n	2232 <_usart_interrupt_handler+0xa2>

		//if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2210:	8b63      	ldrh	r3, [r4, #26]
    2212:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2214:	071a      	lsls	r2, r3, #28
    2216:	d426      	bmi.n	2266 <_usart_interrupt_handler+0xd6>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2218:	223f      	movs	r2, #63	; 0x3f
    221a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) 
    221c:	2b00      	cmp	r3, #0
    221e:	d04a      	beq.n	22b6 <_usart_interrupt_handler+0x126>
			{
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2220:	079a      	lsls	r2, r3, #30
    2222:	d523      	bpl.n	226c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2224:	221a      	movs	r2, #26
    2226:	2332      	movs	r3, #50	; 0x32
    2228:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    222a:	3b30      	subs	r3, #48	; 0x30
    222c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    222e:	077b      	lsls	r3, r7, #29
    2230:	d43d      	bmi.n	22ae <_usart_interrupt_handler+0x11e>
			//usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		//}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2232:	06eb      	lsls	r3, r5, #27
    2234:	d504      	bpl.n	2240 <_usart_interrupt_handler+0xb0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2236:	2310      	movs	r3, #16
    2238:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    223a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    223c:	06fb      	lsls	r3, r7, #27
    223e:	d440      	bmi.n	22c2 <_usart_interrupt_handler+0x132>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2240:	06ab      	lsls	r3, r5, #26
    2242:	d504      	bpl.n	224e <_usart_interrupt_handler+0xbe>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2244:	2320      	movs	r3, #32
    2246:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2248:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    224a:	073b      	lsls	r3, r7, #28
    224c:	d43d      	bmi.n	22ca <_usart_interrupt_handler+0x13a>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    224e:	072b      	lsls	r3, r5, #28
    2250:	d504      	bpl.n	225c <_usart_interrupt_handler+0xcc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2252:	2308      	movs	r3, #8
    2254:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2256:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2258:	06bb      	lsls	r3, r7, #26
    225a:	d43a      	bmi.n	22d2 <_usart_interrupt_handler+0x142>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    225c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    225e:	0030      	movs	r0, r6
    2260:	68f3      	ldr	r3, [r6, #12]
    2262:	4798      	blx	r3
    2264:	e7d2      	b.n	220c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2266:	2237      	movs	r2, #55	; 0x37
    2268:	4013      	ands	r3, r2
    226a:	e7d7      	b.n	221c <_usart_interrupt_handler+0x8c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    226c:	075a      	lsls	r2, r3, #29
    226e:	d505      	bpl.n	227c <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2270:	221e      	movs	r2, #30
    2272:	2332      	movs	r3, #50	; 0x32
    2274:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2276:	3b2e      	subs	r3, #46	; 0x2e
    2278:	8363      	strh	r3, [r4, #26]
    227a:	e7d8      	b.n	222e <_usart_interrupt_handler+0x9e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    227c:	07da      	lsls	r2, r3, #31
    227e:	d505      	bpl.n	228c <_usart_interrupt_handler+0xfc>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2280:	2213      	movs	r2, #19
    2282:	2332      	movs	r3, #50	; 0x32
    2284:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2286:	3b31      	subs	r3, #49	; 0x31
    2288:	8363      	strh	r3, [r4, #26]
    228a:	e7d0      	b.n	222e <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    228c:	06da      	lsls	r2, r3, #27
    228e:	d505      	bpl.n	229c <_usart_interrupt_handler+0x10c>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2290:	2242      	movs	r2, #66	; 0x42
    2292:	2332      	movs	r3, #50	; 0x32
    2294:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2296:	3b22      	subs	r3, #34	; 0x22
    2298:	8363      	strh	r3, [r4, #26]
    229a:	e7c8      	b.n	222e <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    229c:	2220      	movs	r2, #32
    229e:	421a      	tst	r2, r3
    22a0:	d0c5      	beq.n	222e <_usart_interrupt_handler+0x9e>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    22a2:	3221      	adds	r2, #33	; 0x21
    22a4:	2332      	movs	r3, #50	; 0x32
    22a6:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    22a8:	3b12      	subs	r3, #18
    22aa:	8363      	strh	r3, [r4, #26]
    22ac:	e7bf      	b.n	222e <_usart_interrupt_handler+0x9e>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    22ae:	0030      	movs	r0, r6
    22b0:	6973      	ldr	r3, [r6, #20]
    22b2:	4798      	blx	r3
    22b4:	e7bd      	b.n	2232 <_usart_interrupt_handler+0xa2>
				if (callback_status
    22b6:	07bb      	lsls	r3, r7, #30
    22b8:	d5bb      	bpl.n	2232 <_usart_interrupt_handler+0xa2>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    22ba:	0030      	movs	r0, r6
    22bc:	6933      	ldr	r3, [r6, #16]
    22be:	4798      	blx	r3
    22c0:	e7b7      	b.n	2232 <_usart_interrupt_handler+0xa2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    22c2:	0030      	movs	r0, r6
    22c4:	69f3      	ldr	r3, [r6, #28]
    22c6:	4798      	blx	r3
    22c8:	e7ba      	b.n	2240 <_usart_interrupt_handler+0xb0>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    22ca:	0030      	movs	r0, r6
    22cc:	69b3      	ldr	r3, [r6, #24]
    22ce:	4798      	blx	r3
    22d0:	e7bd      	b.n	224e <_usart_interrupt_handler+0xbe>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    22d2:	6a33      	ldr	r3, [r6, #32]
    22d4:	0030      	movs	r0, r6
    22d6:	4798      	blx	r3
}
    22d8:	e7c0      	b.n	225c <_usart_interrupt_handler+0xcc>
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	20000f04 	.word	0x20000f04

000022e0 <configureADC>:
#include    "FlutterADC.h"
#define OUTPUT1_DET_AI			4	
uint16_t* ADCResult = NULL;

void configureADC()
{
    22e0:	b510      	push	{r4, lr}
    22e2:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	ADCResult = malloc(sizeof(uint16_t));
    22e4:	2002      	movs	r0, #2
    22e6:	4b18      	ldr	r3, [pc, #96]	; (2348 <configureADC+0x68>)
    22e8:	4798      	blx	r3
    22ea:	4b18      	ldr	r3, [pc, #96]	; (234c <configureADC+0x6c>)
    22ec:	6018      	str	r0, [r3, #0]
	
	adc_get_config_defaults(&conf_adc);
    22ee:	4668      	mov	r0, sp
    22f0:	4b17      	ldr	r3, [pc, #92]	; (2350 <configureADC+0x70>)
    22f2:	4798      	blx	r3

	conf_adc.reference			=  ADC_REFCTRL_REFSEL_INT1V;
    22f4:	2300      	movs	r3, #0
    22f6:	466a      	mov	r2, sp
    22f8:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	=  ADC_CLOCK_PRESCALER_DIV32;
    22fa:	23c0      	movs	r3, #192	; 0xc0
    22fc:	009b      	lsls	r3, r3, #2
    22fe:	8053      	strh	r3, [r2, #2]
	conf_adc.positive_input		=  OUTPUT1_DET_AI;
    2300:	2304      	movs	r3, #4
    2302:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input		=  ADC_NEGATIVE_INPUT_GND;
    2304:	23c0      	movs	r3, #192	; 0xc0
    2306:	015b      	lsls	r3, r3, #5
    2308:	81d3      	strh	r3, [r2, #14]
	conf_adc.resolution			=  ADC_RESOLUTION_8BIT;
    230a:	2330      	movs	r3, #48	; 0x30
    230c:	7113      	strb	r3, [r2, #4]
	//conf_adc.left_adjust		=  true;

	adc_init(&adc_instance, ADC, &conf_adc);
    230e:	4c11      	ldr	r4, [pc, #68]	; (2354 <configureADC+0x74>)
    2310:	4911      	ldr	r1, [pc, #68]	; (2358 <configureADC+0x78>)
    2312:	0020      	movs	r0, r4
    2314:	4b11      	ldr	r3, [pc, #68]	; (235c <configureADC+0x7c>)
    2316:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2318:	6822      	ldr	r2, [r4, #0]
    231a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    231c:	b25b      	sxtb	r3, r3
    231e:	2b00      	cmp	r3, #0
    2320:	dbfb      	blt.n	231a <configureADC+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2322:	2180      	movs	r1, #128	; 0x80
    2324:	0409      	lsls	r1, r1, #16
    2326:	4b0e      	ldr	r3, [pc, #56]	; (2360 <configureADC+0x80>)
    2328:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    232a:	230f      	movs	r3, #15
    232c:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    232e:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2330:	7813      	ldrb	r3, [r2, #0]
    2332:	2102      	movs	r1, #2
    2334:	430b      	orrs	r3, r1
    2336:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    2338:	4b06      	ldr	r3, [pc, #24]	; (2354 <configureADC+0x74>)
    233a:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    233c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    233e:	b25b      	sxtb	r3, r3
    2340:	2b00      	cmp	r3, #0
    2342:	dbfb      	blt.n	233c <configureADC+0x5c>
	adc_enable(&adc_instance);
}
    2344:	b00c      	add	sp, #48	; 0x30
    2346:	bd10      	pop	{r4, pc}
    2348:	00004bc9 	.word	0x00004bc9
    234c:	2000011c 	.word	0x2000011c
    2350:	00001365 	.word	0x00001365
    2354:	20000f1c 	.word	0x20000f1c
    2358:	42004000 	.word	0x42004000
    235c:	000013ad 	.word	0x000013ad
    2360:	e000e100 	.word	0xe000e100

00002364 <adc_start_read_result>:




uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    2364:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    2366:	4b2d      	ldr	r3, [pc, #180]	; (241c <adc_start_read_result+0xb8>)
    2368:	6819      	ldr	r1, [r3, #0]
    236a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    236c:	b25b      	sxtb	r3, r3
    236e:	2b00      	cmp	r3, #0
    2370:	dbfb      	blt.n	236a <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2372:	690b      	ldr	r3, [r1, #16]
    2374:	221f      	movs	r2, #31
    2376:	4393      	bics	r3, r2
    2378:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    237a:	6108      	str	r0, [r1, #16]
    237c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    237e:	b25b      	sxtb	r3, r3
    2380:	2b00      	cmp	r3, #0
    2382:	dbfb      	blt.n	237c <adc_start_read_result+0x18>
    2384:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2386:	b25b      	sxtb	r3, r3
    2388:	2b00      	cmp	r3, #0
    238a:	dbfb      	blt.n	2384 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    238c:	7b0b      	ldrb	r3, [r1, #12]
    238e:	2202      	movs	r2, #2
    2390:	4313      	orrs	r3, r2
    2392:	730b      	strb	r3, [r1, #12]
    2394:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2396:	b25b      	sxtb	r3, r3
    2398:	2b00      	cmp	r3, #0
    239a:	dbfb      	blt.n	2394 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    239c:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    239e:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    23a0:	2402      	movs	r4, #2
    23a2:	e001      	b.n	23a8 <adc_start_read_result+0x44>
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    23a4:	4210      	tst	r0, r2
    23a6:	d10a      	bne.n	23be <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    23a8:	7e0b      	ldrb	r3, [r1, #24]
    23aa:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    23ac:	0002      	movs	r2, r0
    23ae:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    23b0:	421d      	tst	r5, r3
    23b2:	d000      	beq.n	23b6 <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    23b4:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    23b6:	421c      	tst	r4, r3
    23b8:	d0f4      	beq.n	23a4 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    23ba:	432a      	orrs	r2, r5
    23bc:	e7f2      	b.n	23a4 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    23be:	7e0a      	ldrb	r2, [r1, #24]
    23c0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    23c2:	2301      	movs	r3, #1
    23c4:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    23c6:	0750      	lsls	r0, r2, #29
    23c8:	d501      	bpl.n	23ce <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    23ca:	2002      	movs	r0, #2
    23cc:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    23ce:	0792      	lsls	r2, r2, #30
    23d0:	d501      	bpl.n	23d6 <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    23d2:	2204      	movs	r2, #4
    23d4:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    23d6:	07db      	lsls	r3, r3, #31
    23d8:	d403      	bmi.n	23e2 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
	temp = *ADCResult;
    23da:	4b11      	ldr	r3, [pc, #68]	; (2420 <adc_start_read_result+0xbc>)
    23dc:	681b      	ldr	r3, [r3, #0]
	return temp;
    23de:	8818      	ldrh	r0, [r3, #0]
    23e0:	bd30      	pop	{r4, r5, pc}
    23e2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    23e4:	b25b      	sxtb	r3, r3
    23e6:	2b00      	cmp	r3, #0
    23e8:	dbfb      	blt.n	23e2 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
    23ea:	4b0d      	ldr	r3, [pc, #52]	; (2420 <adc_start_read_result+0xbc>)
    23ec:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    23ee:	8b4a      	ldrh	r2, [r1, #26]
    23f0:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    23f2:	4b0a      	ldr	r3, [pc, #40]	; (241c <adc_start_read_result+0xb8>)
    23f4:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    23f6:	2301      	movs	r3, #1
    23f8:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    23fa:	7e0a      	ldrb	r2, [r1, #24]
    23fc:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    23fe:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2400:	0750      	lsls	r0, r2, #29
    2402:	d501      	bpl.n	2408 <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    2404:	2002      	movs	r0, #2
    2406:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2408:	0792      	lsls	r2, r2, #30
    240a:	d501      	bpl.n	2410 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    240c:	2204      	movs	r2, #4
    240e:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2410:	075b      	lsls	r3, r3, #29
    2412:	d5e2      	bpl.n	23da <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    2414:	2302      	movs	r3, #2
    2416:	760b      	strb	r3, [r1, #24]
    2418:	e7df      	b.n	23da <adc_start_read_result+0x76>
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	20000f1c 	.word	0x20000f1c
    2420:	2000011c 	.word	0x2000011c

00002424 <UARTReceiveBytes>:
#define LEN_LEDMATRIX_SETALL	  54

//#define LEN_COMMON_SETALL		

void UARTReceiveBytes(uint8_t* receiveData ,uint8_t countReceive)
{
    2424:	b530      	push	{r4, r5, lr}
	uint8_t i =0;
	while((headPointer - tailPointer) < countReceive )
    2426:	4d0c      	ldr	r5, [pc, #48]	; (2458 <UARTReceiveBytes+0x34>)
    2428:	4c0c      	ldr	r4, [pc, #48]	; (245c <UARTReceiveBytes+0x38>)
    242a:	782b      	ldrb	r3, [r5, #0]
    242c:	7822      	ldrb	r2, [r4, #0]
    242e:	1a9b      	subs	r3, r3, r2
    2430:	428b      	cmp	r3, r1
    2432:	dbfa      	blt.n	242a <UARTReceiveBytes+0x6>
	{
	}
	for(i=1;i<=countReceive;i++)
    2434:	2900      	cmp	r1, #0
    2436:	d00e      	beq.n	2456 <UARTReceiveBytes+0x32>
    2438:	2301      	movs	r3, #1
	{
		receiveData[i] = ringBuffer[tailPointer];
    243a:	4c08      	ldr	r4, [pc, #32]	; (245c <UARTReceiveBytes+0x38>)
    243c:	4d08      	ldr	r5, [pc, #32]	; (2460 <UARTReceiveBytes+0x3c>)
    243e:	7822      	ldrb	r2, [r4, #0]
    2440:	b2d2      	uxtb	r2, r2
    2442:	5caa      	ldrb	r2, [r5, r2]
    2444:	54c2      	strb	r2, [r0, r3]
		tailPointer++;
    2446:	7822      	ldrb	r2, [r4, #0]
    2448:	3201      	adds	r2, #1
    244a:	b2d2      	uxtb	r2, r2
    244c:	7022      	strb	r2, [r4, #0]
	for(i=1;i<=countReceive;i++)
    244e:	3301      	adds	r3, #1
    2450:	b2db      	uxtb	r3, r3
    2452:	4299      	cmp	r1, r3
    2454:	d2f3      	bcs.n	243e <UARTReceiveBytes+0x1a>
	}
}
    2456:	bd30      	pop	{r4, r5, pc}
    2458:	20001084 	.word	0x20001084
    245c:	200010a8 	.word	0x200010a8
    2460:	200010ac 	.word	0x200010ac

00002464 <transferLEDMatrixValues>:

void transferLEDMatrixValues(uint8_t* tempTransfer , uint8_t port)
{
    2464:	b510      	push	{r4, lr}
    2466:	b084      	sub	sp, #16
    2468:	2300      	movs	r3, #0
	uint8_t i =0;
	static uint8_t LEDMatrixValues[64]; 
	for(i=0;i<LEN_LEDMATRIX_SETALL;i++)
	{
		LEDMatrixValues[i] = tempTransfer[i] ;
    246a:	4c0f      	ldr	r4, [pc, #60]	; (24a8 <transferLEDMatrixValues+0x44>)
    246c:	5cc2      	ldrb	r2, [r0, r3]
    246e:	551a      	strb	r2, [r3, r4]
    2470:	3301      	adds	r3, #1
	for(i=0;i<LEN_LEDMATRIX_SETALL;i++)
    2472:	2b36      	cmp	r3, #54	; 0x36
    2474:	d1fa      	bne.n	246c <transferLEDMatrixValues+0x8>
	}
	struct i2c_master_packet wr_packet = {
    2476:	ab01      	add	r3, sp, #4
		.address     = outputPort[port].address ,
    2478:	4a0c      	ldr	r2, [pc, #48]	; (24ac <transferLEDMatrixValues+0x48>)
    247a:	00c8      	lsls	r0, r1, #3
    247c:	5c84      	ldrb	r4, [r0, r2]
	struct i2c_master_packet wr_packet = {
    247e:	801c      	strh	r4, [r3, #0]
		.data_length = outputPort[port].writeDataLength1,
    2480:	1812      	adds	r2, r2, r0
    2482:	7910      	ldrb	r0, [r2, #4]
	struct i2c_master_packet wr_packet = {
    2484:	8058      	strh	r0, [r3, #2]
    2486:	4808      	ldr	r0, [pc, #32]	; (24a8 <transferLEDMatrixValues+0x44>)
    2488:	9002      	str	r0, [sp, #8]
    248a:	2000      	movs	r0, #0
    248c:	7218      	strb	r0, [r3, #8]
    248e:	7258      	strb	r0, [r3, #9]
    2490:	7298      	strb	r0, [r3, #10]
		.data        = &LEDMatrixValues,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	while(outputPort[port].I2CStatus == BUSY_MODE);
    2492:	79d3      	ldrb	r3, [r2, #7]
    2494:	2b02      	cmp	r3, #2
    2496:	d0fd      	beq.n	2494 <transferLEDMatrixValues+0x30>
	I2CWrite((port+1) , &wr_packet);
    2498:	3101      	adds	r1, #1
    249a:	b2c8      	uxtb	r0, r1
    249c:	a901      	add	r1, sp, #4
    249e:	4b04      	ldr	r3, [pc, #16]	; (24b0 <transferLEDMatrixValues+0x4c>)
    24a0:	4798      	blx	r3
}
    24a2:	b004      	add	sp, #16
    24a4:	bd10      	pop	{r4, pc}
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	20000120 	.word	0x20000120
    24ac:	20001088 	.word	0x20001088
    24b0:	00000e25 	.word	0x00000e25

000024b4 <checkUART>:


void checkUART()
{
    24b4:	b510      	push	{r4, lr}
	uint8_t i =0;
	uint8_t port = 3;
	static uint8_t receivedValue[60];
	if(headPointer != tailPointer)
    24b6:	4b2b      	ldr	r3, [pc, #172]	; (2564 <checkUART+0xb0>)
    24b8:	781b      	ldrb	r3, [r3, #0]
    24ba:	4a2b      	ldr	r2, [pc, #172]	; (2568 <checkUART+0xb4>)
    24bc:	7812      	ldrb	r2, [r2, #0]
    24be:	b2db      	uxtb	r3, r3
    24c0:	4293      	cmp	r3, r2
    24c2:	d03c      	beq.n	253e <checkUART+0x8a>
	{
		receivedValue[0]  = ringBuffer[tailPointer];
    24c4:	4928      	ldr	r1, [pc, #160]	; (2568 <checkUART+0xb4>)
    24c6:	780b      	ldrb	r3, [r1, #0]
    24c8:	b2db      	uxtb	r3, r3
    24ca:	4a28      	ldr	r2, [pc, #160]	; (256c <checkUART+0xb8>)
    24cc:	5cd3      	ldrb	r3, [r2, r3]
    24ce:	b2db      	uxtb	r3, r3
    24d0:	4a27      	ldr	r2, [pc, #156]	; (2570 <checkUART+0xbc>)
    24d2:	7013      	strb	r3, [r2, #0]
		tailPointer++;
    24d4:	780a      	ldrb	r2, [r1, #0]
    24d6:	3201      	adds	r2, #1
    24d8:	b2d2      	uxtb	r2, r2
    24da:	700a      	strb	r2, [r1, #0]
		switch(receivedValue[0])
    24dc:	2b4c      	cmp	r3, #76	; 0x4c
    24de:	d021      	beq.n	2524 <checkUART+0x70>
    24e0:	d90f      	bls.n	2502 <checkUART+0x4e>
    24e2:	2b62      	cmp	r3, #98	; 0x62
    24e4:	d117      	bne.n	2516 <checkUART+0x62>
		{
			case TEST:
				break;
			case BROADCAST:
				UARTReceiveBytes(receivedValue , LEN_BROADCAST_COMMAND );
    24e6:	4c22      	ldr	r4, [pc, #136]	; (2570 <checkUART+0xbc>)
    24e8:	2101      	movs	r1, #1
    24ea:	0020      	movs	r0, r4
    24ec:	4b21      	ldr	r3, [pc, #132]	; (2574 <checkUART+0xc0>)
    24ee:	4798      	blx	r3
				if(receivedValue[1]  == START_BROADCAST)
    24f0:	7863      	ldrb	r3, [r4, #1]
    24f2:	2b67      	cmp	r3, #103	; 0x67
    24f4:	d012      	beq.n	251c <checkUART+0x68>
				{
					broadcastFlag = true;
				}
				else if(receivedValue[1] == STOP_BROADCAST)
    24f6:	2b73      	cmp	r3, #115	; 0x73
    24f8:	d12a      	bne.n	2550 <checkUART+0x9c>
				{
					broadcastFlag = false;
    24fa:	2200      	movs	r2, #0
    24fc:	4b1e      	ldr	r3, [pc, #120]	; (2578 <checkUART+0xc4>)
    24fe:	701a      	strb	r2, [r3, #0]
    2500:	e026      	b.n	2550 <checkUART+0x9c>
		switch(receivedValue[0])
    2502:	2b01      	cmp	r3, #1
    2504:	d024      	beq.n	2550 <checkUART+0x9c>
    2506:	2b43      	cmp	r3, #67	; 0x43
    2508:	d022      	beq.n	2550 <checkUART+0x9c>
			*/
				break;
			case STOP_BROADCAST:
				break;
			default:
			    headPointer = 0;
    250a:	2300      	movs	r3, #0
    250c:	4a15      	ldr	r2, [pc, #84]	; (2564 <checkUART+0xb0>)
    250e:	7013      	strb	r3, [r2, #0]
			    tailPointer = 0;
    2510:	4a15      	ldr	r2, [pc, #84]	; (2568 <checkUART+0xb4>)
    2512:	7013      	strb	r3, [r2, #0]
				break;
    2514:	e01c      	b.n	2550 <checkUART+0x9c>
		switch(receivedValue[0])
    2516:	2b73      	cmp	r3, #115	; 0x73
    2518:	d1f7      	bne.n	250a <checkUART+0x56>
    251a:	e019      	b.n	2550 <checkUART+0x9c>
					broadcastFlag = true;
    251c:	2201      	movs	r2, #1
    251e:	4b16      	ldr	r3, [pc, #88]	; (2578 <checkUART+0xc4>)
    2520:	701a      	strb	r2, [r3, #0]
    2522:	e015      	b.n	2550 <checkUART+0x9c>
				UARTReceiveBytes(receivedValue , LEN_LEDMATRIX_SETALL );
    2524:	2136      	movs	r1, #54	; 0x36
    2526:	4812      	ldr	r0, [pc, #72]	; (2570 <checkUART+0xbc>)
    2528:	4b12      	ldr	r3, [pc, #72]	; (2574 <checkUART+0xc0>)
    252a:	4798      	blx	r3
				if(outputPort[port].currentState == 	OUTPUT_LEDMATRIX )
    252c:	4b13      	ldr	r3, [pc, #76]	; (257c <checkUART+0xc8>)
    252e:	7e5b      	ldrb	r3, [r3, #25]
    2530:	2b03      	cmp	r3, #3
    2532:	d10d      	bne.n	2550 <checkUART+0x9c>
					transferLEDMatrixValues(receivedValue,port);
    2534:	2103      	movs	r1, #3
    2536:	480e      	ldr	r0, [pc, #56]	; (2570 <checkUART+0xbc>)
    2538:	4b11      	ldr	r3, [pc, #68]	; (2580 <checkUART+0xcc>)
    253a:	4798      	blx	r3
    253c:	e008      	b.n	2550 <checkUART+0x9c>
		}
	}
	else if(broadcastFlag == true)
    253e:	4b0e      	ldr	r3, [pc, #56]	; (2578 <checkUART+0xc4>)
    2540:	781b      	ldrb	r3, [r3, #0]
    2542:	2b01      	cmp	r3, #1
    2544:	d005      	beq.n	2552 <checkUART+0x9e>
		tailPointer = 0;
		sendDataBLE();
	}
	else
	{
		headPointer = 0;
    2546:	2300      	movs	r3, #0
    2548:	4a06      	ldr	r2, [pc, #24]	; (2564 <checkUART+0xb0>)
    254a:	7013      	strb	r3, [r2, #0]
		tailPointer = 0;
    254c:	4a06      	ldr	r2, [pc, #24]	; (2568 <checkUART+0xb4>)
    254e:	7013      	strb	r3, [r2, #0]
	}
    2550:	bd10      	pop	{r4, pc}
		headPointer = 0;
    2552:	2300      	movs	r3, #0
    2554:	4a03      	ldr	r2, [pc, #12]	; (2564 <checkUART+0xb0>)
    2556:	7013      	strb	r3, [r2, #0]
		tailPointer = 0;
    2558:	4a03      	ldr	r2, [pc, #12]	; (2568 <checkUART+0xb4>)
    255a:	7013      	strb	r3, [r2, #0]
		sendDataBLE();
    255c:	4b09      	ldr	r3, [pc, #36]	; (2584 <checkUART+0xd0>)
    255e:	4798      	blx	r3
    2560:	e7f6      	b.n	2550 <checkUART+0x9c>
    2562:	46c0      	nop			; (mov r8, r8)
    2564:	20001084 	.word	0x20001084
    2568:	200010a8 	.word	0x200010a8
    256c:	200010ac 	.word	0x200010ac
    2570:	20000164 	.word	0x20000164
    2574:	00002425 	.word	0x00002425
    2578:	20000160 	.word	0x20000160
    257c:	20001088 	.word	0x20001088
    2580:	00002465 	.word	0x00002465
    2584:	00001269 	.word	0x00001269

00002588 <usart_read_callback>:
	usart_enable(&usart_instance);
}

//USART callback with a ring buffer 
void usart_read_callback(struct usart_module *const usart_module)
{
    2588:	b082      	sub	sp, #8
	volatile uint16_t recData = 0;
    258a:	466b      	mov	r3, sp
    258c:	1d99      	adds	r1, r3, #6
    258e:	2300      	movs	r3, #0
    2590:	800b      	strh	r3, [r1, #0]
	recData = (usart_instance.hw->USART.DATA.reg & SERCOM_USART_DATA_MASK);
    2592:	4b0b      	ldr	r3, [pc, #44]	; (25c0 <usart_read_callback+0x38>)
    2594:	681b      	ldr	r3, [r3, #0]
    2596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2598:	05db      	lsls	r3, r3, #23
    259a:	0ddb      	lsrs	r3, r3, #23
    259c:	800b      	strh	r3, [r1, #0]
	*(ringBuffer + headPointer) = (uint8_t)recData;
    259e:	4a09      	ldr	r2, [pc, #36]	; (25c4 <usart_read_callback+0x3c>)
    25a0:	7810      	ldrb	r0, [r2, #0]
    25a2:	4b09      	ldr	r3, [pc, #36]	; (25c8 <usart_read_callback+0x40>)
    25a4:	181b      	adds	r3, r3, r0
    25a6:	8809      	ldrh	r1, [r1, #0]
    25a8:	b2c9      	uxtb	r1, r1
    25aa:	7019      	strb	r1, [r3, #0]
	headPointer++;
    25ac:	7813      	ldrb	r3, [r2, #0]
    25ae:	3301      	adds	r3, #1
    25b0:	b2db      	uxtb	r3, r3
    25b2:	7013      	strb	r3, [r2, #0]
	recDataStatus = true;
    25b4:	2201      	movs	r2, #1
    25b6:	4b05      	ldr	r3, [pc, #20]	; (25cc <usart_read_callback+0x44>)
    25b8:	701a      	strb	r2, [r3, #0]
}
    25ba:	b002      	add	sp, #8
    25bc:	4770      	bx	lr
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	20000eb0 	.word	0x20000eb0
    25c4:	20001084 	.word	0x20001084
    25c8:	200010ac 	.word	0x200010ac
    25cc:	20000f54 	.word	0x20000f54

000025d0 <serialInit>:
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}

//Main function 
void serialInit()
{
    25d0:	b530      	push	{r4, r5, lr}
    25d2:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    25d4:	ab01      	add	r3, sp, #4
    25d6:	2280      	movs	r2, #128	; 0x80
    25d8:	05d2      	lsls	r2, r2, #23
    25da:	9201      	str	r2, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    25dc:	2200      	movs	r2, #0
    25de:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    25e0:	21ff      	movs	r1, #255	; 0xff
    25e2:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    25e4:	2100      	movs	r1, #0
    25e6:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    25e8:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    25ea:	2001      	movs	r0, #1
    25ec:	2424      	movs	r4, #36	; 0x24
    25ee:	5518      	strb	r0, [r3, r4]
	config->transmitter_enable = true;
    25f0:	3401      	adds	r4, #1
    25f2:	5518      	strb	r0, [r3, r4]
	config->clock_polarity_inverted = false;
    25f4:	3025      	adds	r0, #37	; 0x25
    25f6:	541a      	strb	r2, [r3, r0]
	config->use_external_clock = false;
    25f8:	3001      	adds	r0, #1
    25fa:	541a      	strb	r2, [r3, r0]
	config->ext_clock_freq   = 0;
    25fc:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    25fe:	3005      	adds	r0, #5
    2600:	541a      	strb	r2, [r3, r0]
	config->generator_source = GCLK_GENERATOR_0;
    2602:	3001      	adds	r0, #1
    2604:	541a      	strb	r2, [r3, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2606:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2608:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    260a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    260c:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    260e:	7719      	strb	r1, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2610:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    2612:	2213      	movs	r2, #19
    2614:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2616:	7759      	strb	r1, [r3, #29]
	config_usart.baudrate    = BAUDRATE_BLE;
    2618:	22e1      	movs	r2, #225	; 0xe1
    261a:	0252      	lsls	r2, r2, #9
    261c:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_SERCOM_MUX_SETTING;
    261e:	2280      	movs	r2, #128	; 0x80
    2620:	0392      	lsls	r2, r2, #14
    2622:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = USART_SERCOM_PINMUX_PAD0_TX;
    2624:	4a1a      	ldr	r2, [pc, #104]	; (2690 <serialInit+0xc0>)
    2626:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = USART_SERCOM_PINMUX_PAD1_UNUSED;
    2628:	2201      	movs	r2, #1
    262a:	4252      	negs	r2, r2
    262c:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = USART_SERCOM_PINMUX_PAD2_RX;
    262e:	4919      	ldr	r1, [pc, #100]	; (2694 <serialInit+0xc4>)
    2630:	6399      	str	r1, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = USART_SERCOM_PINMUX_PAD3_UNUSED;
    2632:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,BLE_UART_MODULE, &config_usart) != STATUS_OK){}
    2634:	4d18      	ldr	r5, [pc, #96]	; (2698 <serialInit+0xc8>)
    2636:	4c19      	ldr	r4, [pc, #100]	; (269c <serialInit+0xcc>)
    2638:	aa01      	add	r2, sp, #4
    263a:	4919      	ldr	r1, [pc, #100]	; (26a0 <serialInit+0xd0>)
    263c:	0028      	movs	r0, r5
    263e:	47a0      	blx	r4
    2640:	2800      	cmp	r0, #0
    2642:	d1f9      	bne.n	2638 <serialInit+0x68>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2644:	4d14      	ldr	r5, [pc, #80]	; (2698 <serialInit+0xc8>)
    2646:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2648:	0020      	movs	r0, r4
    264a:	4b16      	ldr	r3, [pc, #88]	; (26a4 <serialInit+0xd4>)
    264c:	4798      	blx	r3
    264e:	231f      	movs	r3, #31
    2650:	4018      	ands	r0, r3
    2652:	3b1e      	subs	r3, #30
    2654:	4083      	lsls	r3, r0
    2656:	4a14      	ldr	r2, [pc, #80]	; (26a8 <serialInit+0xd8>)
    2658:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    265a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    265c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    265e:	2b00      	cmp	r3, #0
    2660:	d1fc      	bne.n	265c <serialInit+0x8c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2662:	6823      	ldr	r3, [r4, #0]
    2664:	2202      	movs	r2, #2
    2666:	4313      	orrs	r3, r2
    2668:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    266a:	4c0b      	ldr	r4, [pc, #44]	; (2698 <serialInit+0xc8>)
    266c:	3a01      	subs	r2, #1
    266e:	490f      	ldr	r1, [pc, #60]	; (26ac <serialInit+0xdc>)
    2670:	0020      	movs	r0, r4
    2672:	4b0f      	ldr	r3, [pc, #60]	; (26b0 <serialInit+0xe0>)
    2674:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2676:	2231      	movs	r2, #49	; 0x31
    2678:	5ca3      	ldrb	r3, [r4, r2]
    267a:	2102      	movs	r1, #2
    267c:	430b      	orrs	r3, r1
    267e:	54a3      	strb	r3, [r4, r2]
	uint8_t temp_buffer[MAX_RX_BUFFER_LENGTH];
	configureUSART();
	configureUSARTCallbacks();
	usart_read_buffer_job(&usart_instance,(uint8_t *)temp_buffer, MAX_RX_BUFFER_LENGTH);
    2680:	3a30      	subs	r2, #48	; 0x30
    2682:	a911      	add	r1, sp, #68	; 0x44
    2684:	0020      	movs	r0, r4
    2686:	4b0b      	ldr	r3, [pc, #44]	; (26b4 <serialInit+0xe4>)
    2688:	4798      	blx	r3
    268a:	b013      	add	sp, #76	; 0x4c
    268c:	bd30      	pop	{r4, r5, pc}
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	002c0002 	.word	0x002c0002
    2694:	002e0002 	.word	0x002e0002
    2698:	20000eb0 	.word	0x20000eb0
    269c:	00001cd9 	.word	0x00001cd9
    26a0:	42001800 	.word	0x42001800
    26a4:	00001c49 	.word	0x00001c49
    26a8:	e000e100 	.word	0xe000e100
    26ac:	00002589 	.word	0x00002589
    26b0:	00002159 	.word	0x00002159
    26b4:	00002171 	.word	0x00002171

000026b8 <inputOutputConnection>:

uint8_t  inputOutputConnection(uint8_t analogInput)
{
	uint8_t inputOutput = 0;
	
	if((analogInput > MIN_THRES_LIGHT) && (analogInput <= MAX_THRES_LIGHT))
    26b8:	0003      	movs	r3, r0
    26ba:	330f      	adds	r3, #15
    26bc:	b2db      	uxtb	r3, r3
	{
		inputOutput	=		ANALOG_LIGHT_SENSOR;
    26be:	221f      	movs	r2, #31
	if((analogInput > MIN_THRES_LIGHT) && (analogInput <= MAX_THRES_LIGHT))
    26c0:	2b09      	cmp	r3, #9
    26c2:	d801      	bhi.n	26c8 <inputOutputConnection+0x10>
	else
	{
		inputOutput	=		NOTHINGCONNECTED;
	}
	return inputOutput;
}
    26c4:	0010      	movs	r0, r2
    26c6:	4770      	bx	lr
	else if((analogInput > MIN_THRES_DIAL) && (analogInput <= MAX_THRES_DIAL))
    26c8:	0003      	movs	r3, r0
    26ca:	3319      	adds	r3, #25
    26cc:	b2db      	uxtb	r3, r3
		inputOutput	=		ANALOG_DIAL;
    26ce:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_DIAL) && (analogInput <= MAX_THRES_DIAL))
    26d0:	2b09      	cmp	r3, #9
    26d2:	d9f7      	bls.n	26c4 <inputOutputConnection+0xc>
	else if((analogInput > MIN_THRES_DISTANCE) && (analogInput <= MAX_THRES_DISTANCE))
    26d4:	0003      	movs	r3, r0
    26d6:	3323      	adds	r3, #35	; 0x23
    26d8:	b2db      	uxtb	r3, r3
		inputOutput	=	    ANALOG_DISTANCE_SENSOR;
    26da:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_DISTANCE) && (analogInput <= MAX_THRES_DISTANCE))
    26dc:	2b09      	cmp	r3, #9
    26de:	d9f1      	bls.n	26c4 <inputOutputConnection+0xc>
	else if((analogInput > MIN_THRES_SOUND) && (analogInput <= MAX_THRES_SOUND))
    26e0:	0003      	movs	r3, r0
    26e2:	332d      	adds	r3, #45	; 0x2d
    26e4:	b2db      	uxtb	r3, r3
		inputOutput	=		ANALOG_SOUND_SENSOR;
    26e6:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_SOUND) && (analogInput <= MAX_THRES_SOUND))
    26e8:	2b09      	cmp	r3, #9
    26ea:	d9eb      	bls.n	26c4 <inputOutputConnection+0xc>
		inputOutput	=		OUTPUT_SERVO_POSITION;
    26ec:	3a1a      	subs	r2, #26
	else if((analogInput > MIN_THRES_SERVO) && (analogInput <= MAX_THRES_SERVO))
    26ee:	0003      	movs	r3, r0
    26f0:	3b0b      	subs	r3, #11
    26f2:	2b09      	cmp	r3, #9
    26f4:	d9e6      	bls.n	26c4 <inputOutputConnection+0xc>
	else if((analogInput > MIN_THRES_LEDMATRIX) && (analogInput <= MAX_THRES_LEDMATRIX))
    26f6:	381f      	subs	r0, #31
		inputOutput	=		OUTPUT_LEDMATRIX;
    26f8:	3201      	adds	r2, #1
	else if((analogInput > MIN_THRES_LEDMATRIX) && (analogInput <= MAX_THRES_LEDMATRIX))
    26fa:	281d      	cmp	r0, #29
    26fc:	d9e2      	bls.n	26c4 <inputOutputConnection+0xc>
		inputOutput	=		NOTHINGCONNECTED;
    26fe:	2200      	movs	r2, #0
    2700:	e7e0      	b.n	26c4 <inputOutputConnection+0xc>
	...

00002704 <convertAnalogOutputs>:


void convertAnalogOutputs(uint8_t* analogOutput)
{
    2704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2706:	0005      	movs	r5, r0
    2708:	4f30      	ldr	r7, [pc, #192]	; (27cc <convertAnalogOutputs+0xc8>)
    270a:	2400      	movs	r4, #0
	uint8_t tempOutput = 0;
	uint8_t i =0;
	uint8_t tempOutputCount = 0;
	for(i=0;i<NO_OUTPUTS;i++)
	{
		tempOutput	=   inputOutputConnection(analogOutput[i]);
    270c:	4e30      	ldr	r6, [pc, #192]	; (27d0 <convertAnalogOutputs+0xcc>)
    270e:	e011      	b.n	2734 <convertAnalogOutputs+0x30>
    2710:	0039      	movs	r1, r7
				connecting[i] = true;
				tempOutputsConnected[i] = tempOutput;
			}
			else
			{
				if((connecting[i] == true) && (tempOutputsConnected[i] == tempOutput ))
    2712:	783a      	ldrb	r2, [r7, #0]
    2714:	2a01      	cmp	r2, #1
    2716:	d020      	beq.n	275a <convertAnalogOutputs+0x56>
						countConnecting[i] = 0;
					}
				}
				else
				{
					connecting[i] = false;
    2718:	2300      	movs	r3, #0
    271a:	700b      	strb	r3, [r1, #0]
					countConnecting[i] = 0;
    271c:	4a2d      	ldr	r2, [pc, #180]	; (27d4 <convertAnalogOutputs+0xd0>)
    271e:	54a3      	strb	r3, [r4, r2]
					tempOutputsConnected[i] = NOTHINGCONNECTED;
    2720:	4a2d      	ldr	r2, [pc, #180]	; (27d8 <convertAnalogOutputs+0xd4>)
    2722:	54a3      	strb	r3, [r4, r2]
				countDisconnection[i] = 0;
				outputsConnected[i]	= NOTHINGCONNECTED;
			}
		}
		
		previousOutputsConnected[i] = outputsConnected[i];
    2724:	4b2d      	ldr	r3, [pc, #180]	; (27dc <convertAnalogOutputs+0xd8>)
    2726:	5d1a      	ldrb	r2, [r3, r4]
    2728:	4b2d      	ldr	r3, [pc, #180]	; (27e0 <convertAnalogOutputs+0xdc>)
    272a:	54e2      	strb	r2, [r4, r3]
    272c:	3401      	adds	r4, #1
    272e:	3701      	adds	r7, #1
	for(i=0;i<NO_OUTPUTS;i++)
    2730:	2c04      	cmp	r4, #4
    2732:	d033      	beq.n	279c <convertAnalogOutputs+0x98>
		tempOutput	=   inputOutputConnection(analogOutput[i]);
    2734:	5d28      	ldrb	r0, [r5, r4]
    2736:	47b0      	blx	r6
    2738:	1e03      	subs	r3, r0, #0
		if(tempOutput != NOTHINGCONNECTED)
    273a:	d01f      	beq.n	277c <convertAnalogOutputs+0x78>
			countDisconnection[i] = 0;
    273c:	2200      	movs	r2, #0
    273e:	4929      	ldr	r1, [pc, #164]	; (27e4 <convertAnalogOutputs+0xe0>)
    2740:	5462      	strb	r2, [r4, r1]
			if((previousOutputsConnected[i] == NOTHINGCONNECTED) && (connecting[i] == false))
    2742:	4a27      	ldr	r2, [pc, #156]	; (27e0 <convertAnalogOutputs+0xdc>)
    2744:	5ca2      	ldrb	r2, [r4, r2]
    2746:	2a00      	cmp	r2, #0
    2748:	d1e2      	bne.n	2710 <convertAnalogOutputs+0xc>
    274a:	783a      	ldrb	r2, [r7, #0]
    274c:	2a00      	cmp	r2, #0
    274e:	d1df      	bne.n	2710 <convertAnalogOutputs+0xc>
				connecting[i] = true;
    2750:	2301      	movs	r3, #1
    2752:	703b      	strb	r3, [r7, #0]
				tempOutputsConnected[i] = tempOutput;
    2754:	4b20      	ldr	r3, [pc, #128]	; (27d8 <convertAnalogOutputs+0xd4>)
    2756:	54e0      	strb	r0, [r4, r3]
    2758:	e7e4      	b.n	2724 <convertAnalogOutputs+0x20>
				if((connecting[i] == true) && (tempOutputsConnected[i] == tempOutput ))
    275a:	4a1f      	ldr	r2, [pc, #124]	; (27d8 <convertAnalogOutputs+0xd4>)
    275c:	5ca2      	ldrb	r2, [r4, r2]
    275e:	429a      	cmp	r2, r3
    2760:	d1da      	bne.n	2718 <convertAnalogOutputs+0x14>
					countConnecting[i]++;
    2762:	4a1c      	ldr	r2, [pc, #112]	; (27d4 <convertAnalogOutputs+0xd0>)
    2764:	5ca3      	ldrb	r3, [r4, r2]
    2766:	3301      	adds	r3, #1
    2768:	b2db      	uxtb	r3, r3
    276a:	54a3      	strb	r3, [r4, r2]
					if(countConnecting[i] > COUNT_CONNECTING_THRESHOLD)
    276c:	2b05      	cmp	r3, #5
    276e:	d9d9      	bls.n	2724 <convertAnalogOutputs+0x20>
						outputsConnected[i] = tempOutput;
    2770:	4b1a      	ldr	r3, [pc, #104]	; (27dc <convertAnalogOutputs+0xd8>)
    2772:	5518      	strb	r0, [r3, r4]
						connecting[i] = false;
    2774:	2300      	movs	r3, #0
    2776:	703b      	strb	r3, [r7, #0]
						countConnecting[i] = 0;
    2778:	54a3      	strb	r3, [r4, r2]
    277a:	e7d3      	b.n	2724 <convertAnalogOutputs+0x20>
			countDisconnection[i]++;
    277c:	4b19      	ldr	r3, [pc, #100]	; (27e4 <convertAnalogOutputs+0xe0>)
    277e:	5ce3      	ldrb	r3, [r4, r3]
    2780:	3301      	adds	r3, #1
    2782:	b2db      	uxtb	r3, r3
			if(countDisconnection[i] > COUNT_CONNECTING_THRESHOLD)
    2784:	2b05      	cmp	r3, #5
    2786:	d802      	bhi.n	278e <convertAnalogOutputs+0x8a>
			countDisconnection[i]++;
    2788:	4a16      	ldr	r2, [pc, #88]	; (27e4 <convertAnalogOutputs+0xe0>)
    278a:	54a3      	strb	r3, [r4, r2]
    278c:	e7ca      	b.n	2724 <convertAnalogOutputs+0x20>
				countDisconnection[i] = 0;
    278e:	2300      	movs	r3, #0
    2790:	4a14      	ldr	r2, [pc, #80]	; (27e4 <convertAnalogOutputs+0xe0>)
    2792:	54a3      	strb	r3, [r4, r2]
				outputsConnected[i]	= NOTHINGCONNECTED;
    2794:	4a11      	ldr	r2, [pc, #68]	; (27dc <convertAnalogOutputs+0xd8>)
    2796:	18a2      	adds	r2, r4, r2
    2798:	7013      	strb	r3, [r2, #0]
    279a:	e7c3      	b.n	2724 <convertAnalogOutputs+0x20>
	}
	temp_test_outputs_connected_1[temp_count] = analogOutput[0] ;
    279c:	4b12      	ldr	r3, [pc, #72]	; (27e8 <convertAnalogOutputs+0xe4>)
    279e:	881b      	ldrh	r3, [r3, #0]
    27a0:	7829      	ldrb	r1, [r5, #0]
    27a2:	4a12      	ldr	r2, [pc, #72]	; (27ec <convertAnalogOutputs+0xe8>)
    27a4:	54d1      	strb	r1, [r2, r3]
	temp_test_outputs_connected_2[temp_count] = analogOutput[1] ;
    27a6:	7869      	ldrb	r1, [r5, #1]
    27a8:	4a11      	ldr	r2, [pc, #68]	; (27f0 <convertAnalogOutputs+0xec>)
    27aa:	54d1      	strb	r1, [r2, r3]
	temp_test_outputs_connected_3[temp_count] = analogOutput[2] ;
    27ac:	78a9      	ldrb	r1, [r5, #2]
    27ae:	4a11      	ldr	r2, [pc, #68]	; (27f4 <convertAnalogOutputs+0xf0>)
    27b0:	54d1      	strb	r1, [r2, r3]
	
	temp_count++;
    27b2:	3301      	adds	r3, #1
    27b4:	b29b      	uxth	r3, r3
	if(temp_count == 500)
    27b6:	22fa      	movs	r2, #250	; 0xfa
    27b8:	0052      	lsls	r2, r2, #1
    27ba:	4293      	cmp	r3, r2
    27bc:	d002      	beq.n	27c4 <convertAnalogOutputs+0xc0>
	temp_count++;
    27be:	4a0a      	ldr	r2, [pc, #40]	; (27e8 <convertAnalogOutputs+0xe4>)
    27c0:	8013      	strh	r3, [r2, #0]
	{
		temp_count = 0;
	}
	
}
    27c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp_count = 0;
    27c4:	2200      	movs	r2, #0
    27c6:	4b08      	ldr	r3, [pc, #32]	; (27e8 <convertAnalogOutputs+0xe4>)
    27c8:	801a      	strh	r2, [r3, #0]
}
    27ca:	e7fa      	b.n	27c2 <convertAnalogOutputs+0xbe>
    27cc:	200001a8 	.word	0x200001a8
    27d0:	000026b9 	.word	0x000026b9
    27d4:	200001b0 	.word	0x200001b0
    27d8:	200001d0 	.word	0x200001d0
    27dc:	20000f3c 	.word	0x20000f3c
    27e0:	200001c4 	.word	0x200001c4
    27e4:	200001b8 	.word	0x200001b8
    27e8:	200001d4 	.word	0x200001d4
    27ec:	200007b4 	.word	0x200007b4
    27f0:	200009a8 	.word	0x200009a8
    27f4:	20000b9c 	.word	0x20000b9c

000027f8 <convertAnalogInputs>:




void convertAnalogInputs(uint8_t* analogInputs)
{
    27f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27fa:	0007      	movs	r7, r0
    27fc:	4d31      	ldr	r5, [pc, #196]	; (28c4 <convertAnalogInputs+0xcc>)
    27fe:	2400      	movs	r4, #0
	uint8_t tempInput = 0;
	uint8_t i =0;
	uint8_t tempInputCount = 0;
	for(i=0;i<NO_SENSORS;i++)
	{
		tempInput			=		inputOutputConnection(analogInputs[i]);
    2800:	4e31      	ldr	r6, [pc, #196]	; (28c8 <convertAnalogInputs+0xd0>)
    2802:	e011      	b.n	2828 <convertAnalogInputs+0x30>
    2804:	0029      	movs	r1, r5
				connecting[i] = true;
				tempInputsConnected[i] = tempInput;
			}
			else 
			{
				if((connecting[i] == true) && (tempInputsConnected[i] == tempInput ))
    2806:	782a      	ldrb	r2, [r5, #0]
    2808:	2a01      	cmp	r2, #1
    280a:	d020      	beq.n	284e <convertAnalogInputs+0x56>
						countConnecting[i] = 0;
					}
				}
				else
				{
					connecting[i] = false;
    280c:	2300      	movs	r3, #0
    280e:	700b      	strb	r3, [r1, #0]
					countConnecting[i] = 0;
    2810:	4a2e      	ldr	r2, [pc, #184]	; (28cc <convertAnalogInputs+0xd4>)
    2812:	54a3      	strb	r3, [r4, r2]
					tempInputsConnected[i] = NOTHINGCONNECTED;
    2814:	4a2e      	ldr	r2, [pc, #184]	; (28d0 <convertAnalogInputs+0xd8>)
    2816:	54a3      	strb	r3, [r4, r2]
				countDisconnection[i]	= 0;
				inputsConnected[i]		= NOTHINGCONNECTED;
			}
		}
		
		previousInputsConnected[i] = inputsConnected[i];
    2818:	4b2e      	ldr	r3, [pc, #184]	; (28d4 <convertAnalogInputs+0xdc>)
    281a:	5d1a      	ldrb	r2, [r3, r4]
    281c:	4b2e      	ldr	r3, [pc, #184]	; (28d8 <convertAnalogInputs+0xe0>)
    281e:	54e2      	strb	r2, [r4, r3]
    2820:	3401      	adds	r4, #1
    2822:	3501      	adds	r5, #1
	for(i=0;i<NO_SENSORS;i++)
    2824:	2c03      	cmp	r4, #3
    2826:	d033      	beq.n	2890 <convertAnalogInputs+0x98>
		tempInput			=		inputOutputConnection(analogInputs[i]);
    2828:	5d38      	ldrb	r0, [r7, r4]
    282a:	47b0      	blx	r6
    282c:	1e03      	subs	r3, r0, #0
		if(tempInput != NOTHINGCONNECTED)
    282e:	d01f      	beq.n	2870 <convertAnalogInputs+0x78>
			countDisconnection[i] = 0;
    2830:	2200      	movs	r2, #0
    2832:	492a      	ldr	r1, [pc, #168]	; (28dc <convertAnalogInputs+0xe4>)
    2834:	5462      	strb	r2, [r4, r1]
			if((previousInputsConnected[i] == NOTHINGCONNECTED) && (connecting[i] == false))
    2836:	4a28      	ldr	r2, [pc, #160]	; (28d8 <convertAnalogInputs+0xe0>)
    2838:	5ca2      	ldrb	r2, [r4, r2]
    283a:	2a00      	cmp	r2, #0
    283c:	d1e2      	bne.n	2804 <convertAnalogInputs+0xc>
    283e:	782a      	ldrb	r2, [r5, #0]
    2840:	2a00      	cmp	r2, #0
    2842:	d1df      	bne.n	2804 <convertAnalogInputs+0xc>
				connecting[i] = true;
    2844:	2301      	movs	r3, #1
    2846:	702b      	strb	r3, [r5, #0]
				tempInputsConnected[i] = tempInput;
    2848:	4b21      	ldr	r3, [pc, #132]	; (28d0 <convertAnalogInputs+0xd8>)
    284a:	54e0      	strb	r0, [r4, r3]
    284c:	e7e4      	b.n	2818 <convertAnalogInputs+0x20>
				if((connecting[i] == true) && (tempInputsConnected[i] == tempInput ))
    284e:	4a20      	ldr	r2, [pc, #128]	; (28d0 <convertAnalogInputs+0xd8>)
    2850:	5ca2      	ldrb	r2, [r4, r2]
    2852:	429a      	cmp	r2, r3
    2854:	d1da      	bne.n	280c <convertAnalogInputs+0x14>
					countConnecting[i]++;
    2856:	4a1d      	ldr	r2, [pc, #116]	; (28cc <convertAnalogInputs+0xd4>)
    2858:	5ca3      	ldrb	r3, [r4, r2]
    285a:	3301      	adds	r3, #1
    285c:	b2db      	uxtb	r3, r3
    285e:	54a3      	strb	r3, [r4, r2]
					if(countConnecting[i] > COUNT_CONNECTING_THRESHOLD)
    2860:	2b05      	cmp	r3, #5
    2862:	d9d9      	bls.n	2818 <convertAnalogInputs+0x20>
						inputsConnected[i] = tempInput;
    2864:	4b1b      	ldr	r3, [pc, #108]	; (28d4 <convertAnalogInputs+0xdc>)
    2866:	5518      	strb	r0, [r3, r4]
						connecting[i] = false;
    2868:	2300      	movs	r3, #0
    286a:	702b      	strb	r3, [r5, #0]
						countConnecting[i] = 0;
    286c:	54a3      	strb	r3, [r4, r2]
    286e:	e7d3      	b.n	2818 <convertAnalogInputs+0x20>
			countDisconnection[i]++;
    2870:	4b1a      	ldr	r3, [pc, #104]	; (28dc <convertAnalogInputs+0xe4>)
    2872:	5ce3      	ldrb	r3, [r4, r3]
    2874:	3301      	adds	r3, #1
    2876:	b2db      	uxtb	r3, r3
			if(countDisconnection[i] > COUNT_CONNECTING_THRESHOLD)
    2878:	2b05      	cmp	r3, #5
    287a:	d802      	bhi.n	2882 <convertAnalogInputs+0x8a>
			countDisconnection[i]++;
    287c:	4a17      	ldr	r2, [pc, #92]	; (28dc <convertAnalogInputs+0xe4>)
    287e:	54a3      	strb	r3, [r4, r2]
    2880:	e7ca      	b.n	2818 <convertAnalogInputs+0x20>
				countDisconnection[i]	= 0;
    2882:	2300      	movs	r3, #0
    2884:	4a15      	ldr	r2, [pc, #84]	; (28dc <convertAnalogInputs+0xe4>)
    2886:	54a3      	strb	r3, [r4, r2]
				inputsConnected[i]		= NOTHINGCONNECTED;
    2888:	4a12      	ldr	r2, [pc, #72]	; (28d4 <convertAnalogInputs+0xdc>)
    288a:	18a2      	adds	r2, r4, r2
    288c:	7013      	strb	r3, [r2, #0]
    288e:	e7c3      	b.n	2818 <convertAnalogInputs+0x20>
	{
		NoInDevCon = tempInputCount;
	}
	*/
	
	temp_test_inputs_connected_1[temp_count] = inputsConnected[0] ;
    2890:	4b13      	ldr	r3, [pc, #76]	; (28e0 <convertAnalogInputs+0xe8>)
    2892:	881b      	ldrh	r3, [r3, #0]
    2894:	4a0f      	ldr	r2, [pc, #60]	; (28d4 <convertAnalogInputs+0xdc>)
    2896:	7810      	ldrb	r0, [r2, #0]
    2898:	4912      	ldr	r1, [pc, #72]	; (28e4 <convertAnalogInputs+0xec>)
    289a:	54c8      	strb	r0, [r1, r3]
	temp_test_inputs_connected_2[temp_count] = inputsConnected[1] ;
    289c:	7850      	ldrb	r0, [r2, #1]
    289e:	4912      	ldr	r1, [pc, #72]	; (28e8 <convertAnalogInputs+0xf0>)
    28a0:	54c8      	strb	r0, [r1, r3]
	temp_test_inputs_connected_3[temp_count] = inputsConnected[2] ;
    28a2:	7891      	ldrb	r1, [r2, #2]
    28a4:	4a11      	ldr	r2, [pc, #68]	; (28ec <convertAnalogInputs+0xf4>)
    28a6:	54d1      	strb	r1, [r2, r3]
	
	temp_count++;
    28a8:	3301      	adds	r3, #1
    28aa:	b29b      	uxth	r3, r3
	if(temp_count == 500)
    28ac:	22fa      	movs	r2, #250	; 0xfa
    28ae:	0052      	lsls	r2, r2, #1
    28b0:	4293      	cmp	r3, r2
    28b2:	d002      	beq.n	28ba <convertAnalogInputs+0xc2>
	temp_count++;
    28b4:	4a0a      	ldr	r2, [pc, #40]	; (28e0 <convertAnalogInputs+0xe8>)
    28b6:	8013      	strh	r3, [r2, #0]
	{
		temp_count = 0;
	}
}
    28b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp_count = 0;
    28ba:	2200      	movs	r2, #0
    28bc:	4b08      	ldr	r3, [pc, #32]	; (28e0 <convertAnalogInputs+0xe8>)
    28be:	801a      	strh	r2, [r3, #0]
}
    28c0:	e7fa      	b.n	28b8 <convertAnalogInputs+0xc0>
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	200001ac 	.word	0x200001ac
    28c8:	000026b9 	.word	0x000026b9
    28cc:	200001b4 	.word	0x200001b4
    28d0:	200001cc 	.word	0x200001cc
    28d4:	20000db4 	.word	0x20000db4
    28d8:	200001c0 	.word	0x200001c0
    28dc:	200001bc 	.word	0x200001bc
    28e0:	200001d6 	.word	0x200001d6
    28e4:	200001d8 	.word	0x200001d8
    28e8:	200003cc 	.word	0x200003cc
    28ec:	200005c0 	.word	0x200005c0

000028f0 <checkOutputs>:



void checkOutputs()
{
    28f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28f2:	2400      	movs	r4, #0
	uint8_t i =0;
	static uint8_t analogOutput[4];
	for(i=0;i<4;i++)
	{
		analogOutput[i] = adc_start_read_result(outputDetectAnalogChannles[i]);
    28f4:	4f06      	ldr	r7, [pc, #24]	; (2910 <checkOutputs+0x20>)
    28f6:	4e07      	ldr	r6, [pc, #28]	; (2914 <checkOutputs+0x24>)
    28f8:	4d07      	ldr	r5, [pc, #28]	; (2918 <checkOutputs+0x28>)
    28fa:	5de0      	ldrb	r0, [r4, r7]
    28fc:	47b0      	blx	r6
    28fe:	5560      	strb	r0, [r4, r5]
    2900:	3401      	adds	r4, #1
	for(i=0;i<4;i++)
    2902:	2c04      	cmp	r4, #4
    2904:	d1f9      	bne.n	28fa <checkOutputs+0xa>
	}
	convertAnalogOutputs(analogOutput);
    2906:	4804      	ldr	r0, [pc, #16]	; (2918 <checkOutputs+0x28>)
    2908:	4b04      	ldr	r3, [pc, #16]	; (291c <checkOutputs+0x2c>)
    290a:	4798      	blx	r3
}
    290c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    290e:	46c0      	nop			; (mov r8, r8)
    2910:	00004e68 	.word	0x00004e68
    2914:	00002365 	.word	0x00002365
    2918:	200001a4 	.word	0x200001a4
    291c:	00002705 	.word	0x00002705

00002920 <checkInputs>:


void checkInputs()
{
    2920:	b570      	push	{r4, r5, r6, lr}
	uint8_t i =0;
	static uint8_t analogInput[4];
	for(i=0;i<3;i++)
	{
		analogInput[i]			= adc_start_read_result(sensorDetectAnalogChannles[i]);
    2922:	200e      	movs	r0, #14
    2924:	4d06      	ldr	r5, [pc, #24]	; (2940 <checkInputs+0x20>)
    2926:	47a8      	blx	r5
    2928:	4c06      	ldr	r4, [pc, #24]	; (2944 <checkInputs+0x24>)
    292a:	7020      	strb	r0, [r4, #0]
    292c:	200d      	movs	r0, #13
    292e:	47a8      	blx	r5
    2930:	7060      	strb	r0, [r4, #1]
    2932:	2012      	movs	r0, #18
    2934:	47a8      	blx	r5
    2936:	70a0      	strb	r0, [r4, #2]
	}
	convertAnalogInputs(analogInput);
    2938:	0020      	movs	r0, r4
    293a:	4b03      	ldr	r3, [pc, #12]	; (2948 <checkInputs+0x28>)
    293c:	4798      	blx	r3
}
    293e:	bd70      	pop	{r4, r5, r6, pc}
    2940:	00002365 	.word	0x00002365
    2944:	200001a0 	.word	0x200001a0
    2948:	000027f9 	.word	0x000027f9

0000294c <loadIdentifier>:
	uint32_t temp				= 0;
	uint8_t  i					= 0;
	
	for(i=0;i<NO_OUTPUTS;i++)
	{
		temp		         =  outputsConnected[i];
    294c:	4a12      	ldr	r2, [pc, #72]	; (2998 <loadIdentifier+0x4c>)
    294e:	7813      	ldrb	r3, [r2, #0]
		current_identifier  |=  temp << (28 - 4*i);
    2950:	071b      	lsls	r3, r3, #28
		temp		         =  outputsConnected[i];
    2952:	7851      	ldrb	r1, [r2, #1]
		current_identifier  |=  temp << (28 - 4*i);
    2954:	0609      	lsls	r1, r1, #24
    2956:	430b      	orrs	r3, r1
	}
	
	for(i=0;i<NO_SENSORS;i++)
	{
		temp		  =  inputsConnected[i];
    2958:	4910      	ldr	r1, [pc, #64]	; (299c <loadIdentifier+0x50>)
    295a:	7808      	ldrb	r0, [r1, #0]
		current_identifier  |=  temp << (11-(5*i));
    295c:	02c0      	lsls	r0, r0, #11
    295e:	4303      	orrs	r3, r0
		temp		  =  inputsConnected[i];
    2960:	7848      	ldrb	r0, [r1, #1]
		current_identifier  |=  temp << (11-(5*i));
    2962:	0180      	lsls	r0, r0, #6
    2964:	4303      	orrs	r3, r0
		temp		         =  outputsConnected[i];
    2966:	7890      	ldrb	r0, [r2, #2]
		current_identifier  |=  temp << (28 - 4*i);
    2968:	0500      	lsls	r0, r0, #20
    296a:	4303      	orrs	r3, r0
		temp		  =  inputsConnected[i];
    296c:	7889      	ldrb	r1, [r1, #2]
		current_identifier  |=  temp << (11-(5*i));
    296e:	0049      	lsls	r1, r1, #1
    2970:	430b      	orrs	r3, r1
		temp		         =  outputsConnected[i];
    2972:	78d2      	ldrb	r2, [r2, #3]
		current_identifier  |=  temp << (28 - 4*i);
    2974:	0412      	lsls	r2, r2, #16
		current_identifier  |=  temp << (11-(5*i));
    2976:	4313      	orrs	r3, r2
	}

	if(current_identifier != previous_identifier)
    2978:	4a09      	ldr	r2, [pc, #36]	; (29a0 <loadIdentifier+0x54>)
    297a:	6812      	ldr	r2, [r2, #0]
    297c:	4293      	cmp	r3, r2
    297e:	d009      	beq.n	2994 <loadIdentifier+0x48>
	{
		for(i=0;i<4;i++)
		{
			sensorOutputs[i] = (current_identifier >> 8* (3-i)) & 0x000000FF ;
    2980:	4a08      	ldr	r2, [pc, #32]	; (29a4 <loadIdentifier+0x58>)
    2982:	0e19      	lsrs	r1, r3, #24
    2984:	7011      	strb	r1, [r2, #0]
    2986:	0c19      	lsrs	r1, r3, #16
    2988:	7051      	strb	r1, [r2, #1]
    298a:	0a19      	lsrs	r1, r3, #8
    298c:	7091      	strb	r1, [r2, #2]
    298e:	70d3      	strb	r3, [r2, #3]
		}
		previous_identifier = current_identifier;
    2990:	4a03      	ldr	r2, [pc, #12]	; (29a0 <loadIdentifier+0x54>)
    2992:	6013      	str	r3, [r2, #0]
	}
}
    2994:	4770      	bx	lr
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	20000f3c 	.word	0x20000f3c
    299c:	20000db4 	.word	0x20000db4
    29a0:	200001c8 	.word	0x200001c8
    29a4:	20000f40 	.word	0x20000f40

000029a8 <checkOutputsInputs>:

void checkOutputsInputs()
{
    29a8:	b510      	push	{r4, lr}
	checkOutputs();
    29aa:	4b03      	ldr	r3, [pc, #12]	; (29b8 <checkOutputsInputs+0x10>)
    29ac:	4798      	blx	r3
	checkInputs();
    29ae:	4b03      	ldr	r3, [pc, #12]	; (29bc <checkOutputsInputs+0x14>)
    29b0:	4798      	blx	r3
	loadIdentifier(); //Set the identifier which will be used in the notifications by the Bluetooth
    29b2:	4b03      	ldr	r3, [pc, #12]	; (29c0 <checkOutputsInputs+0x18>)
    29b4:	4798      	blx	r3
}
    29b6:	bd10      	pop	{r4, pc}
    29b8:	000028f1 	.word	0x000028f1
    29bc:	00002921 	.word	0x00002921
    29c0:	0000294d 	.word	0x0000294d

000029c4 <configureInputOutputDetection>:


void configureInputOutputDetection()
{
    29c4:	b510      	push	{r4, lr}
	configureADC();
    29c6:	4b01      	ldr	r3, [pc, #4]	; (29cc <configureInputOutputDetection+0x8>)
    29c8:	4798      	blx	r3
    29ca:	bd10      	pop	{r4, pc}
    29cc:	000022e1 	.word	0x000022e1

000029d0 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    29d0:	4770      	bx	lr
	...

000029d4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    29d4:	4b0c      	ldr	r3, [pc, #48]	; (2a08 <cpu_irq_enter_critical+0x34>)
    29d6:	681b      	ldr	r3, [r3, #0]
    29d8:	2b00      	cmp	r3, #0
    29da:	d106      	bne.n	29ea <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    29dc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    29e0:	2b00      	cmp	r3, #0
    29e2:	d007      	beq.n	29f4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    29e4:	2200      	movs	r2, #0
    29e6:	4b09      	ldr	r3, [pc, #36]	; (2a0c <cpu_irq_enter_critical+0x38>)
    29e8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    29ea:	4a07      	ldr	r2, [pc, #28]	; (2a08 <cpu_irq_enter_critical+0x34>)
    29ec:	6813      	ldr	r3, [r2, #0]
    29ee:	3301      	adds	r3, #1
    29f0:	6013      	str	r3, [r2, #0]
}
    29f2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    29f4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    29f6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    29fa:	2200      	movs	r2, #0
    29fc:	4b04      	ldr	r3, [pc, #16]	; (2a10 <cpu_irq_enter_critical+0x3c>)
    29fe:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2a00:	3201      	adds	r2, #1
    2a02:	4b02      	ldr	r3, [pc, #8]	; (2a0c <cpu_irq_enter_critical+0x38>)
    2a04:	701a      	strb	r2, [r3, #0]
    2a06:	e7f0      	b.n	29ea <cpu_irq_enter_critical+0x16>
    2a08:	20000d90 	.word	0x20000d90
    2a0c:	20000d94 	.word	0x20000d94
    2a10:	20000040 	.word	0x20000040

00002a14 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2a14:	4b08      	ldr	r3, [pc, #32]	; (2a38 <cpu_irq_leave_critical+0x24>)
    2a16:	681a      	ldr	r2, [r3, #0]
    2a18:	3a01      	subs	r2, #1
    2a1a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d109      	bne.n	2a36 <cpu_irq_leave_critical+0x22>
    2a22:	4b06      	ldr	r3, [pc, #24]	; (2a3c <cpu_irq_leave_critical+0x28>)
    2a24:	781b      	ldrb	r3, [r3, #0]
    2a26:	2b00      	cmp	r3, #0
    2a28:	d005      	beq.n	2a36 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2a2a:	2201      	movs	r2, #1
    2a2c:	4b04      	ldr	r3, [pc, #16]	; (2a40 <cpu_irq_leave_critical+0x2c>)
    2a2e:	701a      	strb	r2, [r3, #0]
    2a30:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2a34:	b662      	cpsie	i
	}
}
    2a36:	4770      	bx	lr
    2a38:	20000d90 	.word	0x20000d90
    2a3c:	20000d94 	.word	0x20000d94
    2a40:	20000040 	.word	0x20000040

00002a44 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2a44:	b510      	push	{r4, lr}
	switch (clock_source) {
    2a46:	2808      	cmp	r0, #8
    2a48:	d803      	bhi.n	2a52 <system_clock_source_get_hz+0xe>
    2a4a:	0080      	lsls	r0, r0, #2
    2a4c:	4b1b      	ldr	r3, [pc, #108]	; (2abc <system_clock_source_get_hz+0x78>)
    2a4e:	581b      	ldr	r3, [r3, r0]
    2a50:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2a52:	2000      	movs	r0, #0
    2a54:	e030      	b.n	2ab8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2a56:	4b1a      	ldr	r3, [pc, #104]	; (2ac0 <system_clock_source_get_hz+0x7c>)
    2a58:	6918      	ldr	r0, [r3, #16]
    2a5a:	e02d      	b.n	2ab8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2a5c:	4b19      	ldr	r3, [pc, #100]	; (2ac4 <system_clock_source_get_hz+0x80>)
    2a5e:	6a1b      	ldr	r3, [r3, #32]
    2a60:	059b      	lsls	r3, r3, #22
    2a62:	0f9b      	lsrs	r3, r3, #30
    2a64:	4818      	ldr	r0, [pc, #96]	; (2ac8 <system_clock_source_get_hz+0x84>)
    2a66:	40d8      	lsrs	r0, r3
    2a68:	e026      	b.n	2ab8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2a6a:	4b15      	ldr	r3, [pc, #84]	; (2ac0 <system_clock_source_get_hz+0x7c>)
    2a6c:	6958      	ldr	r0, [r3, #20]
    2a6e:	e023      	b.n	2ab8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2a70:	4b13      	ldr	r3, [pc, #76]	; (2ac0 <system_clock_source_get_hz+0x7c>)
    2a72:	681b      	ldr	r3, [r3, #0]
			return 0;
    2a74:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2a76:	079b      	lsls	r3, r3, #30
    2a78:	d51e      	bpl.n	2ab8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2a7a:	4912      	ldr	r1, [pc, #72]	; (2ac4 <system_clock_source_get_hz+0x80>)
    2a7c:	2210      	movs	r2, #16
    2a7e:	68cb      	ldr	r3, [r1, #12]
    2a80:	421a      	tst	r2, r3
    2a82:	d0fc      	beq.n	2a7e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2a84:	4b0e      	ldr	r3, [pc, #56]	; (2ac0 <system_clock_source_get_hz+0x7c>)
    2a86:	681b      	ldr	r3, [r3, #0]
    2a88:	075b      	lsls	r3, r3, #29
    2a8a:	d401      	bmi.n	2a90 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2a8c:	480f      	ldr	r0, [pc, #60]	; (2acc <system_clock_source_get_hz+0x88>)
    2a8e:	e013      	b.n	2ab8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2a90:	2000      	movs	r0, #0
    2a92:	4b0f      	ldr	r3, [pc, #60]	; (2ad0 <system_clock_source_get_hz+0x8c>)
    2a94:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2a96:	4b0a      	ldr	r3, [pc, #40]	; (2ac0 <system_clock_source_get_hz+0x7c>)
    2a98:	689b      	ldr	r3, [r3, #8]
    2a9a:	041b      	lsls	r3, r3, #16
    2a9c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2a9e:	4358      	muls	r0, r3
    2aa0:	e00a      	b.n	2ab8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2aa2:	2350      	movs	r3, #80	; 0x50
    2aa4:	4a07      	ldr	r2, [pc, #28]	; (2ac4 <system_clock_source_get_hz+0x80>)
    2aa6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2aa8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2aaa:	075b      	lsls	r3, r3, #29
    2aac:	d504      	bpl.n	2ab8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2aae:	4b04      	ldr	r3, [pc, #16]	; (2ac0 <system_clock_source_get_hz+0x7c>)
    2ab0:	68d8      	ldr	r0, [r3, #12]
    2ab2:	e001      	b.n	2ab8 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2ab4:	2080      	movs	r0, #128	; 0x80
    2ab6:	0200      	lsls	r0, r0, #8
	}
}
    2ab8:	bd10      	pop	{r4, pc}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	00004e6c 	.word	0x00004e6c
    2ac0:	20000d98 	.word	0x20000d98
    2ac4:	40000800 	.word	0x40000800
    2ac8:	007a1200 	.word	0x007a1200
    2acc:	02dc6c00 	.word	0x02dc6c00
    2ad0:	00002ea5 	.word	0x00002ea5

00002ad4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2ad4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2ad6:	490c      	ldr	r1, [pc, #48]	; (2b08 <system_clock_source_osc8m_set_config+0x34>)
    2ad8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2ada:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2adc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2ade:	7840      	ldrb	r0, [r0, #1]
    2ae0:	2201      	movs	r2, #1
    2ae2:	4010      	ands	r0, r2
    2ae4:	0180      	lsls	r0, r0, #6
    2ae6:	2640      	movs	r6, #64	; 0x40
    2ae8:	43b3      	bics	r3, r6
    2aea:	4303      	orrs	r3, r0
    2aec:	402a      	ands	r2, r5
    2aee:	01d2      	lsls	r2, r2, #7
    2af0:	2080      	movs	r0, #128	; 0x80
    2af2:	4383      	bics	r3, r0
    2af4:	4313      	orrs	r3, r2
    2af6:	2203      	movs	r2, #3
    2af8:	4022      	ands	r2, r4
    2afa:	0212      	lsls	r2, r2, #8
    2afc:	4803      	ldr	r0, [pc, #12]	; (2b0c <system_clock_source_osc8m_set_config+0x38>)
    2afe:	4003      	ands	r3, r0
    2b00:	4313      	orrs	r3, r2
    2b02:	620b      	str	r3, [r1, #32]
}
    2b04:	bd70      	pop	{r4, r5, r6, pc}
    2b06:	46c0      	nop			; (mov r8, r8)
    2b08:	40000800 	.word	0x40000800
    2b0c:	fffffcff 	.word	0xfffffcff

00002b10 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2b10:	2808      	cmp	r0, #8
    2b12:	d803      	bhi.n	2b1c <system_clock_source_enable+0xc>
    2b14:	0080      	lsls	r0, r0, #2
    2b16:	4b25      	ldr	r3, [pc, #148]	; (2bac <system_clock_source_enable+0x9c>)
    2b18:	581b      	ldr	r3, [r3, r0]
    2b1a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2b1c:	2017      	movs	r0, #23
    2b1e:	e044      	b.n	2baa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2b20:	4a23      	ldr	r2, [pc, #140]	; (2bb0 <system_clock_source_enable+0xa0>)
    2b22:	6a13      	ldr	r3, [r2, #32]
    2b24:	2102      	movs	r1, #2
    2b26:	430b      	orrs	r3, r1
    2b28:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2b2a:	2000      	movs	r0, #0
    2b2c:	e03d      	b.n	2baa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2b2e:	4a20      	ldr	r2, [pc, #128]	; (2bb0 <system_clock_source_enable+0xa0>)
    2b30:	6993      	ldr	r3, [r2, #24]
    2b32:	2102      	movs	r1, #2
    2b34:	430b      	orrs	r3, r1
    2b36:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2b38:	2000      	movs	r0, #0
		break;
    2b3a:	e036      	b.n	2baa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2b3c:	4a1c      	ldr	r2, [pc, #112]	; (2bb0 <system_clock_source_enable+0xa0>)
    2b3e:	8a13      	ldrh	r3, [r2, #16]
    2b40:	2102      	movs	r1, #2
    2b42:	430b      	orrs	r3, r1
    2b44:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2b46:	2000      	movs	r0, #0
		break;
    2b48:	e02f      	b.n	2baa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2b4a:	4a19      	ldr	r2, [pc, #100]	; (2bb0 <system_clock_source_enable+0xa0>)
    2b4c:	8a93      	ldrh	r3, [r2, #20]
    2b4e:	2102      	movs	r1, #2
    2b50:	430b      	orrs	r3, r1
    2b52:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2b54:	2000      	movs	r0, #0
		break;
    2b56:	e028      	b.n	2baa <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2b58:	4916      	ldr	r1, [pc, #88]	; (2bb4 <system_clock_source_enable+0xa4>)
    2b5a:	680b      	ldr	r3, [r1, #0]
    2b5c:	2202      	movs	r2, #2
    2b5e:	4313      	orrs	r3, r2
    2b60:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2b62:	4b13      	ldr	r3, [pc, #76]	; (2bb0 <system_clock_source_enable+0xa0>)
    2b64:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b66:	0019      	movs	r1, r3
    2b68:	320e      	adds	r2, #14
    2b6a:	68cb      	ldr	r3, [r1, #12]
    2b6c:	421a      	tst	r2, r3
    2b6e:	d0fc      	beq.n	2b6a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2b70:	4a10      	ldr	r2, [pc, #64]	; (2bb4 <system_clock_source_enable+0xa4>)
    2b72:	6891      	ldr	r1, [r2, #8]
    2b74:	4b0e      	ldr	r3, [pc, #56]	; (2bb0 <system_clock_source_enable+0xa0>)
    2b76:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2b78:	6852      	ldr	r2, [r2, #4]
    2b7a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2b7c:	2200      	movs	r2, #0
    2b7e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b80:	0019      	movs	r1, r3
    2b82:	3210      	adds	r2, #16
    2b84:	68cb      	ldr	r3, [r1, #12]
    2b86:	421a      	tst	r2, r3
    2b88:	d0fc      	beq.n	2b84 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2b8a:	4b0a      	ldr	r3, [pc, #40]	; (2bb4 <system_clock_source_enable+0xa4>)
    2b8c:	681b      	ldr	r3, [r3, #0]
    2b8e:	b29b      	uxth	r3, r3
    2b90:	4a07      	ldr	r2, [pc, #28]	; (2bb0 <system_clock_source_enable+0xa0>)
    2b92:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2b94:	2000      	movs	r0, #0
    2b96:	e008      	b.n	2baa <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2b98:	4905      	ldr	r1, [pc, #20]	; (2bb0 <system_clock_source_enable+0xa0>)
    2b9a:	2244      	movs	r2, #68	; 0x44
    2b9c:	5c8b      	ldrb	r3, [r1, r2]
    2b9e:	2002      	movs	r0, #2
    2ba0:	4303      	orrs	r3, r0
    2ba2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2ba4:	2000      	movs	r0, #0
		break;
    2ba6:	e000      	b.n	2baa <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2ba8:	2000      	movs	r0, #0
}
    2baa:	4770      	bx	lr
    2bac:	00004e90 	.word	0x00004e90
    2bb0:	40000800 	.word	0x40000800
    2bb4:	20000d98 	.word	0x20000d98

00002bb8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2bb8:	b530      	push	{r4, r5, lr}
    2bba:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2bbc:	22c2      	movs	r2, #194	; 0xc2
    2bbe:	00d2      	lsls	r2, r2, #3
    2bc0:	4b1a      	ldr	r3, [pc, #104]	; (2c2c <system_clock_init+0x74>)
    2bc2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2bc4:	4a1a      	ldr	r2, [pc, #104]	; (2c30 <system_clock_init+0x78>)
    2bc6:	6853      	ldr	r3, [r2, #4]
    2bc8:	211e      	movs	r1, #30
    2bca:	438b      	bics	r3, r1
    2bcc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2bce:	2301      	movs	r3, #1
    2bd0:	466a      	mov	r2, sp
    2bd2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bd4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2bd6:	4d17      	ldr	r5, [pc, #92]	; (2c34 <system_clock_init+0x7c>)
    2bd8:	b2e0      	uxtb	r0, r4
    2bda:	4669      	mov	r1, sp
    2bdc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bde:	3401      	adds	r4, #1
    2be0:	2c25      	cmp	r4, #37	; 0x25
    2be2:	d1f9      	bne.n	2bd8 <system_clock_init+0x20>
	config->run_in_standby  = false;
    2be4:	a803      	add	r0, sp, #12
    2be6:	2400      	movs	r4, #0
    2be8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2bea:	2501      	movs	r5, #1
    2bec:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2bee:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2bf0:	4b11      	ldr	r3, [pc, #68]	; (2c38 <system_clock_init+0x80>)
    2bf2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2bf4:	2006      	movs	r0, #6
    2bf6:	4b11      	ldr	r3, [pc, #68]	; (2c3c <system_clock_init+0x84>)
    2bf8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2bfa:	4b11      	ldr	r3, [pc, #68]	; (2c40 <system_clock_init+0x88>)
    2bfc:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    2bfe:	4b11      	ldr	r3, [pc, #68]	; (2c44 <system_clock_init+0x8c>)
    2c00:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2c02:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2c04:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2c06:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2c08:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    2c0a:	466b      	mov	r3, sp
    2c0c:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2c0e:	2306      	movs	r3, #6
    2c10:	466a      	mov	r2, sp
    2c12:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    2c14:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2c16:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2c18:	4669      	mov	r1, sp
    2c1a:	2000      	movs	r0, #0
    2c1c:	4b0a      	ldr	r3, [pc, #40]	; (2c48 <system_clock_init+0x90>)
    2c1e:	4798      	blx	r3
    2c20:	2000      	movs	r0, #0
    2c22:	4b0a      	ldr	r3, [pc, #40]	; (2c4c <system_clock_init+0x94>)
    2c24:	4798      	blx	r3
#endif
}
    2c26:	b005      	add	sp, #20
    2c28:	bd30      	pop	{r4, r5, pc}
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	40000800 	.word	0x40000800
    2c30:	41004000 	.word	0x41004000
    2c34:	00002e89 	.word	0x00002e89
    2c38:	00002ad5 	.word	0x00002ad5
    2c3c:	00002b11 	.word	0x00002b11
    2c40:	00002c51 	.word	0x00002c51
    2c44:	40000400 	.word	0x40000400
    2c48:	00002c75 	.word	0x00002c75
    2c4c:	00002d2d 	.word	0x00002d2d

00002c50 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2c50:	4a06      	ldr	r2, [pc, #24]	; (2c6c <system_gclk_init+0x1c>)
    2c52:	6993      	ldr	r3, [r2, #24]
    2c54:	2108      	movs	r1, #8
    2c56:	430b      	orrs	r3, r1
    2c58:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2c5a:	2201      	movs	r2, #1
    2c5c:	4b04      	ldr	r3, [pc, #16]	; (2c70 <system_gclk_init+0x20>)
    2c5e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2c60:	0019      	movs	r1, r3
    2c62:	780b      	ldrb	r3, [r1, #0]
    2c64:	4213      	tst	r3, r2
    2c66:	d1fc      	bne.n	2c62 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2c68:	4770      	bx	lr
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	40000400 	.word	0x40000400
    2c70:	40000c00 	.word	0x40000c00

00002c74 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2c74:	b570      	push	{r4, r5, r6, lr}
    2c76:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2c78:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2c7a:	780d      	ldrb	r5, [r1, #0]
    2c7c:	022d      	lsls	r5, r5, #8
    2c7e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2c80:	784b      	ldrb	r3, [r1, #1]
    2c82:	2b00      	cmp	r3, #0
    2c84:	d002      	beq.n	2c8c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2c86:	2380      	movs	r3, #128	; 0x80
    2c88:	02db      	lsls	r3, r3, #11
    2c8a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2c8c:	7a4b      	ldrb	r3, [r1, #9]
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d002      	beq.n	2c98 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2c92:	2380      	movs	r3, #128	; 0x80
    2c94:	031b      	lsls	r3, r3, #12
    2c96:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2c98:	6848      	ldr	r0, [r1, #4]
    2c9a:	2801      	cmp	r0, #1
    2c9c:	d910      	bls.n	2cc0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2c9e:	1e43      	subs	r3, r0, #1
    2ca0:	4218      	tst	r0, r3
    2ca2:	d134      	bne.n	2d0e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2ca4:	2802      	cmp	r0, #2
    2ca6:	d930      	bls.n	2d0a <system_gclk_gen_set_config+0x96>
    2ca8:	2302      	movs	r3, #2
    2caa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2cac:	3201      	adds	r2, #1
						mask <<= 1) {
    2cae:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2cb0:	4298      	cmp	r0, r3
    2cb2:	d8fb      	bhi.n	2cac <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2cb4:	0212      	lsls	r2, r2, #8
    2cb6:	4332      	orrs	r2, r6
    2cb8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2cba:	2380      	movs	r3, #128	; 0x80
    2cbc:	035b      	lsls	r3, r3, #13
    2cbe:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2cc0:	7a0b      	ldrb	r3, [r1, #8]
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d002      	beq.n	2ccc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2cc6:	2380      	movs	r3, #128	; 0x80
    2cc8:	039b      	lsls	r3, r3, #14
    2cca:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ccc:	4a13      	ldr	r2, [pc, #76]	; (2d1c <system_gclk_gen_set_config+0xa8>)
    2cce:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2cd0:	b25b      	sxtb	r3, r3
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	dbfb      	blt.n	2cce <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2cd6:	4b12      	ldr	r3, [pc, #72]	; (2d20 <system_gclk_gen_set_config+0xac>)
    2cd8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2cda:	4b12      	ldr	r3, [pc, #72]	; (2d24 <system_gclk_gen_set_config+0xb0>)
    2cdc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2cde:	4a0f      	ldr	r2, [pc, #60]	; (2d1c <system_gclk_gen_set_config+0xa8>)
    2ce0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2ce2:	b25b      	sxtb	r3, r3
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	dbfb      	blt.n	2ce0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2ce8:	4b0c      	ldr	r3, [pc, #48]	; (2d1c <system_gclk_gen_set_config+0xa8>)
    2cea:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2cec:	001a      	movs	r2, r3
    2cee:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2cf0:	b25b      	sxtb	r3, r3
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	dbfb      	blt.n	2cee <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2cf6:	4a09      	ldr	r2, [pc, #36]	; (2d1c <system_gclk_gen_set_config+0xa8>)
    2cf8:	6853      	ldr	r3, [r2, #4]
    2cfa:	2180      	movs	r1, #128	; 0x80
    2cfc:	0249      	lsls	r1, r1, #9
    2cfe:	400b      	ands	r3, r1
    2d00:	431d      	orrs	r5, r3
    2d02:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2d04:	4b08      	ldr	r3, [pc, #32]	; (2d28 <system_gclk_gen_set_config+0xb4>)
    2d06:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2d08:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2d0a:	2200      	movs	r2, #0
    2d0c:	e7d2      	b.n	2cb4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2d0e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2d10:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2d12:	2380      	movs	r3, #128	; 0x80
    2d14:	029b      	lsls	r3, r3, #10
    2d16:	431d      	orrs	r5, r3
    2d18:	e7d2      	b.n	2cc0 <system_gclk_gen_set_config+0x4c>
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	40000c00 	.word	0x40000c00
    2d20:	000029d5 	.word	0x000029d5
    2d24:	40000c08 	.word	0x40000c08
    2d28:	00002a15 	.word	0x00002a15

00002d2c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2d2c:	b510      	push	{r4, lr}
    2d2e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d30:	4a0b      	ldr	r2, [pc, #44]	; (2d60 <system_gclk_gen_enable+0x34>)
    2d32:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2d34:	b25b      	sxtb	r3, r3
    2d36:	2b00      	cmp	r3, #0
    2d38:	dbfb      	blt.n	2d32 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2d3a:	4b0a      	ldr	r3, [pc, #40]	; (2d64 <system_gclk_gen_enable+0x38>)
    2d3c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2d3e:	4b0a      	ldr	r3, [pc, #40]	; (2d68 <system_gclk_gen_enable+0x3c>)
    2d40:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d42:	4a07      	ldr	r2, [pc, #28]	; (2d60 <system_gclk_gen_enable+0x34>)
    2d44:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2d46:	b25b      	sxtb	r3, r3
    2d48:	2b00      	cmp	r3, #0
    2d4a:	dbfb      	blt.n	2d44 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2d4c:	4a04      	ldr	r2, [pc, #16]	; (2d60 <system_gclk_gen_enable+0x34>)
    2d4e:	6851      	ldr	r1, [r2, #4]
    2d50:	2380      	movs	r3, #128	; 0x80
    2d52:	025b      	lsls	r3, r3, #9
    2d54:	430b      	orrs	r3, r1
    2d56:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2d58:	4b04      	ldr	r3, [pc, #16]	; (2d6c <system_gclk_gen_enable+0x40>)
    2d5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2d5c:	bd10      	pop	{r4, pc}
    2d5e:	46c0      	nop			; (mov r8, r8)
    2d60:	40000c00 	.word	0x40000c00
    2d64:	000029d5 	.word	0x000029d5
    2d68:	40000c04 	.word	0x40000c04
    2d6c:	00002a15 	.word	0x00002a15

00002d70 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2d70:	b570      	push	{r4, r5, r6, lr}
    2d72:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d74:	4a1a      	ldr	r2, [pc, #104]	; (2de0 <system_gclk_gen_get_hz+0x70>)
    2d76:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2d78:	b25b      	sxtb	r3, r3
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	dbfb      	blt.n	2d76 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2d7e:	4b19      	ldr	r3, [pc, #100]	; (2de4 <system_gclk_gen_get_hz+0x74>)
    2d80:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2d82:	4b19      	ldr	r3, [pc, #100]	; (2de8 <system_gclk_gen_get_hz+0x78>)
    2d84:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d86:	4a16      	ldr	r2, [pc, #88]	; (2de0 <system_gclk_gen_get_hz+0x70>)
    2d88:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2d8a:	b25b      	sxtb	r3, r3
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	dbfb      	blt.n	2d88 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2d90:	4e13      	ldr	r6, [pc, #76]	; (2de0 <system_gclk_gen_get_hz+0x70>)
    2d92:	6870      	ldr	r0, [r6, #4]
    2d94:	04c0      	lsls	r0, r0, #19
    2d96:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2d98:	4b14      	ldr	r3, [pc, #80]	; (2dec <system_gclk_gen_get_hz+0x7c>)
    2d9a:	4798      	blx	r3
    2d9c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2d9e:	4b12      	ldr	r3, [pc, #72]	; (2de8 <system_gclk_gen_get_hz+0x78>)
    2da0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2da2:	6876      	ldr	r6, [r6, #4]
    2da4:	02f6      	lsls	r6, r6, #11
    2da6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2da8:	4b11      	ldr	r3, [pc, #68]	; (2df0 <system_gclk_gen_get_hz+0x80>)
    2daa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2dac:	4a0c      	ldr	r2, [pc, #48]	; (2de0 <system_gclk_gen_get_hz+0x70>)
    2dae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2db0:	b25b      	sxtb	r3, r3
    2db2:	2b00      	cmp	r3, #0
    2db4:	dbfb      	blt.n	2dae <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2db6:	4b0a      	ldr	r3, [pc, #40]	; (2de0 <system_gclk_gen_get_hz+0x70>)
    2db8:	689c      	ldr	r4, [r3, #8]
    2dba:	0224      	lsls	r4, r4, #8
    2dbc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2dbe:	4b0d      	ldr	r3, [pc, #52]	; (2df4 <system_gclk_gen_get_hz+0x84>)
    2dc0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2dc2:	2e00      	cmp	r6, #0
    2dc4:	d107      	bne.n	2dd6 <system_gclk_gen_get_hz+0x66>
    2dc6:	2c01      	cmp	r4, #1
    2dc8:	d907      	bls.n	2dda <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2dca:	0021      	movs	r1, r4
    2dcc:	0028      	movs	r0, r5
    2dce:	4b0a      	ldr	r3, [pc, #40]	; (2df8 <system_gclk_gen_get_hz+0x88>)
    2dd0:	4798      	blx	r3
    2dd2:	0005      	movs	r5, r0
    2dd4:	e001      	b.n	2dda <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2dd6:	3401      	adds	r4, #1
    2dd8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2dda:	0028      	movs	r0, r5
    2ddc:	bd70      	pop	{r4, r5, r6, pc}
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	40000c00 	.word	0x40000c00
    2de4:	000029d5 	.word	0x000029d5
    2de8:	40000c04 	.word	0x40000c04
    2dec:	00002a45 	.word	0x00002a45
    2df0:	40000c08 	.word	0x40000c08
    2df4:	00002a15 	.word	0x00002a15
    2df8:	0000314d 	.word	0x0000314d

00002dfc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2dfc:	b510      	push	{r4, lr}
    2dfe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2e00:	4b06      	ldr	r3, [pc, #24]	; (2e1c <system_gclk_chan_enable+0x20>)
    2e02:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2e04:	4b06      	ldr	r3, [pc, #24]	; (2e20 <system_gclk_chan_enable+0x24>)
    2e06:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2e08:	4a06      	ldr	r2, [pc, #24]	; (2e24 <system_gclk_chan_enable+0x28>)
    2e0a:	8853      	ldrh	r3, [r2, #2]
    2e0c:	2180      	movs	r1, #128	; 0x80
    2e0e:	01c9      	lsls	r1, r1, #7
    2e10:	430b      	orrs	r3, r1
    2e12:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2e14:	4b04      	ldr	r3, [pc, #16]	; (2e28 <system_gclk_chan_enable+0x2c>)
    2e16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2e18:	bd10      	pop	{r4, pc}
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	000029d5 	.word	0x000029d5
    2e20:	40000c02 	.word	0x40000c02
    2e24:	40000c00 	.word	0x40000c00
    2e28:	00002a15 	.word	0x00002a15

00002e2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2e2c:	b510      	push	{r4, lr}
    2e2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2e30:	4b0f      	ldr	r3, [pc, #60]	; (2e70 <system_gclk_chan_disable+0x44>)
    2e32:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2e34:	4b0f      	ldr	r3, [pc, #60]	; (2e74 <system_gclk_chan_disable+0x48>)
    2e36:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2e38:	4a0f      	ldr	r2, [pc, #60]	; (2e78 <system_gclk_chan_disable+0x4c>)
    2e3a:	8853      	ldrh	r3, [r2, #2]
    2e3c:	051b      	lsls	r3, r3, #20
    2e3e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2e40:	8853      	ldrh	r3, [r2, #2]
    2e42:	490e      	ldr	r1, [pc, #56]	; (2e7c <system_gclk_chan_disable+0x50>)
    2e44:	400b      	ands	r3, r1
    2e46:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2e48:	8853      	ldrh	r3, [r2, #2]
    2e4a:	490d      	ldr	r1, [pc, #52]	; (2e80 <system_gclk_chan_disable+0x54>)
    2e4c:	400b      	ands	r3, r1
    2e4e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2e50:	0011      	movs	r1, r2
    2e52:	2280      	movs	r2, #128	; 0x80
    2e54:	01d2      	lsls	r2, r2, #7
    2e56:	884b      	ldrh	r3, [r1, #2]
    2e58:	4213      	tst	r3, r2
    2e5a:	d1fc      	bne.n	2e56 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2e5c:	4906      	ldr	r1, [pc, #24]	; (2e78 <system_gclk_chan_disable+0x4c>)
    2e5e:	884a      	ldrh	r2, [r1, #2]
    2e60:	0203      	lsls	r3, r0, #8
    2e62:	4806      	ldr	r0, [pc, #24]	; (2e7c <system_gclk_chan_disable+0x50>)
    2e64:	4002      	ands	r2, r0
    2e66:	4313      	orrs	r3, r2
    2e68:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2e6a:	4b06      	ldr	r3, [pc, #24]	; (2e84 <system_gclk_chan_disable+0x58>)
    2e6c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2e6e:	bd10      	pop	{r4, pc}
    2e70:	000029d5 	.word	0x000029d5
    2e74:	40000c02 	.word	0x40000c02
    2e78:	40000c00 	.word	0x40000c00
    2e7c:	fffff0ff 	.word	0xfffff0ff
    2e80:	ffffbfff 	.word	0xffffbfff
    2e84:	00002a15 	.word	0x00002a15

00002e88 <system_gclk_chan_set_config>:
{
    2e88:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2e8a:	780c      	ldrb	r4, [r1, #0]
    2e8c:	0224      	lsls	r4, r4, #8
    2e8e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2e90:	4b02      	ldr	r3, [pc, #8]	; (2e9c <system_gclk_chan_set_config+0x14>)
    2e92:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2e94:	b2a4      	uxth	r4, r4
    2e96:	4b02      	ldr	r3, [pc, #8]	; (2ea0 <system_gclk_chan_set_config+0x18>)
    2e98:	805c      	strh	r4, [r3, #2]
}
    2e9a:	bd10      	pop	{r4, pc}
    2e9c:	00002e2d 	.word	0x00002e2d
    2ea0:	40000c00 	.word	0x40000c00

00002ea4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2ea4:	b510      	push	{r4, lr}
    2ea6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2ea8:	4b06      	ldr	r3, [pc, #24]	; (2ec4 <system_gclk_chan_get_hz+0x20>)
    2eaa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2eac:	4b06      	ldr	r3, [pc, #24]	; (2ec8 <system_gclk_chan_get_hz+0x24>)
    2eae:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2eb0:	4b06      	ldr	r3, [pc, #24]	; (2ecc <system_gclk_chan_get_hz+0x28>)
    2eb2:	885c      	ldrh	r4, [r3, #2]
    2eb4:	0524      	lsls	r4, r4, #20
    2eb6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2eb8:	4b05      	ldr	r3, [pc, #20]	; (2ed0 <system_gclk_chan_get_hz+0x2c>)
    2eba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2ebc:	0020      	movs	r0, r4
    2ebe:	4b05      	ldr	r3, [pc, #20]	; (2ed4 <system_gclk_chan_get_hz+0x30>)
    2ec0:	4798      	blx	r3
}
    2ec2:	bd10      	pop	{r4, pc}
    2ec4:	000029d5 	.word	0x000029d5
    2ec8:	40000c02 	.word	0x40000c02
    2ecc:	40000c00 	.word	0x40000c00
    2ed0:	00002a15 	.word	0x00002a15
    2ed4:	00002d71 	.word	0x00002d71

00002ed8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2ed8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2eda:	78d3      	ldrb	r3, [r2, #3]
    2edc:	2b00      	cmp	r3, #0
    2ede:	d135      	bne.n	2f4c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2ee0:	7813      	ldrb	r3, [r2, #0]
    2ee2:	2b80      	cmp	r3, #128	; 0x80
    2ee4:	d029      	beq.n	2f3a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2ee6:	061b      	lsls	r3, r3, #24
    2ee8:	2480      	movs	r4, #128	; 0x80
    2eea:	0264      	lsls	r4, r4, #9
    2eec:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2eee:	7854      	ldrb	r4, [r2, #1]
    2ef0:	2502      	movs	r5, #2
    2ef2:	43ac      	bics	r4, r5
    2ef4:	d106      	bne.n	2f04 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2ef6:	7894      	ldrb	r4, [r2, #2]
    2ef8:	2c00      	cmp	r4, #0
    2efa:	d120      	bne.n	2f3e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2efc:	2480      	movs	r4, #128	; 0x80
    2efe:	02a4      	lsls	r4, r4, #10
    2f00:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2f02:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2f04:	7854      	ldrb	r4, [r2, #1]
    2f06:	3c01      	subs	r4, #1
    2f08:	2c01      	cmp	r4, #1
    2f0a:	d91c      	bls.n	2f46 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2f0c:	040d      	lsls	r5, r1, #16
    2f0e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2f10:	24a0      	movs	r4, #160	; 0xa0
    2f12:	05e4      	lsls	r4, r4, #23
    2f14:	432c      	orrs	r4, r5
    2f16:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2f18:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2f1a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2f1c:	24d0      	movs	r4, #208	; 0xd0
    2f1e:	0624      	lsls	r4, r4, #24
    2f20:	432c      	orrs	r4, r5
    2f22:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2f24:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2f26:	78d4      	ldrb	r4, [r2, #3]
    2f28:	2c00      	cmp	r4, #0
    2f2a:	d122      	bne.n	2f72 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2f2c:	035b      	lsls	r3, r3, #13
    2f2e:	d51c      	bpl.n	2f6a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2f30:	7893      	ldrb	r3, [r2, #2]
    2f32:	2b01      	cmp	r3, #1
    2f34:	d01e      	beq.n	2f74 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2f36:	6141      	str	r1, [r0, #20]
    2f38:	e017      	b.n	2f6a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2f3a:	2300      	movs	r3, #0
    2f3c:	e7d7      	b.n	2eee <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2f3e:	24c0      	movs	r4, #192	; 0xc0
    2f40:	02e4      	lsls	r4, r4, #11
    2f42:	4323      	orrs	r3, r4
    2f44:	e7dd      	b.n	2f02 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2f46:	4c0d      	ldr	r4, [pc, #52]	; (2f7c <_system_pinmux_config+0xa4>)
    2f48:	4023      	ands	r3, r4
    2f4a:	e7df      	b.n	2f0c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2f4c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2f4e:	040c      	lsls	r4, r1, #16
    2f50:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2f52:	23a0      	movs	r3, #160	; 0xa0
    2f54:	05db      	lsls	r3, r3, #23
    2f56:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2f58:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2f5a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2f5c:	23d0      	movs	r3, #208	; 0xd0
    2f5e:	061b      	lsls	r3, r3, #24
    2f60:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2f62:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2f64:	78d3      	ldrb	r3, [r2, #3]
    2f66:	2b00      	cmp	r3, #0
    2f68:	d103      	bne.n	2f72 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2f6a:	7853      	ldrb	r3, [r2, #1]
    2f6c:	3b01      	subs	r3, #1
    2f6e:	2b01      	cmp	r3, #1
    2f70:	d902      	bls.n	2f78 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2f72:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2f74:	6181      	str	r1, [r0, #24]
    2f76:	e7f8      	b.n	2f6a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2f78:	6081      	str	r1, [r0, #8]
}
    2f7a:	e7fa      	b.n	2f72 <_system_pinmux_config+0x9a>
    2f7c:	fffbffff 	.word	0xfffbffff

00002f80 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2f80:	b510      	push	{r4, lr}
    2f82:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2f84:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2f86:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2f88:	2900      	cmp	r1, #0
    2f8a:	d104      	bne.n	2f96 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2f8c:	0943      	lsrs	r3, r0, #5
    2f8e:	01db      	lsls	r3, r3, #7
    2f90:	4905      	ldr	r1, [pc, #20]	; (2fa8 <system_pinmux_pin_set_config+0x28>)
    2f92:	468c      	mov	ip, r1
    2f94:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2f96:	241f      	movs	r4, #31
    2f98:	4020      	ands	r0, r4
    2f9a:	2101      	movs	r1, #1
    2f9c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2f9e:	0018      	movs	r0, r3
    2fa0:	4b02      	ldr	r3, [pc, #8]	; (2fac <system_pinmux_pin_set_config+0x2c>)
    2fa2:	4798      	blx	r3
}
    2fa4:	bd10      	pop	{r4, pc}
    2fa6:	46c0      	nop			; (mov r8, r8)
    2fa8:	41004400 	.word	0x41004400
    2fac:	00002ed9 	.word	0x00002ed9

00002fb0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2fb0:	4770      	bx	lr
	...

00002fb4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2fb4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2fb6:	4b05      	ldr	r3, [pc, #20]	; (2fcc <system_init+0x18>)
    2fb8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2fba:	4b05      	ldr	r3, [pc, #20]	; (2fd0 <system_init+0x1c>)
    2fbc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2fbe:	4b05      	ldr	r3, [pc, #20]	; (2fd4 <system_init+0x20>)
    2fc0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2fc2:	4b05      	ldr	r3, [pc, #20]	; (2fd8 <system_init+0x24>)
    2fc4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2fc6:	4b05      	ldr	r3, [pc, #20]	; (2fdc <system_init+0x28>)
    2fc8:	4798      	blx	r3
}
    2fca:	bd10      	pop	{r4, pc}
    2fcc:	00002bb9 	.word	0x00002bb9
    2fd0:	000029d1 	.word	0x000029d1
    2fd4:	00002fb1 	.word	0x00002fb1
    2fd8:	00002fb1 	.word	0x00002fb1
    2fdc:	00002fb1 	.word	0x00002fb1

00002fe0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2fe0:	e7fe      	b.n	2fe0 <Dummy_Handler>
	...

00002fe4 <Reset_Handler>:
{
    2fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2fe6:	4a2a      	ldr	r2, [pc, #168]	; (3090 <Reset_Handler+0xac>)
    2fe8:	4b2a      	ldr	r3, [pc, #168]	; (3094 <Reset_Handler+0xb0>)
    2fea:	429a      	cmp	r2, r3
    2fec:	d011      	beq.n	3012 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2fee:	001a      	movs	r2, r3
    2ff0:	4b29      	ldr	r3, [pc, #164]	; (3098 <Reset_Handler+0xb4>)
    2ff2:	429a      	cmp	r2, r3
    2ff4:	d20d      	bcs.n	3012 <Reset_Handler+0x2e>
    2ff6:	4a29      	ldr	r2, [pc, #164]	; (309c <Reset_Handler+0xb8>)
    2ff8:	3303      	adds	r3, #3
    2ffa:	1a9b      	subs	r3, r3, r2
    2ffc:	089b      	lsrs	r3, r3, #2
    2ffe:	3301      	adds	r3, #1
    3000:	009b      	lsls	r3, r3, #2
    3002:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3004:	4823      	ldr	r0, [pc, #140]	; (3094 <Reset_Handler+0xb0>)
    3006:	4922      	ldr	r1, [pc, #136]	; (3090 <Reset_Handler+0xac>)
    3008:	588c      	ldr	r4, [r1, r2]
    300a:	5084      	str	r4, [r0, r2]
    300c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    300e:	429a      	cmp	r2, r3
    3010:	d1fa      	bne.n	3008 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3012:	4a23      	ldr	r2, [pc, #140]	; (30a0 <Reset_Handler+0xbc>)
    3014:	4b23      	ldr	r3, [pc, #140]	; (30a4 <Reset_Handler+0xc0>)
    3016:	429a      	cmp	r2, r3
    3018:	d20a      	bcs.n	3030 <Reset_Handler+0x4c>
    301a:	43d3      	mvns	r3, r2
    301c:	4921      	ldr	r1, [pc, #132]	; (30a4 <Reset_Handler+0xc0>)
    301e:	185b      	adds	r3, r3, r1
    3020:	2103      	movs	r1, #3
    3022:	438b      	bics	r3, r1
    3024:	3304      	adds	r3, #4
    3026:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3028:	2100      	movs	r1, #0
    302a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    302c:	4293      	cmp	r3, r2
    302e:	d1fc      	bne.n	302a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3030:	4a1d      	ldr	r2, [pc, #116]	; (30a8 <Reset_Handler+0xc4>)
    3032:	21ff      	movs	r1, #255	; 0xff
    3034:	4b1d      	ldr	r3, [pc, #116]	; (30ac <Reset_Handler+0xc8>)
    3036:	438b      	bics	r3, r1
    3038:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    303a:	39fd      	subs	r1, #253	; 0xfd
    303c:	2390      	movs	r3, #144	; 0x90
    303e:	005b      	lsls	r3, r3, #1
    3040:	4a1b      	ldr	r2, [pc, #108]	; (30b0 <Reset_Handler+0xcc>)
    3042:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3044:	4a1b      	ldr	r2, [pc, #108]	; (30b4 <Reset_Handler+0xd0>)
    3046:	78d3      	ldrb	r3, [r2, #3]
    3048:	2503      	movs	r5, #3
    304a:	43ab      	bics	r3, r5
    304c:	2402      	movs	r4, #2
    304e:	4323      	orrs	r3, r4
    3050:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3052:	78d3      	ldrb	r3, [r2, #3]
    3054:	270c      	movs	r7, #12
    3056:	43bb      	bics	r3, r7
    3058:	2608      	movs	r6, #8
    305a:	4333      	orrs	r3, r6
    305c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    305e:	4b16      	ldr	r3, [pc, #88]	; (30b8 <Reset_Handler+0xd4>)
    3060:	7b98      	ldrb	r0, [r3, #14]
    3062:	2230      	movs	r2, #48	; 0x30
    3064:	4390      	bics	r0, r2
    3066:	2220      	movs	r2, #32
    3068:	4310      	orrs	r0, r2
    306a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    306c:	7b99      	ldrb	r1, [r3, #14]
    306e:	43b9      	bics	r1, r7
    3070:	4331      	orrs	r1, r6
    3072:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3074:	7b9a      	ldrb	r2, [r3, #14]
    3076:	43aa      	bics	r2, r5
    3078:	4322      	orrs	r2, r4
    307a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    307c:	4a0f      	ldr	r2, [pc, #60]	; (30bc <Reset_Handler+0xd8>)
    307e:	6853      	ldr	r3, [r2, #4]
    3080:	2180      	movs	r1, #128	; 0x80
    3082:	430b      	orrs	r3, r1
    3084:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3086:	4b0e      	ldr	r3, [pc, #56]	; (30c0 <Reset_Handler+0xdc>)
    3088:	4798      	blx	r3
        main();
    308a:	4b0e      	ldr	r3, [pc, #56]	; (30c4 <Reset_Handler+0xe0>)
    308c:	4798      	blx	r3
    308e:	e7fe      	b.n	308e <Reset_Handler+0xaa>
    3090:	00004f54 	.word	0x00004f54
    3094:	20000000 	.word	0x20000000
    3098:	200000a8 	.word	0x200000a8
    309c:	20000004 	.word	0x20000004
    30a0:	200000a8 	.word	0x200000a8
    30a4:	200011b0 	.word	0x200011b0
    30a8:	e000ed00 	.word	0xe000ed00
    30ac:	00000000 	.word	0x00000000
    30b0:	41007000 	.word	0x41007000
    30b4:	41005000 	.word	0x41005000
    30b8:	41004800 	.word	0x41004800
    30bc:	41004000 	.word	0x41004000
    30c0:	00004b81 	.word	0x00004b81
    30c4:	000030ed 	.word	0x000030ed

000030c8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    30c8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    30ca:	4a06      	ldr	r2, [pc, #24]	; (30e4 <_sbrk+0x1c>)
    30cc:	6812      	ldr	r2, [r2, #0]
    30ce:	2a00      	cmp	r2, #0
    30d0:	d004      	beq.n	30dc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    30d2:	4a04      	ldr	r2, [pc, #16]	; (30e4 <_sbrk+0x1c>)
    30d4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    30d6:	18c3      	adds	r3, r0, r3
    30d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    30da:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    30dc:	4902      	ldr	r1, [pc, #8]	; (30e8 <_sbrk+0x20>)
    30de:	4a01      	ldr	r2, [pc, #4]	; (30e4 <_sbrk+0x1c>)
    30e0:	6011      	str	r1, [r2, #0]
    30e2:	e7f6      	b.n	30d2 <_sbrk+0xa>
    30e4:	20000db0 	.word	0x20000db0
    30e8:	200031b0 	.word	0x200031b0

000030ec <main>:
};
*/


int main (void)
{
    30ec:	b570      	push	{r4, r5, r6, lr}
	system_init();
    30ee:	4b0d      	ldr	r3, [pc, #52]	; (3124 <main+0x38>)
    30f0:	4798      	blx	r3
	delay_init();
    30f2:	4b0d      	ldr	r3, [pc, #52]	; (3128 <main+0x3c>)
    30f4:	4798      	blx	r3
	configureSendInfo();
    30f6:	4b0d      	ldr	r3, [pc, #52]	; (312c <main+0x40>)
    30f8:	4798      	blx	r3
	initializeI2CModules();
    30fa:	4b0d      	ldr	r3, [pc, #52]	; (3130 <main+0x44>)
    30fc:	4798      	blx	r3
	delay_cycles_ms(500);
    30fe:	20fa      	movs	r0, #250	; 0xfa
    3100:	0040      	lsls	r0, r0, #1
    3102:	4b0c      	ldr	r3, [pc, #48]	; (3134 <main+0x48>)
    3104:	4798      	blx	r3
	//enableServoTCC();
	//USART -- 115200
	serialInit();
    3106:	4b0c      	ldr	r3, [pc, #48]	; (3138 <main+0x4c>)
    3108:	4798      	blx	r3
	configureInputOutputDetection();
    310a:	4b0c      	ldr	r3, [pc, #48]	; (313c <main+0x50>)
    310c:	4798      	blx	r3
	while(1)
	{
		checkOutputsInputs();
    310e:	4e0c      	ldr	r6, [pc, #48]	; (3140 <main+0x54>)
		checkSetOutputs();
    3110:	4d0c      	ldr	r5, [pc, #48]	; (3144 <main+0x58>)
		//readSensors();
		//setOutputs();
		checkUART();
    3112:	4c0d      	ldr	r4, [pc, #52]	; (3148 <main+0x5c>)
		checkOutputsInputs();
    3114:	47b0      	blx	r6
		checkSetOutputs();
    3116:	47a8      	blx	r5
		checkUART();
    3118:	47a0      	blx	r4
		delay_ms(25);
    311a:	2019      	movs	r0, #25
    311c:	4b05      	ldr	r3, [pc, #20]	; (3134 <main+0x48>)
    311e:	4798      	blx	r3
    3120:	e7f8      	b.n	3114 <main+0x28>
    3122:	46c0      	nop			; (mov r8, r8)
    3124:	00002fb5 	.word	0x00002fb5
    3128:	000012f9 	.word	0x000012f9
    312c:	000012e5 	.word	0x000012e5
    3130:	00000e6d 	.word	0x00000e6d
    3134:	00001339 	.word	0x00001339
    3138:	000025d1 	.word	0x000025d1
    313c:	000029c5 	.word	0x000029c5
    3140:	000029a9 	.word	0x000029a9
    3144:	00000cd1 	.word	0x00000cd1
    3148:	000024b5 	.word	0x000024b5

0000314c <__udivsi3>:
    314c:	2200      	movs	r2, #0
    314e:	0843      	lsrs	r3, r0, #1
    3150:	428b      	cmp	r3, r1
    3152:	d374      	bcc.n	323e <__udivsi3+0xf2>
    3154:	0903      	lsrs	r3, r0, #4
    3156:	428b      	cmp	r3, r1
    3158:	d35f      	bcc.n	321a <__udivsi3+0xce>
    315a:	0a03      	lsrs	r3, r0, #8
    315c:	428b      	cmp	r3, r1
    315e:	d344      	bcc.n	31ea <__udivsi3+0x9e>
    3160:	0b03      	lsrs	r3, r0, #12
    3162:	428b      	cmp	r3, r1
    3164:	d328      	bcc.n	31b8 <__udivsi3+0x6c>
    3166:	0c03      	lsrs	r3, r0, #16
    3168:	428b      	cmp	r3, r1
    316a:	d30d      	bcc.n	3188 <__udivsi3+0x3c>
    316c:	22ff      	movs	r2, #255	; 0xff
    316e:	0209      	lsls	r1, r1, #8
    3170:	ba12      	rev	r2, r2
    3172:	0c03      	lsrs	r3, r0, #16
    3174:	428b      	cmp	r3, r1
    3176:	d302      	bcc.n	317e <__udivsi3+0x32>
    3178:	1212      	asrs	r2, r2, #8
    317a:	0209      	lsls	r1, r1, #8
    317c:	d065      	beq.n	324a <__udivsi3+0xfe>
    317e:	0b03      	lsrs	r3, r0, #12
    3180:	428b      	cmp	r3, r1
    3182:	d319      	bcc.n	31b8 <__udivsi3+0x6c>
    3184:	e000      	b.n	3188 <__udivsi3+0x3c>
    3186:	0a09      	lsrs	r1, r1, #8
    3188:	0bc3      	lsrs	r3, r0, #15
    318a:	428b      	cmp	r3, r1
    318c:	d301      	bcc.n	3192 <__udivsi3+0x46>
    318e:	03cb      	lsls	r3, r1, #15
    3190:	1ac0      	subs	r0, r0, r3
    3192:	4152      	adcs	r2, r2
    3194:	0b83      	lsrs	r3, r0, #14
    3196:	428b      	cmp	r3, r1
    3198:	d301      	bcc.n	319e <__udivsi3+0x52>
    319a:	038b      	lsls	r3, r1, #14
    319c:	1ac0      	subs	r0, r0, r3
    319e:	4152      	adcs	r2, r2
    31a0:	0b43      	lsrs	r3, r0, #13
    31a2:	428b      	cmp	r3, r1
    31a4:	d301      	bcc.n	31aa <__udivsi3+0x5e>
    31a6:	034b      	lsls	r3, r1, #13
    31a8:	1ac0      	subs	r0, r0, r3
    31aa:	4152      	adcs	r2, r2
    31ac:	0b03      	lsrs	r3, r0, #12
    31ae:	428b      	cmp	r3, r1
    31b0:	d301      	bcc.n	31b6 <__udivsi3+0x6a>
    31b2:	030b      	lsls	r3, r1, #12
    31b4:	1ac0      	subs	r0, r0, r3
    31b6:	4152      	adcs	r2, r2
    31b8:	0ac3      	lsrs	r3, r0, #11
    31ba:	428b      	cmp	r3, r1
    31bc:	d301      	bcc.n	31c2 <__udivsi3+0x76>
    31be:	02cb      	lsls	r3, r1, #11
    31c0:	1ac0      	subs	r0, r0, r3
    31c2:	4152      	adcs	r2, r2
    31c4:	0a83      	lsrs	r3, r0, #10
    31c6:	428b      	cmp	r3, r1
    31c8:	d301      	bcc.n	31ce <__udivsi3+0x82>
    31ca:	028b      	lsls	r3, r1, #10
    31cc:	1ac0      	subs	r0, r0, r3
    31ce:	4152      	adcs	r2, r2
    31d0:	0a43      	lsrs	r3, r0, #9
    31d2:	428b      	cmp	r3, r1
    31d4:	d301      	bcc.n	31da <__udivsi3+0x8e>
    31d6:	024b      	lsls	r3, r1, #9
    31d8:	1ac0      	subs	r0, r0, r3
    31da:	4152      	adcs	r2, r2
    31dc:	0a03      	lsrs	r3, r0, #8
    31de:	428b      	cmp	r3, r1
    31e0:	d301      	bcc.n	31e6 <__udivsi3+0x9a>
    31e2:	020b      	lsls	r3, r1, #8
    31e4:	1ac0      	subs	r0, r0, r3
    31e6:	4152      	adcs	r2, r2
    31e8:	d2cd      	bcs.n	3186 <__udivsi3+0x3a>
    31ea:	09c3      	lsrs	r3, r0, #7
    31ec:	428b      	cmp	r3, r1
    31ee:	d301      	bcc.n	31f4 <__udivsi3+0xa8>
    31f0:	01cb      	lsls	r3, r1, #7
    31f2:	1ac0      	subs	r0, r0, r3
    31f4:	4152      	adcs	r2, r2
    31f6:	0983      	lsrs	r3, r0, #6
    31f8:	428b      	cmp	r3, r1
    31fa:	d301      	bcc.n	3200 <__udivsi3+0xb4>
    31fc:	018b      	lsls	r3, r1, #6
    31fe:	1ac0      	subs	r0, r0, r3
    3200:	4152      	adcs	r2, r2
    3202:	0943      	lsrs	r3, r0, #5
    3204:	428b      	cmp	r3, r1
    3206:	d301      	bcc.n	320c <__udivsi3+0xc0>
    3208:	014b      	lsls	r3, r1, #5
    320a:	1ac0      	subs	r0, r0, r3
    320c:	4152      	adcs	r2, r2
    320e:	0903      	lsrs	r3, r0, #4
    3210:	428b      	cmp	r3, r1
    3212:	d301      	bcc.n	3218 <__udivsi3+0xcc>
    3214:	010b      	lsls	r3, r1, #4
    3216:	1ac0      	subs	r0, r0, r3
    3218:	4152      	adcs	r2, r2
    321a:	08c3      	lsrs	r3, r0, #3
    321c:	428b      	cmp	r3, r1
    321e:	d301      	bcc.n	3224 <__udivsi3+0xd8>
    3220:	00cb      	lsls	r3, r1, #3
    3222:	1ac0      	subs	r0, r0, r3
    3224:	4152      	adcs	r2, r2
    3226:	0883      	lsrs	r3, r0, #2
    3228:	428b      	cmp	r3, r1
    322a:	d301      	bcc.n	3230 <__udivsi3+0xe4>
    322c:	008b      	lsls	r3, r1, #2
    322e:	1ac0      	subs	r0, r0, r3
    3230:	4152      	adcs	r2, r2
    3232:	0843      	lsrs	r3, r0, #1
    3234:	428b      	cmp	r3, r1
    3236:	d301      	bcc.n	323c <__udivsi3+0xf0>
    3238:	004b      	lsls	r3, r1, #1
    323a:	1ac0      	subs	r0, r0, r3
    323c:	4152      	adcs	r2, r2
    323e:	1a41      	subs	r1, r0, r1
    3240:	d200      	bcs.n	3244 <__udivsi3+0xf8>
    3242:	4601      	mov	r1, r0
    3244:	4152      	adcs	r2, r2
    3246:	4610      	mov	r0, r2
    3248:	4770      	bx	lr
    324a:	e7ff      	b.n	324c <__udivsi3+0x100>
    324c:	b501      	push	{r0, lr}
    324e:	2000      	movs	r0, #0
    3250:	f000 f806 	bl	3260 <__aeabi_idiv0>
    3254:	bd02      	pop	{r1, pc}
    3256:	46c0      	nop			; (mov r8, r8)

00003258 <__aeabi_uidivmod>:
    3258:	2900      	cmp	r1, #0
    325a:	d0f7      	beq.n	324c <__udivsi3+0x100>
    325c:	e776      	b.n	314c <__udivsi3>
    325e:	4770      	bx	lr

00003260 <__aeabi_idiv0>:
    3260:	4770      	bx	lr
    3262:	46c0      	nop			; (mov r8, r8)

00003264 <__aeabi_lmul>:
    3264:	b5f0      	push	{r4, r5, r6, r7, lr}
    3266:	46ce      	mov	lr, r9
    3268:	4647      	mov	r7, r8
    326a:	0415      	lsls	r5, r2, #16
    326c:	0c2d      	lsrs	r5, r5, #16
    326e:	002e      	movs	r6, r5
    3270:	b580      	push	{r7, lr}
    3272:	0407      	lsls	r7, r0, #16
    3274:	0c14      	lsrs	r4, r2, #16
    3276:	0c3f      	lsrs	r7, r7, #16
    3278:	4699      	mov	r9, r3
    327a:	0c03      	lsrs	r3, r0, #16
    327c:	437e      	muls	r6, r7
    327e:	435d      	muls	r5, r3
    3280:	4367      	muls	r7, r4
    3282:	4363      	muls	r3, r4
    3284:	197f      	adds	r7, r7, r5
    3286:	0c34      	lsrs	r4, r6, #16
    3288:	19e4      	adds	r4, r4, r7
    328a:	469c      	mov	ip, r3
    328c:	42a5      	cmp	r5, r4
    328e:	d903      	bls.n	3298 <__aeabi_lmul+0x34>
    3290:	2380      	movs	r3, #128	; 0x80
    3292:	025b      	lsls	r3, r3, #9
    3294:	4698      	mov	r8, r3
    3296:	44c4      	add	ip, r8
    3298:	464b      	mov	r3, r9
    329a:	4351      	muls	r1, r2
    329c:	4343      	muls	r3, r0
    329e:	0436      	lsls	r6, r6, #16
    32a0:	0c36      	lsrs	r6, r6, #16
    32a2:	0c25      	lsrs	r5, r4, #16
    32a4:	0424      	lsls	r4, r4, #16
    32a6:	4465      	add	r5, ip
    32a8:	19a4      	adds	r4, r4, r6
    32aa:	1859      	adds	r1, r3, r1
    32ac:	1949      	adds	r1, r1, r5
    32ae:	0020      	movs	r0, r4
    32b0:	bc0c      	pop	{r2, r3}
    32b2:	4690      	mov	r8, r2
    32b4:	4699      	mov	r9, r3
    32b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000032b8 <__aeabi_dadd>:
    32b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32ba:	4645      	mov	r5, r8
    32bc:	46de      	mov	lr, fp
    32be:	4657      	mov	r7, sl
    32c0:	464e      	mov	r6, r9
    32c2:	030c      	lsls	r4, r1, #12
    32c4:	b5e0      	push	{r5, r6, r7, lr}
    32c6:	004e      	lsls	r6, r1, #1
    32c8:	0fc9      	lsrs	r1, r1, #31
    32ca:	4688      	mov	r8, r1
    32cc:	000d      	movs	r5, r1
    32ce:	0a61      	lsrs	r1, r4, #9
    32d0:	0f44      	lsrs	r4, r0, #29
    32d2:	430c      	orrs	r4, r1
    32d4:	00c7      	lsls	r7, r0, #3
    32d6:	0319      	lsls	r1, r3, #12
    32d8:	0058      	lsls	r0, r3, #1
    32da:	0fdb      	lsrs	r3, r3, #31
    32dc:	469b      	mov	fp, r3
    32de:	0a4b      	lsrs	r3, r1, #9
    32e0:	0f51      	lsrs	r1, r2, #29
    32e2:	430b      	orrs	r3, r1
    32e4:	0d76      	lsrs	r6, r6, #21
    32e6:	0d40      	lsrs	r0, r0, #21
    32e8:	0019      	movs	r1, r3
    32ea:	00d2      	lsls	r2, r2, #3
    32ec:	45d8      	cmp	r8, fp
    32ee:	d100      	bne.n	32f2 <__aeabi_dadd+0x3a>
    32f0:	e0ae      	b.n	3450 <__aeabi_dadd+0x198>
    32f2:	1a35      	subs	r5, r6, r0
    32f4:	2d00      	cmp	r5, #0
    32f6:	dc00      	bgt.n	32fa <__aeabi_dadd+0x42>
    32f8:	e0f6      	b.n	34e8 <__aeabi_dadd+0x230>
    32fa:	2800      	cmp	r0, #0
    32fc:	d10f      	bne.n	331e <__aeabi_dadd+0x66>
    32fe:	4313      	orrs	r3, r2
    3300:	d100      	bne.n	3304 <__aeabi_dadd+0x4c>
    3302:	e0db      	b.n	34bc <__aeabi_dadd+0x204>
    3304:	1e6b      	subs	r3, r5, #1
    3306:	2b00      	cmp	r3, #0
    3308:	d000      	beq.n	330c <__aeabi_dadd+0x54>
    330a:	e137      	b.n	357c <__aeabi_dadd+0x2c4>
    330c:	1aba      	subs	r2, r7, r2
    330e:	4297      	cmp	r7, r2
    3310:	41bf      	sbcs	r7, r7
    3312:	1a64      	subs	r4, r4, r1
    3314:	427f      	negs	r7, r7
    3316:	1be4      	subs	r4, r4, r7
    3318:	2601      	movs	r6, #1
    331a:	0017      	movs	r7, r2
    331c:	e024      	b.n	3368 <__aeabi_dadd+0xb0>
    331e:	4bc6      	ldr	r3, [pc, #792]	; (3638 <__aeabi_dadd+0x380>)
    3320:	429e      	cmp	r6, r3
    3322:	d04d      	beq.n	33c0 <__aeabi_dadd+0x108>
    3324:	2380      	movs	r3, #128	; 0x80
    3326:	041b      	lsls	r3, r3, #16
    3328:	4319      	orrs	r1, r3
    332a:	2d38      	cmp	r5, #56	; 0x38
    332c:	dd00      	ble.n	3330 <__aeabi_dadd+0x78>
    332e:	e107      	b.n	3540 <__aeabi_dadd+0x288>
    3330:	2d1f      	cmp	r5, #31
    3332:	dd00      	ble.n	3336 <__aeabi_dadd+0x7e>
    3334:	e138      	b.n	35a8 <__aeabi_dadd+0x2f0>
    3336:	2020      	movs	r0, #32
    3338:	1b43      	subs	r3, r0, r5
    333a:	469a      	mov	sl, r3
    333c:	000b      	movs	r3, r1
    333e:	4650      	mov	r0, sl
    3340:	4083      	lsls	r3, r0
    3342:	4699      	mov	r9, r3
    3344:	0013      	movs	r3, r2
    3346:	4648      	mov	r0, r9
    3348:	40eb      	lsrs	r3, r5
    334a:	4318      	orrs	r0, r3
    334c:	0003      	movs	r3, r0
    334e:	4650      	mov	r0, sl
    3350:	4082      	lsls	r2, r0
    3352:	1e50      	subs	r0, r2, #1
    3354:	4182      	sbcs	r2, r0
    3356:	40e9      	lsrs	r1, r5
    3358:	431a      	orrs	r2, r3
    335a:	1aba      	subs	r2, r7, r2
    335c:	1a61      	subs	r1, r4, r1
    335e:	4297      	cmp	r7, r2
    3360:	41a4      	sbcs	r4, r4
    3362:	0017      	movs	r7, r2
    3364:	4264      	negs	r4, r4
    3366:	1b0c      	subs	r4, r1, r4
    3368:	0223      	lsls	r3, r4, #8
    336a:	d562      	bpl.n	3432 <__aeabi_dadd+0x17a>
    336c:	0264      	lsls	r4, r4, #9
    336e:	0a65      	lsrs	r5, r4, #9
    3370:	2d00      	cmp	r5, #0
    3372:	d100      	bne.n	3376 <__aeabi_dadd+0xbe>
    3374:	e0df      	b.n	3536 <__aeabi_dadd+0x27e>
    3376:	0028      	movs	r0, r5
    3378:	f001 fbe4 	bl	4b44 <__clzsi2>
    337c:	0003      	movs	r3, r0
    337e:	3b08      	subs	r3, #8
    3380:	2b1f      	cmp	r3, #31
    3382:	dd00      	ble.n	3386 <__aeabi_dadd+0xce>
    3384:	e0d2      	b.n	352c <__aeabi_dadd+0x274>
    3386:	2220      	movs	r2, #32
    3388:	003c      	movs	r4, r7
    338a:	1ad2      	subs	r2, r2, r3
    338c:	409d      	lsls	r5, r3
    338e:	40d4      	lsrs	r4, r2
    3390:	409f      	lsls	r7, r3
    3392:	4325      	orrs	r5, r4
    3394:	429e      	cmp	r6, r3
    3396:	dd00      	ble.n	339a <__aeabi_dadd+0xe2>
    3398:	e0c4      	b.n	3524 <__aeabi_dadd+0x26c>
    339a:	1b9e      	subs	r6, r3, r6
    339c:	1c73      	adds	r3, r6, #1
    339e:	2b1f      	cmp	r3, #31
    33a0:	dd00      	ble.n	33a4 <__aeabi_dadd+0xec>
    33a2:	e0f1      	b.n	3588 <__aeabi_dadd+0x2d0>
    33a4:	2220      	movs	r2, #32
    33a6:	0038      	movs	r0, r7
    33a8:	0029      	movs	r1, r5
    33aa:	1ad2      	subs	r2, r2, r3
    33ac:	40d8      	lsrs	r0, r3
    33ae:	4091      	lsls	r1, r2
    33b0:	4097      	lsls	r7, r2
    33b2:	002c      	movs	r4, r5
    33b4:	4301      	orrs	r1, r0
    33b6:	1e78      	subs	r0, r7, #1
    33b8:	4187      	sbcs	r7, r0
    33ba:	40dc      	lsrs	r4, r3
    33bc:	2600      	movs	r6, #0
    33be:	430f      	orrs	r7, r1
    33c0:	077b      	lsls	r3, r7, #29
    33c2:	d009      	beq.n	33d8 <__aeabi_dadd+0x120>
    33c4:	230f      	movs	r3, #15
    33c6:	403b      	ands	r3, r7
    33c8:	2b04      	cmp	r3, #4
    33ca:	d005      	beq.n	33d8 <__aeabi_dadd+0x120>
    33cc:	1d3b      	adds	r3, r7, #4
    33ce:	42bb      	cmp	r3, r7
    33d0:	41bf      	sbcs	r7, r7
    33d2:	427f      	negs	r7, r7
    33d4:	19e4      	adds	r4, r4, r7
    33d6:	001f      	movs	r7, r3
    33d8:	0223      	lsls	r3, r4, #8
    33da:	d52c      	bpl.n	3436 <__aeabi_dadd+0x17e>
    33dc:	4b96      	ldr	r3, [pc, #600]	; (3638 <__aeabi_dadd+0x380>)
    33de:	3601      	adds	r6, #1
    33e0:	429e      	cmp	r6, r3
    33e2:	d100      	bne.n	33e6 <__aeabi_dadd+0x12e>
    33e4:	e09a      	b.n	351c <__aeabi_dadd+0x264>
    33e6:	4645      	mov	r5, r8
    33e8:	4b94      	ldr	r3, [pc, #592]	; (363c <__aeabi_dadd+0x384>)
    33ea:	08ff      	lsrs	r7, r7, #3
    33ec:	401c      	ands	r4, r3
    33ee:	0760      	lsls	r0, r4, #29
    33f0:	0576      	lsls	r6, r6, #21
    33f2:	0264      	lsls	r4, r4, #9
    33f4:	4307      	orrs	r7, r0
    33f6:	0b24      	lsrs	r4, r4, #12
    33f8:	0d76      	lsrs	r6, r6, #21
    33fa:	2100      	movs	r1, #0
    33fc:	0324      	lsls	r4, r4, #12
    33fe:	0b23      	lsrs	r3, r4, #12
    3400:	0d0c      	lsrs	r4, r1, #20
    3402:	4a8f      	ldr	r2, [pc, #572]	; (3640 <__aeabi_dadd+0x388>)
    3404:	0524      	lsls	r4, r4, #20
    3406:	431c      	orrs	r4, r3
    3408:	4014      	ands	r4, r2
    340a:	0533      	lsls	r3, r6, #20
    340c:	4323      	orrs	r3, r4
    340e:	005b      	lsls	r3, r3, #1
    3410:	07ed      	lsls	r5, r5, #31
    3412:	085b      	lsrs	r3, r3, #1
    3414:	432b      	orrs	r3, r5
    3416:	0038      	movs	r0, r7
    3418:	0019      	movs	r1, r3
    341a:	bc3c      	pop	{r2, r3, r4, r5}
    341c:	4690      	mov	r8, r2
    341e:	4699      	mov	r9, r3
    3420:	46a2      	mov	sl, r4
    3422:	46ab      	mov	fp, r5
    3424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3426:	4664      	mov	r4, ip
    3428:	4304      	orrs	r4, r0
    342a:	d100      	bne.n	342e <__aeabi_dadd+0x176>
    342c:	e211      	b.n	3852 <__aeabi_dadd+0x59a>
    342e:	0004      	movs	r4, r0
    3430:	4667      	mov	r7, ip
    3432:	077b      	lsls	r3, r7, #29
    3434:	d1c6      	bne.n	33c4 <__aeabi_dadd+0x10c>
    3436:	4645      	mov	r5, r8
    3438:	0760      	lsls	r0, r4, #29
    343a:	08ff      	lsrs	r7, r7, #3
    343c:	4307      	orrs	r7, r0
    343e:	08e4      	lsrs	r4, r4, #3
    3440:	4b7d      	ldr	r3, [pc, #500]	; (3638 <__aeabi_dadd+0x380>)
    3442:	429e      	cmp	r6, r3
    3444:	d030      	beq.n	34a8 <__aeabi_dadd+0x1f0>
    3446:	0324      	lsls	r4, r4, #12
    3448:	0576      	lsls	r6, r6, #21
    344a:	0b24      	lsrs	r4, r4, #12
    344c:	0d76      	lsrs	r6, r6, #21
    344e:	e7d4      	b.n	33fa <__aeabi_dadd+0x142>
    3450:	1a33      	subs	r3, r6, r0
    3452:	469a      	mov	sl, r3
    3454:	2b00      	cmp	r3, #0
    3456:	dd78      	ble.n	354a <__aeabi_dadd+0x292>
    3458:	2800      	cmp	r0, #0
    345a:	d031      	beq.n	34c0 <__aeabi_dadd+0x208>
    345c:	4876      	ldr	r0, [pc, #472]	; (3638 <__aeabi_dadd+0x380>)
    345e:	4286      	cmp	r6, r0
    3460:	d0ae      	beq.n	33c0 <__aeabi_dadd+0x108>
    3462:	2080      	movs	r0, #128	; 0x80
    3464:	0400      	lsls	r0, r0, #16
    3466:	4301      	orrs	r1, r0
    3468:	4653      	mov	r3, sl
    346a:	2b38      	cmp	r3, #56	; 0x38
    346c:	dc00      	bgt.n	3470 <__aeabi_dadd+0x1b8>
    346e:	e0e9      	b.n	3644 <__aeabi_dadd+0x38c>
    3470:	430a      	orrs	r2, r1
    3472:	1e51      	subs	r1, r2, #1
    3474:	418a      	sbcs	r2, r1
    3476:	2100      	movs	r1, #0
    3478:	19d2      	adds	r2, r2, r7
    347a:	42ba      	cmp	r2, r7
    347c:	41bf      	sbcs	r7, r7
    347e:	1909      	adds	r1, r1, r4
    3480:	427c      	negs	r4, r7
    3482:	0017      	movs	r7, r2
    3484:	190c      	adds	r4, r1, r4
    3486:	0223      	lsls	r3, r4, #8
    3488:	d5d3      	bpl.n	3432 <__aeabi_dadd+0x17a>
    348a:	4b6b      	ldr	r3, [pc, #428]	; (3638 <__aeabi_dadd+0x380>)
    348c:	3601      	adds	r6, #1
    348e:	429e      	cmp	r6, r3
    3490:	d100      	bne.n	3494 <__aeabi_dadd+0x1dc>
    3492:	e13a      	b.n	370a <__aeabi_dadd+0x452>
    3494:	2001      	movs	r0, #1
    3496:	4b69      	ldr	r3, [pc, #420]	; (363c <__aeabi_dadd+0x384>)
    3498:	401c      	ands	r4, r3
    349a:	087b      	lsrs	r3, r7, #1
    349c:	4007      	ands	r7, r0
    349e:	431f      	orrs	r7, r3
    34a0:	07e0      	lsls	r0, r4, #31
    34a2:	4307      	orrs	r7, r0
    34a4:	0864      	lsrs	r4, r4, #1
    34a6:	e78b      	b.n	33c0 <__aeabi_dadd+0x108>
    34a8:	0023      	movs	r3, r4
    34aa:	433b      	orrs	r3, r7
    34ac:	d100      	bne.n	34b0 <__aeabi_dadd+0x1f8>
    34ae:	e1cb      	b.n	3848 <__aeabi_dadd+0x590>
    34b0:	2280      	movs	r2, #128	; 0x80
    34b2:	0312      	lsls	r2, r2, #12
    34b4:	4314      	orrs	r4, r2
    34b6:	0324      	lsls	r4, r4, #12
    34b8:	0b24      	lsrs	r4, r4, #12
    34ba:	e79e      	b.n	33fa <__aeabi_dadd+0x142>
    34bc:	002e      	movs	r6, r5
    34be:	e77f      	b.n	33c0 <__aeabi_dadd+0x108>
    34c0:	0008      	movs	r0, r1
    34c2:	4310      	orrs	r0, r2
    34c4:	d100      	bne.n	34c8 <__aeabi_dadd+0x210>
    34c6:	e0b4      	b.n	3632 <__aeabi_dadd+0x37a>
    34c8:	1e58      	subs	r0, r3, #1
    34ca:	2800      	cmp	r0, #0
    34cc:	d000      	beq.n	34d0 <__aeabi_dadd+0x218>
    34ce:	e0de      	b.n	368e <__aeabi_dadd+0x3d6>
    34d0:	18ba      	adds	r2, r7, r2
    34d2:	42ba      	cmp	r2, r7
    34d4:	419b      	sbcs	r3, r3
    34d6:	1864      	adds	r4, r4, r1
    34d8:	425b      	negs	r3, r3
    34da:	18e4      	adds	r4, r4, r3
    34dc:	0017      	movs	r7, r2
    34de:	2601      	movs	r6, #1
    34e0:	0223      	lsls	r3, r4, #8
    34e2:	d5a6      	bpl.n	3432 <__aeabi_dadd+0x17a>
    34e4:	2602      	movs	r6, #2
    34e6:	e7d5      	b.n	3494 <__aeabi_dadd+0x1dc>
    34e8:	2d00      	cmp	r5, #0
    34ea:	d16e      	bne.n	35ca <__aeabi_dadd+0x312>
    34ec:	1c70      	adds	r0, r6, #1
    34ee:	0540      	lsls	r0, r0, #21
    34f0:	0d40      	lsrs	r0, r0, #21
    34f2:	2801      	cmp	r0, #1
    34f4:	dc00      	bgt.n	34f8 <__aeabi_dadd+0x240>
    34f6:	e0f9      	b.n	36ec <__aeabi_dadd+0x434>
    34f8:	1ab8      	subs	r0, r7, r2
    34fa:	4684      	mov	ip, r0
    34fc:	4287      	cmp	r7, r0
    34fe:	4180      	sbcs	r0, r0
    3500:	1ae5      	subs	r5, r4, r3
    3502:	4240      	negs	r0, r0
    3504:	1a2d      	subs	r5, r5, r0
    3506:	0228      	lsls	r0, r5, #8
    3508:	d400      	bmi.n	350c <__aeabi_dadd+0x254>
    350a:	e089      	b.n	3620 <__aeabi_dadd+0x368>
    350c:	1bd7      	subs	r7, r2, r7
    350e:	42ba      	cmp	r2, r7
    3510:	4192      	sbcs	r2, r2
    3512:	1b1c      	subs	r4, r3, r4
    3514:	4252      	negs	r2, r2
    3516:	1aa5      	subs	r5, r4, r2
    3518:	46d8      	mov	r8, fp
    351a:	e729      	b.n	3370 <__aeabi_dadd+0xb8>
    351c:	4645      	mov	r5, r8
    351e:	2400      	movs	r4, #0
    3520:	2700      	movs	r7, #0
    3522:	e76a      	b.n	33fa <__aeabi_dadd+0x142>
    3524:	4c45      	ldr	r4, [pc, #276]	; (363c <__aeabi_dadd+0x384>)
    3526:	1af6      	subs	r6, r6, r3
    3528:	402c      	ands	r4, r5
    352a:	e749      	b.n	33c0 <__aeabi_dadd+0x108>
    352c:	003d      	movs	r5, r7
    352e:	3828      	subs	r0, #40	; 0x28
    3530:	4085      	lsls	r5, r0
    3532:	2700      	movs	r7, #0
    3534:	e72e      	b.n	3394 <__aeabi_dadd+0xdc>
    3536:	0038      	movs	r0, r7
    3538:	f001 fb04 	bl	4b44 <__clzsi2>
    353c:	3020      	adds	r0, #32
    353e:	e71d      	b.n	337c <__aeabi_dadd+0xc4>
    3540:	430a      	orrs	r2, r1
    3542:	1e51      	subs	r1, r2, #1
    3544:	418a      	sbcs	r2, r1
    3546:	2100      	movs	r1, #0
    3548:	e707      	b.n	335a <__aeabi_dadd+0xa2>
    354a:	2b00      	cmp	r3, #0
    354c:	d000      	beq.n	3550 <__aeabi_dadd+0x298>
    354e:	e0f3      	b.n	3738 <__aeabi_dadd+0x480>
    3550:	1c70      	adds	r0, r6, #1
    3552:	0543      	lsls	r3, r0, #21
    3554:	0d5b      	lsrs	r3, r3, #21
    3556:	2b01      	cmp	r3, #1
    3558:	dc00      	bgt.n	355c <__aeabi_dadd+0x2a4>
    355a:	e0ad      	b.n	36b8 <__aeabi_dadd+0x400>
    355c:	4b36      	ldr	r3, [pc, #216]	; (3638 <__aeabi_dadd+0x380>)
    355e:	4298      	cmp	r0, r3
    3560:	d100      	bne.n	3564 <__aeabi_dadd+0x2ac>
    3562:	e0d1      	b.n	3708 <__aeabi_dadd+0x450>
    3564:	18ba      	adds	r2, r7, r2
    3566:	42ba      	cmp	r2, r7
    3568:	41bf      	sbcs	r7, r7
    356a:	1864      	adds	r4, r4, r1
    356c:	427f      	negs	r7, r7
    356e:	19e4      	adds	r4, r4, r7
    3570:	07e7      	lsls	r7, r4, #31
    3572:	0852      	lsrs	r2, r2, #1
    3574:	4317      	orrs	r7, r2
    3576:	0864      	lsrs	r4, r4, #1
    3578:	0006      	movs	r6, r0
    357a:	e721      	b.n	33c0 <__aeabi_dadd+0x108>
    357c:	482e      	ldr	r0, [pc, #184]	; (3638 <__aeabi_dadd+0x380>)
    357e:	4285      	cmp	r5, r0
    3580:	d100      	bne.n	3584 <__aeabi_dadd+0x2cc>
    3582:	e093      	b.n	36ac <__aeabi_dadd+0x3f4>
    3584:	001d      	movs	r5, r3
    3586:	e6d0      	b.n	332a <__aeabi_dadd+0x72>
    3588:	0029      	movs	r1, r5
    358a:	3e1f      	subs	r6, #31
    358c:	40f1      	lsrs	r1, r6
    358e:	2b20      	cmp	r3, #32
    3590:	d100      	bne.n	3594 <__aeabi_dadd+0x2dc>
    3592:	e08d      	b.n	36b0 <__aeabi_dadd+0x3f8>
    3594:	2240      	movs	r2, #64	; 0x40
    3596:	1ad3      	subs	r3, r2, r3
    3598:	409d      	lsls	r5, r3
    359a:	432f      	orrs	r7, r5
    359c:	1e7d      	subs	r5, r7, #1
    359e:	41af      	sbcs	r7, r5
    35a0:	2400      	movs	r4, #0
    35a2:	430f      	orrs	r7, r1
    35a4:	2600      	movs	r6, #0
    35a6:	e744      	b.n	3432 <__aeabi_dadd+0x17a>
    35a8:	002b      	movs	r3, r5
    35aa:	0008      	movs	r0, r1
    35ac:	3b20      	subs	r3, #32
    35ae:	40d8      	lsrs	r0, r3
    35b0:	0003      	movs	r3, r0
    35b2:	2d20      	cmp	r5, #32
    35b4:	d100      	bne.n	35b8 <__aeabi_dadd+0x300>
    35b6:	e07d      	b.n	36b4 <__aeabi_dadd+0x3fc>
    35b8:	2040      	movs	r0, #64	; 0x40
    35ba:	1b45      	subs	r5, r0, r5
    35bc:	40a9      	lsls	r1, r5
    35be:	430a      	orrs	r2, r1
    35c0:	1e51      	subs	r1, r2, #1
    35c2:	418a      	sbcs	r2, r1
    35c4:	2100      	movs	r1, #0
    35c6:	431a      	orrs	r2, r3
    35c8:	e6c7      	b.n	335a <__aeabi_dadd+0xa2>
    35ca:	2e00      	cmp	r6, #0
    35cc:	d050      	beq.n	3670 <__aeabi_dadd+0x3b8>
    35ce:	4e1a      	ldr	r6, [pc, #104]	; (3638 <__aeabi_dadd+0x380>)
    35d0:	42b0      	cmp	r0, r6
    35d2:	d057      	beq.n	3684 <__aeabi_dadd+0x3cc>
    35d4:	2680      	movs	r6, #128	; 0x80
    35d6:	426b      	negs	r3, r5
    35d8:	4699      	mov	r9, r3
    35da:	0436      	lsls	r6, r6, #16
    35dc:	4334      	orrs	r4, r6
    35de:	464b      	mov	r3, r9
    35e0:	2b38      	cmp	r3, #56	; 0x38
    35e2:	dd00      	ble.n	35e6 <__aeabi_dadd+0x32e>
    35e4:	e0d6      	b.n	3794 <__aeabi_dadd+0x4dc>
    35e6:	2b1f      	cmp	r3, #31
    35e8:	dd00      	ble.n	35ec <__aeabi_dadd+0x334>
    35ea:	e135      	b.n	3858 <__aeabi_dadd+0x5a0>
    35ec:	2620      	movs	r6, #32
    35ee:	1af5      	subs	r5, r6, r3
    35f0:	0026      	movs	r6, r4
    35f2:	40ae      	lsls	r6, r5
    35f4:	46b2      	mov	sl, r6
    35f6:	003e      	movs	r6, r7
    35f8:	40de      	lsrs	r6, r3
    35fa:	46ac      	mov	ip, r5
    35fc:	0035      	movs	r5, r6
    35fe:	4656      	mov	r6, sl
    3600:	432e      	orrs	r6, r5
    3602:	4665      	mov	r5, ip
    3604:	40af      	lsls	r7, r5
    3606:	1e7d      	subs	r5, r7, #1
    3608:	41af      	sbcs	r7, r5
    360a:	40dc      	lsrs	r4, r3
    360c:	4337      	orrs	r7, r6
    360e:	1bd7      	subs	r7, r2, r7
    3610:	42ba      	cmp	r2, r7
    3612:	4192      	sbcs	r2, r2
    3614:	1b0c      	subs	r4, r1, r4
    3616:	4252      	negs	r2, r2
    3618:	1aa4      	subs	r4, r4, r2
    361a:	0006      	movs	r6, r0
    361c:	46d8      	mov	r8, fp
    361e:	e6a3      	b.n	3368 <__aeabi_dadd+0xb0>
    3620:	4664      	mov	r4, ip
    3622:	4667      	mov	r7, ip
    3624:	432c      	orrs	r4, r5
    3626:	d000      	beq.n	362a <__aeabi_dadd+0x372>
    3628:	e6a2      	b.n	3370 <__aeabi_dadd+0xb8>
    362a:	2500      	movs	r5, #0
    362c:	2600      	movs	r6, #0
    362e:	2700      	movs	r7, #0
    3630:	e706      	b.n	3440 <__aeabi_dadd+0x188>
    3632:	001e      	movs	r6, r3
    3634:	e6c4      	b.n	33c0 <__aeabi_dadd+0x108>
    3636:	46c0      	nop			; (mov r8, r8)
    3638:	000007ff 	.word	0x000007ff
    363c:	ff7fffff 	.word	0xff7fffff
    3640:	800fffff 	.word	0x800fffff
    3644:	2b1f      	cmp	r3, #31
    3646:	dc63      	bgt.n	3710 <__aeabi_dadd+0x458>
    3648:	2020      	movs	r0, #32
    364a:	1ac3      	subs	r3, r0, r3
    364c:	0008      	movs	r0, r1
    364e:	4098      	lsls	r0, r3
    3650:	469c      	mov	ip, r3
    3652:	4683      	mov	fp, r0
    3654:	4653      	mov	r3, sl
    3656:	0010      	movs	r0, r2
    3658:	40d8      	lsrs	r0, r3
    365a:	0003      	movs	r3, r0
    365c:	4658      	mov	r0, fp
    365e:	4318      	orrs	r0, r3
    3660:	4663      	mov	r3, ip
    3662:	409a      	lsls	r2, r3
    3664:	1e53      	subs	r3, r2, #1
    3666:	419a      	sbcs	r2, r3
    3668:	4653      	mov	r3, sl
    366a:	4302      	orrs	r2, r0
    366c:	40d9      	lsrs	r1, r3
    366e:	e703      	b.n	3478 <__aeabi_dadd+0x1c0>
    3670:	0026      	movs	r6, r4
    3672:	433e      	orrs	r6, r7
    3674:	d006      	beq.n	3684 <__aeabi_dadd+0x3cc>
    3676:	43eb      	mvns	r3, r5
    3678:	4699      	mov	r9, r3
    367a:	2b00      	cmp	r3, #0
    367c:	d0c7      	beq.n	360e <__aeabi_dadd+0x356>
    367e:	4e94      	ldr	r6, [pc, #592]	; (38d0 <__aeabi_dadd+0x618>)
    3680:	42b0      	cmp	r0, r6
    3682:	d1ac      	bne.n	35de <__aeabi_dadd+0x326>
    3684:	000c      	movs	r4, r1
    3686:	0017      	movs	r7, r2
    3688:	0006      	movs	r6, r0
    368a:	46d8      	mov	r8, fp
    368c:	e698      	b.n	33c0 <__aeabi_dadd+0x108>
    368e:	4b90      	ldr	r3, [pc, #576]	; (38d0 <__aeabi_dadd+0x618>)
    3690:	459a      	cmp	sl, r3
    3692:	d00b      	beq.n	36ac <__aeabi_dadd+0x3f4>
    3694:	4682      	mov	sl, r0
    3696:	e6e7      	b.n	3468 <__aeabi_dadd+0x1b0>
    3698:	2800      	cmp	r0, #0
    369a:	d000      	beq.n	369e <__aeabi_dadd+0x3e6>
    369c:	e09e      	b.n	37dc <__aeabi_dadd+0x524>
    369e:	0018      	movs	r0, r3
    36a0:	4310      	orrs	r0, r2
    36a2:	d100      	bne.n	36a6 <__aeabi_dadd+0x3ee>
    36a4:	e0e9      	b.n	387a <__aeabi_dadd+0x5c2>
    36a6:	001c      	movs	r4, r3
    36a8:	0017      	movs	r7, r2
    36aa:	46d8      	mov	r8, fp
    36ac:	4e88      	ldr	r6, [pc, #544]	; (38d0 <__aeabi_dadd+0x618>)
    36ae:	e687      	b.n	33c0 <__aeabi_dadd+0x108>
    36b0:	2500      	movs	r5, #0
    36b2:	e772      	b.n	359a <__aeabi_dadd+0x2e2>
    36b4:	2100      	movs	r1, #0
    36b6:	e782      	b.n	35be <__aeabi_dadd+0x306>
    36b8:	0023      	movs	r3, r4
    36ba:	433b      	orrs	r3, r7
    36bc:	2e00      	cmp	r6, #0
    36be:	d000      	beq.n	36c2 <__aeabi_dadd+0x40a>
    36c0:	e0ab      	b.n	381a <__aeabi_dadd+0x562>
    36c2:	2b00      	cmp	r3, #0
    36c4:	d100      	bne.n	36c8 <__aeabi_dadd+0x410>
    36c6:	e0e7      	b.n	3898 <__aeabi_dadd+0x5e0>
    36c8:	000b      	movs	r3, r1
    36ca:	4313      	orrs	r3, r2
    36cc:	d100      	bne.n	36d0 <__aeabi_dadd+0x418>
    36ce:	e677      	b.n	33c0 <__aeabi_dadd+0x108>
    36d0:	18ba      	adds	r2, r7, r2
    36d2:	42ba      	cmp	r2, r7
    36d4:	41bf      	sbcs	r7, r7
    36d6:	1864      	adds	r4, r4, r1
    36d8:	427f      	negs	r7, r7
    36da:	19e4      	adds	r4, r4, r7
    36dc:	0223      	lsls	r3, r4, #8
    36de:	d400      	bmi.n	36e2 <__aeabi_dadd+0x42a>
    36e0:	e0f2      	b.n	38c8 <__aeabi_dadd+0x610>
    36e2:	4b7c      	ldr	r3, [pc, #496]	; (38d4 <__aeabi_dadd+0x61c>)
    36e4:	0017      	movs	r7, r2
    36e6:	401c      	ands	r4, r3
    36e8:	0006      	movs	r6, r0
    36ea:	e669      	b.n	33c0 <__aeabi_dadd+0x108>
    36ec:	0020      	movs	r0, r4
    36ee:	4338      	orrs	r0, r7
    36f0:	2e00      	cmp	r6, #0
    36f2:	d1d1      	bne.n	3698 <__aeabi_dadd+0x3e0>
    36f4:	2800      	cmp	r0, #0
    36f6:	d15b      	bne.n	37b0 <__aeabi_dadd+0x4f8>
    36f8:	001c      	movs	r4, r3
    36fa:	4314      	orrs	r4, r2
    36fc:	d100      	bne.n	3700 <__aeabi_dadd+0x448>
    36fe:	e0a8      	b.n	3852 <__aeabi_dadd+0x59a>
    3700:	001c      	movs	r4, r3
    3702:	0017      	movs	r7, r2
    3704:	46d8      	mov	r8, fp
    3706:	e65b      	b.n	33c0 <__aeabi_dadd+0x108>
    3708:	0006      	movs	r6, r0
    370a:	2400      	movs	r4, #0
    370c:	2700      	movs	r7, #0
    370e:	e697      	b.n	3440 <__aeabi_dadd+0x188>
    3710:	4650      	mov	r0, sl
    3712:	000b      	movs	r3, r1
    3714:	3820      	subs	r0, #32
    3716:	40c3      	lsrs	r3, r0
    3718:	4699      	mov	r9, r3
    371a:	4653      	mov	r3, sl
    371c:	2b20      	cmp	r3, #32
    371e:	d100      	bne.n	3722 <__aeabi_dadd+0x46a>
    3720:	e095      	b.n	384e <__aeabi_dadd+0x596>
    3722:	2340      	movs	r3, #64	; 0x40
    3724:	4650      	mov	r0, sl
    3726:	1a1b      	subs	r3, r3, r0
    3728:	4099      	lsls	r1, r3
    372a:	430a      	orrs	r2, r1
    372c:	1e51      	subs	r1, r2, #1
    372e:	418a      	sbcs	r2, r1
    3730:	464b      	mov	r3, r9
    3732:	2100      	movs	r1, #0
    3734:	431a      	orrs	r2, r3
    3736:	e69f      	b.n	3478 <__aeabi_dadd+0x1c0>
    3738:	2e00      	cmp	r6, #0
    373a:	d130      	bne.n	379e <__aeabi_dadd+0x4e6>
    373c:	0026      	movs	r6, r4
    373e:	433e      	orrs	r6, r7
    3740:	d067      	beq.n	3812 <__aeabi_dadd+0x55a>
    3742:	43db      	mvns	r3, r3
    3744:	469a      	mov	sl, r3
    3746:	2b00      	cmp	r3, #0
    3748:	d01c      	beq.n	3784 <__aeabi_dadd+0x4cc>
    374a:	4e61      	ldr	r6, [pc, #388]	; (38d0 <__aeabi_dadd+0x618>)
    374c:	42b0      	cmp	r0, r6
    374e:	d060      	beq.n	3812 <__aeabi_dadd+0x55a>
    3750:	4653      	mov	r3, sl
    3752:	2b38      	cmp	r3, #56	; 0x38
    3754:	dd00      	ble.n	3758 <__aeabi_dadd+0x4a0>
    3756:	e096      	b.n	3886 <__aeabi_dadd+0x5ce>
    3758:	2b1f      	cmp	r3, #31
    375a:	dd00      	ble.n	375e <__aeabi_dadd+0x4a6>
    375c:	e09f      	b.n	389e <__aeabi_dadd+0x5e6>
    375e:	2620      	movs	r6, #32
    3760:	1af3      	subs	r3, r6, r3
    3762:	0026      	movs	r6, r4
    3764:	409e      	lsls	r6, r3
    3766:	469c      	mov	ip, r3
    3768:	46b3      	mov	fp, r6
    376a:	4653      	mov	r3, sl
    376c:	003e      	movs	r6, r7
    376e:	40de      	lsrs	r6, r3
    3770:	0033      	movs	r3, r6
    3772:	465e      	mov	r6, fp
    3774:	431e      	orrs	r6, r3
    3776:	4663      	mov	r3, ip
    3778:	409f      	lsls	r7, r3
    377a:	1e7b      	subs	r3, r7, #1
    377c:	419f      	sbcs	r7, r3
    377e:	4653      	mov	r3, sl
    3780:	40dc      	lsrs	r4, r3
    3782:	4337      	orrs	r7, r6
    3784:	18bf      	adds	r7, r7, r2
    3786:	4297      	cmp	r7, r2
    3788:	4192      	sbcs	r2, r2
    378a:	1864      	adds	r4, r4, r1
    378c:	4252      	negs	r2, r2
    378e:	18a4      	adds	r4, r4, r2
    3790:	0006      	movs	r6, r0
    3792:	e678      	b.n	3486 <__aeabi_dadd+0x1ce>
    3794:	4327      	orrs	r7, r4
    3796:	1e7c      	subs	r4, r7, #1
    3798:	41a7      	sbcs	r7, r4
    379a:	2400      	movs	r4, #0
    379c:	e737      	b.n	360e <__aeabi_dadd+0x356>
    379e:	4e4c      	ldr	r6, [pc, #304]	; (38d0 <__aeabi_dadd+0x618>)
    37a0:	42b0      	cmp	r0, r6
    37a2:	d036      	beq.n	3812 <__aeabi_dadd+0x55a>
    37a4:	2680      	movs	r6, #128	; 0x80
    37a6:	425b      	negs	r3, r3
    37a8:	0436      	lsls	r6, r6, #16
    37aa:	469a      	mov	sl, r3
    37ac:	4334      	orrs	r4, r6
    37ae:	e7cf      	b.n	3750 <__aeabi_dadd+0x498>
    37b0:	0018      	movs	r0, r3
    37b2:	4310      	orrs	r0, r2
    37b4:	d100      	bne.n	37b8 <__aeabi_dadd+0x500>
    37b6:	e603      	b.n	33c0 <__aeabi_dadd+0x108>
    37b8:	1ab8      	subs	r0, r7, r2
    37ba:	4684      	mov	ip, r0
    37bc:	4567      	cmp	r7, ip
    37be:	41ad      	sbcs	r5, r5
    37c0:	1ae0      	subs	r0, r4, r3
    37c2:	426d      	negs	r5, r5
    37c4:	1b40      	subs	r0, r0, r5
    37c6:	0205      	lsls	r5, r0, #8
    37c8:	d400      	bmi.n	37cc <__aeabi_dadd+0x514>
    37ca:	e62c      	b.n	3426 <__aeabi_dadd+0x16e>
    37cc:	1bd7      	subs	r7, r2, r7
    37ce:	42ba      	cmp	r2, r7
    37d0:	4192      	sbcs	r2, r2
    37d2:	1b1c      	subs	r4, r3, r4
    37d4:	4252      	negs	r2, r2
    37d6:	1aa4      	subs	r4, r4, r2
    37d8:	46d8      	mov	r8, fp
    37da:	e5f1      	b.n	33c0 <__aeabi_dadd+0x108>
    37dc:	0018      	movs	r0, r3
    37de:	4310      	orrs	r0, r2
    37e0:	d100      	bne.n	37e4 <__aeabi_dadd+0x52c>
    37e2:	e763      	b.n	36ac <__aeabi_dadd+0x3f4>
    37e4:	08f8      	lsrs	r0, r7, #3
    37e6:	0767      	lsls	r7, r4, #29
    37e8:	4307      	orrs	r7, r0
    37ea:	2080      	movs	r0, #128	; 0x80
    37ec:	08e4      	lsrs	r4, r4, #3
    37ee:	0300      	lsls	r0, r0, #12
    37f0:	4204      	tst	r4, r0
    37f2:	d008      	beq.n	3806 <__aeabi_dadd+0x54e>
    37f4:	08dd      	lsrs	r5, r3, #3
    37f6:	4205      	tst	r5, r0
    37f8:	d105      	bne.n	3806 <__aeabi_dadd+0x54e>
    37fa:	08d2      	lsrs	r2, r2, #3
    37fc:	0759      	lsls	r1, r3, #29
    37fe:	4311      	orrs	r1, r2
    3800:	000f      	movs	r7, r1
    3802:	002c      	movs	r4, r5
    3804:	46d8      	mov	r8, fp
    3806:	0f7b      	lsrs	r3, r7, #29
    3808:	00e4      	lsls	r4, r4, #3
    380a:	431c      	orrs	r4, r3
    380c:	00ff      	lsls	r7, r7, #3
    380e:	4e30      	ldr	r6, [pc, #192]	; (38d0 <__aeabi_dadd+0x618>)
    3810:	e5d6      	b.n	33c0 <__aeabi_dadd+0x108>
    3812:	000c      	movs	r4, r1
    3814:	0017      	movs	r7, r2
    3816:	0006      	movs	r6, r0
    3818:	e5d2      	b.n	33c0 <__aeabi_dadd+0x108>
    381a:	2b00      	cmp	r3, #0
    381c:	d038      	beq.n	3890 <__aeabi_dadd+0x5d8>
    381e:	000b      	movs	r3, r1
    3820:	4313      	orrs	r3, r2
    3822:	d100      	bne.n	3826 <__aeabi_dadd+0x56e>
    3824:	e742      	b.n	36ac <__aeabi_dadd+0x3f4>
    3826:	08f8      	lsrs	r0, r7, #3
    3828:	0767      	lsls	r7, r4, #29
    382a:	4307      	orrs	r7, r0
    382c:	2080      	movs	r0, #128	; 0x80
    382e:	08e4      	lsrs	r4, r4, #3
    3830:	0300      	lsls	r0, r0, #12
    3832:	4204      	tst	r4, r0
    3834:	d0e7      	beq.n	3806 <__aeabi_dadd+0x54e>
    3836:	08cb      	lsrs	r3, r1, #3
    3838:	4203      	tst	r3, r0
    383a:	d1e4      	bne.n	3806 <__aeabi_dadd+0x54e>
    383c:	08d2      	lsrs	r2, r2, #3
    383e:	0749      	lsls	r1, r1, #29
    3840:	4311      	orrs	r1, r2
    3842:	000f      	movs	r7, r1
    3844:	001c      	movs	r4, r3
    3846:	e7de      	b.n	3806 <__aeabi_dadd+0x54e>
    3848:	2700      	movs	r7, #0
    384a:	2400      	movs	r4, #0
    384c:	e5d5      	b.n	33fa <__aeabi_dadd+0x142>
    384e:	2100      	movs	r1, #0
    3850:	e76b      	b.n	372a <__aeabi_dadd+0x472>
    3852:	2500      	movs	r5, #0
    3854:	2700      	movs	r7, #0
    3856:	e5f3      	b.n	3440 <__aeabi_dadd+0x188>
    3858:	464e      	mov	r6, r9
    385a:	0025      	movs	r5, r4
    385c:	3e20      	subs	r6, #32
    385e:	40f5      	lsrs	r5, r6
    3860:	464b      	mov	r3, r9
    3862:	002e      	movs	r6, r5
    3864:	2b20      	cmp	r3, #32
    3866:	d02d      	beq.n	38c4 <__aeabi_dadd+0x60c>
    3868:	2540      	movs	r5, #64	; 0x40
    386a:	1aed      	subs	r5, r5, r3
    386c:	40ac      	lsls	r4, r5
    386e:	4327      	orrs	r7, r4
    3870:	1e7c      	subs	r4, r7, #1
    3872:	41a7      	sbcs	r7, r4
    3874:	2400      	movs	r4, #0
    3876:	4337      	orrs	r7, r6
    3878:	e6c9      	b.n	360e <__aeabi_dadd+0x356>
    387a:	2480      	movs	r4, #128	; 0x80
    387c:	2500      	movs	r5, #0
    387e:	0324      	lsls	r4, r4, #12
    3880:	4e13      	ldr	r6, [pc, #76]	; (38d0 <__aeabi_dadd+0x618>)
    3882:	2700      	movs	r7, #0
    3884:	e5dc      	b.n	3440 <__aeabi_dadd+0x188>
    3886:	4327      	orrs	r7, r4
    3888:	1e7c      	subs	r4, r7, #1
    388a:	41a7      	sbcs	r7, r4
    388c:	2400      	movs	r4, #0
    388e:	e779      	b.n	3784 <__aeabi_dadd+0x4cc>
    3890:	000c      	movs	r4, r1
    3892:	0017      	movs	r7, r2
    3894:	4e0e      	ldr	r6, [pc, #56]	; (38d0 <__aeabi_dadd+0x618>)
    3896:	e593      	b.n	33c0 <__aeabi_dadd+0x108>
    3898:	000c      	movs	r4, r1
    389a:	0017      	movs	r7, r2
    389c:	e590      	b.n	33c0 <__aeabi_dadd+0x108>
    389e:	4656      	mov	r6, sl
    38a0:	0023      	movs	r3, r4
    38a2:	3e20      	subs	r6, #32
    38a4:	40f3      	lsrs	r3, r6
    38a6:	4699      	mov	r9, r3
    38a8:	4653      	mov	r3, sl
    38aa:	2b20      	cmp	r3, #32
    38ac:	d00e      	beq.n	38cc <__aeabi_dadd+0x614>
    38ae:	2340      	movs	r3, #64	; 0x40
    38b0:	4656      	mov	r6, sl
    38b2:	1b9b      	subs	r3, r3, r6
    38b4:	409c      	lsls	r4, r3
    38b6:	4327      	orrs	r7, r4
    38b8:	1e7c      	subs	r4, r7, #1
    38ba:	41a7      	sbcs	r7, r4
    38bc:	464b      	mov	r3, r9
    38be:	2400      	movs	r4, #0
    38c0:	431f      	orrs	r7, r3
    38c2:	e75f      	b.n	3784 <__aeabi_dadd+0x4cc>
    38c4:	2400      	movs	r4, #0
    38c6:	e7d2      	b.n	386e <__aeabi_dadd+0x5b6>
    38c8:	0017      	movs	r7, r2
    38ca:	e5b2      	b.n	3432 <__aeabi_dadd+0x17a>
    38cc:	2400      	movs	r4, #0
    38ce:	e7f2      	b.n	38b6 <__aeabi_dadd+0x5fe>
    38d0:	000007ff 	.word	0x000007ff
    38d4:	ff7fffff 	.word	0xff7fffff

000038d8 <__aeabi_ddiv>:
    38d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38da:	4657      	mov	r7, sl
    38dc:	4645      	mov	r5, r8
    38de:	46de      	mov	lr, fp
    38e0:	464e      	mov	r6, r9
    38e2:	b5e0      	push	{r5, r6, r7, lr}
    38e4:	004c      	lsls	r4, r1, #1
    38e6:	030e      	lsls	r6, r1, #12
    38e8:	b087      	sub	sp, #28
    38ea:	4683      	mov	fp, r0
    38ec:	4692      	mov	sl, r2
    38ee:	001d      	movs	r5, r3
    38f0:	4680      	mov	r8, r0
    38f2:	0b36      	lsrs	r6, r6, #12
    38f4:	0d64      	lsrs	r4, r4, #21
    38f6:	0fcf      	lsrs	r7, r1, #31
    38f8:	2c00      	cmp	r4, #0
    38fa:	d04f      	beq.n	399c <__aeabi_ddiv+0xc4>
    38fc:	4b6f      	ldr	r3, [pc, #444]	; (3abc <__aeabi_ddiv+0x1e4>)
    38fe:	429c      	cmp	r4, r3
    3900:	d035      	beq.n	396e <__aeabi_ddiv+0x96>
    3902:	2380      	movs	r3, #128	; 0x80
    3904:	0f42      	lsrs	r2, r0, #29
    3906:	041b      	lsls	r3, r3, #16
    3908:	00f6      	lsls	r6, r6, #3
    390a:	4313      	orrs	r3, r2
    390c:	4333      	orrs	r3, r6
    390e:	4699      	mov	r9, r3
    3910:	00c3      	lsls	r3, r0, #3
    3912:	4698      	mov	r8, r3
    3914:	4b6a      	ldr	r3, [pc, #424]	; (3ac0 <__aeabi_ddiv+0x1e8>)
    3916:	2600      	movs	r6, #0
    3918:	469c      	mov	ip, r3
    391a:	2300      	movs	r3, #0
    391c:	4464      	add	r4, ip
    391e:	9303      	str	r3, [sp, #12]
    3920:	032b      	lsls	r3, r5, #12
    3922:	0b1b      	lsrs	r3, r3, #12
    3924:	469b      	mov	fp, r3
    3926:	006b      	lsls	r3, r5, #1
    3928:	0fed      	lsrs	r5, r5, #31
    392a:	4650      	mov	r0, sl
    392c:	0d5b      	lsrs	r3, r3, #21
    392e:	9501      	str	r5, [sp, #4]
    3930:	d05e      	beq.n	39f0 <__aeabi_ddiv+0x118>
    3932:	4a62      	ldr	r2, [pc, #392]	; (3abc <__aeabi_ddiv+0x1e4>)
    3934:	4293      	cmp	r3, r2
    3936:	d053      	beq.n	39e0 <__aeabi_ddiv+0x108>
    3938:	465a      	mov	r2, fp
    393a:	00d1      	lsls	r1, r2, #3
    393c:	2280      	movs	r2, #128	; 0x80
    393e:	0f40      	lsrs	r0, r0, #29
    3940:	0412      	lsls	r2, r2, #16
    3942:	4302      	orrs	r2, r0
    3944:	430a      	orrs	r2, r1
    3946:	4693      	mov	fp, r2
    3948:	4652      	mov	r2, sl
    394a:	00d1      	lsls	r1, r2, #3
    394c:	4a5c      	ldr	r2, [pc, #368]	; (3ac0 <__aeabi_ddiv+0x1e8>)
    394e:	4694      	mov	ip, r2
    3950:	2200      	movs	r2, #0
    3952:	4463      	add	r3, ip
    3954:	0038      	movs	r0, r7
    3956:	4068      	eors	r0, r5
    3958:	4684      	mov	ip, r0
    395a:	9002      	str	r0, [sp, #8]
    395c:	1ae4      	subs	r4, r4, r3
    395e:	4316      	orrs	r6, r2
    3960:	2e0f      	cmp	r6, #15
    3962:	d900      	bls.n	3966 <__aeabi_ddiv+0x8e>
    3964:	e0b4      	b.n	3ad0 <__aeabi_ddiv+0x1f8>
    3966:	4b57      	ldr	r3, [pc, #348]	; (3ac4 <__aeabi_ddiv+0x1ec>)
    3968:	00b6      	lsls	r6, r6, #2
    396a:	599b      	ldr	r3, [r3, r6]
    396c:	469f      	mov	pc, r3
    396e:	0003      	movs	r3, r0
    3970:	4333      	orrs	r3, r6
    3972:	4699      	mov	r9, r3
    3974:	d16c      	bne.n	3a50 <__aeabi_ddiv+0x178>
    3976:	2300      	movs	r3, #0
    3978:	4698      	mov	r8, r3
    397a:	3302      	adds	r3, #2
    397c:	2608      	movs	r6, #8
    397e:	9303      	str	r3, [sp, #12]
    3980:	e7ce      	b.n	3920 <__aeabi_ddiv+0x48>
    3982:	46cb      	mov	fp, r9
    3984:	4641      	mov	r1, r8
    3986:	9a03      	ldr	r2, [sp, #12]
    3988:	9701      	str	r7, [sp, #4]
    398a:	2a02      	cmp	r2, #2
    398c:	d165      	bne.n	3a5a <__aeabi_ddiv+0x182>
    398e:	9b01      	ldr	r3, [sp, #4]
    3990:	4c4a      	ldr	r4, [pc, #296]	; (3abc <__aeabi_ddiv+0x1e4>)
    3992:	469c      	mov	ip, r3
    3994:	2300      	movs	r3, #0
    3996:	2200      	movs	r2, #0
    3998:	4698      	mov	r8, r3
    399a:	e06b      	b.n	3a74 <__aeabi_ddiv+0x19c>
    399c:	0003      	movs	r3, r0
    399e:	4333      	orrs	r3, r6
    39a0:	4699      	mov	r9, r3
    39a2:	d04e      	beq.n	3a42 <__aeabi_ddiv+0x16a>
    39a4:	2e00      	cmp	r6, #0
    39a6:	d100      	bne.n	39aa <__aeabi_ddiv+0xd2>
    39a8:	e1bc      	b.n	3d24 <__aeabi_ddiv+0x44c>
    39aa:	0030      	movs	r0, r6
    39ac:	f001 f8ca 	bl	4b44 <__clzsi2>
    39b0:	0003      	movs	r3, r0
    39b2:	3b0b      	subs	r3, #11
    39b4:	2b1c      	cmp	r3, #28
    39b6:	dd00      	ble.n	39ba <__aeabi_ddiv+0xe2>
    39b8:	e1ac      	b.n	3d14 <__aeabi_ddiv+0x43c>
    39ba:	221d      	movs	r2, #29
    39bc:	1ad3      	subs	r3, r2, r3
    39be:	465a      	mov	r2, fp
    39c0:	0001      	movs	r1, r0
    39c2:	40da      	lsrs	r2, r3
    39c4:	3908      	subs	r1, #8
    39c6:	408e      	lsls	r6, r1
    39c8:	0013      	movs	r3, r2
    39ca:	4333      	orrs	r3, r6
    39cc:	4699      	mov	r9, r3
    39ce:	465b      	mov	r3, fp
    39d0:	408b      	lsls	r3, r1
    39d2:	4698      	mov	r8, r3
    39d4:	2300      	movs	r3, #0
    39d6:	4c3c      	ldr	r4, [pc, #240]	; (3ac8 <__aeabi_ddiv+0x1f0>)
    39d8:	2600      	movs	r6, #0
    39da:	1a24      	subs	r4, r4, r0
    39dc:	9303      	str	r3, [sp, #12]
    39de:	e79f      	b.n	3920 <__aeabi_ddiv+0x48>
    39e0:	4651      	mov	r1, sl
    39e2:	465a      	mov	r2, fp
    39e4:	4311      	orrs	r1, r2
    39e6:	d129      	bne.n	3a3c <__aeabi_ddiv+0x164>
    39e8:	2200      	movs	r2, #0
    39ea:	4693      	mov	fp, r2
    39ec:	3202      	adds	r2, #2
    39ee:	e7b1      	b.n	3954 <__aeabi_ddiv+0x7c>
    39f0:	4659      	mov	r1, fp
    39f2:	4301      	orrs	r1, r0
    39f4:	d01e      	beq.n	3a34 <__aeabi_ddiv+0x15c>
    39f6:	465b      	mov	r3, fp
    39f8:	2b00      	cmp	r3, #0
    39fa:	d100      	bne.n	39fe <__aeabi_ddiv+0x126>
    39fc:	e19e      	b.n	3d3c <__aeabi_ddiv+0x464>
    39fe:	4658      	mov	r0, fp
    3a00:	f001 f8a0 	bl	4b44 <__clzsi2>
    3a04:	0003      	movs	r3, r0
    3a06:	3b0b      	subs	r3, #11
    3a08:	2b1c      	cmp	r3, #28
    3a0a:	dd00      	ble.n	3a0e <__aeabi_ddiv+0x136>
    3a0c:	e18f      	b.n	3d2e <__aeabi_ddiv+0x456>
    3a0e:	0002      	movs	r2, r0
    3a10:	4659      	mov	r1, fp
    3a12:	3a08      	subs	r2, #8
    3a14:	4091      	lsls	r1, r2
    3a16:	468b      	mov	fp, r1
    3a18:	211d      	movs	r1, #29
    3a1a:	1acb      	subs	r3, r1, r3
    3a1c:	4651      	mov	r1, sl
    3a1e:	40d9      	lsrs	r1, r3
    3a20:	000b      	movs	r3, r1
    3a22:	4659      	mov	r1, fp
    3a24:	430b      	orrs	r3, r1
    3a26:	4651      	mov	r1, sl
    3a28:	469b      	mov	fp, r3
    3a2a:	4091      	lsls	r1, r2
    3a2c:	4b26      	ldr	r3, [pc, #152]	; (3ac8 <__aeabi_ddiv+0x1f0>)
    3a2e:	2200      	movs	r2, #0
    3a30:	1a1b      	subs	r3, r3, r0
    3a32:	e78f      	b.n	3954 <__aeabi_ddiv+0x7c>
    3a34:	2300      	movs	r3, #0
    3a36:	2201      	movs	r2, #1
    3a38:	469b      	mov	fp, r3
    3a3a:	e78b      	b.n	3954 <__aeabi_ddiv+0x7c>
    3a3c:	4651      	mov	r1, sl
    3a3e:	2203      	movs	r2, #3
    3a40:	e788      	b.n	3954 <__aeabi_ddiv+0x7c>
    3a42:	2300      	movs	r3, #0
    3a44:	4698      	mov	r8, r3
    3a46:	3301      	adds	r3, #1
    3a48:	2604      	movs	r6, #4
    3a4a:	2400      	movs	r4, #0
    3a4c:	9303      	str	r3, [sp, #12]
    3a4e:	e767      	b.n	3920 <__aeabi_ddiv+0x48>
    3a50:	2303      	movs	r3, #3
    3a52:	46b1      	mov	r9, r6
    3a54:	9303      	str	r3, [sp, #12]
    3a56:	260c      	movs	r6, #12
    3a58:	e762      	b.n	3920 <__aeabi_ddiv+0x48>
    3a5a:	2a03      	cmp	r2, #3
    3a5c:	d100      	bne.n	3a60 <__aeabi_ddiv+0x188>
    3a5e:	e25c      	b.n	3f1a <__aeabi_ddiv+0x642>
    3a60:	9b01      	ldr	r3, [sp, #4]
    3a62:	2a01      	cmp	r2, #1
    3a64:	d000      	beq.n	3a68 <__aeabi_ddiv+0x190>
    3a66:	e1e4      	b.n	3e32 <__aeabi_ddiv+0x55a>
    3a68:	4013      	ands	r3, r2
    3a6a:	469c      	mov	ip, r3
    3a6c:	2300      	movs	r3, #0
    3a6e:	2400      	movs	r4, #0
    3a70:	2200      	movs	r2, #0
    3a72:	4698      	mov	r8, r3
    3a74:	2100      	movs	r1, #0
    3a76:	0312      	lsls	r2, r2, #12
    3a78:	0b13      	lsrs	r3, r2, #12
    3a7a:	0d0a      	lsrs	r2, r1, #20
    3a7c:	0512      	lsls	r2, r2, #20
    3a7e:	431a      	orrs	r2, r3
    3a80:	0523      	lsls	r3, r4, #20
    3a82:	4c12      	ldr	r4, [pc, #72]	; (3acc <__aeabi_ddiv+0x1f4>)
    3a84:	4640      	mov	r0, r8
    3a86:	4022      	ands	r2, r4
    3a88:	4313      	orrs	r3, r2
    3a8a:	4662      	mov	r2, ip
    3a8c:	005b      	lsls	r3, r3, #1
    3a8e:	07d2      	lsls	r2, r2, #31
    3a90:	085b      	lsrs	r3, r3, #1
    3a92:	4313      	orrs	r3, r2
    3a94:	0019      	movs	r1, r3
    3a96:	b007      	add	sp, #28
    3a98:	bc3c      	pop	{r2, r3, r4, r5}
    3a9a:	4690      	mov	r8, r2
    3a9c:	4699      	mov	r9, r3
    3a9e:	46a2      	mov	sl, r4
    3aa0:	46ab      	mov	fp, r5
    3aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aa4:	2300      	movs	r3, #0
    3aa6:	2280      	movs	r2, #128	; 0x80
    3aa8:	469c      	mov	ip, r3
    3aaa:	0312      	lsls	r2, r2, #12
    3aac:	4698      	mov	r8, r3
    3aae:	4c03      	ldr	r4, [pc, #12]	; (3abc <__aeabi_ddiv+0x1e4>)
    3ab0:	e7e0      	b.n	3a74 <__aeabi_ddiv+0x19c>
    3ab2:	2300      	movs	r3, #0
    3ab4:	4c01      	ldr	r4, [pc, #4]	; (3abc <__aeabi_ddiv+0x1e4>)
    3ab6:	2200      	movs	r2, #0
    3ab8:	4698      	mov	r8, r3
    3aba:	e7db      	b.n	3a74 <__aeabi_ddiv+0x19c>
    3abc:	000007ff 	.word	0x000007ff
    3ac0:	fffffc01 	.word	0xfffffc01
    3ac4:	00004eb4 	.word	0x00004eb4
    3ac8:	fffffc0d 	.word	0xfffffc0d
    3acc:	800fffff 	.word	0x800fffff
    3ad0:	45d9      	cmp	r9, fp
    3ad2:	d900      	bls.n	3ad6 <__aeabi_ddiv+0x1fe>
    3ad4:	e139      	b.n	3d4a <__aeabi_ddiv+0x472>
    3ad6:	d100      	bne.n	3ada <__aeabi_ddiv+0x202>
    3ad8:	e134      	b.n	3d44 <__aeabi_ddiv+0x46c>
    3ada:	2300      	movs	r3, #0
    3adc:	4646      	mov	r6, r8
    3ade:	464d      	mov	r5, r9
    3ae0:	469a      	mov	sl, r3
    3ae2:	3c01      	subs	r4, #1
    3ae4:	465b      	mov	r3, fp
    3ae6:	0e0a      	lsrs	r2, r1, #24
    3ae8:	021b      	lsls	r3, r3, #8
    3aea:	431a      	orrs	r2, r3
    3aec:	020b      	lsls	r3, r1, #8
    3aee:	0c17      	lsrs	r7, r2, #16
    3af0:	9303      	str	r3, [sp, #12]
    3af2:	0413      	lsls	r3, r2, #16
    3af4:	0c1b      	lsrs	r3, r3, #16
    3af6:	0039      	movs	r1, r7
    3af8:	0028      	movs	r0, r5
    3afa:	4690      	mov	r8, r2
    3afc:	9301      	str	r3, [sp, #4]
    3afe:	f7ff fb25 	bl	314c <__udivsi3>
    3b02:	0002      	movs	r2, r0
    3b04:	9b01      	ldr	r3, [sp, #4]
    3b06:	4683      	mov	fp, r0
    3b08:	435a      	muls	r2, r3
    3b0a:	0028      	movs	r0, r5
    3b0c:	0039      	movs	r1, r7
    3b0e:	4691      	mov	r9, r2
    3b10:	f7ff fba2 	bl	3258 <__aeabi_uidivmod>
    3b14:	0c35      	lsrs	r5, r6, #16
    3b16:	0409      	lsls	r1, r1, #16
    3b18:	430d      	orrs	r5, r1
    3b1a:	45a9      	cmp	r9, r5
    3b1c:	d90d      	bls.n	3b3a <__aeabi_ddiv+0x262>
    3b1e:	465b      	mov	r3, fp
    3b20:	4445      	add	r5, r8
    3b22:	3b01      	subs	r3, #1
    3b24:	45a8      	cmp	r8, r5
    3b26:	d900      	bls.n	3b2a <__aeabi_ddiv+0x252>
    3b28:	e13a      	b.n	3da0 <__aeabi_ddiv+0x4c8>
    3b2a:	45a9      	cmp	r9, r5
    3b2c:	d800      	bhi.n	3b30 <__aeabi_ddiv+0x258>
    3b2e:	e137      	b.n	3da0 <__aeabi_ddiv+0x4c8>
    3b30:	2302      	movs	r3, #2
    3b32:	425b      	negs	r3, r3
    3b34:	469c      	mov	ip, r3
    3b36:	4445      	add	r5, r8
    3b38:	44e3      	add	fp, ip
    3b3a:	464b      	mov	r3, r9
    3b3c:	1aeb      	subs	r3, r5, r3
    3b3e:	0039      	movs	r1, r7
    3b40:	0018      	movs	r0, r3
    3b42:	9304      	str	r3, [sp, #16]
    3b44:	f7ff fb02 	bl	314c <__udivsi3>
    3b48:	9b01      	ldr	r3, [sp, #4]
    3b4a:	0005      	movs	r5, r0
    3b4c:	4343      	muls	r3, r0
    3b4e:	0039      	movs	r1, r7
    3b50:	9804      	ldr	r0, [sp, #16]
    3b52:	4699      	mov	r9, r3
    3b54:	f7ff fb80 	bl	3258 <__aeabi_uidivmod>
    3b58:	0433      	lsls	r3, r6, #16
    3b5a:	0409      	lsls	r1, r1, #16
    3b5c:	0c1b      	lsrs	r3, r3, #16
    3b5e:	430b      	orrs	r3, r1
    3b60:	4599      	cmp	r9, r3
    3b62:	d909      	bls.n	3b78 <__aeabi_ddiv+0x2a0>
    3b64:	4443      	add	r3, r8
    3b66:	1e6a      	subs	r2, r5, #1
    3b68:	4598      	cmp	r8, r3
    3b6a:	d900      	bls.n	3b6e <__aeabi_ddiv+0x296>
    3b6c:	e11a      	b.n	3da4 <__aeabi_ddiv+0x4cc>
    3b6e:	4599      	cmp	r9, r3
    3b70:	d800      	bhi.n	3b74 <__aeabi_ddiv+0x29c>
    3b72:	e117      	b.n	3da4 <__aeabi_ddiv+0x4cc>
    3b74:	3d02      	subs	r5, #2
    3b76:	4443      	add	r3, r8
    3b78:	464a      	mov	r2, r9
    3b7a:	1a9b      	subs	r3, r3, r2
    3b7c:	465a      	mov	r2, fp
    3b7e:	0412      	lsls	r2, r2, #16
    3b80:	432a      	orrs	r2, r5
    3b82:	9903      	ldr	r1, [sp, #12]
    3b84:	4693      	mov	fp, r2
    3b86:	0c10      	lsrs	r0, r2, #16
    3b88:	0c0a      	lsrs	r2, r1, #16
    3b8a:	4691      	mov	r9, r2
    3b8c:	0409      	lsls	r1, r1, #16
    3b8e:	465a      	mov	r2, fp
    3b90:	0c09      	lsrs	r1, r1, #16
    3b92:	464e      	mov	r6, r9
    3b94:	000d      	movs	r5, r1
    3b96:	0412      	lsls	r2, r2, #16
    3b98:	0c12      	lsrs	r2, r2, #16
    3b9a:	4345      	muls	r5, r0
    3b9c:	9105      	str	r1, [sp, #20]
    3b9e:	4351      	muls	r1, r2
    3ba0:	4372      	muls	r2, r6
    3ba2:	4370      	muls	r0, r6
    3ba4:	1952      	adds	r2, r2, r5
    3ba6:	0c0e      	lsrs	r6, r1, #16
    3ba8:	18b2      	adds	r2, r6, r2
    3baa:	4295      	cmp	r5, r2
    3bac:	d903      	bls.n	3bb6 <__aeabi_ddiv+0x2de>
    3bae:	2580      	movs	r5, #128	; 0x80
    3bb0:	026d      	lsls	r5, r5, #9
    3bb2:	46ac      	mov	ip, r5
    3bb4:	4460      	add	r0, ip
    3bb6:	0c15      	lsrs	r5, r2, #16
    3bb8:	0409      	lsls	r1, r1, #16
    3bba:	0412      	lsls	r2, r2, #16
    3bbc:	0c09      	lsrs	r1, r1, #16
    3bbe:	1828      	adds	r0, r5, r0
    3bc0:	1852      	adds	r2, r2, r1
    3bc2:	4283      	cmp	r3, r0
    3bc4:	d200      	bcs.n	3bc8 <__aeabi_ddiv+0x2f0>
    3bc6:	e0ce      	b.n	3d66 <__aeabi_ddiv+0x48e>
    3bc8:	d100      	bne.n	3bcc <__aeabi_ddiv+0x2f4>
    3bca:	e0c8      	b.n	3d5e <__aeabi_ddiv+0x486>
    3bcc:	1a1d      	subs	r5, r3, r0
    3bce:	4653      	mov	r3, sl
    3bd0:	1a9e      	subs	r6, r3, r2
    3bd2:	45b2      	cmp	sl, r6
    3bd4:	4192      	sbcs	r2, r2
    3bd6:	4252      	negs	r2, r2
    3bd8:	1aab      	subs	r3, r5, r2
    3bda:	469a      	mov	sl, r3
    3bdc:	4598      	cmp	r8, r3
    3bde:	d100      	bne.n	3be2 <__aeabi_ddiv+0x30a>
    3be0:	e117      	b.n	3e12 <__aeabi_ddiv+0x53a>
    3be2:	0039      	movs	r1, r7
    3be4:	0018      	movs	r0, r3
    3be6:	f7ff fab1 	bl	314c <__udivsi3>
    3bea:	9b01      	ldr	r3, [sp, #4]
    3bec:	0005      	movs	r5, r0
    3bee:	4343      	muls	r3, r0
    3bf0:	0039      	movs	r1, r7
    3bf2:	4650      	mov	r0, sl
    3bf4:	9304      	str	r3, [sp, #16]
    3bf6:	f7ff fb2f 	bl	3258 <__aeabi_uidivmod>
    3bfa:	9804      	ldr	r0, [sp, #16]
    3bfc:	040b      	lsls	r3, r1, #16
    3bfe:	0c31      	lsrs	r1, r6, #16
    3c00:	4319      	orrs	r1, r3
    3c02:	4288      	cmp	r0, r1
    3c04:	d909      	bls.n	3c1a <__aeabi_ddiv+0x342>
    3c06:	4441      	add	r1, r8
    3c08:	1e6b      	subs	r3, r5, #1
    3c0a:	4588      	cmp	r8, r1
    3c0c:	d900      	bls.n	3c10 <__aeabi_ddiv+0x338>
    3c0e:	e107      	b.n	3e20 <__aeabi_ddiv+0x548>
    3c10:	4288      	cmp	r0, r1
    3c12:	d800      	bhi.n	3c16 <__aeabi_ddiv+0x33e>
    3c14:	e104      	b.n	3e20 <__aeabi_ddiv+0x548>
    3c16:	3d02      	subs	r5, #2
    3c18:	4441      	add	r1, r8
    3c1a:	9b04      	ldr	r3, [sp, #16]
    3c1c:	1acb      	subs	r3, r1, r3
    3c1e:	0018      	movs	r0, r3
    3c20:	0039      	movs	r1, r7
    3c22:	9304      	str	r3, [sp, #16]
    3c24:	f7ff fa92 	bl	314c <__udivsi3>
    3c28:	9b01      	ldr	r3, [sp, #4]
    3c2a:	4682      	mov	sl, r0
    3c2c:	4343      	muls	r3, r0
    3c2e:	0039      	movs	r1, r7
    3c30:	9804      	ldr	r0, [sp, #16]
    3c32:	9301      	str	r3, [sp, #4]
    3c34:	f7ff fb10 	bl	3258 <__aeabi_uidivmod>
    3c38:	9801      	ldr	r0, [sp, #4]
    3c3a:	040b      	lsls	r3, r1, #16
    3c3c:	0431      	lsls	r1, r6, #16
    3c3e:	0c09      	lsrs	r1, r1, #16
    3c40:	4319      	orrs	r1, r3
    3c42:	4288      	cmp	r0, r1
    3c44:	d90d      	bls.n	3c62 <__aeabi_ddiv+0x38a>
    3c46:	4653      	mov	r3, sl
    3c48:	4441      	add	r1, r8
    3c4a:	3b01      	subs	r3, #1
    3c4c:	4588      	cmp	r8, r1
    3c4e:	d900      	bls.n	3c52 <__aeabi_ddiv+0x37a>
    3c50:	e0e8      	b.n	3e24 <__aeabi_ddiv+0x54c>
    3c52:	4288      	cmp	r0, r1
    3c54:	d800      	bhi.n	3c58 <__aeabi_ddiv+0x380>
    3c56:	e0e5      	b.n	3e24 <__aeabi_ddiv+0x54c>
    3c58:	2302      	movs	r3, #2
    3c5a:	425b      	negs	r3, r3
    3c5c:	469c      	mov	ip, r3
    3c5e:	4441      	add	r1, r8
    3c60:	44e2      	add	sl, ip
    3c62:	9b01      	ldr	r3, [sp, #4]
    3c64:	042d      	lsls	r5, r5, #16
    3c66:	1ace      	subs	r6, r1, r3
    3c68:	4651      	mov	r1, sl
    3c6a:	4329      	orrs	r1, r5
    3c6c:	9d05      	ldr	r5, [sp, #20]
    3c6e:	464f      	mov	r7, r9
    3c70:	002a      	movs	r2, r5
    3c72:	040b      	lsls	r3, r1, #16
    3c74:	0c08      	lsrs	r0, r1, #16
    3c76:	0c1b      	lsrs	r3, r3, #16
    3c78:	435a      	muls	r2, r3
    3c7a:	4345      	muls	r5, r0
    3c7c:	437b      	muls	r3, r7
    3c7e:	4378      	muls	r0, r7
    3c80:	195b      	adds	r3, r3, r5
    3c82:	0c17      	lsrs	r7, r2, #16
    3c84:	18fb      	adds	r3, r7, r3
    3c86:	429d      	cmp	r5, r3
    3c88:	d903      	bls.n	3c92 <__aeabi_ddiv+0x3ba>
    3c8a:	2580      	movs	r5, #128	; 0x80
    3c8c:	026d      	lsls	r5, r5, #9
    3c8e:	46ac      	mov	ip, r5
    3c90:	4460      	add	r0, ip
    3c92:	0c1d      	lsrs	r5, r3, #16
    3c94:	0412      	lsls	r2, r2, #16
    3c96:	041b      	lsls	r3, r3, #16
    3c98:	0c12      	lsrs	r2, r2, #16
    3c9a:	1828      	adds	r0, r5, r0
    3c9c:	189b      	adds	r3, r3, r2
    3c9e:	4286      	cmp	r6, r0
    3ca0:	d200      	bcs.n	3ca4 <__aeabi_ddiv+0x3cc>
    3ca2:	e093      	b.n	3dcc <__aeabi_ddiv+0x4f4>
    3ca4:	d100      	bne.n	3ca8 <__aeabi_ddiv+0x3d0>
    3ca6:	e08e      	b.n	3dc6 <__aeabi_ddiv+0x4ee>
    3ca8:	2301      	movs	r3, #1
    3caa:	4319      	orrs	r1, r3
    3cac:	4ba0      	ldr	r3, [pc, #640]	; (3f30 <__aeabi_ddiv+0x658>)
    3cae:	18e3      	adds	r3, r4, r3
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	dc00      	bgt.n	3cb6 <__aeabi_ddiv+0x3de>
    3cb4:	e099      	b.n	3dea <__aeabi_ddiv+0x512>
    3cb6:	074a      	lsls	r2, r1, #29
    3cb8:	d000      	beq.n	3cbc <__aeabi_ddiv+0x3e4>
    3cba:	e09e      	b.n	3dfa <__aeabi_ddiv+0x522>
    3cbc:	465a      	mov	r2, fp
    3cbe:	01d2      	lsls	r2, r2, #7
    3cc0:	d506      	bpl.n	3cd0 <__aeabi_ddiv+0x3f8>
    3cc2:	465a      	mov	r2, fp
    3cc4:	4b9b      	ldr	r3, [pc, #620]	; (3f34 <__aeabi_ddiv+0x65c>)
    3cc6:	401a      	ands	r2, r3
    3cc8:	2380      	movs	r3, #128	; 0x80
    3cca:	4693      	mov	fp, r2
    3ccc:	00db      	lsls	r3, r3, #3
    3cce:	18e3      	adds	r3, r4, r3
    3cd0:	4a99      	ldr	r2, [pc, #612]	; (3f38 <__aeabi_ddiv+0x660>)
    3cd2:	4293      	cmp	r3, r2
    3cd4:	dd68      	ble.n	3da8 <__aeabi_ddiv+0x4d0>
    3cd6:	2301      	movs	r3, #1
    3cd8:	9a02      	ldr	r2, [sp, #8]
    3cda:	4c98      	ldr	r4, [pc, #608]	; (3f3c <__aeabi_ddiv+0x664>)
    3cdc:	401a      	ands	r2, r3
    3cde:	2300      	movs	r3, #0
    3ce0:	4694      	mov	ip, r2
    3ce2:	4698      	mov	r8, r3
    3ce4:	2200      	movs	r2, #0
    3ce6:	e6c5      	b.n	3a74 <__aeabi_ddiv+0x19c>
    3ce8:	2280      	movs	r2, #128	; 0x80
    3cea:	464b      	mov	r3, r9
    3cec:	0312      	lsls	r2, r2, #12
    3cee:	4213      	tst	r3, r2
    3cf0:	d00a      	beq.n	3d08 <__aeabi_ddiv+0x430>
    3cf2:	465b      	mov	r3, fp
    3cf4:	4213      	tst	r3, r2
    3cf6:	d106      	bne.n	3d06 <__aeabi_ddiv+0x42e>
    3cf8:	431a      	orrs	r2, r3
    3cfa:	0312      	lsls	r2, r2, #12
    3cfc:	0b12      	lsrs	r2, r2, #12
    3cfe:	46ac      	mov	ip, r5
    3d00:	4688      	mov	r8, r1
    3d02:	4c8e      	ldr	r4, [pc, #568]	; (3f3c <__aeabi_ddiv+0x664>)
    3d04:	e6b6      	b.n	3a74 <__aeabi_ddiv+0x19c>
    3d06:	464b      	mov	r3, r9
    3d08:	431a      	orrs	r2, r3
    3d0a:	0312      	lsls	r2, r2, #12
    3d0c:	0b12      	lsrs	r2, r2, #12
    3d0e:	46bc      	mov	ip, r7
    3d10:	4c8a      	ldr	r4, [pc, #552]	; (3f3c <__aeabi_ddiv+0x664>)
    3d12:	e6af      	b.n	3a74 <__aeabi_ddiv+0x19c>
    3d14:	0003      	movs	r3, r0
    3d16:	465a      	mov	r2, fp
    3d18:	3b28      	subs	r3, #40	; 0x28
    3d1a:	409a      	lsls	r2, r3
    3d1c:	2300      	movs	r3, #0
    3d1e:	4691      	mov	r9, r2
    3d20:	4698      	mov	r8, r3
    3d22:	e657      	b.n	39d4 <__aeabi_ddiv+0xfc>
    3d24:	4658      	mov	r0, fp
    3d26:	f000 ff0d 	bl	4b44 <__clzsi2>
    3d2a:	3020      	adds	r0, #32
    3d2c:	e640      	b.n	39b0 <__aeabi_ddiv+0xd8>
    3d2e:	0003      	movs	r3, r0
    3d30:	4652      	mov	r2, sl
    3d32:	3b28      	subs	r3, #40	; 0x28
    3d34:	409a      	lsls	r2, r3
    3d36:	2100      	movs	r1, #0
    3d38:	4693      	mov	fp, r2
    3d3a:	e677      	b.n	3a2c <__aeabi_ddiv+0x154>
    3d3c:	f000 ff02 	bl	4b44 <__clzsi2>
    3d40:	3020      	adds	r0, #32
    3d42:	e65f      	b.n	3a04 <__aeabi_ddiv+0x12c>
    3d44:	4588      	cmp	r8, r1
    3d46:	d200      	bcs.n	3d4a <__aeabi_ddiv+0x472>
    3d48:	e6c7      	b.n	3ada <__aeabi_ddiv+0x202>
    3d4a:	464b      	mov	r3, r9
    3d4c:	07de      	lsls	r6, r3, #31
    3d4e:	085d      	lsrs	r5, r3, #1
    3d50:	4643      	mov	r3, r8
    3d52:	085b      	lsrs	r3, r3, #1
    3d54:	431e      	orrs	r6, r3
    3d56:	4643      	mov	r3, r8
    3d58:	07db      	lsls	r3, r3, #31
    3d5a:	469a      	mov	sl, r3
    3d5c:	e6c2      	b.n	3ae4 <__aeabi_ddiv+0x20c>
    3d5e:	2500      	movs	r5, #0
    3d60:	4592      	cmp	sl, r2
    3d62:	d300      	bcc.n	3d66 <__aeabi_ddiv+0x48e>
    3d64:	e733      	b.n	3bce <__aeabi_ddiv+0x2f6>
    3d66:	9e03      	ldr	r6, [sp, #12]
    3d68:	4659      	mov	r1, fp
    3d6a:	46b4      	mov	ip, r6
    3d6c:	44e2      	add	sl, ip
    3d6e:	45b2      	cmp	sl, r6
    3d70:	41ad      	sbcs	r5, r5
    3d72:	426d      	negs	r5, r5
    3d74:	4445      	add	r5, r8
    3d76:	18eb      	adds	r3, r5, r3
    3d78:	3901      	subs	r1, #1
    3d7a:	4598      	cmp	r8, r3
    3d7c:	d207      	bcs.n	3d8e <__aeabi_ddiv+0x4b6>
    3d7e:	4298      	cmp	r0, r3
    3d80:	d900      	bls.n	3d84 <__aeabi_ddiv+0x4ac>
    3d82:	e07f      	b.n	3e84 <__aeabi_ddiv+0x5ac>
    3d84:	d100      	bne.n	3d88 <__aeabi_ddiv+0x4b0>
    3d86:	e0bc      	b.n	3f02 <__aeabi_ddiv+0x62a>
    3d88:	1a1d      	subs	r5, r3, r0
    3d8a:	468b      	mov	fp, r1
    3d8c:	e71f      	b.n	3bce <__aeabi_ddiv+0x2f6>
    3d8e:	4598      	cmp	r8, r3
    3d90:	d1fa      	bne.n	3d88 <__aeabi_ddiv+0x4b0>
    3d92:	9d03      	ldr	r5, [sp, #12]
    3d94:	4555      	cmp	r5, sl
    3d96:	d9f2      	bls.n	3d7e <__aeabi_ddiv+0x4a6>
    3d98:	4643      	mov	r3, r8
    3d9a:	468b      	mov	fp, r1
    3d9c:	1a1d      	subs	r5, r3, r0
    3d9e:	e716      	b.n	3bce <__aeabi_ddiv+0x2f6>
    3da0:	469b      	mov	fp, r3
    3da2:	e6ca      	b.n	3b3a <__aeabi_ddiv+0x262>
    3da4:	0015      	movs	r5, r2
    3da6:	e6e7      	b.n	3b78 <__aeabi_ddiv+0x2a0>
    3da8:	465a      	mov	r2, fp
    3daa:	08c9      	lsrs	r1, r1, #3
    3dac:	0752      	lsls	r2, r2, #29
    3dae:	430a      	orrs	r2, r1
    3db0:	055b      	lsls	r3, r3, #21
    3db2:	4690      	mov	r8, r2
    3db4:	0d5c      	lsrs	r4, r3, #21
    3db6:	465a      	mov	r2, fp
    3db8:	2301      	movs	r3, #1
    3dba:	9902      	ldr	r1, [sp, #8]
    3dbc:	0252      	lsls	r2, r2, #9
    3dbe:	4019      	ands	r1, r3
    3dc0:	0b12      	lsrs	r2, r2, #12
    3dc2:	468c      	mov	ip, r1
    3dc4:	e656      	b.n	3a74 <__aeabi_ddiv+0x19c>
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d100      	bne.n	3dcc <__aeabi_ddiv+0x4f4>
    3dca:	e76f      	b.n	3cac <__aeabi_ddiv+0x3d4>
    3dcc:	4446      	add	r6, r8
    3dce:	1e4a      	subs	r2, r1, #1
    3dd0:	45b0      	cmp	r8, r6
    3dd2:	d929      	bls.n	3e28 <__aeabi_ddiv+0x550>
    3dd4:	0011      	movs	r1, r2
    3dd6:	4286      	cmp	r6, r0
    3dd8:	d000      	beq.n	3ddc <__aeabi_ddiv+0x504>
    3dda:	e765      	b.n	3ca8 <__aeabi_ddiv+0x3d0>
    3ddc:	9a03      	ldr	r2, [sp, #12]
    3dde:	4293      	cmp	r3, r2
    3de0:	d000      	beq.n	3de4 <__aeabi_ddiv+0x50c>
    3de2:	e761      	b.n	3ca8 <__aeabi_ddiv+0x3d0>
    3de4:	e762      	b.n	3cac <__aeabi_ddiv+0x3d4>
    3de6:	2101      	movs	r1, #1
    3de8:	4249      	negs	r1, r1
    3dea:	2001      	movs	r0, #1
    3dec:	1ac2      	subs	r2, r0, r3
    3dee:	2a38      	cmp	r2, #56	; 0x38
    3df0:	dd21      	ble.n	3e36 <__aeabi_ddiv+0x55e>
    3df2:	9b02      	ldr	r3, [sp, #8]
    3df4:	4003      	ands	r3, r0
    3df6:	469c      	mov	ip, r3
    3df8:	e638      	b.n	3a6c <__aeabi_ddiv+0x194>
    3dfa:	220f      	movs	r2, #15
    3dfc:	400a      	ands	r2, r1
    3dfe:	2a04      	cmp	r2, #4
    3e00:	d100      	bne.n	3e04 <__aeabi_ddiv+0x52c>
    3e02:	e75b      	b.n	3cbc <__aeabi_ddiv+0x3e4>
    3e04:	000a      	movs	r2, r1
    3e06:	1d11      	adds	r1, r2, #4
    3e08:	4291      	cmp	r1, r2
    3e0a:	4192      	sbcs	r2, r2
    3e0c:	4252      	negs	r2, r2
    3e0e:	4493      	add	fp, r2
    3e10:	e754      	b.n	3cbc <__aeabi_ddiv+0x3e4>
    3e12:	4b47      	ldr	r3, [pc, #284]	; (3f30 <__aeabi_ddiv+0x658>)
    3e14:	18e3      	adds	r3, r4, r3
    3e16:	2b00      	cmp	r3, #0
    3e18:	dde5      	ble.n	3de6 <__aeabi_ddiv+0x50e>
    3e1a:	2201      	movs	r2, #1
    3e1c:	4252      	negs	r2, r2
    3e1e:	e7f2      	b.n	3e06 <__aeabi_ddiv+0x52e>
    3e20:	001d      	movs	r5, r3
    3e22:	e6fa      	b.n	3c1a <__aeabi_ddiv+0x342>
    3e24:	469a      	mov	sl, r3
    3e26:	e71c      	b.n	3c62 <__aeabi_ddiv+0x38a>
    3e28:	42b0      	cmp	r0, r6
    3e2a:	d839      	bhi.n	3ea0 <__aeabi_ddiv+0x5c8>
    3e2c:	d06e      	beq.n	3f0c <__aeabi_ddiv+0x634>
    3e2e:	0011      	movs	r1, r2
    3e30:	e73a      	b.n	3ca8 <__aeabi_ddiv+0x3d0>
    3e32:	9302      	str	r3, [sp, #8]
    3e34:	e73a      	b.n	3cac <__aeabi_ddiv+0x3d4>
    3e36:	2a1f      	cmp	r2, #31
    3e38:	dc3c      	bgt.n	3eb4 <__aeabi_ddiv+0x5dc>
    3e3a:	2320      	movs	r3, #32
    3e3c:	1a9b      	subs	r3, r3, r2
    3e3e:	000c      	movs	r4, r1
    3e40:	4658      	mov	r0, fp
    3e42:	4099      	lsls	r1, r3
    3e44:	4098      	lsls	r0, r3
    3e46:	1e4b      	subs	r3, r1, #1
    3e48:	4199      	sbcs	r1, r3
    3e4a:	465b      	mov	r3, fp
    3e4c:	40d4      	lsrs	r4, r2
    3e4e:	40d3      	lsrs	r3, r2
    3e50:	4320      	orrs	r0, r4
    3e52:	4308      	orrs	r0, r1
    3e54:	001a      	movs	r2, r3
    3e56:	0743      	lsls	r3, r0, #29
    3e58:	d009      	beq.n	3e6e <__aeabi_ddiv+0x596>
    3e5a:	230f      	movs	r3, #15
    3e5c:	4003      	ands	r3, r0
    3e5e:	2b04      	cmp	r3, #4
    3e60:	d005      	beq.n	3e6e <__aeabi_ddiv+0x596>
    3e62:	0001      	movs	r1, r0
    3e64:	1d08      	adds	r0, r1, #4
    3e66:	4288      	cmp	r0, r1
    3e68:	419b      	sbcs	r3, r3
    3e6a:	425b      	negs	r3, r3
    3e6c:	18d2      	adds	r2, r2, r3
    3e6e:	0213      	lsls	r3, r2, #8
    3e70:	d53a      	bpl.n	3ee8 <__aeabi_ddiv+0x610>
    3e72:	2301      	movs	r3, #1
    3e74:	9a02      	ldr	r2, [sp, #8]
    3e76:	2401      	movs	r4, #1
    3e78:	401a      	ands	r2, r3
    3e7a:	2300      	movs	r3, #0
    3e7c:	4694      	mov	ip, r2
    3e7e:	4698      	mov	r8, r3
    3e80:	2200      	movs	r2, #0
    3e82:	e5f7      	b.n	3a74 <__aeabi_ddiv+0x19c>
    3e84:	2102      	movs	r1, #2
    3e86:	4249      	negs	r1, r1
    3e88:	468c      	mov	ip, r1
    3e8a:	9d03      	ldr	r5, [sp, #12]
    3e8c:	44e3      	add	fp, ip
    3e8e:	46ac      	mov	ip, r5
    3e90:	44e2      	add	sl, ip
    3e92:	45aa      	cmp	sl, r5
    3e94:	41ad      	sbcs	r5, r5
    3e96:	426d      	negs	r5, r5
    3e98:	4445      	add	r5, r8
    3e9a:	18ed      	adds	r5, r5, r3
    3e9c:	1a2d      	subs	r5, r5, r0
    3e9e:	e696      	b.n	3bce <__aeabi_ddiv+0x2f6>
    3ea0:	1e8a      	subs	r2, r1, #2
    3ea2:	9903      	ldr	r1, [sp, #12]
    3ea4:	004d      	lsls	r5, r1, #1
    3ea6:	428d      	cmp	r5, r1
    3ea8:	4189      	sbcs	r1, r1
    3eaa:	4249      	negs	r1, r1
    3eac:	4441      	add	r1, r8
    3eae:	1876      	adds	r6, r6, r1
    3eb0:	9503      	str	r5, [sp, #12]
    3eb2:	e78f      	b.n	3dd4 <__aeabi_ddiv+0x4fc>
    3eb4:	201f      	movs	r0, #31
    3eb6:	4240      	negs	r0, r0
    3eb8:	1ac3      	subs	r3, r0, r3
    3eba:	4658      	mov	r0, fp
    3ebc:	40d8      	lsrs	r0, r3
    3ebe:	0003      	movs	r3, r0
    3ec0:	2a20      	cmp	r2, #32
    3ec2:	d028      	beq.n	3f16 <__aeabi_ddiv+0x63e>
    3ec4:	2040      	movs	r0, #64	; 0x40
    3ec6:	465d      	mov	r5, fp
    3ec8:	1a82      	subs	r2, r0, r2
    3eca:	4095      	lsls	r5, r2
    3ecc:	4329      	orrs	r1, r5
    3ece:	1e4a      	subs	r2, r1, #1
    3ed0:	4191      	sbcs	r1, r2
    3ed2:	4319      	orrs	r1, r3
    3ed4:	2307      	movs	r3, #7
    3ed6:	2200      	movs	r2, #0
    3ed8:	400b      	ands	r3, r1
    3eda:	d009      	beq.n	3ef0 <__aeabi_ddiv+0x618>
    3edc:	230f      	movs	r3, #15
    3ede:	2200      	movs	r2, #0
    3ee0:	400b      	ands	r3, r1
    3ee2:	0008      	movs	r0, r1
    3ee4:	2b04      	cmp	r3, #4
    3ee6:	d1bd      	bne.n	3e64 <__aeabi_ddiv+0x58c>
    3ee8:	0001      	movs	r1, r0
    3eea:	0753      	lsls	r3, r2, #29
    3eec:	0252      	lsls	r2, r2, #9
    3eee:	0b12      	lsrs	r2, r2, #12
    3ef0:	08c9      	lsrs	r1, r1, #3
    3ef2:	4319      	orrs	r1, r3
    3ef4:	2301      	movs	r3, #1
    3ef6:	4688      	mov	r8, r1
    3ef8:	9902      	ldr	r1, [sp, #8]
    3efa:	2400      	movs	r4, #0
    3efc:	4019      	ands	r1, r3
    3efe:	468c      	mov	ip, r1
    3f00:	e5b8      	b.n	3a74 <__aeabi_ddiv+0x19c>
    3f02:	4552      	cmp	r2, sl
    3f04:	d8be      	bhi.n	3e84 <__aeabi_ddiv+0x5ac>
    3f06:	468b      	mov	fp, r1
    3f08:	2500      	movs	r5, #0
    3f0a:	e660      	b.n	3bce <__aeabi_ddiv+0x2f6>
    3f0c:	9d03      	ldr	r5, [sp, #12]
    3f0e:	429d      	cmp	r5, r3
    3f10:	d3c6      	bcc.n	3ea0 <__aeabi_ddiv+0x5c8>
    3f12:	0011      	movs	r1, r2
    3f14:	e762      	b.n	3ddc <__aeabi_ddiv+0x504>
    3f16:	2500      	movs	r5, #0
    3f18:	e7d8      	b.n	3ecc <__aeabi_ddiv+0x5f4>
    3f1a:	2280      	movs	r2, #128	; 0x80
    3f1c:	465b      	mov	r3, fp
    3f1e:	0312      	lsls	r2, r2, #12
    3f20:	431a      	orrs	r2, r3
    3f22:	9b01      	ldr	r3, [sp, #4]
    3f24:	0312      	lsls	r2, r2, #12
    3f26:	0b12      	lsrs	r2, r2, #12
    3f28:	469c      	mov	ip, r3
    3f2a:	4688      	mov	r8, r1
    3f2c:	4c03      	ldr	r4, [pc, #12]	; (3f3c <__aeabi_ddiv+0x664>)
    3f2e:	e5a1      	b.n	3a74 <__aeabi_ddiv+0x19c>
    3f30:	000003ff 	.word	0x000003ff
    3f34:	feffffff 	.word	0xfeffffff
    3f38:	000007fe 	.word	0x000007fe
    3f3c:	000007ff 	.word	0x000007ff

00003f40 <__aeabi_dmul>:
    3f40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f42:	4657      	mov	r7, sl
    3f44:	4645      	mov	r5, r8
    3f46:	46de      	mov	lr, fp
    3f48:	464e      	mov	r6, r9
    3f4a:	b5e0      	push	{r5, r6, r7, lr}
    3f4c:	030c      	lsls	r4, r1, #12
    3f4e:	4698      	mov	r8, r3
    3f50:	004e      	lsls	r6, r1, #1
    3f52:	0b23      	lsrs	r3, r4, #12
    3f54:	b087      	sub	sp, #28
    3f56:	0007      	movs	r7, r0
    3f58:	4692      	mov	sl, r2
    3f5a:	469b      	mov	fp, r3
    3f5c:	0d76      	lsrs	r6, r6, #21
    3f5e:	0fcd      	lsrs	r5, r1, #31
    3f60:	2e00      	cmp	r6, #0
    3f62:	d06b      	beq.n	403c <__aeabi_dmul+0xfc>
    3f64:	4b6d      	ldr	r3, [pc, #436]	; (411c <__aeabi_dmul+0x1dc>)
    3f66:	429e      	cmp	r6, r3
    3f68:	d035      	beq.n	3fd6 <__aeabi_dmul+0x96>
    3f6a:	2480      	movs	r4, #128	; 0x80
    3f6c:	465b      	mov	r3, fp
    3f6e:	0f42      	lsrs	r2, r0, #29
    3f70:	0424      	lsls	r4, r4, #16
    3f72:	00db      	lsls	r3, r3, #3
    3f74:	4314      	orrs	r4, r2
    3f76:	431c      	orrs	r4, r3
    3f78:	00c3      	lsls	r3, r0, #3
    3f7a:	4699      	mov	r9, r3
    3f7c:	4b68      	ldr	r3, [pc, #416]	; (4120 <__aeabi_dmul+0x1e0>)
    3f7e:	46a3      	mov	fp, r4
    3f80:	469c      	mov	ip, r3
    3f82:	2300      	movs	r3, #0
    3f84:	2700      	movs	r7, #0
    3f86:	4466      	add	r6, ip
    3f88:	9302      	str	r3, [sp, #8]
    3f8a:	4643      	mov	r3, r8
    3f8c:	031c      	lsls	r4, r3, #12
    3f8e:	005a      	lsls	r2, r3, #1
    3f90:	0fdb      	lsrs	r3, r3, #31
    3f92:	4650      	mov	r0, sl
    3f94:	0b24      	lsrs	r4, r4, #12
    3f96:	0d52      	lsrs	r2, r2, #21
    3f98:	4698      	mov	r8, r3
    3f9a:	d100      	bne.n	3f9e <__aeabi_dmul+0x5e>
    3f9c:	e076      	b.n	408c <__aeabi_dmul+0x14c>
    3f9e:	4b5f      	ldr	r3, [pc, #380]	; (411c <__aeabi_dmul+0x1dc>)
    3fa0:	429a      	cmp	r2, r3
    3fa2:	d06d      	beq.n	4080 <__aeabi_dmul+0x140>
    3fa4:	2380      	movs	r3, #128	; 0x80
    3fa6:	0f41      	lsrs	r1, r0, #29
    3fa8:	041b      	lsls	r3, r3, #16
    3faa:	430b      	orrs	r3, r1
    3fac:	495c      	ldr	r1, [pc, #368]	; (4120 <__aeabi_dmul+0x1e0>)
    3fae:	00e4      	lsls	r4, r4, #3
    3fb0:	468c      	mov	ip, r1
    3fb2:	431c      	orrs	r4, r3
    3fb4:	00c3      	lsls	r3, r0, #3
    3fb6:	2000      	movs	r0, #0
    3fb8:	4462      	add	r2, ip
    3fba:	4641      	mov	r1, r8
    3fbc:	18b6      	adds	r6, r6, r2
    3fbe:	4069      	eors	r1, r5
    3fc0:	1c72      	adds	r2, r6, #1
    3fc2:	9101      	str	r1, [sp, #4]
    3fc4:	4694      	mov	ip, r2
    3fc6:	4307      	orrs	r7, r0
    3fc8:	2f0f      	cmp	r7, #15
    3fca:	d900      	bls.n	3fce <__aeabi_dmul+0x8e>
    3fcc:	e0b0      	b.n	4130 <__aeabi_dmul+0x1f0>
    3fce:	4a55      	ldr	r2, [pc, #340]	; (4124 <__aeabi_dmul+0x1e4>)
    3fd0:	00bf      	lsls	r7, r7, #2
    3fd2:	59d2      	ldr	r2, [r2, r7]
    3fd4:	4697      	mov	pc, r2
    3fd6:	465b      	mov	r3, fp
    3fd8:	4303      	orrs	r3, r0
    3fda:	4699      	mov	r9, r3
    3fdc:	d000      	beq.n	3fe0 <__aeabi_dmul+0xa0>
    3fde:	e087      	b.n	40f0 <__aeabi_dmul+0x1b0>
    3fe0:	2300      	movs	r3, #0
    3fe2:	469b      	mov	fp, r3
    3fe4:	3302      	adds	r3, #2
    3fe6:	2708      	movs	r7, #8
    3fe8:	9302      	str	r3, [sp, #8]
    3fea:	e7ce      	b.n	3f8a <__aeabi_dmul+0x4a>
    3fec:	4642      	mov	r2, r8
    3fee:	9201      	str	r2, [sp, #4]
    3ff0:	2802      	cmp	r0, #2
    3ff2:	d067      	beq.n	40c4 <__aeabi_dmul+0x184>
    3ff4:	2803      	cmp	r0, #3
    3ff6:	d100      	bne.n	3ffa <__aeabi_dmul+0xba>
    3ff8:	e20e      	b.n	4418 <__aeabi_dmul+0x4d8>
    3ffa:	2801      	cmp	r0, #1
    3ffc:	d000      	beq.n	4000 <__aeabi_dmul+0xc0>
    3ffe:	e162      	b.n	42c6 <__aeabi_dmul+0x386>
    4000:	2300      	movs	r3, #0
    4002:	2400      	movs	r4, #0
    4004:	2200      	movs	r2, #0
    4006:	4699      	mov	r9, r3
    4008:	9901      	ldr	r1, [sp, #4]
    400a:	4001      	ands	r1, r0
    400c:	b2cd      	uxtb	r5, r1
    400e:	2100      	movs	r1, #0
    4010:	0312      	lsls	r2, r2, #12
    4012:	0d0b      	lsrs	r3, r1, #20
    4014:	0b12      	lsrs	r2, r2, #12
    4016:	051b      	lsls	r3, r3, #20
    4018:	4313      	orrs	r3, r2
    401a:	4a43      	ldr	r2, [pc, #268]	; (4128 <__aeabi_dmul+0x1e8>)
    401c:	0524      	lsls	r4, r4, #20
    401e:	4013      	ands	r3, r2
    4020:	431c      	orrs	r4, r3
    4022:	0064      	lsls	r4, r4, #1
    4024:	07ed      	lsls	r5, r5, #31
    4026:	0864      	lsrs	r4, r4, #1
    4028:	432c      	orrs	r4, r5
    402a:	4648      	mov	r0, r9
    402c:	0021      	movs	r1, r4
    402e:	b007      	add	sp, #28
    4030:	bc3c      	pop	{r2, r3, r4, r5}
    4032:	4690      	mov	r8, r2
    4034:	4699      	mov	r9, r3
    4036:	46a2      	mov	sl, r4
    4038:	46ab      	mov	fp, r5
    403a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    403c:	4303      	orrs	r3, r0
    403e:	4699      	mov	r9, r3
    4040:	d04f      	beq.n	40e2 <__aeabi_dmul+0x1a2>
    4042:	465b      	mov	r3, fp
    4044:	2b00      	cmp	r3, #0
    4046:	d100      	bne.n	404a <__aeabi_dmul+0x10a>
    4048:	e189      	b.n	435e <__aeabi_dmul+0x41e>
    404a:	4658      	mov	r0, fp
    404c:	f000 fd7a 	bl	4b44 <__clzsi2>
    4050:	0003      	movs	r3, r0
    4052:	3b0b      	subs	r3, #11
    4054:	2b1c      	cmp	r3, #28
    4056:	dd00      	ble.n	405a <__aeabi_dmul+0x11a>
    4058:	e17a      	b.n	4350 <__aeabi_dmul+0x410>
    405a:	221d      	movs	r2, #29
    405c:	1ad3      	subs	r3, r2, r3
    405e:	003a      	movs	r2, r7
    4060:	0001      	movs	r1, r0
    4062:	465c      	mov	r4, fp
    4064:	40da      	lsrs	r2, r3
    4066:	3908      	subs	r1, #8
    4068:	408c      	lsls	r4, r1
    406a:	0013      	movs	r3, r2
    406c:	408f      	lsls	r7, r1
    406e:	4323      	orrs	r3, r4
    4070:	469b      	mov	fp, r3
    4072:	46b9      	mov	r9, r7
    4074:	2300      	movs	r3, #0
    4076:	4e2d      	ldr	r6, [pc, #180]	; (412c <__aeabi_dmul+0x1ec>)
    4078:	2700      	movs	r7, #0
    407a:	1a36      	subs	r6, r6, r0
    407c:	9302      	str	r3, [sp, #8]
    407e:	e784      	b.n	3f8a <__aeabi_dmul+0x4a>
    4080:	4653      	mov	r3, sl
    4082:	4323      	orrs	r3, r4
    4084:	d12a      	bne.n	40dc <__aeabi_dmul+0x19c>
    4086:	2400      	movs	r4, #0
    4088:	2002      	movs	r0, #2
    408a:	e796      	b.n	3fba <__aeabi_dmul+0x7a>
    408c:	4653      	mov	r3, sl
    408e:	4323      	orrs	r3, r4
    4090:	d020      	beq.n	40d4 <__aeabi_dmul+0x194>
    4092:	2c00      	cmp	r4, #0
    4094:	d100      	bne.n	4098 <__aeabi_dmul+0x158>
    4096:	e157      	b.n	4348 <__aeabi_dmul+0x408>
    4098:	0020      	movs	r0, r4
    409a:	f000 fd53 	bl	4b44 <__clzsi2>
    409e:	0003      	movs	r3, r0
    40a0:	3b0b      	subs	r3, #11
    40a2:	2b1c      	cmp	r3, #28
    40a4:	dd00      	ble.n	40a8 <__aeabi_dmul+0x168>
    40a6:	e149      	b.n	433c <__aeabi_dmul+0x3fc>
    40a8:	211d      	movs	r1, #29
    40aa:	1acb      	subs	r3, r1, r3
    40ac:	4651      	mov	r1, sl
    40ae:	0002      	movs	r2, r0
    40b0:	40d9      	lsrs	r1, r3
    40b2:	4653      	mov	r3, sl
    40b4:	3a08      	subs	r2, #8
    40b6:	4094      	lsls	r4, r2
    40b8:	4093      	lsls	r3, r2
    40ba:	430c      	orrs	r4, r1
    40bc:	4a1b      	ldr	r2, [pc, #108]	; (412c <__aeabi_dmul+0x1ec>)
    40be:	1a12      	subs	r2, r2, r0
    40c0:	2000      	movs	r0, #0
    40c2:	e77a      	b.n	3fba <__aeabi_dmul+0x7a>
    40c4:	2501      	movs	r5, #1
    40c6:	9b01      	ldr	r3, [sp, #4]
    40c8:	4c14      	ldr	r4, [pc, #80]	; (411c <__aeabi_dmul+0x1dc>)
    40ca:	401d      	ands	r5, r3
    40cc:	2300      	movs	r3, #0
    40ce:	2200      	movs	r2, #0
    40d0:	4699      	mov	r9, r3
    40d2:	e79c      	b.n	400e <__aeabi_dmul+0xce>
    40d4:	2400      	movs	r4, #0
    40d6:	2200      	movs	r2, #0
    40d8:	2001      	movs	r0, #1
    40da:	e76e      	b.n	3fba <__aeabi_dmul+0x7a>
    40dc:	4653      	mov	r3, sl
    40de:	2003      	movs	r0, #3
    40e0:	e76b      	b.n	3fba <__aeabi_dmul+0x7a>
    40e2:	2300      	movs	r3, #0
    40e4:	469b      	mov	fp, r3
    40e6:	3301      	adds	r3, #1
    40e8:	2704      	movs	r7, #4
    40ea:	2600      	movs	r6, #0
    40ec:	9302      	str	r3, [sp, #8]
    40ee:	e74c      	b.n	3f8a <__aeabi_dmul+0x4a>
    40f0:	2303      	movs	r3, #3
    40f2:	4681      	mov	r9, r0
    40f4:	270c      	movs	r7, #12
    40f6:	9302      	str	r3, [sp, #8]
    40f8:	e747      	b.n	3f8a <__aeabi_dmul+0x4a>
    40fa:	2280      	movs	r2, #128	; 0x80
    40fc:	2300      	movs	r3, #0
    40fe:	2500      	movs	r5, #0
    4100:	0312      	lsls	r2, r2, #12
    4102:	4699      	mov	r9, r3
    4104:	4c05      	ldr	r4, [pc, #20]	; (411c <__aeabi_dmul+0x1dc>)
    4106:	e782      	b.n	400e <__aeabi_dmul+0xce>
    4108:	465c      	mov	r4, fp
    410a:	464b      	mov	r3, r9
    410c:	9802      	ldr	r0, [sp, #8]
    410e:	e76f      	b.n	3ff0 <__aeabi_dmul+0xb0>
    4110:	465c      	mov	r4, fp
    4112:	464b      	mov	r3, r9
    4114:	9501      	str	r5, [sp, #4]
    4116:	9802      	ldr	r0, [sp, #8]
    4118:	e76a      	b.n	3ff0 <__aeabi_dmul+0xb0>
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	000007ff 	.word	0x000007ff
    4120:	fffffc01 	.word	0xfffffc01
    4124:	00004ef4 	.word	0x00004ef4
    4128:	800fffff 	.word	0x800fffff
    412c:	fffffc0d 	.word	0xfffffc0d
    4130:	464a      	mov	r2, r9
    4132:	4649      	mov	r1, r9
    4134:	0c17      	lsrs	r7, r2, #16
    4136:	0c1a      	lsrs	r2, r3, #16
    4138:	041b      	lsls	r3, r3, #16
    413a:	0c1b      	lsrs	r3, r3, #16
    413c:	0408      	lsls	r0, r1, #16
    413e:	0019      	movs	r1, r3
    4140:	0c00      	lsrs	r0, r0, #16
    4142:	4341      	muls	r1, r0
    4144:	0015      	movs	r5, r2
    4146:	4688      	mov	r8, r1
    4148:	0019      	movs	r1, r3
    414a:	437d      	muls	r5, r7
    414c:	4379      	muls	r1, r7
    414e:	9503      	str	r5, [sp, #12]
    4150:	4689      	mov	r9, r1
    4152:	0029      	movs	r1, r5
    4154:	0015      	movs	r5, r2
    4156:	4345      	muls	r5, r0
    4158:	444d      	add	r5, r9
    415a:	9502      	str	r5, [sp, #8]
    415c:	4645      	mov	r5, r8
    415e:	0c2d      	lsrs	r5, r5, #16
    4160:	46aa      	mov	sl, r5
    4162:	9d02      	ldr	r5, [sp, #8]
    4164:	4455      	add	r5, sl
    4166:	45a9      	cmp	r9, r5
    4168:	d906      	bls.n	4178 <__aeabi_dmul+0x238>
    416a:	468a      	mov	sl, r1
    416c:	2180      	movs	r1, #128	; 0x80
    416e:	0249      	lsls	r1, r1, #9
    4170:	4689      	mov	r9, r1
    4172:	44ca      	add	sl, r9
    4174:	4651      	mov	r1, sl
    4176:	9103      	str	r1, [sp, #12]
    4178:	0c29      	lsrs	r1, r5, #16
    417a:	9104      	str	r1, [sp, #16]
    417c:	4641      	mov	r1, r8
    417e:	0409      	lsls	r1, r1, #16
    4180:	042d      	lsls	r5, r5, #16
    4182:	0c09      	lsrs	r1, r1, #16
    4184:	4688      	mov	r8, r1
    4186:	0029      	movs	r1, r5
    4188:	0c25      	lsrs	r5, r4, #16
    418a:	0424      	lsls	r4, r4, #16
    418c:	4441      	add	r1, r8
    418e:	0c24      	lsrs	r4, r4, #16
    4190:	9105      	str	r1, [sp, #20]
    4192:	0021      	movs	r1, r4
    4194:	4341      	muls	r1, r0
    4196:	4688      	mov	r8, r1
    4198:	0021      	movs	r1, r4
    419a:	4379      	muls	r1, r7
    419c:	468a      	mov	sl, r1
    419e:	4368      	muls	r0, r5
    41a0:	4641      	mov	r1, r8
    41a2:	4450      	add	r0, sl
    41a4:	4681      	mov	r9, r0
    41a6:	0c08      	lsrs	r0, r1, #16
    41a8:	4448      	add	r0, r9
    41aa:	436f      	muls	r7, r5
    41ac:	4582      	cmp	sl, r0
    41ae:	d903      	bls.n	41b8 <__aeabi_dmul+0x278>
    41b0:	2180      	movs	r1, #128	; 0x80
    41b2:	0249      	lsls	r1, r1, #9
    41b4:	4689      	mov	r9, r1
    41b6:	444f      	add	r7, r9
    41b8:	0c01      	lsrs	r1, r0, #16
    41ba:	4689      	mov	r9, r1
    41bc:	0039      	movs	r1, r7
    41be:	4449      	add	r1, r9
    41c0:	9102      	str	r1, [sp, #8]
    41c2:	4641      	mov	r1, r8
    41c4:	040f      	lsls	r7, r1, #16
    41c6:	9904      	ldr	r1, [sp, #16]
    41c8:	0c3f      	lsrs	r7, r7, #16
    41ca:	4688      	mov	r8, r1
    41cc:	0400      	lsls	r0, r0, #16
    41ce:	19c0      	adds	r0, r0, r7
    41d0:	4480      	add	r8, r0
    41d2:	4641      	mov	r1, r8
    41d4:	9104      	str	r1, [sp, #16]
    41d6:	4659      	mov	r1, fp
    41d8:	0c0f      	lsrs	r7, r1, #16
    41da:	0409      	lsls	r1, r1, #16
    41dc:	0c09      	lsrs	r1, r1, #16
    41de:	4688      	mov	r8, r1
    41e0:	4359      	muls	r1, r3
    41e2:	468a      	mov	sl, r1
    41e4:	0039      	movs	r1, r7
    41e6:	4351      	muls	r1, r2
    41e8:	4689      	mov	r9, r1
    41ea:	4641      	mov	r1, r8
    41ec:	434a      	muls	r2, r1
    41ee:	4651      	mov	r1, sl
    41f0:	0c09      	lsrs	r1, r1, #16
    41f2:	468b      	mov	fp, r1
    41f4:	437b      	muls	r3, r7
    41f6:	18d2      	adds	r2, r2, r3
    41f8:	445a      	add	r2, fp
    41fa:	4293      	cmp	r3, r2
    41fc:	d903      	bls.n	4206 <__aeabi_dmul+0x2c6>
    41fe:	2380      	movs	r3, #128	; 0x80
    4200:	025b      	lsls	r3, r3, #9
    4202:	469b      	mov	fp, r3
    4204:	44d9      	add	r9, fp
    4206:	4651      	mov	r1, sl
    4208:	0409      	lsls	r1, r1, #16
    420a:	0c09      	lsrs	r1, r1, #16
    420c:	468a      	mov	sl, r1
    420e:	4641      	mov	r1, r8
    4210:	4361      	muls	r1, r4
    4212:	437c      	muls	r4, r7
    4214:	0c13      	lsrs	r3, r2, #16
    4216:	0412      	lsls	r2, r2, #16
    4218:	444b      	add	r3, r9
    421a:	4452      	add	r2, sl
    421c:	46a1      	mov	r9, r4
    421e:	468a      	mov	sl, r1
    4220:	003c      	movs	r4, r7
    4222:	4641      	mov	r1, r8
    4224:	436c      	muls	r4, r5
    4226:	434d      	muls	r5, r1
    4228:	4651      	mov	r1, sl
    422a:	444d      	add	r5, r9
    422c:	0c0f      	lsrs	r7, r1, #16
    422e:	197d      	adds	r5, r7, r5
    4230:	45a9      	cmp	r9, r5
    4232:	d903      	bls.n	423c <__aeabi_dmul+0x2fc>
    4234:	2180      	movs	r1, #128	; 0x80
    4236:	0249      	lsls	r1, r1, #9
    4238:	4688      	mov	r8, r1
    423a:	4444      	add	r4, r8
    423c:	9f04      	ldr	r7, [sp, #16]
    423e:	9903      	ldr	r1, [sp, #12]
    4240:	46b8      	mov	r8, r7
    4242:	4441      	add	r1, r8
    4244:	468b      	mov	fp, r1
    4246:	4583      	cmp	fp, r0
    4248:	4180      	sbcs	r0, r0
    424a:	4241      	negs	r1, r0
    424c:	4688      	mov	r8, r1
    424e:	4651      	mov	r1, sl
    4250:	0408      	lsls	r0, r1, #16
    4252:	042f      	lsls	r7, r5, #16
    4254:	0c00      	lsrs	r0, r0, #16
    4256:	183f      	adds	r7, r7, r0
    4258:	4658      	mov	r0, fp
    425a:	9902      	ldr	r1, [sp, #8]
    425c:	1810      	adds	r0, r2, r0
    425e:	4689      	mov	r9, r1
    4260:	4290      	cmp	r0, r2
    4262:	4192      	sbcs	r2, r2
    4264:	444f      	add	r7, r9
    4266:	46ba      	mov	sl, r7
    4268:	4252      	negs	r2, r2
    426a:	4699      	mov	r9, r3
    426c:	4693      	mov	fp, r2
    426e:	44c2      	add	sl, r8
    4270:	44d1      	add	r9, sl
    4272:	44cb      	add	fp, r9
    4274:	428f      	cmp	r7, r1
    4276:	41bf      	sbcs	r7, r7
    4278:	45c2      	cmp	sl, r8
    427a:	4189      	sbcs	r1, r1
    427c:	4599      	cmp	r9, r3
    427e:	419b      	sbcs	r3, r3
    4280:	4593      	cmp	fp, r2
    4282:	4192      	sbcs	r2, r2
    4284:	427f      	negs	r7, r7
    4286:	4249      	negs	r1, r1
    4288:	0c2d      	lsrs	r5, r5, #16
    428a:	4252      	negs	r2, r2
    428c:	430f      	orrs	r7, r1
    428e:	425b      	negs	r3, r3
    4290:	4313      	orrs	r3, r2
    4292:	197f      	adds	r7, r7, r5
    4294:	18ff      	adds	r7, r7, r3
    4296:	465b      	mov	r3, fp
    4298:	193c      	adds	r4, r7, r4
    429a:	0ddb      	lsrs	r3, r3, #23
    429c:	9a05      	ldr	r2, [sp, #20]
    429e:	0264      	lsls	r4, r4, #9
    42a0:	431c      	orrs	r4, r3
    42a2:	0243      	lsls	r3, r0, #9
    42a4:	4313      	orrs	r3, r2
    42a6:	1e5d      	subs	r5, r3, #1
    42a8:	41ab      	sbcs	r3, r5
    42aa:	465a      	mov	r2, fp
    42ac:	0dc0      	lsrs	r0, r0, #23
    42ae:	4303      	orrs	r3, r0
    42b0:	0252      	lsls	r2, r2, #9
    42b2:	4313      	orrs	r3, r2
    42b4:	01e2      	lsls	r2, r4, #7
    42b6:	d556      	bpl.n	4366 <__aeabi_dmul+0x426>
    42b8:	2001      	movs	r0, #1
    42ba:	085a      	lsrs	r2, r3, #1
    42bc:	4003      	ands	r3, r0
    42be:	4313      	orrs	r3, r2
    42c0:	07e2      	lsls	r2, r4, #31
    42c2:	4313      	orrs	r3, r2
    42c4:	0864      	lsrs	r4, r4, #1
    42c6:	485a      	ldr	r0, [pc, #360]	; (4430 <__aeabi_dmul+0x4f0>)
    42c8:	4460      	add	r0, ip
    42ca:	2800      	cmp	r0, #0
    42cc:	dd4d      	ble.n	436a <__aeabi_dmul+0x42a>
    42ce:	075a      	lsls	r2, r3, #29
    42d0:	d009      	beq.n	42e6 <__aeabi_dmul+0x3a6>
    42d2:	220f      	movs	r2, #15
    42d4:	401a      	ands	r2, r3
    42d6:	2a04      	cmp	r2, #4
    42d8:	d005      	beq.n	42e6 <__aeabi_dmul+0x3a6>
    42da:	1d1a      	adds	r2, r3, #4
    42dc:	429a      	cmp	r2, r3
    42de:	419b      	sbcs	r3, r3
    42e0:	425b      	negs	r3, r3
    42e2:	18e4      	adds	r4, r4, r3
    42e4:	0013      	movs	r3, r2
    42e6:	01e2      	lsls	r2, r4, #7
    42e8:	d504      	bpl.n	42f4 <__aeabi_dmul+0x3b4>
    42ea:	2080      	movs	r0, #128	; 0x80
    42ec:	4a51      	ldr	r2, [pc, #324]	; (4434 <__aeabi_dmul+0x4f4>)
    42ee:	00c0      	lsls	r0, r0, #3
    42f0:	4014      	ands	r4, r2
    42f2:	4460      	add	r0, ip
    42f4:	4a50      	ldr	r2, [pc, #320]	; (4438 <__aeabi_dmul+0x4f8>)
    42f6:	4290      	cmp	r0, r2
    42f8:	dd00      	ble.n	42fc <__aeabi_dmul+0x3bc>
    42fa:	e6e3      	b.n	40c4 <__aeabi_dmul+0x184>
    42fc:	2501      	movs	r5, #1
    42fe:	08db      	lsrs	r3, r3, #3
    4300:	0762      	lsls	r2, r4, #29
    4302:	431a      	orrs	r2, r3
    4304:	0264      	lsls	r4, r4, #9
    4306:	9b01      	ldr	r3, [sp, #4]
    4308:	4691      	mov	r9, r2
    430a:	0b22      	lsrs	r2, r4, #12
    430c:	0544      	lsls	r4, r0, #21
    430e:	0d64      	lsrs	r4, r4, #21
    4310:	401d      	ands	r5, r3
    4312:	e67c      	b.n	400e <__aeabi_dmul+0xce>
    4314:	2280      	movs	r2, #128	; 0x80
    4316:	4659      	mov	r1, fp
    4318:	0312      	lsls	r2, r2, #12
    431a:	4211      	tst	r1, r2
    431c:	d008      	beq.n	4330 <__aeabi_dmul+0x3f0>
    431e:	4214      	tst	r4, r2
    4320:	d106      	bne.n	4330 <__aeabi_dmul+0x3f0>
    4322:	4322      	orrs	r2, r4
    4324:	0312      	lsls	r2, r2, #12
    4326:	0b12      	lsrs	r2, r2, #12
    4328:	4645      	mov	r5, r8
    432a:	4699      	mov	r9, r3
    432c:	4c43      	ldr	r4, [pc, #268]	; (443c <__aeabi_dmul+0x4fc>)
    432e:	e66e      	b.n	400e <__aeabi_dmul+0xce>
    4330:	465b      	mov	r3, fp
    4332:	431a      	orrs	r2, r3
    4334:	0312      	lsls	r2, r2, #12
    4336:	0b12      	lsrs	r2, r2, #12
    4338:	4c40      	ldr	r4, [pc, #256]	; (443c <__aeabi_dmul+0x4fc>)
    433a:	e668      	b.n	400e <__aeabi_dmul+0xce>
    433c:	0003      	movs	r3, r0
    433e:	4654      	mov	r4, sl
    4340:	3b28      	subs	r3, #40	; 0x28
    4342:	409c      	lsls	r4, r3
    4344:	2300      	movs	r3, #0
    4346:	e6b9      	b.n	40bc <__aeabi_dmul+0x17c>
    4348:	f000 fbfc 	bl	4b44 <__clzsi2>
    434c:	3020      	adds	r0, #32
    434e:	e6a6      	b.n	409e <__aeabi_dmul+0x15e>
    4350:	0003      	movs	r3, r0
    4352:	3b28      	subs	r3, #40	; 0x28
    4354:	409f      	lsls	r7, r3
    4356:	2300      	movs	r3, #0
    4358:	46bb      	mov	fp, r7
    435a:	4699      	mov	r9, r3
    435c:	e68a      	b.n	4074 <__aeabi_dmul+0x134>
    435e:	f000 fbf1 	bl	4b44 <__clzsi2>
    4362:	3020      	adds	r0, #32
    4364:	e674      	b.n	4050 <__aeabi_dmul+0x110>
    4366:	46b4      	mov	ip, r6
    4368:	e7ad      	b.n	42c6 <__aeabi_dmul+0x386>
    436a:	2501      	movs	r5, #1
    436c:	1a2a      	subs	r2, r5, r0
    436e:	2a38      	cmp	r2, #56	; 0x38
    4370:	dd06      	ble.n	4380 <__aeabi_dmul+0x440>
    4372:	9b01      	ldr	r3, [sp, #4]
    4374:	2400      	movs	r4, #0
    4376:	401d      	ands	r5, r3
    4378:	2300      	movs	r3, #0
    437a:	2200      	movs	r2, #0
    437c:	4699      	mov	r9, r3
    437e:	e646      	b.n	400e <__aeabi_dmul+0xce>
    4380:	2a1f      	cmp	r2, #31
    4382:	dc21      	bgt.n	43c8 <__aeabi_dmul+0x488>
    4384:	2520      	movs	r5, #32
    4386:	0020      	movs	r0, r4
    4388:	1aad      	subs	r5, r5, r2
    438a:	001e      	movs	r6, r3
    438c:	40ab      	lsls	r3, r5
    438e:	40a8      	lsls	r0, r5
    4390:	40d6      	lsrs	r6, r2
    4392:	1e5d      	subs	r5, r3, #1
    4394:	41ab      	sbcs	r3, r5
    4396:	4330      	orrs	r0, r6
    4398:	4318      	orrs	r0, r3
    439a:	40d4      	lsrs	r4, r2
    439c:	0743      	lsls	r3, r0, #29
    439e:	d009      	beq.n	43b4 <__aeabi_dmul+0x474>
    43a0:	230f      	movs	r3, #15
    43a2:	4003      	ands	r3, r0
    43a4:	2b04      	cmp	r3, #4
    43a6:	d005      	beq.n	43b4 <__aeabi_dmul+0x474>
    43a8:	0003      	movs	r3, r0
    43aa:	1d18      	adds	r0, r3, #4
    43ac:	4298      	cmp	r0, r3
    43ae:	419b      	sbcs	r3, r3
    43b0:	425b      	negs	r3, r3
    43b2:	18e4      	adds	r4, r4, r3
    43b4:	0223      	lsls	r3, r4, #8
    43b6:	d521      	bpl.n	43fc <__aeabi_dmul+0x4bc>
    43b8:	2501      	movs	r5, #1
    43ba:	9b01      	ldr	r3, [sp, #4]
    43bc:	2401      	movs	r4, #1
    43be:	401d      	ands	r5, r3
    43c0:	2300      	movs	r3, #0
    43c2:	2200      	movs	r2, #0
    43c4:	4699      	mov	r9, r3
    43c6:	e622      	b.n	400e <__aeabi_dmul+0xce>
    43c8:	251f      	movs	r5, #31
    43ca:	0021      	movs	r1, r4
    43cc:	426d      	negs	r5, r5
    43ce:	1a28      	subs	r0, r5, r0
    43d0:	40c1      	lsrs	r1, r0
    43d2:	0008      	movs	r0, r1
    43d4:	2a20      	cmp	r2, #32
    43d6:	d01d      	beq.n	4414 <__aeabi_dmul+0x4d4>
    43d8:	355f      	adds	r5, #95	; 0x5f
    43da:	1aaa      	subs	r2, r5, r2
    43dc:	4094      	lsls	r4, r2
    43de:	4323      	orrs	r3, r4
    43e0:	1e5c      	subs	r4, r3, #1
    43e2:	41a3      	sbcs	r3, r4
    43e4:	2507      	movs	r5, #7
    43e6:	4303      	orrs	r3, r0
    43e8:	401d      	ands	r5, r3
    43ea:	2200      	movs	r2, #0
    43ec:	2d00      	cmp	r5, #0
    43ee:	d009      	beq.n	4404 <__aeabi_dmul+0x4c4>
    43f0:	220f      	movs	r2, #15
    43f2:	2400      	movs	r4, #0
    43f4:	401a      	ands	r2, r3
    43f6:	0018      	movs	r0, r3
    43f8:	2a04      	cmp	r2, #4
    43fa:	d1d6      	bne.n	43aa <__aeabi_dmul+0x46a>
    43fc:	0003      	movs	r3, r0
    43fe:	0765      	lsls	r5, r4, #29
    4400:	0264      	lsls	r4, r4, #9
    4402:	0b22      	lsrs	r2, r4, #12
    4404:	08db      	lsrs	r3, r3, #3
    4406:	432b      	orrs	r3, r5
    4408:	2501      	movs	r5, #1
    440a:	4699      	mov	r9, r3
    440c:	9b01      	ldr	r3, [sp, #4]
    440e:	2400      	movs	r4, #0
    4410:	401d      	ands	r5, r3
    4412:	e5fc      	b.n	400e <__aeabi_dmul+0xce>
    4414:	2400      	movs	r4, #0
    4416:	e7e2      	b.n	43de <__aeabi_dmul+0x49e>
    4418:	2280      	movs	r2, #128	; 0x80
    441a:	2501      	movs	r5, #1
    441c:	0312      	lsls	r2, r2, #12
    441e:	4322      	orrs	r2, r4
    4420:	9901      	ldr	r1, [sp, #4]
    4422:	0312      	lsls	r2, r2, #12
    4424:	0b12      	lsrs	r2, r2, #12
    4426:	400d      	ands	r5, r1
    4428:	4699      	mov	r9, r3
    442a:	4c04      	ldr	r4, [pc, #16]	; (443c <__aeabi_dmul+0x4fc>)
    442c:	e5ef      	b.n	400e <__aeabi_dmul+0xce>
    442e:	46c0      	nop			; (mov r8, r8)
    4430:	000003ff 	.word	0x000003ff
    4434:	feffffff 	.word	0xfeffffff
    4438:	000007fe 	.word	0x000007fe
    443c:	000007ff 	.word	0x000007ff

00004440 <__aeabi_dsub>:
    4440:	b5f0      	push	{r4, r5, r6, r7, lr}
    4442:	4646      	mov	r6, r8
    4444:	46d6      	mov	lr, sl
    4446:	464f      	mov	r7, r9
    4448:	030c      	lsls	r4, r1, #12
    444a:	b5c0      	push	{r6, r7, lr}
    444c:	0fcd      	lsrs	r5, r1, #31
    444e:	004e      	lsls	r6, r1, #1
    4450:	0a61      	lsrs	r1, r4, #9
    4452:	0f44      	lsrs	r4, r0, #29
    4454:	430c      	orrs	r4, r1
    4456:	00c1      	lsls	r1, r0, #3
    4458:	0058      	lsls	r0, r3, #1
    445a:	0d40      	lsrs	r0, r0, #21
    445c:	4684      	mov	ip, r0
    445e:	468a      	mov	sl, r1
    4460:	000f      	movs	r7, r1
    4462:	0319      	lsls	r1, r3, #12
    4464:	0f50      	lsrs	r0, r2, #29
    4466:	0a49      	lsrs	r1, r1, #9
    4468:	4301      	orrs	r1, r0
    446a:	48c6      	ldr	r0, [pc, #792]	; (4784 <__aeabi_dsub+0x344>)
    446c:	0d76      	lsrs	r6, r6, #21
    446e:	46a8      	mov	r8, r5
    4470:	0fdb      	lsrs	r3, r3, #31
    4472:	00d2      	lsls	r2, r2, #3
    4474:	4584      	cmp	ip, r0
    4476:	d100      	bne.n	447a <__aeabi_dsub+0x3a>
    4478:	e0d8      	b.n	462c <__aeabi_dsub+0x1ec>
    447a:	2001      	movs	r0, #1
    447c:	4043      	eors	r3, r0
    447e:	42ab      	cmp	r3, r5
    4480:	d100      	bne.n	4484 <__aeabi_dsub+0x44>
    4482:	e0a6      	b.n	45d2 <__aeabi_dsub+0x192>
    4484:	4660      	mov	r0, ip
    4486:	1a35      	subs	r5, r6, r0
    4488:	2d00      	cmp	r5, #0
    448a:	dc00      	bgt.n	448e <__aeabi_dsub+0x4e>
    448c:	e105      	b.n	469a <__aeabi_dsub+0x25a>
    448e:	2800      	cmp	r0, #0
    4490:	d110      	bne.n	44b4 <__aeabi_dsub+0x74>
    4492:	000b      	movs	r3, r1
    4494:	4313      	orrs	r3, r2
    4496:	d100      	bne.n	449a <__aeabi_dsub+0x5a>
    4498:	e0d7      	b.n	464a <__aeabi_dsub+0x20a>
    449a:	1e6b      	subs	r3, r5, #1
    449c:	2b00      	cmp	r3, #0
    449e:	d000      	beq.n	44a2 <__aeabi_dsub+0x62>
    44a0:	e14b      	b.n	473a <__aeabi_dsub+0x2fa>
    44a2:	4653      	mov	r3, sl
    44a4:	1a9f      	subs	r7, r3, r2
    44a6:	45ba      	cmp	sl, r7
    44a8:	4180      	sbcs	r0, r0
    44aa:	1a64      	subs	r4, r4, r1
    44ac:	4240      	negs	r0, r0
    44ae:	1a24      	subs	r4, r4, r0
    44b0:	2601      	movs	r6, #1
    44b2:	e01e      	b.n	44f2 <__aeabi_dsub+0xb2>
    44b4:	4bb3      	ldr	r3, [pc, #716]	; (4784 <__aeabi_dsub+0x344>)
    44b6:	429e      	cmp	r6, r3
    44b8:	d048      	beq.n	454c <__aeabi_dsub+0x10c>
    44ba:	2380      	movs	r3, #128	; 0x80
    44bc:	041b      	lsls	r3, r3, #16
    44be:	4319      	orrs	r1, r3
    44c0:	2d38      	cmp	r5, #56	; 0x38
    44c2:	dd00      	ble.n	44c6 <__aeabi_dsub+0x86>
    44c4:	e119      	b.n	46fa <__aeabi_dsub+0x2ba>
    44c6:	2d1f      	cmp	r5, #31
    44c8:	dd00      	ble.n	44cc <__aeabi_dsub+0x8c>
    44ca:	e14c      	b.n	4766 <__aeabi_dsub+0x326>
    44cc:	2320      	movs	r3, #32
    44ce:	000f      	movs	r7, r1
    44d0:	1b5b      	subs	r3, r3, r5
    44d2:	0010      	movs	r0, r2
    44d4:	409a      	lsls	r2, r3
    44d6:	409f      	lsls	r7, r3
    44d8:	40e8      	lsrs	r0, r5
    44da:	1e53      	subs	r3, r2, #1
    44dc:	419a      	sbcs	r2, r3
    44de:	40e9      	lsrs	r1, r5
    44e0:	4307      	orrs	r7, r0
    44e2:	4317      	orrs	r7, r2
    44e4:	4653      	mov	r3, sl
    44e6:	1bdf      	subs	r7, r3, r7
    44e8:	1a61      	subs	r1, r4, r1
    44ea:	45ba      	cmp	sl, r7
    44ec:	41a4      	sbcs	r4, r4
    44ee:	4264      	negs	r4, r4
    44f0:	1b0c      	subs	r4, r1, r4
    44f2:	0223      	lsls	r3, r4, #8
    44f4:	d400      	bmi.n	44f8 <__aeabi_dsub+0xb8>
    44f6:	e0c5      	b.n	4684 <__aeabi_dsub+0x244>
    44f8:	0264      	lsls	r4, r4, #9
    44fa:	0a65      	lsrs	r5, r4, #9
    44fc:	2d00      	cmp	r5, #0
    44fe:	d100      	bne.n	4502 <__aeabi_dsub+0xc2>
    4500:	e0f6      	b.n	46f0 <__aeabi_dsub+0x2b0>
    4502:	0028      	movs	r0, r5
    4504:	f000 fb1e 	bl	4b44 <__clzsi2>
    4508:	0003      	movs	r3, r0
    450a:	3b08      	subs	r3, #8
    450c:	2b1f      	cmp	r3, #31
    450e:	dd00      	ble.n	4512 <__aeabi_dsub+0xd2>
    4510:	e0e9      	b.n	46e6 <__aeabi_dsub+0x2a6>
    4512:	2220      	movs	r2, #32
    4514:	003c      	movs	r4, r7
    4516:	1ad2      	subs	r2, r2, r3
    4518:	409d      	lsls	r5, r3
    451a:	40d4      	lsrs	r4, r2
    451c:	409f      	lsls	r7, r3
    451e:	4325      	orrs	r5, r4
    4520:	429e      	cmp	r6, r3
    4522:	dd00      	ble.n	4526 <__aeabi_dsub+0xe6>
    4524:	e0db      	b.n	46de <__aeabi_dsub+0x29e>
    4526:	1b9e      	subs	r6, r3, r6
    4528:	1c73      	adds	r3, r6, #1
    452a:	2b1f      	cmp	r3, #31
    452c:	dd00      	ble.n	4530 <__aeabi_dsub+0xf0>
    452e:	e10a      	b.n	4746 <__aeabi_dsub+0x306>
    4530:	2220      	movs	r2, #32
    4532:	0038      	movs	r0, r7
    4534:	1ad2      	subs	r2, r2, r3
    4536:	0029      	movs	r1, r5
    4538:	4097      	lsls	r7, r2
    453a:	002c      	movs	r4, r5
    453c:	4091      	lsls	r1, r2
    453e:	40d8      	lsrs	r0, r3
    4540:	1e7a      	subs	r2, r7, #1
    4542:	4197      	sbcs	r7, r2
    4544:	40dc      	lsrs	r4, r3
    4546:	2600      	movs	r6, #0
    4548:	4301      	orrs	r1, r0
    454a:	430f      	orrs	r7, r1
    454c:	077b      	lsls	r3, r7, #29
    454e:	d009      	beq.n	4564 <__aeabi_dsub+0x124>
    4550:	230f      	movs	r3, #15
    4552:	403b      	ands	r3, r7
    4554:	2b04      	cmp	r3, #4
    4556:	d005      	beq.n	4564 <__aeabi_dsub+0x124>
    4558:	1d3b      	adds	r3, r7, #4
    455a:	42bb      	cmp	r3, r7
    455c:	41bf      	sbcs	r7, r7
    455e:	427f      	negs	r7, r7
    4560:	19e4      	adds	r4, r4, r7
    4562:	001f      	movs	r7, r3
    4564:	0223      	lsls	r3, r4, #8
    4566:	d525      	bpl.n	45b4 <__aeabi_dsub+0x174>
    4568:	4b86      	ldr	r3, [pc, #536]	; (4784 <__aeabi_dsub+0x344>)
    456a:	3601      	adds	r6, #1
    456c:	429e      	cmp	r6, r3
    456e:	d100      	bne.n	4572 <__aeabi_dsub+0x132>
    4570:	e0af      	b.n	46d2 <__aeabi_dsub+0x292>
    4572:	4b85      	ldr	r3, [pc, #532]	; (4788 <__aeabi_dsub+0x348>)
    4574:	2501      	movs	r5, #1
    4576:	401c      	ands	r4, r3
    4578:	4643      	mov	r3, r8
    457a:	0762      	lsls	r2, r4, #29
    457c:	08ff      	lsrs	r7, r7, #3
    457e:	0264      	lsls	r4, r4, #9
    4580:	0576      	lsls	r6, r6, #21
    4582:	4317      	orrs	r7, r2
    4584:	0b24      	lsrs	r4, r4, #12
    4586:	0d76      	lsrs	r6, r6, #21
    4588:	401d      	ands	r5, r3
    458a:	2100      	movs	r1, #0
    458c:	0324      	lsls	r4, r4, #12
    458e:	0b23      	lsrs	r3, r4, #12
    4590:	0d0c      	lsrs	r4, r1, #20
    4592:	4a7e      	ldr	r2, [pc, #504]	; (478c <__aeabi_dsub+0x34c>)
    4594:	0524      	lsls	r4, r4, #20
    4596:	431c      	orrs	r4, r3
    4598:	4014      	ands	r4, r2
    459a:	0533      	lsls	r3, r6, #20
    459c:	4323      	orrs	r3, r4
    459e:	005b      	lsls	r3, r3, #1
    45a0:	07ed      	lsls	r5, r5, #31
    45a2:	085b      	lsrs	r3, r3, #1
    45a4:	432b      	orrs	r3, r5
    45a6:	0038      	movs	r0, r7
    45a8:	0019      	movs	r1, r3
    45aa:	bc1c      	pop	{r2, r3, r4}
    45ac:	4690      	mov	r8, r2
    45ae:	4699      	mov	r9, r3
    45b0:	46a2      	mov	sl, r4
    45b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45b4:	2501      	movs	r5, #1
    45b6:	4643      	mov	r3, r8
    45b8:	0762      	lsls	r2, r4, #29
    45ba:	08ff      	lsrs	r7, r7, #3
    45bc:	4317      	orrs	r7, r2
    45be:	08e4      	lsrs	r4, r4, #3
    45c0:	401d      	ands	r5, r3
    45c2:	4b70      	ldr	r3, [pc, #448]	; (4784 <__aeabi_dsub+0x344>)
    45c4:	429e      	cmp	r6, r3
    45c6:	d036      	beq.n	4636 <__aeabi_dsub+0x1f6>
    45c8:	0324      	lsls	r4, r4, #12
    45ca:	0576      	lsls	r6, r6, #21
    45cc:	0b24      	lsrs	r4, r4, #12
    45ce:	0d76      	lsrs	r6, r6, #21
    45d0:	e7db      	b.n	458a <__aeabi_dsub+0x14a>
    45d2:	4663      	mov	r3, ip
    45d4:	1af3      	subs	r3, r6, r3
    45d6:	2b00      	cmp	r3, #0
    45d8:	dc00      	bgt.n	45dc <__aeabi_dsub+0x19c>
    45da:	e094      	b.n	4706 <__aeabi_dsub+0x2c6>
    45dc:	4660      	mov	r0, ip
    45de:	2800      	cmp	r0, #0
    45e0:	d035      	beq.n	464e <__aeabi_dsub+0x20e>
    45e2:	4868      	ldr	r0, [pc, #416]	; (4784 <__aeabi_dsub+0x344>)
    45e4:	4286      	cmp	r6, r0
    45e6:	d0b1      	beq.n	454c <__aeabi_dsub+0x10c>
    45e8:	2780      	movs	r7, #128	; 0x80
    45ea:	043f      	lsls	r7, r7, #16
    45ec:	4339      	orrs	r1, r7
    45ee:	2b38      	cmp	r3, #56	; 0x38
    45f0:	dc00      	bgt.n	45f4 <__aeabi_dsub+0x1b4>
    45f2:	e0fd      	b.n	47f0 <__aeabi_dsub+0x3b0>
    45f4:	430a      	orrs	r2, r1
    45f6:	0017      	movs	r7, r2
    45f8:	2100      	movs	r1, #0
    45fa:	1e7a      	subs	r2, r7, #1
    45fc:	4197      	sbcs	r7, r2
    45fe:	4457      	add	r7, sl
    4600:	4557      	cmp	r7, sl
    4602:	4180      	sbcs	r0, r0
    4604:	1909      	adds	r1, r1, r4
    4606:	4244      	negs	r4, r0
    4608:	190c      	adds	r4, r1, r4
    460a:	0223      	lsls	r3, r4, #8
    460c:	d53a      	bpl.n	4684 <__aeabi_dsub+0x244>
    460e:	4b5d      	ldr	r3, [pc, #372]	; (4784 <__aeabi_dsub+0x344>)
    4610:	3601      	adds	r6, #1
    4612:	429e      	cmp	r6, r3
    4614:	d100      	bne.n	4618 <__aeabi_dsub+0x1d8>
    4616:	e14b      	b.n	48b0 <__aeabi_dsub+0x470>
    4618:	2201      	movs	r2, #1
    461a:	4b5b      	ldr	r3, [pc, #364]	; (4788 <__aeabi_dsub+0x348>)
    461c:	401c      	ands	r4, r3
    461e:	087b      	lsrs	r3, r7, #1
    4620:	4017      	ands	r7, r2
    4622:	431f      	orrs	r7, r3
    4624:	07e2      	lsls	r2, r4, #31
    4626:	4317      	orrs	r7, r2
    4628:	0864      	lsrs	r4, r4, #1
    462a:	e78f      	b.n	454c <__aeabi_dsub+0x10c>
    462c:	0008      	movs	r0, r1
    462e:	4310      	orrs	r0, r2
    4630:	d000      	beq.n	4634 <__aeabi_dsub+0x1f4>
    4632:	e724      	b.n	447e <__aeabi_dsub+0x3e>
    4634:	e721      	b.n	447a <__aeabi_dsub+0x3a>
    4636:	0023      	movs	r3, r4
    4638:	433b      	orrs	r3, r7
    463a:	d100      	bne.n	463e <__aeabi_dsub+0x1fe>
    463c:	e1b9      	b.n	49b2 <__aeabi_dsub+0x572>
    463e:	2280      	movs	r2, #128	; 0x80
    4640:	0312      	lsls	r2, r2, #12
    4642:	4314      	orrs	r4, r2
    4644:	0324      	lsls	r4, r4, #12
    4646:	0b24      	lsrs	r4, r4, #12
    4648:	e79f      	b.n	458a <__aeabi_dsub+0x14a>
    464a:	002e      	movs	r6, r5
    464c:	e77e      	b.n	454c <__aeabi_dsub+0x10c>
    464e:	0008      	movs	r0, r1
    4650:	4310      	orrs	r0, r2
    4652:	d100      	bne.n	4656 <__aeabi_dsub+0x216>
    4654:	e0ca      	b.n	47ec <__aeabi_dsub+0x3ac>
    4656:	1e58      	subs	r0, r3, #1
    4658:	4684      	mov	ip, r0
    465a:	2800      	cmp	r0, #0
    465c:	d000      	beq.n	4660 <__aeabi_dsub+0x220>
    465e:	e0e7      	b.n	4830 <__aeabi_dsub+0x3f0>
    4660:	4452      	add	r2, sl
    4662:	4552      	cmp	r2, sl
    4664:	4180      	sbcs	r0, r0
    4666:	1864      	adds	r4, r4, r1
    4668:	4240      	negs	r0, r0
    466a:	1824      	adds	r4, r4, r0
    466c:	0017      	movs	r7, r2
    466e:	2601      	movs	r6, #1
    4670:	0223      	lsls	r3, r4, #8
    4672:	d507      	bpl.n	4684 <__aeabi_dsub+0x244>
    4674:	2602      	movs	r6, #2
    4676:	e7cf      	b.n	4618 <__aeabi_dsub+0x1d8>
    4678:	4664      	mov	r4, ip
    467a:	432c      	orrs	r4, r5
    467c:	d100      	bne.n	4680 <__aeabi_dsub+0x240>
    467e:	e1b3      	b.n	49e8 <__aeabi_dsub+0x5a8>
    4680:	002c      	movs	r4, r5
    4682:	4667      	mov	r7, ip
    4684:	077b      	lsls	r3, r7, #29
    4686:	d000      	beq.n	468a <__aeabi_dsub+0x24a>
    4688:	e762      	b.n	4550 <__aeabi_dsub+0x110>
    468a:	0763      	lsls	r3, r4, #29
    468c:	08ff      	lsrs	r7, r7, #3
    468e:	431f      	orrs	r7, r3
    4690:	2501      	movs	r5, #1
    4692:	4643      	mov	r3, r8
    4694:	08e4      	lsrs	r4, r4, #3
    4696:	401d      	ands	r5, r3
    4698:	e793      	b.n	45c2 <__aeabi_dsub+0x182>
    469a:	2d00      	cmp	r5, #0
    469c:	d178      	bne.n	4790 <__aeabi_dsub+0x350>
    469e:	1c75      	adds	r5, r6, #1
    46a0:	056d      	lsls	r5, r5, #21
    46a2:	0d6d      	lsrs	r5, r5, #21
    46a4:	2d01      	cmp	r5, #1
    46a6:	dc00      	bgt.n	46aa <__aeabi_dsub+0x26a>
    46a8:	e0f2      	b.n	4890 <__aeabi_dsub+0x450>
    46aa:	4650      	mov	r0, sl
    46ac:	1a80      	subs	r0, r0, r2
    46ae:	4582      	cmp	sl, r0
    46b0:	41bf      	sbcs	r7, r7
    46b2:	1a65      	subs	r5, r4, r1
    46b4:	427f      	negs	r7, r7
    46b6:	1bed      	subs	r5, r5, r7
    46b8:	4684      	mov	ip, r0
    46ba:	0228      	lsls	r0, r5, #8
    46bc:	d400      	bmi.n	46c0 <__aeabi_dsub+0x280>
    46be:	e08c      	b.n	47da <__aeabi_dsub+0x39a>
    46c0:	4650      	mov	r0, sl
    46c2:	1a17      	subs	r7, r2, r0
    46c4:	42ba      	cmp	r2, r7
    46c6:	4192      	sbcs	r2, r2
    46c8:	1b0c      	subs	r4, r1, r4
    46ca:	4255      	negs	r5, r2
    46cc:	1b65      	subs	r5, r4, r5
    46ce:	4698      	mov	r8, r3
    46d0:	e714      	b.n	44fc <__aeabi_dsub+0xbc>
    46d2:	2501      	movs	r5, #1
    46d4:	4643      	mov	r3, r8
    46d6:	2400      	movs	r4, #0
    46d8:	401d      	ands	r5, r3
    46da:	2700      	movs	r7, #0
    46dc:	e755      	b.n	458a <__aeabi_dsub+0x14a>
    46de:	4c2a      	ldr	r4, [pc, #168]	; (4788 <__aeabi_dsub+0x348>)
    46e0:	1af6      	subs	r6, r6, r3
    46e2:	402c      	ands	r4, r5
    46e4:	e732      	b.n	454c <__aeabi_dsub+0x10c>
    46e6:	003d      	movs	r5, r7
    46e8:	3828      	subs	r0, #40	; 0x28
    46ea:	4085      	lsls	r5, r0
    46ec:	2700      	movs	r7, #0
    46ee:	e717      	b.n	4520 <__aeabi_dsub+0xe0>
    46f0:	0038      	movs	r0, r7
    46f2:	f000 fa27 	bl	4b44 <__clzsi2>
    46f6:	3020      	adds	r0, #32
    46f8:	e706      	b.n	4508 <__aeabi_dsub+0xc8>
    46fa:	430a      	orrs	r2, r1
    46fc:	0017      	movs	r7, r2
    46fe:	2100      	movs	r1, #0
    4700:	1e7a      	subs	r2, r7, #1
    4702:	4197      	sbcs	r7, r2
    4704:	e6ee      	b.n	44e4 <__aeabi_dsub+0xa4>
    4706:	2b00      	cmp	r3, #0
    4708:	d000      	beq.n	470c <__aeabi_dsub+0x2cc>
    470a:	e0e5      	b.n	48d8 <__aeabi_dsub+0x498>
    470c:	1c73      	adds	r3, r6, #1
    470e:	469c      	mov	ip, r3
    4710:	055b      	lsls	r3, r3, #21
    4712:	0d5b      	lsrs	r3, r3, #21
    4714:	2b01      	cmp	r3, #1
    4716:	dc00      	bgt.n	471a <__aeabi_dsub+0x2da>
    4718:	e09f      	b.n	485a <__aeabi_dsub+0x41a>
    471a:	4b1a      	ldr	r3, [pc, #104]	; (4784 <__aeabi_dsub+0x344>)
    471c:	459c      	cmp	ip, r3
    471e:	d100      	bne.n	4722 <__aeabi_dsub+0x2e2>
    4720:	e0c5      	b.n	48ae <__aeabi_dsub+0x46e>
    4722:	4452      	add	r2, sl
    4724:	4552      	cmp	r2, sl
    4726:	4180      	sbcs	r0, r0
    4728:	1864      	adds	r4, r4, r1
    472a:	4240      	negs	r0, r0
    472c:	1824      	adds	r4, r4, r0
    472e:	07e7      	lsls	r7, r4, #31
    4730:	0852      	lsrs	r2, r2, #1
    4732:	4317      	orrs	r7, r2
    4734:	0864      	lsrs	r4, r4, #1
    4736:	4666      	mov	r6, ip
    4738:	e708      	b.n	454c <__aeabi_dsub+0x10c>
    473a:	4812      	ldr	r0, [pc, #72]	; (4784 <__aeabi_dsub+0x344>)
    473c:	4285      	cmp	r5, r0
    473e:	d100      	bne.n	4742 <__aeabi_dsub+0x302>
    4740:	e085      	b.n	484e <__aeabi_dsub+0x40e>
    4742:	001d      	movs	r5, r3
    4744:	e6bc      	b.n	44c0 <__aeabi_dsub+0x80>
    4746:	0029      	movs	r1, r5
    4748:	3e1f      	subs	r6, #31
    474a:	40f1      	lsrs	r1, r6
    474c:	2b20      	cmp	r3, #32
    474e:	d100      	bne.n	4752 <__aeabi_dsub+0x312>
    4750:	e07f      	b.n	4852 <__aeabi_dsub+0x412>
    4752:	2240      	movs	r2, #64	; 0x40
    4754:	1ad3      	subs	r3, r2, r3
    4756:	409d      	lsls	r5, r3
    4758:	432f      	orrs	r7, r5
    475a:	1e7d      	subs	r5, r7, #1
    475c:	41af      	sbcs	r7, r5
    475e:	2400      	movs	r4, #0
    4760:	430f      	orrs	r7, r1
    4762:	2600      	movs	r6, #0
    4764:	e78e      	b.n	4684 <__aeabi_dsub+0x244>
    4766:	002b      	movs	r3, r5
    4768:	000f      	movs	r7, r1
    476a:	3b20      	subs	r3, #32
    476c:	40df      	lsrs	r7, r3
    476e:	2d20      	cmp	r5, #32
    4770:	d071      	beq.n	4856 <__aeabi_dsub+0x416>
    4772:	2340      	movs	r3, #64	; 0x40
    4774:	1b5d      	subs	r5, r3, r5
    4776:	40a9      	lsls	r1, r5
    4778:	430a      	orrs	r2, r1
    477a:	1e51      	subs	r1, r2, #1
    477c:	418a      	sbcs	r2, r1
    477e:	2100      	movs	r1, #0
    4780:	4317      	orrs	r7, r2
    4782:	e6af      	b.n	44e4 <__aeabi_dsub+0xa4>
    4784:	000007ff 	.word	0x000007ff
    4788:	ff7fffff 	.word	0xff7fffff
    478c:	800fffff 	.word	0x800fffff
    4790:	2e00      	cmp	r6, #0
    4792:	d03e      	beq.n	4812 <__aeabi_dsub+0x3d2>
    4794:	4eb3      	ldr	r6, [pc, #716]	; (4a64 <__aeabi_dsub+0x624>)
    4796:	45b4      	cmp	ip, r6
    4798:	d045      	beq.n	4826 <__aeabi_dsub+0x3e6>
    479a:	2680      	movs	r6, #128	; 0x80
    479c:	0436      	lsls	r6, r6, #16
    479e:	426d      	negs	r5, r5
    47a0:	4334      	orrs	r4, r6
    47a2:	2d38      	cmp	r5, #56	; 0x38
    47a4:	dd00      	ble.n	47a8 <__aeabi_dsub+0x368>
    47a6:	e0a8      	b.n	48fa <__aeabi_dsub+0x4ba>
    47a8:	2d1f      	cmp	r5, #31
    47aa:	dd00      	ble.n	47ae <__aeabi_dsub+0x36e>
    47ac:	e11f      	b.n	49ee <__aeabi_dsub+0x5ae>
    47ae:	2620      	movs	r6, #32
    47b0:	0027      	movs	r7, r4
    47b2:	4650      	mov	r0, sl
    47b4:	1b76      	subs	r6, r6, r5
    47b6:	40b7      	lsls	r7, r6
    47b8:	40e8      	lsrs	r0, r5
    47ba:	4307      	orrs	r7, r0
    47bc:	4650      	mov	r0, sl
    47be:	40b0      	lsls	r0, r6
    47c0:	1e46      	subs	r6, r0, #1
    47c2:	41b0      	sbcs	r0, r6
    47c4:	40ec      	lsrs	r4, r5
    47c6:	4338      	orrs	r0, r7
    47c8:	1a17      	subs	r7, r2, r0
    47ca:	42ba      	cmp	r2, r7
    47cc:	4192      	sbcs	r2, r2
    47ce:	1b0c      	subs	r4, r1, r4
    47d0:	4252      	negs	r2, r2
    47d2:	1aa4      	subs	r4, r4, r2
    47d4:	4666      	mov	r6, ip
    47d6:	4698      	mov	r8, r3
    47d8:	e68b      	b.n	44f2 <__aeabi_dsub+0xb2>
    47da:	4664      	mov	r4, ip
    47dc:	4667      	mov	r7, ip
    47de:	432c      	orrs	r4, r5
    47e0:	d000      	beq.n	47e4 <__aeabi_dsub+0x3a4>
    47e2:	e68b      	b.n	44fc <__aeabi_dsub+0xbc>
    47e4:	2500      	movs	r5, #0
    47e6:	2600      	movs	r6, #0
    47e8:	2700      	movs	r7, #0
    47ea:	e6ea      	b.n	45c2 <__aeabi_dsub+0x182>
    47ec:	001e      	movs	r6, r3
    47ee:	e6ad      	b.n	454c <__aeabi_dsub+0x10c>
    47f0:	2b1f      	cmp	r3, #31
    47f2:	dc60      	bgt.n	48b6 <__aeabi_dsub+0x476>
    47f4:	2720      	movs	r7, #32
    47f6:	1af8      	subs	r0, r7, r3
    47f8:	000f      	movs	r7, r1
    47fa:	4684      	mov	ip, r0
    47fc:	4087      	lsls	r7, r0
    47fe:	0010      	movs	r0, r2
    4800:	40d8      	lsrs	r0, r3
    4802:	4307      	orrs	r7, r0
    4804:	4660      	mov	r0, ip
    4806:	4082      	lsls	r2, r0
    4808:	1e50      	subs	r0, r2, #1
    480a:	4182      	sbcs	r2, r0
    480c:	40d9      	lsrs	r1, r3
    480e:	4317      	orrs	r7, r2
    4810:	e6f5      	b.n	45fe <__aeabi_dsub+0x1be>
    4812:	0026      	movs	r6, r4
    4814:	4650      	mov	r0, sl
    4816:	4306      	orrs	r6, r0
    4818:	d005      	beq.n	4826 <__aeabi_dsub+0x3e6>
    481a:	43ed      	mvns	r5, r5
    481c:	2d00      	cmp	r5, #0
    481e:	d0d3      	beq.n	47c8 <__aeabi_dsub+0x388>
    4820:	4e90      	ldr	r6, [pc, #576]	; (4a64 <__aeabi_dsub+0x624>)
    4822:	45b4      	cmp	ip, r6
    4824:	d1bd      	bne.n	47a2 <__aeabi_dsub+0x362>
    4826:	000c      	movs	r4, r1
    4828:	0017      	movs	r7, r2
    482a:	4666      	mov	r6, ip
    482c:	4698      	mov	r8, r3
    482e:	e68d      	b.n	454c <__aeabi_dsub+0x10c>
    4830:	488c      	ldr	r0, [pc, #560]	; (4a64 <__aeabi_dsub+0x624>)
    4832:	4283      	cmp	r3, r0
    4834:	d00b      	beq.n	484e <__aeabi_dsub+0x40e>
    4836:	4663      	mov	r3, ip
    4838:	e6d9      	b.n	45ee <__aeabi_dsub+0x1ae>
    483a:	2d00      	cmp	r5, #0
    483c:	d000      	beq.n	4840 <__aeabi_dsub+0x400>
    483e:	e096      	b.n	496e <__aeabi_dsub+0x52e>
    4840:	0008      	movs	r0, r1
    4842:	4310      	orrs	r0, r2
    4844:	d100      	bne.n	4848 <__aeabi_dsub+0x408>
    4846:	e0e2      	b.n	4a0e <__aeabi_dsub+0x5ce>
    4848:	000c      	movs	r4, r1
    484a:	0017      	movs	r7, r2
    484c:	4698      	mov	r8, r3
    484e:	4e85      	ldr	r6, [pc, #532]	; (4a64 <__aeabi_dsub+0x624>)
    4850:	e67c      	b.n	454c <__aeabi_dsub+0x10c>
    4852:	2500      	movs	r5, #0
    4854:	e780      	b.n	4758 <__aeabi_dsub+0x318>
    4856:	2100      	movs	r1, #0
    4858:	e78e      	b.n	4778 <__aeabi_dsub+0x338>
    485a:	0023      	movs	r3, r4
    485c:	4650      	mov	r0, sl
    485e:	4303      	orrs	r3, r0
    4860:	2e00      	cmp	r6, #0
    4862:	d000      	beq.n	4866 <__aeabi_dsub+0x426>
    4864:	e0a8      	b.n	49b8 <__aeabi_dsub+0x578>
    4866:	2b00      	cmp	r3, #0
    4868:	d100      	bne.n	486c <__aeabi_dsub+0x42c>
    486a:	e0de      	b.n	4a2a <__aeabi_dsub+0x5ea>
    486c:	000b      	movs	r3, r1
    486e:	4313      	orrs	r3, r2
    4870:	d100      	bne.n	4874 <__aeabi_dsub+0x434>
    4872:	e66b      	b.n	454c <__aeabi_dsub+0x10c>
    4874:	4452      	add	r2, sl
    4876:	4552      	cmp	r2, sl
    4878:	4180      	sbcs	r0, r0
    487a:	1864      	adds	r4, r4, r1
    487c:	4240      	negs	r0, r0
    487e:	1824      	adds	r4, r4, r0
    4880:	0017      	movs	r7, r2
    4882:	0223      	lsls	r3, r4, #8
    4884:	d400      	bmi.n	4888 <__aeabi_dsub+0x448>
    4886:	e6fd      	b.n	4684 <__aeabi_dsub+0x244>
    4888:	4b77      	ldr	r3, [pc, #476]	; (4a68 <__aeabi_dsub+0x628>)
    488a:	4666      	mov	r6, ip
    488c:	401c      	ands	r4, r3
    488e:	e65d      	b.n	454c <__aeabi_dsub+0x10c>
    4890:	0025      	movs	r5, r4
    4892:	4650      	mov	r0, sl
    4894:	4305      	orrs	r5, r0
    4896:	2e00      	cmp	r6, #0
    4898:	d1cf      	bne.n	483a <__aeabi_dsub+0x3fa>
    489a:	2d00      	cmp	r5, #0
    489c:	d14f      	bne.n	493e <__aeabi_dsub+0x4fe>
    489e:	000c      	movs	r4, r1
    48a0:	4314      	orrs	r4, r2
    48a2:	d100      	bne.n	48a6 <__aeabi_dsub+0x466>
    48a4:	e0a0      	b.n	49e8 <__aeabi_dsub+0x5a8>
    48a6:	000c      	movs	r4, r1
    48a8:	0017      	movs	r7, r2
    48aa:	4698      	mov	r8, r3
    48ac:	e64e      	b.n	454c <__aeabi_dsub+0x10c>
    48ae:	4666      	mov	r6, ip
    48b0:	2400      	movs	r4, #0
    48b2:	2700      	movs	r7, #0
    48b4:	e685      	b.n	45c2 <__aeabi_dsub+0x182>
    48b6:	001f      	movs	r7, r3
    48b8:	0008      	movs	r0, r1
    48ba:	3f20      	subs	r7, #32
    48bc:	40f8      	lsrs	r0, r7
    48be:	0007      	movs	r7, r0
    48c0:	2b20      	cmp	r3, #32
    48c2:	d100      	bne.n	48c6 <__aeabi_dsub+0x486>
    48c4:	e08e      	b.n	49e4 <__aeabi_dsub+0x5a4>
    48c6:	2040      	movs	r0, #64	; 0x40
    48c8:	1ac3      	subs	r3, r0, r3
    48ca:	4099      	lsls	r1, r3
    48cc:	430a      	orrs	r2, r1
    48ce:	1e51      	subs	r1, r2, #1
    48d0:	418a      	sbcs	r2, r1
    48d2:	2100      	movs	r1, #0
    48d4:	4317      	orrs	r7, r2
    48d6:	e692      	b.n	45fe <__aeabi_dsub+0x1be>
    48d8:	2e00      	cmp	r6, #0
    48da:	d114      	bne.n	4906 <__aeabi_dsub+0x4c6>
    48dc:	0026      	movs	r6, r4
    48de:	4650      	mov	r0, sl
    48e0:	4306      	orrs	r6, r0
    48e2:	d062      	beq.n	49aa <__aeabi_dsub+0x56a>
    48e4:	43db      	mvns	r3, r3
    48e6:	2b00      	cmp	r3, #0
    48e8:	d15c      	bne.n	49a4 <__aeabi_dsub+0x564>
    48ea:	1887      	adds	r7, r0, r2
    48ec:	4297      	cmp	r7, r2
    48ee:	4192      	sbcs	r2, r2
    48f0:	1864      	adds	r4, r4, r1
    48f2:	4252      	negs	r2, r2
    48f4:	18a4      	adds	r4, r4, r2
    48f6:	4666      	mov	r6, ip
    48f8:	e687      	b.n	460a <__aeabi_dsub+0x1ca>
    48fa:	4650      	mov	r0, sl
    48fc:	4320      	orrs	r0, r4
    48fe:	1e44      	subs	r4, r0, #1
    4900:	41a0      	sbcs	r0, r4
    4902:	2400      	movs	r4, #0
    4904:	e760      	b.n	47c8 <__aeabi_dsub+0x388>
    4906:	4e57      	ldr	r6, [pc, #348]	; (4a64 <__aeabi_dsub+0x624>)
    4908:	45b4      	cmp	ip, r6
    490a:	d04e      	beq.n	49aa <__aeabi_dsub+0x56a>
    490c:	2680      	movs	r6, #128	; 0x80
    490e:	0436      	lsls	r6, r6, #16
    4910:	425b      	negs	r3, r3
    4912:	4334      	orrs	r4, r6
    4914:	2b38      	cmp	r3, #56	; 0x38
    4916:	dd00      	ble.n	491a <__aeabi_dsub+0x4da>
    4918:	e07f      	b.n	4a1a <__aeabi_dsub+0x5da>
    491a:	2b1f      	cmp	r3, #31
    491c:	dd00      	ble.n	4920 <__aeabi_dsub+0x4e0>
    491e:	e08b      	b.n	4a38 <__aeabi_dsub+0x5f8>
    4920:	2620      	movs	r6, #32
    4922:	0027      	movs	r7, r4
    4924:	4650      	mov	r0, sl
    4926:	1af6      	subs	r6, r6, r3
    4928:	40b7      	lsls	r7, r6
    492a:	40d8      	lsrs	r0, r3
    492c:	4307      	orrs	r7, r0
    492e:	4650      	mov	r0, sl
    4930:	40b0      	lsls	r0, r6
    4932:	1e46      	subs	r6, r0, #1
    4934:	41b0      	sbcs	r0, r6
    4936:	4307      	orrs	r7, r0
    4938:	40dc      	lsrs	r4, r3
    493a:	18bf      	adds	r7, r7, r2
    493c:	e7d6      	b.n	48ec <__aeabi_dsub+0x4ac>
    493e:	000d      	movs	r5, r1
    4940:	4315      	orrs	r5, r2
    4942:	d100      	bne.n	4946 <__aeabi_dsub+0x506>
    4944:	e602      	b.n	454c <__aeabi_dsub+0x10c>
    4946:	4650      	mov	r0, sl
    4948:	1a80      	subs	r0, r0, r2
    494a:	4582      	cmp	sl, r0
    494c:	41bf      	sbcs	r7, r7
    494e:	1a65      	subs	r5, r4, r1
    4950:	427f      	negs	r7, r7
    4952:	1bed      	subs	r5, r5, r7
    4954:	4684      	mov	ip, r0
    4956:	0228      	lsls	r0, r5, #8
    4958:	d400      	bmi.n	495c <__aeabi_dsub+0x51c>
    495a:	e68d      	b.n	4678 <__aeabi_dsub+0x238>
    495c:	4650      	mov	r0, sl
    495e:	1a17      	subs	r7, r2, r0
    4960:	42ba      	cmp	r2, r7
    4962:	4192      	sbcs	r2, r2
    4964:	1b0c      	subs	r4, r1, r4
    4966:	4252      	negs	r2, r2
    4968:	1aa4      	subs	r4, r4, r2
    496a:	4698      	mov	r8, r3
    496c:	e5ee      	b.n	454c <__aeabi_dsub+0x10c>
    496e:	000d      	movs	r5, r1
    4970:	4315      	orrs	r5, r2
    4972:	d100      	bne.n	4976 <__aeabi_dsub+0x536>
    4974:	e76b      	b.n	484e <__aeabi_dsub+0x40e>
    4976:	4650      	mov	r0, sl
    4978:	0767      	lsls	r7, r4, #29
    497a:	08c0      	lsrs	r0, r0, #3
    497c:	4307      	orrs	r7, r0
    497e:	2080      	movs	r0, #128	; 0x80
    4980:	08e4      	lsrs	r4, r4, #3
    4982:	0300      	lsls	r0, r0, #12
    4984:	4204      	tst	r4, r0
    4986:	d007      	beq.n	4998 <__aeabi_dsub+0x558>
    4988:	08cd      	lsrs	r5, r1, #3
    498a:	4205      	tst	r5, r0
    498c:	d104      	bne.n	4998 <__aeabi_dsub+0x558>
    498e:	002c      	movs	r4, r5
    4990:	4698      	mov	r8, r3
    4992:	08d7      	lsrs	r7, r2, #3
    4994:	0749      	lsls	r1, r1, #29
    4996:	430f      	orrs	r7, r1
    4998:	0f7b      	lsrs	r3, r7, #29
    499a:	00e4      	lsls	r4, r4, #3
    499c:	431c      	orrs	r4, r3
    499e:	00ff      	lsls	r7, r7, #3
    49a0:	4e30      	ldr	r6, [pc, #192]	; (4a64 <__aeabi_dsub+0x624>)
    49a2:	e5d3      	b.n	454c <__aeabi_dsub+0x10c>
    49a4:	4e2f      	ldr	r6, [pc, #188]	; (4a64 <__aeabi_dsub+0x624>)
    49a6:	45b4      	cmp	ip, r6
    49a8:	d1b4      	bne.n	4914 <__aeabi_dsub+0x4d4>
    49aa:	000c      	movs	r4, r1
    49ac:	0017      	movs	r7, r2
    49ae:	4666      	mov	r6, ip
    49b0:	e5cc      	b.n	454c <__aeabi_dsub+0x10c>
    49b2:	2700      	movs	r7, #0
    49b4:	2400      	movs	r4, #0
    49b6:	e5e8      	b.n	458a <__aeabi_dsub+0x14a>
    49b8:	2b00      	cmp	r3, #0
    49ba:	d039      	beq.n	4a30 <__aeabi_dsub+0x5f0>
    49bc:	000b      	movs	r3, r1
    49be:	4313      	orrs	r3, r2
    49c0:	d100      	bne.n	49c4 <__aeabi_dsub+0x584>
    49c2:	e744      	b.n	484e <__aeabi_dsub+0x40e>
    49c4:	08c0      	lsrs	r0, r0, #3
    49c6:	0767      	lsls	r7, r4, #29
    49c8:	4307      	orrs	r7, r0
    49ca:	2080      	movs	r0, #128	; 0x80
    49cc:	08e4      	lsrs	r4, r4, #3
    49ce:	0300      	lsls	r0, r0, #12
    49d0:	4204      	tst	r4, r0
    49d2:	d0e1      	beq.n	4998 <__aeabi_dsub+0x558>
    49d4:	08cb      	lsrs	r3, r1, #3
    49d6:	4203      	tst	r3, r0
    49d8:	d1de      	bne.n	4998 <__aeabi_dsub+0x558>
    49da:	08d7      	lsrs	r7, r2, #3
    49dc:	0749      	lsls	r1, r1, #29
    49de:	430f      	orrs	r7, r1
    49e0:	001c      	movs	r4, r3
    49e2:	e7d9      	b.n	4998 <__aeabi_dsub+0x558>
    49e4:	2100      	movs	r1, #0
    49e6:	e771      	b.n	48cc <__aeabi_dsub+0x48c>
    49e8:	2500      	movs	r5, #0
    49ea:	2700      	movs	r7, #0
    49ec:	e5e9      	b.n	45c2 <__aeabi_dsub+0x182>
    49ee:	002e      	movs	r6, r5
    49f0:	0027      	movs	r7, r4
    49f2:	3e20      	subs	r6, #32
    49f4:	40f7      	lsrs	r7, r6
    49f6:	2d20      	cmp	r5, #32
    49f8:	d02f      	beq.n	4a5a <__aeabi_dsub+0x61a>
    49fa:	2640      	movs	r6, #64	; 0x40
    49fc:	1b75      	subs	r5, r6, r5
    49fe:	40ac      	lsls	r4, r5
    4a00:	4650      	mov	r0, sl
    4a02:	4320      	orrs	r0, r4
    4a04:	1e44      	subs	r4, r0, #1
    4a06:	41a0      	sbcs	r0, r4
    4a08:	2400      	movs	r4, #0
    4a0a:	4338      	orrs	r0, r7
    4a0c:	e6dc      	b.n	47c8 <__aeabi_dsub+0x388>
    4a0e:	2480      	movs	r4, #128	; 0x80
    4a10:	2500      	movs	r5, #0
    4a12:	0324      	lsls	r4, r4, #12
    4a14:	4e13      	ldr	r6, [pc, #76]	; (4a64 <__aeabi_dsub+0x624>)
    4a16:	2700      	movs	r7, #0
    4a18:	e5d3      	b.n	45c2 <__aeabi_dsub+0x182>
    4a1a:	4650      	mov	r0, sl
    4a1c:	4320      	orrs	r0, r4
    4a1e:	0007      	movs	r7, r0
    4a20:	1e78      	subs	r0, r7, #1
    4a22:	4187      	sbcs	r7, r0
    4a24:	2400      	movs	r4, #0
    4a26:	18bf      	adds	r7, r7, r2
    4a28:	e760      	b.n	48ec <__aeabi_dsub+0x4ac>
    4a2a:	000c      	movs	r4, r1
    4a2c:	0017      	movs	r7, r2
    4a2e:	e58d      	b.n	454c <__aeabi_dsub+0x10c>
    4a30:	000c      	movs	r4, r1
    4a32:	0017      	movs	r7, r2
    4a34:	4e0b      	ldr	r6, [pc, #44]	; (4a64 <__aeabi_dsub+0x624>)
    4a36:	e589      	b.n	454c <__aeabi_dsub+0x10c>
    4a38:	001e      	movs	r6, r3
    4a3a:	0027      	movs	r7, r4
    4a3c:	3e20      	subs	r6, #32
    4a3e:	40f7      	lsrs	r7, r6
    4a40:	2b20      	cmp	r3, #32
    4a42:	d00c      	beq.n	4a5e <__aeabi_dsub+0x61e>
    4a44:	2640      	movs	r6, #64	; 0x40
    4a46:	1af3      	subs	r3, r6, r3
    4a48:	409c      	lsls	r4, r3
    4a4a:	4650      	mov	r0, sl
    4a4c:	4320      	orrs	r0, r4
    4a4e:	1e44      	subs	r4, r0, #1
    4a50:	41a0      	sbcs	r0, r4
    4a52:	4307      	orrs	r7, r0
    4a54:	2400      	movs	r4, #0
    4a56:	18bf      	adds	r7, r7, r2
    4a58:	e748      	b.n	48ec <__aeabi_dsub+0x4ac>
    4a5a:	2400      	movs	r4, #0
    4a5c:	e7d0      	b.n	4a00 <__aeabi_dsub+0x5c0>
    4a5e:	2400      	movs	r4, #0
    4a60:	e7f3      	b.n	4a4a <__aeabi_dsub+0x60a>
    4a62:	46c0      	nop			; (mov r8, r8)
    4a64:	000007ff 	.word	0x000007ff
    4a68:	ff7fffff 	.word	0xff7fffff

00004a6c <__aeabi_d2iz>:
    4a6c:	b530      	push	{r4, r5, lr}
    4a6e:	4d13      	ldr	r5, [pc, #76]	; (4abc <__aeabi_d2iz+0x50>)
    4a70:	030a      	lsls	r2, r1, #12
    4a72:	004b      	lsls	r3, r1, #1
    4a74:	0b12      	lsrs	r2, r2, #12
    4a76:	0d5b      	lsrs	r3, r3, #21
    4a78:	0fc9      	lsrs	r1, r1, #31
    4a7a:	2400      	movs	r4, #0
    4a7c:	42ab      	cmp	r3, r5
    4a7e:	dd10      	ble.n	4aa2 <__aeabi_d2iz+0x36>
    4a80:	4c0f      	ldr	r4, [pc, #60]	; (4ac0 <__aeabi_d2iz+0x54>)
    4a82:	42a3      	cmp	r3, r4
    4a84:	dc0f      	bgt.n	4aa6 <__aeabi_d2iz+0x3a>
    4a86:	2480      	movs	r4, #128	; 0x80
    4a88:	4d0e      	ldr	r5, [pc, #56]	; (4ac4 <__aeabi_d2iz+0x58>)
    4a8a:	0364      	lsls	r4, r4, #13
    4a8c:	4322      	orrs	r2, r4
    4a8e:	1aed      	subs	r5, r5, r3
    4a90:	2d1f      	cmp	r5, #31
    4a92:	dd0b      	ble.n	4aac <__aeabi_d2iz+0x40>
    4a94:	480c      	ldr	r0, [pc, #48]	; (4ac8 <__aeabi_d2iz+0x5c>)
    4a96:	1ac3      	subs	r3, r0, r3
    4a98:	40da      	lsrs	r2, r3
    4a9a:	4254      	negs	r4, r2
    4a9c:	2900      	cmp	r1, #0
    4a9e:	d100      	bne.n	4aa2 <__aeabi_d2iz+0x36>
    4aa0:	0014      	movs	r4, r2
    4aa2:	0020      	movs	r0, r4
    4aa4:	bd30      	pop	{r4, r5, pc}
    4aa6:	4b09      	ldr	r3, [pc, #36]	; (4acc <__aeabi_d2iz+0x60>)
    4aa8:	18cc      	adds	r4, r1, r3
    4aaa:	e7fa      	b.n	4aa2 <__aeabi_d2iz+0x36>
    4aac:	4c08      	ldr	r4, [pc, #32]	; (4ad0 <__aeabi_d2iz+0x64>)
    4aae:	40e8      	lsrs	r0, r5
    4ab0:	46a4      	mov	ip, r4
    4ab2:	4463      	add	r3, ip
    4ab4:	409a      	lsls	r2, r3
    4ab6:	4302      	orrs	r2, r0
    4ab8:	e7ef      	b.n	4a9a <__aeabi_d2iz+0x2e>
    4aba:	46c0      	nop			; (mov r8, r8)
    4abc:	000003fe 	.word	0x000003fe
    4ac0:	0000041d 	.word	0x0000041d
    4ac4:	00000433 	.word	0x00000433
    4ac8:	00000413 	.word	0x00000413
    4acc:	7fffffff 	.word	0x7fffffff
    4ad0:	fffffbed 	.word	0xfffffbed

00004ad4 <__aeabi_ui2d>:
    4ad4:	b510      	push	{r4, lr}
    4ad6:	1e04      	subs	r4, r0, #0
    4ad8:	d028      	beq.n	4b2c <__aeabi_ui2d+0x58>
    4ada:	f000 f833 	bl	4b44 <__clzsi2>
    4ade:	4b15      	ldr	r3, [pc, #84]	; (4b34 <__aeabi_ui2d+0x60>)
    4ae0:	4a15      	ldr	r2, [pc, #84]	; (4b38 <__aeabi_ui2d+0x64>)
    4ae2:	1a1b      	subs	r3, r3, r0
    4ae4:	1ad2      	subs	r2, r2, r3
    4ae6:	2a1f      	cmp	r2, #31
    4ae8:	dd15      	ble.n	4b16 <__aeabi_ui2d+0x42>
    4aea:	4a14      	ldr	r2, [pc, #80]	; (4b3c <__aeabi_ui2d+0x68>)
    4aec:	1ad2      	subs	r2, r2, r3
    4aee:	4094      	lsls	r4, r2
    4af0:	2200      	movs	r2, #0
    4af2:	0324      	lsls	r4, r4, #12
    4af4:	055b      	lsls	r3, r3, #21
    4af6:	0b24      	lsrs	r4, r4, #12
    4af8:	0d5b      	lsrs	r3, r3, #21
    4afa:	2100      	movs	r1, #0
    4afc:	0010      	movs	r0, r2
    4afe:	0324      	lsls	r4, r4, #12
    4b00:	0d0a      	lsrs	r2, r1, #20
    4b02:	0b24      	lsrs	r4, r4, #12
    4b04:	0512      	lsls	r2, r2, #20
    4b06:	4322      	orrs	r2, r4
    4b08:	4c0d      	ldr	r4, [pc, #52]	; (4b40 <__aeabi_ui2d+0x6c>)
    4b0a:	051b      	lsls	r3, r3, #20
    4b0c:	4022      	ands	r2, r4
    4b0e:	4313      	orrs	r3, r2
    4b10:	005b      	lsls	r3, r3, #1
    4b12:	0859      	lsrs	r1, r3, #1
    4b14:	bd10      	pop	{r4, pc}
    4b16:	0021      	movs	r1, r4
    4b18:	4091      	lsls	r1, r2
    4b1a:	000a      	movs	r2, r1
    4b1c:	210b      	movs	r1, #11
    4b1e:	1a08      	subs	r0, r1, r0
    4b20:	40c4      	lsrs	r4, r0
    4b22:	055b      	lsls	r3, r3, #21
    4b24:	0324      	lsls	r4, r4, #12
    4b26:	0b24      	lsrs	r4, r4, #12
    4b28:	0d5b      	lsrs	r3, r3, #21
    4b2a:	e7e6      	b.n	4afa <__aeabi_ui2d+0x26>
    4b2c:	2300      	movs	r3, #0
    4b2e:	2400      	movs	r4, #0
    4b30:	2200      	movs	r2, #0
    4b32:	e7e2      	b.n	4afa <__aeabi_ui2d+0x26>
    4b34:	0000041e 	.word	0x0000041e
    4b38:	00000433 	.word	0x00000433
    4b3c:	00000413 	.word	0x00000413
    4b40:	800fffff 	.word	0x800fffff

00004b44 <__clzsi2>:
    4b44:	211c      	movs	r1, #28
    4b46:	2301      	movs	r3, #1
    4b48:	041b      	lsls	r3, r3, #16
    4b4a:	4298      	cmp	r0, r3
    4b4c:	d301      	bcc.n	4b52 <__clzsi2+0xe>
    4b4e:	0c00      	lsrs	r0, r0, #16
    4b50:	3910      	subs	r1, #16
    4b52:	0a1b      	lsrs	r3, r3, #8
    4b54:	4298      	cmp	r0, r3
    4b56:	d301      	bcc.n	4b5c <__clzsi2+0x18>
    4b58:	0a00      	lsrs	r0, r0, #8
    4b5a:	3908      	subs	r1, #8
    4b5c:	091b      	lsrs	r3, r3, #4
    4b5e:	4298      	cmp	r0, r3
    4b60:	d301      	bcc.n	4b66 <__clzsi2+0x22>
    4b62:	0900      	lsrs	r0, r0, #4
    4b64:	3904      	subs	r1, #4
    4b66:	a202      	add	r2, pc, #8	; (adr r2, 4b70 <__clzsi2+0x2c>)
    4b68:	5c10      	ldrb	r0, [r2, r0]
    4b6a:	1840      	adds	r0, r0, r1
    4b6c:	4770      	bx	lr
    4b6e:	46c0      	nop			; (mov r8, r8)
    4b70:	02020304 	.word	0x02020304
    4b74:	01010101 	.word	0x01010101
	...

00004b80 <__libc_init_array>:
    4b80:	b570      	push	{r4, r5, r6, lr}
    4b82:	2600      	movs	r6, #0
    4b84:	4d0c      	ldr	r5, [pc, #48]	; (4bb8 <__libc_init_array+0x38>)
    4b86:	4c0d      	ldr	r4, [pc, #52]	; (4bbc <__libc_init_array+0x3c>)
    4b88:	1b64      	subs	r4, r4, r5
    4b8a:	10a4      	asrs	r4, r4, #2
    4b8c:	42a6      	cmp	r6, r4
    4b8e:	d109      	bne.n	4ba4 <__libc_init_array+0x24>
    4b90:	2600      	movs	r6, #0
    4b92:	f000 f9cf 	bl	4f34 <_init>
    4b96:	4d0a      	ldr	r5, [pc, #40]	; (4bc0 <__libc_init_array+0x40>)
    4b98:	4c0a      	ldr	r4, [pc, #40]	; (4bc4 <__libc_init_array+0x44>)
    4b9a:	1b64      	subs	r4, r4, r5
    4b9c:	10a4      	asrs	r4, r4, #2
    4b9e:	42a6      	cmp	r6, r4
    4ba0:	d105      	bne.n	4bae <__libc_init_array+0x2e>
    4ba2:	bd70      	pop	{r4, r5, r6, pc}
    4ba4:	00b3      	lsls	r3, r6, #2
    4ba6:	58eb      	ldr	r3, [r5, r3]
    4ba8:	4798      	blx	r3
    4baa:	3601      	adds	r6, #1
    4bac:	e7ee      	b.n	4b8c <__libc_init_array+0xc>
    4bae:	00b3      	lsls	r3, r6, #2
    4bb0:	58eb      	ldr	r3, [r5, r3]
    4bb2:	4798      	blx	r3
    4bb4:	3601      	adds	r6, #1
    4bb6:	e7f2      	b.n	4b9e <__libc_init_array+0x1e>
    4bb8:	00004f40 	.word	0x00004f40
    4bbc:	00004f40 	.word	0x00004f40
    4bc0:	00004f40 	.word	0x00004f40
    4bc4:	00004f44 	.word	0x00004f44

00004bc8 <malloc>:
    4bc8:	b510      	push	{r4, lr}
    4bca:	4b03      	ldr	r3, [pc, #12]	; (4bd8 <malloc+0x10>)
    4bcc:	0001      	movs	r1, r0
    4bce:	6818      	ldr	r0, [r3, #0]
    4bd0:	f000 f80e 	bl	4bf0 <_malloc_r>
    4bd4:	bd10      	pop	{r4, pc}
    4bd6:	46c0      	nop			; (mov r8, r8)
    4bd8:	20000044 	.word	0x20000044

00004bdc <memcpy>:
    4bdc:	2300      	movs	r3, #0
    4bde:	b510      	push	{r4, lr}
    4be0:	429a      	cmp	r2, r3
    4be2:	d100      	bne.n	4be6 <memcpy+0xa>
    4be4:	bd10      	pop	{r4, pc}
    4be6:	5ccc      	ldrb	r4, [r1, r3]
    4be8:	54c4      	strb	r4, [r0, r3]
    4bea:	3301      	adds	r3, #1
    4bec:	e7f8      	b.n	4be0 <memcpy+0x4>
	...

00004bf0 <_malloc_r>:
    4bf0:	2303      	movs	r3, #3
    4bf2:	b570      	push	{r4, r5, r6, lr}
    4bf4:	1ccd      	adds	r5, r1, #3
    4bf6:	439d      	bics	r5, r3
    4bf8:	3508      	adds	r5, #8
    4bfa:	0006      	movs	r6, r0
    4bfc:	2d0c      	cmp	r5, #12
    4bfe:	d21e      	bcs.n	4c3e <_malloc_r+0x4e>
    4c00:	250c      	movs	r5, #12
    4c02:	42a9      	cmp	r1, r5
    4c04:	d81d      	bhi.n	4c42 <_malloc_r+0x52>
    4c06:	0030      	movs	r0, r6
    4c08:	f000 f862 	bl	4cd0 <__malloc_lock>
    4c0c:	4a25      	ldr	r2, [pc, #148]	; (4ca4 <_malloc_r+0xb4>)
    4c0e:	6814      	ldr	r4, [r2, #0]
    4c10:	0021      	movs	r1, r4
    4c12:	2900      	cmp	r1, #0
    4c14:	d119      	bne.n	4c4a <_malloc_r+0x5a>
    4c16:	4c24      	ldr	r4, [pc, #144]	; (4ca8 <_malloc_r+0xb8>)
    4c18:	6823      	ldr	r3, [r4, #0]
    4c1a:	2b00      	cmp	r3, #0
    4c1c:	d103      	bne.n	4c26 <_malloc_r+0x36>
    4c1e:	0030      	movs	r0, r6
    4c20:	f000 f844 	bl	4cac <_sbrk_r>
    4c24:	6020      	str	r0, [r4, #0]
    4c26:	0029      	movs	r1, r5
    4c28:	0030      	movs	r0, r6
    4c2a:	f000 f83f 	bl	4cac <_sbrk_r>
    4c2e:	1c43      	adds	r3, r0, #1
    4c30:	d12c      	bne.n	4c8c <_malloc_r+0x9c>
    4c32:	230c      	movs	r3, #12
    4c34:	0030      	movs	r0, r6
    4c36:	6033      	str	r3, [r6, #0]
    4c38:	f000 f84b 	bl	4cd2 <__malloc_unlock>
    4c3c:	e003      	b.n	4c46 <_malloc_r+0x56>
    4c3e:	2d00      	cmp	r5, #0
    4c40:	dadf      	bge.n	4c02 <_malloc_r+0x12>
    4c42:	230c      	movs	r3, #12
    4c44:	6033      	str	r3, [r6, #0]
    4c46:	2000      	movs	r0, #0
    4c48:	bd70      	pop	{r4, r5, r6, pc}
    4c4a:	680b      	ldr	r3, [r1, #0]
    4c4c:	1b5b      	subs	r3, r3, r5
    4c4e:	d41a      	bmi.n	4c86 <_malloc_r+0x96>
    4c50:	2b0b      	cmp	r3, #11
    4c52:	d903      	bls.n	4c5c <_malloc_r+0x6c>
    4c54:	600b      	str	r3, [r1, #0]
    4c56:	18cc      	adds	r4, r1, r3
    4c58:	6025      	str	r5, [r4, #0]
    4c5a:	e003      	b.n	4c64 <_malloc_r+0x74>
    4c5c:	428c      	cmp	r4, r1
    4c5e:	d10e      	bne.n	4c7e <_malloc_r+0x8e>
    4c60:	6863      	ldr	r3, [r4, #4]
    4c62:	6013      	str	r3, [r2, #0]
    4c64:	0030      	movs	r0, r6
    4c66:	f000 f834 	bl	4cd2 <__malloc_unlock>
    4c6a:	0020      	movs	r0, r4
    4c6c:	2207      	movs	r2, #7
    4c6e:	300b      	adds	r0, #11
    4c70:	1d23      	adds	r3, r4, #4
    4c72:	4390      	bics	r0, r2
    4c74:	1ac3      	subs	r3, r0, r3
    4c76:	d0e7      	beq.n	4c48 <_malloc_r+0x58>
    4c78:	425a      	negs	r2, r3
    4c7a:	50e2      	str	r2, [r4, r3]
    4c7c:	e7e4      	b.n	4c48 <_malloc_r+0x58>
    4c7e:	684b      	ldr	r3, [r1, #4]
    4c80:	6063      	str	r3, [r4, #4]
    4c82:	000c      	movs	r4, r1
    4c84:	e7ee      	b.n	4c64 <_malloc_r+0x74>
    4c86:	000c      	movs	r4, r1
    4c88:	6849      	ldr	r1, [r1, #4]
    4c8a:	e7c2      	b.n	4c12 <_malloc_r+0x22>
    4c8c:	2303      	movs	r3, #3
    4c8e:	1cc4      	adds	r4, r0, #3
    4c90:	439c      	bics	r4, r3
    4c92:	42a0      	cmp	r0, r4
    4c94:	d0e0      	beq.n	4c58 <_malloc_r+0x68>
    4c96:	1a21      	subs	r1, r4, r0
    4c98:	0030      	movs	r0, r6
    4c9a:	f000 f807 	bl	4cac <_sbrk_r>
    4c9e:	1c43      	adds	r3, r0, #1
    4ca0:	d1da      	bne.n	4c58 <_malloc_r+0x68>
    4ca2:	e7c6      	b.n	4c32 <_malloc_r+0x42>
    4ca4:	20000db8 	.word	0x20000db8
    4ca8:	20000dbc 	.word	0x20000dbc

00004cac <_sbrk_r>:
    4cac:	2300      	movs	r3, #0
    4cae:	b570      	push	{r4, r5, r6, lr}
    4cb0:	4c06      	ldr	r4, [pc, #24]	; (4ccc <_sbrk_r+0x20>)
    4cb2:	0005      	movs	r5, r0
    4cb4:	0008      	movs	r0, r1
    4cb6:	6023      	str	r3, [r4, #0]
    4cb8:	f7fe fa06 	bl	30c8 <_sbrk>
    4cbc:	1c43      	adds	r3, r0, #1
    4cbe:	d103      	bne.n	4cc8 <_sbrk_r+0x1c>
    4cc0:	6823      	ldr	r3, [r4, #0]
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d000      	beq.n	4cc8 <_sbrk_r+0x1c>
    4cc6:	602b      	str	r3, [r5, #0]
    4cc8:	bd70      	pop	{r4, r5, r6, pc}
    4cca:	46c0      	nop			; (mov r8, r8)
    4ccc:	200011ac 	.word	0x200011ac

00004cd0 <__malloc_lock>:
    4cd0:	4770      	bx	lr

00004cd2 <__malloc_unlock>:
    4cd2:	4770      	bx	lr

00004cd4 <_tcc_intflag>:
    4cd4:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    4ce4:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    4cf4:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    4d04:	2c00 4200 3000 4200 3400 4200 3800 4200     .,.B.0.B.4.B.8.B
    4d14:	3c00 4200 0800 1000 2000 4000 8000 0000     .<.B..... .@....

00004d24 <tc_interrupt_vectors.13123>:
    4d24:	1312 1514 0016 0000 1576 0000 17c2 0000     ........v.......
    4d34:	17c2 0000 17c2 0000 17c2 0000 17c2 0000     ................
    4d44:	17c2 0000 17c2 0000 17c2 0000 17c2 0000     ................
    4d54:	17c2 0000 17c2 0000 17c2 0000 17c2 0000     ................
    4d64:	17c2 0000 17c2 0000 155e 0000 17c2 0000     ........^.......
    4d74:	17c2 0000 17c2 0000 17c2 0000 17c2 0000     ................
    4d84:	17c2 0000 17c2 0000 17c2 0000 17c2 0000     ................
    4d94:	17c2 0000 17c2 0000 17c2 0000 17c2 0000     ................
    4da4:	17c2 0000 17c2 0000 156e 0000 17c2 0000     ........n.......
    4db4:	17c2 0000 17c2 0000 17c2 0000 17c2 0000     ................
    4dc4:	17c2 0000 17c2 0000 17c2 0000 17c2 0000     ................
    4dd4:	17c2 0000 17c2 0000 17c2 0000 17c2 0000     ................
    4de4:	17c2 0000 17c2 0000 1566 0000 157e 0000     ........f...~...
    4df4:	1546 0000 1556 0000 154e 0000 0002 0000     F...V...N.......
    4e04:	0003 0000 0028 0000 0029 0000 0004 0000     ....(...).......
    4e14:	0005 0000 0006 0000 0007 0000 0020 0000     ............ ...
    4e24:	0021 0000 0022 0000 0023 0000 0024 0000     !..."...#...$...
    4e34:	0025 0000 0026 0000 0027 0000 0008 0000     %...&...'.......
    4e44:	0009 0000 000a 0000 000b 0000 0800 4200     ...............B
    4e54:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    4e64:	1c00 4200                                   ...B

00004e68 <outputDetectAnalogChannles>:
    4e68:	0504 0806 2a56 0000 2a52 0000 2a52 0000     ....V*..R*..R*..
    4e78:	2ab4 0000 2ab4 0000 2a6a 0000 2a5c 0000     .*...*..j*..\*..
    4e88:	2a70 0000 2aa2 0000 2b3c 0000 2b1c 0000     p*...*..<+...+..
    4e98:	2b1c 0000 2ba8 0000 2b2e 0000 2b4a 0000     .+...+...+..J+..
    4ea8:	2b20 0000 2b58 0000 2b98 0000 3ad0 0000      +..X+...+...:..
    4eb8:	3ab2 0000 3a6c 0000 398a 0000 3a6c 0000     .:..l:...9..l:..
    4ec8:	3aa4 0000 3a6c 0000 398a 0000 3ab2 0000     .:..l:...9...:..
    4ed8:	3ab2 0000 3aa4 0000 398a 0000 3982 0000     .:...:...9...9..
    4ee8:	3982 0000 3982 0000 3ce8 0000 4130 0000     .9...9...<..0A..
    4ef8:	3ff0 0000 3ff0 0000 3fec 0000 4108 0000     .?...?...?...A..
    4f08:	4108 0000 40fa 0000 3fec 0000 4108 0000     .A...@...?...A..
    4f18:	40fa 0000 4108 0000 3fec 0000 4110 0000     .@...A...?...A..
    4f28:	4110 0000 4110 0000 4314 0000               .A...A...C..

00004f34 <_init>:
    4f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f36:	46c0      	nop			; (mov r8, r8)
    4f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4f3a:	bc08      	pop	{r3}
    4f3c:	469e      	mov	lr, r3
    4f3e:	4770      	bx	lr

00004f40 <__init_array_start>:
    4f40:	000000dd 	.word	0x000000dd

00004f44 <_fini>:
    4f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f46:	46c0      	nop			; (mov r8, r8)
    4f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4f4a:	bc08      	pop	{r3}
    4f4c:	469e      	mov	lr, r3
    4f4e:	4770      	bx	lr

00004f50 <__fini_array_start>:
    4f50:	000000b5 	.word	0x000000b5
