
FlutterSAMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005384  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  20000000  00005384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000110c  200000a8  0000542c  000200a8  2**2
                  ALLOC
  3 .stack        00002004  200011b4  00006538  000200a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004ed20  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000064b1  00000000  00000000  0006ee49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000084e8  00000000  00000000  000752fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008a0  00000000  00000000  0007d7e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000970  00000000  00000000  0007e082  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000bb83  00000000  00000000  0007e9f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016ffe  00000000  00000000  0008a575  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e2eb  00000000  00000000  000a1573  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001678  00000000  00000000  0012f860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 31 00 20 ed 33 00 00 e9 33 00 00 e9 33 00 00     .1. .3...3...3..
	...
      2c:	e9 33 00 00 00 00 00 00 00 00 00 00 e9 33 00 00     .3...........3..
      3c:	e9 33 00 00 e9 33 00 00 e9 33 00 00 e9 33 00 00     .3...3...3...3..
      4c:	e9 33 00 00 e9 33 00 00 e9 33 00 00 e9 33 00 00     .3...3...3...3..
      5c:	e9 33 00 00 e9 33 00 00 f9 1f 00 00 09 20 00 00     .3...3....... ..
      6c:	19 20 00 00 29 20 00 00 39 20 00 00 49 20 00 00     . ..) ..9 ..I ..
      7c:	f1 0a 00 00 01 0b 00 00 11 0b 00 00 b9 0b 00 00     ................
      8c:	c9 0b 00 00 d9 0b 00 00 e9 0b 00 00 f9 0b 00 00     ................
      9c:	55 1b 00 00 e9 33 00 00 e9 33 00 00 e9 33 00 00     U....3...3...3..
      ac:	e9 33 00 00 00 00 00 00                             .3......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a8 	.word	0x200000a8
      d4:	00000000 	.word	0x00000000
      d8:	00005384 	.word	0x00005384

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000ac 	.word	0x200000ac
     108:	00005384 	.word	0x00005384
     10c:	00005384 	.word	0x00005384
     110:	00000000 	.word	0x00000000

00000114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     116:	2207      	movs	r2, #7
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     11e:	4770      	bx	lr

00000120 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     120:	b5f0      	push	{r4, r5, r6, r7, lr}
     122:	46d6      	mov	lr, sl
     124:	464f      	mov	r7, r9
     126:	4646      	mov	r6, r8
     128:	b5c0      	push	{r6, r7, lr}
     12a:	b08a      	sub	sp, #40	; 0x28
     12c:	0006      	movs	r6, r0
     12e:	000f      	movs	r7, r1
     130:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     132:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     134:	0008      	movs	r0, r1
     136:	4ba0      	ldr	r3, [pc, #640]	; (3b8 <i2c_master_init+0x298>)
     138:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     13a:	4aa0      	ldr	r2, [pc, #640]	; (3bc <i2c_master_init+0x29c>)
     13c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     13e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     140:	2301      	movs	r3, #1
     142:	40ab      	lsls	r3, r5
     144:	430b      	orrs	r3, r1
     146:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     148:	a909      	add	r1, sp, #36	; 0x24
     14a:	7b23      	ldrb	r3, [r4, #12]
     14c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     14e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     150:	b2c5      	uxtb	r5, r0
     152:	0028      	movs	r0, r5
     154:	4b9a      	ldr	r3, [pc, #616]	; (3c0 <i2c_master_init+0x2a0>)
     156:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     158:	0028      	movs	r0, r5
     15a:	4b9a      	ldr	r3, [pc, #616]	; (3c4 <i2c_master_init+0x2a4>)
     15c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     15e:	7b20      	ldrb	r0, [r4, #12]
     160:	2100      	movs	r1, #0
     162:	4b99      	ldr	r3, [pc, #612]	; (3c8 <i2c_master_init+0x2a8>)
     164:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     166:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     168:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     16a:	079b      	lsls	r3, r3, #30
     16c:	d505      	bpl.n	17a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     16e:	b00a      	add	sp, #40	; 0x28
     170:	bc1c      	pop	{r2, r3, r4}
     172:	4690      	mov	r8, r2
     174:	4699      	mov	r9, r3
     176:	46a2      	mov	sl, r4
     178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     17c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d4f5      	bmi.n	16e <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     182:	6830      	ldr	r0, [r6, #0]
     184:	4b8c      	ldr	r3, [pc, #560]	; (3b8 <i2c_master_init+0x298>)
     186:	4699      	mov	r9, r3
     188:	4798      	blx	r3
     18a:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     18c:	498f      	ldr	r1, [pc, #572]	; (3cc <i2c_master_init+0x2ac>)
     18e:	4b90      	ldr	r3, [pc, #576]	; (3d0 <i2c_master_init+0x2b0>)
     190:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     192:	00ad      	lsls	r5, r5, #2
     194:	4b8f      	ldr	r3, [pc, #572]	; (3d4 <i2c_master_init+0x2b4>)
     196:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     198:	2300      	movs	r3, #0
     19a:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     19c:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     19e:	2500      	movs	r5, #0
     1a0:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     1a2:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     1a4:	2225      	movs	r2, #37	; 0x25
     1a6:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     1a8:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     1aa:	3314      	adds	r3, #20
     1ac:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ae:	6833      	ldr	r3, [r6, #0]
     1b0:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     1b2:	0018      	movs	r0, r3
     1b4:	47c8      	blx	r9
     1b6:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1b8:	2380      	movs	r3, #128	; 0x80
     1ba:	aa08      	add	r2, sp, #32
     1bc:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1be:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1c0:	2301      	movs	r3, #1
     1c2:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     1c4:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1c6:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     1c8:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     1ca:	2800      	cmp	r0, #0
     1cc:	d100      	bne.n	1d0 <i2c_master_init+0xb0>
     1ce:	e0af      	b.n	330 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1d0:	ab08      	add	r3, sp, #32
     1d2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1d4:	2302      	movs	r3, #2
     1d6:	aa08      	add	r2, sp, #32
     1d8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     1da:	0c00      	lsrs	r0, r0, #16
     1dc:	b2c0      	uxtb	r0, r0
     1de:	0011      	movs	r1, r2
     1e0:	4b7d      	ldr	r3, [pc, #500]	; (3d8 <i2c_master_init+0x2b8>)
     1e2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     1e4:	2f00      	cmp	r7, #0
     1e6:	d100      	bne.n	1ea <i2c_master_init+0xca>
     1e8:	e0a7      	b.n	33a <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     1ea:	ab08      	add	r3, sp, #32
     1ec:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1ee:	2302      	movs	r3, #2
     1f0:	aa08      	add	r2, sp, #32
     1f2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     1f4:	0c3f      	lsrs	r7, r7, #16
     1f6:	b2f8      	uxtb	r0, r7
     1f8:	0011      	movs	r1, r2
     1fa:	4b77      	ldr	r3, [pc, #476]	; (3d8 <i2c_master_init+0x2b8>)
     1fc:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     1fe:	8aa3      	ldrh	r3, [r4, #20]
     200:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     202:	8ae3      	ldrh	r3, [r4, #22]
     204:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     206:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     208:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     20a:	2b00      	cmp	r3, #0
     20c:	d104      	bne.n	218 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     20e:	4b73      	ldr	r3, [pc, #460]	; (3dc <i2c_master_init+0x2bc>)
     210:	789b      	ldrb	r3, [r3, #2]
     212:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     214:	0fdb      	lsrs	r3, r3, #31
     216:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     218:	68a1      	ldr	r1, [r4, #8]
     21a:	6923      	ldr	r3, [r4, #16]
     21c:	430b      	orrs	r3, r1
     21e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     220:	2224      	movs	r2, #36	; 0x24
     222:	5ca2      	ldrb	r2, [r4, r2]
     224:	2a00      	cmp	r2, #0
     226:	d002      	beq.n	22e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     228:	2280      	movs	r2, #128	; 0x80
     22a:	05d2      	lsls	r2, r2, #23
     22c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     22e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     230:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     232:	222c      	movs	r2, #44	; 0x2c
     234:	5ca2      	ldrb	r2, [r4, r2]
     236:	2a00      	cmp	r2, #0
     238:	d103      	bne.n	242 <i2c_master_init+0x122>
     23a:	2280      	movs	r2, #128	; 0x80
     23c:	0492      	lsls	r2, r2, #18
     23e:	4291      	cmp	r1, r2
     240:	d102      	bne.n	248 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     242:	2280      	movs	r2, #128	; 0x80
     244:	0512      	lsls	r2, r2, #20
     246:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     248:	222d      	movs	r2, #45	; 0x2d
     24a:	5ca2      	ldrb	r2, [r4, r2]
     24c:	2a00      	cmp	r2, #0
     24e:	d002      	beq.n	256 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     250:	2280      	movs	r2, #128	; 0x80
     252:	0412      	lsls	r2, r2, #16
     254:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     256:	222e      	movs	r2, #46	; 0x2e
     258:	5ca2      	ldrb	r2, [r4, r2]
     25a:	2a00      	cmp	r2, #0
     25c:	d002      	beq.n	264 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     25e:	2280      	movs	r2, #128	; 0x80
     260:	03d2      	lsls	r2, r2, #15
     262:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     264:	4642      	mov	r2, r8
     266:	6812      	ldr	r2, [r2, #0]
     268:	4313      	orrs	r3, r2
     26a:	4642      	mov	r2, r8
     26c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     26e:	2380      	movs	r3, #128	; 0x80
     270:	005b      	lsls	r3, r3, #1
     272:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     274:	4648      	mov	r0, r9
     276:	3014      	adds	r0, #20
     278:	b2c0      	uxtb	r0, r0
     27a:	4b59      	ldr	r3, [pc, #356]	; (3e0 <i2c_master_init+0x2c0>)
     27c:	4798      	blx	r3
     27e:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     280:	23fa      	movs	r3, #250	; 0xfa
     282:	009b      	lsls	r3, r3, #2
     284:	6822      	ldr	r2, [r4, #0]
     286:	435a      	muls	r2, r3
     288:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     28a:	6863      	ldr	r3, [r4, #4]
     28c:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     28e:	4d55      	ldr	r5, [pc, #340]	; (3e4 <i2c_master_init+0x2c4>)
     290:	47a8      	blx	r5
     292:	9000      	str	r0, [sp, #0]
     294:	9101      	str	r1, [sp, #4]
     296:	464b      	mov	r3, r9
     298:	0058      	lsls	r0, r3, #1
     29a:	47a8      	blx	r5
     29c:	9002      	str	r0, [sp, #8]
     29e:	9103      	str	r1, [sp, #12]
     2a0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     2a2:	47a8      	blx	r5
     2a4:	9004      	str	r0, [sp, #16]
     2a6:	9105      	str	r1, [sp, #20]
     2a8:	4f4f      	ldr	r7, [pc, #316]	; (3e8 <i2c_master_init+0x2c8>)
     2aa:	4a50      	ldr	r2, [pc, #320]	; (3ec <i2c_master_init+0x2cc>)
     2ac:	4b50      	ldr	r3, [pc, #320]	; (3f0 <i2c_master_init+0x2d0>)
     2ae:	9800      	ldr	r0, [sp, #0]
     2b0:	9901      	ldr	r1, [sp, #4]
     2b2:	47b8      	blx	r7
     2b4:	0002      	movs	r2, r0
     2b6:	000b      	movs	r3, r1
     2b8:	9804      	ldr	r0, [sp, #16]
     2ba:	9905      	ldr	r1, [sp, #20]
     2bc:	47b8      	blx	r7
     2be:	4e4d      	ldr	r6, [pc, #308]	; (3f4 <i2c_master_init+0x2d4>)
     2c0:	2200      	movs	r2, #0
     2c2:	4b4d      	ldr	r3, [pc, #308]	; (3f8 <i2c_master_init+0x2d8>)
     2c4:	47b0      	blx	r6
     2c6:	9004      	str	r0, [sp, #16]
     2c8:	9105      	str	r1, [sp, #20]
     2ca:	4648      	mov	r0, r9
     2cc:	47a8      	blx	r5
     2ce:	0002      	movs	r2, r0
     2d0:	000b      	movs	r3, r1
     2d2:	9804      	ldr	r0, [sp, #16]
     2d4:	9905      	ldr	r1, [sp, #20]
     2d6:	47b8      	blx	r7
     2d8:	0002      	movs	r2, r0
     2da:	000b      	movs	r3, r1
     2dc:	4d47      	ldr	r5, [pc, #284]	; (3fc <i2c_master_init+0x2dc>)
     2de:	9800      	ldr	r0, [sp, #0]
     2e0:	9901      	ldr	r1, [sp, #4]
     2e2:	47a8      	blx	r5
     2e4:	9a02      	ldr	r2, [sp, #8]
     2e6:	9b03      	ldr	r3, [sp, #12]
     2e8:	47b0      	blx	r6
     2ea:	2200      	movs	r2, #0
     2ec:	4b44      	ldr	r3, [pc, #272]	; (400 <i2c_master_init+0x2e0>)
     2ee:	47a8      	blx	r5
     2f0:	9a02      	ldr	r2, [sp, #8]
     2f2:	9b03      	ldr	r3, [sp, #12]
     2f4:	4d43      	ldr	r5, [pc, #268]	; (404 <i2c_master_init+0x2e4>)
     2f6:	47a8      	blx	r5
     2f8:	4b43      	ldr	r3, [pc, #268]	; (408 <i2c_master_init+0x2e8>)
     2fa:	4798      	blx	r3
     2fc:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     2fe:	2380      	movs	r3, #128	; 0x80
     300:	049b      	lsls	r3, r3, #18
     302:	68a2      	ldr	r2, [r4, #8]
     304:	429a      	cmp	r2, r3
     306:	d01e      	beq.n	346 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     308:	0003      	movs	r3, r0
     30a:	2040      	movs	r0, #64	; 0x40
     30c:	2dff      	cmp	r5, #255	; 0xff
     30e:	d900      	bls.n	312 <i2c_master_init+0x1f2>
     310:	e72d      	b.n	16e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     312:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     314:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     316:	25ff      	movs	r5, #255	; 0xff
     318:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     31a:	0624      	lsls	r4, r4, #24
     31c:	4325      	orrs	r5, r4
     31e:	0400      	lsls	r0, r0, #16
     320:	23ff      	movs	r3, #255	; 0xff
     322:	041b      	lsls	r3, r3, #16
     324:	4018      	ands	r0, r3
     326:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     328:	4643      	mov	r3, r8
     32a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     32c:	2000      	movs	r0, #0
     32e:	e71e      	b.n	16e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     330:	2100      	movs	r1, #0
     332:	4640      	mov	r0, r8
     334:	4b35      	ldr	r3, [pc, #212]	; (40c <i2c_master_init+0x2ec>)
     336:	4798      	blx	r3
     338:	e74a      	b.n	1d0 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     33a:	2101      	movs	r1, #1
     33c:	4640      	mov	r0, r8
     33e:	4b33      	ldr	r3, [pc, #204]	; (40c <i2c_master_init+0x2ec>)
     340:	4798      	blx	r3
     342:	0007      	movs	r7, r0
     344:	e751      	b.n	1ea <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     346:	26fa      	movs	r6, #250	; 0xfa
     348:	00b6      	lsls	r6, r6, #2
     34a:	4653      	mov	r3, sl
     34c:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     34e:	9800      	ldr	r0, [sp, #0]
     350:	9901      	ldr	r1, [sp, #4]
     352:	0002      	movs	r2, r0
     354:	000b      	movs	r3, r1
     356:	4c27      	ldr	r4, [pc, #156]	; (3f4 <i2c_master_init+0x2d4>)
     358:	47a0      	blx	r4
     35a:	9000      	str	r0, [sp, #0]
     35c:	9101      	str	r1, [sp, #4]
     35e:	0030      	movs	r0, r6
     360:	4b20      	ldr	r3, [pc, #128]	; (3e4 <i2c_master_init+0x2c4>)
     362:	4798      	blx	r3
     364:	2200      	movs	r2, #0
     366:	4b2a      	ldr	r3, [pc, #168]	; (410 <i2c_master_init+0x2f0>)
     368:	47b8      	blx	r7
     36a:	0002      	movs	r2, r0
     36c:	000b      	movs	r3, r1
     36e:	9800      	ldr	r0, [sp, #0]
     370:	9901      	ldr	r1, [sp, #4]
     372:	4c24      	ldr	r4, [pc, #144]	; (404 <i2c_master_init+0x2e4>)
     374:	47a0      	blx	r4
     376:	2200      	movs	r2, #0
     378:	4b21      	ldr	r3, [pc, #132]	; (400 <i2c_master_init+0x2e0>)
     37a:	4c20      	ldr	r4, [pc, #128]	; (3fc <i2c_master_init+0x2dc>)
     37c:	47a0      	blx	r4
     37e:	4b22      	ldr	r3, [pc, #136]	; (408 <i2c_master_init+0x2e8>)
     380:	4798      	blx	r3
     382:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     384:	d00c      	beq.n	3a0 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     386:	0031      	movs	r1, r6
     388:	9807      	ldr	r0, [sp, #28]
     38a:	4b22      	ldr	r3, [pc, #136]	; (414 <i2c_master_init+0x2f4>)
     38c:	4798      	blx	r3
     38e:	3802      	subs	r0, #2
     390:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     392:	002b      	movs	r3, r5
     394:	2dff      	cmp	r5, #255	; 0xff
     396:	d80c      	bhi.n	3b2 <i2c_master_init+0x292>
     398:	28ff      	cmp	r0, #255	; 0xff
     39a:	d9bc      	bls.n	316 <i2c_master_init+0x1f6>
     39c:	2040      	movs	r0, #64	; 0x40
     39e:	e6e6      	b.n	16e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     3a0:	0071      	lsls	r1, r6, #1
     3a2:	1e48      	subs	r0, r1, #1
     3a4:	9b07      	ldr	r3, [sp, #28]
     3a6:	469c      	mov	ip, r3
     3a8:	4460      	add	r0, ip
     3aa:	4b1a      	ldr	r3, [pc, #104]	; (414 <i2c_master_init+0x2f4>)
     3ac:	4798      	blx	r3
     3ae:	3801      	subs	r0, #1
     3b0:	e7ef      	b.n	392 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3b2:	2040      	movs	r0, #64	; 0x40
     3b4:	e6db      	b.n	16e <i2c_master_init+0x4e>
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	00001f51 	.word	0x00001f51
     3bc:	40000400 	.word	0x40000400
     3c0:	00003291 	.word	0x00003291
     3c4:	00003205 	.word	0x00003205
     3c8:	00001d8d 	.word	0x00001d8d
     3cc:	000008b9 	.word	0x000008b9
     3d0:	00001f8d 	.word	0x00001f8d
     3d4:	20000ef4 	.word	0x20000ef4
     3d8:	00003389 	.word	0x00003389
     3dc:	41002000 	.word	0x41002000
     3e0:	000032ad 	.word	0x000032ad
     3e4:	00004eed 	.word	0x00004eed
     3e8:	00004359 	.word	0x00004359
     3ec:	e826d695 	.word	0xe826d695
     3f0:	3e112e0b 	.word	0x3e112e0b
     3f4:	000036d1 	.word	0x000036d1
     3f8:	40240000 	.word	0x40240000
     3fc:	00004859 	.word	0x00004859
     400:	3ff00000 	.word	0x3ff00000
     404:	00003cf1 	.word	0x00003cf1
     408:	00004e85 	.word	0x00004e85
     40c:	00001dd9 	.word	0x00001dd9
     410:	40080000 	.word	0x40080000
     414:	00003565 	.word	0x00003565

00000418 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     418:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     41a:	7e1a      	ldrb	r2, [r3, #24]
     41c:	0792      	lsls	r2, r2, #30
     41e:	d507      	bpl.n	430 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     420:	2202      	movs	r2, #2
     422:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     424:	8b5b      	ldrh	r3, [r3, #26]
     426:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     428:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     42a:	17db      	asrs	r3, r3, #31
     42c:	4018      	ands	r0, r3
}
     42e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     430:	8b5a      	ldrh	r2, [r3, #26]
     432:	0752      	lsls	r2, r2, #29
     434:	d506      	bpl.n	444 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     436:	6859      	ldr	r1, [r3, #4]
     438:	22c0      	movs	r2, #192	; 0xc0
     43a:	0292      	lsls	r2, r2, #10
     43c:	430a      	orrs	r2, r1
     43e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     440:	2018      	movs	r0, #24
     442:	e7f4      	b.n	42e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     444:	2000      	movs	r0, #0
     446:	e7f2      	b.n	42e <_i2c_master_address_response+0x16>

00000448 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     448:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     44a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     44c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     44e:	2401      	movs	r4, #1
     450:	2502      	movs	r5, #2
     452:	7e11      	ldrb	r1, [r2, #24]
     454:	4221      	tst	r1, r4
     456:	d10b      	bne.n	470 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     458:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     45a:	4229      	tst	r1, r5
     45c:	d106      	bne.n	46c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     45e:	3301      	adds	r3, #1
     460:	b29b      	uxth	r3, r3
     462:	8901      	ldrh	r1, [r0, #8]
     464:	4299      	cmp	r1, r3
     466:	d8f4      	bhi.n	452 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     468:	2012      	movs	r0, #18
     46a:	e002      	b.n	472 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     46c:	2000      	movs	r0, #0
     46e:	e000      	b.n	472 <_i2c_master_wait_for_bus+0x2a>
     470:	2000      	movs	r0, #0
}
     472:	bd30      	pop	{r4, r5, pc}

00000474 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     474:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     476:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     478:	6862      	ldr	r2, [r4, #4]
     47a:	2380      	movs	r3, #128	; 0x80
     47c:	02db      	lsls	r3, r3, #11
     47e:	4313      	orrs	r3, r2
     480:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     482:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     484:	4b02      	ldr	r3, [pc, #8]	; (490 <_i2c_master_send_hs_master_code+0x1c>)
     486:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     488:	2301      	movs	r3, #1
     48a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     48c:	bd10      	pop	{r4, pc}
     48e:	46c0      	nop			; (mov r8, r8)
     490:	00000449 	.word	0x00000449

00000494 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     494:	b5f0      	push	{r4, r5, r6, r7, lr}
     496:	46de      	mov	lr, fp
     498:	4657      	mov	r7, sl
     49a:	464e      	mov	r6, r9
     49c:	4645      	mov	r5, r8
     49e:	b5e0      	push	{r5, r6, r7, lr}
     4a0:	b083      	sub	sp, #12
     4a2:	0006      	movs	r6, r0
     4a4:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4a6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     4a8:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     4aa:	682b      	ldr	r3, [r5, #0]
     4ac:	011b      	lsls	r3, r3, #4
     4ae:	0fdb      	lsrs	r3, r3, #31
     4b0:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     4b2:	7a4b      	ldrb	r3, [r1, #9]
     4b4:	2b00      	cmp	r3, #0
     4b6:	d12b      	bne.n	510 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     4b8:	686b      	ldr	r3, [r5, #4]
     4ba:	4a58      	ldr	r2, [pc, #352]	; (61c <_i2c_master_read_packet+0x188>)
     4bc:	4013      	ands	r3, r2
     4be:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     4c0:	464b      	mov	r3, r9
     4c2:	7a1b      	ldrb	r3, [r3, #8]
     4c4:	2b00      	cmp	r3, #0
     4c6:	d127      	bne.n	518 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4c8:	464b      	mov	r3, r9
     4ca:	881b      	ldrh	r3, [r3, #0]
     4cc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     4ce:	464a      	mov	r2, r9
     4d0:	7a52      	ldrb	r2, [r2, #9]
     4d2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4d4:	4313      	orrs	r3, r2
     4d6:	2201      	movs	r2, #1
     4d8:	4313      	orrs	r3, r2
     4da:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4dc:	0030      	movs	r0, r6
     4de:	4b50      	ldr	r3, [pc, #320]	; (620 <_i2c_master_read_packet+0x18c>)
     4e0:	4798      	blx	r3
     4e2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     4e4:	4653      	mov	r3, sl
     4e6:	2b00      	cmp	r3, #0
     4e8:	d003      	beq.n	4f2 <_i2c_master_read_packet+0x5e>
     4ea:	464b      	mov	r3, r9
     4ec:	885b      	ldrh	r3, [r3, #2]
     4ee:	2b01      	cmp	r3, #1
     4f0:	d03b      	beq.n	56a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     4f2:	686b      	ldr	r3, [r5, #4]
     4f4:	4a49      	ldr	r2, [pc, #292]	; (61c <_i2c_master_read_packet+0x188>)
     4f6:	4013      	ands	r3, r2
     4f8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     4fa:	9b01      	ldr	r3, [sp, #4]
     4fc:	2b00      	cmp	r3, #0
     4fe:	d03a      	beq.n	576 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     500:	9801      	ldr	r0, [sp, #4]
     502:	b003      	add	sp, #12
     504:	bc3c      	pop	{r2, r3, r4, r5}
     506:	4690      	mov	r8, r2
     508:	4699      	mov	r9, r3
     50a:	46a2      	mov	sl, r4
     50c:	46ab      	mov	fp, r5
     50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     510:	7a89      	ldrb	r1, [r1, #10]
     512:	4b44      	ldr	r3, [pc, #272]	; (624 <_i2c_master_read_packet+0x190>)
     514:	4798      	blx	r3
     516:	e7cf      	b.n	4b8 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     518:	464b      	mov	r3, r9
     51a:	881b      	ldrh	r3, [r3, #0]
     51c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     51e:	464a      	mov	r2, r9
     520:	7a52      	ldrb	r2, [r2, #9]
     522:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     524:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     526:	2280      	movs	r2, #128	; 0x80
     528:	0212      	lsls	r2, r2, #8
     52a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     52c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     52e:	0030      	movs	r0, r6
     530:	4b3b      	ldr	r3, [pc, #236]	; (620 <_i2c_master_read_packet+0x18c>)
     532:	4798      	blx	r3
     534:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     536:	686b      	ldr	r3, [r5, #4]
     538:	4a38      	ldr	r2, [pc, #224]	; (61c <_i2c_master_read_packet+0x188>)
     53a:	4013      	ands	r3, r2
     53c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     53e:	2800      	cmp	r0, #0
     540:	d1de      	bne.n	500 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     542:	0030      	movs	r0, r6
     544:	4b38      	ldr	r3, [pc, #224]	; (628 <_i2c_master_read_packet+0x194>)
     546:	4798      	blx	r3
     548:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     54a:	2800      	cmp	r0, #0
     54c:	d1d8      	bne.n	500 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     54e:	464b      	mov	r3, r9
     550:	881b      	ldrh	r3, [r3, #0]
     552:	0a1b      	lsrs	r3, r3, #8
     554:	2278      	movs	r2, #120	; 0x78
     556:	4313      	orrs	r3, r2
     558:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     55a:	464a      	mov	r2, r9
     55c:	7a52      	ldrb	r2, [r2, #9]
     55e:	0392      	lsls	r2, r2, #14
     560:	2101      	movs	r1, #1
     562:	430a      	orrs	r2, r1
     564:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     566:	626b      	str	r3, [r5, #36]	; 0x24
     568:	e7b8      	b.n	4dc <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     56a:	686a      	ldr	r2, [r5, #4]
     56c:	2380      	movs	r3, #128	; 0x80
     56e:	02db      	lsls	r3, r3, #11
     570:	4313      	orrs	r3, r2
     572:	606b      	str	r3, [r5, #4]
     574:	e7c1      	b.n	4fa <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     576:	0030      	movs	r0, r6
     578:	4b2b      	ldr	r3, [pc, #172]	; (628 <_i2c_master_read_packet+0x194>)
     57a:	4798      	blx	r3
     57c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     57e:	2800      	cmp	r0, #0
     580:	d1be      	bne.n	500 <_i2c_master_read_packet+0x6c>
     582:	3c01      	subs	r4, #1
     584:	b2a4      	uxth	r4, r4
     586:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     588:	4b28      	ldr	r3, [pc, #160]	; (62c <_i2c_master_read_packet+0x198>)
     58a:	469b      	mov	fp, r3
     58c:	e015      	b.n	5ba <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     58e:	2c01      	cmp	r4, #1
     590:	d020      	beq.n	5d4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     592:	0030      	movs	r0, r6
     594:	4b26      	ldr	r3, [pc, #152]	; (630 <_i2c_master_read_packet+0x19c>)
     596:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     598:	4643      	mov	r3, r8
     59a:	1c5f      	adds	r7, r3, #1
     59c:	b2bf      	uxth	r7, r7
     59e:	2328      	movs	r3, #40	; 0x28
     5a0:	5ceb      	ldrb	r3, [r5, r3]
     5a2:	464a      	mov	r2, r9
     5a4:	6852      	ldr	r2, [r2, #4]
     5a6:	4641      	mov	r1, r8
     5a8:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     5aa:	0030      	movs	r0, r6
     5ac:	4b1c      	ldr	r3, [pc, #112]	; (620 <_i2c_master_read_packet+0x18c>)
     5ae:	4798      	blx	r3
     5b0:	3c01      	subs	r4, #1
     5b2:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     5b4:	2800      	cmp	r0, #0
     5b6:	d115      	bne.n	5e4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     5b8:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     5ba:	455c      	cmp	r4, fp
     5bc:	d014      	beq.n	5e8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     5be:	8b6b      	ldrh	r3, [r5, #26]
     5c0:	069b      	lsls	r3, r3, #26
     5c2:	d527      	bpl.n	614 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     5c4:	7af3      	ldrb	r3, [r6, #11]
     5c6:	2b00      	cmp	r3, #0
     5c8:	d0e3      	beq.n	592 <_i2c_master_read_packet+0xfe>
     5ca:	4653      	mov	r3, sl
     5cc:	2b00      	cmp	r3, #0
     5ce:	d1de      	bne.n	58e <_i2c_master_read_packet+0xfa>
     5d0:	2c00      	cmp	r4, #0
     5d2:	d1de      	bne.n	592 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5d4:	686a      	ldr	r2, [r5, #4]
     5d6:	2380      	movs	r3, #128	; 0x80
     5d8:	02db      	lsls	r3, r3, #11
     5da:	4313      	orrs	r3, r2
     5dc:	606b      	str	r3, [r5, #4]
     5de:	3c01      	subs	r4, #1
     5e0:	b2a4      	uxth	r4, r4
     5e2:	e7ea      	b.n	5ba <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     5e4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     5e6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     5e8:	7ab3      	ldrb	r3, [r6, #10]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d109      	bne.n	602 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     5ee:	0030      	movs	r0, r6
     5f0:	4b0f      	ldr	r3, [pc, #60]	; (630 <_i2c_master_read_packet+0x19c>)
     5f2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     5f4:	2328      	movs	r3, #40	; 0x28
     5f6:	5cea      	ldrb	r2, [r5, r3]
     5f8:	464b      	mov	r3, r9
     5fa:	685b      	ldr	r3, [r3, #4]
     5fc:	4641      	mov	r1, r8
     5fe:	545a      	strb	r2, [r3, r1]
     600:	e77e      	b.n	500 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     602:	0030      	movs	r0, r6
     604:	4b0a      	ldr	r3, [pc, #40]	; (630 <_i2c_master_read_packet+0x19c>)
     606:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     608:	686a      	ldr	r2, [r5, #4]
     60a:	23c0      	movs	r3, #192	; 0xc0
     60c:	029b      	lsls	r3, r3, #10
     60e:	4313      	orrs	r3, r2
     610:	606b      	str	r3, [r5, #4]
     612:	e7ec      	b.n	5ee <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     614:	2341      	movs	r3, #65	; 0x41
     616:	9301      	str	r3, [sp, #4]
     618:	e772      	b.n	500 <_i2c_master_read_packet+0x6c>
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	fffbffff 	.word	0xfffbffff
     620:	00000449 	.word	0x00000449
     624:	00000475 	.word	0x00000475
     628:	00000419 	.word	0x00000419
     62c:	0000ffff 	.word	0x0000ffff
     630:	00000115 	.word	0x00000115

00000634 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     634:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
     636:	8b83      	ldrh	r3, [r0, #28]
     638:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     63a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     63c:	2b00      	cmp	r3, #0
     63e:	d001      	beq.n	644 <i2c_master_read_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_read_packet(module, packet);
}
     640:	0010      	movs	r0, r2
     642:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     644:	3301      	adds	r3, #1
     646:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     648:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     64a:	4b02      	ldr	r3, [pc, #8]	; (654 <i2c_master_read_packet_wait+0x20>)
     64c:	4798      	blx	r3
     64e:	0002      	movs	r2, r0
     650:	e7f6      	b.n	640 <i2c_master_read_packet_wait+0xc>
     652:	46c0      	nop			; (mov r8, r8)
     654:	00000495 	.word	0x00000495

00000658 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     658:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     65a:	2207      	movs	r2, #7
     65c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     65e:	421a      	tst	r2, r3
     660:	d1fc      	bne.n	65c <_i2c_master_wait_for_sync+0x4>
}
     662:	4770      	bx	lr

00000664 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     664:	b570      	push	{r4, r5, r6, lr}
     666:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     668:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     66a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     66c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     66e:	8b83      	ldrh	r3, [r0, #28]
     670:	1aed      	subs	r5, r5, r3
     672:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     674:	8b83      	ldrh	r3, [r0, #28]
     676:	3b01      	subs	r3, #1
     678:	b29b      	uxth	r3, r3
     67a:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     67c:	0113      	lsls	r3, r2, #4
     67e:	d51d      	bpl.n	6bc <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     680:	7ac3      	ldrb	r3, [r0, #11]
     682:	2b00      	cmp	r3, #0
     684:	d003      	beq.n	68e <_i2c_master_read+0x2a>
     686:	8b83      	ldrh	r3, [r0, #28]
     688:	b29b      	uxth	r3, r3
     68a:	2b01      	cmp	r3, #1
     68c:	d010      	beq.n	6b0 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     68e:	8ba3      	ldrh	r3, [r4, #28]
     690:	b29b      	uxth	r3, r3
     692:	2b00      	cmp	r3, #0
     694:	d102      	bne.n	69c <_i2c_master_read+0x38>
		if (module->send_stop) {
     696:	7aa3      	ldrb	r3, [r4, #10]
     698:	2b00      	cmp	r3, #0
     69a:	d11c      	bne.n	6d6 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     69c:	0020      	movs	r0, r4
     69e:	4b12      	ldr	r3, [pc, #72]	; (6e8 <_i2c_master_read+0x84>)
     6a0:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     6a2:	6a23      	ldr	r3, [r4, #32]
     6a4:	195d      	adds	r5, r3, r5
     6a6:	2328      	movs	r3, #40	; 0x28
     6a8:	5cf3      	ldrb	r3, [r6, r3]
     6aa:	b2db      	uxtb	r3, r3
     6ac:	702b      	strb	r3, [r5, #0]
}
     6ae:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6b0:	6872      	ldr	r2, [r6, #4]
     6b2:	2380      	movs	r3, #128	; 0x80
     6b4:	02db      	lsls	r3, r3, #11
     6b6:	4313      	orrs	r3, r2
     6b8:	6073      	str	r3, [r6, #4]
     6ba:	e7e8      	b.n	68e <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     6bc:	7ac3      	ldrb	r3, [r0, #11]
     6be:	2b00      	cmp	r3, #0
     6c0:	d0e5      	beq.n	68e <_i2c_master_read+0x2a>
     6c2:	8b83      	ldrh	r3, [r0, #28]
     6c4:	b29b      	uxth	r3, r3
     6c6:	2b00      	cmp	r3, #0
     6c8:	d1e1      	bne.n	68e <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6ca:	6872      	ldr	r2, [r6, #4]
     6cc:	2380      	movs	r3, #128	; 0x80
     6ce:	02db      	lsls	r3, r3, #11
     6d0:	4313      	orrs	r3, r2
     6d2:	6073      	str	r3, [r6, #4]
     6d4:	e7db      	b.n	68e <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     6d6:	0020      	movs	r0, r4
     6d8:	4b03      	ldr	r3, [pc, #12]	; (6e8 <_i2c_master_read+0x84>)
     6da:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6dc:	6872      	ldr	r2, [r6, #4]
     6de:	23c0      	movs	r3, #192	; 0xc0
     6e0:	029b      	lsls	r3, r3, #10
     6e2:	4313      	orrs	r3, r2
     6e4:	6073      	str	r3, [r6, #4]
     6e6:	e7d9      	b.n	69c <_i2c_master_read+0x38>
     6e8:	00000659 	.word	0x00000659

000006ec <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     6ec:	b570      	push	{r4, r5, r6, lr}
     6ee:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6f0:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     6f2:	8b6b      	ldrh	r3, [r5, #26]
     6f4:	075b      	lsls	r3, r3, #29
     6f6:	d503      	bpl.n	700 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     6f8:	221e      	movs	r2, #30
     6fa:	2325      	movs	r3, #37	; 0x25
     6fc:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     6fe:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     700:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     702:	8b83      	ldrh	r3, [r0, #28]
     704:	1af6      	subs	r6, r6, r3
     706:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     708:	8b83      	ldrh	r3, [r0, #28]
     70a:	3b01      	subs	r3, #1
     70c:	b29b      	uxth	r3, r3
     70e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     710:	4b04      	ldr	r3, [pc, #16]	; (724 <_i2c_master_write+0x38>)
     712:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     714:	6a23      	ldr	r3, [r4, #32]
     716:	199e      	adds	r6, r3, r6
     718:	7833      	ldrb	r3, [r6, #0]
     71a:	b2db      	uxtb	r3, r3
     71c:	2228      	movs	r2, #40	; 0x28
     71e:	54ab      	strb	r3, [r5, r2]
     720:	e7ed      	b.n	6fe <_i2c_master_write+0x12>
     722:	46c0      	nop			; (mov r8, r8)
     724:	00000659 	.word	0x00000659

00000728 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     728:	b570      	push	{r4, r5, r6, lr}
     72a:	0005      	movs	r5, r0
     72c:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     72e:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     730:	7a4b      	ldrb	r3, [r1, #9]
     732:	2b00      	cmp	r3, #0
     734:	d11a      	bne.n	76c <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     736:	6873      	ldr	r3, [r6, #4]
     738:	4a13      	ldr	r2, [pc, #76]	; (788 <_i2c_master_write_packet+0x60>)
     73a:	4013      	ands	r3, r2
     73c:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     73e:	6863      	ldr	r3, [r4, #4]
     740:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     742:	8863      	ldrh	r3, [r4, #2]
     744:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     746:	2200      	movs	r2, #0
     748:	2324      	movs	r3, #36	; 0x24
     74a:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     74c:	3205      	adds	r2, #5
     74e:	3301      	adds	r3, #1
     750:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     752:	3b22      	subs	r3, #34	; 0x22
     754:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     756:	7a23      	ldrb	r3, [r4, #8]
     758:	2b00      	cmp	r3, #0
     75a:	d10b      	bne.n	774 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     75c:	8823      	ldrh	r3, [r4, #0]
     75e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     760:	7a62      	ldrb	r2, [r4, #9]
     762:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     764:	4313      	orrs	r3, r2
     766:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     768:	2000      	movs	r0, #0
     76a:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     76c:	7a89      	ldrb	r1, [r1, #10]
     76e:	4b07      	ldr	r3, [pc, #28]	; (78c <_i2c_master_write_packet+0x64>)
     770:	4798      	blx	r3
     772:	e7e0      	b.n	736 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     774:	8823      	ldrh	r3, [r4, #0]
     776:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     778:	7a62      	ldrb	r2, [r4, #9]
     77a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     77c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     77e:	2280      	movs	r2, #128	; 0x80
     780:	0212      	lsls	r2, r2, #8
     782:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     784:	6273      	str	r3, [r6, #36]	; 0x24
     786:	e7ef      	b.n	768 <_i2c_master_write_packet+0x40>
     788:	fffbffff 	.word	0xfffbffff
     78c:	00000475 	.word	0x00000475

00000790 <_i2c_master_read_packet>:
{
     790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     792:	0005      	movs	r5, r0
     794:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     796:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     798:	684b      	ldr	r3, [r1, #4]
     79a:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     79c:	884b      	ldrh	r3, [r1, #2]
     79e:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     7a0:	2201      	movs	r2, #1
     7a2:	2324      	movs	r3, #36	; 0x24
     7a4:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     7a6:	3204      	adds	r2, #4
     7a8:	3301      	adds	r3, #1
     7aa:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7ac:	6837      	ldr	r7, [r6, #0]
     7ae:	013f      	lsls	r7, r7, #4
     7b0:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     7b2:	7a4b      	ldrb	r3, [r1, #9]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d117      	bne.n	7e8 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     7b8:	2f00      	cmp	r7, #0
     7ba:	d002      	beq.n	7c2 <_i2c_master_read_packet+0x32>
     7bc:	8863      	ldrh	r3, [r4, #2]
     7be:	2b01      	cmp	r3, #1
     7c0:	d016      	beq.n	7f0 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     7c2:	6873      	ldr	r3, [r6, #4]
     7c4:	4a20      	ldr	r2, [pc, #128]	; (848 <_i2c_master_read_packet+0xb8>)
     7c6:	4013      	ands	r3, r2
     7c8:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     7ca:	7a23      	ldrb	r3, [r4, #8]
     7cc:	2b00      	cmp	r3, #0
     7ce:	d115      	bne.n	7fc <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     7d0:	2303      	movs	r3, #3
     7d2:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7d4:	8823      	ldrh	r3, [r4, #0]
     7d6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     7d8:	7a62      	ldrb	r2, [r4, #9]
     7da:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7dc:	4313      	orrs	r3, r2
     7de:	2201      	movs	r2, #1
     7e0:	4313      	orrs	r3, r2
     7e2:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     7e4:	2000      	movs	r0, #0
}
     7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     7e8:	7a89      	ldrb	r1, [r1, #10]
     7ea:	4b18      	ldr	r3, [pc, #96]	; (84c <_i2c_master_read_packet+0xbc>)
     7ec:	4798      	blx	r3
     7ee:	e7e3      	b.n	7b8 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     7f0:	6872      	ldr	r2, [r6, #4]
     7f2:	2380      	movs	r3, #128	; 0x80
     7f4:	02db      	lsls	r3, r3, #11
     7f6:	4313      	orrs	r3, r2
     7f8:	6073      	str	r3, [r6, #4]
     7fa:	e7e6      	b.n	7ca <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     7fc:	8823      	ldrh	r3, [r4, #0]
     7fe:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     800:	7a62      	ldrb	r2, [r4, #9]
     802:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     804:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     806:	2280      	movs	r2, #128	; 0x80
     808:	0212      	lsls	r2, r2, #8
     80a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     80c:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     80e:	0028      	movs	r0, r5
     810:	4b0f      	ldr	r3, [pc, #60]	; (850 <_i2c_master_read_packet+0xc0>)
     812:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     814:	6873      	ldr	r3, [r6, #4]
     816:	4a0c      	ldr	r2, [pc, #48]	; (848 <_i2c_master_read_packet+0xb8>)
     818:	4013      	ands	r3, r2
     81a:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     81c:	2800      	cmp	r0, #0
     81e:	d1e2      	bne.n	7e6 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     820:	0028      	movs	r0, r5
     822:	4b0c      	ldr	r3, [pc, #48]	; (854 <_i2c_master_read_packet+0xc4>)
     824:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     826:	2800      	cmp	r0, #0
     828:	d1dd      	bne.n	7e6 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     82a:	2303      	movs	r3, #3
     82c:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     82e:	8823      	ldrh	r3, [r4, #0]
     830:	0a1b      	lsrs	r3, r3, #8
     832:	2278      	movs	r2, #120	; 0x78
     834:	4313      	orrs	r3, r2
     836:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     838:	7a62      	ldrb	r2, [r4, #9]
     83a:	0392      	lsls	r2, r2, #14
     83c:	2101      	movs	r1, #1
     83e:	430a      	orrs	r2, r1
     840:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     842:	6273      	str	r3, [r6, #36]	; 0x24
     844:	e7cf      	b.n	7e6 <_i2c_master_read_packet+0x56>
     846:	46c0      	nop			; (mov r8, r8)
     848:	fffbffff 	.word	0xfffbffff
     84c:	00000475 	.word	0x00000475
     850:	00000449 	.word	0x00000449
     854:	00000419 	.word	0x00000419

00000858 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     858:	1c93      	adds	r3, r2, #2
     85a:	009b      	lsls	r3, r3, #2
     85c:	18c3      	adds	r3, r0, r3
     85e:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     860:	7e03      	ldrb	r3, [r0, #24]
     862:	2101      	movs	r1, #1
     864:	4091      	lsls	r1, r2
     866:	430b      	orrs	r3, r1
     868:	b2db      	uxtb	r3, r3
     86a:	7603      	strb	r3, [r0, #24]
}
     86c:	4770      	bx	lr
	...

00000870 <i2c_master_read_packet_job>:
{
     870:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     872:	8b83      	ldrh	r3, [r0, #28]
     874:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     876:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     878:	2b00      	cmp	r3, #0
     87a:	d001      	beq.n	880 <i2c_master_read_packet_job+0x10>
}
     87c:	0010      	movs	r0, r2
     87e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     880:	3301      	adds	r3, #1
     882:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     884:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     886:	4b02      	ldr	r3, [pc, #8]	; (890 <i2c_master_read_packet_job+0x20>)
     888:	4798      	blx	r3
     88a:	0002      	movs	r2, r0
     88c:	e7f6      	b.n	87c <i2c_master_read_packet_job+0xc>
     88e:	46c0      	nop			; (mov r8, r8)
     890:	00000791 	.word	0x00000791

00000894 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     894:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     896:	8b83      	ldrh	r3, [r0, #28]
     898:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     89a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     89c:	2b00      	cmp	r3, #0
     89e:	d001      	beq.n	8a4 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     8a0:	0010      	movs	r0, r2
     8a2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     8a4:	3301      	adds	r3, #1
     8a6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     8a8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     8aa:	4b02      	ldr	r3, [pc, #8]	; (8b4 <i2c_master_write_packet_job+0x20>)
     8ac:	4798      	blx	r3
     8ae:	0002      	movs	r2, r0
     8b0:	e7f6      	b.n	8a0 <i2c_master_write_packet_job+0xc>
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	00000729 	.word	0x00000729

000008b8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     8b8:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     8ba:	0080      	lsls	r0, r0, #2
     8bc:	4b75      	ldr	r3, [pc, #468]	; (a94 <_i2c_master_interrupt_handler+0x1dc>)
     8be:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8c0:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     8c2:	682b      	ldr	r3, [r5, #0]
     8c4:	011b      	lsls	r3, r3, #4
     8c6:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     8c8:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     8ca:	7e26      	ldrb	r6, [r4, #24]
     8cc:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     8ce:	8b63      	ldrh	r3, [r4, #26]
     8d0:	b29b      	uxth	r3, r3
     8d2:	2b00      	cmp	r3, #0
     8d4:	d103      	bne.n	8de <_i2c_master_interrupt_handler+0x26>
     8d6:	8ba3      	ldrh	r3, [r4, #28]
     8d8:	b29b      	uxth	r3, r3
     8da:	2b00      	cmp	r3, #0
     8dc:	d123      	bne.n	926 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0)     && (module->buffer_remaining <= 0) &&
     8de:	8b63      	ldrh	r3, [r4, #26]
     8e0:	b29b      	uxth	r3, r3
     8e2:	2b00      	cmp	r3, #0
     8e4:	d008      	beq.n	8f8 <_i2c_master_interrupt_handler+0x40>
     8e6:	8ba3      	ldrh	r3, [r4, #28]
     8e8:	b29b      	uxth	r3, r3
     8ea:	2b00      	cmp	r3, #0
     8ec:	d104      	bne.n	8f8 <_i2c_master_interrupt_handler+0x40>
			   (module->status == STATUS_BUSY) && (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     8ee:	3325      	adds	r3, #37	; 0x25
     8f0:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0)     && (module->buffer_remaining <= 0) &&
     8f2:	2b05      	cmp	r3, #5
     8f4:	d100      	bne.n	8f8 <_i2c_master_interrupt_handler+0x40>
     8f6:	e06d      	b.n	9d4 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     8f8:	8b63      	ldrh	r3, [r4, #26]
     8fa:	b29b      	uxth	r3, r3
     8fc:	2b00      	cmp	r3, #0
     8fe:	d024      	beq.n	94a <_i2c_master_interrupt_handler+0x92>
     900:	8ba3      	ldrh	r3, [r4, #28]
     902:	b29b      	uxth	r3, r3
     904:	2b00      	cmp	r3, #0
     906:	d020      	beq.n	94a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     908:	8b6b      	ldrh	r3, [r5, #26]
     90a:	069b      	lsls	r3, r3, #26
     90c:	d500      	bpl.n	910 <_i2c_master_interrupt_handler+0x58>
     90e:	e081      	b.n	a14 <_i2c_master_interrupt_handler+0x15c>
     910:	2a00      	cmp	r2, #0
     912:	d004      	beq.n	91e <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     914:	8ba3      	ldrh	r3, [r4, #28]
     916:	b29b      	uxth	r3, r3
     918:	2b01      	cmp	r3, #1
     91a:	d100      	bne.n	91e <_i2c_master_interrupt_handler+0x66>
     91c:	e07a      	b.n	a14 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     91e:	2241      	movs	r2, #65	; 0x41
     920:	2325      	movs	r3, #37	; 0x25
     922:	54e2      	strb	r2, [r4, r3]
     924:	e011      	b.n	94a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     926:	7e2b      	ldrb	r3, [r5, #24]
     928:	07db      	lsls	r3, r3, #31
     92a:	d507      	bpl.n	93c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     92c:	2301      	movs	r3, #1
     92e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     930:	8b6b      	ldrh	r3, [r5, #26]
     932:	079b      	lsls	r3, r3, #30
     934:	d52e      	bpl.n	994 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     936:	2241      	movs	r2, #65	; 0x41
     938:	2325      	movs	r3, #37	; 0x25
     93a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     93c:	8ba3      	ldrh	r3, [r4, #28]
     93e:	b29b      	uxth	r3, r3
     940:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     942:	2325      	movs	r3, #37	; 0x25
     944:	5ce3      	ldrb	r3, [r4, r3]
     946:	2b05      	cmp	r3, #5
     948:	d038      	beq.n	9bc <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     94a:	8b63      	ldrh	r3, [r4, #26]
     94c:	b29b      	uxth	r3, r3
     94e:	2b00      	cmp	r3, #0
     950:	d007      	beq.n	962 <_i2c_master_interrupt_handler+0xaa>
     952:	8ba3      	ldrh	r3, [r4, #28]
     954:	b29b      	uxth	r3, r3
     956:	2b00      	cmp	r3, #0
     958:	d103      	bne.n	962 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     95a:	3325      	adds	r3, #37	; 0x25
     95c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     95e:	2b05      	cmp	r3, #5
     960:	d064      	beq.n	a2c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     962:	2325      	movs	r3, #37	; 0x25
     964:	5ce3      	ldrb	r3, [r4, r3]
     966:	2b05      	cmp	r3, #5
     968:	d013      	beq.n	992 <_i2c_master_interrupt_handler+0xda>
     96a:	2325      	movs	r3, #37	; 0x25
     96c:	5ce3      	ldrb	r3, [r4, r3]
     96e:	2b00      	cmp	r3, #0
     970:	d00f      	beq.n	992 <_i2c_master_interrupt_handler+0xda>
		
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
     972:	2303      	movs	r3, #3
     974:	752b      	strb	r3, [r5, #20]

		module->buffer_length = 0;
     976:	2300      	movs	r3, #0
     978:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     97a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     97c:	3325      	adds	r3, #37	; 0x25
     97e:	5ce3      	ldrb	r3, [r4, r3]
     980:	2b41      	cmp	r3, #65	; 0x41
     982:	d003      	beq.n	98c <_i2c_master_interrupt_handler+0xd4>
     984:	7aa3      	ldrb	r3, [r4, #10]
     986:	2b00      	cmp	r3, #0
     988:	d000      	beq.n	98c <_i2c_master_interrupt_handler+0xd4>
     98a:	e075      	b.n	a78 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     98c:	0773      	lsls	r3, r6, #29
     98e:	d500      	bpl.n	992 <_i2c_master_interrupt_handler+0xda>
     990:	e07b      	b.n	a8a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     992:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     994:	8b6b      	ldrh	r3, [r5, #26]
     996:	075b      	lsls	r3, r3, #29
     998:	d5d0      	bpl.n	93c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     99a:	2218      	movs	r2, #24
     99c:	2325      	movs	r3, #37	; 0x25
     99e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     9a0:	2300      	movs	r3, #0
     9a2:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     9a4:	7aa3      	ldrb	r3, [r4, #10]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d0c8      	beq.n	93c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     9aa:	0020      	movs	r0, r4
     9ac:	4b3a      	ldr	r3, [pc, #232]	; (a98 <_i2c_master_interrupt_handler+0x1e0>)
     9ae:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9b0:	686a      	ldr	r2, [r5, #4]
     9b2:	23c0      	movs	r3, #192	; 0xc0
     9b4:	029b      	lsls	r3, r3, #10
     9b6:	4313      	orrs	r3, r2
     9b8:	606b      	str	r3, [r5, #4]
     9ba:	e7bf      	b.n	93c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     9bc:	331f      	adds	r3, #31
     9be:	5ce3      	ldrb	r3, [r4, r3]
     9c0:	2b00      	cmp	r3, #0
     9c2:	d003      	beq.n	9cc <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     9c4:	0020      	movs	r0, r4
     9c6:	4b35      	ldr	r3, [pc, #212]	; (a9c <_i2c_master_interrupt_handler+0x1e4>)
     9c8:	4798      	blx	r3
     9ca:	e7be      	b.n	94a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     9cc:	0020      	movs	r0, r4
     9ce:	4b34      	ldr	r3, [pc, #208]	; (aa0 <_i2c_master_interrupt_handler+0x1e8>)
     9d0:	4798      	blx	r3
     9d2:	e7ba      	b.n	94a <_i2c_master_interrupt_handler+0x92>
			   (module->status == STATUS_BUSY) && (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     9d4:	331f      	adds	r3, #31
     9d6:	5ce3      	ldrb	r3, [r4, r3]
     9d8:	2b00      	cmp	r3, #0
     9da:	d000      	beq.n	9de <_i2c_master_interrupt_handler+0x126>
     9dc:	e78c      	b.n	8f8 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg	=	SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
     9de:	3303      	adds	r3, #3
     9e0:	752b      	strb	r3, [r5, #20]
		module->buffer_length		=	0;
     9e2:	2300      	movs	r3, #0
     9e4:	8363      	strh	r3, [r4, #26]
		module->status				=	STATUS_OK;
     9e6:	3325      	adds	r3, #37	; 0x25
     9e8:	2200      	movs	r2, #0
     9ea:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     9ec:	7aa3      	ldrb	r3, [r4, #10]
     9ee:	2b00      	cmp	r3, #0
     9f0:	d107      	bne.n	a02 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     9f2:	2301      	movs	r3, #1
     9f4:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     9f6:	07f3      	lsls	r3, r6, #31
     9f8:	d5a7      	bpl.n	94a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     9fa:	68e3      	ldr	r3, [r4, #12]
     9fc:	0020      	movs	r0, r4
     9fe:	4798      	blx	r3
     a00:	e7a3      	b.n	94a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     a02:	0020      	movs	r0, r4
     a04:	4b24      	ldr	r3, [pc, #144]	; (a98 <_i2c_master_interrupt_handler+0x1e0>)
     a06:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a08:	686a      	ldr	r2, [r5, #4]
     a0a:	23c0      	movs	r3, #192	; 0xc0
     a0c:	029b      	lsls	r3, r3, #10
     a0e:	4313      	orrs	r3, r2
     a10:	606b      	str	r3, [r5, #4]
     a12:	e7f0      	b.n	9f6 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     a14:	2324      	movs	r3, #36	; 0x24
     a16:	5ce3      	ldrb	r3, [r4, r3]
     a18:	2b00      	cmp	r3, #0
     a1a:	d103      	bne.n	a24 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     a1c:	0020      	movs	r0, r4
     a1e:	4b20      	ldr	r3, [pc, #128]	; (aa0 <_i2c_master_interrupt_handler+0x1e8>)
     a20:	4798      	blx	r3
     a22:	e792      	b.n	94a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     a24:	0020      	movs	r0, r4
     a26:	4b1d      	ldr	r3, [pc, #116]	; (a9c <_i2c_master_interrupt_handler+0x1e4>)
     a28:	4798      	blx	r3
     a2a:	e78e      	b.n	94a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     a2c:	331f      	adds	r3, #31
     a2e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     a30:	2b01      	cmp	r3, #1
     a32:	d196      	bne.n	962 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     a34:	7e2b      	ldrb	r3, [r5, #24]
     a36:	079b      	lsls	r3, r3, #30
     a38:	d501      	bpl.n	a3e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     a3a:	2302      	movs	r3, #2
     a3c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     a3e:	2303      	movs	r3, #3
     a40:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     a42:	2300      	movs	r3, #0
     a44:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     a46:	3325      	adds	r3, #37	; 0x25
     a48:	2200      	movs	r2, #0
     a4a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     a4c:	07b3      	lsls	r3, r6, #30
     a4e:	d503      	bpl.n	a58 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     a50:	2324      	movs	r3, #36	; 0x24
     a52:	5ce3      	ldrb	r3, [r4, r3]
     a54:	2b01      	cmp	r3, #1
     a56:	d00b      	beq.n	a70 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     a58:	07f3      	lsls	r3, r6, #31
     a5a:	d400      	bmi.n	a5e <_i2c_master_interrupt_handler+0x1a6>
     a5c:	e781      	b.n	962 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     a5e:	2324      	movs	r3, #36	; 0x24
     a60:	5ce3      	ldrb	r3, [r4, r3]
     a62:	2b00      	cmp	r3, #0
     a64:	d000      	beq.n	a68 <_i2c_master_interrupt_handler+0x1b0>
     a66:	e77c      	b.n	962 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     a68:	68e3      	ldr	r3, [r4, #12]
     a6a:	0020      	movs	r0, r4
     a6c:	4798      	blx	r3
     a6e:	e778      	b.n	962 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     a70:	6923      	ldr	r3, [r4, #16]
     a72:	0020      	movs	r0, r4
     a74:	4798      	blx	r3
     a76:	e774      	b.n	962 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     a78:	0020      	movs	r0, r4
     a7a:	4b07      	ldr	r3, [pc, #28]	; (a98 <_i2c_master_interrupt_handler+0x1e0>)
     a7c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     a7e:	686a      	ldr	r2, [r5, #4]
     a80:	23e0      	movs	r3, #224	; 0xe0
     a82:	02db      	lsls	r3, r3, #11
     a84:	4313      	orrs	r3, r2
     a86:	606b      	str	r3, [r5, #4]
     a88:	e780      	b.n	98c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     a8a:	6963      	ldr	r3, [r4, #20]
     a8c:	0020      	movs	r0, r4
     a8e:	4798      	blx	r3
}
     a90:	e77f      	b.n	992 <_i2c_master_interrupt_handler+0xda>
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	20000ef4 	.word	0x20000ef4
     a98:	00000659 	.word	0x00000659
     a9c:	00000665 	.word	0x00000665
     aa0:	000006ed 	.word	0x000006ed

00000aa4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa6:	46c6      	mov	lr, r8
     aa8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     aaa:	0080      	lsls	r0, r0, #2
     aac:	4b0e      	ldr	r3, [pc, #56]	; (ae8 <_tcc_interrupt_handler+0x44>)
     aae:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     ab0:	683b      	ldr	r3, [r7, #0]
     ab2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ab8:	4013      	ands	r3, r2
     aba:	401e      	ands	r6, r3
     abc:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     abe:	4b0b      	ldr	r3, [pc, #44]	; (aec <_tcc_interrupt_handler+0x48>)
     ac0:	4698      	mov	r8, r3
     ac2:	e002      	b.n	aca <_tcc_interrupt_handler+0x26>
     ac4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     ac6:	2c30      	cmp	r4, #48	; 0x30
     ac8:	d00a      	beq.n	ae0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     aca:	4643      	mov	r3, r8
     acc:	58e5      	ldr	r5, [r4, r3]
     ace:	4235      	tst	r5, r6
     ad0:	d0f8      	beq.n	ac4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     ad2:	193b      	adds	r3, r7, r4
     ad4:	685b      	ldr	r3, [r3, #4]
     ad6:	0038      	movs	r0, r7
     ad8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     ada:	683b      	ldr	r3, [r7, #0]
     adc:	62dd      	str	r5, [r3, #44]	; 0x2c
     ade:	e7f1      	b.n	ac4 <_tcc_interrupt_handler+0x20>
		}
	}
}
     ae0:	bc04      	pop	{r2}
     ae2:	4690      	mov	r8, r2
     ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	20000db0 	.word	0x20000db0
     aec:	000050ec 	.word	0x000050ec

00000af0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     af0:	b510      	push	{r4, lr}
     af2:	2000      	movs	r0, #0
     af4:	4b01      	ldr	r3, [pc, #4]	; (afc <TCC0_Handler+0xc>)
     af6:	4798      	blx	r3
     af8:	bd10      	pop	{r4, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	00000aa5 	.word	0x00000aa5

00000b00 <TCC1_Handler>:
     b00:	b510      	push	{r4, lr}
     b02:	2001      	movs	r0, #1
     b04:	4b01      	ldr	r3, [pc, #4]	; (b0c <TCC1_Handler+0xc>)
     b06:	4798      	blx	r3
     b08:	bd10      	pop	{r4, pc}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	00000aa5 	.word	0x00000aa5

00000b10 <TCC2_Handler>:
     b10:	b510      	push	{r4, lr}
     b12:	2002      	movs	r0, #2
     b14:	4b01      	ldr	r3, [pc, #4]	; (b1c <TCC2_Handler+0xc>)
     b16:	4798      	blx	r3
     b18:	bd10      	pop	{r4, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	00000aa5 	.word	0x00000aa5

00000b20 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     b20:	1c93      	adds	r3, r2, #2
     b22:	009b      	lsls	r3, r3, #2
     b24:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     b26:	2a02      	cmp	r2, #2
     b28:	d009      	beq.n	b3e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     b2a:	2a03      	cmp	r2, #3
     b2c:	d00c      	beq.n	b48 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     b2e:	2301      	movs	r3, #1
     b30:	4093      	lsls	r3, r2
     b32:	001a      	movs	r2, r3
     b34:	7e03      	ldrb	r3, [r0, #24]
     b36:	4313      	orrs	r3, r2
     b38:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     b3a:	2000      	movs	r0, #0
     b3c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     b3e:	7e03      	ldrb	r3, [r0, #24]
     b40:	2210      	movs	r2, #16
     b42:	4313      	orrs	r3, r2
     b44:	7603      	strb	r3, [r0, #24]
     b46:	e7f8      	b.n	b3a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     b48:	7e03      	ldrb	r3, [r0, #24]
     b4a:	2220      	movs	r2, #32
     b4c:	4313      	orrs	r3, r2
     b4e:	7603      	strb	r3, [r0, #24]
     b50:	e7f3      	b.n	b3a <tc_register_callback+0x1a>
	...

00000b54 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     b54:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     b56:	0080      	lsls	r0, r0, #2
     b58:	4b16      	ldr	r3, [pc, #88]	; (bb4 <_tc_interrupt_handler+0x60>)
     b5a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     b5c:	6823      	ldr	r3, [r4, #0]
     b5e:	7b9d      	ldrb	r5, [r3, #14]
     b60:	7e22      	ldrb	r2, [r4, #24]
     b62:	7e63      	ldrb	r3, [r4, #25]
     b64:	4013      	ands	r3, r2
     b66:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     b68:	07eb      	lsls	r3, r5, #31
     b6a:	d406      	bmi.n	b7a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     b6c:	07ab      	lsls	r3, r5, #30
     b6e:	d40b      	bmi.n	b88 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     b70:	06eb      	lsls	r3, r5, #27
     b72:	d410      	bmi.n	b96 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     b74:	06ab      	lsls	r3, r5, #26
     b76:	d415      	bmi.n	ba4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     b78:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     b7a:	0020      	movs	r0, r4
     b7c:	68a3      	ldr	r3, [r4, #8]
     b7e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     b80:	2301      	movs	r3, #1
     b82:	6822      	ldr	r2, [r4, #0]
     b84:	7393      	strb	r3, [r2, #14]
     b86:	e7f1      	b.n	b6c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     b88:	0020      	movs	r0, r4
     b8a:	68e3      	ldr	r3, [r4, #12]
     b8c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     b8e:	2302      	movs	r3, #2
     b90:	6822      	ldr	r2, [r4, #0]
     b92:	7393      	strb	r3, [r2, #14]
     b94:	e7ec      	b.n	b70 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     b96:	0020      	movs	r0, r4
     b98:	6923      	ldr	r3, [r4, #16]
     b9a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     b9c:	2310      	movs	r3, #16
     b9e:	6822      	ldr	r2, [r4, #0]
     ba0:	7393      	strb	r3, [r2, #14]
     ba2:	e7e7      	b.n	b74 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     ba4:	0020      	movs	r0, r4
     ba6:	6963      	ldr	r3, [r4, #20]
     ba8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     baa:	6823      	ldr	r3, [r4, #0]
     bac:	2220      	movs	r2, #32
     bae:	739a      	strb	r2, [r3, #14]
}
     bb0:	e7e2      	b.n	b78 <_tc_interrupt_handler+0x24>
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	20000dbc 	.word	0x20000dbc

00000bb8 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     bb8:	b510      	push	{r4, lr}
     bba:	2000      	movs	r0, #0
     bbc:	4b01      	ldr	r3, [pc, #4]	; (bc4 <TC3_Handler+0xc>)
     bbe:	4798      	blx	r3
     bc0:	bd10      	pop	{r4, pc}
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	00000b55 	.word	0x00000b55

00000bc8 <TC4_Handler>:
     bc8:	b510      	push	{r4, lr}
     bca:	2001      	movs	r0, #1
     bcc:	4b01      	ldr	r3, [pc, #4]	; (bd4 <TC4_Handler+0xc>)
     bce:	4798      	blx	r3
     bd0:	bd10      	pop	{r4, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	00000b55 	.word	0x00000b55

00000bd8 <TC5_Handler>:
     bd8:	b510      	push	{r4, lr}
     bda:	2002      	movs	r0, #2
     bdc:	4b01      	ldr	r3, [pc, #4]	; (be4 <TC5_Handler+0xc>)
     bde:	4798      	blx	r3
     be0:	bd10      	pop	{r4, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	00000b55 	.word	0x00000b55

00000be8 <TC6_Handler>:
     be8:	b510      	push	{r4, lr}
     bea:	2003      	movs	r0, #3
     bec:	4b01      	ldr	r3, [pc, #4]	; (bf4 <TC6_Handler+0xc>)
     bee:	4798      	blx	r3
     bf0:	bd10      	pop	{r4, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	00000b55 	.word	0x00000b55

00000bf8 <TC7_Handler>:
     bf8:	b510      	push	{r4, lr}
     bfa:	2004      	movs	r0, #4
     bfc:	4b01      	ldr	r3, [pc, #4]	; (c04 <TC7_Handler+0xc>)
     bfe:	4798      	blx	r3
     c00:	bd10      	pop	{r4, pc}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	00000b55 	.word	0x00000b55

00000c08 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     c08:	b530      	push	{r4, r5, lr}
     c0a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     c0c:	a901      	add	r1, sp, #4
     c0e:	4b0c      	ldr	r3, [pc, #48]	; (c40 <_tc_get_inst_index+0x38>)
     c10:	000a      	movs	r2, r1
     c12:	cb32      	ldmia	r3!, {r1, r4, r5}
     c14:	c232      	stmia	r2!, {r1, r4, r5}
     c16:	cb12      	ldmia	r3!, {r1, r4}
     c18:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     c1a:	9b01      	ldr	r3, [sp, #4]
     c1c:	4298      	cmp	r0, r3
     c1e:	d00b      	beq.n	c38 <_tc_get_inst_index+0x30>
     c20:	2301      	movs	r3, #1
     c22:	a901      	add	r1, sp, #4
     c24:	009a      	lsls	r2, r3, #2
     c26:	5852      	ldr	r2, [r2, r1]
     c28:	4282      	cmp	r2, r0
     c2a:	d006      	beq.n	c3a <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     c2c:	3301      	adds	r3, #1
     c2e:	2b05      	cmp	r3, #5
     c30:	d1f8      	bne.n	c24 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     c32:	2000      	movs	r0, #0
}
     c34:	b007      	add	sp, #28
     c36:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     c38:	2300      	movs	r3, #0
			return i;
     c3a:	b2d8      	uxtb	r0, r3
     c3c:	e7fa      	b.n	c34 <_tc_get_inst_index+0x2c>
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	0000511c 	.word	0x0000511c

00000c44 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     c44:	b5f0      	push	{r4, r5, r6, r7, lr}
     c46:	b089      	sub	sp, #36	; 0x24
     c48:	0004      	movs	r4, r0
     c4a:	000d      	movs	r5, r1
     c4c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     c4e:	0008      	movs	r0, r1
     c50:	4b84      	ldr	r3, [pc, #528]	; (e64 <tc_init+0x220>)
     c52:	4798      	blx	r3
     c54:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     c56:	ab06      	add	r3, sp, #24
     c58:	221b      	movs	r2, #27
     c5a:	701a      	strb	r2, [r3, #0]
     c5c:	3201      	adds	r2, #1
     c5e:	705a      	strb	r2, [r3, #1]
     c60:	709a      	strb	r2, [r3, #2]
     c62:	3201      	adds	r2, #1
     c64:	70da      	strb	r2, [r3, #3]
     c66:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     c68:	3a13      	subs	r2, #19
     c6a:	497f      	ldr	r1, [pc, #508]	; (e68 <tc_init+0x224>)
     c6c:	3114      	adds	r1, #20
     c6e:	a803      	add	r0, sp, #12
     c70:	4b7e      	ldr	r3, [pc, #504]	; (e6c <tc_init+0x228>)
     c72:	4798      	blx	r3
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     c74:	2300      	movs	r3, #0
     c76:	60a3      	str	r3, [r4, #8]
     c78:	60e3      	str	r3, [r4, #12]
     c7a:	6123      	str	r3, [r4, #16]
     c7c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     c7e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     c80:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     c82:	00ba      	lsls	r2, r7, #2
     c84:	4b7a      	ldr	r3, [pc, #488]	; (e70 <tc_init+0x22c>)
     c86:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     c88:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     c8a:	78b3      	ldrb	r3, [r6, #2]
     c8c:	2b08      	cmp	r3, #8
     c8e:	d006      	beq.n	c9e <tc_init+0x5a>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     c90:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     c92:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     c94:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     c96:	07db      	lsls	r3, r3, #31
     c98:	d505      	bpl.n	ca6 <tc_init+0x62>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     c9a:	b009      	add	sp, #36	; 0x24
     c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     c9e:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     ca0:	07fa      	lsls	r2, r7, #31
     ca2:	d5fa      	bpl.n	c9a <tc_init+0x56>
     ca4:	e7f4      	b.n	c90 <tc_init+0x4c>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     ca6:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     ca8:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     caa:	06db      	lsls	r3, r3, #27
     cac:	d4f5      	bmi.n	c9a <tc_init+0x56>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     cae:	882b      	ldrh	r3, [r5, #0]
     cb0:	079b      	lsls	r3, r3, #30
     cb2:	d4f2      	bmi.n	c9a <tc_init+0x56>
	if (config->pwm_channel[0].enabled) {
     cb4:	7c33      	ldrb	r3, [r6, #16]
     cb6:	2b00      	cmp	r3, #0
     cb8:	d179      	bne.n	dae <tc_init+0x16a>
	if (config->pwm_channel[1].enabled) {
     cba:	7f33      	ldrb	r3, [r6, #28]
     cbc:	2b00      	cmp	r3, #0
     cbe:	d000      	beq.n	cc2 <tc_init+0x7e>
     cc0:	e081      	b.n	dc6 <tc_init+0x182>
     cc2:	496c      	ldr	r1, [pc, #432]	; (e74 <tc_init+0x230>)
     cc4:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     cc6:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     cc8:	ab03      	add	r3, sp, #12
     cca:	5ad3      	ldrh	r3, [r2, r3]
     ccc:	4303      	orrs	r3, r0
     cce:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     cd0:	78b3      	ldrb	r3, [r6, #2]
     cd2:	2b08      	cmp	r3, #8
     cd4:	d100      	bne.n	cd8 <tc_init+0x94>
     cd6:	e086      	b.n	de6 <tc_init+0x1a2>
	gclk_chan_config.source_generator = config->clock_source;
     cd8:	a901      	add	r1, sp, #4
     cda:	7833      	ldrb	r3, [r6, #0]
     cdc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     cde:	ab06      	add	r3, sp, #24
     ce0:	5ddf      	ldrb	r7, [r3, r7]
     ce2:	0038      	movs	r0, r7
     ce4:	4b64      	ldr	r3, [pc, #400]	; (e78 <tc_init+0x234>)
     ce6:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     ce8:	0038      	movs	r0, r7
     cea:	4b64      	ldr	r3, [pc, #400]	; (e7c <tc_init+0x238>)
     cec:	4798      	blx	r3
	ctrla_tmp =
     cee:	8931      	ldrh	r1, [r6, #8]
     cf0:	88b3      	ldrh	r3, [r6, #4]
     cf2:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     cf4:	78b1      	ldrb	r1, [r6, #2]
     cf6:	79b2      	ldrb	r2, [r6, #6]
     cf8:	4311      	orrs	r1, r2
	ctrla_tmp =
     cfa:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     cfc:	7873      	ldrb	r3, [r6, #1]
     cfe:	2b00      	cmp	r3, #0
     d00:	d002      	beq.n	d08 <tc_init+0xc4>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     d02:	2380      	movs	r3, #128	; 0x80
     d04:	011b      	lsls	r3, r3, #4
     d06:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d08:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d0a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d0c:	b25b      	sxtb	r3, r3
     d0e:	2b00      	cmp	r3, #0
     d10:	dbfb      	blt.n	d0a <tc_init+0xc6>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     d12:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     d14:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     d16:	1e4b      	subs	r3, r1, #1
     d18:	4199      	sbcs	r1, r3
     d1a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     d1c:	7bb3      	ldrb	r3, [r6, #14]
     d1e:	2b00      	cmp	r3, #0
     d20:	d001      	beq.n	d26 <tc_init+0xe2>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     d22:	2301      	movs	r3, #1
     d24:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d26:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d28:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d2a:	b25b      	sxtb	r3, r3
     d2c:	2b00      	cmp	r3, #0
     d2e:	dbfb      	blt.n	d28 <tc_init+0xe4>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     d30:	23ff      	movs	r3, #255	; 0xff
     d32:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     d34:	2900      	cmp	r1, #0
     d36:	d005      	beq.n	d44 <tc_init+0x100>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d38:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d3a:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     d3c:	b25b      	sxtb	r3, r3
     d3e:	2b00      	cmp	r3, #0
     d40:	dbfb      	blt.n	d3a <tc_init+0xf6>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     d42:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     d44:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     d46:	7af3      	ldrb	r3, [r6, #11]
     d48:	2b00      	cmp	r3, #0
     d4a:	d001      	beq.n	d50 <tc_init+0x10c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     d4c:	2310      	movs	r3, #16
     d4e:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     d50:	7b33      	ldrb	r3, [r6, #12]
     d52:	2b00      	cmp	r3, #0
     d54:	d001      	beq.n	d5a <tc_init+0x116>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     d56:	2320      	movs	r3, #32
     d58:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d5a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d5c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d5e:	b25b      	sxtb	r3, r3
     d60:	2b00      	cmp	r3, #0
     d62:	dbfb      	blt.n	d5c <tc_init+0x118>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     d64:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d66:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d68:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d6a:	b25b      	sxtb	r3, r3
     d6c:	2b00      	cmp	r3, #0
     d6e:	dbfb      	blt.n	d68 <tc_init+0x124>
	switch (module_inst->counter_size) {
     d70:	7923      	ldrb	r3, [r4, #4]
     d72:	2b04      	cmp	r3, #4
     d74:	d03f      	beq.n	df6 <tc_init+0x1b2>
     d76:	2b08      	cmp	r3, #8
     d78:	d05e      	beq.n	e38 <tc_init+0x1f4>
	return STATUS_ERR_INVALID_ARG;
     d7a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     d7c:	2b00      	cmp	r3, #0
     d7e:	d000      	beq.n	d82 <tc_init+0x13e>
     d80:	e78b      	b.n	c9a <tc_init+0x56>
     d82:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d84:	b25b      	sxtb	r3, r3
     d86:	2b00      	cmp	r3, #0
     d88:	dbfb      	blt.n	d82 <tc_init+0x13e>
				= config->counter_16_bit.value;
     d8a:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     d8c:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d8e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d90:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d92:	b25b      	sxtb	r3, r3
     d94:	2b00      	cmp	r3, #0
     d96:	dbfb      	blt.n	d90 <tc_init+0x14c>
					config->counter_16_bit.compare_capture_channel[0];
     d98:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     d9a:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d9c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d9e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     da0:	b25b      	sxtb	r3, r3
     da2:	2b00      	cmp	r3, #0
     da4:	dbfb      	blt.n	d9e <tc_init+0x15a>
					config->counter_16_bit.compare_capture_channel[1];
     da6:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     da8:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     daa:	2000      	movs	r0, #0
     dac:	e775      	b.n	c9a <tc_init+0x56>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dae:	a902      	add	r1, sp, #8
     db0:	2301      	movs	r3, #1
     db2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     db4:	2200      	movs	r2, #0
     db6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     db8:	7e32      	ldrb	r2, [r6, #24]
     dba:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     dbc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     dbe:	7d30      	ldrb	r0, [r6, #20]
     dc0:	4b2f      	ldr	r3, [pc, #188]	; (e80 <tc_init+0x23c>)
     dc2:	4798      	blx	r3
     dc4:	e779      	b.n	cba <tc_init+0x76>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dc6:	a902      	add	r1, sp, #8
     dc8:	2301      	movs	r3, #1
     dca:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     dcc:	2200      	movs	r2, #0
     dce:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     dd0:	3224      	adds	r2, #36	; 0x24
     dd2:	18b2      	adds	r2, r6, r2
     dd4:	7812      	ldrb	r2, [r2, #0]
     dd6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     dd8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     dda:	331f      	adds	r3, #31
     ddc:	18f3      	adds	r3, r6, r3
     dde:	7818      	ldrb	r0, [r3, #0]
     de0:	4b27      	ldr	r3, [pc, #156]	; (e80 <tc_init+0x23c>)
     de2:	4798      	blx	r3
     de4:	e76d      	b.n	cc2 <tc_init+0x7e>
     de6:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     de8:	1c7a      	adds	r2, r7, #1
     dea:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     dec:	ab03      	add	r3, sp, #12
     dee:	5ad3      	ldrh	r3, [r2, r3]
     df0:	4303      	orrs	r3, r0
     df2:	620b      	str	r3, [r1, #32]
     df4:	e770      	b.n	cd8 <tc_init+0x94>
     df6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     df8:	b25b      	sxtb	r3, r3
     dfa:	2b00      	cmp	r3, #0
     dfc:	dbfb      	blt.n	df6 <tc_init+0x1b2>
					config->counter_8_bit.value;
     dfe:	2328      	movs	r3, #40	; 0x28
     e00:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     e02:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e04:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e06:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e08:	b25b      	sxtb	r3, r3
     e0a:	2b00      	cmp	r3, #0
     e0c:	dbfb      	blt.n	e06 <tc_init+0x1c2>
					config->counter_8_bit.period;
     e0e:	2329      	movs	r3, #41	; 0x29
     e10:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     e12:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e14:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e16:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e18:	b25b      	sxtb	r3, r3
     e1a:	2b00      	cmp	r3, #0
     e1c:	dbfb      	blt.n	e16 <tc_init+0x1d2>
					config->counter_8_bit.compare_capture_channel[0];
     e1e:	232a      	movs	r3, #42	; 0x2a
     e20:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     e22:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e24:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e26:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e28:	b25b      	sxtb	r3, r3
     e2a:	2b00      	cmp	r3, #0
     e2c:	dbfb      	blt.n	e26 <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
     e2e:	232b      	movs	r3, #43	; 0x2b
     e30:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     e32:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     e34:	2000      	movs	r0, #0
     e36:	e730      	b.n	c9a <tc_init+0x56>
     e38:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e3a:	b25b      	sxtb	r3, r3
     e3c:	2b00      	cmp	r3, #0
     e3e:	dbfb      	blt.n	e38 <tc_init+0x1f4>
				= config->counter_32_bit.value;
     e40:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     e42:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e44:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e46:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e48:	b25b      	sxtb	r3, r3
     e4a:	2b00      	cmp	r3, #0
     e4c:	dbfb      	blt.n	e46 <tc_init+0x202>
			hw->COUNT32.CC[0].reg =
     e4e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     e50:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e52:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e54:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e56:	b25b      	sxtb	r3, r3
     e58:	2b00      	cmp	r3, #0
     e5a:	dbfb      	blt.n	e54 <tc_init+0x210>
					config->counter_32_bit.compare_capture_channel[1];
     e5c:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     e5e:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     e60:	2000      	movs	r0, #0
     e62:	e71a      	b.n	c9a <tc_init+0x56>
     e64:	00000c09 	.word	0x00000c09
     e68:	0000511c 	.word	0x0000511c
     e6c:	00004ff5 	.word	0x00004ff5
     e70:	20000dbc 	.word	0x20000dbc
     e74:	40000400 	.word	0x40000400
     e78:	00003291 	.word	0x00003291
     e7c:	00003205 	.word	0x00003205
     e80:	00003389 	.word	0x00003389

00000e84 <resetOutput>:



void resetOutput(uint8_t port)
{
	outputPort[port].address			=		0x00;
     e84:	4b05      	ldr	r3, [pc, #20]	; (e9c <resetOutput+0x18>)
     e86:	00c0      	lsls	r0, r0, #3
     e88:	2200      	movs	r2, #0
     e8a:	54c2      	strb	r2, [r0, r3]
	outputPort[port].readDataLength     =		0x00;
     e8c:	1818      	adds	r0, r3, r0
     e8e:	70c2      	strb	r2, [r0, #3]
	outputPort[port].writeDataLength1   =		0x00;
     e90:	7102      	strb	r2, [r0, #4]
	outputPort[port].writeDataLength2   =		0x00;
     e92:	7142      	strb	r2, [r0, #5]
	outputPort[port].initialization     =       false;
     e94:	7182      	strb	r2, [r0, #6]
	outputPort[port].currentState		=		NOTHINGCONNECTED;
     e96:	7042      	strb	r2, [r0, #1]
};
     e98:	4770      	bx	lr
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	2000108c 	.word	0x2000108c

00000ea0 <checkSetOutputs>:



void  checkSetOutputs()
{
     ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ea2:	b085      	sub	sp, #20
     ea4:	2400      	movs	r4, #0
	//delay_cycles_ms(5);
	//outputPort[3].currentState		  =		OUTPUT_LEDMATRIX;
	
	for(i=0; i<NO_OUTPUTS;i++)
	{
		outputConnected	= outputsConnected[i];
     ea6:	4f25      	ldr	r7, [pc, #148]	; (f3c <checkSetOutputs+0x9c>)
		if(outputConnected != outputPort[i].currentState)
     ea8:	4e25      	ldr	r6, [pc, #148]	; (f40 <checkSetOutputs+0xa0>)
     eaa:	e009      	b.n	ec0 <checkSetOutputs+0x20>
						}
					}
					break;
					
				case NOTHINGCONNECTED:
					switch(outputPort[i].currentState)
     eac:	00e2      	lsls	r2, r4, #3
     eae:	4b24      	ldr	r3, [pc, #144]	; (f40 <checkSetOutputs+0xa0>)
     eb0:	469c      	mov	ip, r3
     eb2:	4462      	add	r2, ip
     eb4:	7853      	ldrb	r3, [r2, #1]
     eb6:	2b03      	cmp	r3, #3
     eb8:	d037      	beq.n	f2a <checkSetOutputs+0x8a>
     eba:	3401      	adds	r4, #1
	for(i=0; i<NO_OUTPUTS;i++)
     ebc:	2c04      	cmp	r4, #4
     ebe:	d032      	beq.n	f26 <checkSetOutputs+0x86>
     ec0:	b2e5      	uxtb	r5, r4
		outputConnected	= outputsConnected[i];
     ec2:	5d39      	ldrb	r1, [r7, r4]
		if(outputConnected != outputPort[i].currentState)
     ec4:	00e3      	lsls	r3, r4, #3
     ec6:	18f3      	adds	r3, r6, r3
     ec8:	785b      	ldrb	r3, [r3, #1]
     eca:	b2db      	uxtb	r3, r3
     ecc:	4299      	cmp	r1, r3
     ece:	d0f4      	beq.n	eba <checkSetOutputs+0x1a>
			switch(outputConnected)
     ed0:	2900      	cmp	r1, #0
     ed2:	d0eb      	beq.n	eac <checkSetOutputs+0xc>
     ed4:	2903      	cmp	r1, #3
     ed6:	d1f0      	bne.n	eba <checkSetOutputs+0x1a>
					if(i == 3) // Temporary
     ed8:	2d03      	cmp	r5, #3
     eda:	d1ee      	bne.n	eba <checkSetOutputs+0x1a>
						if(outputPort[i].initialization	  == 		false)
     edc:	4b18      	ldr	r3, [pc, #96]	; (f40 <checkSetOutputs+0xa0>)
     ede:	7f9b      	ldrb	r3, [r3, #30]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d120      	bne.n	f26 <checkSetOutputs+0x86>
							outputPort[i].address 			  =		LEDMATRIX_I2C_SLAVE_ADDRESS;
     ee4:	4c16      	ldr	r4, [pc, #88]	; (f40 <checkSetOutputs+0xa0>)
     ee6:	3311      	adds	r3, #17
     ee8:	7623      	strb	r3, [r4, #24]
							outputPort[i].readDataLength     =		LEDMATRIX_READ_DATA_LENGTH;
     eea:	3501      	adds	r5, #1
     eec:	76e5      	strb	r5, [r4, #27]
							outputPort[i].writeDataLength1   =		LEDMATRIX_WRITE_DATA_LENGTH_1;
     eee:	3326      	adds	r3, #38	; 0x26
     ef0:	7723      	strb	r3, [r4, #28]
							outputPort[i].writeDataLength2   =		LEDMATRIX_WRITE_DATA_LENGTH_2;
     ef2:	2605      	movs	r6, #5
     ef4:	7766      	strb	r6, [r4, #29]
							enableI2CModule(i+1);
     ef6:	0028      	movs	r0, r5
     ef8:	4b12      	ldr	r3, [pc, #72]	; (f44 <checkSetOutputs+0xa4>)
     efa:	4798      	blx	r3
								.address     = outputPort[3].address ,
     efc:	7e23      	ldrb	r3, [r4, #24]
							struct i2c_master_packet wr_packet = {
     efe:	a901      	add	r1, sp, #4
     f00:	800b      	strh	r3, [r1, #0]
								.data_length = outputPort[3].writeDataLength1,
     f02:	7f23      	ldrb	r3, [r4, #28]
							struct i2c_master_packet wr_packet = {
     f04:	804b      	strh	r3, [r1, #2]
     f06:	4b10      	ldr	r3, [pc, #64]	; (f48 <checkSetOutputs+0xa8>)
     f08:	604b      	str	r3, [r1, #4]
     f0a:	2300      	movs	r3, #0
     f0c:	720b      	strb	r3, [r1, #8]
     f0e:	724b      	strb	r3, [r1, #9]
     f10:	728b      	strb	r3, [r1, #10]
							I2CWrite((i+1) , &wr_packet);
     f12:	0028      	movs	r0, r5
     f14:	4b0d      	ldr	r3, [pc, #52]	; (f4c <checkSetOutputs+0xac>)
     f16:	4798      	blx	r3
							delay_cycles_ms(5);
     f18:	0030      	movs	r0, r6
     f1a:	4b0d      	ldr	r3, [pc, #52]	; (f50 <checkSetOutputs+0xb0>)
     f1c:	4798      	blx	r3
							outputPort[i].initialization	  =		true;
     f1e:	2301      	movs	r3, #1
     f20:	77a3      	strb	r3, [r4, #30]
							outputPort[i].currentState		  =		OUTPUT_LEDMATRIX;
     f22:	3302      	adds	r3, #2
     f24:	7663      	strb	r3, [r4, #25]
		}
		
	}
	
	
}
     f26:	b005      	add	sp, #20
     f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
							resetOutput(i);
     f2a:	0028      	movs	r0, r5
     f2c:	4b09      	ldr	r3, [pc, #36]	; (f54 <checkSetOutputs+0xb4>)
     f2e:	4798      	blx	r3
							disableI2CModule(i+1);
     f30:	3501      	adds	r5, #1
     f32:	b2e8      	uxtb	r0, r5
     f34:	4b08      	ldr	r3, [pc, #32]	; (f58 <checkSetOutputs+0xb8>)
     f36:	4798      	blx	r3
							break;
     f38:	e7bf      	b.n	eba <checkSetOutputs+0x1a>
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	20000f2c 	.word	0x20000f2c
     f40:	2000108c 	.word	0x2000108c
     f44:	000011cd 	.word	0x000011cd
     f48:	20000000 	.word	0x20000000
     f4c:	00001021 	.word	0x00001021
     f50:	000016b9 	.word	0x000016b9
     f54:	00000e85 	.word	0x00000e85
     f58:	00001331 	.word	0x00001331

00000f5c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     f5c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     f5e:	2207      	movs	r2, #7
     f60:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     f62:	421a      	tst	r2, r3
     f64:	d1fc      	bne.n	f60 <_i2c_master_wait_for_sync+0x4>
}
     f66:	4770      	bx	lr

00000f68 <i2c_read_complete_callback_1>:
	}
}

void i2c_read_complete_callback_1(struct i2c_master_module *const module)
{
	outputPort[0].I2CStatus = IDLE_MODE;
     f68:	2201      	movs	r2, #1
     f6a:	4b01      	ldr	r3, [pc, #4]	; (f70 <i2c_read_complete_callback_1+0x8>)
     f6c:	71da      	strb	r2, [r3, #7]
}
     f6e:	4770      	bx	lr
     f70:	2000108c 	.word	0x2000108c

00000f74 <i2c_read_complete_callback_2>:

void i2c_read_complete_callback_2(struct i2c_master_module *const module)
{
	outputPort[1].I2CStatus = IDLE_MODE;
     f74:	2201      	movs	r2, #1
     f76:	4b01      	ldr	r3, [pc, #4]	; (f7c <i2c_read_complete_callback_2+0x8>)
     f78:	73da      	strb	r2, [r3, #15]
}
     f7a:	4770      	bx	lr
     f7c:	2000108c 	.word	0x2000108c

00000f80 <i2c_read_complete_callback_3>:

void i2c_read_complete_callback_3(struct i2c_master_module *const module)
{
	outputPort[2].I2CStatus = IDLE_MODE;
     f80:	2201      	movs	r2, #1
     f82:	4b01      	ldr	r3, [pc, #4]	; (f88 <i2c_read_complete_callback_3+0x8>)
     f84:	75da      	strb	r2, [r3, #23]
}
     f86:	4770      	bx	lr
     f88:	2000108c 	.word	0x2000108c

00000f8c <i2c_write_complete_callback_1>:
	rd_packet_1.address     = outputPort[0].address;
	rd_packet_1.data_length = outputPort[0].readDataLength;
	rd_packet_1.data        = rd_buffer_1;
	i2c_master_read_packet_job(&i2c_master_instance_1,&rd_packet_1);
	*/
	outputPort[0].I2CStatus = IDLE_MODE;
     f8c:	2201      	movs	r2, #1
     f8e:	4b01      	ldr	r3, [pc, #4]	; (f94 <i2c_write_complete_callback_1+0x8>)
     f90:	71da      	strb	r2, [r3, #7]
}
     f92:	4770      	bx	lr
     f94:	2000108c 	.word	0x2000108c

00000f98 <i2c_write_complete_callback_2>:
	rd_packet_2.address     = outputPort[1].address;
	rd_packet_2.data_length = outputPort[1].readDataLength;
	rd_packet_2.data        = rd_buffer_2;
	i2c_master_read_packet_job(&i2c_master_instance_2,&rd_packet_2);
	*/
	outputPort[1].I2CStatus = IDLE_MODE;
     f98:	2201      	movs	r2, #1
     f9a:	4b01      	ldr	r3, [pc, #4]	; (fa0 <i2c_write_complete_callback_2+0x8>)
     f9c:	73da      	strb	r2, [r3, #15]
}
     f9e:	4770      	bx	lr
     fa0:	2000108c 	.word	0x2000108c

00000fa4 <i2c_write_complete_callback_3>:
	rd_packet_3.address     = outputPort[2].address;
	rd_packet_3.data_length = outputPort[2].readDataLength;
	rd_packet_3.data        = rd_buffer_3;
	i2c_master_read_packet_job(&i2c_master_instance_3,&rd_packet_3);
	*/
	outputPort[2].I2CStatus = IDLE_MODE;
     fa4:	2201      	movs	r2, #1
     fa6:	4b01      	ldr	r3, [pc, #4]	; (fac <i2c_write_complete_callback_3+0x8>)
     fa8:	75da      	strb	r2, [r3, #23]
}
     faa:	4770      	bx	lr
     fac:	2000108c 	.word	0x2000108c

00000fb0 <i2c_write_complete_callback_4>:
	rd_packet_4.data_length = outputPort[3].readDataLength;
	rd_packet_4.data        = rd_buffer_4;
	i2c_master_read_packet_job(&i2c_master_instance_4,&rd_packet_4);
	*/
	
	outputPort[3].I2CStatus = IDLE_MODE;
     fb0:	2201      	movs	r2, #1
     fb2:	4b01      	ldr	r3, [pc, #4]	; (fb8 <i2c_write_complete_callback_4+0x8>)
     fb4:	77da      	strb	r2, [r3, #31]
}
     fb6:	4770      	bx	lr
     fb8:	2000108c 	.word	0x2000108c

00000fbc <I2CRead>:
{
     fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fbe:	000d      	movs	r5, r1
	switch(instanceNo)
     fc0:	2802      	cmp	r0, #2
     fc2:	d017      	beq.n	ff4 <I2CRead+0x38>
     fc4:	d910      	bls.n	fe8 <I2CRead+0x2c>
     fc6:	2803      	cmp	r0, #3
     fc8:	d018      	beq.n	ffc <I2CRead+0x40>
     fca:	2804      	cmp	r0, #4
     fcc:	d111      	bne.n	ff2 <I2CRead+0x36>
     fce:	4c0d      	ldr	r4, [pc, #52]	; (1004 <I2CRead+0x48>)
			while (i2c_master_read_packet_wait(&i2c_master_instance_4, rd_packet) !=STATUS_OK) {
     fd0:	4e0d      	ldr	r6, [pc, #52]	; (1008 <I2CRead+0x4c>)
     fd2:	4f0e      	ldr	r7, [pc, #56]	; (100c <I2CRead+0x50>)
     fd4:	0029      	movs	r1, r5
     fd6:	0030      	movs	r0, r6
     fd8:	47b8      	blx	r7
     fda:	2800      	cmp	r0, #0
     fdc:	d009      	beq.n	ff2 <I2CRead+0x36>
     fde:	3c01      	subs	r4, #1
     fe0:	b2a4      	uxth	r4, r4
				if (timeout++ == TIMEOUT) {
     fe2:	2c00      	cmp	r4, #0
     fe4:	d1f6      	bne.n	fd4 <I2CRead+0x18>
     fe6:	e004      	b.n	ff2 <I2CRead+0x36>
	switch(instanceNo)
     fe8:	2801      	cmp	r0, #1
     fea:	d102      	bne.n	ff2 <I2CRead+0x36>
			i2c_master_read_packet_job(&i2c_master_instance_1, rd_packet);
     fec:	4808      	ldr	r0, [pc, #32]	; (1010 <I2CRead+0x54>)
     fee:	4b09      	ldr	r3, [pc, #36]	; (1014 <I2CRead+0x58>)
     ff0:	4798      	blx	r3
}
     ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_master_read_packet_job(&i2c_master_instance_2, rd_packet);
     ff4:	4808      	ldr	r0, [pc, #32]	; (1018 <I2CRead+0x5c>)
     ff6:	4b07      	ldr	r3, [pc, #28]	; (1014 <I2CRead+0x58>)
     ff8:	4798      	blx	r3
			break;
     ffa:	e7fa      	b.n	ff2 <I2CRead+0x36>
			i2c_master_read_packet_job(&i2c_master_instance_3, rd_packet);
     ffc:	4807      	ldr	r0, [pc, #28]	; (101c <I2CRead+0x60>)
     ffe:	4b05      	ldr	r3, [pc, #20]	; (1014 <I2CRead+0x58>)
    1000:	4798      	blx	r3
			break;
    1002:	e7f6      	b.n	ff2 <I2CRead+0x36>
    1004:	000003e9 	.word	0x000003e9
    1008:	20000e50 	.word	0x20000e50
    100c:	00000635 	.word	0x00000635
    1010:	20000e10 	.word	0x20000e10
    1014:	00000871 	.word	0x00000871
    1018:	20000dd0 	.word	0x20000dd0
    101c:	20000e78 	.word	0x20000e78

00001020 <I2CWrite>:
{
    1020:	b500      	push	{lr}
    1022:	b083      	sub	sp, #12
	volatile uint32_t err_code = 0;
    1024:	2300      	movs	r3, #0
    1026:	9301      	str	r3, [sp, #4]
	switch(instanceNo)
    1028:	2802      	cmp	r0, #2
    102a:	d010      	beq.n	104e <I2CWrite+0x2e>
    102c:	d908      	bls.n	1040 <I2CWrite+0x20>
    102e:	2803      	cmp	r0, #3
    1030:	d011      	beq.n	1056 <I2CWrite+0x36>
    1032:	2804      	cmp	r0, #4
    1034:	d109      	bne.n	104a <I2CWrite+0x2a>
			err_code = i2c_master_write_packet_job(&i2c_master_instance_4, wr_packet);
    1036:	480a      	ldr	r0, [pc, #40]	; (1060 <I2CWrite+0x40>)
    1038:	4b0a      	ldr	r3, [pc, #40]	; (1064 <I2CWrite+0x44>)
    103a:	4798      	blx	r3
    103c:	9001      	str	r0, [sp, #4]
}
    103e:	e004      	b.n	104a <I2CWrite+0x2a>
	switch(instanceNo)
    1040:	2801      	cmp	r0, #1
    1042:	d102      	bne.n	104a <I2CWrite+0x2a>
			 i2c_master_write_packet_job(&i2c_master_instance_1, wr_packet);
    1044:	4808      	ldr	r0, [pc, #32]	; (1068 <I2CWrite+0x48>)
    1046:	4b07      	ldr	r3, [pc, #28]	; (1064 <I2CWrite+0x44>)
    1048:	4798      	blx	r3
}
    104a:	b003      	add	sp, #12
    104c:	bd00      	pop	{pc}
			i2c_master_write_packet_job(&i2c_master_instance_2, wr_packet);
    104e:	4807      	ldr	r0, [pc, #28]	; (106c <I2CWrite+0x4c>)
    1050:	4b04      	ldr	r3, [pc, #16]	; (1064 <I2CWrite+0x44>)
    1052:	4798      	blx	r3
			break;
    1054:	e7f9      	b.n	104a <I2CWrite+0x2a>
			i2c_master_write_packet_job(&i2c_master_instance_3, wr_packet);
    1056:	4806      	ldr	r0, [pc, #24]	; (1070 <I2CWrite+0x50>)
    1058:	4b02      	ldr	r3, [pc, #8]	; (1064 <I2CWrite+0x44>)
    105a:	4798      	blx	r3
			break;
    105c:	e7f5      	b.n	104a <I2CWrite+0x2a>
    105e:	46c0      	nop			; (mov r8, r8)
    1060:	20000e50 	.word	0x20000e50
    1064:	00000895 	.word	0x00000895
    1068:	20000e10 	.word	0x20000e10
    106c:	20000dd0 	.word	0x20000dd0
    1070:	20000e78 	.word	0x20000e78

00001074 <initializeI2CModules>:
{
	rewrite = true;
}
*/
void initializeI2CModules()
{
    1074:	b530      	push	{r4, r5, lr}
    1076:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
    1078:	ab01      	add	r3, sp, #4
    107a:	22c8      	movs	r2, #200	; 0xc8
    107c:	0052      	lsls	r2, r2, #1
    107e:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1080:	4a38      	ldr	r2, [pc, #224]	; (1164 <initializeI2CModules+0xf0>)
    1082:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1084:	2200      	movs	r2, #0
    1086:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1088:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    108a:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    108c:	2180      	movs	r1, #128	; 0x80
    108e:	0389      	lsls	r1, r1, #14
    1090:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    1092:	2101      	movs	r1, #1
    1094:	4249      	negs	r1, r1
    1096:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    1098:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    109a:	3125      	adds	r1, #37	; 0x25
    109c:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    109e:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    10a0:	3108      	adds	r1, #8
    10a2:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    10a4:	3101      	adds	r1, #1
    10a6:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    10a8:	3101      	adds	r1, #1
    10aa:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    10ac:	32d7      	adds	r2, #215	; 0xd7
    10ae:	861a      	strh	r2, [r3, #48]	; 0x30
	uint16_t timeout = 0;
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	
	//Output 1 
	config_i2c_master.pinmux_pad0    = OUTPUT1_I2C_SDA;
    10b0:	4a2d      	ldr	r2, [pc, #180]	; (1168 <initializeI2CModules+0xf4>)
    10b2:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT1_I2C_SCL;
    10b4:	4a2d      	ldr	r2, [pc, #180]	; (116c <initializeI2CModules+0xf8>)
    10b6:	9209      	str	r2, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_1,  CONF_I2C_MASTER_MODULE_OUTPUT_1, &config_i2c_master)   != STATUS_OK);
    10b8:	4d2d      	ldr	r5, [pc, #180]	; (1170 <initializeI2CModules+0xfc>)
    10ba:	4c2e      	ldr	r4, [pc, #184]	; (1174 <initializeI2CModules+0x100>)
    10bc:	aa01      	add	r2, sp, #4
    10be:	492e      	ldr	r1, [pc, #184]	; (1178 <initializeI2CModules+0x104>)
    10c0:	0028      	movs	r0, r5
    10c2:	47a0      	blx	r4
    10c4:	2800      	cmp	r0, #0
    10c6:	d1f9      	bne.n	10bc <initializeI2CModules+0x48>
	i2c_master_register_callback(&i2c_master_instance_1, i2c_write_complete_callback_1,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    10c8:	4d29      	ldr	r5, [pc, #164]	; (1170 <initializeI2CModules+0xfc>)
    10ca:	2200      	movs	r2, #0
    10cc:	492b      	ldr	r1, [pc, #172]	; (117c <initializeI2CModules+0x108>)
    10ce:	0028      	movs	r0, r5
    10d0:	4c2b      	ldr	r4, [pc, #172]	; (1180 <initializeI2CModules+0x10c>)
    10d2:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_1, i2c_read_complete_callback_1,I2C_MASTER_CALLBACK_READ_COMPLETE);
    10d4:	2201      	movs	r2, #1
    10d6:	492b      	ldr	r1, [pc, #172]	; (1184 <initializeI2CModules+0x110>)
    10d8:	0028      	movs	r0, r5
    10da:	47a0      	blx	r4
	
	//Output 2
	config_i2c_master.pinmux_pad0    = OUTPUT2_I2C_SDA;
    10dc:	4b2a      	ldr	r3, [pc, #168]	; (1188 <initializeI2CModules+0x114>)
    10de:	9308      	str	r3, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT2_I2C_SCL;
    10e0:	4b2a      	ldr	r3, [pc, #168]	; (118c <initializeI2CModules+0x118>)
    10e2:	9309      	str	r3, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_2,  CONF_I2C_MASTER_MODULE_OUTPUT_2, &config_i2c_master)   != STATUS_OK);
    10e4:	4d2a      	ldr	r5, [pc, #168]	; (1190 <initializeI2CModules+0x11c>)
    10e6:	4c23      	ldr	r4, [pc, #140]	; (1174 <initializeI2CModules+0x100>)
    10e8:	aa01      	add	r2, sp, #4
    10ea:	492a      	ldr	r1, [pc, #168]	; (1194 <initializeI2CModules+0x120>)
    10ec:	0028      	movs	r0, r5
    10ee:	47a0      	blx	r4
    10f0:	2800      	cmp	r0, #0
    10f2:	d1f9      	bne.n	10e8 <initializeI2CModules+0x74>
	i2c_master_register_callback(&i2c_master_instance_2, i2c_write_complete_callback_2, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    10f4:	4d26      	ldr	r5, [pc, #152]	; (1190 <initializeI2CModules+0x11c>)
    10f6:	2200      	movs	r2, #0
    10f8:	4927      	ldr	r1, [pc, #156]	; (1198 <initializeI2CModules+0x124>)
    10fa:	0028      	movs	r0, r5
    10fc:	4c20      	ldr	r4, [pc, #128]	; (1180 <initializeI2CModules+0x10c>)
    10fe:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_2, i2c_read_complete_callback_2,  I2C_MASTER_CALLBACK_READ_COMPLETE);
    1100:	2201      	movs	r2, #1
    1102:	4926      	ldr	r1, [pc, #152]	; (119c <initializeI2CModules+0x128>)
    1104:	0028      	movs	r0, r5
    1106:	47a0      	blx	r4
	
	//Output 3
	config_i2c_master.pinmux_pad0    = OUTPUT3_I2C_SDA;
    1108:	4b25      	ldr	r3, [pc, #148]	; (11a0 <initializeI2CModules+0x12c>)
    110a:	9308      	str	r3, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT3_I2C_SCL;
    110c:	4b25      	ldr	r3, [pc, #148]	; (11a4 <initializeI2CModules+0x130>)
    110e:	9309      	str	r3, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_3,  CONF_I2C_MASTER_MODULE_OUTPUT_3, &config_i2c_master)   != STATUS_OK);
    1110:	4d25      	ldr	r5, [pc, #148]	; (11a8 <initializeI2CModules+0x134>)
    1112:	4c18      	ldr	r4, [pc, #96]	; (1174 <initializeI2CModules+0x100>)
    1114:	aa01      	add	r2, sp, #4
    1116:	4925      	ldr	r1, [pc, #148]	; (11ac <initializeI2CModules+0x138>)
    1118:	0028      	movs	r0, r5
    111a:	47a0      	blx	r4
    111c:	2800      	cmp	r0, #0
    111e:	d1f9      	bne.n	1114 <initializeI2CModules+0xa0>
	i2c_master_register_callback(&i2c_master_instance_3, i2c_write_complete_callback_3,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1120:	4d21      	ldr	r5, [pc, #132]	; (11a8 <initializeI2CModules+0x134>)
    1122:	2200      	movs	r2, #0
    1124:	4922      	ldr	r1, [pc, #136]	; (11b0 <initializeI2CModules+0x13c>)
    1126:	0028      	movs	r0, r5
    1128:	4c15      	ldr	r4, [pc, #84]	; (1180 <initializeI2CModules+0x10c>)
    112a:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_3, i2c_read_complete_callback_3,  I2C_MASTER_CALLBACK_READ_COMPLETE);
    112c:	2201      	movs	r2, #1
    112e:	4921      	ldr	r1, [pc, #132]	; (11b4 <initializeI2CModules+0x140>)
    1130:	0028      	movs	r0, r5
    1132:	47a0      	blx	r4
	
	//Output 4
	config_i2c_master.pinmux_pad0    = OUTPUT4_I2C_SDA;
    1134:	ab01      	add	r3, sp, #4
    1136:	4a20      	ldr	r2, [pc, #128]	; (11b8 <initializeI2CModules+0x144>)
    1138:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT4_I2C_SCL;
    113a:	4a20      	ldr	r2, [pc, #128]	; (11bc <initializeI2CModules+0x148>)
    113c:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
    113e:	22fa      	movs	r2, #250	; 0xfa
    1140:	0092      	lsls	r2, r2, #2
    1142:	82da      	strh	r2, [r3, #22]
	//config_i2c_master.generator_source = GCLK_GENERATOR_0;
	while(i2c_master_init(&i2c_master_instance_4,  CONF_I2C_MASTER_MODULE_OUTPUT_4, &config_i2c_master)   != STATUS_OK);
    1144:	4d1e      	ldr	r5, [pc, #120]	; (11c0 <initializeI2CModules+0x14c>)
    1146:	4c0b      	ldr	r4, [pc, #44]	; (1174 <initializeI2CModules+0x100>)
    1148:	aa01      	add	r2, sp, #4
    114a:	491e      	ldr	r1, [pc, #120]	; (11c4 <initializeI2CModules+0x150>)
    114c:	0028      	movs	r0, r5
    114e:	47a0      	blx	r4
    1150:	2800      	cmp	r0, #0
    1152:	d1f9      	bne.n	1148 <initializeI2CModules+0xd4>
	i2c_master_register_callback(&i2c_master_instance_4, i2c_write_complete_callback_4, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1154:	2200      	movs	r2, #0
    1156:	491c      	ldr	r1, [pc, #112]	; (11c8 <initializeI2CModules+0x154>)
    1158:	4819      	ldr	r0, [pc, #100]	; (11c0 <initializeI2CModules+0x14c>)
    115a:	4b09      	ldr	r3, [pc, #36]	; (1180 <initializeI2CModules+0x10c>)
    115c:	4798      	blx	r3
			//	break;
			//}
		//}
	
	
}
    115e:	b00f      	add	sp, #60	; 0x3c
    1160:	bd30      	pop	{r4, r5, pc}
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	00000d48 	.word	0x00000d48
    1168:	00080002 	.word	0x00080002
    116c:	00090002 	.word	0x00090002
    1170:	20000e10 	.word	0x20000e10
    1174:	00000121 	.word	0x00000121
    1178:	42000800 	.word	0x42000800
    117c:	00000f8d 	.word	0x00000f8d
    1180:	00000859 	.word	0x00000859
    1184:	00000f69 	.word	0x00000f69
    1188:	000c0002 	.word	0x000c0002
    118c:	000d0002 	.word	0x000d0002
    1190:	20000dd0 	.word	0x20000dd0
    1194:	42001000 	.word	0x42001000
    1198:	00000f99 	.word	0x00000f99
    119c:	00000f75 	.word	0x00000f75
    11a0:	00100002 	.word	0x00100002
    11a4:	00110002 	.word	0x00110002
    11a8:	20000e78 	.word	0x20000e78
    11ac:	42000c00 	.word	0x42000c00
    11b0:	00000fa5 	.word	0x00000fa5
    11b4:	00000f81 	.word	0x00000f81
    11b8:	00160002 	.word	0x00160002
    11bc:	00170002 	.word	0x00170002
    11c0:	20000e50 	.word	0x20000e50
    11c4:	42001400 	.word	0x42001400
    11c8:	00000fb1 	.word	0x00000fb1

000011cc <enableI2CModule>:

void enableI2CModule(uint8_t port)
{
    11cc:	b570      	push	{r4, r5, r6, lr}
	switch(port)
    11ce:	2802      	cmp	r0, #2
    11d0:	d051      	beq.n	1276 <enableI2CModule+0xaa>
    11d2:	d927      	bls.n	1224 <enableI2CModule+0x58>
    11d4:	2803      	cmp	r0, #3
    11d6:	d100      	bne.n	11da <enableI2CModule+0xe>
    11d8:	e074      	b.n	12c4 <enableI2CModule+0xf8>
    11da:	2804      	cmp	r0, #4
    11dc:	d14a      	bne.n	1274 <enableI2CModule+0xa8>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11de:	4d4d      	ldr	r5, [pc, #308]	; (1314 <enableI2CModule+0x148>)
    11e0:	682c      	ldr	r4, [r5, #0]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    11e2:	0028      	movs	r0, r5
    11e4:	4b4c      	ldr	r3, [pc, #304]	; (1318 <enableI2CModule+0x14c>)
    11e6:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    11e8:	6823      	ldr	r3, [r4, #0]
    11ea:	2202      	movs	r2, #2
    11ec:	4313      	orrs	r3, r2
    11ee:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    11f0:	6828      	ldr	r0, [r5, #0]
    11f2:	4b4a      	ldr	r3, [pc, #296]	; (131c <enableI2CModule+0x150>)
    11f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    11f6:	231f      	movs	r3, #31
    11f8:	4018      	ands	r0, r3
    11fa:	3b1e      	subs	r3, #30
    11fc:	4083      	lsls	r3, r0
    11fe:	4a48      	ldr	r2, [pc, #288]	; (1320 <enableI2CModule+0x154>)
    1200:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1202:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1204:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1206:	2110      	movs	r1, #16
    1208:	8b62      	ldrh	r2, [r4, #26]
    120a:	420a      	tst	r2, r1
    120c:	d104      	bne.n	1218 <enableI2CModule+0x4c>
		timeout_counter++;
    120e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1210:	4283      	cmp	r3, r0
    1212:	d3f9      	bcc.n	1208 <enableI2CModule+0x3c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1214:	2310      	movs	r3, #16
    1216:	8363      	strh	r3, [r4, #26]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1218:	4a3e      	ldr	r2, [pc, #248]	; (1314 <enableI2CModule+0x148>)
    121a:	7e53      	ldrb	r3, [r2, #25]
    121c:	2101      	movs	r1, #1
    121e:	430b      	orrs	r3, r1
    1220:	7653      	strb	r3, [r2, #25]
			
		default:
			break;
	}
	
}
    1222:	e027      	b.n	1274 <enableI2CModule+0xa8>
	switch(port)
    1224:	2801      	cmp	r0, #1
    1226:	d125      	bne.n	1274 <enableI2CModule+0xa8>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1228:	4d3e      	ldr	r5, [pc, #248]	; (1324 <enableI2CModule+0x158>)
    122a:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    122c:	0028      	movs	r0, r5
    122e:	4b3a      	ldr	r3, [pc, #232]	; (1318 <enableI2CModule+0x14c>)
    1230:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1232:	6823      	ldr	r3, [r4, #0]
    1234:	2202      	movs	r2, #2
    1236:	4313      	orrs	r3, r2
    1238:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    123a:	6828      	ldr	r0, [r5, #0]
    123c:	4b37      	ldr	r3, [pc, #220]	; (131c <enableI2CModule+0x150>)
    123e:	4798      	blx	r3
    1240:	231f      	movs	r3, #31
    1242:	4018      	ands	r0, r3
    1244:	3b1e      	subs	r3, #30
    1246:	4083      	lsls	r3, r0
    1248:	4a35      	ldr	r2, [pc, #212]	; (1320 <enableI2CModule+0x154>)
    124a:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    124c:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    124e:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1250:	2110      	movs	r1, #16
    1252:	8b62      	ldrh	r2, [r4, #26]
    1254:	420a      	tst	r2, r1
    1256:	d104      	bne.n	1262 <enableI2CModule+0x96>
		timeout_counter++;
    1258:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    125a:	4283      	cmp	r3, r0
    125c:	d3f9      	bcc.n	1252 <enableI2CModule+0x86>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    125e:	2310      	movs	r3, #16
    1260:	8363      	strh	r3, [r4, #26]
    1262:	4b30      	ldr	r3, [pc, #192]	; (1324 <enableI2CModule+0x158>)
    1264:	7e5a      	ldrb	r2, [r3, #25]
    1266:	2101      	movs	r1, #1
    1268:	430a      	orrs	r2, r1
    126a:	765a      	strb	r2, [r3, #25]
    126c:	7e5a      	ldrb	r2, [r3, #25]
    126e:	3101      	adds	r1, #1
    1270:	430a      	orrs	r2, r1
    1272:	765a      	strb	r2, [r3, #25]
}
    1274:	bd70      	pop	{r4, r5, r6, pc}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1276:	4d2c      	ldr	r5, [pc, #176]	; (1328 <enableI2CModule+0x15c>)
    1278:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    127a:	0028      	movs	r0, r5
    127c:	4b26      	ldr	r3, [pc, #152]	; (1318 <enableI2CModule+0x14c>)
    127e:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1280:	6823      	ldr	r3, [r4, #0]
    1282:	2202      	movs	r2, #2
    1284:	4313      	orrs	r3, r2
    1286:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1288:	6828      	ldr	r0, [r5, #0]
    128a:	4b24      	ldr	r3, [pc, #144]	; (131c <enableI2CModule+0x150>)
    128c:	4798      	blx	r3
    128e:	231f      	movs	r3, #31
    1290:	4018      	ands	r0, r3
    1292:	3b1e      	subs	r3, #30
    1294:	4083      	lsls	r3, r0
    1296:	4a22      	ldr	r2, [pc, #136]	; (1320 <enableI2CModule+0x154>)
    1298:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    129a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    129c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    129e:	2110      	movs	r1, #16
    12a0:	8b62      	ldrh	r2, [r4, #26]
    12a2:	420a      	tst	r2, r1
    12a4:	d104      	bne.n	12b0 <enableI2CModule+0xe4>
		timeout_counter++;
    12a6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    12a8:	4283      	cmp	r3, r0
    12aa:	d3f9      	bcc.n	12a0 <enableI2CModule+0xd4>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    12ac:	2310      	movs	r3, #16
    12ae:	8363      	strh	r3, [r4, #26]
    12b0:	4b1d      	ldr	r3, [pc, #116]	; (1328 <enableI2CModule+0x15c>)
    12b2:	7e5a      	ldrb	r2, [r3, #25]
    12b4:	2101      	movs	r1, #1
    12b6:	430a      	orrs	r2, r1
    12b8:	765a      	strb	r2, [r3, #25]
    12ba:	7e5a      	ldrb	r2, [r3, #25]
    12bc:	3101      	adds	r1, #1
    12be:	430a      	orrs	r2, r1
    12c0:	765a      	strb	r2, [r3, #25]
    12c2:	e7d7      	b.n	1274 <enableI2CModule+0xa8>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    12c4:	4d19      	ldr	r5, [pc, #100]	; (132c <enableI2CModule+0x160>)
    12c6:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    12c8:	0028      	movs	r0, r5
    12ca:	4b13      	ldr	r3, [pc, #76]	; (1318 <enableI2CModule+0x14c>)
    12cc:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    12ce:	6823      	ldr	r3, [r4, #0]
    12d0:	2202      	movs	r2, #2
    12d2:	4313      	orrs	r3, r2
    12d4:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    12d6:	6828      	ldr	r0, [r5, #0]
    12d8:	4b10      	ldr	r3, [pc, #64]	; (131c <enableI2CModule+0x150>)
    12da:	4798      	blx	r3
    12dc:	231f      	movs	r3, #31
    12de:	4018      	ands	r0, r3
    12e0:	3b1e      	subs	r3, #30
    12e2:	4083      	lsls	r3, r0
    12e4:	4a0e      	ldr	r2, [pc, #56]	; (1320 <enableI2CModule+0x154>)
    12e6:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    12e8:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    12ea:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    12ec:	2110      	movs	r1, #16
    12ee:	8b62      	ldrh	r2, [r4, #26]
    12f0:	420a      	tst	r2, r1
    12f2:	d104      	bne.n	12fe <enableI2CModule+0x132>
		timeout_counter++;
    12f4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    12f6:	4283      	cmp	r3, r0
    12f8:	d3f9      	bcc.n	12ee <enableI2CModule+0x122>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    12fa:	2310      	movs	r3, #16
    12fc:	8363      	strh	r3, [r4, #26]
    12fe:	4b0b      	ldr	r3, [pc, #44]	; (132c <enableI2CModule+0x160>)
    1300:	7e5a      	ldrb	r2, [r3, #25]
    1302:	2101      	movs	r1, #1
    1304:	430a      	orrs	r2, r1
    1306:	765a      	strb	r2, [r3, #25]
    1308:	7e5a      	ldrb	r2, [r3, #25]
    130a:	3101      	adds	r1, #1
    130c:	430a      	orrs	r2, r1
    130e:	765a      	strb	r2, [r3, #25]
    1310:	e7b0      	b.n	1274 <enableI2CModule+0xa8>
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	20000e50 	.word	0x20000e50
    1318:	00000f5d 	.word	0x00000f5d
    131c:	00001fc9 	.word	0x00001fc9
    1320:	e000e100 	.word	0xe000e100
    1324:	20000e10 	.word	0x20000e10
    1328:	20000dd0 	.word	0x20000dd0
    132c:	20000e78 	.word	0x20000e78

00001330 <disableI2CModule>:

void disableI2CModule(uint8_t port)
{
    1330:	b570      	push	{r4, r5, r6, lr}

	switch(port)
    1332:	2802      	cmp	r0, #2
    1334:	d03c      	beq.n	13b0 <disableI2CModule+0x80>
    1336:	d91e      	bls.n	1376 <disableI2CModule+0x46>
    1338:	2803      	cmp	r0, #3
    133a:	d054      	beq.n	13e6 <disableI2CModule+0xb6>
    133c:	2804      	cmp	r0, #4
    133e:	d136      	bne.n	13ae <disableI2CModule+0x7e>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1340:	4d36      	ldr	r5, [pc, #216]	; (141c <disableI2CModule+0xec>)
    1342:	682c      	ldr	r4, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1344:	0020      	movs	r0, r4
    1346:	4b36      	ldr	r3, [pc, #216]	; (1420 <disableI2CModule+0xf0>)
    1348:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    134a:	231f      	movs	r3, #31
    134c:	4018      	ands	r0, r3
    134e:	2601      	movs	r6, #1
    1350:	0031      	movs	r1, r6
    1352:	4081      	lsls	r1, r0
    1354:	3361      	adds	r3, #97	; 0x61
    1356:	4a33      	ldr	r2, [pc, #204]	; (1424 <disableI2CModule+0xf4>)
    1358:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    135a:	0028      	movs	r0, r5
    135c:	4b32      	ldr	r3, [pc, #200]	; (1428 <disableI2CModule+0xf8>)
    135e:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1360:	2383      	movs	r3, #131	; 0x83
    1362:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1364:	7623      	strb	r3, [r4, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1366:	6823      	ldr	r3, [r4, #0]
    1368:	2202      	movs	r2, #2
    136a:	4393      	bics	r3, r2
    136c:	6023      	str	r3, [r4, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as disabled */
	module->enabled_callback &= ~(1 << callback_type);
    136e:	7e6b      	ldrb	r3, [r5, #25]
    1370:	43b3      	bics	r3, r6
    1372:	766b      	strb	r3, [r5, #25]
		
		default:
			break;
	}
	
}
    1374:	e01b      	b.n	13ae <disableI2CModule+0x7e>
	switch(port)
    1376:	2801      	cmp	r0, #1
    1378:	d119      	bne.n	13ae <disableI2CModule+0x7e>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    137a:	4d2c      	ldr	r5, [pc, #176]	; (142c <disableI2CModule+0xfc>)
    137c:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    137e:	0020      	movs	r0, r4
    1380:	4b27      	ldr	r3, [pc, #156]	; (1420 <disableI2CModule+0xf0>)
    1382:	4798      	blx	r3
    1384:	231f      	movs	r3, #31
    1386:	4018      	ands	r0, r3
    1388:	2601      	movs	r6, #1
    138a:	0031      	movs	r1, r6
    138c:	4081      	lsls	r1, r0
    138e:	3361      	adds	r3, #97	; 0x61
    1390:	4a24      	ldr	r2, [pc, #144]	; (1424 <disableI2CModule+0xf4>)
    1392:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    1394:	0028      	movs	r0, r5
    1396:	4b24      	ldr	r3, [pc, #144]	; (1428 <disableI2CModule+0xf8>)
    1398:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    139a:	2383      	movs	r3, #131	; 0x83
    139c:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    139e:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    13a0:	6823      	ldr	r3, [r4, #0]
    13a2:	2202      	movs	r2, #2
    13a4:	4393      	bics	r3, r2
    13a6:	6023      	str	r3, [r4, #0]
    13a8:	7e6b      	ldrb	r3, [r5, #25]
    13aa:	43b3      	bics	r3, r6
    13ac:	766b      	strb	r3, [r5, #25]
}
    13ae:	bd70      	pop	{r4, r5, r6, pc}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13b0:	4d1f      	ldr	r5, [pc, #124]	; (1430 <disableI2CModule+0x100>)
    13b2:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    13b4:	0020      	movs	r0, r4
    13b6:	4b1a      	ldr	r3, [pc, #104]	; (1420 <disableI2CModule+0xf0>)
    13b8:	4798      	blx	r3
    13ba:	231f      	movs	r3, #31
    13bc:	4018      	ands	r0, r3
    13be:	2601      	movs	r6, #1
    13c0:	0031      	movs	r1, r6
    13c2:	4081      	lsls	r1, r0
    13c4:	3361      	adds	r3, #97	; 0x61
    13c6:	4a17      	ldr	r2, [pc, #92]	; (1424 <disableI2CModule+0xf4>)
    13c8:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    13ca:	0028      	movs	r0, r5
    13cc:	4b16      	ldr	r3, [pc, #88]	; (1428 <disableI2CModule+0xf8>)
    13ce:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    13d0:	2383      	movs	r3, #131	; 0x83
    13d2:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    13d4:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    13d6:	6823      	ldr	r3, [r4, #0]
    13d8:	2202      	movs	r2, #2
    13da:	4393      	bics	r3, r2
    13dc:	6023      	str	r3, [r4, #0]
    13de:	7e6b      	ldrb	r3, [r5, #25]
    13e0:	43b3      	bics	r3, r6
    13e2:	766b      	strb	r3, [r5, #25]
    13e4:	e7e3      	b.n	13ae <disableI2CModule+0x7e>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13e6:	4d13      	ldr	r5, [pc, #76]	; (1434 <disableI2CModule+0x104>)
    13e8:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    13ea:	0020      	movs	r0, r4
    13ec:	4b0c      	ldr	r3, [pc, #48]	; (1420 <disableI2CModule+0xf0>)
    13ee:	4798      	blx	r3
    13f0:	231f      	movs	r3, #31
    13f2:	4018      	ands	r0, r3
    13f4:	2601      	movs	r6, #1
    13f6:	0031      	movs	r1, r6
    13f8:	4081      	lsls	r1, r0
    13fa:	3361      	adds	r3, #97	; 0x61
    13fc:	4a09      	ldr	r2, [pc, #36]	; (1424 <disableI2CModule+0xf4>)
    13fe:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    1400:	0028      	movs	r0, r5
    1402:	4b09      	ldr	r3, [pc, #36]	; (1428 <disableI2CModule+0xf8>)
    1404:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1406:	2383      	movs	r3, #131	; 0x83
    1408:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    140a:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    140c:	6823      	ldr	r3, [r4, #0]
    140e:	2202      	movs	r2, #2
    1410:	4393      	bics	r3, r2
    1412:	6023      	str	r3, [r4, #0]
    1414:	7e6b      	ldrb	r3, [r5, #25]
    1416:	43b3      	bics	r3, r6
    1418:	766b      	strb	r3, [r5, #25]
    141a:	e7c8      	b.n	13ae <disableI2CModule+0x7e>
    141c:	20000e50 	.word	0x20000e50
    1420:	00001fc9 	.word	0x00001fc9
    1424:	e000e100 	.word	0xe000e100
    1428:	00000f5d 	.word	0x00000f5d
    142c:	20000e10 	.word	0x20000e10
    1430:	20000dd0 	.word	0x20000dd0
    1434:	20000e78 	.word	0x20000e78

00001438 <checkSendOutputs>:
static bool timerOutput = false;

extern volatile struct outputPorts  outputPort[4];

void checkSendOutputs()
{
    1438:	b510      	push	{r4, lr}
    143a:	b084      	sub	sp, #16
	uint8_t i =0;
	uint8_t temp =0;
	static uint8_t rd_buffer[20] ;
	
	if(readySendI2CRead == true)
    143c:	4b1f      	ldr	r3, [pc, #124]	; (14bc <checkSendOutputs+0x84>)
    143e:	781b      	ldrb	r3, [r3, #0]
    1440:	2b00      	cmp	r3, #0
    1442:	d039      	beq.n	14b8 <checkSendOutputs+0x80>
	{
		readySendI2CRead = false;
    1444:	2200      	movs	r2, #0
    1446:	4b1d      	ldr	r3, [pc, #116]	; (14bc <checkSendOutputs+0x84>)
    1448:	701a      	strb	r2, [r3, #0]
    144a:	2300      	movs	r3, #0
		for(i=0;i<NO_OUTPUTS;i++)
		{
			if(outputPort[i].currentState != NOTHINGCONNECTED)
    144c:	491c      	ldr	r1, [pc, #112]	; (14c0 <checkSendOutputs+0x88>)
			{
				switch(outputPort[i].currentState)
    144e:	0008      	movs	r0, r1
    1450:	e002      	b.n	1458 <checkSendOutputs+0x20>
    1452:	3301      	adds	r3, #1
		for(i=0;i<NO_OUTPUTS;i++)
    1454:	2b04      	cmp	r3, #4
    1456:	d02f      	beq.n	14b8 <checkSendOutputs+0x80>
			if(outputPort[i].currentState != NOTHINGCONNECTED)
    1458:	00da      	lsls	r2, r3, #3
    145a:	188a      	adds	r2, r1, r2
    145c:	7852      	ldrb	r2, [r2, #1]
    145e:	2a00      	cmp	r2, #0
    1460:	d0f7      	beq.n	1452 <checkSendOutputs+0x1a>
				switch(outputPort[i].currentState)
    1462:	00da      	lsls	r2, r3, #3
    1464:	1882      	adds	r2, r0, r2
    1466:	7852      	ldrb	r2, [r2, #1]
    1468:	2a03      	cmp	r2, #3
    146a:	d1f2      	bne.n	1452 <checkSendOutputs+0x1a>
				{
					case OUTPUT_LEDMATRIX:
						
						//Read the dial values regularly 
						if(i == 3)
    146c:	b2da      	uxtb	r2, r3
    146e:	2a03      	cmp	r2, #3
    1470:	d1ef      	bne.n	1452 <checkSendOutputs+0x1a>
						{
							struct i2c_master_packet rd_packet = {
								.address		 = outputPort[i].address, 
    1472:	4b13      	ldr	r3, [pc, #76]	; (14c0 <checkSendOutputs+0x88>)
    1474:	7e1a      	ldrb	r2, [r3, #24]
							struct i2c_master_packet rd_packet = {
    1476:	a901      	add	r1, sp, #4
    1478:	800a      	strh	r2, [r1, #0]
								.data_length	 = outputPort[i].readDataLength,
    147a:	7edb      	ldrb	r3, [r3, #27]
							struct i2c_master_packet rd_packet = {
    147c:	804b      	strh	r3, [r1, #2]
    147e:	4c11      	ldr	r4, [pc, #68]	; (14c4 <checkSendOutputs+0x8c>)
    1480:	604c      	str	r4, [r1, #4]
    1482:	2300      	movs	r3, #0
    1484:	720b      	strb	r3, [r1, #8]
    1486:	724b      	strb	r3, [r1, #9]
    1488:	728b      	strb	r3, [r1, #10]
								.high_speed      = false,
								.hs_master_code  = 0x0,
							};
							
							//outputPort[i].I2CStatus =	BUSY_MODE; 
							I2CRead((i+1) , &rd_packet);
    148a:	2004      	movs	r0, #4
    148c:	4b0e      	ldr	r3, [pc, #56]	; (14c8 <checkSendOutputs+0x90>)
    148e:	4798      	blx	r3
							sensorOutputs[20 + i*5]		=	 i + 4;
    1490:	490e      	ldr	r1, [pc, #56]	; (14cc <checkSendOutputs+0x94>)
    1492:	2207      	movs	r2, #7
    1494:	2323      	movs	r3, #35	; 0x23
    1496:	54ca      	strb	r2, [r1, r3]
							temp                        =    rd_buffer[0] ;
							rd_buffer[0]                =    rd_buffer[1] | ((temp<<4)& 0xF0) ;
    1498:	7822      	ldrb	r2, [r4, #0]
    149a:	0112      	lsls	r2, r2, #4
    149c:	7863      	ldrb	r3, [r4, #1]
    149e:	431a      	orrs	r2, r3
    14a0:	b2d2      	uxtb	r2, r2
    14a2:	7022      	strb	r2, [r4, #0]
							temp                        =    rd_buffer[2] ;
							rd_buffer[1]                =    rd_buffer[3] | ((temp<<4)& 0xF0) ;
    14a4:	78a3      	ldrb	r3, [r4, #2]
    14a6:	011b      	lsls	r3, r3, #4
    14a8:	78e0      	ldrb	r0, [r4, #3]
    14aa:	4303      	orrs	r3, r0
    14ac:	b2db      	uxtb	r3, r3
    14ae:	7063      	strb	r3, [r4, #1]
							sensorOutputs[20 + i*5 + 1] =    rd_buffer[0] ;
    14b0:	2024      	movs	r0, #36	; 0x24
    14b2:	540a      	strb	r2, [r1, r0]
							sensorOutputs[20 + i*5 + 2] = 	 rd_buffer[1] ;
    14b4:	2225      	movs	r2, #37	; 0x25
    14b6:	548b      	strb	r3, [r1, r2]
						break;
				}
			}
		}
	}
}
    14b8:	b004      	add	sp, #16
    14ba:	bd10      	pop	{r4, pc}
    14bc:	20000da4 	.word	0x20000da4
    14c0:	2000108c 	.word	0x2000108c
    14c4:	200000c4 	.word	0x200000c4
    14c8:	00000fbd 	.word	0x00000fbd
    14cc:	20000f30 	.word	0x20000f30

000014d0 <sendInfoCallback>:
	}
}

void sendInfoCallback()
{
	readySendData = true;
    14d0:	2301      	movs	r3, #1
    14d2:	4a02      	ldr	r2, [pc, #8]	; (14dc <sendInfoCallback+0xc>)
    14d4:	7013      	strb	r3, [r2, #0]
	readySendI2CRead = true;
    14d6:	4a02      	ldr	r2, [pc, #8]	; (14e0 <sendInfoCallback+0x10>)
    14d8:	7013      	strb	r3, [r2, #0]
	//usart_write_buffer_wait(&usart_instance, transmit_value ,VERSION_SET_LEN);
}
    14da:	4770      	bx	lr
    14dc:	20000da3 	.word	0x20000da3
    14e0:	20000da4 	.word	0x20000da4

000014e4 <configureTimer>:
{
    14e4:	b510      	push	{r4, lr}
    14e6:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    14e8:	aa01      	add	r2, sp, #4
    14ea:	2300      	movs	r3, #0
    14ec:	2100      	movs	r1, #0
    14ee:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    14f0:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    14f2:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    14f4:	2000      	movs	r0, #0
    14f6:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    14f8:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    14fa:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    14fc:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    14fe:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1500:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1502:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1504:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1506:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1508:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    150a:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    150c:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    150e:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1510:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0]		=		true;
    1512:	3301      	adds	r3, #1
    1514:	72d3      	strb	r3, [r2, #11]
	config_tc.counter_size						=		TC_COUNTER_SIZE_8BIT; //8
    1516:	3303      	adds	r3, #3
    1518:	7093      	strb	r3, [r2, #2]
	config_tc.clock_prescaler					=		TC_CLOCK_PRESCALER_DIV1024; //1024
    151a:	23e0      	movs	r3, #224	; 0xe0
    151c:	00db      	lsls	r3, r3, #3
    151e:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period				=		0xFF;
    1520:	21ff      	movs	r1, #255	; 0xff
    1522:	2329      	movs	r3, #41	; 0x29
    1524:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_encoder_capture, SEND_TIMER , &config_tc);
    1526:	4c08      	ldr	r4, [pc, #32]	; (1548 <configureTimer+0x64>)
    1528:	4908      	ldr	r1, [pc, #32]	; (154c <configureTimer+0x68>)
    152a:	0020      	movs	r0, r4
    152c:	4b08      	ldr	r3, [pc, #32]	; (1550 <configureTimer+0x6c>)
    152e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1530:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1532:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1534:	b25b      	sxtb	r3, r3
    1536:	2b00      	cmp	r3, #0
    1538:	dbfb      	blt.n	1532 <configureTimer+0x4e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    153a:	8813      	ldrh	r3, [r2, #0]
    153c:	2102      	movs	r1, #2
    153e:	430b      	orrs	r3, r1
    1540:	8013      	strh	r3, [r2, #0]
}
    1542:	b00e      	add	sp, #56	; 0x38
    1544:	bd10      	pop	{r4, pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	20000ed4 	.word	0x20000ed4
    154c:	42003c00 	.word	0x42003c00
    1550:	00000c45 	.word	0x00000c45

00001554 <arrangeSensorData>:
{
    1554:	b5f0      	push	{r4, r5, r6, r7, lr}
    1556:	2100      	movs	r1, #0
    1558:	2600      	movs	r6, #0
		if(inputsConnected[i] != NOTHINGCONNECTED )
    155a:	4f1d      	ldr	r7, [pc, #116]	; (15d0 <arrangeSensorData+0x7c>)
    155c:	e004      	b.n	1568 <arrangeSensorData+0x14>
			countSensorOutputs++;
    155e:	3601      	adds	r6, #1
    1560:	b2f6      	uxtb	r6, r6
    1562:	3101      	adds	r1, #1
	for(i=0;i<3;i++)
    1564:	2903      	cmp	r1, #3
    1566:	d012      	beq.n	158e <arrangeSensorData+0x3a>
		if(inputsConnected[i] != NOTHINGCONNECTED )
    1568:	5c7b      	ldrb	r3, [r7, r1]
    156a:	2b00      	cmp	r3, #0
    156c:	d0f9      	beq.n	1562 <arrangeSensorData+0xe>
				sendSensorOutputs[countSensorOutputs*5 + j] = sensorOutputs[5*i + 4];
    156e:	00b2      	lsls	r2, r6, #2
    1570:	1992      	adds	r2, r2, r6
    1572:	1883      	adds	r3, r0, r2
    1574:	3205      	adds	r2, #5
    1576:	1882      	adds	r2, r0, r2
    1578:	008d      	lsls	r5, r1, #2
    157a:	186d      	adds	r5, r5, r1
    157c:	4c15      	ldr	r4, [pc, #84]	; (15d4 <arrangeSensorData+0x80>)
    157e:	46a4      	mov	ip, r4
    1580:	4465      	add	r5, ip
    1582:	792c      	ldrb	r4, [r5, #4]
    1584:	701c      	strb	r4, [r3, #0]
    1586:	3301      	adds	r3, #1
			for(j=0;j<5;j++)
    1588:	4293      	cmp	r3, r2
    158a:	d1fa      	bne.n	1582 <arrangeSensorData+0x2e>
    158c:	e7e7      	b.n	155e <arrangeSensorData+0xa>
    158e:	2300      	movs	r3, #0
		if(outputsConnected[i] != NOTHINGCONNECTED )
    1590:	4c11      	ldr	r4, [pc, #68]	; (15d8 <arrangeSensorData+0x84>)
    1592:	e004      	b.n	159e <arrangeSensorData+0x4a>
					countSensorOutputs++;
    1594:	3601      	adds	r6, #1
    1596:	b2f6      	uxtb	r6, r6
    1598:	3301      	adds	r3, #1
	for(i=0;i<4;i++)
    159a:	2b04      	cmp	r3, #4
    159c:	d016      	beq.n	15cc <arrangeSensorData+0x78>
			if(outputsConnected[i] == OUTPUT_LEDMATRIX)
    159e:	5ce2      	ldrb	r2, [r4, r3]
    15a0:	2a03      	cmp	r2, #3
    15a2:	d1f9      	bne.n	1598 <arrangeSensorData+0x44>
				if(countSensorOutputs < 3)
    15a4:	2e02      	cmp	r6, #2
    15a6:	d8f7      	bhi.n	1598 <arrangeSensorData+0x44>
    15a8:	009a      	lsls	r2, r3, #2
    15aa:	18d2      	adds	r2, r2, r3
    15ac:	3214      	adds	r2, #20
    15ae:	4909      	ldr	r1, [pc, #36]	; (15d4 <arrangeSensorData+0x80>)
    15b0:	468c      	mov	ip, r1
    15b2:	4462      	add	r2, ip
						sendSensorOutputs[countSensorOutputs*5 + j] = sensorOutputs[5*i + 20+j];
    15b4:	00b5      	lsls	r5, r6, #2
    15b6:	19ad      	adds	r5, r5, r6
    15b8:	1941      	adds	r1, r0, r5
    15ba:	3505      	adds	r5, #5
    15bc:	1945      	adds	r5, r0, r5
    15be:	7817      	ldrb	r7, [r2, #0]
    15c0:	700f      	strb	r7, [r1, #0]
    15c2:	3201      	adds	r2, #1
    15c4:	3101      	adds	r1, #1
					for(j=0;j<5;j++)
    15c6:	42a9      	cmp	r1, r5
    15c8:	d1f9      	bne.n	15be <arrangeSensorData+0x6a>
    15ca:	e7e3      	b.n	1594 <arrangeSensorData+0x40>
}
    15cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	20000da0 	.word	0x20000da0
    15d4:	20000f30 	.word	0x20000f30
    15d8:	20000f2c 	.word	0x20000f2c

000015dc <sendDataBLE>:
{
    15dc:	b510      	push	{r4, lr}
	if(readySendData)
    15de:	4b09      	ldr	r3, [pc, #36]	; (1604 <sendDataBLE+0x28>)
    15e0:	781b      	ldrb	r3, [r3, #0]
    15e2:	2b00      	cmp	r3, #0
    15e4:	d100      	bne.n	15e8 <sendDataBLE+0xc>
}
    15e6:	bd10      	pop	{r4, pc}
		readySendData = false;
    15e8:	2200      	movs	r2, #0
    15ea:	4b06      	ldr	r3, [pc, #24]	; (1604 <sendDataBLE+0x28>)
    15ec:	701a      	strb	r2, [r3, #0]
		arrangeSensorData(sendSensorOutputs);
    15ee:	4c06      	ldr	r4, [pc, #24]	; (1608 <sendDataBLE+0x2c>)
    15f0:	0020      	movs	r0, r4
    15f2:	4b06      	ldr	r3, [pc, #24]	; (160c <sendDataBLE+0x30>)
    15f4:	4798      	blx	r3
		usart_write_buffer_wait(&usart_instance, sendSensorOutputs, LENGTH_SENSORS_DATA );
    15f6:	2214      	movs	r2, #20
    15f8:	0021      	movs	r1, r4
    15fa:	4805      	ldr	r0, [pc, #20]	; (1610 <sendDataBLE+0x34>)
    15fc:	4b05      	ldr	r3, [pc, #20]	; (1614 <sendDataBLE+0x38>)
    15fe:	4798      	blx	r3
}
    1600:	e7f1      	b.n	15e6 <sendDataBLE+0xa>
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	20000da3 	.word	0x20000da3
    1608:	200000d8 	.word	0x200000d8
    160c:	00001555 	.word	0x00001555
    1610:	20000ea0 	.word	0x20000ea0
    1614:	000023c9 	.word	0x000023c9

00001618 <configureTimerCallbacks>:


void configureTimerCallbacks()
{
    1618:	b510      	push	{r4, lr}
	tc_register_callback(&tc_encoder_capture, sendInfoCallback,TC_CALLBACK_OVERFLOW);
    161a:	4c0c      	ldr	r4, [pc, #48]	; (164c <configureTimerCallbacks+0x34>)
    161c:	2200      	movs	r2, #0
    161e:	490c      	ldr	r1, [pc, #48]	; (1650 <configureTimerCallbacks+0x38>)
    1620:	0020      	movs	r0, r4
    1622:	4b0c      	ldr	r3, [pc, #48]	; (1654 <configureTimerCallbacks+0x3c>)
    1624:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1626:	6820      	ldr	r0, [r4, #0]
    1628:	4b0b      	ldr	r3, [pc, #44]	; (1658 <configureTimerCallbacks+0x40>)
    162a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    162c:	4b0b      	ldr	r3, [pc, #44]	; (165c <configureTimerCallbacks+0x44>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    162e:	5c1a      	ldrb	r2, [r3, r0]
    1630:	231f      	movs	r3, #31
    1632:	4013      	ands	r3, r2
    1634:	2201      	movs	r2, #1
    1636:	0011      	movs	r1, r2
    1638:	4099      	lsls	r1, r3
    163a:	4b09      	ldr	r3, [pc, #36]	; (1660 <configureTimerCallbacks+0x48>)
    163c:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    163e:	7e63      	ldrb	r3, [r4, #25]
    1640:	2101      	movs	r1, #1
    1642:	430b      	orrs	r3, r1
    1644:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1646:	6823      	ldr	r3, [r4, #0]
    1648:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_encoder_capture, TC_CALLBACK_OVERFLOW);
}
    164a:	bd10      	pop	{r4, pc}
    164c:	20000ed4 	.word	0x20000ed4
    1650:	000014d1 	.word	0x000014d1
    1654:	00000b21 	.word	0x00000b21
    1658:	00000c09 	.word	0x00000c09
    165c:	0000513c 	.word	0x0000513c
    1660:	e000e100 	.word	0xe000e100

00001664 <configureSendInfo>:


//Send data to BLE every 30msec so that notifications can be sent in a timely manner
void configureSendInfo()
{
    1664:	b510      	push	{r4, lr}
	configureTimer();
    1666:	4b02      	ldr	r3, [pc, #8]	; (1670 <configureSendInfo+0xc>)
    1668:	4798      	blx	r3
	configureTimerCallbacks();
    166a:	4b02      	ldr	r3, [pc, #8]	; (1674 <configureSendInfo+0x10>)
    166c:	4798      	blx	r3
    166e:	bd10      	pop	{r4, pc}
    1670:	000014e5 	.word	0x000014e5
    1674:	00001619 	.word	0x00001619

00001678 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1678:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    167a:	2000      	movs	r0, #0
    167c:	4b08      	ldr	r3, [pc, #32]	; (16a0 <delay_init+0x28>)
    167e:	4798      	blx	r3
    1680:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1682:	4c08      	ldr	r4, [pc, #32]	; (16a4 <delay_init+0x2c>)
    1684:	21fa      	movs	r1, #250	; 0xfa
    1686:	0089      	lsls	r1, r1, #2
    1688:	47a0      	blx	r4
    168a:	4b07      	ldr	r3, [pc, #28]	; (16a8 <delay_init+0x30>)
    168c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    168e:	4907      	ldr	r1, [pc, #28]	; (16ac <delay_init+0x34>)
    1690:	0028      	movs	r0, r5
    1692:	47a0      	blx	r4
    1694:	4b06      	ldr	r3, [pc, #24]	; (16b0 <delay_init+0x38>)
    1696:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1698:	2205      	movs	r2, #5
    169a:	4b06      	ldr	r3, [pc, #24]	; (16b4 <delay_init+0x3c>)
    169c:	601a      	str	r2, [r3, #0]
}
    169e:	bd70      	pop	{r4, r5, r6, pc}
    16a0:	00003179 	.word	0x00003179
    16a4:	00003565 	.word	0x00003565
    16a8:	20000038 	.word	0x20000038
    16ac:	000f4240 	.word	0x000f4240
    16b0:	2000003c 	.word	0x2000003c
    16b4:	e000e010 	.word	0xe000e010

000016b8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    16b8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    16ba:	4b08      	ldr	r3, [pc, #32]	; (16dc <delay_cycles_ms+0x24>)
    16bc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    16be:	4a08      	ldr	r2, [pc, #32]	; (16e0 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    16c0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    16c2:	2180      	movs	r1, #128	; 0x80
    16c4:	0249      	lsls	r1, r1, #9
	while (n--) {
    16c6:	3801      	subs	r0, #1
    16c8:	d307      	bcc.n	16da <delay_cycles_ms+0x22>
	if (n > 0) {
    16ca:	2c00      	cmp	r4, #0
    16cc:	d0fb      	beq.n	16c6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    16ce:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    16d0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    16d2:	6813      	ldr	r3, [r2, #0]
    16d4:	420b      	tst	r3, r1
    16d6:	d0fc      	beq.n	16d2 <delay_cycles_ms+0x1a>
    16d8:	e7f5      	b.n	16c6 <delay_cycles_ms+0xe>
	}
}
    16da:	bd30      	pop	{r4, r5, pc}
    16dc:	20000038 	.word	0x20000038
    16e0:	e000e010 	.word	0xe000e010

000016e4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    16e4:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    16e6:	2200      	movs	r2, #0
    16e8:	2300      	movs	r3, #0
    16ea:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    16ec:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    16ee:	2100      	movs	r1, #0
    16f0:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    16f2:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    16f4:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    16f6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    16f8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    16fa:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    16fc:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    16fe:	24c0      	movs	r4, #192	; 0xc0
    1700:	0164      	lsls	r4, r4, #5
    1702:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1704:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1706:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    1708:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    170a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    170c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    170e:	242a      	movs	r4, #42	; 0x2a
    1710:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    1712:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1714:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1716:	3c06      	subs	r4, #6
    1718:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    171a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    171c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    171e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1720:	232b      	movs	r3, #43	; 0x2b
    1722:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    1724:	3301      	adds	r3, #1
    1726:	54c1      	strb	r1, [r0, r3]
}
    1728:	bd10      	pop	{r4, pc}
	...

0000172c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    172c:	b5f0      	push	{r4, r5, r6, r7, lr}
    172e:	46d6      	mov	lr, sl
    1730:	464f      	mov	r7, r9
    1732:	4646      	mov	r6, r8
    1734:	b5c0      	push	{r6, r7, lr}
    1736:	b096      	sub	sp, #88	; 0x58
    1738:	0007      	movs	r7, r0
    173a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    173c:	6001      	str	r1, [r0, #0]
    173e:	4ac6      	ldr	r2, [pc, #792]	; (1a58 <adc_init+0x32c>)
    1740:	6a10      	ldr	r0, [r2, #32]
    1742:	2380      	movs	r3, #128	; 0x80
    1744:	025b      	lsls	r3, r3, #9
    1746:	4303      	orrs	r3, r0
    1748:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    174a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    174c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    174e:	07db      	lsls	r3, r3, #31
    1750:	d505      	bpl.n	175e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1752:	b016      	add	sp, #88	; 0x58
    1754:	bc1c      	pop	{r2, r3, r4}
    1756:	4690      	mov	r8, r2
    1758:	4699      	mov	r9, r3
    175a:	46a2      	mov	sl, r4
    175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    175e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1760:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1762:	079b      	lsls	r3, r3, #30
    1764:	d4f5      	bmi.n	1752 <adc_init+0x26>
	module_inst->reference = config->reference;
    1766:	7873      	ldrb	r3, [r6, #1]
    1768:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    176a:	2b00      	cmp	r3, #0
    176c:	d104      	bne.n	1778 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    176e:	4abb      	ldr	r2, [pc, #748]	; (1a5c <adc_init+0x330>)
    1770:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1772:	2104      	movs	r1, #4
    1774:	430b      	orrs	r3, r1
    1776:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1778:	2300      	movs	r3, #0
    177a:	60bb      	str	r3, [r7, #8]
    177c:	60fb      	str	r3, [r7, #12]
    177e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1780:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    1782:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1784:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1786:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1788:	4bb5      	ldr	r3, [pc, #724]	; (1a60 <adc_init+0x334>)
    178a:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    178c:	232a      	movs	r3, #42	; 0x2a
    178e:	5cf3      	ldrb	r3, [r6, r3]
    1790:	2b00      	cmp	r3, #0
    1792:	d105      	bne.n	17a0 <adc_init+0x74>
    1794:	7d33      	ldrb	r3, [r6, #20]
    1796:	2b00      	cmp	r3, #0
    1798:	d102      	bne.n	17a0 <adc_init+0x74>
		module_inst->software_trigger = true;
    179a:	3301      	adds	r3, #1
    179c:	777b      	strb	r3, [r7, #29]
    179e:	e001      	b.n	17a4 <adc_init+0x78>
		module_inst->software_trigger = false;
    17a0:	2300      	movs	r3, #0
    17a2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    17a4:	683b      	ldr	r3, [r7, #0]
    17a6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    17a8:	7833      	ldrb	r3, [r6, #0]
    17aa:	466a      	mov	r2, sp
    17ac:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    17ae:	4669      	mov	r1, sp
    17b0:	201e      	movs	r0, #30
    17b2:	4bac      	ldr	r3, [pc, #688]	; (1a64 <adc_init+0x338>)
    17b4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    17b6:	201e      	movs	r0, #30
    17b8:	4bab      	ldr	r3, [pc, #684]	; (1a68 <adc_init+0x33c>)
    17ba:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    17bc:	232c      	movs	r3, #44	; 0x2c
    17be:	5cf2      	ldrb	r2, [r6, r3]
    17c0:	2a00      	cmp	r2, #0
    17c2:	d054      	beq.n	186e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    17c4:	3b01      	subs	r3, #1
    17c6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    17c8:	7b33      	ldrb	r3, [r6, #12]
    17ca:	18eb      	adds	r3, r5, r3
    17cc:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    17ce:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    17d0:	b2c9      	uxtb	r1, r1
    17d2:	428b      	cmp	r3, r1
    17d4:	d221      	bcs.n	181a <adc_init+0xee>
    17d6:	1952      	adds	r2, r2, r5
    17d8:	b2d3      	uxtb	r3, r2
    17da:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    17dc:	4ba3      	ldr	r3, [pc, #652]	; (1a6c <adc_init+0x340>)
    17de:	469a      	mov	sl, r3
    17e0:	e003      	b.n	17ea <adc_init+0xbe>
			offset++;
    17e2:	3501      	adds	r5, #1
    17e4:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    17e6:	454d      	cmp	r5, r9
    17e8:	d017      	beq.n	181a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    17ea:	240f      	movs	r4, #15
    17ec:	402c      	ands	r4, r5
    17ee:	7b33      	ldrb	r3, [r6, #12]
    17f0:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    17f2:	2250      	movs	r2, #80	; 0x50
    17f4:	499e      	ldr	r1, [pc, #632]	; (1a70 <adc_init+0x344>)
    17f6:	a802      	add	r0, sp, #8
    17f8:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    17fa:	2c13      	cmp	r4, #19
    17fc:	d8f1      	bhi.n	17e2 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    17fe:	00a4      	lsls	r4, r4, #2
    1800:	ab02      	add	r3, sp, #8
    1802:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1804:	a901      	add	r1, sp, #4
    1806:	2300      	movs	r3, #0
    1808:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    180a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    180c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    180e:	3301      	adds	r3, #1
    1810:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1812:	b2c0      	uxtb	r0, r0
    1814:	4b97      	ldr	r3, [pc, #604]	; (1a74 <adc_init+0x348>)
    1816:	4798      	blx	r3
    1818:	e7e3      	b.n	17e2 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    181a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    181c:	2250      	movs	r2, #80	; 0x50
    181e:	4994      	ldr	r1, [pc, #592]	; (1a70 <adc_init+0x344>)
    1820:	a802      	add	r0, sp, #8
    1822:	4b92      	ldr	r3, [pc, #584]	; (1a6c <adc_init+0x340>)
    1824:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1826:	2c13      	cmp	r4, #19
    1828:	d913      	bls.n	1852 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    182a:	7d73      	ldrb	r3, [r6, #21]
    182c:	009b      	lsls	r3, r3, #2
    182e:	b2db      	uxtb	r3, r3
    1830:	4642      	mov	r2, r8
    1832:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1834:	7db3      	ldrb	r3, [r6, #22]
    1836:	01db      	lsls	r3, r3, #7
    1838:	7872      	ldrb	r2, [r6, #1]
    183a:	4313      	orrs	r3, r2
    183c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    183e:	4642      	mov	r2, r8
    1840:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    1842:	7933      	ldrb	r3, [r6, #4]
    1844:	2b34      	cmp	r3, #52	; 0x34
    1846:	d900      	bls.n	184a <adc_init+0x11e>
    1848:	e17b      	b.n	1b42 <adc_init+0x416>
    184a:	009b      	lsls	r3, r3, #2
    184c:	4a8a      	ldr	r2, [pc, #552]	; (1a78 <adc_init+0x34c>)
    184e:	58d3      	ldr	r3, [r2, r3]
    1850:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1852:	00a4      	lsls	r4, r4, #2
    1854:	ab02      	add	r3, sp, #8
    1856:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1858:	a901      	add	r1, sp, #4
    185a:	2300      	movs	r3, #0
    185c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    185e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1860:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1862:	3301      	adds	r3, #1
    1864:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1866:	b2c0      	uxtb	r0, r0
    1868:	4b82      	ldr	r3, [pc, #520]	; (1a74 <adc_init+0x348>)
    186a:	4798      	blx	r3
    186c:	e7dd      	b.n	182a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    186e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    1870:	2250      	movs	r2, #80	; 0x50
    1872:	497f      	ldr	r1, [pc, #508]	; (1a70 <adc_init+0x344>)
    1874:	a802      	add	r0, sp, #8
    1876:	4b7d      	ldr	r3, [pc, #500]	; (1a6c <adc_init+0x340>)
    1878:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    187a:	2c13      	cmp	r4, #19
    187c:	d915      	bls.n	18aa <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    187e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1880:	2250      	movs	r2, #80	; 0x50
    1882:	497b      	ldr	r1, [pc, #492]	; (1a70 <adc_init+0x344>)
    1884:	a802      	add	r0, sp, #8
    1886:	4b79      	ldr	r3, [pc, #484]	; (1a6c <adc_init+0x340>)
    1888:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    188a:	2c13      	cmp	r4, #19
    188c:	d8cd      	bhi.n	182a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    188e:	00a4      	lsls	r4, r4, #2
    1890:	ab02      	add	r3, sp, #8
    1892:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1894:	a901      	add	r1, sp, #4
    1896:	2300      	movs	r3, #0
    1898:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    189a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    189c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    189e:	3301      	adds	r3, #1
    18a0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    18a2:	b2c0      	uxtb	r0, r0
    18a4:	4b73      	ldr	r3, [pc, #460]	; (1a74 <adc_init+0x348>)
    18a6:	4798      	blx	r3
    18a8:	e7bf      	b.n	182a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    18aa:	00a4      	lsls	r4, r4, #2
    18ac:	ab02      	add	r3, sp, #8
    18ae:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    18b0:	a901      	add	r1, sp, #4
    18b2:	2300      	movs	r3, #0
    18b4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    18b6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    18b8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    18ba:	3301      	adds	r3, #1
    18bc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    18be:	b2c0      	uxtb	r0, r0
    18c0:	4b6c      	ldr	r3, [pc, #432]	; (1a74 <adc_init+0x348>)
    18c2:	4798      	blx	r3
    18c4:	e7db      	b.n	187e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    18c6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    18c8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    18ca:	2102      	movs	r1, #2
    18cc:	e01a      	b.n	1904 <adc_init+0x1d8>
		adjres = config->divide_result;
    18ce:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    18d0:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    18d2:	2410      	movs	r4, #16
    18d4:	e016      	b.n	1904 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    18d6:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    18d8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    18da:	2101      	movs	r1, #1
    18dc:	e012      	b.n	1904 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    18de:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    18e0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    18e2:	2100      	movs	r1, #0
    18e4:	e00e      	b.n	1904 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    18e6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    18e8:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    18ea:	2100      	movs	r1, #0
    18ec:	e00a      	b.n	1904 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    18ee:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    18f0:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    18f2:	2100      	movs	r1, #0
    18f4:	e006      	b.n	1904 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    18f6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    18f8:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    18fa:	2100      	movs	r1, #0
    18fc:	e002      	b.n	1904 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    18fe:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    1900:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1902:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1904:	0109      	lsls	r1, r1, #4
    1906:	2270      	movs	r2, #112	; 0x70
    1908:	400a      	ands	r2, r1
    190a:	4313      	orrs	r3, r2
    190c:	4642      	mov	r2, r8
    190e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    1910:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    1912:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    1914:	2b3f      	cmp	r3, #63	; 0x3f
    1916:	d900      	bls.n	191a <adc_init+0x1ee>
    1918:	e71b      	b.n	1752 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    191a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    191c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    191e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1920:	b25b      	sxtb	r3, r3
    1922:	2b00      	cmp	r3, #0
    1924:	dbfb      	blt.n	191e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1926:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1928:	8872      	ldrh	r2, [r6, #2]
    192a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    192c:	2224      	movs	r2, #36	; 0x24
    192e:	5cb2      	ldrb	r2, [r6, r2]
    1930:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1932:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1934:	7d32      	ldrb	r2, [r6, #20]
    1936:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1938:	4313      	orrs	r3, r2
    193a:	7cb2      	ldrb	r2, [r6, #18]
    193c:	0052      	lsls	r2, r2, #1
    193e:	4313      	orrs	r3, r2
    1940:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    1942:	4642      	mov	r2, r8
    1944:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1946:	7e33      	ldrb	r3, [r6, #24]
    1948:	2b00      	cmp	r3, #0
    194a:	d020      	beq.n	198e <adc_init+0x262>
		switch (resolution) {
    194c:	2c10      	cmp	r4, #16
    194e:	d100      	bne.n	1952 <adc_init+0x226>
    1950:	e0d9      	b.n	1b06 <adc_init+0x3da>
    1952:	d800      	bhi.n	1956 <adc_init+0x22a>
    1954:	e098      	b.n	1a88 <adc_init+0x35c>
    1956:	2c20      	cmp	r4, #32
    1958:	d100      	bne.n	195c <adc_init+0x230>
    195a:	e0b6      	b.n	1aca <adc_init+0x39e>
    195c:	2c30      	cmp	r4, #48	; 0x30
    195e:	d116      	bne.n	198e <adc_init+0x262>
			if (config->differential_mode &&
    1960:	7cf2      	ldrb	r2, [r6, #19]
    1962:	2a00      	cmp	r2, #0
    1964:	d00a      	beq.n	197c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1966:	69f2      	ldr	r2, [r6, #28]
    1968:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    196a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    196c:	2aff      	cmp	r2, #255	; 0xff
    196e:	d900      	bls.n	1972 <adc_init+0x246>
    1970:	e6ef      	b.n	1752 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    1972:	6a32      	ldr	r2, [r6, #32]
    1974:	3280      	adds	r2, #128	; 0x80
    1976:	2aff      	cmp	r2, #255	; 0xff
    1978:	d900      	bls.n	197c <adc_init+0x250>
    197a:	e6ea      	b.n	1752 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    197c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    197e:	69f2      	ldr	r2, [r6, #28]
    1980:	2aff      	cmp	r2, #255	; 0xff
    1982:	dd00      	ble.n	1986 <adc_init+0x25a>
    1984:	e6e5      	b.n	1752 <adc_init+0x26>
    1986:	6a32      	ldr	r2, [r6, #32]
    1988:	2aff      	cmp	r2, #255	; 0xff
    198a:	dd00      	ble.n	198e <adc_init+0x262>
    198c:	e6e1      	b.n	1752 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    198e:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1990:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1992:	b252      	sxtb	r2, r2
    1994:	2a00      	cmp	r2, #0
    1996:	dbfb      	blt.n	1990 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1998:	4642      	mov	r2, r8
    199a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    199c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    199e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    19a0:	b25b      	sxtb	r3, r3
    19a2:	2b00      	cmp	r3, #0
    19a4:	dbfb      	blt.n	199e <adc_init+0x272>
	adc_module->WINLT.reg =
    19a6:	8bb3      	ldrh	r3, [r6, #28]
    19a8:	4642      	mov	r2, r8
    19aa:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    19ac:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    19ae:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    19b0:	b25b      	sxtb	r3, r3
    19b2:	2b00      	cmp	r3, #0
    19b4:	dbfb      	blt.n	19ae <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    19b6:	8c33      	ldrh	r3, [r6, #32]
    19b8:	4642      	mov	r2, r8
    19ba:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    19bc:	232c      	movs	r3, #44	; 0x2c
    19be:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    19c0:	2b00      	cmp	r3, #0
    19c2:	d005      	beq.n	19d0 <adc_init+0x2a4>
		inputs_to_scan--;
    19c4:	3b01      	subs	r3, #1
    19c6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    19c8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    19ca:	2b0f      	cmp	r3, #15
    19cc:	d900      	bls.n	19d0 <adc_init+0x2a4>
    19ce:	e6c0      	b.n	1752 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    19d0:	222b      	movs	r2, #43	; 0x2b
    19d2:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    19d4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    19d6:	290f      	cmp	r1, #15
    19d8:	d900      	bls.n	19dc <adc_init+0x2b0>
    19da:	e6ba      	b.n	1752 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    19dc:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    19de:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    19e0:	b252      	sxtb	r2, r2
    19e2:	2a00      	cmp	r2, #0
    19e4:	dbfb      	blt.n	19de <adc_init+0x2b2>
			config->negative_input |
    19e6:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    19e8:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    19ea:	4302      	orrs	r2, r0
    19ec:	68b0      	ldr	r0, [r6, #8]
    19ee:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    19f0:	0509      	lsls	r1, r1, #20
			config->negative_input |
    19f2:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    19f4:	041b      	lsls	r3, r3, #16
			config->negative_input |
    19f6:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    19f8:	4642      	mov	r2, r8
    19fa:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    19fc:	232a      	movs	r3, #42	; 0x2a
    19fe:	5cf3      	ldrb	r3, [r6, r3]
    1a00:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    1a02:	230f      	movs	r3, #15
    1a04:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1a06:	3315      	adds	r3, #21
    1a08:	5cf3      	ldrb	r3, [r6, r3]
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d012      	beq.n	1a34 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1a0e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    1a10:	4a1a      	ldr	r2, [pc, #104]	; (1a7c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    1a12:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1a14:	4293      	cmp	r3, r2
    1a16:	d900      	bls.n	1a1a <adc_init+0x2ee>
    1a18:	e69b      	b.n	1752 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1a1a:	4642      	mov	r2, r8
    1a1c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    1a1e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    1a20:	2380      	movs	r3, #128	; 0x80
    1a22:	011b      	lsls	r3, r3, #4
    1a24:	18d3      	adds	r3, r2, r3
    1a26:	4915      	ldr	r1, [pc, #84]	; (1a7c <adc_init+0x350>)
    1a28:	b29b      	uxth	r3, r3
    1a2a:	428b      	cmp	r3, r1
    1a2c:	d900      	bls.n	1a30 <adc_init+0x304>
    1a2e:	e690      	b.n	1752 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1a30:	4643      	mov	r3, r8
    1a32:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1a34:	4b12      	ldr	r3, [pc, #72]	; (1a80 <adc_init+0x354>)
    1a36:	681b      	ldr	r3, [r3, #0]
    1a38:	015b      	lsls	r3, r3, #5
    1a3a:	22e0      	movs	r2, #224	; 0xe0
    1a3c:	00d2      	lsls	r2, r2, #3
    1a3e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    1a40:	4a10      	ldr	r2, [pc, #64]	; (1a84 <adc_init+0x358>)
    1a42:	6851      	ldr	r1, [r2, #4]
    1a44:	0149      	lsls	r1, r1, #5
    1a46:	6812      	ldr	r2, [r2, #0]
    1a48:	0ed2      	lsrs	r2, r2, #27
    1a4a:	430a      	orrs	r2, r1
    1a4c:	b2d2      	uxtb	r2, r2
			) |
    1a4e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1a50:	4642      	mov	r2, r8
    1a52:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    1a54:	2000      	movs	r0, #0
    1a56:	e67c      	b.n	1752 <adc_init+0x26>
    1a58:	40000400 	.word	0x40000400
    1a5c:	40000800 	.word	0x40000800
    1a60:	20000ef0 	.word	0x20000ef0
    1a64:	00003291 	.word	0x00003291
    1a68:	00003205 	.word	0x00003205
    1a6c:	00004ff5 	.word	0x00004ff5
    1a70:	00005218 	.word	0x00005218
    1a74:	00003389 	.word	0x00003389
    1a78:	00005144 	.word	0x00005144
    1a7c:	00000fff 	.word	0x00000fff
    1a80:	00806024 	.word	0x00806024
    1a84:	00806020 	.word	0x00806020
		switch (resolution) {
    1a88:	2c00      	cmp	r4, #0
    1a8a:	d000      	beq.n	1a8e <adc_init+0x362>
    1a8c:	e77f      	b.n	198e <adc_init+0x262>
			if (config->differential_mode &&
    1a8e:	7cf2      	ldrb	r2, [r6, #19]
    1a90:	2a00      	cmp	r2, #0
    1a92:	d00f      	beq.n	1ab4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    1a94:	69f2      	ldr	r2, [r6, #28]
    1a96:	2180      	movs	r1, #128	; 0x80
    1a98:	0109      	lsls	r1, r1, #4
    1a9a:	468c      	mov	ip, r1
    1a9c:	4462      	add	r2, ip
			if (config->differential_mode &&
    1a9e:	492a      	ldr	r1, [pc, #168]	; (1b48 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1aa0:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1aa2:	428a      	cmp	r2, r1
    1aa4:	d900      	bls.n	1aa8 <adc_init+0x37c>
    1aa6:	e654      	b.n	1752 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1aa8:	6a32      	ldr	r2, [r6, #32]
    1aaa:	4462      	add	r2, ip
    1aac:	4926      	ldr	r1, [pc, #152]	; (1b48 <adc_init+0x41c>)
    1aae:	428a      	cmp	r2, r1
    1ab0:	d900      	bls.n	1ab4 <adc_init+0x388>
    1ab2:	e64e      	b.n	1752 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    1ab4:	4a24      	ldr	r2, [pc, #144]	; (1b48 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1ab6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1ab8:	69f1      	ldr	r1, [r6, #28]
    1aba:	4291      	cmp	r1, r2
    1abc:	dd00      	ble.n	1ac0 <adc_init+0x394>
    1abe:	e648      	b.n	1752 <adc_init+0x26>
    1ac0:	6a31      	ldr	r1, [r6, #32]
    1ac2:	4291      	cmp	r1, r2
    1ac4:	dd00      	ble.n	1ac8 <adc_init+0x39c>
    1ac6:	e644      	b.n	1752 <adc_init+0x26>
    1ac8:	e761      	b.n	198e <adc_init+0x262>
			if (config->differential_mode &&
    1aca:	7cf2      	ldrb	r2, [r6, #19]
    1acc:	2a00      	cmp	r2, #0
    1ace:	d00f      	beq.n	1af0 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    1ad0:	69f2      	ldr	r2, [r6, #28]
    1ad2:	2180      	movs	r1, #128	; 0x80
    1ad4:	0089      	lsls	r1, r1, #2
    1ad6:	468c      	mov	ip, r1
    1ad8:	4462      	add	r2, ip
			if (config->differential_mode &&
    1ada:	491c      	ldr	r1, [pc, #112]	; (1b4c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1adc:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1ade:	428a      	cmp	r2, r1
    1ae0:	d900      	bls.n	1ae4 <adc_init+0x3b8>
    1ae2:	e636      	b.n	1752 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    1ae4:	6a32      	ldr	r2, [r6, #32]
    1ae6:	4462      	add	r2, ip
    1ae8:	4918      	ldr	r1, [pc, #96]	; (1b4c <adc_init+0x420>)
    1aea:	428a      	cmp	r2, r1
    1aec:	d900      	bls.n	1af0 <adc_init+0x3c4>
    1aee:	e630      	b.n	1752 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1af0:	4a16      	ldr	r2, [pc, #88]	; (1b4c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1af2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    1af4:	69f1      	ldr	r1, [r6, #28]
    1af6:	4291      	cmp	r1, r2
    1af8:	dd00      	ble.n	1afc <adc_init+0x3d0>
    1afa:	e62a      	b.n	1752 <adc_init+0x26>
    1afc:	6a31      	ldr	r1, [r6, #32]
    1afe:	4291      	cmp	r1, r2
    1b00:	dd00      	ble.n	1b04 <adc_init+0x3d8>
    1b02:	e626      	b.n	1752 <adc_init+0x26>
    1b04:	e743      	b.n	198e <adc_init+0x262>
			if (config->differential_mode &&
    1b06:	7cf2      	ldrb	r2, [r6, #19]
    1b08:	2a00      	cmp	r2, #0
    1b0a:	d00f      	beq.n	1b2c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    1b0c:	69f2      	ldr	r2, [r6, #28]
    1b0e:	2180      	movs	r1, #128	; 0x80
    1b10:	0209      	lsls	r1, r1, #8
    1b12:	468c      	mov	ip, r1
    1b14:	4462      	add	r2, ip
			if (config->differential_mode &&
    1b16:	490e      	ldr	r1, [pc, #56]	; (1b50 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1b18:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1b1a:	428a      	cmp	r2, r1
    1b1c:	d900      	bls.n	1b20 <adc_init+0x3f4>
    1b1e:	e618      	b.n	1752 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    1b20:	6a32      	ldr	r2, [r6, #32]
    1b22:	4462      	add	r2, ip
    1b24:	490a      	ldr	r1, [pc, #40]	; (1b50 <adc_init+0x424>)
    1b26:	428a      	cmp	r2, r1
    1b28:	d900      	bls.n	1b2c <adc_init+0x400>
    1b2a:	e612      	b.n	1752 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    1b2c:	4a08      	ldr	r2, [pc, #32]	; (1b50 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1b2e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    1b30:	69f1      	ldr	r1, [r6, #28]
    1b32:	4291      	cmp	r1, r2
    1b34:	dd00      	ble.n	1b38 <adc_init+0x40c>
    1b36:	e60c      	b.n	1752 <adc_init+0x26>
    1b38:	6a31      	ldr	r1, [r6, #32]
    1b3a:	4291      	cmp	r1, r2
    1b3c:	dd00      	ble.n	1b40 <adc_init+0x414>
    1b3e:	e608      	b.n	1752 <adc_init+0x26>
    1b40:	e725      	b.n	198e <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    1b42:	2017      	movs	r0, #23
    1b44:	e605      	b.n	1752 <adc_init+0x26>
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	00000fff 	.word	0x00000fff
    1b4c:	000003ff 	.word	0x000003ff
    1b50:	0000ffff 	.word	0x0000ffff

00001b54 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1b54:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1b56:	4b2e      	ldr	r3, [pc, #184]	; (1c10 <ADC_Handler+0xbc>)
    1b58:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    1b5a:	6823      	ldr	r3, [r4, #0]
    1b5c:	7e1d      	ldrb	r5, [r3, #24]
    1b5e:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    1b60:	07ea      	lsls	r2, r5, #31
    1b62:	d505      	bpl.n	1b70 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1b64:	7ee2      	ldrb	r2, [r4, #27]
    1b66:	07d2      	lsls	r2, r2, #31
    1b68:	d502      	bpl.n	1b70 <ADC_Handler+0x1c>
    1b6a:	7ea2      	ldrb	r2, [r4, #26]
    1b6c:	07d2      	lsls	r2, r2, #31
    1b6e:	d416      	bmi.n	1b9e <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    1b70:	076b      	lsls	r3, r5, #29
    1b72:	d508      	bpl.n	1b86 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1b74:	2304      	movs	r3, #4
    1b76:	6822      	ldr	r2, [r4, #0]
    1b78:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1b7a:	7ee3      	ldrb	r3, [r4, #27]
    1b7c:	079b      	lsls	r3, r3, #30
    1b7e:	d502      	bpl.n	1b86 <ADC_Handler+0x32>
    1b80:	7ea3      	ldrb	r3, [r4, #26]
    1b82:	079b      	lsls	r3, r3, #30
    1b84:	d43c      	bmi.n	1c00 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    1b86:	07ab      	lsls	r3, r5, #30
    1b88:	d508      	bpl.n	1b9c <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1b8a:	2302      	movs	r3, #2
    1b8c:	6822      	ldr	r2, [r4, #0]
    1b8e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1b90:	7ee3      	ldrb	r3, [r4, #27]
    1b92:	075b      	lsls	r3, r3, #29
    1b94:	d502      	bpl.n	1b9c <ADC_Handler+0x48>
    1b96:	7ea3      	ldrb	r3, [r4, #26]
    1b98:	075b      	lsls	r3, r3, #29
    1b9a:	d435      	bmi.n	1c08 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    1b9c:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1b9e:	2201      	movs	r2, #1
    1ba0:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    1ba2:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1ba4:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    1ba6:	b25b      	sxtb	r3, r3
    1ba8:	2b00      	cmp	r3, #0
    1baa:	dbfb      	blt.n	1ba4 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    1bac:	6961      	ldr	r1, [r4, #20]
    1bae:	1c8b      	adds	r3, r1, #2
    1bb0:	6163      	str	r3, [r4, #20]
    1bb2:	8b53      	ldrh	r3, [r2, #26]
    1bb4:	b29b      	uxth	r3, r3
    1bb6:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    1bb8:	8b23      	ldrh	r3, [r4, #24]
    1bba:	3b01      	subs	r3, #1
    1bbc:	b29b      	uxth	r3, r3
    1bbe:	8323      	strh	r3, [r4, #24]
    1bc0:	2b00      	cmp	r3, #0
    1bc2:	d011      	beq.n	1be8 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
    1bc4:	7f63      	ldrb	r3, [r4, #29]
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d0d2      	beq.n	1b70 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1bca:	6822      	ldr	r2, [r4, #0]
    1bcc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1bce:	b25b      	sxtb	r3, r3
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	dbfb      	blt.n	1bcc <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1bd4:	7b13      	ldrb	r3, [r2, #12]
    1bd6:	2102      	movs	r1, #2
    1bd8:	430b      	orrs	r3, r1
    1bda:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    1bdc:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1bde:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1be0:	b25b      	sxtb	r3, r3
    1be2:	2b00      	cmp	r3, #0
    1be4:	dbfb      	blt.n	1bde <ADC_Handler+0x8a>
    1be6:	e7c3      	b.n	1b70 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    1be8:	7f23      	ldrb	r3, [r4, #28]
    1bea:	2b05      	cmp	r3, #5
    1bec:	d1c0      	bne.n	1b70 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    1bee:	2300      	movs	r3, #0
    1bf0:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    1bf2:	3301      	adds	r3, #1
    1bf4:	6822      	ldr	r2, [r4, #0]
    1bf6:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1bf8:	0020      	movs	r0, r4
    1bfa:	68a3      	ldr	r3, [r4, #8]
    1bfc:	4798      	blx	r3
    1bfe:	e7b7      	b.n	1b70 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1c00:	0020      	movs	r0, r4
    1c02:	68e3      	ldr	r3, [r4, #12]
    1c04:	4798      	blx	r3
    1c06:	e7be      	b.n	1b86 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1c08:	6923      	ldr	r3, [r4, #16]
    1c0a:	0020      	movs	r0, r4
    1c0c:	4798      	blx	r3
}
    1c0e:	e7c5      	b.n	1b9c <ADC_Handler+0x48>
    1c10:	20000ef0 	.word	0x20000ef0

00001c14 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c16:	46de      	mov	lr, fp
    1c18:	4657      	mov	r7, sl
    1c1a:	464e      	mov	r6, r9
    1c1c:	4645      	mov	r5, r8
    1c1e:	b5e0      	push	{r5, r6, r7, lr}
    1c20:	b087      	sub	sp, #28
    1c22:	4680      	mov	r8, r0
    1c24:	9104      	str	r1, [sp, #16]
    1c26:	0016      	movs	r6, r2
    1c28:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1c2a:	2200      	movs	r2, #0
    1c2c:	2300      	movs	r3, #0
    1c2e:	2100      	movs	r1, #0
    1c30:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1c32:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1c34:	2001      	movs	r0, #1
    1c36:	0021      	movs	r1, r4
    1c38:	9600      	str	r6, [sp, #0]
    1c3a:	9701      	str	r7, [sp, #4]
    1c3c:	465c      	mov	r4, fp
    1c3e:	9403      	str	r4, [sp, #12]
    1c40:	4644      	mov	r4, r8
    1c42:	9405      	str	r4, [sp, #20]
    1c44:	e013      	b.n	1c6e <long_division+0x5a>
    1c46:	2420      	movs	r4, #32
    1c48:	1a64      	subs	r4, r4, r1
    1c4a:	0005      	movs	r5, r0
    1c4c:	40e5      	lsrs	r5, r4
    1c4e:	46a8      	mov	r8, r5
    1c50:	e014      	b.n	1c7c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1c52:	9c00      	ldr	r4, [sp, #0]
    1c54:	9d01      	ldr	r5, [sp, #4]
    1c56:	1b12      	subs	r2, r2, r4
    1c58:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1c5a:	465c      	mov	r4, fp
    1c5c:	464d      	mov	r5, r9
    1c5e:	432c      	orrs	r4, r5
    1c60:	46a3      	mov	fp, r4
    1c62:	9c03      	ldr	r4, [sp, #12]
    1c64:	4645      	mov	r5, r8
    1c66:	432c      	orrs	r4, r5
    1c68:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1c6a:	3901      	subs	r1, #1
    1c6c:	d325      	bcc.n	1cba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1c6e:	2420      	movs	r4, #32
    1c70:	4264      	negs	r4, r4
    1c72:	190c      	adds	r4, r1, r4
    1c74:	d4e7      	bmi.n	1c46 <long_division+0x32>
    1c76:	0005      	movs	r5, r0
    1c78:	40a5      	lsls	r5, r4
    1c7a:	46a8      	mov	r8, r5
    1c7c:	0004      	movs	r4, r0
    1c7e:	408c      	lsls	r4, r1
    1c80:	46a1      	mov	r9, r4
		r = r << 1;
    1c82:	1892      	adds	r2, r2, r2
    1c84:	415b      	adcs	r3, r3
    1c86:	0014      	movs	r4, r2
    1c88:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1c8a:	9e05      	ldr	r6, [sp, #20]
    1c8c:	464f      	mov	r7, r9
    1c8e:	403e      	ands	r6, r7
    1c90:	46b4      	mov	ip, r6
    1c92:	9e04      	ldr	r6, [sp, #16]
    1c94:	4647      	mov	r7, r8
    1c96:	403e      	ands	r6, r7
    1c98:	46b2      	mov	sl, r6
    1c9a:	4666      	mov	r6, ip
    1c9c:	4657      	mov	r7, sl
    1c9e:	433e      	orrs	r6, r7
    1ca0:	d003      	beq.n	1caa <long_division+0x96>
			r |= 0x01;
    1ca2:	0006      	movs	r6, r0
    1ca4:	4326      	orrs	r6, r4
    1ca6:	0032      	movs	r2, r6
    1ca8:	002b      	movs	r3, r5
		if (r >= d) {
    1caa:	9c00      	ldr	r4, [sp, #0]
    1cac:	9d01      	ldr	r5, [sp, #4]
    1cae:	429d      	cmp	r5, r3
    1cb0:	d8db      	bhi.n	1c6a <long_division+0x56>
    1cb2:	d1ce      	bne.n	1c52 <long_division+0x3e>
    1cb4:	4294      	cmp	r4, r2
    1cb6:	d8d8      	bhi.n	1c6a <long_division+0x56>
    1cb8:	e7cb      	b.n	1c52 <long_division+0x3e>
    1cba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1cbc:	4658      	mov	r0, fp
    1cbe:	0019      	movs	r1, r3
    1cc0:	b007      	add	sp, #28
    1cc2:	bc3c      	pop	{r2, r3, r4, r5}
    1cc4:	4690      	mov	r8, r2
    1cc6:	4699      	mov	r9, r3
    1cc8:	46a2      	mov	sl, r4
    1cca:	46ab      	mov	fp, r5
    1ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001cce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1cce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1cd0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1cd2:	2340      	movs	r3, #64	; 0x40
    1cd4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1cd6:	4281      	cmp	r1, r0
    1cd8:	d202      	bcs.n	1ce0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1cda:	0018      	movs	r0, r3
    1cdc:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1cde:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1ce0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1ce2:	1c63      	adds	r3, r4, #1
    1ce4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1ce6:	4288      	cmp	r0, r1
    1ce8:	d9f9      	bls.n	1cde <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1cea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1cec:	2cff      	cmp	r4, #255	; 0xff
    1cee:	d8f4      	bhi.n	1cda <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1cf0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1cf2:	2300      	movs	r3, #0
    1cf4:	e7f1      	b.n	1cda <_sercom_get_sync_baud_val+0xc>
	...

00001cf8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cfa:	b083      	sub	sp, #12
    1cfc:	000f      	movs	r7, r1
    1cfe:	0016      	movs	r6, r2
    1d00:	aa08      	add	r2, sp, #32
    1d02:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1d04:	0004      	movs	r4, r0
    1d06:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d08:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1d0a:	42bc      	cmp	r4, r7
    1d0c:	d902      	bls.n	1d14 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1d0e:	0010      	movs	r0, r2
    1d10:	b003      	add	sp, #12
    1d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1d14:	2b00      	cmp	r3, #0
    1d16:	d114      	bne.n	1d42 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1d18:	0002      	movs	r2, r0
    1d1a:	0008      	movs	r0, r1
    1d1c:	2100      	movs	r1, #0
    1d1e:	4c19      	ldr	r4, [pc, #100]	; (1d84 <_sercom_get_async_baud_val+0x8c>)
    1d20:	47a0      	blx	r4
    1d22:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1d24:	003a      	movs	r2, r7
    1d26:	2300      	movs	r3, #0
    1d28:	2000      	movs	r0, #0
    1d2a:	4c17      	ldr	r4, [pc, #92]	; (1d88 <_sercom_get_async_baud_val+0x90>)
    1d2c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1d2e:	2200      	movs	r2, #0
    1d30:	2301      	movs	r3, #1
    1d32:	1a12      	subs	r2, r2, r0
    1d34:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1d36:	0c12      	lsrs	r2, r2, #16
    1d38:	041b      	lsls	r3, r3, #16
    1d3a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1d3c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1d3e:	2200      	movs	r2, #0
    1d40:	e7e5      	b.n	1d0e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1d42:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1d44:	2b01      	cmp	r3, #1
    1d46:	d1f9      	bne.n	1d3c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1d48:	000a      	movs	r2, r1
    1d4a:	2300      	movs	r3, #0
    1d4c:	2100      	movs	r1, #0
    1d4e:	4c0d      	ldr	r4, [pc, #52]	; (1d84 <_sercom_get_async_baud_val+0x8c>)
    1d50:	47a0      	blx	r4
    1d52:	0002      	movs	r2, r0
    1d54:	000b      	movs	r3, r1
    1d56:	9200      	str	r2, [sp, #0]
    1d58:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1d5a:	0038      	movs	r0, r7
    1d5c:	2100      	movs	r1, #0
    1d5e:	4c0a      	ldr	r4, [pc, #40]	; (1d88 <_sercom_get_async_baud_val+0x90>)
    1d60:	47a0      	blx	r4
    1d62:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1d64:	2380      	movs	r3, #128	; 0x80
    1d66:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d68:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1d6a:	4298      	cmp	r0, r3
    1d6c:	d8cf      	bhi.n	1d0e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1d6e:	0f79      	lsrs	r1, r7, #29
    1d70:	00f8      	lsls	r0, r7, #3
    1d72:	9a00      	ldr	r2, [sp, #0]
    1d74:	9b01      	ldr	r3, [sp, #4]
    1d76:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1d78:	00ea      	lsls	r2, r5, #3
    1d7a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1d7c:	b2d2      	uxtb	r2, r2
    1d7e:	0352      	lsls	r2, r2, #13
    1d80:	432a      	orrs	r2, r5
    1d82:	e7db      	b.n	1d3c <_sercom_get_async_baud_val+0x44>
    1d84:	0000367d 	.word	0x0000367d
    1d88:	00001c15 	.word	0x00001c15

00001d8c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1d8c:	b510      	push	{r4, lr}
    1d8e:	b082      	sub	sp, #8
    1d90:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1d92:	4b0e      	ldr	r3, [pc, #56]	; (1dcc <sercom_set_gclk_generator+0x40>)
    1d94:	781b      	ldrb	r3, [r3, #0]
    1d96:	2b00      	cmp	r3, #0
    1d98:	d007      	beq.n	1daa <sercom_set_gclk_generator+0x1e>
    1d9a:	2900      	cmp	r1, #0
    1d9c:	d105      	bne.n	1daa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1d9e:	4b0b      	ldr	r3, [pc, #44]	; (1dcc <sercom_set_gclk_generator+0x40>)
    1da0:	785b      	ldrb	r3, [r3, #1]
    1da2:	4283      	cmp	r3, r0
    1da4:	d010      	beq.n	1dc8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1da6:	201d      	movs	r0, #29
    1da8:	e00c      	b.n	1dc4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1daa:	a901      	add	r1, sp, #4
    1dac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1dae:	2013      	movs	r0, #19
    1db0:	4b07      	ldr	r3, [pc, #28]	; (1dd0 <sercom_set_gclk_generator+0x44>)
    1db2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1db4:	2013      	movs	r0, #19
    1db6:	4b07      	ldr	r3, [pc, #28]	; (1dd4 <sercom_set_gclk_generator+0x48>)
    1db8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1dba:	4b04      	ldr	r3, [pc, #16]	; (1dcc <sercom_set_gclk_generator+0x40>)
    1dbc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1dbe:	2201      	movs	r2, #1
    1dc0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1dc2:	2000      	movs	r0, #0
}
    1dc4:	b002      	add	sp, #8
    1dc6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1dc8:	2000      	movs	r0, #0
    1dca:	e7fb      	b.n	1dc4 <sercom_set_gclk_generator+0x38>
    1dcc:	200000ec 	.word	0x200000ec
    1dd0:	00003291 	.word	0x00003291
    1dd4:	00003205 	.word	0x00003205

00001dd8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1dd8:	4b40      	ldr	r3, [pc, #256]	; (1edc <_sercom_get_default_pad+0x104>)
    1dda:	4298      	cmp	r0, r3
    1ddc:	d031      	beq.n	1e42 <_sercom_get_default_pad+0x6a>
    1dde:	d90a      	bls.n	1df6 <_sercom_get_default_pad+0x1e>
    1de0:	4b3f      	ldr	r3, [pc, #252]	; (1ee0 <_sercom_get_default_pad+0x108>)
    1de2:	4298      	cmp	r0, r3
    1de4:	d04d      	beq.n	1e82 <_sercom_get_default_pad+0xaa>
    1de6:	4b3f      	ldr	r3, [pc, #252]	; (1ee4 <_sercom_get_default_pad+0x10c>)
    1de8:	4298      	cmp	r0, r3
    1dea:	d05a      	beq.n	1ea2 <_sercom_get_default_pad+0xca>
    1dec:	4b3e      	ldr	r3, [pc, #248]	; (1ee8 <_sercom_get_default_pad+0x110>)
    1dee:	4298      	cmp	r0, r3
    1df0:	d037      	beq.n	1e62 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1df2:	2000      	movs	r0, #0
}
    1df4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1df6:	4b3d      	ldr	r3, [pc, #244]	; (1eec <_sercom_get_default_pad+0x114>)
    1df8:	4298      	cmp	r0, r3
    1dfa:	d00c      	beq.n	1e16 <_sercom_get_default_pad+0x3e>
    1dfc:	4b3c      	ldr	r3, [pc, #240]	; (1ef0 <_sercom_get_default_pad+0x118>)
    1dfe:	4298      	cmp	r0, r3
    1e00:	d1f7      	bne.n	1df2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e02:	2901      	cmp	r1, #1
    1e04:	d017      	beq.n	1e36 <_sercom_get_default_pad+0x5e>
    1e06:	2900      	cmp	r1, #0
    1e08:	d05d      	beq.n	1ec6 <_sercom_get_default_pad+0xee>
    1e0a:	2902      	cmp	r1, #2
    1e0c:	d015      	beq.n	1e3a <_sercom_get_default_pad+0x62>
    1e0e:	2903      	cmp	r1, #3
    1e10:	d015      	beq.n	1e3e <_sercom_get_default_pad+0x66>
	return 0;
    1e12:	2000      	movs	r0, #0
    1e14:	e7ee      	b.n	1df4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e16:	2901      	cmp	r1, #1
    1e18:	d007      	beq.n	1e2a <_sercom_get_default_pad+0x52>
    1e1a:	2900      	cmp	r1, #0
    1e1c:	d051      	beq.n	1ec2 <_sercom_get_default_pad+0xea>
    1e1e:	2902      	cmp	r1, #2
    1e20:	d005      	beq.n	1e2e <_sercom_get_default_pad+0x56>
    1e22:	2903      	cmp	r1, #3
    1e24:	d005      	beq.n	1e32 <_sercom_get_default_pad+0x5a>
	return 0;
    1e26:	2000      	movs	r0, #0
    1e28:	e7e4      	b.n	1df4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e2a:	4832      	ldr	r0, [pc, #200]	; (1ef4 <_sercom_get_default_pad+0x11c>)
    1e2c:	e7e2      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e2e:	4832      	ldr	r0, [pc, #200]	; (1ef8 <_sercom_get_default_pad+0x120>)
    1e30:	e7e0      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e32:	4832      	ldr	r0, [pc, #200]	; (1efc <_sercom_get_default_pad+0x124>)
    1e34:	e7de      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e36:	4832      	ldr	r0, [pc, #200]	; (1f00 <_sercom_get_default_pad+0x128>)
    1e38:	e7dc      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e3a:	4832      	ldr	r0, [pc, #200]	; (1f04 <_sercom_get_default_pad+0x12c>)
    1e3c:	e7da      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e3e:	4832      	ldr	r0, [pc, #200]	; (1f08 <_sercom_get_default_pad+0x130>)
    1e40:	e7d8      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e42:	2901      	cmp	r1, #1
    1e44:	d007      	beq.n	1e56 <_sercom_get_default_pad+0x7e>
    1e46:	2900      	cmp	r1, #0
    1e48:	d03f      	beq.n	1eca <_sercom_get_default_pad+0xf2>
    1e4a:	2902      	cmp	r1, #2
    1e4c:	d005      	beq.n	1e5a <_sercom_get_default_pad+0x82>
    1e4e:	2903      	cmp	r1, #3
    1e50:	d005      	beq.n	1e5e <_sercom_get_default_pad+0x86>
	return 0;
    1e52:	2000      	movs	r0, #0
    1e54:	e7ce      	b.n	1df4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e56:	482d      	ldr	r0, [pc, #180]	; (1f0c <_sercom_get_default_pad+0x134>)
    1e58:	e7cc      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e5a:	482d      	ldr	r0, [pc, #180]	; (1f10 <_sercom_get_default_pad+0x138>)
    1e5c:	e7ca      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e5e:	482d      	ldr	r0, [pc, #180]	; (1f14 <_sercom_get_default_pad+0x13c>)
    1e60:	e7c8      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e62:	2901      	cmp	r1, #1
    1e64:	d007      	beq.n	1e76 <_sercom_get_default_pad+0x9e>
    1e66:	2900      	cmp	r1, #0
    1e68:	d031      	beq.n	1ece <_sercom_get_default_pad+0xf6>
    1e6a:	2902      	cmp	r1, #2
    1e6c:	d005      	beq.n	1e7a <_sercom_get_default_pad+0xa2>
    1e6e:	2903      	cmp	r1, #3
    1e70:	d005      	beq.n	1e7e <_sercom_get_default_pad+0xa6>
	return 0;
    1e72:	2000      	movs	r0, #0
    1e74:	e7be      	b.n	1df4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e76:	4828      	ldr	r0, [pc, #160]	; (1f18 <_sercom_get_default_pad+0x140>)
    1e78:	e7bc      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e7a:	4828      	ldr	r0, [pc, #160]	; (1f1c <_sercom_get_default_pad+0x144>)
    1e7c:	e7ba      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e7e:	4828      	ldr	r0, [pc, #160]	; (1f20 <_sercom_get_default_pad+0x148>)
    1e80:	e7b8      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e82:	2901      	cmp	r1, #1
    1e84:	d007      	beq.n	1e96 <_sercom_get_default_pad+0xbe>
    1e86:	2900      	cmp	r1, #0
    1e88:	d023      	beq.n	1ed2 <_sercom_get_default_pad+0xfa>
    1e8a:	2902      	cmp	r1, #2
    1e8c:	d005      	beq.n	1e9a <_sercom_get_default_pad+0xc2>
    1e8e:	2903      	cmp	r1, #3
    1e90:	d005      	beq.n	1e9e <_sercom_get_default_pad+0xc6>
	return 0;
    1e92:	2000      	movs	r0, #0
    1e94:	e7ae      	b.n	1df4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e96:	4823      	ldr	r0, [pc, #140]	; (1f24 <_sercom_get_default_pad+0x14c>)
    1e98:	e7ac      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e9a:	4823      	ldr	r0, [pc, #140]	; (1f28 <_sercom_get_default_pad+0x150>)
    1e9c:	e7aa      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1e9e:	4823      	ldr	r0, [pc, #140]	; (1f2c <_sercom_get_default_pad+0x154>)
    1ea0:	e7a8      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1ea2:	2901      	cmp	r1, #1
    1ea4:	d007      	beq.n	1eb6 <_sercom_get_default_pad+0xde>
    1ea6:	2900      	cmp	r1, #0
    1ea8:	d015      	beq.n	1ed6 <_sercom_get_default_pad+0xfe>
    1eaa:	2902      	cmp	r1, #2
    1eac:	d005      	beq.n	1eba <_sercom_get_default_pad+0xe2>
    1eae:	2903      	cmp	r1, #3
    1eb0:	d005      	beq.n	1ebe <_sercom_get_default_pad+0xe6>
	return 0;
    1eb2:	2000      	movs	r0, #0
    1eb4:	e79e      	b.n	1df4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eb6:	481e      	ldr	r0, [pc, #120]	; (1f30 <_sercom_get_default_pad+0x158>)
    1eb8:	e79c      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1eba:	481e      	ldr	r0, [pc, #120]	; (1f34 <_sercom_get_default_pad+0x15c>)
    1ebc:	e79a      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1ebe:	481e      	ldr	r0, [pc, #120]	; (1f38 <_sercom_get_default_pad+0x160>)
    1ec0:	e798      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1ec2:	481e      	ldr	r0, [pc, #120]	; (1f3c <_sercom_get_default_pad+0x164>)
    1ec4:	e796      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1ec6:	2003      	movs	r0, #3
    1ec8:	e794      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1eca:	481d      	ldr	r0, [pc, #116]	; (1f40 <_sercom_get_default_pad+0x168>)
    1ecc:	e792      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1ece:	481d      	ldr	r0, [pc, #116]	; (1f44 <_sercom_get_default_pad+0x16c>)
    1ed0:	e790      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1ed2:	481d      	ldr	r0, [pc, #116]	; (1f48 <_sercom_get_default_pad+0x170>)
    1ed4:	e78e      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1ed6:	481d      	ldr	r0, [pc, #116]	; (1f4c <_sercom_get_default_pad+0x174>)
    1ed8:	e78c      	b.n	1df4 <_sercom_get_default_pad+0x1c>
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	42001000 	.word	0x42001000
    1ee0:	42001800 	.word	0x42001800
    1ee4:	42001c00 	.word	0x42001c00
    1ee8:	42001400 	.word	0x42001400
    1eec:	42000800 	.word	0x42000800
    1ef0:	42000c00 	.word	0x42000c00
    1ef4:	00050003 	.word	0x00050003
    1ef8:	00060003 	.word	0x00060003
    1efc:	00070003 	.word	0x00070003
    1f00:	00010003 	.word	0x00010003
    1f04:	001e0003 	.word	0x001e0003
    1f08:	001f0003 	.word	0x001f0003
    1f0c:	00090003 	.word	0x00090003
    1f10:	000a0003 	.word	0x000a0003
    1f14:	000b0003 	.word	0x000b0003
    1f18:	00110003 	.word	0x00110003
    1f1c:	00120003 	.word	0x00120003
    1f20:	00130003 	.word	0x00130003
    1f24:	000d0003 	.word	0x000d0003
    1f28:	000e0003 	.word	0x000e0003
    1f2c:	000f0003 	.word	0x000f0003
    1f30:	00170003 	.word	0x00170003
    1f34:	00180003 	.word	0x00180003
    1f38:	00190003 	.word	0x00190003
    1f3c:	00040003 	.word	0x00040003
    1f40:	00080003 	.word	0x00080003
    1f44:	00100003 	.word	0x00100003
    1f48:	000c0003 	.word	0x000c0003
    1f4c:	00160003 	.word	0x00160003

00001f50 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1f50:	b530      	push	{r4, r5, lr}
    1f52:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1f54:	4b0b      	ldr	r3, [pc, #44]	; (1f84 <_sercom_get_sercom_inst_index+0x34>)
    1f56:	466a      	mov	r2, sp
    1f58:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f5a:	c232      	stmia	r2!, {r1, r4, r5}
    1f5c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f5e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1f60:	9b00      	ldr	r3, [sp, #0]
    1f62:	4283      	cmp	r3, r0
    1f64:	d00b      	beq.n	1f7e <_sercom_get_sercom_inst_index+0x2e>
    1f66:	2301      	movs	r3, #1
    1f68:	009a      	lsls	r2, r3, #2
    1f6a:	4669      	mov	r1, sp
    1f6c:	5852      	ldr	r2, [r2, r1]
    1f6e:	4282      	cmp	r2, r0
    1f70:	d006      	beq.n	1f80 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f72:	3301      	adds	r3, #1
    1f74:	2b06      	cmp	r3, #6
    1f76:	d1f7      	bne.n	1f68 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1f78:	2000      	movs	r0, #0
}
    1f7a:	b007      	add	sp, #28
    1f7c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f7e:	2300      	movs	r3, #0
			return i;
    1f80:	b2d8      	uxtb	r0, r3
    1f82:	e7fa      	b.n	1f7a <_sercom_get_sercom_inst_index+0x2a>
    1f84:	00005268 	.word	0x00005268

00001f88 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1f88:	4770      	bx	lr
	...

00001f8c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1f8e:	4b0a      	ldr	r3, [pc, #40]	; (1fb8 <_sercom_set_handler+0x2c>)
    1f90:	781b      	ldrb	r3, [r3, #0]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d10c      	bne.n	1fb0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1f96:	4f09      	ldr	r7, [pc, #36]	; (1fbc <_sercom_set_handler+0x30>)
    1f98:	4e09      	ldr	r6, [pc, #36]	; (1fc0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1f9a:	4d0a      	ldr	r5, [pc, #40]	; (1fc4 <_sercom_set_handler+0x38>)
    1f9c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1f9e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1fa0:	195a      	adds	r2, r3, r5
    1fa2:	6014      	str	r4, [r2, #0]
    1fa4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1fa6:	2b18      	cmp	r3, #24
    1fa8:	d1f9      	bne.n	1f9e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1faa:	2201      	movs	r2, #1
    1fac:	4b02      	ldr	r3, [pc, #8]	; (1fb8 <_sercom_set_handler+0x2c>)
    1fae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1fb0:	0080      	lsls	r0, r0, #2
    1fb2:	4b02      	ldr	r3, [pc, #8]	; (1fbc <_sercom_set_handler+0x30>)
    1fb4:	50c1      	str	r1, [r0, r3]
}
    1fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fb8:	200000ee 	.word	0x200000ee
    1fbc:	200000f0 	.word	0x200000f0
    1fc0:	00001f89 	.word	0x00001f89
    1fc4:	20000ef4 	.word	0x20000ef4

00001fc8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1fc8:	b500      	push	{lr}
    1fca:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1fcc:	2309      	movs	r3, #9
    1fce:	466a      	mov	r2, sp
    1fd0:	7013      	strb	r3, [r2, #0]
    1fd2:	3301      	adds	r3, #1
    1fd4:	7053      	strb	r3, [r2, #1]
    1fd6:	3301      	adds	r3, #1
    1fd8:	7093      	strb	r3, [r2, #2]
    1fda:	3301      	adds	r3, #1
    1fdc:	70d3      	strb	r3, [r2, #3]
    1fde:	3301      	adds	r3, #1
    1fe0:	7113      	strb	r3, [r2, #4]
    1fe2:	3301      	adds	r3, #1
    1fe4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1fe6:	4b03      	ldr	r3, [pc, #12]	; (1ff4 <_sercom_get_interrupt_vector+0x2c>)
    1fe8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1fea:	466b      	mov	r3, sp
    1fec:	5618      	ldrsb	r0, [r3, r0]
}
    1fee:	b003      	add	sp, #12
    1ff0:	bd00      	pop	{pc}
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	00001f51 	.word	0x00001f51

00001ff8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1ff8:	b510      	push	{r4, lr}
    1ffa:	4b02      	ldr	r3, [pc, #8]	; (2004 <STACK_SIZE+0x4>)
    1ffc:	681b      	ldr	r3, [r3, #0]
    1ffe:	2000      	movs	r0, #0
    2000:	4798      	blx	r3
    2002:	bd10      	pop	{r4, pc}
    2004:	200000f0 	.word	0x200000f0

00002008 <SERCOM1_Handler>:
    2008:	b510      	push	{r4, lr}
    200a:	4b02      	ldr	r3, [pc, #8]	; (2014 <SERCOM1_Handler+0xc>)
    200c:	685b      	ldr	r3, [r3, #4]
    200e:	2001      	movs	r0, #1
    2010:	4798      	blx	r3
    2012:	bd10      	pop	{r4, pc}
    2014:	200000f0 	.word	0x200000f0

00002018 <SERCOM2_Handler>:
    2018:	b510      	push	{r4, lr}
    201a:	4b02      	ldr	r3, [pc, #8]	; (2024 <SERCOM2_Handler+0xc>)
    201c:	689b      	ldr	r3, [r3, #8]
    201e:	2002      	movs	r0, #2
    2020:	4798      	blx	r3
    2022:	bd10      	pop	{r4, pc}
    2024:	200000f0 	.word	0x200000f0

00002028 <SERCOM3_Handler>:
    2028:	b510      	push	{r4, lr}
    202a:	4b02      	ldr	r3, [pc, #8]	; (2034 <SERCOM3_Handler+0xc>)
    202c:	68db      	ldr	r3, [r3, #12]
    202e:	2003      	movs	r0, #3
    2030:	4798      	blx	r3
    2032:	bd10      	pop	{r4, pc}
    2034:	200000f0 	.word	0x200000f0

00002038 <SERCOM4_Handler>:
    2038:	b510      	push	{r4, lr}
    203a:	4b02      	ldr	r3, [pc, #8]	; (2044 <SERCOM4_Handler+0xc>)
    203c:	691b      	ldr	r3, [r3, #16]
    203e:	2004      	movs	r0, #4
    2040:	4798      	blx	r3
    2042:	bd10      	pop	{r4, pc}
    2044:	200000f0 	.word	0x200000f0

00002048 <SERCOM5_Handler>:
    2048:	b510      	push	{r4, lr}
    204a:	4b02      	ldr	r3, [pc, #8]	; (2054 <SERCOM5_Handler+0xc>)
    204c:	695b      	ldr	r3, [r3, #20]
    204e:	2005      	movs	r0, #5
    2050:	4798      	blx	r3
    2052:	bd10      	pop	{r4, pc}
    2054:	200000f0 	.word	0x200000f0

00002058 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2058:	b5f0      	push	{r4, r5, r6, r7, lr}
    205a:	46de      	mov	lr, fp
    205c:	4657      	mov	r7, sl
    205e:	464e      	mov	r6, r9
    2060:	4645      	mov	r5, r8
    2062:	b5e0      	push	{r5, r6, r7, lr}
    2064:	b091      	sub	sp, #68	; 0x44
    2066:	0005      	movs	r5, r0
    2068:	000c      	movs	r4, r1
    206a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    206c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    206e:	0008      	movs	r0, r1
    2070:	4bbc      	ldr	r3, [pc, #752]	; (2364 <usart_init+0x30c>)
    2072:	4798      	blx	r3
    2074:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2076:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2078:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    207a:	07db      	lsls	r3, r3, #31
    207c:	d506      	bpl.n	208c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    207e:	b011      	add	sp, #68	; 0x44
    2080:	bc3c      	pop	{r2, r3, r4, r5}
    2082:	4690      	mov	r8, r2
    2084:	4699      	mov	r9, r3
    2086:	46a2      	mov	sl, r4
    2088:	46ab      	mov	fp, r5
    208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    208c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    208e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2090:	079b      	lsls	r3, r3, #30
    2092:	d4f4      	bmi.n	207e <usart_init+0x26>
    2094:	49b4      	ldr	r1, [pc, #720]	; (2368 <usart_init+0x310>)
    2096:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2098:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    209a:	2301      	movs	r3, #1
    209c:	40bb      	lsls	r3, r7
    209e:	4303      	orrs	r3, r0
    20a0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    20a2:	a90f      	add	r1, sp, #60	; 0x3c
    20a4:	272d      	movs	r7, #45	; 0x2d
    20a6:	5df3      	ldrb	r3, [r6, r7]
    20a8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    20aa:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    20ac:	b2d3      	uxtb	r3, r2
    20ae:	9302      	str	r3, [sp, #8]
    20b0:	0018      	movs	r0, r3
    20b2:	4bae      	ldr	r3, [pc, #696]	; (236c <usart_init+0x314>)
    20b4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    20b6:	9802      	ldr	r0, [sp, #8]
    20b8:	4bad      	ldr	r3, [pc, #692]	; (2370 <usart_init+0x318>)
    20ba:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    20bc:	5df0      	ldrb	r0, [r6, r7]
    20be:	2100      	movs	r1, #0
    20c0:	4bac      	ldr	r3, [pc, #688]	; (2374 <usart_init+0x31c>)
    20c2:	4798      	blx	r3
	module->character_size = config->character_size;
    20c4:	7af3      	ldrb	r3, [r6, #11]
    20c6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    20c8:	2324      	movs	r3, #36	; 0x24
    20ca:	5cf3      	ldrb	r3, [r6, r3]
    20cc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    20ce:	2325      	movs	r3, #37	; 0x25
    20d0:	5cf3      	ldrb	r3, [r6, r3]
    20d2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    20d4:	7ef3      	ldrb	r3, [r6, #27]
    20d6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    20d8:	7f33      	ldrb	r3, [r6, #28]
    20da:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    20dc:	682b      	ldr	r3, [r5, #0]
    20de:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    20e0:	0018      	movs	r0, r3
    20e2:	4ba0      	ldr	r3, [pc, #640]	; (2364 <usart_init+0x30c>)
    20e4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    20e6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    20e8:	2200      	movs	r2, #0
    20ea:	230e      	movs	r3, #14
    20ec:	a906      	add	r1, sp, #24
    20ee:	468c      	mov	ip, r1
    20f0:	4463      	add	r3, ip
    20f2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    20f4:	8a32      	ldrh	r2, [r6, #16]
    20f6:	9202      	str	r2, [sp, #8]
    20f8:	2380      	movs	r3, #128	; 0x80
    20fa:	01db      	lsls	r3, r3, #7
    20fc:	429a      	cmp	r2, r3
    20fe:	d100      	bne.n	2102 <usart_init+0xaa>
    2100:	e09e      	b.n	2240 <usart_init+0x1e8>
    2102:	d90f      	bls.n	2124 <usart_init+0xcc>
    2104:	23c0      	movs	r3, #192	; 0xc0
    2106:	01db      	lsls	r3, r3, #7
    2108:	9a02      	ldr	r2, [sp, #8]
    210a:	429a      	cmp	r2, r3
    210c:	d100      	bne.n	2110 <usart_init+0xb8>
    210e:	e092      	b.n	2236 <usart_init+0x1de>
    2110:	2380      	movs	r3, #128	; 0x80
    2112:	021b      	lsls	r3, r3, #8
    2114:	429a      	cmp	r2, r3
    2116:	d000      	beq.n	211a <usart_init+0xc2>
    2118:	e11f      	b.n	235a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    211a:	2303      	movs	r3, #3
    211c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    211e:	2300      	movs	r3, #0
    2120:	9307      	str	r3, [sp, #28]
    2122:	e008      	b.n	2136 <usart_init+0xde>
	switch (config->sample_rate) {
    2124:	2380      	movs	r3, #128	; 0x80
    2126:	019b      	lsls	r3, r3, #6
    2128:	429a      	cmp	r2, r3
    212a:	d000      	beq.n	212e <usart_init+0xd6>
    212c:	e115      	b.n	235a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    212e:	2310      	movs	r3, #16
    2130:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2132:	3b0f      	subs	r3, #15
    2134:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2136:	6833      	ldr	r3, [r6, #0]
    2138:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    213a:	68f3      	ldr	r3, [r6, #12]
    213c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    213e:	6973      	ldr	r3, [r6, #20]
    2140:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2142:	7e33      	ldrb	r3, [r6, #24]
    2144:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2146:	2326      	movs	r3, #38	; 0x26
    2148:	5cf3      	ldrb	r3, [r6, r3]
    214a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    214c:	6873      	ldr	r3, [r6, #4]
    214e:	4699      	mov	r9, r3
	switch (transfer_mode)
    2150:	2b00      	cmp	r3, #0
    2152:	d100      	bne.n	2156 <usart_init+0xfe>
    2154:	e0a0      	b.n	2298 <usart_init+0x240>
    2156:	2380      	movs	r3, #128	; 0x80
    2158:	055b      	lsls	r3, r3, #21
    215a:	4599      	cmp	r9, r3
    215c:	d100      	bne.n	2160 <usart_init+0x108>
    215e:	e084      	b.n	226a <usart_init+0x212>
	if(config->encoding_format_enable) {
    2160:	7e73      	ldrb	r3, [r6, #25]
    2162:	2b00      	cmp	r3, #0
    2164:	d002      	beq.n	216c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2166:	7eb3      	ldrb	r3, [r6, #26]
    2168:	4642      	mov	r2, r8
    216a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    216c:	682a      	ldr	r2, [r5, #0]
    216e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2170:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2172:	2b00      	cmp	r3, #0
    2174:	d1fc      	bne.n	2170 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    2176:	330e      	adds	r3, #14
    2178:	aa06      	add	r2, sp, #24
    217a:	4694      	mov	ip, r2
    217c:	4463      	add	r3, ip
    217e:	881b      	ldrh	r3, [r3, #0]
    2180:	4642      	mov	r2, r8
    2182:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2184:	9b05      	ldr	r3, [sp, #20]
    2186:	9a03      	ldr	r2, [sp, #12]
    2188:	4313      	orrs	r3, r2
    218a:	9a04      	ldr	r2, [sp, #16]
    218c:	4313      	orrs	r3, r2
    218e:	464a      	mov	r2, r9
    2190:	4313      	orrs	r3, r2
    2192:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2194:	465b      	mov	r3, fp
    2196:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2198:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    219a:	4653      	mov	r3, sl
    219c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    219e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    21a0:	2327      	movs	r3, #39	; 0x27
    21a2:	5cf3      	ldrb	r3, [r6, r3]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d101      	bne.n	21ac <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    21a8:	3304      	adds	r3, #4
    21aa:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    21ac:	7e73      	ldrb	r3, [r6, #25]
    21ae:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    21b0:	7f32      	ldrb	r2, [r6, #28]
    21b2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    21b4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    21b6:	7f72      	ldrb	r2, [r6, #29]
    21b8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    21ba:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    21bc:	2224      	movs	r2, #36	; 0x24
    21be:	5cb2      	ldrb	r2, [r6, r2]
    21c0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    21c2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    21c4:	2225      	movs	r2, #37	; 0x25
    21c6:	5cb2      	ldrb	r2, [r6, r2]
    21c8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    21ca:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    21cc:	7ab1      	ldrb	r1, [r6, #10]
    21ce:	7af2      	ldrb	r2, [r6, #11]
    21d0:	4311      	orrs	r1, r2
    21d2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    21d4:	8933      	ldrh	r3, [r6, #8]
    21d6:	2bff      	cmp	r3, #255	; 0xff
    21d8:	d100      	bne.n	21dc <usart_init+0x184>
    21da:	e081      	b.n	22e0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    21dc:	2280      	movs	r2, #128	; 0x80
    21de:	0452      	lsls	r2, r2, #17
    21e0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    21e2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    21e4:	232c      	movs	r3, #44	; 0x2c
    21e6:	5cf3      	ldrb	r3, [r6, r3]
    21e8:	2b00      	cmp	r3, #0
    21ea:	d103      	bne.n	21f4 <usart_init+0x19c>
    21ec:	4b62      	ldr	r3, [pc, #392]	; (2378 <usart_init+0x320>)
    21ee:	789b      	ldrb	r3, [r3, #2]
    21f0:	079b      	lsls	r3, r3, #30
    21f2:	d501      	bpl.n	21f8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    21f4:	2380      	movs	r3, #128	; 0x80
    21f6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    21f8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    21fa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    21fc:	2b00      	cmp	r3, #0
    21fe:	d1fc      	bne.n	21fa <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2200:	4643      	mov	r3, r8
    2202:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2204:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2206:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2208:	2b00      	cmp	r3, #0
    220a:	d1fc      	bne.n	2206 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    220c:	4643      	mov	r3, r8
    220e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2210:	ab0e      	add	r3, sp, #56	; 0x38
    2212:	2280      	movs	r2, #128	; 0x80
    2214:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2216:	2200      	movs	r2, #0
    2218:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    221a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    221c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    221e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2220:	930a      	str	r3, [sp, #40]	; 0x28
    2222:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2224:	930b      	str	r3, [sp, #44]	; 0x2c
    2226:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2228:	930c      	str	r3, [sp, #48]	; 0x30
    222a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    222c:	9302      	str	r3, [sp, #8]
    222e:	930d      	str	r3, [sp, #52]	; 0x34
    2230:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2232:	ae0a      	add	r6, sp, #40	; 0x28
    2234:	e063      	b.n	22fe <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2236:	2308      	movs	r3, #8
    2238:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    223a:	3b07      	subs	r3, #7
    223c:	9307      	str	r3, [sp, #28]
    223e:	e77a      	b.n	2136 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2240:	6833      	ldr	r3, [r6, #0]
    2242:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2244:	68f3      	ldr	r3, [r6, #12]
    2246:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2248:	6973      	ldr	r3, [r6, #20]
    224a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    224c:	7e33      	ldrb	r3, [r6, #24]
    224e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2250:	2326      	movs	r3, #38	; 0x26
    2252:	5cf3      	ldrb	r3, [r6, r3]
    2254:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2256:	6873      	ldr	r3, [r6, #4]
    2258:	4699      	mov	r9, r3
	switch (transfer_mode)
    225a:	2b00      	cmp	r3, #0
    225c:	d018      	beq.n	2290 <usart_init+0x238>
    225e:	2380      	movs	r3, #128	; 0x80
    2260:	055b      	lsls	r3, r3, #21
    2262:	4599      	cmp	r9, r3
    2264:	d001      	beq.n	226a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2266:	2000      	movs	r0, #0
    2268:	e025      	b.n	22b6 <usart_init+0x25e>
			if (!config->use_external_clock) {
    226a:	2327      	movs	r3, #39	; 0x27
    226c:	5cf3      	ldrb	r3, [r6, r3]
    226e:	2b00      	cmp	r3, #0
    2270:	d000      	beq.n	2274 <usart_init+0x21c>
    2272:	e775      	b.n	2160 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2274:	6a33      	ldr	r3, [r6, #32]
    2276:	001f      	movs	r7, r3
    2278:	b2c0      	uxtb	r0, r0
    227a:	4b40      	ldr	r3, [pc, #256]	; (237c <usart_init+0x324>)
    227c:	4798      	blx	r3
    227e:	0001      	movs	r1, r0
    2280:	220e      	movs	r2, #14
    2282:	ab06      	add	r3, sp, #24
    2284:	469c      	mov	ip, r3
    2286:	4462      	add	r2, ip
    2288:	0038      	movs	r0, r7
    228a:	4b3d      	ldr	r3, [pc, #244]	; (2380 <usart_init+0x328>)
    228c:	4798      	blx	r3
    228e:	e012      	b.n	22b6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2290:	2308      	movs	r3, #8
    2292:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2294:	2300      	movs	r3, #0
    2296:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2298:	2327      	movs	r3, #39	; 0x27
    229a:	5cf3      	ldrb	r3, [r6, r3]
    229c:	2b00      	cmp	r3, #0
    229e:	d00e      	beq.n	22be <usart_init+0x266>
				status_code =
    22a0:	9b06      	ldr	r3, [sp, #24]
    22a2:	9300      	str	r3, [sp, #0]
    22a4:	9b07      	ldr	r3, [sp, #28]
    22a6:	220e      	movs	r2, #14
    22a8:	a906      	add	r1, sp, #24
    22aa:	468c      	mov	ip, r1
    22ac:	4462      	add	r2, ip
    22ae:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    22b0:	6a30      	ldr	r0, [r6, #32]
    22b2:	4f34      	ldr	r7, [pc, #208]	; (2384 <usart_init+0x32c>)
    22b4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    22b6:	2800      	cmp	r0, #0
    22b8:	d000      	beq.n	22bc <usart_init+0x264>
    22ba:	e6e0      	b.n	207e <usart_init+0x26>
    22bc:	e750      	b.n	2160 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    22be:	6a33      	ldr	r3, [r6, #32]
    22c0:	001f      	movs	r7, r3
    22c2:	b2c0      	uxtb	r0, r0
    22c4:	4b2d      	ldr	r3, [pc, #180]	; (237c <usart_init+0x324>)
    22c6:	4798      	blx	r3
    22c8:	0001      	movs	r1, r0
				status_code =
    22ca:	9b06      	ldr	r3, [sp, #24]
    22cc:	9300      	str	r3, [sp, #0]
    22ce:	9b07      	ldr	r3, [sp, #28]
    22d0:	220e      	movs	r2, #14
    22d2:	a806      	add	r0, sp, #24
    22d4:	4684      	mov	ip, r0
    22d6:	4462      	add	r2, ip
    22d8:	0038      	movs	r0, r7
    22da:	4f2a      	ldr	r7, [pc, #168]	; (2384 <usart_init+0x32c>)
    22dc:	47b8      	blx	r7
    22de:	e7ea      	b.n	22b6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    22e0:	7ef3      	ldrb	r3, [r6, #27]
    22e2:	2b00      	cmp	r3, #0
    22e4:	d100      	bne.n	22e8 <usart_init+0x290>
    22e6:	e77d      	b.n	21e4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    22e8:	2380      	movs	r3, #128	; 0x80
    22ea:	04db      	lsls	r3, r3, #19
    22ec:	431f      	orrs	r7, r3
    22ee:	e779      	b.n	21e4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    22f0:	0020      	movs	r0, r4
    22f2:	4b25      	ldr	r3, [pc, #148]	; (2388 <usart_init+0x330>)
    22f4:	4798      	blx	r3
    22f6:	e007      	b.n	2308 <usart_init+0x2b0>
    22f8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    22fa:	2f04      	cmp	r7, #4
    22fc:	d00d      	beq.n	231a <usart_init+0x2c2>
    22fe:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2300:	00bb      	lsls	r3, r7, #2
    2302:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2304:	2800      	cmp	r0, #0
    2306:	d0f3      	beq.n	22f0 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2308:	1c43      	adds	r3, r0, #1
    230a:	d0f5      	beq.n	22f8 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    230c:	a90e      	add	r1, sp, #56	; 0x38
    230e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2310:	0c00      	lsrs	r0, r0, #16
    2312:	b2c0      	uxtb	r0, r0
    2314:	4b1d      	ldr	r3, [pc, #116]	; (238c <usart_init+0x334>)
    2316:	4798      	blx	r3
    2318:	e7ee      	b.n	22f8 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    231a:	2300      	movs	r3, #0
    231c:	60eb      	str	r3, [r5, #12]
    231e:	612b      	str	r3, [r5, #16]
    2320:	616b      	str	r3, [r5, #20]
    2322:	61ab      	str	r3, [r5, #24]
    2324:	61eb      	str	r3, [r5, #28]
    2326:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2328:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    232a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    232c:	2200      	movs	r2, #0
    232e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2330:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2332:	3330      	adds	r3, #48	; 0x30
    2334:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2336:	3301      	adds	r3, #1
    2338:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    233a:	3301      	adds	r3, #1
    233c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    233e:	3301      	adds	r3, #1
    2340:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2342:	6828      	ldr	r0, [r5, #0]
    2344:	4b07      	ldr	r3, [pc, #28]	; (2364 <usart_init+0x30c>)
    2346:	4798      	blx	r3
    2348:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    234a:	4911      	ldr	r1, [pc, #68]	; (2390 <usart_init+0x338>)
    234c:	4b11      	ldr	r3, [pc, #68]	; (2394 <usart_init+0x33c>)
    234e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2350:	00a4      	lsls	r4, r4, #2
    2352:	4b11      	ldr	r3, [pc, #68]	; (2398 <usart_init+0x340>)
    2354:	50e5      	str	r5, [r4, r3]
	return status_code;
    2356:	2000      	movs	r0, #0
    2358:	e691      	b.n	207e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    235a:	2310      	movs	r3, #16
    235c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    235e:	2300      	movs	r3, #0
    2360:	9307      	str	r3, [sp, #28]
    2362:	e6e8      	b.n	2136 <usart_init+0xde>
    2364:	00001f51 	.word	0x00001f51
    2368:	40000400 	.word	0x40000400
    236c:	00003291 	.word	0x00003291
    2370:	00003205 	.word	0x00003205
    2374:	00001d8d 	.word	0x00001d8d
    2378:	41002000 	.word	0x41002000
    237c:	000032ad 	.word	0x000032ad
    2380:	00001ccf 	.word	0x00001ccf
    2384:	00001cf9 	.word	0x00001cf9
    2388:	00001dd9 	.word	0x00001dd9
    238c:	00003389 	.word	0x00003389
    2390:	00002511 	.word	0x00002511
    2394:	00001f8d 	.word	0x00001f8d
    2398:	20000ef4 	.word	0x20000ef4

0000239c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    239c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    239e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    23a0:	2a00      	cmp	r2, #0
    23a2:	d101      	bne.n	23a8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    23a4:	0018      	movs	r0, r3
    23a6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    23a8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    23aa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    23ac:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    23ae:	2a00      	cmp	r2, #0
    23b0:	d1f8      	bne.n	23a4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    23b2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    23b4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    23b6:	2a00      	cmp	r2, #0
    23b8:	d1fc      	bne.n	23b4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    23ba:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    23bc:	2102      	movs	r1, #2
    23be:	7e1a      	ldrb	r2, [r3, #24]
    23c0:	420a      	tst	r2, r1
    23c2:	d0fc      	beq.n	23be <usart_write_wait+0x22>
	return STATUS_OK;
    23c4:	2300      	movs	r3, #0
    23c6:	e7ed      	b.n	23a4 <usart_write_wait+0x8>

000023c8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    23c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ca:	46ce      	mov	lr, r9
    23cc:	4647      	mov	r7, r8
    23ce:	b580      	push	{r7, lr}
    23d0:	b083      	sub	sp, #12
    23d2:	0005      	movs	r5, r0
    23d4:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    23d6:	2017      	movs	r0, #23
	if (length == 0) {
    23d8:	2a00      	cmp	r2, #0
    23da:	d104      	bne.n	23e6 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    23dc:	b003      	add	sp, #12
    23de:	bc0c      	pop	{r2, r3}
    23e0:	4690      	mov	r8, r2
    23e2:	4699      	mov	r9, r3
    23e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    23e6:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    23e8:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    23ea:	2b00      	cmp	r3, #0
    23ec:	d0f6      	beq.n	23dc <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    23ee:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    23f0:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    23f2:	2b00      	cmp	r3, #0
    23f4:	d1fc      	bne.n	23f0 <usart_write_buffer_wait+0x28>
	while (length--) {
    23f6:	3a01      	subs	r2, #1
    23f8:	b293      	uxth	r3, r2
    23fa:	4699      	mov	r9, r3
    23fc:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    23fe:	2701      	movs	r7, #1
	while (length--) {
    2400:	4b1f      	ldr	r3, [pc, #124]	; (2480 <usart_write_buffer_wait+0xb8>)
    2402:	4698      	mov	r8, r3
    2404:	e011      	b.n	242a <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    2406:	1c73      	adds	r3, r6, #1
    2408:	b29b      	uxth	r3, r3
    240a:	9a01      	ldr	r2, [sp, #4]
    240c:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    240e:	796a      	ldrb	r2, [r5, #5]
    2410:	2a01      	cmp	r2, #1
    2412:	d017      	beq.n	2444 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    2414:	b289      	uxth	r1, r1
    2416:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    2418:	0028      	movs	r0, r5
    241a:	4b1a      	ldr	r3, [pc, #104]	; (2484 <usart_write_buffer_wait+0xbc>)
    241c:	4798      	blx	r3
	while (length--) {
    241e:	464b      	mov	r3, r9
    2420:	3b01      	subs	r3, #1
    2422:	b29b      	uxth	r3, r3
    2424:	4699      	mov	r9, r3
    2426:	4543      	cmp	r3, r8
    2428:	d013      	beq.n	2452 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    242a:	7e23      	ldrb	r3, [r4, #24]
    242c:	423b      	tst	r3, r7
    242e:	d1ea      	bne.n	2406 <usart_write_buffer_wait+0x3e>
    2430:	4b13      	ldr	r3, [pc, #76]	; (2480 <usart_write_buffer_wait+0xb8>)
    2432:	7e22      	ldrb	r2, [r4, #24]
    2434:	423a      	tst	r2, r7
    2436:	d1e6      	bne.n	2406 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    2438:	2b01      	cmp	r3, #1
    243a:	d019      	beq.n	2470 <usart_write_buffer_wait+0xa8>
    243c:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    243e:	2b00      	cmp	r3, #0
    2440:	d1f7      	bne.n	2432 <usart_write_buffer_wait+0x6a>
    2442:	e7e0      	b.n	2406 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2444:	3602      	adds	r6, #2
    2446:	b2b6      	uxth	r6, r6
    2448:	9a01      	ldr	r2, [sp, #4]
    244a:	5cd3      	ldrb	r3, [r2, r3]
    244c:	021b      	lsls	r3, r3, #8
    244e:	4319      	orrs	r1, r3
    2450:	e7e2      	b.n	2418 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    2452:	7e23      	ldrb	r3, [r4, #24]
    2454:	079b      	lsls	r3, r3, #30
    2456:	d40d      	bmi.n	2474 <usart_write_buffer_wait+0xac>
    2458:	4b09      	ldr	r3, [pc, #36]	; (2480 <usart_write_buffer_wait+0xb8>)
    245a:	2102      	movs	r1, #2
    245c:	7e22      	ldrb	r2, [r4, #24]
    245e:	420a      	tst	r2, r1
    2460:	d10a      	bne.n	2478 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    2462:	2b01      	cmp	r3, #1
    2464:	d00a      	beq.n	247c <usart_write_buffer_wait+0xb4>
    2466:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2468:	2b00      	cmp	r3, #0
    246a:	d1f7      	bne.n	245c <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    246c:	2000      	movs	r0, #0
    246e:	e7b5      	b.n	23dc <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    2470:	2012      	movs	r0, #18
    2472:	e7b3      	b.n	23dc <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    2474:	2000      	movs	r0, #0
    2476:	e7b1      	b.n	23dc <usart_write_buffer_wait+0x14>
    2478:	2000      	movs	r0, #0
    247a:	e7af      	b.n	23dc <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    247c:	2012      	movs	r0, #18
    247e:	e7ad      	b.n	23dc <usart_write_buffer_wait+0x14>
    2480:	0000ffff 	.word	0x0000ffff
    2484:	0000239d 	.word	0x0000239d

00002488 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    248a:	0004      	movs	r4, r0
    248c:	000d      	movs	r5, r1
    248e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2490:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2492:	4b0f      	ldr	r3, [pc, #60]	; (24d0 <_usart_read_buffer+0x48>)
    2494:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2496:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2498:	b29b      	uxth	r3, r3
    249a:	2b00      	cmp	r3, #0
    249c:	d003      	beq.n	24a6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    249e:	4b0d      	ldr	r3, [pc, #52]	; (24d4 <_usart_read_buffer+0x4c>)
    24a0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    24a2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    24a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    24a6:	85a6      	strh	r6, [r4, #44]	; 0x2c
    24a8:	4b0a      	ldr	r3, [pc, #40]	; (24d4 <_usart_read_buffer+0x4c>)
    24aa:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    24ac:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    24ae:	2205      	movs	r2, #5
    24b0:	2332      	movs	r3, #50	; 0x32
    24b2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    24b4:	3b2e      	subs	r3, #46	; 0x2e
    24b6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    24b8:	7a23      	ldrb	r3, [r4, #8]
    24ba:	2b00      	cmp	r3, #0
    24bc:	d001      	beq.n	24c2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    24be:	2320      	movs	r3, #32
    24c0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    24c2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    24c4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    24c6:	2b00      	cmp	r3, #0
    24c8:	d0ec      	beq.n	24a4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    24ca:	2308      	movs	r3, #8
    24cc:	75bb      	strb	r3, [r7, #22]
    24ce:	e7e9      	b.n	24a4 <_usart_read_buffer+0x1c>
    24d0:	00002ddd 	.word	0x00002ddd
    24d4:	00002e1d 	.word	0x00002e1d

000024d8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    24d8:	1c93      	adds	r3, r2, #2
    24da:	009b      	lsls	r3, r3, #2
    24dc:	18c3      	adds	r3, r0, r3
    24de:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    24e0:	2130      	movs	r1, #48	; 0x30
    24e2:	2301      	movs	r3, #1
    24e4:	4093      	lsls	r3, r2
    24e6:	001a      	movs	r2, r3
    24e8:	5c43      	ldrb	r3, [r0, r1]
    24ea:	4313      	orrs	r3, r2
    24ec:	5443      	strb	r3, [r0, r1]
}
    24ee:	4770      	bx	lr

000024f0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    24f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    24f2:	2317      	movs	r3, #23
	if (length == 0) {
    24f4:	2a00      	cmp	r2, #0
    24f6:	d101      	bne.n	24fc <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    24f8:	0018      	movs	r0, r3
    24fa:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    24fc:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    24fe:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2500:	2c00      	cmp	r4, #0
    2502:	d0f9      	beq.n	24f8 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2504:	4b01      	ldr	r3, [pc, #4]	; (250c <usart_read_buffer_job+0x1c>)
    2506:	4798      	blx	r3
    2508:	0003      	movs	r3, r0
    250a:	e7f5      	b.n	24f8 <usart_read_buffer_job+0x8>
    250c:	00002489 	.word	0x00002489

00002510 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2512:	0080      	lsls	r0, r0, #2
    2514:	4b51      	ldr	r3, [pc, #324]	; (265c <_usart_interrupt_handler+0x14c>)
    2516:	58c6      	ldr	r6, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2518:	6834      	ldr	r4, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    251a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    251c:	2b00      	cmp	r3, #0
    251e:	d1fc      	bne.n	251a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2520:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2522:	7da5      	ldrb	r5, [r4, #22]
    2524:	401d      	ands	r5, r3
	callback_status = module->callback_reg_mask &
    2526:	2330      	movs	r3, #48	; 0x30
    2528:	5cf3      	ldrb	r3, [r6, r3]
    252a:	2231      	movs	r2, #49	; 0x31
    252c:	5cb7      	ldrb	r7, [r6, r2]
    252e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2530:	07eb      	lsls	r3, r5, #31
    2532:	d522      	bpl.n	257a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2534:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2536:	b29b      	uxth	r3, r3
    2538:	2b00      	cmp	r3, #0
    253a:	d01c      	beq.n	2576 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    253c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    253e:	7813      	ldrb	r3, [r2, #0]
    2540:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2542:	1c51      	adds	r1, r2, #1
    2544:	62b1      	str	r1, [r6, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2546:	7971      	ldrb	r1, [r6, #5]
    2548:	2901      	cmp	r1, #1
    254a:	d00e      	beq.n	256a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    254c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    254e:	05db      	lsls	r3, r3, #23
    2550:	0ddb      	lsrs	r3, r3, #23
    2552:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2554:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2556:	3b01      	subs	r3, #1
    2558:	b29b      	uxth	r3, r3
    255a:	85f3      	strh	r3, [r6, #46]	; 0x2e
    255c:	2b00      	cmp	r3, #0
    255e:	d10c      	bne.n	257a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2560:	3301      	adds	r3, #1
    2562:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2564:	3301      	adds	r3, #1
    2566:	75a3      	strb	r3, [r4, #22]
    2568:	e007      	b.n	257a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    256a:	7851      	ldrb	r1, [r2, #1]
    256c:	0209      	lsls	r1, r1, #8
    256e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2570:	3202      	adds	r2, #2
    2572:	62b2      	str	r2, [r6, #40]	; 0x28
    2574:	e7eb      	b.n	254e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2576:	2301      	movs	r3, #1
    2578:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    257a:	07ab      	lsls	r3, r5, #30
    257c:	d506      	bpl.n	258c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    257e:	2302      	movs	r3, #2
    2580:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2582:	2200      	movs	r2, #0
    2584:	3331      	adds	r3, #49	; 0x31
    2586:	54f2      	strb	r2, [r6, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2588:	07fb      	lsls	r3, r7, #31
    258a:	d428      	bmi.n	25de <_usart_interrupt_handler+0xce>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    258c:	076b      	lsls	r3, r5, #29
    258e:	d510      	bpl.n	25b2 <_usart_interrupt_handler+0xa2>

		//if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2590:	8b63      	ldrh	r3, [r4, #26]
    2592:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2594:	071a      	lsls	r2, r3, #28
    2596:	d426      	bmi.n	25e6 <_usart_interrupt_handler+0xd6>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2598:	223f      	movs	r2, #63	; 0x3f
    259a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) 
    259c:	2b00      	cmp	r3, #0
    259e:	d04a      	beq.n	2636 <_usart_interrupt_handler+0x126>
			{
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    25a0:	079a      	lsls	r2, r3, #30
    25a2:	d523      	bpl.n	25ec <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    25a4:	221a      	movs	r2, #26
    25a6:	2332      	movs	r3, #50	; 0x32
    25a8:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    25aa:	3b30      	subs	r3, #48	; 0x30
    25ac:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    25ae:	077b      	lsls	r3, r7, #29
    25b0:	d43d      	bmi.n	262e <_usart_interrupt_handler+0x11e>
			//usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		//}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    25b2:	06eb      	lsls	r3, r5, #27
    25b4:	d504      	bpl.n	25c0 <_usart_interrupt_handler+0xb0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    25b6:	2310      	movs	r3, #16
    25b8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    25ba:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    25bc:	06fb      	lsls	r3, r7, #27
    25be:	d440      	bmi.n	2642 <_usart_interrupt_handler+0x132>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    25c0:	06ab      	lsls	r3, r5, #26
    25c2:	d504      	bpl.n	25ce <_usart_interrupt_handler+0xbe>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    25c4:	2320      	movs	r3, #32
    25c6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    25c8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    25ca:	073b      	lsls	r3, r7, #28
    25cc:	d43d      	bmi.n	264a <_usart_interrupt_handler+0x13a>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    25ce:	072b      	lsls	r3, r5, #28
    25d0:	d504      	bpl.n	25dc <_usart_interrupt_handler+0xcc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    25d2:	2308      	movs	r3, #8
    25d4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    25d6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    25d8:	06bb      	lsls	r3, r7, #26
    25da:	d43a      	bmi.n	2652 <_usart_interrupt_handler+0x142>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    25dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    25de:	0030      	movs	r0, r6
    25e0:	68f3      	ldr	r3, [r6, #12]
    25e2:	4798      	blx	r3
    25e4:	e7d2      	b.n	258c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    25e6:	2237      	movs	r2, #55	; 0x37
    25e8:	4013      	ands	r3, r2
    25ea:	e7d7      	b.n	259c <_usart_interrupt_handler+0x8c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    25ec:	075a      	lsls	r2, r3, #29
    25ee:	d505      	bpl.n	25fc <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_OVERFLOW;
    25f0:	221e      	movs	r2, #30
    25f2:	2332      	movs	r3, #50	; 0x32
    25f4:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    25f6:	3b2e      	subs	r3, #46	; 0x2e
    25f8:	8363      	strh	r3, [r4, #26]
    25fa:	e7d8      	b.n	25ae <_usart_interrupt_handler+0x9e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    25fc:	07da      	lsls	r2, r3, #31
    25fe:	d505      	bpl.n	260c <_usart_interrupt_handler+0xfc>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2600:	2213      	movs	r2, #19
    2602:	2332      	movs	r3, #50	; 0x32
    2604:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2606:	3b31      	subs	r3, #49	; 0x31
    2608:	8363      	strh	r3, [r4, #26]
    260a:	e7d0      	b.n	25ae <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    260c:	06da      	lsls	r2, r3, #27
    260e:	d505      	bpl.n	261c <_usart_interrupt_handler+0x10c>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2610:	2242      	movs	r2, #66	; 0x42
    2612:	2332      	movs	r3, #50	; 0x32
    2614:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2616:	3b22      	subs	r3, #34	; 0x22
    2618:	8363      	strh	r3, [r4, #26]
    261a:	e7c8      	b.n	25ae <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    261c:	2220      	movs	r2, #32
    261e:	421a      	tst	r2, r3
    2620:	d0c5      	beq.n	25ae <_usart_interrupt_handler+0x9e>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2622:	3221      	adds	r2, #33	; 0x21
    2624:	2332      	movs	r3, #50	; 0x32
    2626:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2628:	3b12      	subs	r3, #18
    262a:	8363      	strh	r3, [r4, #26]
    262c:	e7bf      	b.n	25ae <_usart_interrupt_handler+0x9e>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    262e:	0030      	movs	r0, r6
    2630:	6973      	ldr	r3, [r6, #20]
    2632:	4798      	blx	r3
    2634:	e7bd      	b.n	25b2 <_usart_interrupt_handler+0xa2>
				if (callback_status
    2636:	07bb      	lsls	r3, r7, #30
    2638:	d5bb      	bpl.n	25b2 <_usart_interrupt_handler+0xa2>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    263a:	0030      	movs	r0, r6
    263c:	6933      	ldr	r3, [r6, #16]
    263e:	4798      	blx	r3
    2640:	e7b7      	b.n	25b2 <_usart_interrupt_handler+0xa2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2642:	0030      	movs	r0, r6
    2644:	69f3      	ldr	r3, [r6, #28]
    2646:	4798      	blx	r3
    2648:	e7ba      	b.n	25c0 <_usart_interrupt_handler+0xb0>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    264a:	0030      	movs	r0, r6
    264c:	69b3      	ldr	r3, [r6, #24]
    264e:	4798      	blx	r3
    2650:	e7bd      	b.n	25ce <_usart_interrupt_handler+0xbe>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2652:	6a33      	ldr	r3, [r6, #32]
    2654:	0030      	movs	r0, r6
    2656:	4798      	blx	r3
}
    2658:	e7c0      	b.n	25dc <_usart_interrupt_handler+0xcc>
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	20000ef4 	.word	0x20000ef4

00002660 <configureADC>:
#include    "FlutterADC.h"
#define OUTPUT1_DET_AI			4	
uint16_t* ADCResult = NULL;

void configureADC()
{
    2660:	b510      	push	{r4, lr}
    2662:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	ADCResult = malloc(sizeof(uint16_t));
    2664:	2002      	movs	r0, #2
    2666:	4b18      	ldr	r3, [pc, #96]	; (26c8 <configureADC+0x68>)
    2668:	4798      	blx	r3
    266a:	4b18      	ldr	r3, [pc, #96]	; (26cc <configureADC+0x6c>)
    266c:	6018      	str	r0, [r3, #0]
	
	adc_get_config_defaults(&conf_adc);
    266e:	4668      	mov	r0, sp
    2670:	4b17      	ldr	r3, [pc, #92]	; (26d0 <configureADC+0x70>)
    2672:	4798      	blx	r3

	conf_adc.reference			=  ADC_REFCTRL_REFSEL_INT1V;
    2674:	2300      	movs	r3, #0
    2676:	466a      	mov	r2, sp
    2678:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	=  ADC_CLOCK_PRESCALER_DIV32;
    267a:	23c0      	movs	r3, #192	; 0xc0
    267c:	009b      	lsls	r3, r3, #2
    267e:	8053      	strh	r3, [r2, #2]
	conf_adc.positive_input		=  OUTPUT1_DET_AI;
    2680:	2304      	movs	r3, #4
    2682:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input		=  ADC_NEGATIVE_INPUT_GND;
    2684:	23c0      	movs	r3, #192	; 0xc0
    2686:	015b      	lsls	r3, r3, #5
    2688:	81d3      	strh	r3, [r2, #14]
	conf_adc.resolution			=  ADC_RESOLUTION_8BIT;
    268a:	2330      	movs	r3, #48	; 0x30
    268c:	7113      	strb	r3, [r2, #4]
	//conf_adc.left_adjust		=  true;

	adc_init(&adc_instance, ADC, &conf_adc);
    268e:	4c11      	ldr	r4, [pc, #68]	; (26d4 <configureADC+0x74>)
    2690:	4911      	ldr	r1, [pc, #68]	; (26d8 <configureADC+0x78>)
    2692:	0020      	movs	r0, r4
    2694:	4b11      	ldr	r3, [pc, #68]	; (26dc <configureADC+0x7c>)
    2696:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2698:	6822      	ldr	r2, [r4, #0]
    269a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    269c:	b25b      	sxtb	r3, r3
    269e:	2b00      	cmp	r3, #0
    26a0:	dbfb      	blt.n	269a <configureADC+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    26a2:	2180      	movs	r1, #128	; 0x80
    26a4:	0409      	lsls	r1, r1, #16
    26a6:	4b0e      	ldr	r3, [pc, #56]	; (26e0 <configureADC+0x80>)
    26a8:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    26aa:	230f      	movs	r3, #15
    26ac:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    26ae:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    26b0:	7813      	ldrb	r3, [r2, #0]
    26b2:	2102      	movs	r1, #2
    26b4:	430b      	orrs	r3, r1
    26b6:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    26b8:	4b06      	ldr	r3, [pc, #24]	; (26d4 <configureADC+0x74>)
    26ba:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    26bc:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    26be:	b25b      	sxtb	r3, r3
    26c0:	2b00      	cmp	r3, #0
    26c2:	dbfb      	blt.n	26bc <configureADC+0x5c>
	adc_enable(&adc_instance);
}
    26c4:	b00c      	add	sp, #48	; 0x30
    26c6:	bd10      	pop	{r4, pc}
    26c8:	00004fe1 	.word	0x00004fe1
    26cc:	20000108 	.word	0x20000108
    26d0:	000016e5 	.word	0x000016e5
    26d4:	20000f0c 	.word	0x20000f0c
    26d8:	42004000 	.word	0x42004000
    26dc:	0000172d 	.word	0x0000172d
    26e0:	e000e100 	.word	0xe000e100

000026e4 <adc_start_read_result>:




uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    26e4:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    26e6:	4b2d      	ldr	r3, [pc, #180]	; (279c <adc_start_read_result+0xb8>)
    26e8:	6819      	ldr	r1, [r3, #0]
    26ea:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    26ec:	b25b      	sxtb	r3, r3
    26ee:	2b00      	cmp	r3, #0
    26f0:	dbfb      	blt.n	26ea <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    26f2:	690b      	ldr	r3, [r1, #16]
    26f4:	221f      	movs	r2, #31
    26f6:	4393      	bics	r3, r2
    26f8:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    26fa:	6108      	str	r0, [r1, #16]
    26fc:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    26fe:	b25b      	sxtb	r3, r3
    2700:	2b00      	cmp	r3, #0
    2702:	dbfb      	blt.n	26fc <adc_start_read_result+0x18>
    2704:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2706:	b25b      	sxtb	r3, r3
    2708:	2b00      	cmp	r3, #0
    270a:	dbfb      	blt.n	2704 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    270c:	7b0b      	ldrb	r3, [r1, #12]
    270e:	2202      	movs	r2, #2
    2710:	4313      	orrs	r3, r2
    2712:	730b      	strb	r3, [r1, #12]
    2714:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2716:	b25b      	sxtb	r3, r3
    2718:	2b00      	cmp	r3, #0
    271a:	dbfb      	blt.n	2714 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    271c:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    271e:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2720:	2402      	movs	r4, #2
    2722:	e001      	b.n	2728 <adc_start_read_result+0x44>
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    2724:	4210      	tst	r0, r2
    2726:	d10a      	bne.n	273e <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2728:	7e0b      	ldrb	r3, [r1, #24]
    272a:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    272c:	0002      	movs	r2, r0
    272e:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    2730:	421d      	tst	r5, r3
    2732:	d000      	beq.n	2736 <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    2734:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2736:	421c      	tst	r4, r3
    2738:	d0f4      	beq.n	2724 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    273a:	432a      	orrs	r2, r5
    273c:	e7f2      	b.n	2724 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    273e:	7e0a      	ldrb	r2, [r1, #24]
    2740:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2742:	2301      	movs	r3, #1
    2744:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2746:	0750      	lsls	r0, r2, #29
    2748:	d501      	bpl.n	274e <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    274a:	2002      	movs	r0, #2
    274c:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    274e:	0792      	lsls	r2, r2, #30
    2750:	d501      	bpl.n	2756 <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    2752:	2204      	movs	r2, #4
    2754:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2756:	07db      	lsls	r3, r3, #31
    2758:	d403      	bmi.n	2762 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
	temp = *ADCResult;
    275a:	4b11      	ldr	r3, [pc, #68]	; (27a0 <adc_start_read_result+0xbc>)
    275c:	681b      	ldr	r3, [r3, #0]
	return temp;
    275e:	8818      	ldrh	r0, [r3, #0]
    2760:	bd30      	pop	{r4, r5, pc}
    2762:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2764:	b25b      	sxtb	r3, r3
    2766:	2b00      	cmp	r3, #0
    2768:	dbfb      	blt.n	2762 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
    276a:	4b0d      	ldr	r3, [pc, #52]	; (27a0 <adc_start_read_result+0xbc>)
    276c:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    276e:	8b4a      	ldrh	r2, [r1, #26]
    2770:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    2772:	4b0a      	ldr	r3, [pc, #40]	; (279c <adc_start_read_result+0xb8>)
    2774:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    2776:	2301      	movs	r3, #1
    2778:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    277a:	7e0a      	ldrb	r2, [r1, #24]
    277c:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    277e:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2780:	0750      	lsls	r0, r2, #29
    2782:	d501      	bpl.n	2788 <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    2784:	2002      	movs	r0, #2
    2786:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2788:	0792      	lsls	r2, r2, #30
    278a:	d501      	bpl.n	2790 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    278c:	2204      	movs	r2, #4
    278e:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2790:	075b      	lsls	r3, r3, #29
    2792:	d5e2      	bpl.n	275a <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    2794:	2302      	movs	r3, #2
    2796:	760b      	strb	r3, [r1, #24]
    2798:	e7df      	b.n	275a <adc_start_read_result+0x76>
    279a:	46c0      	nop			; (mov r8, r8)
    279c:	20000f0c 	.word	0x20000f0c
    27a0:	20000108 	.word	0x20000108

000027a4 <UARTReceiveBytes>:
#define LEN_LEDMATRIX_SETALL	  54

//#define LEN_COMMON_SETALL		

void UARTReceiveBytes(uint8_t* receiveData ,uint8_t countReceive)
{
    27a4:	b530      	push	{r4, r5, lr}
	uint8_t i =0;
	while((headPointer - tailPointer) < countReceive )
    27a6:	4d0c      	ldr	r5, [pc, #48]	; (27d8 <UARTReceiveBytes+0x34>)
    27a8:	4c0c      	ldr	r4, [pc, #48]	; (27dc <UARTReceiveBytes+0x38>)
    27aa:	782b      	ldrb	r3, [r5, #0]
    27ac:	7822      	ldrb	r2, [r4, #0]
    27ae:	1a9b      	subs	r3, r3, r2
    27b0:	428b      	cmp	r3, r1
    27b2:	dbfa      	blt.n	27aa <UARTReceiveBytes+0x6>
	{
	}
	for(i=1;i<=countReceive;i++)
    27b4:	2900      	cmp	r1, #0
    27b6:	d00e      	beq.n	27d6 <UARTReceiveBytes+0x32>
    27b8:	2301      	movs	r3, #1
	{
		receiveData[i] = ringBuffer[tailPointer];
    27ba:	4c08      	ldr	r4, [pc, #32]	; (27dc <UARTReceiveBytes+0x38>)
    27bc:	4d08      	ldr	r5, [pc, #32]	; (27e0 <UARTReceiveBytes+0x3c>)
    27be:	7822      	ldrb	r2, [r4, #0]
    27c0:	b2d2      	uxtb	r2, r2
    27c2:	5caa      	ldrb	r2, [r5, r2]
    27c4:	54c2      	strb	r2, [r0, r3]
		tailPointer++;
    27c6:	7822      	ldrb	r2, [r4, #0]
    27c8:	3201      	adds	r2, #1
    27ca:	b2d2      	uxtb	r2, r2
    27cc:	7022      	strb	r2, [r4, #0]
	for(i=1;i<=countReceive;i++)
    27ce:	3301      	adds	r3, #1
    27d0:	b2db      	uxtb	r3, r3
    27d2:	4299      	cmp	r1, r3
    27d4:	d2f3      	bcs.n	27be <UARTReceiveBytes+0x1a>
	}
}
    27d6:	bd30      	pop	{r4, r5, pc}
    27d8:	20001088 	.word	0x20001088
    27dc:	200010ac 	.word	0x200010ac
    27e0:	200010b0 	.word	0x200010b0

000027e4 <transferLEDMatrixValues>:

void transferLEDMatrixValues(uint8_t* tempTransfer , uint8_t port)
{
    27e4:	b570      	push	{r4, r5, r6, lr}
    27e6:	b084      	sub	sp, #16
    27e8:	2300      	movs	r3, #0
	uint32_t err_code = 0;
	//static bool firstTime = true;
	static uint8_t LEDMatrixValues[64]; 
	for(i=0;i<(LEN_LEDMATRIX_SETALL+1);i++)
	{
		LEDMatrixValues[i] = tempTransfer[i] ;
    27ea:	4c11      	ldr	r4, [pc, #68]	; (2830 <transferLEDMatrixValues+0x4c>)
    27ec:	5cc2      	ldrb	r2, [r0, r3]
    27ee:	551a      	strb	r2, [r3, r4]
    27f0:	3301      	adds	r3, #1
	for(i=0;i<(LEN_LEDMATRIX_SETALL+1);i++)
    27f2:	2b37      	cmp	r3, #55	; 0x37
    27f4:	d1fa      	bne.n	27ec <transferLEDMatrixValues+0x8>
	}
	struct i2c_master_packet wr_packet = {
		.address     = outputPort[port].address ,
    27f6:	4b0f      	ldr	r3, [pc, #60]	; (2834 <transferLEDMatrixValues+0x50>)
    27f8:	00ca      	lsls	r2, r1, #3
    27fa:	5cd0      	ldrb	r0, [r2, r3]
	struct i2c_master_packet wr_packet = {
    27fc:	ac01      	add	r4, sp, #4
    27fe:	8020      	strh	r0, [r4, #0]
		.data_length = outputPort[port].writeDataLength1,
    2800:	189b      	adds	r3, r3, r2
    2802:	791b      	ldrb	r3, [r3, #4]
	struct i2c_master_packet wr_packet = {
    2804:	8063      	strh	r3, [r4, #2]
    2806:	4b0a      	ldr	r3, [pc, #40]	; (2830 <transferLEDMatrixValues+0x4c>)
    2808:	9302      	str	r3, [sp, #8]
    280a:	2300      	movs	r3, #0
    280c:	7223      	strb	r3, [r4, #8]
    280e:	7263      	strb	r3, [r4, #9]
    2810:	72a3      	strb	r3, [r4, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	//while(outputPort[port].I2CStatus == BUSY_MODE);
	//outputPort[port].I2CStatus = BUSY_MODE;
	I2CWrite((port+1) , &wr_packet);
    2812:	3101      	adds	r1, #1
    2814:	b2cd      	uxtb	r5, r1
    2816:	0021      	movs	r1, r4
    2818:	0028      	movs	r0, r5
    281a:	4e07      	ldr	r6, [pc, #28]	; (2838 <transferLEDMatrixValues+0x54>)
    281c:	47b0      	blx	r6
	delay_cycles_ms(1);
    281e:	2001      	movs	r0, #1
    2820:	4b06      	ldr	r3, [pc, #24]	; (283c <transferLEDMatrixValues+0x58>)
    2822:	4798      	blx	r3
	I2CWrite((port+1) , &wr_packet);
    2824:	0021      	movs	r1, r4
    2826:	0028      	movs	r0, r5
    2828:	47b0      	blx	r6
		
	}
	firstTime = false;
	*/
	
}
    282a:	b004      	add	sp, #16
    282c:	bd70      	pop	{r4, r5, r6, pc}
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	2000010c 	.word	0x2000010c
    2834:	2000108c 	.word	0x2000108c
    2838:	00001021 	.word	0x00001021
    283c:	000016b9 	.word	0x000016b9

00002840 <checkUART>:


void checkUART()
{
    2840:	b510      	push	{r4, lr}
	uint8_t i =0;
	uint8_t port = 3;
	static uint8_t receivedValue[60];
	if(headPointer != tailPointer)
    2842:	4b2b      	ldr	r3, [pc, #172]	; (28f0 <checkUART+0xb0>)
    2844:	781b      	ldrb	r3, [r3, #0]
    2846:	4a2b      	ldr	r2, [pc, #172]	; (28f4 <checkUART+0xb4>)
    2848:	7812      	ldrb	r2, [r2, #0]
    284a:	b2db      	uxtb	r3, r3
    284c:	4293      	cmp	r3, r2
    284e:	d03c      	beq.n	28ca <checkUART+0x8a>
	{
		receivedValue[0]  = ringBuffer[tailPointer];
    2850:	4928      	ldr	r1, [pc, #160]	; (28f4 <checkUART+0xb4>)
    2852:	780b      	ldrb	r3, [r1, #0]
    2854:	b2db      	uxtb	r3, r3
    2856:	4a28      	ldr	r2, [pc, #160]	; (28f8 <checkUART+0xb8>)
    2858:	5cd3      	ldrb	r3, [r2, r3]
    285a:	b2db      	uxtb	r3, r3
    285c:	4a27      	ldr	r2, [pc, #156]	; (28fc <checkUART+0xbc>)
    285e:	7013      	strb	r3, [r2, #0]
		tailPointer++;
    2860:	780a      	ldrb	r2, [r1, #0]
    2862:	3201      	adds	r2, #1
    2864:	b2d2      	uxtb	r2, r2
    2866:	700a      	strb	r2, [r1, #0]
		switch(receivedValue[0])
    2868:	2b4c      	cmp	r3, #76	; 0x4c
    286a:	d021      	beq.n	28b0 <checkUART+0x70>
    286c:	d90f      	bls.n	288e <checkUART+0x4e>
    286e:	2b62      	cmp	r3, #98	; 0x62
    2870:	d117      	bne.n	28a2 <checkUART+0x62>
		{
			case TEST:
				break;
			case BROADCAST:
				UARTReceiveBytes(receivedValue , LEN_BROADCAST_COMMAND );
    2872:	4c22      	ldr	r4, [pc, #136]	; (28fc <checkUART+0xbc>)
    2874:	2101      	movs	r1, #1
    2876:	0020      	movs	r0, r4
    2878:	4b21      	ldr	r3, [pc, #132]	; (2900 <checkUART+0xc0>)
    287a:	4798      	blx	r3
				if(receivedValue[1]  == START_BROADCAST)
    287c:	7863      	ldrb	r3, [r4, #1]
    287e:	2b67      	cmp	r3, #103	; 0x67
    2880:	d012      	beq.n	28a8 <checkUART+0x68>
				{
					broadcastFlag = true;
				}
				else if(receivedValue[1] == STOP_BROADCAST)
    2882:	2b73      	cmp	r3, #115	; 0x73
    2884:	d12a      	bne.n	28dc <checkUART+0x9c>
				{
					broadcastFlag = false;
    2886:	2200      	movs	r2, #0
    2888:	4b1e      	ldr	r3, [pc, #120]	; (2904 <checkUART+0xc4>)
    288a:	701a      	strb	r2, [r3, #0]
    288c:	e026      	b.n	28dc <checkUART+0x9c>
		switch(receivedValue[0])
    288e:	2b01      	cmp	r3, #1
    2890:	d024      	beq.n	28dc <checkUART+0x9c>
    2892:	2b43      	cmp	r3, #67	; 0x43
    2894:	d022      	beq.n	28dc <checkUART+0x9c>
			*/
				break;
			case STOP_BROADCAST:
				break;
			default:
			    headPointer = 0;
    2896:	2300      	movs	r3, #0
    2898:	4a15      	ldr	r2, [pc, #84]	; (28f0 <checkUART+0xb0>)
    289a:	7013      	strb	r3, [r2, #0]
			    tailPointer = 0;
    289c:	4a15      	ldr	r2, [pc, #84]	; (28f4 <checkUART+0xb4>)
    289e:	7013      	strb	r3, [r2, #0]
				break;
    28a0:	e01c      	b.n	28dc <checkUART+0x9c>
		switch(receivedValue[0])
    28a2:	2b73      	cmp	r3, #115	; 0x73
    28a4:	d1f7      	bne.n	2896 <checkUART+0x56>
    28a6:	e019      	b.n	28dc <checkUART+0x9c>
					broadcastFlag = true;
    28a8:	2201      	movs	r2, #1
    28aa:	4b16      	ldr	r3, [pc, #88]	; (2904 <checkUART+0xc4>)
    28ac:	701a      	strb	r2, [r3, #0]
    28ae:	e015      	b.n	28dc <checkUART+0x9c>
				UARTReceiveBytes(receivedValue , LEN_LEDMATRIX_SETALL );
    28b0:	2136      	movs	r1, #54	; 0x36
    28b2:	4812      	ldr	r0, [pc, #72]	; (28fc <checkUART+0xbc>)
    28b4:	4b12      	ldr	r3, [pc, #72]	; (2900 <checkUART+0xc0>)
    28b6:	4798      	blx	r3
				if(outputPort[port].currentState == 	OUTPUT_LEDMATRIX )
    28b8:	4b13      	ldr	r3, [pc, #76]	; (2908 <checkUART+0xc8>)
    28ba:	7e5b      	ldrb	r3, [r3, #25]
    28bc:	2b03      	cmp	r3, #3
    28be:	d10d      	bne.n	28dc <checkUART+0x9c>
					transferLEDMatrixValues(receivedValue,port);
    28c0:	2103      	movs	r1, #3
    28c2:	480e      	ldr	r0, [pc, #56]	; (28fc <checkUART+0xbc>)
    28c4:	4b11      	ldr	r3, [pc, #68]	; (290c <checkUART+0xcc>)
    28c6:	4798      	blx	r3
    28c8:	e008      	b.n	28dc <checkUART+0x9c>
		}
	}
	else if(broadcastFlag == true)
    28ca:	4b0e      	ldr	r3, [pc, #56]	; (2904 <checkUART+0xc4>)
    28cc:	781b      	ldrb	r3, [r3, #0]
    28ce:	2b01      	cmp	r3, #1
    28d0:	d005      	beq.n	28de <checkUART+0x9e>
		tailPointer = 0;
		sendDataBLE();
	}
	else
	{
		headPointer = 0;
    28d2:	2300      	movs	r3, #0
    28d4:	4a06      	ldr	r2, [pc, #24]	; (28f0 <checkUART+0xb0>)
    28d6:	7013      	strb	r3, [r2, #0]
		tailPointer = 0;
    28d8:	4a06      	ldr	r2, [pc, #24]	; (28f4 <checkUART+0xb4>)
    28da:	7013      	strb	r3, [r2, #0]
	}
    28dc:	bd10      	pop	{r4, pc}
		headPointer = 0;
    28de:	2300      	movs	r3, #0
    28e0:	4a03      	ldr	r2, [pc, #12]	; (28f0 <checkUART+0xb0>)
    28e2:	7013      	strb	r3, [r2, #0]
		tailPointer = 0;
    28e4:	4a03      	ldr	r2, [pc, #12]	; (28f4 <checkUART+0xb4>)
    28e6:	7013      	strb	r3, [r2, #0]
		sendDataBLE();
    28e8:	4b09      	ldr	r3, [pc, #36]	; (2910 <checkUART+0xd0>)
    28ea:	4798      	blx	r3
    28ec:	e7f6      	b.n	28dc <checkUART+0x9c>
    28ee:	46c0      	nop			; (mov r8, r8)
    28f0:	20001088 	.word	0x20001088
    28f4:	200010ac 	.word	0x200010ac
    28f8:	200010b0 	.word	0x200010b0
    28fc:	20000150 	.word	0x20000150
    2900:	000027a5 	.word	0x000027a5
    2904:	2000014c 	.word	0x2000014c
    2908:	2000108c 	.word	0x2000108c
    290c:	000027e5 	.word	0x000027e5
    2910:	000015dd 	.word	0x000015dd

00002914 <readSensors>:
extern uint8_t NoInDevCon ;
extern uint8_t inputsConnected[3];
extern uint8_t sensorOutputs[40];

void readSensors()
{
    2914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2916:	4f19      	ldr	r7, [pc, #100]	; (297c <readSensors+0x68>)
    2918:	4e19      	ldr	r6, [pc, #100]	; (2980 <readSensors+0x6c>)
    291a:	4c1a      	ldr	r4, [pc, #104]	; (2984 <readSensors+0x70>)
    291c:	2501      	movs	r5, #1
    291e:	e00b      	b.n	2938 <readSensors+0x24>
		for(i=0;i<NO_SENSORS;i++)
		{
			switch(inputsConnected[i])
			{
				case ANALOG_LIGHT_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    2920:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2922:	7820      	ldrb	r0, [r4, #0]
    2924:	4b18      	ldr	r3, [pc, #96]	; (2988 <readSensors+0x74>)
    2926:	4798      	blx	r3
    2928:	7170      	strb	r0, [r6, #5]
    292a:	3501      	adds	r5, #1
    292c:	b2ed      	uxtb	r5, r5
    292e:	3701      	adds	r7, #1
    2930:	3605      	adds	r6, #5
    2932:	3401      	adds	r4, #1
		for(i=0;i<NO_SENSORS;i++)
    2934:	2d04      	cmp	r5, #4
    2936:	d020      	beq.n	297a <readSensors+0x66>
			switch(inputsConnected[i])
    2938:	783b      	ldrb	r3, [r7, #0]
    293a:	3b1b      	subs	r3, #27
    293c:	b2da      	uxtb	r2, r3
    293e:	2a04      	cmp	r2, #4
    2940:	d8f3      	bhi.n	292a <readSensors+0x16>
    2942:	0093      	lsls	r3, r2, #2
    2944:	4a11      	ldr	r2, [pc, #68]	; (298c <readSensors+0x78>)
    2946:	58d3      	ldr	r3, [r2, r3]
    2948:	469f      	mov	pc, r3
					break;
				case ANALOG_DISTANCE_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    294a:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    294c:	7820      	ldrb	r0, [r4, #0]
    294e:	4b0e      	ldr	r3, [pc, #56]	; (2988 <readSensors+0x74>)
    2950:	4798      	blx	r3
    2952:	7170      	strb	r0, [r6, #5]
					break;
    2954:	e7e9      	b.n	292a <readSensors+0x16>
				case ANALOG_SOUND_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    2956:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2958:	7820      	ldrb	r0, [r4, #0]
    295a:	4b0b      	ldr	r3, [pc, #44]	; (2988 <readSensors+0x74>)
    295c:	4798      	blx	r3
    295e:	7170      	strb	r0, [r6, #5]
					break;
    2960:	e7e3      	b.n	292a <readSensors+0x16>
				case ANALOG_DIAL:
					sensorOutputs[5*i + 4]     = i+1;
    2962:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2964:	7820      	ldrb	r0, [r4, #0]
    2966:	4b08      	ldr	r3, [pc, #32]	; (2988 <readSensors+0x74>)
    2968:	4798      	blx	r3
    296a:	7170      	strb	r0, [r6, #5]
					break;
    296c:	e7dd      	b.n	292a <readSensors+0x16>
				case ANALOG_TEMPERATURE:
					sensorOutputs[5*i + 4]     = i+1;
    296e:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2970:	7820      	ldrb	r0, [r4, #0]
    2972:	4b05      	ldr	r3, [pc, #20]	; (2988 <readSensors+0x74>)
    2974:	4798      	blx	r3
    2976:	7170      	strb	r0, [r6, #5]
					break;
    2978:	e7d7      	b.n	292a <readSensors+0x16>
					*/
					break;
			}
		}
	//}
}
    297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    297c:	20000da0 	.word	0x20000da0
    2980:	20000f30 	.word	0x20000f30
    2984:	00005294 	.word	0x00005294
    2988:	000026e5 	.word	0x000026e5
    298c:	00005280 	.word	0x00005280

00002990 <usart_read_callback>:
	usart_enable(&usart_instance);
}

//USART callback with a ring buffer 
void usart_read_callback(struct usart_module *const usart_module)
{
    2990:	b082      	sub	sp, #8
	volatile uint16_t recData = 0;
    2992:	466b      	mov	r3, sp
    2994:	1d99      	adds	r1, r3, #6
    2996:	2300      	movs	r3, #0
    2998:	800b      	strh	r3, [r1, #0]
	recData = (usart_instance.hw->USART.DATA.reg & SERCOM_USART_DATA_MASK);
    299a:	4b0b      	ldr	r3, [pc, #44]	; (29c8 <usart_read_callback+0x38>)
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    29a0:	05db      	lsls	r3, r3, #23
    29a2:	0ddb      	lsrs	r3, r3, #23
    29a4:	800b      	strh	r3, [r1, #0]
	*(ringBuffer + headPointer) = (uint8_t)recData;
    29a6:	4a09      	ldr	r2, [pc, #36]	; (29cc <usart_read_callback+0x3c>)
    29a8:	7810      	ldrb	r0, [r2, #0]
    29aa:	4b09      	ldr	r3, [pc, #36]	; (29d0 <usart_read_callback+0x40>)
    29ac:	181b      	adds	r3, r3, r0
    29ae:	8809      	ldrh	r1, [r1, #0]
    29b0:	b2c9      	uxtb	r1, r1
    29b2:	7019      	strb	r1, [r3, #0]
	headPointer++;
    29b4:	7813      	ldrb	r3, [r2, #0]
    29b6:	3301      	adds	r3, #1
    29b8:	b2db      	uxtb	r3, r3
    29ba:	7013      	strb	r3, [r2, #0]
	recDataStatus = true;
    29bc:	2201      	movs	r2, #1
    29be:	4b05      	ldr	r3, [pc, #20]	; (29d4 <usart_read_callback+0x44>)
    29c0:	701a      	strb	r2, [r3, #0]
}
    29c2:	b002      	add	sp, #8
    29c4:	4770      	bx	lr
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	20000ea0 	.word	0x20000ea0
    29cc:	20001088 	.word	0x20001088
    29d0:	200010b0 	.word	0x200010b0
    29d4:	20000f58 	.word	0x20000f58

000029d8 <serialInit>:
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}

//Main function 
void serialInit()
{
    29d8:	b530      	push	{r4, r5, lr}
    29da:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    29dc:	ab01      	add	r3, sp, #4
    29de:	2280      	movs	r2, #128	; 0x80
    29e0:	05d2      	lsls	r2, r2, #23
    29e2:	9201      	str	r2, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    29e4:	2200      	movs	r2, #0
    29e6:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    29e8:	21ff      	movs	r1, #255	; 0xff
    29ea:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    29ec:	2100      	movs	r1, #0
    29ee:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    29f0:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    29f2:	2001      	movs	r0, #1
    29f4:	2424      	movs	r4, #36	; 0x24
    29f6:	5518      	strb	r0, [r3, r4]
	config->transmitter_enable = true;
    29f8:	3401      	adds	r4, #1
    29fa:	5518      	strb	r0, [r3, r4]
	config->clock_polarity_inverted = false;
    29fc:	3025      	adds	r0, #37	; 0x25
    29fe:	541a      	strb	r2, [r3, r0]
	config->use_external_clock = false;
    2a00:	3001      	adds	r0, #1
    2a02:	541a      	strb	r2, [r3, r0]
	config->ext_clock_freq   = 0;
    2a04:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2a06:	3005      	adds	r0, #5
    2a08:	541a      	strb	r2, [r3, r0]
	config->generator_source = GCLK_GENERATOR_0;
    2a0a:	3001      	adds	r0, #1
    2a0c:	541a      	strb	r2, [r3, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2a0e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2a10:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2a12:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2a14:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2a16:	7719      	strb	r1, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2a18:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    2a1a:	2213      	movs	r2, #19
    2a1c:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2a1e:	7759      	strb	r1, [r3, #29]
	config_usart.baudrate    = BAUDRATE_BLE;
    2a20:	22e1      	movs	r2, #225	; 0xe1
    2a22:	0252      	lsls	r2, r2, #9
    2a24:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_SERCOM_MUX_SETTING;
    2a26:	2280      	movs	r2, #128	; 0x80
    2a28:	0392      	lsls	r2, r2, #14
    2a2a:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = USART_SERCOM_PINMUX_PAD0_TX;
    2a2c:	4a1a      	ldr	r2, [pc, #104]	; (2a98 <serialInit+0xc0>)
    2a2e:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = USART_SERCOM_PINMUX_PAD1_UNUSED;
    2a30:	2201      	movs	r2, #1
    2a32:	4252      	negs	r2, r2
    2a34:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = USART_SERCOM_PINMUX_PAD2_RX;
    2a36:	4919      	ldr	r1, [pc, #100]	; (2a9c <serialInit+0xc4>)
    2a38:	6399      	str	r1, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = USART_SERCOM_PINMUX_PAD3_UNUSED;
    2a3a:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,BLE_UART_MODULE, &config_usart) != STATUS_OK){}
    2a3c:	4d18      	ldr	r5, [pc, #96]	; (2aa0 <serialInit+0xc8>)
    2a3e:	4c19      	ldr	r4, [pc, #100]	; (2aa4 <serialInit+0xcc>)
    2a40:	aa01      	add	r2, sp, #4
    2a42:	4919      	ldr	r1, [pc, #100]	; (2aa8 <serialInit+0xd0>)
    2a44:	0028      	movs	r0, r5
    2a46:	47a0      	blx	r4
    2a48:	2800      	cmp	r0, #0
    2a4a:	d1f9      	bne.n	2a40 <serialInit+0x68>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a4c:	4d14      	ldr	r5, [pc, #80]	; (2aa0 <serialInit+0xc8>)
    2a4e:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2a50:	0020      	movs	r0, r4
    2a52:	4b16      	ldr	r3, [pc, #88]	; (2aac <serialInit+0xd4>)
    2a54:	4798      	blx	r3
    2a56:	231f      	movs	r3, #31
    2a58:	4018      	ands	r0, r3
    2a5a:	3b1e      	subs	r3, #30
    2a5c:	4083      	lsls	r3, r0
    2a5e:	4a14      	ldr	r2, [pc, #80]	; (2ab0 <serialInit+0xd8>)
    2a60:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a62:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a64:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2a66:	2b00      	cmp	r3, #0
    2a68:	d1fc      	bne.n	2a64 <serialInit+0x8c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2a6a:	6823      	ldr	r3, [r4, #0]
    2a6c:	2202      	movs	r2, #2
    2a6e:	4313      	orrs	r3, r2
    2a70:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    2a72:	4c0b      	ldr	r4, [pc, #44]	; (2aa0 <serialInit+0xc8>)
    2a74:	3a01      	subs	r2, #1
    2a76:	490f      	ldr	r1, [pc, #60]	; (2ab4 <serialInit+0xdc>)
    2a78:	0020      	movs	r0, r4
    2a7a:	4b0f      	ldr	r3, [pc, #60]	; (2ab8 <serialInit+0xe0>)
    2a7c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2a7e:	2231      	movs	r2, #49	; 0x31
    2a80:	5ca3      	ldrb	r3, [r4, r2]
    2a82:	2102      	movs	r1, #2
    2a84:	430b      	orrs	r3, r1
    2a86:	54a3      	strb	r3, [r4, r2]
	uint8_t temp_buffer[MAX_RX_BUFFER_LENGTH];
	configureUSART();
	configureUSARTCallbacks();
	usart_read_buffer_job(&usart_instance,(uint8_t *)temp_buffer, MAX_RX_BUFFER_LENGTH);
    2a88:	3a30      	subs	r2, #48	; 0x30
    2a8a:	a911      	add	r1, sp, #68	; 0x44
    2a8c:	0020      	movs	r0, r4
    2a8e:	4b0b      	ldr	r3, [pc, #44]	; (2abc <serialInit+0xe4>)
    2a90:	4798      	blx	r3
    2a92:	b013      	add	sp, #76	; 0x4c
    2a94:	bd30      	pop	{r4, r5, pc}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	002c0002 	.word	0x002c0002
    2a9c:	002e0002 	.word	0x002e0002
    2aa0:	20000ea0 	.word	0x20000ea0
    2aa4:	00002059 	.word	0x00002059
    2aa8:	42001800 	.word	0x42001800
    2aac:	00001fc9 	.word	0x00001fc9
    2ab0:	e000e100 	.word	0xe000e100
    2ab4:	00002991 	.word	0x00002991
    2ab8:	000024d9 	.word	0x000024d9
    2abc:	000024f1 	.word	0x000024f1

00002ac0 <inputOutputConnection>:

uint8_t  inputOutputConnection(uint8_t analogInput)
{
	uint8_t inputOutput = 0;
	
	if((analogInput > MIN_THRES_LIGHT) && (analogInput <= MAX_THRES_LIGHT))
    2ac0:	0003      	movs	r3, r0
    2ac2:	330f      	adds	r3, #15
    2ac4:	b2db      	uxtb	r3, r3
	{
		inputOutput	=		ANALOG_LIGHT_SENSOR;
    2ac6:	221f      	movs	r2, #31
	if((analogInput > MIN_THRES_LIGHT) && (analogInput <= MAX_THRES_LIGHT))
    2ac8:	2b09      	cmp	r3, #9
    2aca:	d801      	bhi.n	2ad0 <inputOutputConnection+0x10>
	else
	{
		inputOutput	=		NOTHINGCONNECTED;
	}
	return inputOutput;
}
    2acc:	0010      	movs	r0, r2
    2ace:	4770      	bx	lr
	else if((analogInput > MIN_THRES_DIAL) && (analogInput <= MAX_THRES_DIAL))
    2ad0:	0003      	movs	r3, r0
    2ad2:	3319      	adds	r3, #25
    2ad4:	b2db      	uxtb	r3, r3
		inputOutput	=		ANALOG_DIAL;
    2ad6:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_DIAL) && (analogInput <= MAX_THRES_DIAL))
    2ad8:	2b09      	cmp	r3, #9
    2ada:	d9f7      	bls.n	2acc <inputOutputConnection+0xc>
	else if((analogInput > MIN_THRES_DISTANCE) && (analogInput <= MAX_THRES_DISTANCE))
    2adc:	0003      	movs	r3, r0
    2ade:	3323      	adds	r3, #35	; 0x23
    2ae0:	b2db      	uxtb	r3, r3
		inputOutput	=	    ANALOG_DISTANCE_SENSOR;
    2ae2:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_DISTANCE) && (analogInput <= MAX_THRES_DISTANCE))
    2ae4:	2b09      	cmp	r3, #9
    2ae6:	d9f1      	bls.n	2acc <inputOutputConnection+0xc>
	else if((analogInput > MIN_THRES_SOUND) && (analogInput <= MAX_THRES_SOUND))
    2ae8:	0003      	movs	r3, r0
    2aea:	332d      	adds	r3, #45	; 0x2d
    2aec:	b2db      	uxtb	r3, r3
		inputOutput	=		ANALOG_SOUND_SENSOR;
    2aee:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_SOUND) && (analogInput <= MAX_THRES_SOUND))
    2af0:	2b09      	cmp	r3, #9
    2af2:	d9eb      	bls.n	2acc <inputOutputConnection+0xc>
		inputOutput	=		OUTPUT_SERVO_POSITION;
    2af4:	3a1a      	subs	r2, #26
	else if((analogInput > MIN_THRES_SERVO) && (analogInput <= MAX_THRES_SERVO))
    2af6:	0003      	movs	r3, r0
    2af8:	3b0b      	subs	r3, #11
    2afa:	2b09      	cmp	r3, #9
    2afc:	d9e6      	bls.n	2acc <inputOutputConnection+0xc>
	else if((analogInput > MIN_THRES_LEDMATRIX) && (analogInput <= MAX_THRES_LEDMATRIX))
    2afe:	381f      	subs	r0, #31
		inputOutput	=		OUTPUT_LEDMATRIX;
    2b00:	3201      	adds	r2, #1
	else if((analogInput > MIN_THRES_LEDMATRIX) && (analogInput <= MAX_THRES_LEDMATRIX))
    2b02:	2845      	cmp	r0, #69	; 0x45
    2b04:	d9e2      	bls.n	2acc <inputOutputConnection+0xc>
		inputOutput	=		NOTHINGCONNECTED;
    2b06:	2200      	movs	r2, #0
    2b08:	e7e0      	b.n	2acc <inputOutputConnection+0xc>
	...

00002b0c <convertAnalogOutputs>:


void convertAnalogOutputs(uint8_t* analogOutput)
{
    2b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b0e:	0005      	movs	r5, r0
    2b10:	4f30      	ldr	r7, [pc, #192]	; (2bd4 <convertAnalogOutputs+0xc8>)
    2b12:	2400      	movs	r4, #0
	uint8_t tempOutput = 0;
	uint8_t i =0;
	uint8_t tempOutputCount = 0;
	for(i=0;i<NO_OUTPUTS;i++)
	{
		tempOutput	=   inputOutputConnection(analogOutput[i]);
    2b14:	4e30      	ldr	r6, [pc, #192]	; (2bd8 <convertAnalogOutputs+0xcc>)
    2b16:	e011      	b.n	2b3c <convertAnalogOutputs+0x30>
    2b18:	0039      	movs	r1, r7
				connecting[i] = true;
				tempOutputsConnected[i] = tempOutput;
			}
			else
			{
				if((connecting[i] == true) && (tempOutputsConnected[i] == tempOutput ))
    2b1a:	783a      	ldrb	r2, [r7, #0]
    2b1c:	2a01      	cmp	r2, #1
    2b1e:	d020      	beq.n	2b62 <convertAnalogOutputs+0x56>
						countConnecting[i] = 0;
					}
				}
				else
				{
					connecting[i] = false;
    2b20:	2300      	movs	r3, #0
    2b22:	700b      	strb	r3, [r1, #0]
					countConnecting[i] = 0;
    2b24:	4a2d      	ldr	r2, [pc, #180]	; (2bdc <convertAnalogOutputs+0xd0>)
    2b26:	54a3      	strb	r3, [r4, r2]
					tempOutputsConnected[i] = NOTHINGCONNECTED;
    2b28:	4a2d      	ldr	r2, [pc, #180]	; (2be0 <convertAnalogOutputs+0xd4>)
    2b2a:	54a3      	strb	r3, [r4, r2]
				countDisconnection[i] = 0;
				outputsConnected[i]	= NOTHINGCONNECTED;
			}
		}
		
		previousOutputsConnected[i] = outputsConnected[i];
    2b2c:	4b2d      	ldr	r3, [pc, #180]	; (2be4 <convertAnalogOutputs+0xd8>)
    2b2e:	5d1a      	ldrb	r2, [r3, r4]
    2b30:	4b2d      	ldr	r3, [pc, #180]	; (2be8 <convertAnalogOutputs+0xdc>)
    2b32:	54e2      	strb	r2, [r4, r3]
    2b34:	3401      	adds	r4, #1
    2b36:	3701      	adds	r7, #1
	for(i=0;i<NO_OUTPUTS;i++)
    2b38:	2c04      	cmp	r4, #4
    2b3a:	d033      	beq.n	2ba4 <convertAnalogOutputs+0x98>
		tempOutput	=   inputOutputConnection(analogOutput[i]);
    2b3c:	5d28      	ldrb	r0, [r5, r4]
    2b3e:	47b0      	blx	r6
    2b40:	1e03      	subs	r3, r0, #0
		if(tempOutput != NOTHINGCONNECTED)
    2b42:	d01f      	beq.n	2b84 <convertAnalogOutputs+0x78>
			countDisconnection[i] = 0;
    2b44:	2200      	movs	r2, #0
    2b46:	4929      	ldr	r1, [pc, #164]	; (2bec <convertAnalogOutputs+0xe0>)
    2b48:	5462      	strb	r2, [r4, r1]
			if((previousOutputsConnected[i] == NOTHINGCONNECTED) && (connecting[i] == false))
    2b4a:	4a27      	ldr	r2, [pc, #156]	; (2be8 <convertAnalogOutputs+0xdc>)
    2b4c:	5ca2      	ldrb	r2, [r4, r2]
    2b4e:	2a00      	cmp	r2, #0
    2b50:	d1e2      	bne.n	2b18 <convertAnalogOutputs+0xc>
    2b52:	783a      	ldrb	r2, [r7, #0]
    2b54:	2a00      	cmp	r2, #0
    2b56:	d1df      	bne.n	2b18 <convertAnalogOutputs+0xc>
				connecting[i] = true;
    2b58:	2301      	movs	r3, #1
    2b5a:	703b      	strb	r3, [r7, #0]
				tempOutputsConnected[i] = tempOutput;
    2b5c:	4b20      	ldr	r3, [pc, #128]	; (2be0 <convertAnalogOutputs+0xd4>)
    2b5e:	54e0      	strb	r0, [r4, r3]
    2b60:	e7e4      	b.n	2b2c <convertAnalogOutputs+0x20>
				if((connecting[i] == true) && (tempOutputsConnected[i] == tempOutput ))
    2b62:	4a1f      	ldr	r2, [pc, #124]	; (2be0 <convertAnalogOutputs+0xd4>)
    2b64:	5ca2      	ldrb	r2, [r4, r2]
    2b66:	429a      	cmp	r2, r3
    2b68:	d1da      	bne.n	2b20 <convertAnalogOutputs+0x14>
					countConnecting[i]++;
    2b6a:	4a1c      	ldr	r2, [pc, #112]	; (2bdc <convertAnalogOutputs+0xd0>)
    2b6c:	5ca3      	ldrb	r3, [r4, r2]
    2b6e:	3301      	adds	r3, #1
    2b70:	b2db      	uxtb	r3, r3
    2b72:	54a3      	strb	r3, [r4, r2]
					if(countConnecting[i] > COUNT_CONNECTING_THRESHOLD)
    2b74:	2b05      	cmp	r3, #5
    2b76:	d9d9      	bls.n	2b2c <convertAnalogOutputs+0x20>
						outputsConnected[i] = tempOutput;
    2b78:	4b1a      	ldr	r3, [pc, #104]	; (2be4 <convertAnalogOutputs+0xd8>)
    2b7a:	5518      	strb	r0, [r3, r4]
						connecting[i] = false;
    2b7c:	2300      	movs	r3, #0
    2b7e:	703b      	strb	r3, [r7, #0]
						countConnecting[i] = 0;
    2b80:	54a3      	strb	r3, [r4, r2]
    2b82:	e7d3      	b.n	2b2c <convertAnalogOutputs+0x20>
			countDisconnection[i]++;
    2b84:	4b19      	ldr	r3, [pc, #100]	; (2bec <convertAnalogOutputs+0xe0>)
    2b86:	5ce3      	ldrb	r3, [r4, r3]
    2b88:	3301      	adds	r3, #1
    2b8a:	b2db      	uxtb	r3, r3
			if(countDisconnection[i] > COUNT_CONNECTING_THRESHOLD)
    2b8c:	2b05      	cmp	r3, #5
    2b8e:	d802      	bhi.n	2b96 <convertAnalogOutputs+0x8a>
			countDisconnection[i]++;
    2b90:	4a16      	ldr	r2, [pc, #88]	; (2bec <convertAnalogOutputs+0xe0>)
    2b92:	54a3      	strb	r3, [r4, r2]
    2b94:	e7ca      	b.n	2b2c <convertAnalogOutputs+0x20>
				countDisconnection[i] = 0;
    2b96:	2300      	movs	r3, #0
    2b98:	4a14      	ldr	r2, [pc, #80]	; (2bec <convertAnalogOutputs+0xe0>)
    2b9a:	54a3      	strb	r3, [r4, r2]
				outputsConnected[i]	= NOTHINGCONNECTED;
    2b9c:	4a11      	ldr	r2, [pc, #68]	; (2be4 <convertAnalogOutputs+0xd8>)
    2b9e:	18a2      	adds	r2, r4, r2
    2ba0:	7013      	strb	r3, [r2, #0]
    2ba2:	e7c3      	b.n	2b2c <convertAnalogOutputs+0x20>
	}
	temp_test_outputs_connected_1[temp_count] = analogOutput[0] ;
    2ba4:	4b12      	ldr	r3, [pc, #72]	; (2bf0 <convertAnalogOutputs+0xe4>)
    2ba6:	881b      	ldrh	r3, [r3, #0]
    2ba8:	7829      	ldrb	r1, [r5, #0]
    2baa:	4a12      	ldr	r2, [pc, #72]	; (2bf4 <convertAnalogOutputs+0xe8>)
    2bac:	54d1      	strb	r1, [r2, r3]
	temp_test_outputs_connected_2[temp_count] = analogOutput[1] ;
    2bae:	7869      	ldrb	r1, [r5, #1]
    2bb0:	4a11      	ldr	r2, [pc, #68]	; (2bf8 <convertAnalogOutputs+0xec>)
    2bb2:	54d1      	strb	r1, [r2, r3]
	temp_test_outputs_connected_3[temp_count] = analogOutput[3] ;
    2bb4:	78e9      	ldrb	r1, [r5, #3]
    2bb6:	4a11      	ldr	r2, [pc, #68]	; (2bfc <convertAnalogOutputs+0xf0>)
    2bb8:	54d1      	strb	r1, [r2, r3]
	
	temp_count++;
    2bba:	3301      	adds	r3, #1
    2bbc:	b29b      	uxth	r3, r3
	if(temp_count == 500)
    2bbe:	22fa      	movs	r2, #250	; 0xfa
    2bc0:	0052      	lsls	r2, r2, #1
    2bc2:	4293      	cmp	r3, r2
    2bc4:	d002      	beq.n	2bcc <convertAnalogOutputs+0xc0>
	temp_count++;
    2bc6:	4a0a      	ldr	r2, [pc, #40]	; (2bf0 <convertAnalogOutputs+0xe4>)
    2bc8:	8013      	strh	r3, [r2, #0]
	{
		temp_count = 0;
	}
	
}
    2bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp_count = 0;
    2bcc:	2200      	movs	r2, #0
    2bce:	4b08      	ldr	r3, [pc, #32]	; (2bf0 <convertAnalogOutputs+0xe4>)
    2bd0:	801a      	strh	r2, [r3, #0]
}
    2bd2:	e7fa      	b.n	2bca <convertAnalogOutputs+0xbe>
    2bd4:	20000194 	.word	0x20000194
    2bd8:	00002ac1 	.word	0x00002ac1
    2bdc:	2000019c 	.word	0x2000019c
    2be0:	200001bc 	.word	0x200001bc
    2be4:	20000f2c 	.word	0x20000f2c
    2be8:	200001b0 	.word	0x200001b0
    2bec:	200001a4 	.word	0x200001a4
    2bf0:	200001c0 	.word	0x200001c0
    2bf4:	200007a0 	.word	0x200007a0
    2bf8:	20000994 	.word	0x20000994
    2bfc:	20000b88 	.word	0x20000b88

00002c00 <convertAnalogInputs>:




void convertAnalogInputs(uint8_t* analogInputs)
{
    2c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c02:	0007      	movs	r7, r0
    2c04:	4d31      	ldr	r5, [pc, #196]	; (2ccc <convertAnalogInputs+0xcc>)
    2c06:	2400      	movs	r4, #0
	uint8_t tempInput = 0;
	uint8_t i =0;
	uint8_t tempInputCount = 0;
	for(i=0;i<NO_SENSORS;i++)
	{
		tempInput			=		inputOutputConnection(analogInputs[i]);
    2c08:	4e31      	ldr	r6, [pc, #196]	; (2cd0 <convertAnalogInputs+0xd0>)
    2c0a:	e011      	b.n	2c30 <convertAnalogInputs+0x30>
    2c0c:	0029      	movs	r1, r5
				connecting[i] = true;
				tempInputsConnected[i] = tempInput;
			}
			else 
			{
				if((connecting[i] == true) && (tempInputsConnected[i] == tempInput ))
    2c0e:	782a      	ldrb	r2, [r5, #0]
    2c10:	2a01      	cmp	r2, #1
    2c12:	d020      	beq.n	2c56 <convertAnalogInputs+0x56>
						countConnecting[i] = 0;
					}
				}
				else
				{
					connecting[i] = false;
    2c14:	2300      	movs	r3, #0
    2c16:	700b      	strb	r3, [r1, #0]
					countConnecting[i] = 0;
    2c18:	4a2e      	ldr	r2, [pc, #184]	; (2cd4 <convertAnalogInputs+0xd4>)
    2c1a:	54a3      	strb	r3, [r4, r2]
					tempInputsConnected[i] = NOTHINGCONNECTED;
    2c1c:	4a2e      	ldr	r2, [pc, #184]	; (2cd8 <convertAnalogInputs+0xd8>)
    2c1e:	54a3      	strb	r3, [r4, r2]
				countDisconnection[i]	= 0;
				inputsConnected[i]		= NOTHINGCONNECTED;
			}
		}
		
		previousInputsConnected[i] = inputsConnected[i];
    2c20:	4b2e      	ldr	r3, [pc, #184]	; (2cdc <convertAnalogInputs+0xdc>)
    2c22:	5d1a      	ldrb	r2, [r3, r4]
    2c24:	4b2e      	ldr	r3, [pc, #184]	; (2ce0 <convertAnalogInputs+0xe0>)
    2c26:	54e2      	strb	r2, [r4, r3]
    2c28:	3401      	adds	r4, #1
    2c2a:	3501      	adds	r5, #1
	for(i=0;i<NO_SENSORS;i++)
    2c2c:	2c03      	cmp	r4, #3
    2c2e:	d033      	beq.n	2c98 <convertAnalogInputs+0x98>
		tempInput			=		inputOutputConnection(analogInputs[i]);
    2c30:	5d38      	ldrb	r0, [r7, r4]
    2c32:	47b0      	blx	r6
    2c34:	1e03      	subs	r3, r0, #0
		if(tempInput != NOTHINGCONNECTED)
    2c36:	d01f      	beq.n	2c78 <convertAnalogInputs+0x78>
			countDisconnection[i] = 0;
    2c38:	2200      	movs	r2, #0
    2c3a:	492a      	ldr	r1, [pc, #168]	; (2ce4 <convertAnalogInputs+0xe4>)
    2c3c:	5462      	strb	r2, [r4, r1]
			if((previousInputsConnected[i] == NOTHINGCONNECTED) && (connecting[i] == false))
    2c3e:	4a28      	ldr	r2, [pc, #160]	; (2ce0 <convertAnalogInputs+0xe0>)
    2c40:	5ca2      	ldrb	r2, [r4, r2]
    2c42:	2a00      	cmp	r2, #0
    2c44:	d1e2      	bne.n	2c0c <convertAnalogInputs+0xc>
    2c46:	782a      	ldrb	r2, [r5, #0]
    2c48:	2a00      	cmp	r2, #0
    2c4a:	d1df      	bne.n	2c0c <convertAnalogInputs+0xc>
				connecting[i] = true;
    2c4c:	2301      	movs	r3, #1
    2c4e:	702b      	strb	r3, [r5, #0]
				tempInputsConnected[i] = tempInput;
    2c50:	4b21      	ldr	r3, [pc, #132]	; (2cd8 <convertAnalogInputs+0xd8>)
    2c52:	54e0      	strb	r0, [r4, r3]
    2c54:	e7e4      	b.n	2c20 <convertAnalogInputs+0x20>
				if((connecting[i] == true) && (tempInputsConnected[i] == tempInput ))
    2c56:	4a20      	ldr	r2, [pc, #128]	; (2cd8 <convertAnalogInputs+0xd8>)
    2c58:	5ca2      	ldrb	r2, [r4, r2]
    2c5a:	429a      	cmp	r2, r3
    2c5c:	d1da      	bne.n	2c14 <convertAnalogInputs+0x14>
					countConnecting[i]++;
    2c5e:	4a1d      	ldr	r2, [pc, #116]	; (2cd4 <convertAnalogInputs+0xd4>)
    2c60:	5ca3      	ldrb	r3, [r4, r2]
    2c62:	3301      	adds	r3, #1
    2c64:	b2db      	uxtb	r3, r3
    2c66:	54a3      	strb	r3, [r4, r2]
					if(countConnecting[i] > COUNT_CONNECTING_THRESHOLD)
    2c68:	2b05      	cmp	r3, #5
    2c6a:	d9d9      	bls.n	2c20 <convertAnalogInputs+0x20>
						inputsConnected[i] = tempInput;
    2c6c:	4b1b      	ldr	r3, [pc, #108]	; (2cdc <convertAnalogInputs+0xdc>)
    2c6e:	5518      	strb	r0, [r3, r4]
						connecting[i] = false;
    2c70:	2300      	movs	r3, #0
    2c72:	702b      	strb	r3, [r5, #0]
						countConnecting[i] = 0;
    2c74:	54a3      	strb	r3, [r4, r2]
    2c76:	e7d3      	b.n	2c20 <convertAnalogInputs+0x20>
			countDisconnection[i]++;
    2c78:	4b1a      	ldr	r3, [pc, #104]	; (2ce4 <convertAnalogInputs+0xe4>)
    2c7a:	5ce3      	ldrb	r3, [r4, r3]
    2c7c:	3301      	adds	r3, #1
    2c7e:	b2db      	uxtb	r3, r3
			if(countDisconnection[i] > COUNT_CONNECTING_THRESHOLD)
    2c80:	2b05      	cmp	r3, #5
    2c82:	d802      	bhi.n	2c8a <convertAnalogInputs+0x8a>
			countDisconnection[i]++;
    2c84:	4a17      	ldr	r2, [pc, #92]	; (2ce4 <convertAnalogInputs+0xe4>)
    2c86:	54a3      	strb	r3, [r4, r2]
    2c88:	e7ca      	b.n	2c20 <convertAnalogInputs+0x20>
				countDisconnection[i]	= 0;
    2c8a:	2300      	movs	r3, #0
    2c8c:	4a15      	ldr	r2, [pc, #84]	; (2ce4 <convertAnalogInputs+0xe4>)
    2c8e:	54a3      	strb	r3, [r4, r2]
				inputsConnected[i]		= NOTHINGCONNECTED;
    2c90:	4a12      	ldr	r2, [pc, #72]	; (2cdc <convertAnalogInputs+0xdc>)
    2c92:	18a2      	adds	r2, r4, r2
    2c94:	7013      	strb	r3, [r2, #0]
    2c96:	e7c3      	b.n	2c20 <convertAnalogInputs+0x20>
	{
		NoInDevCon = tempInputCount;
	}
	*/
	
	temp_test_inputs_connected_1[temp_count] = inputsConnected[0] ;
    2c98:	4b13      	ldr	r3, [pc, #76]	; (2ce8 <convertAnalogInputs+0xe8>)
    2c9a:	881b      	ldrh	r3, [r3, #0]
    2c9c:	4a0f      	ldr	r2, [pc, #60]	; (2cdc <convertAnalogInputs+0xdc>)
    2c9e:	7810      	ldrb	r0, [r2, #0]
    2ca0:	4912      	ldr	r1, [pc, #72]	; (2cec <convertAnalogInputs+0xec>)
    2ca2:	54c8      	strb	r0, [r1, r3]
	temp_test_inputs_connected_2[temp_count] = inputsConnected[1] ;
    2ca4:	7850      	ldrb	r0, [r2, #1]
    2ca6:	4912      	ldr	r1, [pc, #72]	; (2cf0 <convertAnalogInputs+0xf0>)
    2ca8:	54c8      	strb	r0, [r1, r3]
	temp_test_inputs_connected_3[temp_count] = inputsConnected[2] ;
    2caa:	7891      	ldrb	r1, [r2, #2]
    2cac:	4a11      	ldr	r2, [pc, #68]	; (2cf4 <convertAnalogInputs+0xf4>)
    2cae:	54d1      	strb	r1, [r2, r3]
	
	temp_count++;
    2cb0:	3301      	adds	r3, #1
    2cb2:	b29b      	uxth	r3, r3
	if(temp_count == 500)
    2cb4:	22fa      	movs	r2, #250	; 0xfa
    2cb6:	0052      	lsls	r2, r2, #1
    2cb8:	4293      	cmp	r3, r2
    2cba:	d002      	beq.n	2cc2 <convertAnalogInputs+0xc2>
	temp_count++;
    2cbc:	4a0a      	ldr	r2, [pc, #40]	; (2ce8 <convertAnalogInputs+0xe8>)
    2cbe:	8013      	strh	r3, [r2, #0]
	{
		temp_count = 0;
	}
}
    2cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp_count = 0;
    2cc2:	2200      	movs	r2, #0
    2cc4:	4b08      	ldr	r3, [pc, #32]	; (2ce8 <convertAnalogInputs+0xe8>)
    2cc6:	801a      	strh	r2, [r3, #0]
}
    2cc8:	e7fa      	b.n	2cc0 <convertAnalogInputs+0xc0>
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	20000198 	.word	0x20000198
    2cd0:	00002ac1 	.word	0x00002ac1
    2cd4:	200001a0 	.word	0x200001a0
    2cd8:	200001b8 	.word	0x200001b8
    2cdc:	20000da0 	.word	0x20000da0
    2ce0:	200001ac 	.word	0x200001ac
    2ce4:	200001a8 	.word	0x200001a8
    2ce8:	200001c2 	.word	0x200001c2
    2cec:	200001c4 	.word	0x200001c4
    2cf0:	200003b8 	.word	0x200003b8
    2cf4:	200005ac 	.word	0x200005ac

00002cf8 <checkOutputs>:



void checkOutputs()
{
    2cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cfa:	2400      	movs	r4, #0
	uint8_t i =0;
	static uint8_t analogOutput[4];
	for(i=0;i<4;i++)
	{
		analogOutput[i] = adc_start_read_result(outputDetectAnalogChannles[i]);
    2cfc:	4f06      	ldr	r7, [pc, #24]	; (2d18 <checkOutputs+0x20>)
    2cfe:	4e07      	ldr	r6, [pc, #28]	; (2d1c <checkOutputs+0x24>)
    2d00:	4d07      	ldr	r5, [pc, #28]	; (2d20 <checkOutputs+0x28>)
    2d02:	5de0      	ldrb	r0, [r4, r7]
    2d04:	47b0      	blx	r6
    2d06:	5560      	strb	r0, [r4, r5]
    2d08:	3401      	adds	r4, #1
	for(i=0;i<4;i++)
    2d0a:	2c04      	cmp	r4, #4
    2d0c:	d1f9      	bne.n	2d02 <checkOutputs+0xa>
	}
	convertAnalogOutputs(analogOutput);
    2d0e:	4804      	ldr	r0, [pc, #16]	; (2d20 <checkOutputs+0x28>)
    2d10:	4b04      	ldr	r3, [pc, #16]	; (2d24 <checkOutputs+0x2c>)
    2d12:	4798      	blx	r3
}
    2d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	00005298 	.word	0x00005298
    2d1c:	000026e5 	.word	0x000026e5
    2d20:	20000190 	.word	0x20000190
    2d24:	00002b0d 	.word	0x00002b0d

00002d28 <checkInputs>:


void checkInputs()
{
    2d28:	b570      	push	{r4, r5, r6, lr}
	uint8_t i =0;
	static uint8_t analogInput[4];
	for(i=0;i<3;i++)
	{
		analogInput[i]			= adc_start_read_result(sensorDetectAnalogChannles[i]);
    2d2a:	200e      	movs	r0, #14
    2d2c:	4d06      	ldr	r5, [pc, #24]	; (2d48 <checkInputs+0x20>)
    2d2e:	47a8      	blx	r5
    2d30:	4c06      	ldr	r4, [pc, #24]	; (2d4c <checkInputs+0x24>)
    2d32:	7020      	strb	r0, [r4, #0]
    2d34:	200d      	movs	r0, #13
    2d36:	47a8      	blx	r5
    2d38:	7060      	strb	r0, [r4, #1]
    2d3a:	2012      	movs	r0, #18
    2d3c:	47a8      	blx	r5
    2d3e:	70a0      	strb	r0, [r4, #2]
	}
	convertAnalogInputs(analogInput);
    2d40:	0020      	movs	r0, r4
    2d42:	4b03      	ldr	r3, [pc, #12]	; (2d50 <checkInputs+0x28>)
    2d44:	4798      	blx	r3
}
    2d46:	bd70      	pop	{r4, r5, r6, pc}
    2d48:	000026e5 	.word	0x000026e5
    2d4c:	2000018c 	.word	0x2000018c
    2d50:	00002c01 	.word	0x00002c01

00002d54 <loadIdentifier>:
	uint32_t temp				= 0;
	uint8_t  i					= 0;
	
	for(i=0;i<NO_OUTPUTS;i++)
	{
		temp		         =  outputsConnected[i];
    2d54:	4a12      	ldr	r2, [pc, #72]	; (2da0 <loadIdentifier+0x4c>)
    2d56:	7813      	ldrb	r3, [r2, #0]
		current_identifier  |=  temp << (28 - 4*i);
    2d58:	071b      	lsls	r3, r3, #28
		temp		         =  outputsConnected[i];
    2d5a:	7851      	ldrb	r1, [r2, #1]
		current_identifier  |=  temp << (28 - 4*i);
    2d5c:	0609      	lsls	r1, r1, #24
    2d5e:	430b      	orrs	r3, r1
	}
	
	for(i=0;i<NO_SENSORS;i++)
	{
		temp		  =  inputsConnected[i];
    2d60:	4910      	ldr	r1, [pc, #64]	; (2da4 <loadIdentifier+0x50>)
    2d62:	7808      	ldrb	r0, [r1, #0]
		current_identifier  |=  temp << (11-(5*i));
    2d64:	02c0      	lsls	r0, r0, #11
    2d66:	4303      	orrs	r3, r0
		temp		  =  inputsConnected[i];
    2d68:	7848      	ldrb	r0, [r1, #1]
		current_identifier  |=  temp << (11-(5*i));
    2d6a:	0180      	lsls	r0, r0, #6
    2d6c:	4303      	orrs	r3, r0
		temp		         =  outputsConnected[i];
    2d6e:	7890      	ldrb	r0, [r2, #2]
		current_identifier  |=  temp << (28 - 4*i);
    2d70:	0500      	lsls	r0, r0, #20
    2d72:	4303      	orrs	r3, r0
		temp		  =  inputsConnected[i];
    2d74:	7889      	ldrb	r1, [r1, #2]
		current_identifier  |=  temp << (11-(5*i));
    2d76:	0049      	lsls	r1, r1, #1
    2d78:	430b      	orrs	r3, r1
		temp		         =  outputsConnected[i];
    2d7a:	78d2      	ldrb	r2, [r2, #3]
		current_identifier  |=  temp << (28 - 4*i);
    2d7c:	0412      	lsls	r2, r2, #16
		current_identifier  |=  temp << (11-(5*i));
    2d7e:	4313      	orrs	r3, r2
	}

	if(current_identifier != previous_identifier)
    2d80:	4a09      	ldr	r2, [pc, #36]	; (2da8 <loadIdentifier+0x54>)
    2d82:	6812      	ldr	r2, [r2, #0]
    2d84:	4293      	cmp	r3, r2
    2d86:	d009      	beq.n	2d9c <loadIdentifier+0x48>
	{
		for(i=0;i<4;i++)
		{
			sensorOutputs[i] = (current_identifier >> 8* (3-i)) & 0x000000FF ;
    2d88:	4a08      	ldr	r2, [pc, #32]	; (2dac <loadIdentifier+0x58>)
    2d8a:	0e19      	lsrs	r1, r3, #24
    2d8c:	7011      	strb	r1, [r2, #0]
    2d8e:	0c19      	lsrs	r1, r3, #16
    2d90:	7051      	strb	r1, [r2, #1]
    2d92:	0a19      	lsrs	r1, r3, #8
    2d94:	7091      	strb	r1, [r2, #2]
    2d96:	70d3      	strb	r3, [r2, #3]
		}
		previous_identifier = current_identifier;
    2d98:	4a03      	ldr	r2, [pc, #12]	; (2da8 <loadIdentifier+0x54>)
    2d9a:	6013      	str	r3, [r2, #0]
	}
}
    2d9c:	4770      	bx	lr
    2d9e:	46c0      	nop			; (mov r8, r8)
    2da0:	20000f2c 	.word	0x20000f2c
    2da4:	20000da0 	.word	0x20000da0
    2da8:	200001b4 	.word	0x200001b4
    2dac:	20000f30 	.word	0x20000f30

00002db0 <checkOutputsInputs>:

void checkOutputsInputs()
{
    2db0:	b510      	push	{r4, lr}
	checkOutputs();
    2db2:	4b03      	ldr	r3, [pc, #12]	; (2dc0 <checkOutputsInputs+0x10>)
    2db4:	4798      	blx	r3
	checkInputs();
    2db6:	4b03      	ldr	r3, [pc, #12]	; (2dc4 <checkOutputsInputs+0x14>)
    2db8:	4798      	blx	r3
	loadIdentifier(); //Set the identifier which will be used in the notifications by the Bluetooth
    2dba:	4b03      	ldr	r3, [pc, #12]	; (2dc8 <checkOutputsInputs+0x18>)
    2dbc:	4798      	blx	r3
}
    2dbe:	bd10      	pop	{r4, pc}
    2dc0:	00002cf9 	.word	0x00002cf9
    2dc4:	00002d29 	.word	0x00002d29
    2dc8:	00002d55 	.word	0x00002d55

00002dcc <configureInputOutputDetection>:


void configureInputOutputDetection()
{
    2dcc:	b510      	push	{r4, lr}
	configureADC();
    2dce:	4b01      	ldr	r3, [pc, #4]	; (2dd4 <configureInputOutputDetection+0x8>)
    2dd0:	4798      	blx	r3
    2dd2:	bd10      	pop	{r4, pc}
    2dd4:	00002661 	.word	0x00002661

00002dd8 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2dd8:	4770      	bx	lr
	...

00002ddc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2ddc:	4b0c      	ldr	r3, [pc, #48]	; (2e10 <cpu_irq_enter_critical+0x34>)
    2dde:	681b      	ldr	r3, [r3, #0]
    2de0:	2b00      	cmp	r3, #0
    2de2:	d106      	bne.n	2df2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2de4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2de8:	2b00      	cmp	r3, #0
    2dea:	d007      	beq.n	2dfc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2dec:	2200      	movs	r2, #0
    2dee:	4b09      	ldr	r3, [pc, #36]	; (2e14 <cpu_irq_enter_critical+0x38>)
    2df0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2df2:	4a07      	ldr	r2, [pc, #28]	; (2e10 <cpu_irq_enter_critical+0x34>)
    2df4:	6813      	ldr	r3, [r2, #0]
    2df6:	3301      	adds	r3, #1
    2df8:	6013      	str	r3, [r2, #0]
}
    2dfa:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2dfc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2dfe:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2e02:	2200      	movs	r2, #0
    2e04:	4b04      	ldr	r3, [pc, #16]	; (2e18 <cpu_irq_enter_critical+0x3c>)
    2e06:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2e08:	3201      	adds	r2, #1
    2e0a:	4b02      	ldr	r3, [pc, #8]	; (2e14 <cpu_irq_enter_critical+0x38>)
    2e0c:	701a      	strb	r2, [r3, #0]
    2e0e:	e7f0      	b.n	2df2 <cpu_irq_enter_critical+0x16>
    2e10:	20000d7c 	.word	0x20000d7c
    2e14:	20000d80 	.word	0x20000d80
    2e18:	20000040 	.word	0x20000040

00002e1c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2e1c:	4b08      	ldr	r3, [pc, #32]	; (2e40 <cpu_irq_leave_critical+0x24>)
    2e1e:	681a      	ldr	r2, [r3, #0]
    2e20:	3a01      	subs	r2, #1
    2e22:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2e24:	681b      	ldr	r3, [r3, #0]
    2e26:	2b00      	cmp	r3, #0
    2e28:	d109      	bne.n	2e3e <cpu_irq_leave_critical+0x22>
    2e2a:	4b06      	ldr	r3, [pc, #24]	; (2e44 <cpu_irq_leave_critical+0x28>)
    2e2c:	781b      	ldrb	r3, [r3, #0]
    2e2e:	2b00      	cmp	r3, #0
    2e30:	d005      	beq.n	2e3e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2e32:	2201      	movs	r2, #1
    2e34:	4b04      	ldr	r3, [pc, #16]	; (2e48 <cpu_irq_leave_critical+0x2c>)
    2e36:	701a      	strb	r2, [r3, #0]
    2e38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2e3c:	b662      	cpsie	i
	}
}
    2e3e:	4770      	bx	lr
    2e40:	20000d7c 	.word	0x20000d7c
    2e44:	20000d80 	.word	0x20000d80
    2e48:	20000040 	.word	0x20000040

00002e4c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2e4c:	b510      	push	{r4, lr}
	switch (clock_source) {
    2e4e:	2808      	cmp	r0, #8
    2e50:	d803      	bhi.n	2e5a <system_clock_source_get_hz+0xe>
    2e52:	0080      	lsls	r0, r0, #2
    2e54:	4b1b      	ldr	r3, [pc, #108]	; (2ec4 <system_clock_source_get_hz+0x78>)
    2e56:	581b      	ldr	r3, [r3, r0]
    2e58:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2e5a:	2000      	movs	r0, #0
    2e5c:	e030      	b.n	2ec0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2e5e:	4b1a      	ldr	r3, [pc, #104]	; (2ec8 <system_clock_source_get_hz+0x7c>)
    2e60:	6918      	ldr	r0, [r3, #16]
    2e62:	e02d      	b.n	2ec0 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2e64:	4b19      	ldr	r3, [pc, #100]	; (2ecc <system_clock_source_get_hz+0x80>)
    2e66:	6a1b      	ldr	r3, [r3, #32]
    2e68:	059b      	lsls	r3, r3, #22
    2e6a:	0f9b      	lsrs	r3, r3, #30
    2e6c:	4818      	ldr	r0, [pc, #96]	; (2ed0 <system_clock_source_get_hz+0x84>)
    2e6e:	40d8      	lsrs	r0, r3
    2e70:	e026      	b.n	2ec0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2e72:	4b15      	ldr	r3, [pc, #84]	; (2ec8 <system_clock_source_get_hz+0x7c>)
    2e74:	6958      	ldr	r0, [r3, #20]
    2e76:	e023      	b.n	2ec0 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2e78:	4b13      	ldr	r3, [pc, #76]	; (2ec8 <system_clock_source_get_hz+0x7c>)
    2e7a:	681b      	ldr	r3, [r3, #0]
			return 0;
    2e7c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2e7e:	079b      	lsls	r3, r3, #30
    2e80:	d51e      	bpl.n	2ec0 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2e82:	4912      	ldr	r1, [pc, #72]	; (2ecc <system_clock_source_get_hz+0x80>)
    2e84:	2210      	movs	r2, #16
    2e86:	68cb      	ldr	r3, [r1, #12]
    2e88:	421a      	tst	r2, r3
    2e8a:	d0fc      	beq.n	2e86 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2e8c:	4b0e      	ldr	r3, [pc, #56]	; (2ec8 <system_clock_source_get_hz+0x7c>)
    2e8e:	681b      	ldr	r3, [r3, #0]
    2e90:	075b      	lsls	r3, r3, #29
    2e92:	d401      	bmi.n	2e98 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2e94:	480f      	ldr	r0, [pc, #60]	; (2ed4 <system_clock_source_get_hz+0x88>)
    2e96:	e013      	b.n	2ec0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2e98:	2000      	movs	r0, #0
    2e9a:	4b0f      	ldr	r3, [pc, #60]	; (2ed8 <system_clock_source_get_hz+0x8c>)
    2e9c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2e9e:	4b0a      	ldr	r3, [pc, #40]	; (2ec8 <system_clock_source_get_hz+0x7c>)
    2ea0:	689b      	ldr	r3, [r3, #8]
    2ea2:	041b      	lsls	r3, r3, #16
    2ea4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2ea6:	4358      	muls	r0, r3
    2ea8:	e00a      	b.n	2ec0 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2eaa:	2350      	movs	r3, #80	; 0x50
    2eac:	4a07      	ldr	r2, [pc, #28]	; (2ecc <system_clock_source_get_hz+0x80>)
    2eae:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2eb0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2eb2:	075b      	lsls	r3, r3, #29
    2eb4:	d504      	bpl.n	2ec0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2eb6:	4b04      	ldr	r3, [pc, #16]	; (2ec8 <system_clock_source_get_hz+0x7c>)
    2eb8:	68d8      	ldr	r0, [r3, #12]
    2eba:	e001      	b.n	2ec0 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2ebc:	2080      	movs	r0, #128	; 0x80
    2ebe:	0200      	lsls	r0, r0, #8
	}
}
    2ec0:	bd10      	pop	{r4, pc}
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	0000529c 	.word	0x0000529c
    2ec8:	20000d84 	.word	0x20000d84
    2ecc:	40000800 	.word	0x40000800
    2ed0:	007a1200 	.word	0x007a1200
    2ed4:	02dc6c00 	.word	0x02dc6c00
    2ed8:	000032ad 	.word	0x000032ad

00002edc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2edc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2ede:	490c      	ldr	r1, [pc, #48]	; (2f10 <system_clock_source_osc8m_set_config+0x34>)
    2ee0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2ee2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2ee4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2ee6:	7840      	ldrb	r0, [r0, #1]
    2ee8:	2201      	movs	r2, #1
    2eea:	4010      	ands	r0, r2
    2eec:	0180      	lsls	r0, r0, #6
    2eee:	2640      	movs	r6, #64	; 0x40
    2ef0:	43b3      	bics	r3, r6
    2ef2:	4303      	orrs	r3, r0
    2ef4:	402a      	ands	r2, r5
    2ef6:	01d2      	lsls	r2, r2, #7
    2ef8:	2080      	movs	r0, #128	; 0x80
    2efa:	4383      	bics	r3, r0
    2efc:	4313      	orrs	r3, r2
    2efe:	2203      	movs	r2, #3
    2f00:	4022      	ands	r2, r4
    2f02:	0212      	lsls	r2, r2, #8
    2f04:	4803      	ldr	r0, [pc, #12]	; (2f14 <system_clock_source_osc8m_set_config+0x38>)
    2f06:	4003      	ands	r3, r0
    2f08:	4313      	orrs	r3, r2
    2f0a:	620b      	str	r3, [r1, #32]
}
    2f0c:	bd70      	pop	{r4, r5, r6, pc}
    2f0e:	46c0      	nop			; (mov r8, r8)
    2f10:	40000800 	.word	0x40000800
    2f14:	fffffcff 	.word	0xfffffcff

00002f18 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2f18:	2808      	cmp	r0, #8
    2f1a:	d803      	bhi.n	2f24 <system_clock_source_enable+0xc>
    2f1c:	0080      	lsls	r0, r0, #2
    2f1e:	4b25      	ldr	r3, [pc, #148]	; (2fb4 <system_clock_source_enable+0x9c>)
    2f20:	581b      	ldr	r3, [r3, r0]
    2f22:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2f24:	2017      	movs	r0, #23
    2f26:	e044      	b.n	2fb2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2f28:	4a23      	ldr	r2, [pc, #140]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f2a:	6a13      	ldr	r3, [r2, #32]
    2f2c:	2102      	movs	r1, #2
    2f2e:	430b      	orrs	r3, r1
    2f30:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2f32:	2000      	movs	r0, #0
    2f34:	e03d      	b.n	2fb2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2f36:	4a20      	ldr	r2, [pc, #128]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f38:	6993      	ldr	r3, [r2, #24]
    2f3a:	2102      	movs	r1, #2
    2f3c:	430b      	orrs	r3, r1
    2f3e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2f40:	2000      	movs	r0, #0
		break;
    2f42:	e036      	b.n	2fb2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2f44:	4a1c      	ldr	r2, [pc, #112]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f46:	8a13      	ldrh	r3, [r2, #16]
    2f48:	2102      	movs	r1, #2
    2f4a:	430b      	orrs	r3, r1
    2f4c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2f4e:	2000      	movs	r0, #0
		break;
    2f50:	e02f      	b.n	2fb2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2f52:	4a19      	ldr	r2, [pc, #100]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f54:	8a93      	ldrh	r3, [r2, #20]
    2f56:	2102      	movs	r1, #2
    2f58:	430b      	orrs	r3, r1
    2f5a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2f5c:	2000      	movs	r0, #0
		break;
    2f5e:	e028      	b.n	2fb2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2f60:	4916      	ldr	r1, [pc, #88]	; (2fbc <system_clock_source_enable+0xa4>)
    2f62:	680b      	ldr	r3, [r1, #0]
    2f64:	2202      	movs	r2, #2
    2f66:	4313      	orrs	r3, r2
    2f68:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2f6a:	4b13      	ldr	r3, [pc, #76]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f6c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f6e:	0019      	movs	r1, r3
    2f70:	320e      	adds	r2, #14
    2f72:	68cb      	ldr	r3, [r1, #12]
    2f74:	421a      	tst	r2, r3
    2f76:	d0fc      	beq.n	2f72 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2f78:	4a10      	ldr	r2, [pc, #64]	; (2fbc <system_clock_source_enable+0xa4>)
    2f7a:	6891      	ldr	r1, [r2, #8]
    2f7c:	4b0e      	ldr	r3, [pc, #56]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f7e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2f80:	6852      	ldr	r2, [r2, #4]
    2f82:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2f84:	2200      	movs	r2, #0
    2f86:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f88:	0019      	movs	r1, r3
    2f8a:	3210      	adds	r2, #16
    2f8c:	68cb      	ldr	r3, [r1, #12]
    2f8e:	421a      	tst	r2, r3
    2f90:	d0fc      	beq.n	2f8c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2f92:	4b0a      	ldr	r3, [pc, #40]	; (2fbc <system_clock_source_enable+0xa4>)
    2f94:	681b      	ldr	r3, [r3, #0]
    2f96:	b29b      	uxth	r3, r3
    2f98:	4a07      	ldr	r2, [pc, #28]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f9a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2f9c:	2000      	movs	r0, #0
    2f9e:	e008      	b.n	2fb2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2fa0:	4905      	ldr	r1, [pc, #20]	; (2fb8 <system_clock_source_enable+0xa0>)
    2fa2:	2244      	movs	r2, #68	; 0x44
    2fa4:	5c8b      	ldrb	r3, [r1, r2]
    2fa6:	2002      	movs	r0, #2
    2fa8:	4303      	orrs	r3, r0
    2faa:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2fac:	2000      	movs	r0, #0
		break;
    2fae:	e000      	b.n	2fb2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2fb0:	2000      	movs	r0, #0
}
    2fb2:	4770      	bx	lr
    2fb4:	000052c0 	.word	0x000052c0
    2fb8:	40000800 	.word	0x40000800
    2fbc:	20000d84 	.word	0x20000d84

00002fc0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2fc0:	b530      	push	{r4, r5, lr}
    2fc2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2fc4:	22c2      	movs	r2, #194	; 0xc2
    2fc6:	00d2      	lsls	r2, r2, #3
    2fc8:	4b1a      	ldr	r3, [pc, #104]	; (3034 <system_clock_init+0x74>)
    2fca:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2fcc:	4a1a      	ldr	r2, [pc, #104]	; (3038 <system_clock_init+0x78>)
    2fce:	6853      	ldr	r3, [r2, #4]
    2fd0:	211e      	movs	r1, #30
    2fd2:	438b      	bics	r3, r1
    2fd4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2fd6:	2301      	movs	r3, #1
    2fd8:	466a      	mov	r2, sp
    2fda:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fdc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2fde:	4d17      	ldr	r5, [pc, #92]	; (303c <system_clock_init+0x7c>)
    2fe0:	b2e0      	uxtb	r0, r4
    2fe2:	4669      	mov	r1, sp
    2fe4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fe6:	3401      	adds	r4, #1
    2fe8:	2c25      	cmp	r4, #37	; 0x25
    2fea:	d1f9      	bne.n	2fe0 <system_clock_init+0x20>
	config->run_in_standby  = false;
    2fec:	a803      	add	r0, sp, #12
    2fee:	2400      	movs	r4, #0
    2ff0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2ff2:	2501      	movs	r5, #1
    2ff4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2ff6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2ff8:	4b11      	ldr	r3, [pc, #68]	; (3040 <system_clock_init+0x80>)
    2ffa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2ffc:	2006      	movs	r0, #6
    2ffe:	4b11      	ldr	r3, [pc, #68]	; (3044 <system_clock_init+0x84>)
    3000:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3002:	4b11      	ldr	r3, [pc, #68]	; (3048 <system_clock_init+0x88>)
    3004:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    3006:	4b11      	ldr	r3, [pc, #68]	; (304c <system_clock_init+0x8c>)
    3008:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    300a:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    300c:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    300e:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3010:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    3012:	466b      	mov	r3, sp
    3014:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3016:	2306      	movs	r3, #6
    3018:	466a      	mov	r2, sp
    301a:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    301c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    301e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3020:	4669      	mov	r1, sp
    3022:	2000      	movs	r0, #0
    3024:	4b0a      	ldr	r3, [pc, #40]	; (3050 <system_clock_init+0x90>)
    3026:	4798      	blx	r3
    3028:	2000      	movs	r0, #0
    302a:	4b0a      	ldr	r3, [pc, #40]	; (3054 <system_clock_init+0x94>)
    302c:	4798      	blx	r3
#endif
}
    302e:	b005      	add	sp, #20
    3030:	bd30      	pop	{r4, r5, pc}
    3032:	46c0      	nop			; (mov r8, r8)
    3034:	40000800 	.word	0x40000800
    3038:	41004000 	.word	0x41004000
    303c:	00003291 	.word	0x00003291
    3040:	00002edd 	.word	0x00002edd
    3044:	00002f19 	.word	0x00002f19
    3048:	00003059 	.word	0x00003059
    304c:	40000400 	.word	0x40000400
    3050:	0000307d 	.word	0x0000307d
    3054:	00003135 	.word	0x00003135

00003058 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3058:	4a06      	ldr	r2, [pc, #24]	; (3074 <system_gclk_init+0x1c>)
    305a:	6993      	ldr	r3, [r2, #24]
    305c:	2108      	movs	r1, #8
    305e:	430b      	orrs	r3, r1
    3060:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3062:	2201      	movs	r2, #1
    3064:	4b04      	ldr	r3, [pc, #16]	; (3078 <system_gclk_init+0x20>)
    3066:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3068:	0019      	movs	r1, r3
    306a:	780b      	ldrb	r3, [r1, #0]
    306c:	4213      	tst	r3, r2
    306e:	d1fc      	bne.n	306a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3070:	4770      	bx	lr
    3072:	46c0      	nop			; (mov r8, r8)
    3074:	40000400 	.word	0x40000400
    3078:	40000c00 	.word	0x40000c00

0000307c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    307c:	b570      	push	{r4, r5, r6, lr}
    307e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3080:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3082:	780d      	ldrb	r5, [r1, #0]
    3084:	022d      	lsls	r5, r5, #8
    3086:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3088:	784b      	ldrb	r3, [r1, #1]
    308a:	2b00      	cmp	r3, #0
    308c:	d002      	beq.n	3094 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    308e:	2380      	movs	r3, #128	; 0x80
    3090:	02db      	lsls	r3, r3, #11
    3092:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3094:	7a4b      	ldrb	r3, [r1, #9]
    3096:	2b00      	cmp	r3, #0
    3098:	d002      	beq.n	30a0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    309a:	2380      	movs	r3, #128	; 0x80
    309c:	031b      	lsls	r3, r3, #12
    309e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    30a0:	6848      	ldr	r0, [r1, #4]
    30a2:	2801      	cmp	r0, #1
    30a4:	d910      	bls.n	30c8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    30a6:	1e43      	subs	r3, r0, #1
    30a8:	4218      	tst	r0, r3
    30aa:	d134      	bne.n	3116 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    30ac:	2802      	cmp	r0, #2
    30ae:	d930      	bls.n	3112 <system_gclk_gen_set_config+0x96>
    30b0:	2302      	movs	r3, #2
    30b2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    30b4:	3201      	adds	r2, #1
						mask <<= 1) {
    30b6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    30b8:	4298      	cmp	r0, r3
    30ba:	d8fb      	bhi.n	30b4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    30bc:	0212      	lsls	r2, r2, #8
    30be:	4332      	orrs	r2, r6
    30c0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    30c2:	2380      	movs	r3, #128	; 0x80
    30c4:	035b      	lsls	r3, r3, #13
    30c6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    30c8:	7a0b      	ldrb	r3, [r1, #8]
    30ca:	2b00      	cmp	r3, #0
    30cc:	d002      	beq.n	30d4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    30ce:	2380      	movs	r3, #128	; 0x80
    30d0:	039b      	lsls	r3, r3, #14
    30d2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30d4:	4a13      	ldr	r2, [pc, #76]	; (3124 <system_gclk_gen_set_config+0xa8>)
    30d6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    30d8:	b25b      	sxtb	r3, r3
    30da:	2b00      	cmp	r3, #0
    30dc:	dbfb      	blt.n	30d6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    30de:	4b12      	ldr	r3, [pc, #72]	; (3128 <system_gclk_gen_set_config+0xac>)
    30e0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    30e2:	4b12      	ldr	r3, [pc, #72]	; (312c <system_gclk_gen_set_config+0xb0>)
    30e4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30e6:	4a0f      	ldr	r2, [pc, #60]	; (3124 <system_gclk_gen_set_config+0xa8>)
    30e8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    30ea:	b25b      	sxtb	r3, r3
    30ec:	2b00      	cmp	r3, #0
    30ee:	dbfb      	blt.n	30e8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    30f0:	4b0c      	ldr	r3, [pc, #48]	; (3124 <system_gclk_gen_set_config+0xa8>)
    30f2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30f4:	001a      	movs	r2, r3
    30f6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    30f8:	b25b      	sxtb	r3, r3
    30fa:	2b00      	cmp	r3, #0
    30fc:	dbfb      	blt.n	30f6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    30fe:	4a09      	ldr	r2, [pc, #36]	; (3124 <system_gclk_gen_set_config+0xa8>)
    3100:	6853      	ldr	r3, [r2, #4]
    3102:	2180      	movs	r1, #128	; 0x80
    3104:	0249      	lsls	r1, r1, #9
    3106:	400b      	ands	r3, r1
    3108:	431d      	orrs	r5, r3
    310a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    310c:	4b08      	ldr	r3, [pc, #32]	; (3130 <system_gclk_gen_set_config+0xb4>)
    310e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3110:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3112:	2200      	movs	r2, #0
    3114:	e7d2      	b.n	30bc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3116:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3118:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    311a:	2380      	movs	r3, #128	; 0x80
    311c:	029b      	lsls	r3, r3, #10
    311e:	431d      	orrs	r5, r3
    3120:	e7d2      	b.n	30c8 <system_gclk_gen_set_config+0x4c>
    3122:	46c0      	nop			; (mov r8, r8)
    3124:	40000c00 	.word	0x40000c00
    3128:	00002ddd 	.word	0x00002ddd
    312c:	40000c08 	.word	0x40000c08
    3130:	00002e1d 	.word	0x00002e1d

00003134 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3134:	b510      	push	{r4, lr}
    3136:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3138:	4a0b      	ldr	r2, [pc, #44]	; (3168 <system_gclk_gen_enable+0x34>)
    313a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    313c:	b25b      	sxtb	r3, r3
    313e:	2b00      	cmp	r3, #0
    3140:	dbfb      	blt.n	313a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3142:	4b0a      	ldr	r3, [pc, #40]	; (316c <system_gclk_gen_enable+0x38>)
    3144:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3146:	4b0a      	ldr	r3, [pc, #40]	; (3170 <system_gclk_gen_enable+0x3c>)
    3148:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    314a:	4a07      	ldr	r2, [pc, #28]	; (3168 <system_gclk_gen_enable+0x34>)
    314c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    314e:	b25b      	sxtb	r3, r3
    3150:	2b00      	cmp	r3, #0
    3152:	dbfb      	blt.n	314c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3154:	4a04      	ldr	r2, [pc, #16]	; (3168 <system_gclk_gen_enable+0x34>)
    3156:	6851      	ldr	r1, [r2, #4]
    3158:	2380      	movs	r3, #128	; 0x80
    315a:	025b      	lsls	r3, r3, #9
    315c:	430b      	orrs	r3, r1
    315e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3160:	4b04      	ldr	r3, [pc, #16]	; (3174 <system_gclk_gen_enable+0x40>)
    3162:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3164:	bd10      	pop	{r4, pc}
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	40000c00 	.word	0x40000c00
    316c:	00002ddd 	.word	0x00002ddd
    3170:	40000c04 	.word	0x40000c04
    3174:	00002e1d 	.word	0x00002e1d

00003178 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3178:	b570      	push	{r4, r5, r6, lr}
    317a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    317c:	4a1a      	ldr	r2, [pc, #104]	; (31e8 <system_gclk_gen_get_hz+0x70>)
    317e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3180:	b25b      	sxtb	r3, r3
    3182:	2b00      	cmp	r3, #0
    3184:	dbfb      	blt.n	317e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3186:	4b19      	ldr	r3, [pc, #100]	; (31ec <system_gclk_gen_get_hz+0x74>)
    3188:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    318a:	4b19      	ldr	r3, [pc, #100]	; (31f0 <system_gclk_gen_get_hz+0x78>)
    318c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    318e:	4a16      	ldr	r2, [pc, #88]	; (31e8 <system_gclk_gen_get_hz+0x70>)
    3190:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3192:	b25b      	sxtb	r3, r3
    3194:	2b00      	cmp	r3, #0
    3196:	dbfb      	blt.n	3190 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3198:	4e13      	ldr	r6, [pc, #76]	; (31e8 <system_gclk_gen_get_hz+0x70>)
    319a:	6870      	ldr	r0, [r6, #4]
    319c:	04c0      	lsls	r0, r0, #19
    319e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    31a0:	4b14      	ldr	r3, [pc, #80]	; (31f4 <system_gclk_gen_get_hz+0x7c>)
    31a2:	4798      	blx	r3
    31a4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    31a6:	4b12      	ldr	r3, [pc, #72]	; (31f0 <system_gclk_gen_get_hz+0x78>)
    31a8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    31aa:	6876      	ldr	r6, [r6, #4]
    31ac:	02f6      	lsls	r6, r6, #11
    31ae:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    31b0:	4b11      	ldr	r3, [pc, #68]	; (31f8 <system_gclk_gen_get_hz+0x80>)
    31b2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31b4:	4a0c      	ldr	r2, [pc, #48]	; (31e8 <system_gclk_gen_get_hz+0x70>)
    31b6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    31b8:	b25b      	sxtb	r3, r3
    31ba:	2b00      	cmp	r3, #0
    31bc:	dbfb      	blt.n	31b6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    31be:	4b0a      	ldr	r3, [pc, #40]	; (31e8 <system_gclk_gen_get_hz+0x70>)
    31c0:	689c      	ldr	r4, [r3, #8]
    31c2:	0224      	lsls	r4, r4, #8
    31c4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    31c6:	4b0d      	ldr	r3, [pc, #52]	; (31fc <system_gclk_gen_get_hz+0x84>)
    31c8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    31ca:	2e00      	cmp	r6, #0
    31cc:	d107      	bne.n	31de <system_gclk_gen_get_hz+0x66>
    31ce:	2c01      	cmp	r4, #1
    31d0:	d907      	bls.n	31e2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    31d2:	0021      	movs	r1, r4
    31d4:	0028      	movs	r0, r5
    31d6:	4b0a      	ldr	r3, [pc, #40]	; (3200 <system_gclk_gen_get_hz+0x88>)
    31d8:	4798      	blx	r3
    31da:	0005      	movs	r5, r0
    31dc:	e001      	b.n	31e2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    31de:	3401      	adds	r4, #1
    31e0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    31e2:	0028      	movs	r0, r5
    31e4:	bd70      	pop	{r4, r5, r6, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	40000c00 	.word	0x40000c00
    31ec:	00002ddd 	.word	0x00002ddd
    31f0:	40000c04 	.word	0x40000c04
    31f4:	00002e4d 	.word	0x00002e4d
    31f8:	40000c08 	.word	0x40000c08
    31fc:	00002e1d 	.word	0x00002e1d
    3200:	00003565 	.word	0x00003565

00003204 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3204:	b510      	push	{r4, lr}
    3206:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3208:	4b06      	ldr	r3, [pc, #24]	; (3224 <system_gclk_chan_enable+0x20>)
    320a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    320c:	4b06      	ldr	r3, [pc, #24]	; (3228 <system_gclk_chan_enable+0x24>)
    320e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3210:	4a06      	ldr	r2, [pc, #24]	; (322c <system_gclk_chan_enable+0x28>)
    3212:	8853      	ldrh	r3, [r2, #2]
    3214:	2180      	movs	r1, #128	; 0x80
    3216:	01c9      	lsls	r1, r1, #7
    3218:	430b      	orrs	r3, r1
    321a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    321c:	4b04      	ldr	r3, [pc, #16]	; (3230 <system_gclk_chan_enable+0x2c>)
    321e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3220:	bd10      	pop	{r4, pc}
    3222:	46c0      	nop			; (mov r8, r8)
    3224:	00002ddd 	.word	0x00002ddd
    3228:	40000c02 	.word	0x40000c02
    322c:	40000c00 	.word	0x40000c00
    3230:	00002e1d 	.word	0x00002e1d

00003234 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3234:	b510      	push	{r4, lr}
    3236:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3238:	4b0f      	ldr	r3, [pc, #60]	; (3278 <system_gclk_chan_disable+0x44>)
    323a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    323c:	4b0f      	ldr	r3, [pc, #60]	; (327c <system_gclk_chan_disable+0x48>)
    323e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3240:	4a0f      	ldr	r2, [pc, #60]	; (3280 <system_gclk_chan_disable+0x4c>)
    3242:	8853      	ldrh	r3, [r2, #2]
    3244:	051b      	lsls	r3, r3, #20
    3246:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3248:	8853      	ldrh	r3, [r2, #2]
    324a:	490e      	ldr	r1, [pc, #56]	; (3284 <system_gclk_chan_disable+0x50>)
    324c:	400b      	ands	r3, r1
    324e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3250:	8853      	ldrh	r3, [r2, #2]
    3252:	490d      	ldr	r1, [pc, #52]	; (3288 <system_gclk_chan_disable+0x54>)
    3254:	400b      	ands	r3, r1
    3256:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3258:	0011      	movs	r1, r2
    325a:	2280      	movs	r2, #128	; 0x80
    325c:	01d2      	lsls	r2, r2, #7
    325e:	884b      	ldrh	r3, [r1, #2]
    3260:	4213      	tst	r3, r2
    3262:	d1fc      	bne.n	325e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3264:	4906      	ldr	r1, [pc, #24]	; (3280 <system_gclk_chan_disable+0x4c>)
    3266:	884a      	ldrh	r2, [r1, #2]
    3268:	0203      	lsls	r3, r0, #8
    326a:	4806      	ldr	r0, [pc, #24]	; (3284 <system_gclk_chan_disable+0x50>)
    326c:	4002      	ands	r2, r0
    326e:	4313      	orrs	r3, r2
    3270:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3272:	4b06      	ldr	r3, [pc, #24]	; (328c <system_gclk_chan_disable+0x58>)
    3274:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3276:	bd10      	pop	{r4, pc}
    3278:	00002ddd 	.word	0x00002ddd
    327c:	40000c02 	.word	0x40000c02
    3280:	40000c00 	.word	0x40000c00
    3284:	fffff0ff 	.word	0xfffff0ff
    3288:	ffffbfff 	.word	0xffffbfff
    328c:	00002e1d 	.word	0x00002e1d

00003290 <system_gclk_chan_set_config>:
{
    3290:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3292:	780c      	ldrb	r4, [r1, #0]
    3294:	0224      	lsls	r4, r4, #8
    3296:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3298:	4b02      	ldr	r3, [pc, #8]	; (32a4 <system_gclk_chan_set_config+0x14>)
    329a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    329c:	b2a4      	uxth	r4, r4
    329e:	4b02      	ldr	r3, [pc, #8]	; (32a8 <system_gclk_chan_set_config+0x18>)
    32a0:	805c      	strh	r4, [r3, #2]
}
    32a2:	bd10      	pop	{r4, pc}
    32a4:	00003235 	.word	0x00003235
    32a8:	40000c00 	.word	0x40000c00

000032ac <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    32ac:	b510      	push	{r4, lr}
    32ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    32b0:	4b06      	ldr	r3, [pc, #24]	; (32cc <system_gclk_chan_get_hz+0x20>)
    32b2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    32b4:	4b06      	ldr	r3, [pc, #24]	; (32d0 <system_gclk_chan_get_hz+0x24>)
    32b6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    32b8:	4b06      	ldr	r3, [pc, #24]	; (32d4 <system_gclk_chan_get_hz+0x28>)
    32ba:	885c      	ldrh	r4, [r3, #2]
    32bc:	0524      	lsls	r4, r4, #20
    32be:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    32c0:	4b05      	ldr	r3, [pc, #20]	; (32d8 <system_gclk_chan_get_hz+0x2c>)
    32c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    32c4:	0020      	movs	r0, r4
    32c6:	4b05      	ldr	r3, [pc, #20]	; (32dc <system_gclk_chan_get_hz+0x30>)
    32c8:	4798      	blx	r3
}
    32ca:	bd10      	pop	{r4, pc}
    32cc:	00002ddd 	.word	0x00002ddd
    32d0:	40000c02 	.word	0x40000c02
    32d4:	40000c00 	.word	0x40000c00
    32d8:	00002e1d 	.word	0x00002e1d
    32dc:	00003179 	.word	0x00003179

000032e0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    32e0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    32e2:	78d3      	ldrb	r3, [r2, #3]
    32e4:	2b00      	cmp	r3, #0
    32e6:	d135      	bne.n	3354 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    32e8:	7813      	ldrb	r3, [r2, #0]
    32ea:	2b80      	cmp	r3, #128	; 0x80
    32ec:	d029      	beq.n	3342 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    32ee:	061b      	lsls	r3, r3, #24
    32f0:	2480      	movs	r4, #128	; 0x80
    32f2:	0264      	lsls	r4, r4, #9
    32f4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    32f6:	7854      	ldrb	r4, [r2, #1]
    32f8:	2502      	movs	r5, #2
    32fa:	43ac      	bics	r4, r5
    32fc:	d106      	bne.n	330c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    32fe:	7894      	ldrb	r4, [r2, #2]
    3300:	2c00      	cmp	r4, #0
    3302:	d120      	bne.n	3346 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3304:	2480      	movs	r4, #128	; 0x80
    3306:	02a4      	lsls	r4, r4, #10
    3308:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    330a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    330c:	7854      	ldrb	r4, [r2, #1]
    330e:	3c01      	subs	r4, #1
    3310:	2c01      	cmp	r4, #1
    3312:	d91c      	bls.n	334e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3314:	040d      	lsls	r5, r1, #16
    3316:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3318:	24a0      	movs	r4, #160	; 0xa0
    331a:	05e4      	lsls	r4, r4, #23
    331c:	432c      	orrs	r4, r5
    331e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3320:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3322:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3324:	24d0      	movs	r4, #208	; 0xd0
    3326:	0624      	lsls	r4, r4, #24
    3328:	432c      	orrs	r4, r5
    332a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    332c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    332e:	78d4      	ldrb	r4, [r2, #3]
    3330:	2c00      	cmp	r4, #0
    3332:	d122      	bne.n	337a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3334:	035b      	lsls	r3, r3, #13
    3336:	d51c      	bpl.n	3372 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3338:	7893      	ldrb	r3, [r2, #2]
    333a:	2b01      	cmp	r3, #1
    333c:	d01e      	beq.n	337c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    333e:	6141      	str	r1, [r0, #20]
    3340:	e017      	b.n	3372 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3342:	2300      	movs	r3, #0
    3344:	e7d7      	b.n	32f6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3346:	24c0      	movs	r4, #192	; 0xc0
    3348:	02e4      	lsls	r4, r4, #11
    334a:	4323      	orrs	r3, r4
    334c:	e7dd      	b.n	330a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    334e:	4c0d      	ldr	r4, [pc, #52]	; (3384 <_system_pinmux_config+0xa4>)
    3350:	4023      	ands	r3, r4
    3352:	e7df      	b.n	3314 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3354:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3356:	040c      	lsls	r4, r1, #16
    3358:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    335a:	23a0      	movs	r3, #160	; 0xa0
    335c:	05db      	lsls	r3, r3, #23
    335e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3360:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3362:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3364:	23d0      	movs	r3, #208	; 0xd0
    3366:	061b      	lsls	r3, r3, #24
    3368:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    336a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    336c:	78d3      	ldrb	r3, [r2, #3]
    336e:	2b00      	cmp	r3, #0
    3370:	d103      	bne.n	337a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3372:	7853      	ldrb	r3, [r2, #1]
    3374:	3b01      	subs	r3, #1
    3376:	2b01      	cmp	r3, #1
    3378:	d902      	bls.n	3380 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    337a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    337c:	6181      	str	r1, [r0, #24]
    337e:	e7f8      	b.n	3372 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3380:	6081      	str	r1, [r0, #8]
}
    3382:	e7fa      	b.n	337a <_system_pinmux_config+0x9a>
    3384:	fffbffff 	.word	0xfffbffff

00003388 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3388:	b510      	push	{r4, lr}
    338a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    338c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    338e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3390:	2900      	cmp	r1, #0
    3392:	d104      	bne.n	339e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3394:	0943      	lsrs	r3, r0, #5
    3396:	01db      	lsls	r3, r3, #7
    3398:	4905      	ldr	r1, [pc, #20]	; (33b0 <system_pinmux_pin_set_config+0x28>)
    339a:	468c      	mov	ip, r1
    339c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    339e:	241f      	movs	r4, #31
    33a0:	4020      	ands	r0, r4
    33a2:	2101      	movs	r1, #1
    33a4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    33a6:	0018      	movs	r0, r3
    33a8:	4b02      	ldr	r3, [pc, #8]	; (33b4 <system_pinmux_pin_set_config+0x2c>)
    33aa:	4798      	blx	r3
}
    33ac:	bd10      	pop	{r4, pc}
    33ae:	46c0      	nop			; (mov r8, r8)
    33b0:	41004400 	.word	0x41004400
    33b4:	000032e1 	.word	0x000032e1

000033b8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    33b8:	4770      	bx	lr
	...

000033bc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    33bc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    33be:	4b05      	ldr	r3, [pc, #20]	; (33d4 <system_init+0x18>)
    33c0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    33c2:	4b05      	ldr	r3, [pc, #20]	; (33d8 <system_init+0x1c>)
    33c4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    33c6:	4b05      	ldr	r3, [pc, #20]	; (33dc <system_init+0x20>)
    33c8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    33ca:	4b05      	ldr	r3, [pc, #20]	; (33e0 <system_init+0x24>)
    33cc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    33ce:	4b05      	ldr	r3, [pc, #20]	; (33e4 <system_init+0x28>)
    33d0:	4798      	blx	r3
}
    33d2:	bd10      	pop	{r4, pc}
    33d4:	00002fc1 	.word	0x00002fc1
    33d8:	00002dd9 	.word	0x00002dd9
    33dc:	000033b9 	.word	0x000033b9
    33e0:	000033b9 	.word	0x000033b9
    33e4:	000033b9 	.word	0x000033b9

000033e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    33e8:	e7fe      	b.n	33e8 <Dummy_Handler>
	...

000033ec <Reset_Handler>:
{
    33ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    33ee:	4a2a      	ldr	r2, [pc, #168]	; (3498 <Reset_Handler+0xac>)
    33f0:	4b2a      	ldr	r3, [pc, #168]	; (349c <Reset_Handler+0xb0>)
    33f2:	429a      	cmp	r2, r3
    33f4:	d011      	beq.n	341a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    33f6:	001a      	movs	r2, r3
    33f8:	4b29      	ldr	r3, [pc, #164]	; (34a0 <Reset_Handler+0xb4>)
    33fa:	429a      	cmp	r2, r3
    33fc:	d20d      	bcs.n	341a <Reset_Handler+0x2e>
    33fe:	4a29      	ldr	r2, [pc, #164]	; (34a4 <Reset_Handler+0xb8>)
    3400:	3303      	adds	r3, #3
    3402:	1a9b      	subs	r3, r3, r2
    3404:	089b      	lsrs	r3, r3, #2
    3406:	3301      	adds	r3, #1
    3408:	009b      	lsls	r3, r3, #2
    340a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    340c:	4823      	ldr	r0, [pc, #140]	; (349c <Reset_Handler+0xb0>)
    340e:	4922      	ldr	r1, [pc, #136]	; (3498 <Reset_Handler+0xac>)
    3410:	588c      	ldr	r4, [r1, r2]
    3412:	5084      	str	r4, [r0, r2]
    3414:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3416:	429a      	cmp	r2, r3
    3418:	d1fa      	bne.n	3410 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    341a:	4a23      	ldr	r2, [pc, #140]	; (34a8 <Reset_Handler+0xbc>)
    341c:	4b23      	ldr	r3, [pc, #140]	; (34ac <Reset_Handler+0xc0>)
    341e:	429a      	cmp	r2, r3
    3420:	d20a      	bcs.n	3438 <Reset_Handler+0x4c>
    3422:	43d3      	mvns	r3, r2
    3424:	4921      	ldr	r1, [pc, #132]	; (34ac <Reset_Handler+0xc0>)
    3426:	185b      	adds	r3, r3, r1
    3428:	2103      	movs	r1, #3
    342a:	438b      	bics	r3, r1
    342c:	3304      	adds	r3, #4
    342e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3430:	2100      	movs	r1, #0
    3432:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3434:	4293      	cmp	r3, r2
    3436:	d1fc      	bne.n	3432 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3438:	4a1d      	ldr	r2, [pc, #116]	; (34b0 <Reset_Handler+0xc4>)
    343a:	21ff      	movs	r1, #255	; 0xff
    343c:	4b1d      	ldr	r3, [pc, #116]	; (34b4 <Reset_Handler+0xc8>)
    343e:	438b      	bics	r3, r1
    3440:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3442:	39fd      	subs	r1, #253	; 0xfd
    3444:	2390      	movs	r3, #144	; 0x90
    3446:	005b      	lsls	r3, r3, #1
    3448:	4a1b      	ldr	r2, [pc, #108]	; (34b8 <Reset_Handler+0xcc>)
    344a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    344c:	4a1b      	ldr	r2, [pc, #108]	; (34bc <Reset_Handler+0xd0>)
    344e:	78d3      	ldrb	r3, [r2, #3]
    3450:	2503      	movs	r5, #3
    3452:	43ab      	bics	r3, r5
    3454:	2402      	movs	r4, #2
    3456:	4323      	orrs	r3, r4
    3458:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    345a:	78d3      	ldrb	r3, [r2, #3]
    345c:	270c      	movs	r7, #12
    345e:	43bb      	bics	r3, r7
    3460:	2608      	movs	r6, #8
    3462:	4333      	orrs	r3, r6
    3464:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3466:	4b16      	ldr	r3, [pc, #88]	; (34c0 <Reset_Handler+0xd4>)
    3468:	7b98      	ldrb	r0, [r3, #14]
    346a:	2230      	movs	r2, #48	; 0x30
    346c:	4390      	bics	r0, r2
    346e:	2220      	movs	r2, #32
    3470:	4310      	orrs	r0, r2
    3472:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3474:	7b99      	ldrb	r1, [r3, #14]
    3476:	43b9      	bics	r1, r7
    3478:	4331      	orrs	r1, r6
    347a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    347c:	7b9a      	ldrb	r2, [r3, #14]
    347e:	43aa      	bics	r2, r5
    3480:	4322      	orrs	r2, r4
    3482:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3484:	4a0f      	ldr	r2, [pc, #60]	; (34c4 <Reset_Handler+0xd8>)
    3486:	6853      	ldr	r3, [r2, #4]
    3488:	2180      	movs	r1, #128	; 0x80
    348a:	430b      	orrs	r3, r1
    348c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    348e:	4b0e      	ldr	r3, [pc, #56]	; (34c8 <Reset_Handler+0xdc>)
    3490:	4798      	blx	r3
        main();
    3492:	4b0e      	ldr	r3, [pc, #56]	; (34cc <Reset_Handler+0xe0>)
    3494:	4798      	blx	r3
    3496:	e7fe      	b.n	3496 <Reset_Handler+0xaa>
    3498:	00005384 	.word	0x00005384
    349c:	20000000 	.word	0x20000000
    34a0:	200000a8 	.word	0x200000a8
    34a4:	20000004 	.word	0x20000004
    34a8:	200000a8 	.word	0x200000a8
    34ac:	200011b4 	.word	0x200011b4
    34b0:	e000ed00 	.word	0xe000ed00
    34b4:	00000000 	.word	0x00000000
    34b8:	41007000 	.word	0x41007000
    34bc:	41005000 	.word	0x41005000
    34c0:	41004800 	.word	0x41004800
    34c4:	41004000 	.word	0x41004000
    34c8:	00004f99 	.word	0x00004f99
    34cc:	000034f5 	.word	0x000034f5

000034d0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    34d0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    34d2:	4a06      	ldr	r2, [pc, #24]	; (34ec <_sbrk+0x1c>)
    34d4:	6812      	ldr	r2, [r2, #0]
    34d6:	2a00      	cmp	r2, #0
    34d8:	d004      	beq.n	34e4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    34da:	4a04      	ldr	r2, [pc, #16]	; (34ec <_sbrk+0x1c>)
    34dc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    34de:	18c3      	adds	r3, r0, r3
    34e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    34e2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    34e4:	4902      	ldr	r1, [pc, #8]	; (34f0 <_sbrk+0x20>)
    34e6:	4a01      	ldr	r2, [pc, #4]	; (34ec <_sbrk+0x1c>)
    34e8:	6011      	str	r1, [r2, #0]
    34ea:	e7f6      	b.n	34da <_sbrk+0xa>
    34ec:	20000d9c 	.word	0x20000d9c
    34f0:	200031b8 	.word	0x200031b8

000034f4 <main>:
};
*/


int main (void)
{
    34f4:	b570      	push	{r4, r5, r6, lr}
	system_init();
    34f6:	4b0f      	ldr	r3, [pc, #60]	; (3534 <main+0x40>)
    34f8:	4798      	blx	r3
	delay_init();
    34fa:	4b0f      	ldr	r3, [pc, #60]	; (3538 <main+0x44>)
    34fc:	4798      	blx	r3
	configureSendInfo();
    34fe:	4b0f      	ldr	r3, [pc, #60]	; (353c <main+0x48>)
    3500:	4798      	blx	r3
	initializeI2CModules();
    3502:	4b0f      	ldr	r3, [pc, #60]	; (3540 <main+0x4c>)
    3504:	4798      	blx	r3
	delay_cycles_ms(500);
    3506:	20fa      	movs	r0, #250	; 0xfa
    3508:	0040      	lsls	r0, r0, #1
    350a:	4b0e      	ldr	r3, [pc, #56]	; (3544 <main+0x50>)
    350c:	4798      	blx	r3
	//enableServoTCC();
	//USART -- 115200
	serialInit();
    350e:	4b0e      	ldr	r3, [pc, #56]	; (3548 <main+0x54>)
    3510:	4798      	blx	r3
	configureInputOutputDetection();
    3512:	4b0e      	ldr	r3, [pc, #56]	; (354c <main+0x58>)
    3514:	4798      	blx	r3
	while(1)
	{
		checkOutputsInputs();
    3516:	4e0e      	ldr	r6, [pc, #56]	; (3550 <main+0x5c>)
		checkSetOutputs();
    3518:	4d0e      	ldr	r5, [pc, #56]	; (3554 <main+0x60>)
		readSensors();
    351a:	4c0f      	ldr	r4, [pc, #60]	; (3558 <main+0x64>)
		checkOutputsInputs();
    351c:	47b0      	blx	r6
		checkSetOutputs();
    351e:	47a8      	blx	r5
		readSensors();
    3520:	47a0      	blx	r4
		//setOutputs();
		checkUART();
    3522:	4b0e      	ldr	r3, [pc, #56]	; (355c <main+0x68>)
    3524:	4798      	blx	r3
		checkSendOutputs();
    3526:	4b0e      	ldr	r3, [pc, #56]	; (3560 <main+0x6c>)
    3528:	4798      	blx	r3
		delay_ms(25);
    352a:	2019      	movs	r0, #25
    352c:	4b05      	ldr	r3, [pc, #20]	; (3544 <main+0x50>)
    352e:	4798      	blx	r3
    3530:	e7f4      	b.n	351c <main+0x28>
    3532:	46c0      	nop			; (mov r8, r8)
    3534:	000033bd 	.word	0x000033bd
    3538:	00001679 	.word	0x00001679
    353c:	00001665 	.word	0x00001665
    3540:	00001075 	.word	0x00001075
    3544:	000016b9 	.word	0x000016b9
    3548:	000029d9 	.word	0x000029d9
    354c:	00002dcd 	.word	0x00002dcd
    3550:	00002db1 	.word	0x00002db1
    3554:	00000ea1 	.word	0x00000ea1
    3558:	00002915 	.word	0x00002915
    355c:	00002841 	.word	0x00002841
    3560:	00001439 	.word	0x00001439

00003564 <__udivsi3>:
    3564:	2200      	movs	r2, #0
    3566:	0843      	lsrs	r3, r0, #1
    3568:	428b      	cmp	r3, r1
    356a:	d374      	bcc.n	3656 <__udivsi3+0xf2>
    356c:	0903      	lsrs	r3, r0, #4
    356e:	428b      	cmp	r3, r1
    3570:	d35f      	bcc.n	3632 <__udivsi3+0xce>
    3572:	0a03      	lsrs	r3, r0, #8
    3574:	428b      	cmp	r3, r1
    3576:	d344      	bcc.n	3602 <__udivsi3+0x9e>
    3578:	0b03      	lsrs	r3, r0, #12
    357a:	428b      	cmp	r3, r1
    357c:	d328      	bcc.n	35d0 <__udivsi3+0x6c>
    357e:	0c03      	lsrs	r3, r0, #16
    3580:	428b      	cmp	r3, r1
    3582:	d30d      	bcc.n	35a0 <__udivsi3+0x3c>
    3584:	22ff      	movs	r2, #255	; 0xff
    3586:	0209      	lsls	r1, r1, #8
    3588:	ba12      	rev	r2, r2
    358a:	0c03      	lsrs	r3, r0, #16
    358c:	428b      	cmp	r3, r1
    358e:	d302      	bcc.n	3596 <__udivsi3+0x32>
    3590:	1212      	asrs	r2, r2, #8
    3592:	0209      	lsls	r1, r1, #8
    3594:	d065      	beq.n	3662 <__udivsi3+0xfe>
    3596:	0b03      	lsrs	r3, r0, #12
    3598:	428b      	cmp	r3, r1
    359a:	d319      	bcc.n	35d0 <__udivsi3+0x6c>
    359c:	e000      	b.n	35a0 <__udivsi3+0x3c>
    359e:	0a09      	lsrs	r1, r1, #8
    35a0:	0bc3      	lsrs	r3, r0, #15
    35a2:	428b      	cmp	r3, r1
    35a4:	d301      	bcc.n	35aa <__udivsi3+0x46>
    35a6:	03cb      	lsls	r3, r1, #15
    35a8:	1ac0      	subs	r0, r0, r3
    35aa:	4152      	adcs	r2, r2
    35ac:	0b83      	lsrs	r3, r0, #14
    35ae:	428b      	cmp	r3, r1
    35b0:	d301      	bcc.n	35b6 <__udivsi3+0x52>
    35b2:	038b      	lsls	r3, r1, #14
    35b4:	1ac0      	subs	r0, r0, r3
    35b6:	4152      	adcs	r2, r2
    35b8:	0b43      	lsrs	r3, r0, #13
    35ba:	428b      	cmp	r3, r1
    35bc:	d301      	bcc.n	35c2 <__udivsi3+0x5e>
    35be:	034b      	lsls	r3, r1, #13
    35c0:	1ac0      	subs	r0, r0, r3
    35c2:	4152      	adcs	r2, r2
    35c4:	0b03      	lsrs	r3, r0, #12
    35c6:	428b      	cmp	r3, r1
    35c8:	d301      	bcc.n	35ce <__udivsi3+0x6a>
    35ca:	030b      	lsls	r3, r1, #12
    35cc:	1ac0      	subs	r0, r0, r3
    35ce:	4152      	adcs	r2, r2
    35d0:	0ac3      	lsrs	r3, r0, #11
    35d2:	428b      	cmp	r3, r1
    35d4:	d301      	bcc.n	35da <__udivsi3+0x76>
    35d6:	02cb      	lsls	r3, r1, #11
    35d8:	1ac0      	subs	r0, r0, r3
    35da:	4152      	adcs	r2, r2
    35dc:	0a83      	lsrs	r3, r0, #10
    35de:	428b      	cmp	r3, r1
    35e0:	d301      	bcc.n	35e6 <__udivsi3+0x82>
    35e2:	028b      	lsls	r3, r1, #10
    35e4:	1ac0      	subs	r0, r0, r3
    35e6:	4152      	adcs	r2, r2
    35e8:	0a43      	lsrs	r3, r0, #9
    35ea:	428b      	cmp	r3, r1
    35ec:	d301      	bcc.n	35f2 <__udivsi3+0x8e>
    35ee:	024b      	lsls	r3, r1, #9
    35f0:	1ac0      	subs	r0, r0, r3
    35f2:	4152      	adcs	r2, r2
    35f4:	0a03      	lsrs	r3, r0, #8
    35f6:	428b      	cmp	r3, r1
    35f8:	d301      	bcc.n	35fe <__udivsi3+0x9a>
    35fa:	020b      	lsls	r3, r1, #8
    35fc:	1ac0      	subs	r0, r0, r3
    35fe:	4152      	adcs	r2, r2
    3600:	d2cd      	bcs.n	359e <__udivsi3+0x3a>
    3602:	09c3      	lsrs	r3, r0, #7
    3604:	428b      	cmp	r3, r1
    3606:	d301      	bcc.n	360c <__udivsi3+0xa8>
    3608:	01cb      	lsls	r3, r1, #7
    360a:	1ac0      	subs	r0, r0, r3
    360c:	4152      	adcs	r2, r2
    360e:	0983      	lsrs	r3, r0, #6
    3610:	428b      	cmp	r3, r1
    3612:	d301      	bcc.n	3618 <__udivsi3+0xb4>
    3614:	018b      	lsls	r3, r1, #6
    3616:	1ac0      	subs	r0, r0, r3
    3618:	4152      	adcs	r2, r2
    361a:	0943      	lsrs	r3, r0, #5
    361c:	428b      	cmp	r3, r1
    361e:	d301      	bcc.n	3624 <__udivsi3+0xc0>
    3620:	014b      	lsls	r3, r1, #5
    3622:	1ac0      	subs	r0, r0, r3
    3624:	4152      	adcs	r2, r2
    3626:	0903      	lsrs	r3, r0, #4
    3628:	428b      	cmp	r3, r1
    362a:	d301      	bcc.n	3630 <__udivsi3+0xcc>
    362c:	010b      	lsls	r3, r1, #4
    362e:	1ac0      	subs	r0, r0, r3
    3630:	4152      	adcs	r2, r2
    3632:	08c3      	lsrs	r3, r0, #3
    3634:	428b      	cmp	r3, r1
    3636:	d301      	bcc.n	363c <__udivsi3+0xd8>
    3638:	00cb      	lsls	r3, r1, #3
    363a:	1ac0      	subs	r0, r0, r3
    363c:	4152      	adcs	r2, r2
    363e:	0883      	lsrs	r3, r0, #2
    3640:	428b      	cmp	r3, r1
    3642:	d301      	bcc.n	3648 <__udivsi3+0xe4>
    3644:	008b      	lsls	r3, r1, #2
    3646:	1ac0      	subs	r0, r0, r3
    3648:	4152      	adcs	r2, r2
    364a:	0843      	lsrs	r3, r0, #1
    364c:	428b      	cmp	r3, r1
    364e:	d301      	bcc.n	3654 <__udivsi3+0xf0>
    3650:	004b      	lsls	r3, r1, #1
    3652:	1ac0      	subs	r0, r0, r3
    3654:	4152      	adcs	r2, r2
    3656:	1a41      	subs	r1, r0, r1
    3658:	d200      	bcs.n	365c <__udivsi3+0xf8>
    365a:	4601      	mov	r1, r0
    365c:	4152      	adcs	r2, r2
    365e:	4610      	mov	r0, r2
    3660:	4770      	bx	lr
    3662:	e7ff      	b.n	3664 <__udivsi3+0x100>
    3664:	b501      	push	{r0, lr}
    3666:	2000      	movs	r0, #0
    3668:	f000 f806 	bl	3678 <__aeabi_idiv0>
    366c:	bd02      	pop	{r1, pc}
    366e:	46c0      	nop			; (mov r8, r8)

00003670 <__aeabi_uidivmod>:
    3670:	2900      	cmp	r1, #0
    3672:	d0f7      	beq.n	3664 <__udivsi3+0x100>
    3674:	e776      	b.n	3564 <__udivsi3>
    3676:	4770      	bx	lr

00003678 <__aeabi_idiv0>:
    3678:	4770      	bx	lr
    367a:	46c0      	nop			; (mov r8, r8)

0000367c <__aeabi_lmul>:
    367c:	b5f0      	push	{r4, r5, r6, r7, lr}
    367e:	46ce      	mov	lr, r9
    3680:	4647      	mov	r7, r8
    3682:	0415      	lsls	r5, r2, #16
    3684:	0c2d      	lsrs	r5, r5, #16
    3686:	002e      	movs	r6, r5
    3688:	b580      	push	{r7, lr}
    368a:	0407      	lsls	r7, r0, #16
    368c:	0c14      	lsrs	r4, r2, #16
    368e:	0c3f      	lsrs	r7, r7, #16
    3690:	4699      	mov	r9, r3
    3692:	0c03      	lsrs	r3, r0, #16
    3694:	437e      	muls	r6, r7
    3696:	435d      	muls	r5, r3
    3698:	4367      	muls	r7, r4
    369a:	4363      	muls	r3, r4
    369c:	197f      	adds	r7, r7, r5
    369e:	0c34      	lsrs	r4, r6, #16
    36a0:	19e4      	adds	r4, r4, r7
    36a2:	469c      	mov	ip, r3
    36a4:	42a5      	cmp	r5, r4
    36a6:	d903      	bls.n	36b0 <__aeabi_lmul+0x34>
    36a8:	2380      	movs	r3, #128	; 0x80
    36aa:	025b      	lsls	r3, r3, #9
    36ac:	4698      	mov	r8, r3
    36ae:	44c4      	add	ip, r8
    36b0:	464b      	mov	r3, r9
    36b2:	4351      	muls	r1, r2
    36b4:	4343      	muls	r3, r0
    36b6:	0436      	lsls	r6, r6, #16
    36b8:	0c36      	lsrs	r6, r6, #16
    36ba:	0c25      	lsrs	r5, r4, #16
    36bc:	0424      	lsls	r4, r4, #16
    36be:	4465      	add	r5, ip
    36c0:	19a4      	adds	r4, r4, r6
    36c2:	1859      	adds	r1, r3, r1
    36c4:	1949      	adds	r1, r1, r5
    36c6:	0020      	movs	r0, r4
    36c8:	bc0c      	pop	{r2, r3}
    36ca:	4690      	mov	r8, r2
    36cc:	4699      	mov	r9, r3
    36ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000036d0 <__aeabi_dadd>:
    36d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36d2:	4645      	mov	r5, r8
    36d4:	46de      	mov	lr, fp
    36d6:	4657      	mov	r7, sl
    36d8:	464e      	mov	r6, r9
    36da:	030c      	lsls	r4, r1, #12
    36dc:	b5e0      	push	{r5, r6, r7, lr}
    36de:	004e      	lsls	r6, r1, #1
    36e0:	0fc9      	lsrs	r1, r1, #31
    36e2:	4688      	mov	r8, r1
    36e4:	000d      	movs	r5, r1
    36e6:	0a61      	lsrs	r1, r4, #9
    36e8:	0f44      	lsrs	r4, r0, #29
    36ea:	430c      	orrs	r4, r1
    36ec:	00c7      	lsls	r7, r0, #3
    36ee:	0319      	lsls	r1, r3, #12
    36f0:	0058      	lsls	r0, r3, #1
    36f2:	0fdb      	lsrs	r3, r3, #31
    36f4:	469b      	mov	fp, r3
    36f6:	0a4b      	lsrs	r3, r1, #9
    36f8:	0f51      	lsrs	r1, r2, #29
    36fa:	430b      	orrs	r3, r1
    36fc:	0d76      	lsrs	r6, r6, #21
    36fe:	0d40      	lsrs	r0, r0, #21
    3700:	0019      	movs	r1, r3
    3702:	00d2      	lsls	r2, r2, #3
    3704:	45d8      	cmp	r8, fp
    3706:	d100      	bne.n	370a <__aeabi_dadd+0x3a>
    3708:	e0ae      	b.n	3868 <__aeabi_dadd+0x198>
    370a:	1a35      	subs	r5, r6, r0
    370c:	2d00      	cmp	r5, #0
    370e:	dc00      	bgt.n	3712 <__aeabi_dadd+0x42>
    3710:	e0f6      	b.n	3900 <__aeabi_dadd+0x230>
    3712:	2800      	cmp	r0, #0
    3714:	d10f      	bne.n	3736 <__aeabi_dadd+0x66>
    3716:	4313      	orrs	r3, r2
    3718:	d100      	bne.n	371c <__aeabi_dadd+0x4c>
    371a:	e0db      	b.n	38d4 <__aeabi_dadd+0x204>
    371c:	1e6b      	subs	r3, r5, #1
    371e:	2b00      	cmp	r3, #0
    3720:	d000      	beq.n	3724 <__aeabi_dadd+0x54>
    3722:	e137      	b.n	3994 <__aeabi_dadd+0x2c4>
    3724:	1aba      	subs	r2, r7, r2
    3726:	4297      	cmp	r7, r2
    3728:	41bf      	sbcs	r7, r7
    372a:	1a64      	subs	r4, r4, r1
    372c:	427f      	negs	r7, r7
    372e:	1be4      	subs	r4, r4, r7
    3730:	2601      	movs	r6, #1
    3732:	0017      	movs	r7, r2
    3734:	e024      	b.n	3780 <__aeabi_dadd+0xb0>
    3736:	4bc6      	ldr	r3, [pc, #792]	; (3a50 <__aeabi_dadd+0x380>)
    3738:	429e      	cmp	r6, r3
    373a:	d04d      	beq.n	37d8 <__aeabi_dadd+0x108>
    373c:	2380      	movs	r3, #128	; 0x80
    373e:	041b      	lsls	r3, r3, #16
    3740:	4319      	orrs	r1, r3
    3742:	2d38      	cmp	r5, #56	; 0x38
    3744:	dd00      	ble.n	3748 <__aeabi_dadd+0x78>
    3746:	e107      	b.n	3958 <__aeabi_dadd+0x288>
    3748:	2d1f      	cmp	r5, #31
    374a:	dd00      	ble.n	374e <__aeabi_dadd+0x7e>
    374c:	e138      	b.n	39c0 <__aeabi_dadd+0x2f0>
    374e:	2020      	movs	r0, #32
    3750:	1b43      	subs	r3, r0, r5
    3752:	469a      	mov	sl, r3
    3754:	000b      	movs	r3, r1
    3756:	4650      	mov	r0, sl
    3758:	4083      	lsls	r3, r0
    375a:	4699      	mov	r9, r3
    375c:	0013      	movs	r3, r2
    375e:	4648      	mov	r0, r9
    3760:	40eb      	lsrs	r3, r5
    3762:	4318      	orrs	r0, r3
    3764:	0003      	movs	r3, r0
    3766:	4650      	mov	r0, sl
    3768:	4082      	lsls	r2, r0
    376a:	1e50      	subs	r0, r2, #1
    376c:	4182      	sbcs	r2, r0
    376e:	40e9      	lsrs	r1, r5
    3770:	431a      	orrs	r2, r3
    3772:	1aba      	subs	r2, r7, r2
    3774:	1a61      	subs	r1, r4, r1
    3776:	4297      	cmp	r7, r2
    3778:	41a4      	sbcs	r4, r4
    377a:	0017      	movs	r7, r2
    377c:	4264      	negs	r4, r4
    377e:	1b0c      	subs	r4, r1, r4
    3780:	0223      	lsls	r3, r4, #8
    3782:	d562      	bpl.n	384a <__aeabi_dadd+0x17a>
    3784:	0264      	lsls	r4, r4, #9
    3786:	0a65      	lsrs	r5, r4, #9
    3788:	2d00      	cmp	r5, #0
    378a:	d100      	bne.n	378e <__aeabi_dadd+0xbe>
    378c:	e0df      	b.n	394e <__aeabi_dadd+0x27e>
    378e:	0028      	movs	r0, r5
    3790:	f001 fbe4 	bl	4f5c <__clzsi2>
    3794:	0003      	movs	r3, r0
    3796:	3b08      	subs	r3, #8
    3798:	2b1f      	cmp	r3, #31
    379a:	dd00      	ble.n	379e <__aeabi_dadd+0xce>
    379c:	e0d2      	b.n	3944 <__aeabi_dadd+0x274>
    379e:	2220      	movs	r2, #32
    37a0:	003c      	movs	r4, r7
    37a2:	1ad2      	subs	r2, r2, r3
    37a4:	409d      	lsls	r5, r3
    37a6:	40d4      	lsrs	r4, r2
    37a8:	409f      	lsls	r7, r3
    37aa:	4325      	orrs	r5, r4
    37ac:	429e      	cmp	r6, r3
    37ae:	dd00      	ble.n	37b2 <__aeabi_dadd+0xe2>
    37b0:	e0c4      	b.n	393c <__aeabi_dadd+0x26c>
    37b2:	1b9e      	subs	r6, r3, r6
    37b4:	1c73      	adds	r3, r6, #1
    37b6:	2b1f      	cmp	r3, #31
    37b8:	dd00      	ble.n	37bc <__aeabi_dadd+0xec>
    37ba:	e0f1      	b.n	39a0 <__aeabi_dadd+0x2d0>
    37bc:	2220      	movs	r2, #32
    37be:	0038      	movs	r0, r7
    37c0:	0029      	movs	r1, r5
    37c2:	1ad2      	subs	r2, r2, r3
    37c4:	40d8      	lsrs	r0, r3
    37c6:	4091      	lsls	r1, r2
    37c8:	4097      	lsls	r7, r2
    37ca:	002c      	movs	r4, r5
    37cc:	4301      	orrs	r1, r0
    37ce:	1e78      	subs	r0, r7, #1
    37d0:	4187      	sbcs	r7, r0
    37d2:	40dc      	lsrs	r4, r3
    37d4:	2600      	movs	r6, #0
    37d6:	430f      	orrs	r7, r1
    37d8:	077b      	lsls	r3, r7, #29
    37da:	d009      	beq.n	37f0 <__aeabi_dadd+0x120>
    37dc:	230f      	movs	r3, #15
    37de:	403b      	ands	r3, r7
    37e0:	2b04      	cmp	r3, #4
    37e2:	d005      	beq.n	37f0 <__aeabi_dadd+0x120>
    37e4:	1d3b      	adds	r3, r7, #4
    37e6:	42bb      	cmp	r3, r7
    37e8:	41bf      	sbcs	r7, r7
    37ea:	427f      	negs	r7, r7
    37ec:	19e4      	adds	r4, r4, r7
    37ee:	001f      	movs	r7, r3
    37f0:	0223      	lsls	r3, r4, #8
    37f2:	d52c      	bpl.n	384e <__aeabi_dadd+0x17e>
    37f4:	4b96      	ldr	r3, [pc, #600]	; (3a50 <__aeabi_dadd+0x380>)
    37f6:	3601      	adds	r6, #1
    37f8:	429e      	cmp	r6, r3
    37fa:	d100      	bne.n	37fe <__aeabi_dadd+0x12e>
    37fc:	e09a      	b.n	3934 <__aeabi_dadd+0x264>
    37fe:	4645      	mov	r5, r8
    3800:	4b94      	ldr	r3, [pc, #592]	; (3a54 <__aeabi_dadd+0x384>)
    3802:	08ff      	lsrs	r7, r7, #3
    3804:	401c      	ands	r4, r3
    3806:	0760      	lsls	r0, r4, #29
    3808:	0576      	lsls	r6, r6, #21
    380a:	0264      	lsls	r4, r4, #9
    380c:	4307      	orrs	r7, r0
    380e:	0b24      	lsrs	r4, r4, #12
    3810:	0d76      	lsrs	r6, r6, #21
    3812:	2100      	movs	r1, #0
    3814:	0324      	lsls	r4, r4, #12
    3816:	0b23      	lsrs	r3, r4, #12
    3818:	0d0c      	lsrs	r4, r1, #20
    381a:	4a8f      	ldr	r2, [pc, #572]	; (3a58 <__aeabi_dadd+0x388>)
    381c:	0524      	lsls	r4, r4, #20
    381e:	431c      	orrs	r4, r3
    3820:	4014      	ands	r4, r2
    3822:	0533      	lsls	r3, r6, #20
    3824:	4323      	orrs	r3, r4
    3826:	005b      	lsls	r3, r3, #1
    3828:	07ed      	lsls	r5, r5, #31
    382a:	085b      	lsrs	r3, r3, #1
    382c:	432b      	orrs	r3, r5
    382e:	0038      	movs	r0, r7
    3830:	0019      	movs	r1, r3
    3832:	bc3c      	pop	{r2, r3, r4, r5}
    3834:	4690      	mov	r8, r2
    3836:	4699      	mov	r9, r3
    3838:	46a2      	mov	sl, r4
    383a:	46ab      	mov	fp, r5
    383c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    383e:	4664      	mov	r4, ip
    3840:	4304      	orrs	r4, r0
    3842:	d100      	bne.n	3846 <__aeabi_dadd+0x176>
    3844:	e211      	b.n	3c6a <__aeabi_dadd+0x59a>
    3846:	0004      	movs	r4, r0
    3848:	4667      	mov	r7, ip
    384a:	077b      	lsls	r3, r7, #29
    384c:	d1c6      	bne.n	37dc <__aeabi_dadd+0x10c>
    384e:	4645      	mov	r5, r8
    3850:	0760      	lsls	r0, r4, #29
    3852:	08ff      	lsrs	r7, r7, #3
    3854:	4307      	orrs	r7, r0
    3856:	08e4      	lsrs	r4, r4, #3
    3858:	4b7d      	ldr	r3, [pc, #500]	; (3a50 <__aeabi_dadd+0x380>)
    385a:	429e      	cmp	r6, r3
    385c:	d030      	beq.n	38c0 <__aeabi_dadd+0x1f0>
    385e:	0324      	lsls	r4, r4, #12
    3860:	0576      	lsls	r6, r6, #21
    3862:	0b24      	lsrs	r4, r4, #12
    3864:	0d76      	lsrs	r6, r6, #21
    3866:	e7d4      	b.n	3812 <__aeabi_dadd+0x142>
    3868:	1a33      	subs	r3, r6, r0
    386a:	469a      	mov	sl, r3
    386c:	2b00      	cmp	r3, #0
    386e:	dd78      	ble.n	3962 <__aeabi_dadd+0x292>
    3870:	2800      	cmp	r0, #0
    3872:	d031      	beq.n	38d8 <__aeabi_dadd+0x208>
    3874:	4876      	ldr	r0, [pc, #472]	; (3a50 <__aeabi_dadd+0x380>)
    3876:	4286      	cmp	r6, r0
    3878:	d0ae      	beq.n	37d8 <__aeabi_dadd+0x108>
    387a:	2080      	movs	r0, #128	; 0x80
    387c:	0400      	lsls	r0, r0, #16
    387e:	4301      	orrs	r1, r0
    3880:	4653      	mov	r3, sl
    3882:	2b38      	cmp	r3, #56	; 0x38
    3884:	dc00      	bgt.n	3888 <__aeabi_dadd+0x1b8>
    3886:	e0e9      	b.n	3a5c <__aeabi_dadd+0x38c>
    3888:	430a      	orrs	r2, r1
    388a:	1e51      	subs	r1, r2, #1
    388c:	418a      	sbcs	r2, r1
    388e:	2100      	movs	r1, #0
    3890:	19d2      	adds	r2, r2, r7
    3892:	42ba      	cmp	r2, r7
    3894:	41bf      	sbcs	r7, r7
    3896:	1909      	adds	r1, r1, r4
    3898:	427c      	negs	r4, r7
    389a:	0017      	movs	r7, r2
    389c:	190c      	adds	r4, r1, r4
    389e:	0223      	lsls	r3, r4, #8
    38a0:	d5d3      	bpl.n	384a <__aeabi_dadd+0x17a>
    38a2:	4b6b      	ldr	r3, [pc, #428]	; (3a50 <__aeabi_dadd+0x380>)
    38a4:	3601      	adds	r6, #1
    38a6:	429e      	cmp	r6, r3
    38a8:	d100      	bne.n	38ac <__aeabi_dadd+0x1dc>
    38aa:	e13a      	b.n	3b22 <__aeabi_dadd+0x452>
    38ac:	2001      	movs	r0, #1
    38ae:	4b69      	ldr	r3, [pc, #420]	; (3a54 <__aeabi_dadd+0x384>)
    38b0:	401c      	ands	r4, r3
    38b2:	087b      	lsrs	r3, r7, #1
    38b4:	4007      	ands	r7, r0
    38b6:	431f      	orrs	r7, r3
    38b8:	07e0      	lsls	r0, r4, #31
    38ba:	4307      	orrs	r7, r0
    38bc:	0864      	lsrs	r4, r4, #1
    38be:	e78b      	b.n	37d8 <__aeabi_dadd+0x108>
    38c0:	0023      	movs	r3, r4
    38c2:	433b      	orrs	r3, r7
    38c4:	d100      	bne.n	38c8 <__aeabi_dadd+0x1f8>
    38c6:	e1cb      	b.n	3c60 <__aeabi_dadd+0x590>
    38c8:	2280      	movs	r2, #128	; 0x80
    38ca:	0312      	lsls	r2, r2, #12
    38cc:	4314      	orrs	r4, r2
    38ce:	0324      	lsls	r4, r4, #12
    38d0:	0b24      	lsrs	r4, r4, #12
    38d2:	e79e      	b.n	3812 <__aeabi_dadd+0x142>
    38d4:	002e      	movs	r6, r5
    38d6:	e77f      	b.n	37d8 <__aeabi_dadd+0x108>
    38d8:	0008      	movs	r0, r1
    38da:	4310      	orrs	r0, r2
    38dc:	d100      	bne.n	38e0 <__aeabi_dadd+0x210>
    38de:	e0b4      	b.n	3a4a <__aeabi_dadd+0x37a>
    38e0:	1e58      	subs	r0, r3, #1
    38e2:	2800      	cmp	r0, #0
    38e4:	d000      	beq.n	38e8 <__aeabi_dadd+0x218>
    38e6:	e0de      	b.n	3aa6 <__aeabi_dadd+0x3d6>
    38e8:	18ba      	adds	r2, r7, r2
    38ea:	42ba      	cmp	r2, r7
    38ec:	419b      	sbcs	r3, r3
    38ee:	1864      	adds	r4, r4, r1
    38f0:	425b      	negs	r3, r3
    38f2:	18e4      	adds	r4, r4, r3
    38f4:	0017      	movs	r7, r2
    38f6:	2601      	movs	r6, #1
    38f8:	0223      	lsls	r3, r4, #8
    38fa:	d5a6      	bpl.n	384a <__aeabi_dadd+0x17a>
    38fc:	2602      	movs	r6, #2
    38fe:	e7d5      	b.n	38ac <__aeabi_dadd+0x1dc>
    3900:	2d00      	cmp	r5, #0
    3902:	d16e      	bne.n	39e2 <__aeabi_dadd+0x312>
    3904:	1c70      	adds	r0, r6, #1
    3906:	0540      	lsls	r0, r0, #21
    3908:	0d40      	lsrs	r0, r0, #21
    390a:	2801      	cmp	r0, #1
    390c:	dc00      	bgt.n	3910 <__aeabi_dadd+0x240>
    390e:	e0f9      	b.n	3b04 <__aeabi_dadd+0x434>
    3910:	1ab8      	subs	r0, r7, r2
    3912:	4684      	mov	ip, r0
    3914:	4287      	cmp	r7, r0
    3916:	4180      	sbcs	r0, r0
    3918:	1ae5      	subs	r5, r4, r3
    391a:	4240      	negs	r0, r0
    391c:	1a2d      	subs	r5, r5, r0
    391e:	0228      	lsls	r0, r5, #8
    3920:	d400      	bmi.n	3924 <__aeabi_dadd+0x254>
    3922:	e089      	b.n	3a38 <__aeabi_dadd+0x368>
    3924:	1bd7      	subs	r7, r2, r7
    3926:	42ba      	cmp	r2, r7
    3928:	4192      	sbcs	r2, r2
    392a:	1b1c      	subs	r4, r3, r4
    392c:	4252      	negs	r2, r2
    392e:	1aa5      	subs	r5, r4, r2
    3930:	46d8      	mov	r8, fp
    3932:	e729      	b.n	3788 <__aeabi_dadd+0xb8>
    3934:	4645      	mov	r5, r8
    3936:	2400      	movs	r4, #0
    3938:	2700      	movs	r7, #0
    393a:	e76a      	b.n	3812 <__aeabi_dadd+0x142>
    393c:	4c45      	ldr	r4, [pc, #276]	; (3a54 <__aeabi_dadd+0x384>)
    393e:	1af6      	subs	r6, r6, r3
    3940:	402c      	ands	r4, r5
    3942:	e749      	b.n	37d8 <__aeabi_dadd+0x108>
    3944:	003d      	movs	r5, r7
    3946:	3828      	subs	r0, #40	; 0x28
    3948:	4085      	lsls	r5, r0
    394a:	2700      	movs	r7, #0
    394c:	e72e      	b.n	37ac <__aeabi_dadd+0xdc>
    394e:	0038      	movs	r0, r7
    3950:	f001 fb04 	bl	4f5c <__clzsi2>
    3954:	3020      	adds	r0, #32
    3956:	e71d      	b.n	3794 <__aeabi_dadd+0xc4>
    3958:	430a      	orrs	r2, r1
    395a:	1e51      	subs	r1, r2, #1
    395c:	418a      	sbcs	r2, r1
    395e:	2100      	movs	r1, #0
    3960:	e707      	b.n	3772 <__aeabi_dadd+0xa2>
    3962:	2b00      	cmp	r3, #0
    3964:	d000      	beq.n	3968 <__aeabi_dadd+0x298>
    3966:	e0f3      	b.n	3b50 <__aeabi_dadd+0x480>
    3968:	1c70      	adds	r0, r6, #1
    396a:	0543      	lsls	r3, r0, #21
    396c:	0d5b      	lsrs	r3, r3, #21
    396e:	2b01      	cmp	r3, #1
    3970:	dc00      	bgt.n	3974 <__aeabi_dadd+0x2a4>
    3972:	e0ad      	b.n	3ad0 <__aeabi_dadd+0x400>
    3974:	4b36      	ldr	r3, [pc, #216]	; (3a50 <__aeabi_dadd+0x380>)
    3976:	4298      	cmp	r0, r3
    3978:	d100      	bne.n	397c <__aeabi_dadd+0x2ac>
    397a:	e0d1      	b.n	3b20 <__aeabi_dadd+0x450>
    397c:	18ba      	adds	r2, r7, r2
    397e:	42ba      	cmp	r2, r7
    3980:	41bf      	sbcs	r7, r7
    3982:	1864      	adds	r4, r4, r1
    3984:	427f      	negs	r7, r7
    3986:	19e4      	adds	r4, r4, r7
    3988:	07e7      	lsls	r7, r4, #31
    398a:	0852      	lsrs	r2, r2, #1
    398c:	4317      	orrs	r7, r2
    398e:	0864      	lsrs	r4, r4, #1
    3990:	0006      	movs	r6, r0
    3992:	e721      	b.n	37d8 <__aeabi_dadd+0x108>
    3994:	482e      	ldr	r0, [pc, #184]	; (3a50 <__aeabi_dadd+0x380>)
    3996:	4285      	cmp	r5, r0
    3998:	d100      	bne.n	399c <__aeabi_dadd+0x2cc>
    399a:	e093      	b.n	3ac4 <__aeabi_dadd+0x3f4>
    399c:	001d      	movs	r5, r3
    399e:	e6d0      	b.n	3742 <__aeabi_dadd+0x72>
    39a0:	0029      	movs	r1, r5
    39a2:	3e1f      	subs	r6, #31
    39a4:	40f1      	lsrs	r1, r6
    39a6:	2b20      	cmp	r3, #32
    39a8:	d100      	bne.n	39ac <__aeabi_dadd+0x2dc>
    39aa:	e08d      	b.n	3ac8 <__aeabi_dadd+0x3f8>
    39ac:	2240      	movs	r2, #64	; 0x40
    39ae:	1ad3      	subs	r3, r2, r3
    39b0:	409d      	lsls	r5, r3
    39b2:	432f      	orrs	r7, r5
    39b4:	1e7d      	subs	r5, r7, #1
    39b6:	41af      	sbcs	r7, r5
    39b8:	2400      	movs	r4, #0
    39ba:	430f      	orrs	r7, r1
    39bc:	2600      	movs	r6, #0
    39be:	e744      	b.n	384a <__aeabi_dadd+0x17a>
    39c0:	002b      	movs	r3, r5
    39c2:	0008      	movs	r0, r1
    39c4:	3b20      	subs	r3, #32
    39c6:	40d8      	lsrs	r0, r3
    39c8:	0003      	movs	r3, r0
    39ca:	2d20      	cmp	r5, #32
    39cc:	d100      	bne.n	39d0 <__aeabi_dadd+0x300>
    39ce:	e07d      	b.n	3acc <__aeabi_dadd+0x3fc>
    39d0:	2040      	movs	r0, #64	; 0x40
    39d2:	1b45      	subs	r5, r0, r5
    39d4:	40a9      	lsls	r1, r5
    39d6:	430a      	orrs	r2, r1
    39d8:	1e51      	subs	r1, r2, #1
    39da:	418a      	sbcs	r2, r1
    39dc:	2100      	movs	r1, #0
    39de:	431a      	orrs	r2, r3
    39e0:	e6c7      	b.n	3772 <__aeabi_dadd+0xa2>
    39e2:	2e00      	cmp	r6, #0
    39e4:	d050      	beq.n	3a88 <__aeabi_dadd+0x3b8>
    39e6:	4e1a      	ldr	r6, [pc, #104]	; (3a50 <__aeabi_dadd+0x380>)
    39e8:	42b0      	cmp	r0, r6
    39ea:	d057      	beq.n	3a9c <__aeabi_dadd+0x3cc>
    39ec:	2680      	movs	r6, #128	; 0x80
    39ee:	426b      	negs	r3, r5
    39f0:	4699      	mov	r9, r3
    39f2:	0436      	lsls	r6, r6, #16
    39f4:	4334      	orrs	r4, r6
    39f6:	464b      	mov	r3, r9
    39f8:	2b38      	cmp	r3, #56	; 0x38
    39fa:	dd00      	ble.n	39fe <__aeabi_dadd+0x32e>
    39fc:	e0d6      	b.n	3bac <__aeabi_dadd+0x4dc>
    39fe:	2b1f      	cmp	r3, #31
    3a00:	dd00      	ble.n	3a04 <__aeabi_dadd+0x334>
    3a02:	e135      	b.n	3c70 <__aeabi_dadd+0x5a0>
    3a04:	2620      	movs	r6, #32
    3a06:	1af5      	subs	r5, r6, r3
    3a08:	0026      	movs	r6, r4
    3a0a:	40ae      	lsls	r6, r5
    3a0c:	46b2      	mov	sl, r6
    3a0e:	003e      	movs	r6, r7
    3a10:	40de      	lsrs	r6, r3
    3a12:	46ac      	mov	ip, r5
    3a14:	0035      	movs	r5, r6
    3a16:	4656      	mov	r6, sl
    3a18:	432e      	orrs	r6, r5
    3a1a:	4665      	mov	r5, ip
    3a1c:	40af      	lsls	r7, r5
    3a1e:	1e7d      	subs	r5, r7, #1
    3a20:	41af      	sbcs	r7, r5
    3a22:	40dc      	lsrs	r4, r3
    3a24:	4337      	orrs	r7, r6
    3a26:	1bd7      	subs	r7, r2, r7
    3a28:	42ba      	cmp	r2, r7
    3a2a:	4192      	sbcs	r2, r2
    3a2c:	1b0c      	subs	r4, r1, r4
    3a2e:	4252      	negs	r2, r2
    3a30:	1aa4      	subs	r4, r4, r2
    3a32:	0006      	movs	r6, r0
    3a34:	46d8      	mov	r8, fp
    3a36:	e6a3      	b.n	3780 <__aeabi_dadd+0xb0>
    3a38:	4664      	mov	r4, ip
    3a3a:	4667      	mov	r7, ip
    3a3c:	432c      	orrs	r4, r5
    3a3e:	d000      	beq.n	3a42 <__aeabi_dadd+0x372>
    3a40:	e6a2      	b.n	3788 <__aeabi_dadd+0xb8>
    3a42:	2500      	movs	r5, #0
    3a44:	2600      	movs	r6, #0
    3a46:	2700      	movs	r7, #0
    3a48:	e706      	b.n	3858 <__aeabi_dadd+0x188>
    3a4a:	001e      	movs	r6, r3
    3a4c:	e6c4      	b.n	37d8 <__aeabi_dadd+0x108>
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	000007ff 	.word	0x000007ff
    3a54:	ff7fffff 	.word	0xff7fffff
    3a58:	800fffff 	.word	0x800fffff
    3a5c:	2b1f      	cmp	r3, #31
    3a5e:	dc63      	bgt.n	3b28 <__aeabi_dadd+0x458>
    3a60:	2020      	movs	r0, #32
    3a62:	1ac3      	subs	r3, r0, r3
    3a64:	0008      	movs	r0, r1
    3a66:	4098      	lsls	r0, r3
    3a68:	469c      	mov	ip, r3
    3a6a:	4683      	mov	fp, r0
    3a6c:	4653      	mov	r3, sl
    3a6e:	0010      	movs	r0, r2
    3a70:	40d8      	lsrs	r0, r3
    3a72:	0003      	movs	r3, r0
    3a74:	4658      	mov	r0, fp
    3a76:	4318      	orrs	r0, r3
    3a78:	4663      	mov	r3, ip
    3a7a:	409a      	lsls	r2, r3
    3a7c:	1e53      	subs	r3, r2, #1
    3a7e:	419a      	sbcs	r2, r3
    3a80:	4653      	mov	r3, sl
    3a82:	4302      	orrs	r2, r0
    3a84:	40d9      	lsrs	r1, r3
    3a86:	e703      	b.n	3890 <__aeabi_dadd+0x1c0>
    3a88:	0026      	movs	r6, r4
    3a8a:	433e      	orrs	r6, r7
    3a8c:	d006      	beq.n	3a9c <__aeabi_dadd+0x3cc>
    3a8e:	43eb      	mvns	r3, r5
    3a90:	4699      	mov	r9, r3
    3a92:	2b00      	cmp	r3, #0
    3a94:	d0c7      	beq.n	3a26 <__aeabi_dadd+0x356>
    3a96:	4e94      	ldr	r6, [pc, #592]	; (3ce8 <__aeabi_dadd+0x618>)
    3a98:	42b0      	cmp	r0, r6
    3a9a:	d1ac      	bne.n	39f6 <__aeabi_dadd+0x326>
    3a9c:	000c      	movs	r4, r1
    3a9e:	0017      	movs	r7, r2
    3aa0:	0006      	movs	r6, r0
    3aa2:	46d8      	mov	r8, fp
    3aa4:	e698      	b.n	37d8 <__aeabi_dadd+0x108>
    3aa6:	4b90      	ldr	r3, [pc, #576]	; (3ce8 <__aeabi_dadd+0x618>)
    3aa8:	459a      	cmp	sl, r3
    3aaa:	d00b      	beq.n	3ac4 <__aeabi_dadd+0x3f4>
    3aac:	4682      	mov	sl, r0
    3aae:	e6e7      	b.n	3880 <__aeabi_dadd+0x1b0>
    3ab0:	2800      	cmp	r0, #0
    3ab2:	d000      	beq.n	3ab6 <__aeabi_dadd+0x3e6>
    3ab4:	e09e      	b.n	3bf4 <__aeabi_dadd+0x524>
    3ab6:	0018      	movs	r0, r3
    3ab8:	4310      	orrs	r0, r2
    3aba:	d100      	bne.n	3abe <__aeabi_dadd+0x3ee>
    3abc:	e0e9      	b.n	3c92 <__aeabi_dadd+0x5c2>
    3abe:	001c      	movs	r4, r3
    3ac0:	0017      	movs	r7, r2
    3ac2:	46d8      	mov	r8, fp
    3ac4:	4e88      	ldr	r6, [pc, #544]	; (3ce8 <__aeabi_dadd+0x618>)
    3ac6:	e687      	b.n	37d8 <__aeabi_dadd+0x108>
    3ac8:	2500      	movs	r5, #0
    3aca:	e772      	b.n	39b2 <__aeabi_dadd+0x2e2>
    3acc:	2100      	movs	r1, #0
    3ace:	e782      	b.n	39d6 <__aeabi_dadd+0x306>
    3ad0:	0023      	movs	r3, r4
    3ad2:	433b      	orrs	r3, r7
    3ad4:	2e00      	cmp	r6, #0
    3ad6:	d000      	beq.n	3ada <__aeabi_dadd+0x40a>
    3ad8:	e0ab      	b.n	3c32 <__aeabi_dadd+0x562>
    3ada:	2b00      	cmp	r3, #0
    3adc:	d100      	bne.n	3ae0 <__aeabi_dadd+0x410>
    3ade:	e0e7      	b.n	3cb0 <__aeabi_dadd+0x5e0>
    3ae0:	000b      	movs	r3, r1
    3ae2:	4313      	orrs	r3, r2
    3ae4:	d100      	bne.n	3ae8 <__aeabi_dadd+0x418>
    3ae6:	e677      	b.n	37d8 <__aeabi_dadd+0x108>
    3ae8:	18ba      	adds	r2, r7, r2
    3aea:	42ba      	cmp	r2, r7
    3aec:	41bf      	sbcs	r7, r7
    3aee:	1864      	adds	r4, r4, r1
    3af0:	427f      	negs	r7, r7
    3af2:	19e4      	adds	r4, r4, r7
    3af4:	0223      	lsls	r3, r4, #8
    3af6:	d400      	bmi.n	3afa <__aeabi_dadd+0x42a>
    3af8:	e0f2      	b.n	3ce0 <__aeabi_dadd+0x610>
    3afa:	4b7c      	ldr	r3, [pc, #496]	; (3cec <__aeabi_dadd+0x61c>)
    3afc:	0017      	movs	r7, r2
    3afe:	401c      	ands	r4, r3
    3b00:	0006      	movs	r6, r0
    3b02:	e669      	b.n	37d8 <__aeabi_dadd+0x108>
    3b04:	0020      	movs	r0, r4
    3b06:	4338      	orrs	r0, r7
    3b08:	2e00      	cmp	r6, #0
    3b0a:	d1d1      	bne.n	3ab0 <__aeabi_dadd+0x3e0>
    3b0c:	2800      	cmp	r0, #0
    3b0e:	d15b      	bne.n	3bc8 <__aeabi_dadd+0x4f8>
    3b10:	001c      	movs	r4, r3
    3b12:	4314      	orrs	r4, r2
    3b14:	d100      	bne.n	3b18 <__aeabi_dadd+0x448>
    3b16:	e0a8      	b.n	3c6a <__aeabi_dadd+0x59a>
    3b18:	001c      	movs	r4, r3
    3b1a:	0017      	movs	r7, r2
    3b1c:	46d8      	mov	r8, fp
    3b1e:	e65b      	b.n	37d8 <__aeabi_dadd+0x108>
    3b20:	0006      	movs	r6, r0
    3b22:	2400      	movs	r4, #0
    3b24:	2700      	movs	r7, #0
    3b26:	e697      	b.n	3858 <__aeabi_dadd+0x188>
    3b28:	4650      	mov	r0, sl
    3b2a:	000b      	movs	r3, r1
    3b2c:	3820      	subs	r0, #32
    3b2e:	40c3      	lsrs	r3, r0
    3b30:	4699      	mov	r9, r3
    3b32:	4653      	mov	r3, sl
    3b34:	2b20      	cmp	r3, #32
    3b36:	d100      	bne.n	3b3a <__aeabi_dadd+0x46a>
    3b38:	e095      	b.n	3c66 <__aeabi_dadd+0x596>
    3b3a:	2340      	movs	r3, #64	; 0x40
    3b3c:	4650      	mov	r0, sl
    3b3e:	1a1b      	subs	r3, r3, r0
    3b40:	4099      	lsls	r1, r3
    3b42:	430a      	orrs	r2, r1
    3b44:	1e51      	subs	r1, r2, #1
    3b46:	418a      	sbcs	r2, r1
    3b48:	464b      	mov	r3, r9
    3b4a:	2100      	movs	r1, #0
    3b4c:	431a      	orrs	r2, r3
    3b4e:	e69f      	b.n	3890 <__aeabi_dadd+0x1c0>
    3b50:	2e00      	cmp	r6, #0
    3b52:	d130      	bne.n	3bb6 <__aeabi_dadd+0x4e6>
    3b54:	0026      	movs	r6, r4
    3b56:	433e      	orrs	r6, r7
    3b58:	d067      	beq.n	3c2a <__aeabi_dadd+0x55a>
    3b5a:	43db      	mvns	r3, r3
    3b5c:	469a      	mov	sl, r3
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d01c      	beq.n	3b9c <__aeabi_dadd+0x4cc>
    3b62:	4e61      	ldr	r6, [pc, #388]	; (3ce8 <__aeabi_dadd+0x618>)
    3b64:	42b0      	cmp	r0, r6
    3b66:	d060      	beq.n	3c2a <__aeabi_dadd+0x55a>
    3b68:	4653      	mov	r3, sl
    3b6a:	2b38      	cmp	r3, #56	; 0x38
    3b6c:	dd00      	ble.n	3b70 <__aeabi_dadd+0x4a0>
    3b6e:	e096      	b.n	3c9e <__aeabi_dadd+0x5ce>
    3b70:	2b1f      	cmp	r3, #31
    3b72:	dd00      	ble.n	3b76 <__aeabi_dadd+0x4a6>
    3b74:	e09f      	b.n	3cb6 <__aeabi_dadd+0x5e6>
    3b76:	2620      	movs	r6, #32
    3b78:	1af3      	subs	r3, r6, r3
    3b7a:	0026      	movs	r6, r4
    3b7c:	409e      	lsls	r6, r3
    3b7e:	469c      	mov	ip, r3
    3b80:	46b3      	mov	fp, r6
    3b82:	4653      	mov	r3, sl
    3b84:	003e      	movs	r6, r7
    3b86:	40de      	lsrs	r6, r3
    3b88:	0033      	movs	r3, r6
    3b8a:	465e      	mov	r6, fp
    3b8c:	431e      	orrs	r6, r3
    3b8e:	4663      	mov	r3, ip
    3b90:	409f      	lsls	r7, r3
    3b92:	1e7b      	subs	r3, r7, #1
    3b94:	419f      	sbcs	r7, r3
    3b96:	4653      	mov	r3, sl
    3b98:	40dc      	lsrs	r4, r3
    3b9a:	4337      	orrs	r7, r6
    3b9c:	18bf      	adds	r7, r7, r2
    3b9e:	4297      	cmp	r7, r2
    3ba0:	4192      	sbcs	r2, r2
    3ba2:	1864      	adds	r4, r4, r1
    3ba4:	4252      	negs	r2, r2
    3ba6:	18a4      	adds	r4, r4, r2
    3ba8:	0006      	movs	r6, r0
    3baa:	e678      	b.n	389e <__aeabi_dadd+0x1ce>
    3bac:	4327      	orrs	r7, r4
    3bae:	1e7c      	subs	r4, r7, #1
    3bb0:	41a7      	sbcs	r7, r4
    3bb2:	2400      	movs	r4, #0
    3bb4:	e737      	b.n	3a26 <__aeabi_dadd+0x356>
    3bb6:	4e4c      	ldr	r6, [pc, #304]	; (3ce8 <__aeabi_dadd+0x618>)
    3bb8:	42b0      	cmp	r0, r6
    3bba:	d036      	beq.n	3c2a <__aeabi_dadd+0x55a>
    3bbc:	2680      	movs	r6, #128	; 0x80
    3bbe:	425b      	negs	r3, r3
    3bc0:	0436      	lsls	r6, r6, #16
    3bc2:	469a      	mov	sl, r3
    3bc4:	4334      	orrs	r4, r6
    3bc6:	e7cf      	b.n	3b68 <__aeabi_dadd+0x498>
    3bc8:	0018      	movs	r0, r3
    3bca:	4310      	orrs	r0, r2
    3bcc:	d100      	bne.n	3bd0 <__aeabi_dadd+0x500>
    3bce:	e603      	b.n	37d8 <__aeabi_dadd+0x108>
    3bd0:	1ab8      	subs	r0, r7, r2
    3bd2:	4684      	mov	ip, r0
    3bd4:	4567      	cmp	r7, ip
    3bd6:	41ad      	sbcs	r5, r5
    3bd8:	1ae0      	subs	r0, r4, r3
    3bda:	426d      	negs	r5, r5
    3bdc:	1b40      	subs	r0, r0, r5
    3bde:	0205      	lsls	r5, r0, #8
    3be0:	d400      	bmi.n	3be4 <__aeabi_dadd+0x514>
    3be2:	e62c      	b.n	383e <__aeabi_dadd+0x16e>
    3be4:	1bd7      	subs	r7, r2, r7
    3be6:	42ba      	cmp	r2, r7
    3be8:	4192      	sbcs	r2, r2
    3bea:	1b1c      	subs	r4, r3, r4
    3bec:	4252      	negs	r2, r2
    3bee:	1aa4      	subs	r4, r4, r2
    3bf0:	46d8      	mov	r8, fp
    3bf2:	e5f1      	b.n	37d8 <__aeabi_dadd+0x108>
    3bf4:	0018      	movs	r0, r3
    3bf6:	4310      	orrs	r0, r2
    3bf8:	d100      	bne.n	3bfc <__aeabi_dadd+0x52c>
    3bfa:	e763      	b.n	3ac4 <__aeabi_dadd+0x3f4>
    3bfc:	08f8      	lsrs	r0, r7, #3
    3bfe:	0767      	lsls	r7, r4, #29
    3c00:	4307      	orrs	r7, r0
    3c02:	2080      	movs	r0, #128	; 0x80
    3c04:	08e4      	lsrs	r4, r4, #3
    3c06:	0300      	lsls	r0, r0, #12
    3c08:	4204      	tst	r4, r0
    3c0a:	d008      	beq.n	3c1e <__aeabi_dadd+0x54e>
    3c0c:	08dd      	lsrs	r5, r3, #3
    3c0e:	4205      	tst	r5, r0
    3c10:	d105      	bne.n	3c1e <__aeabi_dadd+0x54e>
    3c12:	08d2      	lsrs	r2, r2, #3
    3c14:	0759      	lsls	r1, r3, #29
    3c16:	4311      	orrs	r1, r2
    3c18:	000f      	movs	r7, r1
    3c1a:	002c      	movs	r4, r5
    3c1c:	46d8      	mov	r8, fp
    3c1e:	0f7b      	lsrs	r3, r7, #29
    3c20:	00e4      	lsls	r4, r4, #3
    3c22:	431c      	orrs	r4, r3
    3c24:	00ff      	lsls	r7, r7, #3
    3c26:	4e30      	ldr	r6, [pc, #192]	; (3ce8 <__aeabi_dadd+0x618>)
    3c28:	e5d6      	b.n	37d8 <__aeabi_dadd+0x108>
    3c2a:	000c      	movs	r4, r1
    3c2c:	0017      	movs	r7, r2
    3c2e:	0006      	movs	r6, r0
    3c30:	e5d2      	b.n	37d8 <__aeabi_dadd+0x108>
    3c32:	2b00      	cmp	r3, #0
    3c34:	d038      	beq.n	3ca8 <__aeabi_dadd+0x5d8>
    3c36:	000b      	movs	r3, r1
    3c38:	4313      	orrs	r3, r2
    3c3a:	d100      	bne.n	3c3e <__aeabi_dadd+0x56e>
    3c3c:	e742      	b.n	3ac4 <__aeabi_dadd+0x3f4>
    3c3e:	08f8      	lsrs	r0, r7, #3
    3c40:	0767      	lsls	r7, r4, #29
    3c42:	4307      	orrs	r7, r0
    3c44:	2080      	movs	r0, #128	; 0x80
    3c46:	08e4      	lsrs	r4, r4, #3
    3c48:	0300      	lsls	r0, r0, #12
    3c4a:	4204      	tst	r4, r0
    3c4c:	d0e7      	beq.n	3c1e <__aeabi_dadd+0x54e>
    3c4e:	08cb      	lsrs	r3, r1, #3
    3c50:	4203      	tst	r3, r0
    3c52:	d1e4      	bne.n	3c1e <__aeabi_dadd+0x54e>
    3c54:	08d2      	lsrs	r2, r2, #3
    3c56:	0749      	lsls	r1, r1, #29
    3c58:	4311      	orrs	r1, r2
    3c5a:	000f      	movs	r7, r1
    3c5c:	001c      	movs	r4, r3
    3c5e:	e7de      	b.n	3c1e <__aeabi_dadd+0x54e>
    3c60:	2700      	movs	r7, #0
    3c62:	2400      	movs	r4, #0
    3c64:	e5d5      	b.n	3812 <__aeabi_dadd+0x142>
    3c66:	2100      	movs	r1, #0
    3c68:	e76b      	b.n	3b42 <__aeabi_dadd+0x472>
    3c6a:	2500      	movs	r5, #0
    3c6c:	2700      	movs	r7, #0
    3c6e:	e5f3      	b.n	3858 <__aeabi_dadd+0x188>
    3c70:	464e      	mov	r6, r9
    3c72:	0025      	movs	r5, r4
    3c74:	3e20      	subs	r6, #32
    3c76:	40f5      	lsrs	r5, r6
    3c78:	464b      	mov	r3, r9
    3c7a:	002e      	movs	r6, r5
    3c7c:	2b20      	cmp	r3, #32
    3c7e:	d02d      	beq.n	3cdc <__aeabi_dadd+0x60c>
    3c80:	2540      	movs	r5, #64	; 0x40
    3c82:	1aed      	subs	r5, r5, r3
    3c84:	40ac      	lsls	r4, r5
    3c86:	4327      	orrs	r7, r4
    3c88:	1e7c      	subs	r4, r7, #1
    3c8a:	41a7      	sbcs	r7, r4
    3c8c:	2400      	movs	r4, #0
    3c8e:	4337      	orrs	r7, r6
    3c90:	e6c9      	b.n	3a26 <__aeabi_dadd+0x356>
    3c92:	2480      	movs	r4, #128	; 0x80
    3c94:	2500      	movs	r5, #0
    3c96:	0324      	lsls	r4, r4, #12
    3c98:	4e13      	ldr	r6, [pc, #76]	; (3ce8 <__aeabi_dadd+0x618>)
    3c9a:	2700      	movs	r7, #0
    3c9c:	e5dc      	b.n	3858 <__aeabi_dadd+0x188>
    3c9e:	4327      	orrs	r7, r4
    3ca0:	1e7c      	subs	r4, r7, #1
    3ca2:	41a7      	sbcs	r7, r4
    3ca4:	2400      	movs	r4, #0
    3ca6:	e779      	b.n	3b9c <__aeabi_dadd+0x4cc>
    3ca8:	000c      	movs	r4, r1
    3caa:	0017      	movs	r7, r2
    3cac:	4e0e      	ldr	r6, [pc, #56]	; (3ce8 <__aeabi_dadd+0x618>)
    3cae:	e593      	b.n	37d8 <__aeabi_dadd+0x108>
    3cb0:	000c      	movs	r4, r1
    3cb2:	0017      	movs	r7, r2
    3cb4:	e590      	b.n	37d8 <__aeabi_dadd+0x108>
    3cb6:	4656      	mov	r6, sl
    3cb8:	0023      	movs	r3, r4
    3cba:	3e20      	subs	r6, #32
    3cbc:	40f3      	lsrs	r3, r6
    3cbe:	4699      	mov	r9, r3
    3cc0:	4653      	mov	r3, sl
    3cc2:	2b20      	cmp	r3, #32
    3cc4:	d00e      	beq.n	3ce4 <__aeabi_dadd+0x614>
    3cc6:	2340      	movs	r3, #64	; 0x40
    3cc8:	4656      	mov	r6, sl
    3cca:	1b9b      	subs	r3, r3, r6
    3ccc:	409c      	lsls	r4, r3
    3cce:	4327      	orrs	r7, r4
    3cd0:	1e7c      	subs	r4, r7, #1
    3cd2:	41a7      	sbcs	r7, r4
    3cd4:	464b      	mov	r3, r9
    3cd6:	2400      	movs	r4, #0
    3cd8:	431f      	orrs	r7, r3
    3cda:	e75f      	b.n	3b9c <__aeabi_dadd+0x4cc>
    3cdc:	2400      	movs	r4, #0
    3cde:	e7d2      	b.n	3c86 <__aeabi_dadd+0x5b6>
    3ce0:	0017      	movs	r7, r2
    3ce2:	e5b2      	b.n	384a <__aeabi_dadd+0x17a>
    3ce4:	2400      	movs	r4, #0
    3ce6:	e7f2      	b.n	3cce <__aeabi_dadd+0x5fe>
    3ce8:	000007ff 	.word	0x000007ff
    3cec:	ff7fffff 	.word	0xff7fffff

00003cf0 <__aeabi_ddiv>:
    3cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cf2:	4657      	mov	r7, sl
    3cf4:	4645      	mov	r5, r8
    3cf6:	46de      	mov	lr, fp
    3cf8:	464e      	mov	r6, r9
    3cfa:	b5e0      	push	{r5, r6, r7, lr}
    3cfc:	004c      	lsls	r4, r1, #1
    3cfe:	030e      	lsls	r6, r1, #12
    3d00:	b087      	sub	sp, #28
    3d02:	4683      	mov	fp, r0
    3d04:	4692      	mov	sl, r2
    3d06:	001d      	movs	r5, r3
    3d08:	4680      	mov	r8, r0
    3d0a:	0b36      	lsrs	r6, r6, #12
    3d0c:	0d64      	lsrs	r4, r4, #21
    3d0e:	0fcf      	lsrs	r7, r1, #31
    3d10:	2c00      	cmp	r4, #0
    3d12:	d04f      	beq.n	3db4 <__aeabi_ddiv+0xc4>
    3d14:	4b6f      	ldr	r3, [pc, #444]	; (3ed4 <__aeabi_ddiv+0x1e4>)
    3d16:	429c      	cmp	r4, r3
    3d18:	d035      	beq.n	3d86 <__aeabi_ddiv+0x96>
    3d1a:	2380      	movs	r3, #128	; 0x80
    3d1c:	0f42      	lsrs	r2, r0, #29
    3d1e:	041b      	lsls	r3, r3, #16
    3d20:	00f6      	lsls	r6, r6, #3
    3d22:	4313      	orrs	r3, r2
    3d24:	4333      	orrs	r3, r6
    3d26:	4699      	mov	r9, r3
    3d28:	00c3      	lsls	r3, r0, #3
    3d2a:	4698      	mov	r8, r3
    3d2c:	4b6a      	ldr	r3, [pc, #424]	; (3ed8 <__aeabi_ddiv+0x1e8>)
    3d2e:	2600      	movs	r6, #0
    3d30:	469c      	mov	ip, r3
    3d32:	2300      	movs	r3, #0
    3d34:	4464      	add	r4, ip
    3d36:	9303      	str	r3, [sp, #12]
    3d38:	032b      	lsls	r3, r5, #12
    3d3a:	0b1b      	lsrs	r3, r3, #12
    3d3c:	469b      	mov	fp, r3
    3d3e:	006b      	lsls	r3, r5, #1
    3d40:	0fed      	lsrs	r5, r5, #31
    3d42:	4650      	mov	r0, sl
    3d44:	0d5b      	lsrs	r3, r3, #21
    3d46:	9501      	str	r5, [sp, #4]
    3d48:	d05e      	beq.n	3e08 <__aeabi_ddiv+0x118>
    3d4a:	4a62      	ldr	r2, [pc, #392]	; (3ed4 <__aeabi_ddiv+0x1e4>)
    3d4c:	4293      	cmp	r3, r2
    3d4e:	d053      	beq.n	3df8 <__aeabi_ddiv+0x108>
    3d50:	465a      	mov	r2, fp
    3d52:	00d1      	lsls	r1, r2, #3
    3d54:	2280      	movs	r2, #128	; 0x80
    3d56:	0f40      	lsrs	r0, r0, #29
    3d58:	0412      	lsls	r2, r2, #16
    3d5a:	4302      	orrs	r2, r0
    3d5c:	430a      	orrs	r2, r1
    3d5e:	4693      	mov	fp, r2
    3d60:	4652      	mov	r2, sl
    3d62:	00d1      	lsls	r1, r2, #3
    3d64:	4a5c      	ldr	r2, [pc, #368]	; (3ed8 <__aeabi_ddiv+0x1e8>)
    3d66:	4694      	mov	ip, r2
    3d68:	2200      	movs	r2, #0
    3d6a:	4463      	add	r3, ip
    3d6c:	0038      	movs	r0, r7
    3d6e:	4068      	eors	r0, r5
    3d70:	4684      	mov	ip, r0
    3d72:	9002      	str	r0, [sp, #8]
    3d74:	1ae4      	subs	r4, r4, r3
    3d76:	4316      	orrs	r6, r2
    3d78:	2e0f      	cmp	r6, #15
    3d7a:	d900      	bls.n	3d7e <__aeabi_ddiv+0x8e>
    3d7c:	e0b4      	b.n	3ee8 <__aeabi_ddiv+0x1f8>
    3d7e:	4b57      	ldr	r3, [pc, #348]	; (3edc <__aeabi_ddiv+0x1ec>)
    3d80:	00b6      	lsls	r6, r6, #2
    3d82:	599b      	ldr	r3, [r3, r6]
    3d84:	469f      	mov	pc, r3
    3d86:	0003      	movs	r3, r0
    3d88:	4333      	orrs	r3, r6
    3d8a:	4699      	mov	r9, r3
    3d8c:	d16c      	bne.n	3e68 <__aeabi_ddiv+0x178>
    3d8e:	2300      	movs	r3, #0
    3d90:	4698      	mov	r8, r3
    3d92:	3302      	adds	r3, #2
    3d94:	2608      	movs	r6, #8
    3d96:	9303      	str	r3, [sp, #12]
    3d98:	e7ce      	b.n	3d38 <__aeabi_ddiv+0x48>
    3d9a:	46cb      	mov	fp, r9
    3d9c:	4641      	mov	r1, r8
    3d9e:	9a03      	ldr	r2, [sp, #12]
    3da0:	9701      	str	r7, [sp, #4]
    3da2:	2a02      	cmp	r2, #2
    3da4:	d165      	bne.n	3e72 <__aeabi_ddiv+0x182>
    3da6:	9b01      	ldr	r3, [sp, #4]
    3da8:	4c4a      	ldr	r4, [pc, #296]	; (3ed4 <__aeabi_ddiv+0x1e4>)
    3daa:	469c      	mov	ip, r3
    3dac:	2300      	movs	r3, #0
    3dae:	2200      	movs	r2, #0
    3db0:	4698      	mov	r8, r3
    3db2:	e06b      	b.n	3e8c <__aeabi_ddiv+0x19c>
    3db4:	0003      	movs	r3, r0
    3db6:	4333      	orrs	r3, r6
    3db8:	4699      	mov	r9, r3
    3dba:	d04e      	beq.n	3e5a <__aeabi_ddiv+0x16a>
    3dbc:	2e00      	cmp	r6, #0
    3dbe:	d100      	bne.n	3dc2 <__aeabi_ddiv+0xd2>
    3dc0:	e1bc      	b.n	413c <__aeabi_ddiv+0x44c>
    3dc2:	0030      	movs	r0, r6
    3dc4:	f001 f8ca 	bl	4f5c <__clzsi2>
    3dc8:	0003      	movs	r3, r0
    3dca:	3b0b      	subs	r3, #11
    3dcc:	2b1c      	cmp	r3, #28
    3dce:	dd00      	ble.n	3dd2 <__aeabi_ddiv+0xe2>
    3dd0:	e1ac      	b.n	412c <__aeabi_ddiv+0x43c>
    3dd2:	221d      	movs	r2, #29
    3dd4:	1ad3      	subs	r3, r2, r3
    3dd6:	465a      	mov	r2, fp
    3dd8:	0001      	movs	r1, r0
    3dda:	40da      	lsrs	r2, r3
    3ddc:	3908      	subs	r1, #8
    3dde:	408e      	lsls	r6, r1
    3de0:	0013      	movs	r3, r2
    3de2:	4333      	orrs	r3, r6
    3de4:	4699      	mov	r9, r3
    3de6:	465b      	mov	r3, fp
    3de8:	408b      	lsls	r3, r1
    3dea:	4698      	mov	r8, r3
    3dec:	2300      	movs	r3, #0
    3dee:	4c3c      	ldr	r4, [pc, #240]	; (3ee0 <__aeabi_ddiv+0x1f0>)
    3df0:	2600      	movs	r6, #0
    3df2:	1a24      	subs	r4, r4, r0
    3df4:	9303      	str	r3, [sp, #12]
    3df6:	e79f      	b.n	3d38 <__aeabi_ddiv+0x48>
    3df8:	4651      	mov	r1, sl
    3dfa:	465a      	mov	r2, fp
    3dfc:	4311      	orrs	r1, r2
    3dfe:	d129      	bne.n	3e54 <__aeabi_ddiv+0x164>
    3e00:	2200      	movs	r2, #0
    3e02:	4693      	mov	fp, r2
    3e04:	3202      	adds	r2, #2
    3e06:	e7b1      	b.n	3d6c <__aeabi_ddiv+0x7c>
    3e08:	4659      	mov	r1, fp
    3e0a:	4301      	orrs	r1, r0
    3e0c:	d01e      	beq.n	3e4c <__aeabi_ddiv+0x15c>
    3e0e:	465b      	mov	r3, fp
    3e10:	2b00      	cmp	r3, #0
    3e12:	d100      	bne.n	3e16 <__aeabi_ddiv+0x126>
    3e14:	e19e      	b.n	4154 <__aeabi_ddiv+0x464>
    3e16:	4658      	mov	r0, fp
    3e18:	f001 f8a0 	bl	4f5c <__clzsi2>
    3e1c:	0003      	movs	r3, r0
    3e1e:	3b0b      	subs	r3, #11
    3e20:	2b1c      	cmp	r3, #28
    3e22:	dd00      	ble.n	3e26 <__aeabi_ddiv+0x136>
    3e24:	e18f      	b.n	4146 <__aeabi_ddiv+0x456>
    3e26:	0002      	movs	r2, r0
    3e28:	4659      	mov	r1, fp
    3e2a:	3a08      	subs	r2, #8
    3e2c:	4091      	lsls	r1, r2
    3e2e:	468b      	mov	fp, r1
    3e30:	211d      	movs	r1, #29
    3e32:	1acb      	subs	r3, r1, r3
    3e34:	4651      	mov	r1, sl
    3e36:	40d9      	lsrs	r1, r3
    3e38:	000b      	movs	r3, r1
    3e3a:	4659      	mov	r1, fp
    3e3c:	430b      	orrs	r3, r1
    3e3e:	4651      	mov	r1, sl
    3e40:	469b      	mov	fp, r3
    3e42:	4091      	lsls	r1, r2
    3e44:	4b26      	ldr	r3, [pc, #152]	; (3ee0 <__aeabi_ddiv+0x1f0>)
    3e46:	2200      	movs	r2, #0
    3e48:	1a1b      	subs	r3, r3, r0
    3e4a:	e78f      	b.n	3d6c <__aeabi_ddiv+0x7c>
    3e4c:	2300      	movs	r3, #0
    3e4e:	2201      	movs	r2, #1
    3e50:	469b      	mov	fp, r3
    3e52:	e78b      	b.n	3d6c <__aeabi_ddiv+0x7c>
    3e54:	4651      	mov	r1, sl
    3e56:	2203      	movs	r2, #3
    3e58:	e788      	b.n	3d6c <__aeabi_ddiv+0x7c>
    3e5a:	2300      	movs	r3, #0
    3e5c:	4698      	mov	r8, r3
    3e5e:	3301      	adds	r3, #1
    3e60:	2604      	movs	r6, #4
    3e62:	2400      	movs	r4, #0
    3e64:	9303      	str	r3, [sp, #12]
    3e66:	e767      	b.n	3d38 <__aeabi_ddiv+0x48>
    3e68:	2303      	movs	r3, #3
    3e6a:	46b1      	mov	r9, r6
    3e6c:	9303      	str	r3, [sp, #12]
    3e6e:	260c      	movs	r6, #12
    3e70:	e762      	b.n	3d38 <__aeabi_ddiv+0x48>
    3e72:	2a03      	cmp	r2, #3
    3e74:	d100      	bne.n	3e78 <__aeabi_ddiv+0x188>
    3e76:	e25c      	b.n	4332 <__aeabi_ddiv+0x642>
    3e78:	9b01      	ldr	r3, [sp, #4]
    3e7a:	2a01      	cmp	r2, #1
    3e7c:	d000      	beq.n	3e80 <__aeabi_ddiv+0x190>
    3e7e:	e1e4      	b.n	424a <__aeabi_ddiv+0x55a>
    3e80:	4013      	ands	r3, r2
    3e82:	469c      	mov	ip, r3
    3e84:	2300      	movs	r3, #0
    3e86:	2400      	movs	r4, #0
    3e88:	2200      	movs	r2, #0
    3e8a:	4698      	mov	r8, r3
    3e8c:	2100      	movs	r1, #0
    3e8e:	0312      	lsls	r2, r2, #12
    3e90:	0b13      	lsrs	r3, r2, #12
    3e92:	0d0a      	lsrs	r2, r1, #20
    3e94:	0512      	lsls	r2, r2, #20
    3e96:	431a      	orrs	r2, r3
    3e98:	0523      	lsls	r3, r4, #20
    3e9a:	4c12      	ldr	r4, [pc, #72]	; (3ee4 <__aeabi_ddiv+0x1f4>)
    3e9c:	4640      	mov	r0, r8
    3e9e:	4022      	ands	r2, r4
    3ea0:	4313      	orrs	r3, r2
    3ea2:	4662      	mov	r2, ip
    3ea4:	005b      	lsls	r3, r3, #1
    3ea6:	07d2      	lsls	r2, r2, #31
    3ea8:	085b      	lsrs	r3, r3, #1
    3eaa:	4313      	orrs	r3, r2
    3eac:	0019      	movs	r1, r3
    3eae:	b007      	add	sp, #28
    3eb0:	bc3c      	pop	{r2, r3, r4, r5}
    3eb2:	4690      	mov	r8, r2
    3eb4:	4699      	mov	r9, r3
    3eb6:	46a2      	mov	sl, r4
    3eb8:	46ab      	mov	fp, r5
    3eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ebc:	2300      	movs	r3, #0
    3ebe:	2280      	movs	r2, #128	; 0x80
    3ec0:	469c      	mov	ip, r3
    3ec2:	0312      	lsls	r2, r2, #12
    3ec4:	4698      	mov	r8, r3
    3ec6:	4c03      	ldr	r4, [pc, #12]	; (3ed4 <__aeabi_ddiv+0x1e4>)
    3ec8:	e7e0      	b.n	3e8c <__aeabi_ddiv+0x19c>
    3eca:	2300      	movs	r3, #0
    3ecc:	4c01      	ldr	r4, [pc, #4]	; (3ed4 <__aeabi_ddiv+0x1e4>)
    3ece:	2200      	movs	r2, #0
    3ed0:	4698      	mov	r8, r3
    3ed2:	e7db      	b.n	3e8c <__aeabi_ddiv+0x19c>
    3ed4:	000007ff 	.word	0x000007ff
    3ed8:	fffffc01 	.word	0xfffffc01
    3edc:	000052e4 	.word	0x000052e4
    3ee0:	fffffc0d 	.word	0xfffffc0d
    3ee4:	800fffff 	.word	0x800fffff
    3ee8:	45d9      	cmp	r9, fp
    3eea:	d900      	bls.n	3eee <__aeabi_ddiv+0x1fe>
    3eec:	e139      	b.n	4162 <__aeabi_ddiv+0x472>
    3eee:	d100      	bne.n	3ef2 <__aeabi_ddiv+0x202>
    3ef0:	e134      	b.n	415c <__aeabi_ddiv+0x46c>
    3ef2:	2300      	movs	r3, #0
    3ef4:	4646      	mov	r6, r8
    3ef6:	464d      	mov	r5, r9
    3ef8:	469a      	mov	sl, r3
    3efa:	3c01      	subs	r4, #1
    3efc:	465b      	mov	r3, fp
    3efe:	0e0a      	lsrs	r2, r1, #24
    3f00:	021b      	lsls	r3, r3, #8
    3f02:	431a      	orrs	r2, r3
    3f04:	020b      	lsls	r3, r1, #8
    3f06:	0c17      	lsrs	r7, r2, #16
    3f08:	9303      	str	r3, [sp, #12]
    3f0a:	0413      	lsls	r3, r2, #16
    3f0c:	0c1b      	lsrs	r3, r3, #16
    3f0e:	0039      	movs	r1, r7
    3f10:	0028      	movs	r0, r5
    3f12:	4690      	mov	r8, r2
    3f14:	9301      	str	r3, [sp, #4]
    3f16:	f7ff fb25 	bl	3564 <__udivsi3>
    3f1a:	0002      	movs	r2, r0
    3f1c:	9b01      	ldr	r3, [sp, #4]
    3f1e:	4683      	mov	fp, r0
    3f20:	435a      	muls	r2, r3
    3f22:	0028      	movs	r0, r5
    3f24:	0039      	movs	r1, r7
    3f26:	4691      	mov	r9, r2
    3f28:	f7ff fba2 	bl	3670 <__aeabi_uidivmod>
    3f2c:	0c35      	lsrs	r5, r6, #16
    3f2e:	0409      	lsls	r1, r1, #16
    3f30:	430d      	orrs	r5, r1
    3f32:	45a9      	cmp	r9, r5
    3f34:	d90d      	bls.n	3f52 <__aeabi_ddiv+0x262>
    3f36:	465b      	mov	r3, fp
    3f38:	4445      	add	r5, r8
    3f3a:	3b01      	subs	r3, #1
    3f3c:	45a8      	cmp	r8, r5
    3f3e:	d900      	bls.n	3f42 <__aeabi_ddiv+0x252>
    3f40:	e13a      	b.n	41b8 <__aeabi_ddiv+0x4c8>
    3f42:	45a9      	cmp	r9, r5
    3f44:	d800      	bhi.n	3f48 <__aeabi_ddiv+0x258>
    3f46:	e137      	b.n	41b8 <__aeabi_ddiv+0x4c8>
    3f48:	2302      	movs	r3, #2
    3f4a:	425b      	negs	r3, r3
    3f4c:	469c      	mov	ip, r3
    3f4e:	4445      	add	r5, r8
    3f50:	44e3      	add	fp, ip
    3f52:	464b      	mov	r3, r9
    3f54:	1aeb      	subs	r3, r5, r3
    3f56:	0039      	movs	r1, r7
    3f58:	0018      	movs	r0, r3
    3f5a:	9304      	str	r3, [sp, #16]
    3f5c:	f7ff fb02 	bl	3564 <__udivsi3>
    3f60:	9b01      	ldr	r3, [sp, #4]
    3f62:	0005      	movs	r5, r0
    3f64:	4343      	muls	r3, r0
    3f66:	0039      	movs	r1, r7
    3f68:	9804      	ldr	r0, [sp, #16]
    3f6a:	4699      	mov	r9, r3
    3f6c:	f7ff fb80 	bl	3670 <__aeabi_uidivmod>
    3f70:	0433      	lsls	r3, r6, #16
    3f72:	0409      	lsls	r1, r1, #16
    3f74:	0c1b      	lsrs	r3, r3, #16
    3f76:	430b      	orrs	r3, r1
    3f78:	4599      	cmp	r9, r3
    3f7a:	d909      	bls.n	3f90 <__aeabi_ddiv+0x2a0>
    3f7c:	4443      	add	r3, r8
    3f7e:	1e6a      	subs	r2, r5, #1
    3f80:	4598      	cmp	r8, r3
    3f82:	d900      	bls.n	3f86 <__aeabi_ddiv+0x296>
    3f84:	e11a      	b.n	41bc <__aeabi_ddiv+0x4cc>
    3f86:	4599      	cmp	r9, r3
    3f88:	d800      	bhi.n	3f8c <__aeabi_ddiv+0x29c>
    3f8a:	e117      	b.n	41bc <__aeabi_ddiv+0x4cc>
    3f8c:	3d02      	subs	r5, #2
    3f8e:	4443      	add	r3, r8
    3f90:	464a      	mov	r2, r9
    3f92:	1a9b      	subs	r3, r3, r2
    3f94:	465a      	mov	r2, fp
    3f96:	0412      	lsls	r2, r2, #16
    3f98:	432a      	orrs	r2, r5
    3f9a:	9903      	ldr	r1, [sp, #12]
    3f9c:	4693      	mov	fp, r2
    3f9e:	0c10      	lsrs	r0, r2, #16
    3fa0:	0c0a      	lsrs	r2, r1, #16
    3fa2:	4691      	mov	r9, r2
    3fa4:	0409      	lsls	r1, r1, #16
    3fa6:	465a      	mov	r2, fp
    3fa8:	0c09      	lsrs	r1, r1, #16
    3faa:	464e      	mov	r6, r9
    3fac:	000d      	movs	r5, r1
    3fae:	0412      	lsls	r2, r2, #16
    3fb0:	0c12      	lsrs	r2, r2, #16
    3fb2:	4345      	muls	r5, r0
    3fb4:	9105      	str	r1, [sp, #20]
    3fb6:	4351      	muls	r1, r2
    3fb8:	4372      	muls	r2, r6
    3fba:	4370      	muls	r0, r6
    3fbc:	1952      	adds	r2, r2, r5
    3fbe:	0c0e      	lsrs	r6, r1, #16
    3fc0:	18b2      	adds	r2, r6, r2
    3fc2:	4295      	cmp	r5, r2
    3fc4:	d903      	bls.n	3fce <__aeabi_ddiv+0x2de>
    3fc6:	2580      	movs	r5, #128	; 0x80
    3fc8:	026d      	lsls	r5, r5, #9
    3fca:	46ac      	mov	ip, r5
    3fcc:	4460      	add	r0, ip
    3fce:	0c15      	lsrs	r5, r2, #16
    3fd0:	0409      	lsls	r1, r1, #16
    3fd2:	0412      	lsls	r2, r2, #16
    3fd4:	0c09      	lsrs	r1, r1, #16
    3fd6:	1828      	adds	r0, r5, r0
    3fd8:	1852      	adds	r2, r2, r1
    3fda:	4283      	cmp	r3, r0
    3fdc:	d200      	bcs.n	3fe0 <__aeabi_ddiv+0x2f0>
    3fde:	e0ce      	b.n	417e <__aeabi_ddiv+0x48e>
    3fe0:	d100      	bne.n	3fe4 <__aeabi_ddiv+0x2f4>
    3fe2:	e0c8      	b.n	4176 <__aeabi_ddiv+0x486>
    3fe4:	1a1d      	subs	r5, r3, r0
    3fe6:	4653      	mov	r3, sl
    3fe8:	1a9e      	subs	r6, r3, r2
    3fea:	45b2      	cmp	sl, r6
    3fec:	4192      	sbcs	r2, r2
    3fee:	4252      	negs	r2, r2
    3ff0:	1aab      	subs	r3, r5, r2
    3ff2:	469a      	mov	sl, r3
    3ff4:	4598      	cmp	r8, r3
    3ff6:	d100      	bne.n	3ffa <__aeabi_ddiv+0x30a>
    3ff8:	e117      	b.n	422a <__aeabi_ddiv+0x53a>
    3ffa:	0039      	movs	r1, r7
    3ffc:	0018      	movs	r0, r3
    3ffe:	f7ff fab1 	bl	3564 <__udivsi3>
    4002:	9b01      	ldr	r3, [sp, #4]
    4004:	0005      	movs	r5, r0
    4006:	4343      	muls	r3, r0
    4008:	0039      	movs	r1, r7
    400a:	4650      	mov	r0, sl
    400c:	9304      	str	r3, [sp, #16]
    400e:	f7ff fb2f 	bl	3670 <__aeabi_uidivmod>
    4012:	9804      	ldr	r0, [sp, #16]
    4014:	040b      	lsls	r3, r1, #16
    4016:	0c31      	lsrs	r1, r6, #16
    4018:	4319      	orrs	r1, r3
    401a:	4288      	cmp	r0, r1
    401c:	d909      	bls.n	4032 <__aeabi_ddiv+0x342>
    401e:	4441      	add	r1, r8
    4020:	1e6b      	subs	r3, r5, #1
    4022:	4588      	cmp	r8, r1
    4024:	d900      	bls.n	4028 <__aeabi_ddiv+0x338>
    4026:	e107      	b.n	4238 <__aeabi_ddiv+0x548>
    4028:	4288      	cmp	r0, r1
    402a:	d800      	bhi.n	402e <__aeabi_ddiv+0x33e>
    402c:	e104      	b.n	4238 <__aeabi_ddiv+0x548>
    402e:	3d02      	subs	r5, #2
    4030:	4441      	add	r1, r8
    4032:	9b04      	ldr	r3, [sp, #16]
    4034:	1acb      	subs	r3, r1, r3
    4036:	0018      	movs	r0, r3
    4038:	0039      	movs	r1, r7
    403a:	9304      	str	r3, [sp, #16]
    403c:	f7ff fa92 	bl	3564 <__udivsi3>
    4040:	9b01      	ldr	r3, [sp, #4]
    4042:	4682      	mov	sl, r0
    4044:	4343      	muls	r3, r0
    4046:	0039      	movs	r1, r7
    4048:	9804      	ldr	r0, [sp, #16]
    404a:	9301      	str	r3, [sp, #4]
    404c:	f7ff fb10 	bl	3670 <__aeabi_uidivmod>
    4050:	9801      	ldr	r0, [sp, #4]
    4052:	040b      	lsls	r3, r1, #16
    4054:	0431      	lsls	r1, r6, #16
    4056:	0c09      	lsrs	r1, r1, #16
    4058:	4319      	orrs	r1, r3
    405a:	4288      	cmp	r0, r1
    405c:	d90d      	bls.n	407a <__aeabi_ddiv+0x38a>
    405e:	4653      	mov	r3, sl
    4060:	4441      	add	r1, r8
    4062:	3b01      	subs	r3, #1
    4064:	4588      	cmp	r8, r1
    4066:	d900      	bls.n	406a <__aeabi_ddiv+0x37a>
    4068:	e0e8      	b.n	423c <__aeabi_ddiv+0x54c>
    406a:	4288      	cmp	r0, r1
    406c:	d800      	bhi.n	4070 <__aeabi_ddiv+0x380>
    406e:	e0e5      	b.n	423c <__aeabi_ddiv+0x54c>
    4070:	2302      	movs	r3, #2
    4072:	425b      	negs	r3, r3
    4074:	469c      	mov	ip, r3
    4076:	4441      	add	r1, r8
    4078:	44e2      	add	sl, ip
    407a:	9b01      	ldr	r3, [sp, #4]
    407c:	042d      	lsls	r5, r5, #16
    407e:	1ace      	subs	r6, r1, r3
    4080:	4651      	mov	r1, sl
    4082:	4329      	orrs	r1, r5
    4084:	9d05      	ldr	r5, [sp, #20]
    4086:	464f      	mov	r7, r9
    4088:	002a      	movs	r2, r5
    408a:	040b      	lsls	r3, r1, #16
    408c:	0c08      	lsrs	r0, r1, #16
    408e:	0c1b      	lsrs	r3, r3, #16
    4090:	435a      	muls	r2, r3
    4092:	4345      	muls	r5, r0
    4094:	437b      	muls	r3, r7
    4096:	4378      	muls	r0, r7
    4098:	195b      	adds	r3, r3, r5
    409a:	0c17      	lsrs	r7, r2, #16
    409c:	18fb      	adds	r3, r7, r3
    409e:	429d      	cmp	r5, r3
    40a0:	d903      	bls.n	40aa <__aeabi_ddiv+0x3ba>
    40a2:	2580      	movs	r5, #128	; 0x80
    40a4:	026d      	lsls	r5, r5, #9
    40a6:	46ac      	mov	ip, r5
    40a8:	4460      	add	r0, ip
    40aa:	0c1d      	lsrs	r5, r3, #16
    40ac:	0412      	lsls	r2, r2, #16
    40ae:	041b      	lsls	r3, r3, #16
    40b0:	0c12      	lsrs	r2, r2, #16
    40b2:	1828      	adds	r0, r5, r0
    40b4:	189b      	adds	r3, r3, r2
    40b6:	4286      	cmp	r6, r0
    40b8:	d200      	bcs.n	40bc <__aeabi_ddiv+0x3cc>
    40ba:	e093      	b.n	41e4 <__aeabi_ddiv+0x4f4>
    40bc:	d100      	bne.n	40c0 <__aeabi_ddiv+0x3d0>
    40be:	e08e      	b.n	41de <__aeabi_ddiv+0x4ee>
    40c0:	2301      	movs	r3, #1
    40c2:	4319      	orrs	r1, r3
    40c4:	4ba0      	ldr	r3, [pc, #640]	; (4348 <__aeabi_ddiv+0x658>)
    40c6:	18e3      	adds	r3, r4, r3
    40c8:	2b00      	cmp	r3, #0
    40ca:	dc00      	bgt.n	40ce <__aeabi_ddiv+0x3de>
    40cc:	e099      	b.n	4202 <__aeabi_ddiv+0x512>
    40ce:	074a      	lsls	r2, r1, #29
    40d0:	d000      	beq.n	40d4 <__aeabi_ddiv+0x3e4>
    40d2:	e09e      	b.n	4212 <__aeabi_ddiv+0x522>
    40d4:	465a      	mov	r2, fp
    40d6:	01d2      	lsls	r2, r2, #7
    40d8:	d506      	bpl.n	40e8 <__aeabi_ddiv+0x3f8>
    40da:	465a      	mov	r2, fp
    40dc:	4b9b      	ldr	r3, [pc, #620]	; (434c <__aeabi_ddiv+0x65c>)
    40de:	401a      	ands	r2, r3
    40e0:	2380      	movs	r3, #128	; 0x80
    40e2:	4693      	mov	fp, r2
    40e4:	00db      	lsls	r3, r3, #3
    40e6:	18e3      	adds	r3, r4, r3
    40e8:	4a99      	ldr	r2, [pc, #612]	; (4350 <__aeabi_ddiv+0x660>)
    40ea:	4293      	cmp	r3, r2
    40ec:	dd68      	ble.n	41c0 <__aeabi_ddiv+0x4d0>
    40ee:	2301      	movs	r3, #1
    40f0:	9a02      	ldr	r2, [sp, #8]
    40f2:	4c98      	ldr	r4, [pc, #608]	; (4354 <__aeabi_ddiv+0x664>)
    40f4:	401a      	ands	r2, r3
    40f6:	2300      	movs	r3, #0
    40f8:	4694      	mov	ip, r2
    40fa:	4698      	mov	r8, r3
    40fc:	2200      	movs	r2, #0
    40fe:	e6c5      	b.n	3e8c <__aeabi_ddiv+0x19c>
    4100:	2280      	movs	r2, #128	; 0x80
    4102:	464b      	mov	r3, r9
    4104:	0312      	lsls	r2, r2, #12
    4106:	4213      	tst	r3, r2
    4108:	d00a      	beq.n	4120 <__aeabi_ddiv+0x430>
    410a:	465b      	mov	r3, fp
    410c:	4213      	tst	r3, r2
    410e:	d106      	bne.n	411e <__aeabi_ddiv+0x42e>
    4110:	431a      	orrs	r2, r3
    4112:	0312      	lsls	r2, r2, #12
    4114:	0b12      	lsrs	r2, r2, #12
    4116:	46ac      	mov	ip, r5
    4118:	4688      	mov	r8, r1
    411a:	4c8e      	ldr	r4, [pc, #568]	; (4354 <__aeabi_ddiv+0x664>)
    411c:	e6b6      	b.n	3e8c <__aeabi_ddiv+0x19c>
    411e:	464b      	mov	r3, r9
    4120:	431a      	orrs	r2, r3
    4122:	0312      	lsls	r2, r2, #12
    4124:	0b12      	lsrs	r2, r2, #12
    4126:	46bc      	mov	ip, r7
    4128:	4c8a      	ldr	r4, [pc, #552]	; (4354 <__aeabi_ddiv+0x664>)
    412a:	e6af      	b.n	3e8c <__aeabi_ddiv+0x19c>
    412c:	0003      	movs	r3, r0
    412e:	465a      	mov	r2, fp
    4130:	3b28      	subs	r3, #40	; 0x28
    4132:	409a      	lsls	r2, r3
    4134:	2300      	movs	r3, #0
    4136:	4691      	mov	r9, r2
    4138:	4698      	mov	r8, r3
    413a:	e657      	b.n	3dec <__aeabi_ddiv+0xfc>
    413c:	4658      	mov	r0, fp
    413e:	f000 ff0d 	bl	4f5c <__clzsi2>
    4142:	3020      	adds	r0, #32
    4144:	e640      	b.n	3dc8 <__aeabi_ddiv+0xd8>
    4146:	0003      	movs	r3, r0
    4148:	4652      	mov	r2, sl
    414a:	3b28      	subs	r3, #40	; 0x28
    414c:	409a      	lsls	r2, r3
    414e:	2100      	movs	r1, #0
    4150:	4693      	mov	fp, r2
    4152:	e677      	b.n	3e44 <__aeabi_ddiv+0x154>
    4154:	f000 ff02 	bl	4f5c <__clzsi2>
    4158:	3020      	adds	r0, #32
    415a:	e65f      	b.n	3e1c <__aeabi_ddiv+0x12c>
    415c:	4588      	cmp	r8, r1
    415e:	d200      	bcs.n	4162 <__aeabi_ddiv+0x472>
    4160:	e6c7      	b.n	3ef2 <__aeabi_ddiv+0x202>
    4162:	464b      	mov	r3, r9
    4164:	07de      	lsls	r6, r3, #31
    4166:	085d      	lsrs	r5, r3, #1
    4168:	4643      	mov	r3, r8
    416a:	085b      	lsrs	r3, r3, #1
    416c:	431e      	orrs	r6, r3
    416e:	4643      	mov	r3, r8
    4170:	07db      	lsls	r3, r3, #31
    4172:	469a      	mov	sl, r3
    4174:	e6c2      	b.n	3efc <__aeabi_ddiv+0x20c>
    4176:	2500      	movs	r5, #0
    4178:	4592      	cmp	sl, r2
    417a:	d300      	bcc.n	417e <__aeabi_ddiv+0x48e>
    417c:	e733      	b.n	3fe6 <__aeabi_ddiv+0x2f6>
    417e:	9e03      	ldr	r6, [sp, #12]
    4180:	4659      	mov	r1, fp
    4182:	46b4      	mov	ip, r6
    4184:	44e2      	add	sl, ip
    4186:	45b2      	cmp	sl, r6
    4188:	41ad      	sbcs	r5, r5
    418a:	426d      	negs	r5, r5
    418c:	4445      	add	r5, r8
    418e:	18eb      	adds	r3, r5, r3
    4190:	3901      	subs	r1, #1
    4192:	4598      	cmp	r8, r3
    4194:	d207      	bcs.n	41a6 <__aeabi_ddiv+0x4b6>
    4196:	4298      	cmp	r0, r3
    4198:	d900      	bls.n	419c <__aeabi_ddiv+0x4ac>
    419a:	e07f      	b.n	429c <__aeabi_ddiv+0x5ac>
    419c:	d100      	bne.n	41a0 <__aeabi_ddiv+0x4b0>
    419e:	e0bc      	b.n	431a <__aeabi_ddiv+0x62a>
    41a0:	1a1d      	subs	r5, r3, r0
    41a2:	468b      	mov	fp, r1
    41a4:	e71f      	b.n	3fe6 <__aeabi_ddiv+0x2f6>
    41a6:	4598      	cmp	r8, r3
    41a8:	d1fa      	bne.n	41a0 <__aeabi_ddiv+0x4b0>
    41aa:	9d03      	ldr	r5, [sp, #12]
    41ac:	4555      	cmp	r5, sl
    41ae:	d9f2      	bls.n	4196 <__aeabi_ddiv+0x4a6>
    41b0:	4643      	mov	r3, r8
    41b2:	468b      	mov	fp, r1
    41b4:	1a1d      	subs	r5, r3, r0
    41b6:	e716      	b.n	3fe6 <__aeabi_ddiv+0x2f6>
    41b8:	469b      	mov	fp, r3
    41ba:	e6ca      	b.n	3f52 <__aeabi_ddiv+0x262>
    41bc:	0015      	movs	r5, r2
    41be:	e6e7      	b.n	3f90 <__aeabi_ddiv+0x2a0>
    41c0:	465a      	mov	r2, fp
    41c2:	08c9      	lsrs	r1, r1, #3
    41c4:	0752      	lsls	r2, r2, #29
    41c6:	430a      	orrs	r2, r1
    41c8:	055b      	lsls	r3, r3, #21
    41ca:	4690      	mov	r8, r2
    41cc:	0d5c      	lsrs	r4, r3, #21
    41ce:	465a      	mov	r2, fp
    41d0:	2301      	movs	r3, #1
    41d2:	9902      	ldr	r1, [sp, #8]
    41d4:	0252      	lsls	r2, r2, #9
    41d6:	4019      	ands	r1, r3
    41d8:	0b12      	lsrs	r2, r2, #12
    41da:	468c      	mov	ip, r1
    41dc:	e656      	b.n	3e8c <__aeabi_ddiv+0x19c>
    41de:	2b00      	cmp	r3, #0
    41e0:	d100      	bne.n	41e4 <__aeabi_ddiv+0x4f4>
    41e2:	e76f      	b.n	40c4 <__aeabi_ddiv+0x3d4>
    41e4:	4446      	add	r6, r8
    41e6:	1e4a      	subs	r2, r1, #1
    41e8:	45b0      	cmp	r8, r6
    41ea:	d929      	bls.n	4240 <__aeabi_ddiv+0x550>
    41ec:	0011      	movs	r1, r2
    41ee:	4286      	cmp	r6, r0
    41f0:	d000      	beq.n	41f4 <__aeabi_ddiv+0x504>
    41f2:	e765      	b.n	40c0 <__aeabi_ddiv+0x3d0>
    41f4:	9a03      	ldr	r2, [sp, #12]
    41f6:	4293      	cmp	r3, r2
    41f8:	d000      	beq.n	41fc <__aeabi_ddiv+0x50c>
    41fa:	e761      	b.n	40c0 <__aeabi_ddiv+0x3d0>
    41fc:	e762      	b.n	40c4 <__aeabi_ddiv+0x3d4>
    41fe:	2101      	movs	r1, #1
    4200:	4249      	negs	r1, r1
    4202:	2001      	movs	r0, #1
    4204:	1ac2      	subs	r2, r0, r3
    4206:	2a38      	cmp	r2, #56	; 0x38
    4208:	dd21      	ble.n	424e <__aeabi_ddiv+0x55e>
    420a:	9b02      	ldr	r3, [sp, #8]
    420c:	4003      	ands	r3, r0
    420e:	469c      	mov	ip, r3
    4210:	e638      	b.n	3e84 <__aeabi_ddiv+0x194>
    4212:	220f      	movs	r2, #15
    4214:	400a      	ands	r2, r1
    4216:	2a04      	cmp	r2, #4
    4218:	d100      	bne.n	421c <__aeabi_ddiv+0x52c>
    421a:	e75b      	b.n	40d4 <__aeabi_ddiv+0x3e4>
    421c:	000a      	movs	r2, r1
    421e:	1d11      	adds	r1, r2, #4
    4220:	4291      	cmp	r1, r2
    4222:	4192      	sbcs	r2, r2
    4224:	4252      	negs	r2, r2
    4226:	4493      	add	fp, r2
    4228:	e754      	b.n	40d4 <__aeabi_ddiv+0x3e4>
    422a:	4b47      	ldr	r3, [pc, #284]	; (4348 <__aeabi_ddiv+0x658>)
    422c:	18e3      	adds	r3, r4, r3
    422e:	2b00      	cmp	r3, #0
    4230:	dde5      	ble.n	41fe <__aeabi_ddiv+0x50e>
    4232:	2201      	movs	r2, #1
    4234:	4252      	negs	r2, r2
    4236:	e7f2      	b.n	421e <__aeabi_ddiv+0x52e>
    4238:	001d      	movs	r5, r3
    423a:	e6fa      	b.n	4032 <__aeabi_ddiv+0x342>
    423c:	469a      	mov	sl, r3
    423e:	e71c      	b.n	407a <__aeabi_ddiv+0x38a>
    4240:	42b0      	cmp	r0, r6
    4242:	d839      	bhi.n	42b8 <__aeabi_ddiv+0x5c8>
    4244:	d06e      	beq.n	4324 <__aeabi_ddiv+0x634>
    4246:	0011      	movs	r1, r2
    4248:	e73a      	b.n	40c0 <__aeabi_ddiv+0x3d0>
    424a:	9302      	str	r3, [sp, #8]
    424c:	e73a      	b.n	40c4 <__aeabi_ddiv+0x3d4>
    424e:	2a1f      	cmp	r2, #31
    4250:	dc3c      	bgt.n	42cc <__aeabi_ddiv+0x5dc>
    4252:	2320      	movs	r3, #32
    4254:	1a9b      	subs	r3, r3, r2
    4256:	000c      	movs	r4, r1
    4258:	4658      	mov	r0, fp
    425a:	4099      	lsls	r1, r3
    425c:	4098      	lsls	r0, r3
    425e:	1e4b      	subs	r3, r1, #1
    4260:	4199      	sbcs	r1, r3
    4262:	465b      	mov	r3, fp
    4264:	40d4      	lsrs	r4, r2
    4266:	40d3      	lsrs	r3, r2
    4268:	4320      	orrs	r0, r4
    426a:	4308      	orrs	r0, r1
    426c:	001a      	movs	r2, r3
    426e:	0743      	lsls	r3, r0, #29
    4270:	d009      	beq.n	4286 <__aeabi_ddiv+0x596>
    4272:	230f      	movs	r3, #15
    4274:	4003      	ands	r3, r0
    4276:	2b04      	cmp	r3, #4
    4278:	d005      	beq.n	4286 <__aeabi_ddiv+0x596>
    427a:	0001      	movs	r1, r0
    427c:	1d08      	adds	r0, r1, #4
    427e:	4288      	cmp	r0, r1
    4280:	419b      	sbcs	r3, r3
    4282:	425b      	negs	r3, r3
    4284:	18d2      	adds	r2, r2, r3
    4286:	0213      	lsls	r3, r2, #8
    4288:	d53a      	bpl.n	4300 <__aeabi_ddiv+0x610>
    428a:	2301      	movs	r3, #1
    428c:	9a02      	ldr	r2, [sp, #8]
    428e:	2401      	movs	r4, #1
    4290:	401a      	ands	r2, r3
    4292:	2300      	movs	r3, #0
    4294:	4694      	mov	ip, r2
    4296:	4698      	mov	r8, r3
    4298:	2200      	movs	r2, #0
    429a:	e5f7      	b.n	3e8c <__aeabi_ddiv+0x19c>
    429c:	2102      	movs	r1, #2
    429e:	4249      	negs	r1, r1
    42a0:	468c      	mov	ip, r1
    42a2:	9d03      	ldr	r5, [sp, #12]
    42a4:	44e3      	add	fp, ip
    42a6:	46ac      	mov	ip, r5
    42a8:	44e2      	add	sl, ip
    42aa:	45aa      	cmp	sl, r5
    42ac:	41ad      	sbcs	r5, r5
    42ae:	426d      	negs	r5, r5
    42b0:	4445      	add	r5, r8
    42b2:	18ed      	adds	r5, r5, r3
    42b4:	1a2d      	subs	r5, r5, r0
    42b6:	e696      	b.n	3fe6 <__aeabi_ddiv+0x2f6>
    42b8:	1e8a      	subs	r2, r1, #2
    42ba:	9903      	ldr	r1, [sp, #12]
    42bc:	004d      	lsls	r5, r1, #1
    42be:	428d      	cmp	r5, r1
    42c0:	4189      	sbcs	r1, r1
    42c2:	4249      	negs	r1, r1
    42c4:	4441      	add	r1, r8
    42c6:	1876      	adds	r6, r6, r1
    42c8:	9503      	str	r5, [sp, #12]
    42ca:	e78f      	b.n	41ec <__aeabi_ddiv+0x4fc>
    42cc:	201f      	movs	r0, #31
    42ce:	4240      	negs	r0, r0
    42d0:	1ac3      	subs	r3, r0, r3
    42d2:	4658      	mov	r0, fp
    42d4:	40d8      	lsrs	r0, r3
    42d6:	0003      	movs	r3, r0
    42d8:	2a20      	cmp	r2, #32
    42da:	d028      	beq.n	432e <__aeabi_ddiv+0x63e>
    42dc:	2040      	movs	r0, #64	; 0x40
    42de:	465d      	mov	r5, fp
    42e0:	1a82      	subs	r2, r0, r2
    42e2:	4095      	lsls	r5, r2
    42e4:	4329      	orrs	r1, r5
    42e6:	1e4a      	subs	r2, r1, #1
    42e8:	4191      	sbcs	r1, r2
    42ea:	4319      	orrs	r1, r3
    42ec:	2307      	movs	r3, #7
    42ee:	2200      	movs	r2, #0
    42f0:	400b      	ands	r3, r1
    42f2:	d009      	beq.n	4308 <__aeabi_ddiv+0x618>
    42f4:	230f      	movs	r3, #15
    42f6:	2200      	movs	r2, #0
    42f8:	400b      	ands	r3, r1
    42fa:	0008      	movs	r0, r1
    42fc:	2b04      	cmp	r3, #4
    42fe:	d1bd      	bne.n	427c <__aeabi_ddiv+0x58c>
    4300:	0001      	movs	r1, r0
    4302:	0753      	lsls	r3, r2, #29
    4304:	0252      	lsls	r2, r2, #9
    4306:	0b12      	lsrs	r2, r2, #12
    4308:	08c9      	lsrs	r1, r1, #3
    430a:	4319      	orrs	r1, r3
    430c:	2301      	movs	r3, #1
    430e:	4688      	mov	r8, r1
    4310:	9902      	ldr	r1, [sp, #8]
    4312:	2400      	movs	r4, #0
    4314:	4019      	ands	r1, r3
    4316:	468c      	mov	ip, r1
    4318:	e5b8      	b.n	3e8c <__aeabi_ddiv+0x19c>
    431a:	4552      	cmp	r2, sl
    431c:	d8be      	bhi.n	429c <__aeabi_ddiv+0x5ac>
    431e:	468b      	mov	fp, r1
    4320:	2500      	movs	r5, #0
    4322:	e660      	b.n	3fe6 <__aeabi_ddiv+0x2f6>
    4324:	9d03      	ldr	r5, [sp, #12]
    4326:	429d      	cmp	r5, r3
    4328:	d3c6      	bcc.n	42b8 <__aeabi_ddiv+0x5c8>
    432a:	0011      	movs	r1, r2
    432c:	e762      	b.n	41f4 <__aeabi_ddiv+0x504>
    432e:	2500      	movs	r5, #0
    4330:	e7d8      	b.n	42e4 <__aeabi_ddiv+0x5f4>
    4332:	2280      	movs	r2, #128	; 0x80
    4334:	465b      	mov	r3, fp
    4336:	0312      	lsls	r2, r2, #12
    4338:	431a      	orrs	r2, r3
    433a:	9b01      	ldr	r3, [sp, #4]
    433c:	0312      	lsls	r2, r2, #12
    433e:	0b12      	lsrs	r2, r2, #12
    4340:	469c      	mov	ip, r3
    4342:	4688      	mov	r8, r1
    4344:	4c03      	ldr	r4, [pc, #12]	; (4354 <__aeabi_ddiv+0x664>)
    4346:	e5a1      	b.n	3e8c <__aeabi_ddiv+0x19c>
    4348:	000003ff 	.word	0x000003ff
    434c:	feffffff 	.word	0xfeffffff
    4350:	000007fe 	.word	0x000007fe
    4354:	000007ff 	.word	0x000007ff

00004358 <__aeabi_dmul>:
    4358:	b5f0      	push	{r4, r5, r6, r7, lr}
    435a:	4657      	mov	r7, sl
    435c:	4645      	mov	r5, r8
    435e:	46de      	mov	lr, fp
    4360:	464e      	mov	r6, r9
    4362:	b5e0      	push	{r5, r6, r7, lr}
    4364:	030c      	lsls	r4, r1, #12
    4366:	4698      	mov	r8, r3
    4368:	004e      	lsls	r6, r1, #1
    436a:	0b23      	lsrs	r3, r4, #12
    436c:	b087      	sub	sp, #28
    436e:	0007      	movs	r7, r0
    4370:	4692      	mov	sl, r2
    4372:	469b      	mov	fp, r3
    4374:	0d76      	lsrs	r6, r6, #21
    4376:	0fcd      	lsrs	r5, r1, #31
    4378:	2e00      	cmp	r6, #0
    437a:	d06b      	beq.n	4454 <__aeabi_dmul+0xfc>
    437c:	4b6d      	ldr	r3, [pc, #436]	; (4534 <__aeabi_dmul+0x1dc>)
    437e:	429e      	cmp	r6, r3
    4380:	d035      	beq.n	43ee <__aeabi_dmul+0x96>
    4382:	2480      	movs	r4, #128	; 0x80
    4384:	465b      	mov	r3, fp
    4386:	0f42      	lsrs	r2, r0, #29
    4388:	0424      	lsls	r4, r4, #16
    438a:	00db      	lsls	r3, r3, #3
    438c:	4314      	orrs	r4, r2
    438e:	431c      	orrs	r4, r3
    4390:	00c3      	lsls	r3, r0, #3
    4392:	4699      	mov	r9, r3
    4394:	4b68      	ldr	r3, [pc, #416]	; (4538 <__aeabi_dmul+0x1e0>)
    4396:	46a3      	mov	fp, r4
    4398:	469c      	mov	ip, r3
    439a:	2300      	movs	r3, #0
    439c:	2700      	movs	r7, #0
    439e:	4466      	add	r6, ip
    43a0:	9302      	str	r3, [sp, #8]
    43a2:	4643      	mov	r3, r8
    43a4:	031c      	lsls	r4, r3, #12
    43a6:	005a      	lsls	r2, r3, #1
    43a8:	0fdb      	lsrs	r3, r3, #31
    43aa:	4650      	mov	r0, sl
    43ac:	0b24      	lsrs	r4, r4, #12
    43ae:	0d52      	lsrs	r2, r2, #21
    43b0:	4698      	mov	r8, r3
    43b2:	d100      	bne.n	43b6 <__aeabi_dmul+0x5e>
    43b4:	e076      	b.n	44a4 <__aeabi_dmul+0x14c>
    43b6:	4b5f      	ldr	r3, [pc, #380]	; (4534 <__aeabi_dmul+0x1dc>)
    43b8:	429a      	cmp	r2, r3
    43ba:	d06d      	beq.n	4498 <__aeabi_dmul+0x140>
    43bc:	2380      	movs	r3, #128	; 0x80
    43be:	0f41      	lsrs	r1, r0, #29
    43c0:	041b      	lsls	r3, r3, #16
    43c2:	430b      	orrs	r3, r1
    43c4:	495c      	ldr	r1, [pc, #368]	; (4538 <__aeabi_dmul+0x1e0>)
    43c6:	00e4      	lsls	r4, r4, #3
    43c8:	468c      	mov	ip, r1
    43ca:	431c      	orrs	r4, r3
    43cc:	00c3      	lsls	r3, r0, #3
    43ce:	2000      	movs	r0, #0
    43d0:	4462      	add	r2, ip
    43d2:	4641      	mov	r1, r8
    43d4:	18b6      	adds	r6, r6, r2
    43d6:	4069      	eors	r1, r5
    43d8:	1c72      	adds	r2, r6, #1
    43da:	9101      	str	r1, [sp, #4]
    43dc:	4694      	mov	ip, r2
    43de:	4307      	orrs	r7, r0
    43e0:	2f0f      	cmp	r7, #15
    43e2:	d900      	bls.n	43e6 <__aeabi_dmul+0x8e>
    43e4:	e0b0      	b.n	4548 <__aeabi_dmul+0x1f0>
    43e6:	4a55      	ldr	r2, [pc, #340]	; (453c <__aeabi_dmul+0x1e4>)
    43e8:	00bf      	lsls	r7, r7, #2
    43ea:	59d2      	ldr	r2, [r2, r7]
    43ec:	4697      	mov	pc, r2
    43ee:	465b      	mov	r3, fp
    43f0:	4303      	orrs	r3, r0
    43f2:	4699      	mov	r9, r3
    43f4:	d000      	beq.n	43f8 <__aeabi_dmul+0xa0>
    43f6:	e087      	b.n	4508 <__aeabi_dmul+0x1b0>
    43f8:	2300      	movs	r3, #0
    43fa:	469b      	mov	fp, r3
    43fc:	3302      	adds	r3, #2
    43fe:	2708      	movs	r7, #8
    4400:	9302      	str	r3, [sp, #8]
    4402:	e7ce      	b.n	43a2 <__aeabi_dmul+0x4a>
    4404:	4642      	mov	r2, r8
    4406:	9201      	str	r2, [sp, #4]
    4408:	2802      	cmp	r0, #2
    440a:	d067      	beq.n	44dc <__aeabi_dmul+0x184>
    440c:	2803      	cmp	r0, #3
    440e:	d100      	bne.n	4412 <__aeabi_dmul+0xba>
    4410:	e20e      	b.n	4830 <__aeabi_dmul+0x4d8>
    4412:	2801      	cmp	r0, #1
    4414:	d000      	beq.n	4418 <__aeabi_dmul+0xc0>
    4416:	e162      	b.n	46de <__aeabi_dmul+0x386>
    4418:	2300      	movs	r3, #0
    441a:	2400      	movs	r4, #0
    441c:	2200      	movs	r2, #0
    441e:	4699      	mov	r9, r3
    4420:	9901      	ldr	r1, [sp, #4]
    4422:	4001      	ands	r1, r0
    4424:	b2cd      	uxtb	r5, r1
    4426:	2100      	movs	r1, #0
    4428:	0312      	lsls	r2, r2, #12
    442a:	0d0b      	lsrs	r3, r1, #20
    442c:	0b12      	lsrs	r2, r2, #12
    442e:	051b      	lsls	r3, r3, #20
    4430:	4313      	orrs	r3, r2
    4432:	4a43      	ldr	r2, [pc, #268]	; (4540 <__aeabi_dmul+0x1e8>)
    4434:	0524      	lsls	r4, r4, #20
    4436:	4013      	ands	r3, r2
    4438:	431c      	orrs	r4, r3
    443a:	0064      	lsls	r4, r4, #1
    443c:	07ed      	lsls	r5, r5, #31
    443e:	0864      	lsrs	r4, r4, #1
    4440:	432c      	orrs	r4, r5
    4442:	4648      	mov	r0, r9
    4444:	0021      	movs	r1, r4
    4446:	b007      	add	sp, #28
    4448:	bc3c      	pop	{r2, r3, r4, r5}
    444a:	4690      	mov	r8, r2
    444c:	4699      	mov	r9, r3
    444e:	46a2      	mov	sl, r4
    4450:	46ab      	mov	fp, r5
    4452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4454:	4303      	orrs	r3, r0
    4456:	4699      	mov	r9, r3
    4458:	d04f      	beq.n	44fa <__aeabi_dmul+0x1a2>
    445a:	465b      	mov	r3, fp
    445c:	2b00      	cmp	r3, #0
    445e:	d100      	bne.n	4462 <__aeabi_dmul+0x10a>
    4460:	e189      	b.n	4776 <__aeabi_dmul+0x41e>
    4462:	4658      	mov	r0, fp
    4464:	f000 fd7a 	bl	4f5c <__clzsi2>
    4468:	0003      	movs	r3, r0
    446a:	3b0b      	subs	r3, #11
    446c:	2b1c      	cmp	r3, #28
    446e:	dd00      	ble.n	4472 <__aeabi_dmul+0x11a>
    4470:	e17a      	b.n	4768 <__aeabi_dmul+0x410>
    4472:	221d      	movs	r2, #29
    4474:	1ad3      	subs	r3, r2, r3
    4476:	003a      	movs	r2, r7
    4478:	0001      	movs	r1, r0
    447a:	465c      	mov	r4, fp
    447c:	40da      	lsrs	r2, r3
    447e:	3908      	subs	r1, #8
    4480:	408c      	lsls	r4, r1
    4482:	0013      	movs	r3, r2
    4484:	408f      	lsls	r7, r1
    4486:	4323      	orrs	r3, r4
    4488:	469b      	mov	fp, r3
    448a:	46b9      	mov	r9, r7
    448c:	2300      	movs	r3, #0
    448e:	4e2d      	ldr	r6, [pc, #180]	; (4544 <__aeabi_dmul+0x1ec>)
    4490:	2700      	movs	r7, #0
    4492:	1a36      	subs	r6, r6, r0
    4494:	9302      	str	r3, [sp, #8]
    4496:	e784      	b.n	43a2 <__aeabi_dmul+0x4a>
    4498:	4653      	mov	r3, sl
    449a:	4323      	orrs	r3, r4
    449c:	d12a      	bne.n	44f4 <__aeabi_dmul+0x19c>
    449e:	2400      	movs	r4, #0
    44a0:	2002      	movs	r0, #2
    44a2:	e796      	b.n	43d2 <__aeabi_dmul+0x7a>
    44a4:	4653      	mov	r3, sl
    44a6:	4323      	orrs	r3, r4
    44a8:	d020      	beq.n	44ec <__aeabi_dmul+0x194>
    44aa:	2c00      	cmp	r4, #0
    44ac:	d100      	bne.n	44b0 <__aeabi_dmul+0x158>
    44ae:	e157      	b.n	4760 <__aeabi_dmul+0x408>
    44b0:	0020      	movs	r0, r4
    44b2:	f000 fd53 	bl	4f5c <__clzsi2>
    44b6:	0003      	movs	r3, r0
    44b8:	3b0b      	subs	r3, #11
    44ba:	2b1c      	cmp	r3, #28
    44bc:	dd00      	ble.n	44c0 <__aeabi_dmul+0x168>
    44be:	e149      	b.n	4754 <__aeabi_dmul+0x3fc>
    44c0:	211d      	movs	r1, #29
    44c2:	1acb      	subs	r3, r1, r3
    44c4:	4651      	mov	r1, sl
    44c6:	0002      	movs	r2, r0
    44c8:	40d9      	lsrs	r1, r3
    44ca:	4653      	mov	r3, sl
    44cc:	3a08      	subs	r2, #8
    44ce:	4094      	lsls	r4, r2
    44d0:	4093      	lsls	r3, r2
    44d2:	430c      	orrs	r4, r1
    44d4:	4a1b      	ldr	r2, [pc, #108]	; (4544 <__aeabi_dmul+0x1ec>)
    44d6:	1a12      	subs	r2, r2, r0
    44d8:	2000      	movs	r0, #0
    44da:	e77a      	b.n	43d2 <__aeabi_dmul+0x7a>
    44dc:	2501      	movs	r5, #1
    44de:	9b01      	ldr	r3, [sp, #4]
    44e0:	4c14      	ldr	r4, [pc, #80]	; (4534 <__aeabi_dmul+0x1dc>)
    44e2:	401d      	ands	r5, r3
    44e4:	2300      	movs	r3, #0
    44e6:	2200      	movs	r2, #0
    44e8:	4699      	mov	r9, r3
    44ea:	e79c      	b.n	4426 <__aeabi_dmul+0xce>
    44ec:	2400      	movs	r4, #0
    44ee:	2200      	movs	r2, #0
    44f0:	2001      	movs	r0, #1
    44f2:	e76e      	b.n	43d2 <__aeabi_dmul+0x7a>
    44f4:	4653      	mov	r3, sl
    44f6:	2003      	movs	r0, #3
    44f8:	e76b      	b.n	43d2 <__aeabi_dmul+0x7a>
    44fa:	2300      	movs	r3, #0
    44fc:	469b      	mov	fp, r3
    44fe:	3301      	adds	r3, #1
    4500:	2704      	movs	r7, #4
    4502:	2600      	movs	r6, #0
    4504:	9302      	str	r3, [sp, #8]
    4506:	e74c      	b.n	43a2 <__aeabi_dmul+0x4a>
    4508:	2303      	movs	r3, #3
    450a:	4681      	mov	r9, r0
    450c:	270c      	movs	r7, #12
    450e:	9302      	str	r3, [sp, #8]
    4510:	e747      	b.n	43a2 <__aeabi_dmul+0x4a>
    4512:	2280      	movs	r2, #128	; 0x80
    4514:	2300      	movs	r3, #0
    4516:	2500      	movs	r5, #0
    4518:	0312      	lsls	r2, r2, #12
    451a:	4699      	mov	r9, r3
    451c:	4c05      	ldr	r4, [pc, #20]	; (4534 <__aeabi_dmul+0x1dc>)
    451e:	e782      	b.n	4426 <__aeabi_dmul+0xce>
    4520:	465c      	mov	r4, fp
    4522:	464b      	mov	r3, r9
    4524:	9802      	ldr	r0, [sp, #8]
    4526:	e76f      	b.n	4408 <__aeabi_dmul+0xb0>
    4528:	465c      	mov	r4, fp
    452a:	464b      	mov	r3, r9
    452c:	9501      	str	r5, [sp, #4]
    452e:	9802      	ldr	r0, [sp, #8]
    4530:	e76a      	b.n	4408 <__aeabi_dmul+0xb0>
    4532:	46c0      	nop			; (mov r8, r8)
    4534:	000007ff 	.word	0x000007ff
    4538:	fffffc01 	.word	0xfffffc01
    453c:	00005324 	.word	0x00005324
    4540:	800fffff 	.word	0x800fffff
    4544:	fffffc0d 	.word	0xfffffc0d
    4548:	464a      	mov	r2, r9
    454a:	4649      	mov	r1, r9
    454c:	0c17      	lsrs	r7, r2, #16
    454e:	0c1a      	lsrs	r2, r3, #16
    4550:	041b      	lsls	r3, r3, #16
    4552:	0c1b      	lsrs	r3, r3, #16
    4554:	0408      	lsls	r0, r1, #16
    4556:	0019      	movs	r1, r3
    4558:	0c00      	lsrs	r0, r0, #16
    455a:	4341      	muls	r1, r0
    455c:	0015      	movs	r5, r2
    455e:	4688      	mov	r8, r1
    4560:	0019      	movs	r1, r3
    4562:	437d      	muls	r5, r7
    4564:	4379      	muls	r1, r7
    4566:	9503      	str	r5, [sp, #12]
    4568:	4689      	mov	r9, r1
    456a:	0029      	movs	r1, r5
    456c:	0015      	movs	r5, r2
    456e:	4345      	muls	r5, r0
    4570:	444d      	add	r5, r9
    4572:	9502      	str	r5, [sp, #8]
    4574:	4645      	mov	r5, r8
    4576:	0c2d      	lsrs	r5, r5, #16
    4578:	46aa      	mov	sl, r5
    457a:	9d02      	ldr	r5, [sp, #8]
    457c:	4455      	add	r5, sl
    457e:	45a9      	cmp	r9, r5
    4580:	d906      	bls.n	4590 <__aeabi_dmul+0x238>
    4582:	468a      	mov	sl, r1
    4584:	2180      	movs	r1, #128	; 0x80
    4586:	0249      	lsls	r1, r1, #9
    4588:	4689      	mov	r9, r1
    458a:	44ca      	add	sl, r9
    458c:	4651      	mov	r1, sl
    458e:	9103      	str	r1, [sp, #12]
    4590:	0c29      	lsrs	r1, r5, #16
    4592:	9104      	str	r1, [sp, #16]
    4594:	4641      	mov	r1, r8
    4596:	0409      	lsls	r1, r1, #16
    4598:	042d      	lsls	r5, r5, #16
    459a:	0c09      	lsrs	r1, r1, #16
    459c:	4688      	mov	r8, r1
    459e:	0029      	movs	r1, r5
    45a0:	0c25      	lsrs	r5, r4, #16
    45a2:	0424      	lsls	r4, r4, #16
    45a4:	4441      	add	r1, r8
    45a6:	0c24      	lsrs	r4, r4, #16
    45a8:	9105      	str	r1, [sp, #20]
    45aa:	0021      	movs	r1, r4
    45ac:	4341      	muls	r1, r0
    45ae:	4688      	mov	r8, r1
    45b0:	0021      	movs	r1, r4
    45b2:	4379      	muls	r1, r7
    45b4:	468a      	mov	sl, r1
    45b6:	4368      	muls	r0, r5
    45b8:	4641      	mov	r1, r8
    45ba:	4450      	add	r0, sl
    45bc:	4681      	mov	r9, r0
    45be:	0c08      	lsrs	r0, r1, #16
    45c0:	4448      	add	r0, r9
    45c2:	436f      	muls	r7, r5
    45c4:	4582      	cmp	sl, r0
    45c6:	d903      	bls.n	45d0 <__aeabi_dmul+0x278>
    45c8:	2180      	movs	r1, #128	; 0x80
    45ca:	0249      	lsls	r1, r1, #9
    45cc:	4689      	mov	r9, r1
    45ce:	444f      	add	r7, r9
    45d0:	0c01      	lsrs	r1, r0, #16
    45d2:	4689      	mov	r9, r1
    45d4:	0039      	movs	r1, r7
    45d6:	4449      	add	r1, r9
    45d8:	9102      	str	r1, [sp, #8]
    45da:	4641      	mov	r1, r8
    45dc:	040f      	lsls	r7, r1, #16
    45de:	9904      	ldr	r1, [sp, #16]
    45e0:	0c3f      	lsrs	r7, r7, #16
    45e2:	4688      	mov	r8, r1
    45e4:	0400      	lsls	r0, r0, #16
    45e6:	19c0      	adds	r0, r0, r7
    45e8:	4480      	add	r8, r0
    45ea:	4641      	mov	r1, r8
    45ec:	9104      	str	r1, [sp, #16]
    45ee:	4659      	mov	r1, fp
    45f0:	0c0f      	lsrs	r7, r1, #16
    45f2:	0409      	lsls	r1, r1, #16
    45f4:	0c09      	lsrs	r1, r1, #16
    45f6:	4688      	mov	r8, r1
    45f8:	4359      	muls	r1, r3
    45fa:	468a      	mov	sl, r1
    45fc:	0039      	movs	r1, r7
    45fe:	4351      	muls	r1, r2
    4600:	4689      	mov	r9, r1
    4602:	4641      	mov	r1, r8
    4604:	434a      	muls	r2, r1
    4606:	4651      	mov	r1, sl
    4608:	0c09      	lsrs	r1, r1, #16
    460a:	468b      	mov	fp, r1
    460c:	437b      	muls	r3, r7
    460e:	18d2      	adds	r2, r2, r3
    4610:	445a      	add	r2, fp
    4612:	4293      	cmp	r3, r2
    4614:	d903      	bls.n	461e <__aeabi_dmul+0x2c6>
    4616:	2380      	movs	r3, #128	; 0x80
    4618:	025b      	lsls	r3, r3, #9
    461a:	469b      	mov	fp, r3
    461c:	44d9      	add	r9, fp
    461e:	4651      	mov	r1, sl
    4620:	0409      	lsls	r1, r1, #16
    4622:	0c09      	lsrs	r1, r1, #16
    4624:	468a      	mov	sl, r1
    4626:	4641      	mov	r1, r8
    4628:	4361      	muls	r1, r4
    462a:	437c      	muls	r4, r7
    462c:	0c13      	lsrs	r3, r2, #16
    462e:	0412      	lsls	r2, r2, #16
    4630:	444b      	add	r3, r9
    4632:	4452      	add	r2, sl
    4634:	46a1      	mov	r9, r4
    4636:	468a      	mov	sl, r1
    4638:	003c      	movs	r4, r7
    463a:	4641      	mov	r1, r8
    463c:	436c      	muls	r4, r5
    463e:	434d      	muls	r5, r1
    4640:	4651      	mov	r1, sl
    4642:	444d      	add	r5, r9
    4644:	0c0f      	lsrs	r7, r1, #16
    4646:	197d      	adds	r5, r7, r5
    4648:	45a9      	cmp	r9, r5
    464a:	d903      	bls.n	4654 <__aeabi_dmul+0x2fc>
    464c:	2180      	movs	r1, #128	; 0x80
    464e:	0249      	lsls	r1, r1, #9
    4650:	4688      	mov	r8, r1
    4652:	4444      	add	r4, r8
    4654:	9f04      	ldr	r7, [sp, #16]
    4656:	9903      	ldr	r1, [sp, #12]
    4658:	46b8      	mov	r8, r7
    465a:	4441      	add	r1, r8
    465c:	468b      	mov	fp, r1
    465e:	4583      	cmp	fp, r0
    4660:	4180      	sbcs	r0, r0
    4662:	4241      	negs	r1, r0
    4664:	4688      	mov	r8, r1
    4666:	4651      	mov	r1, sl
    4668:	0408      	lsls	r0, r1, #16
    466a:	042f      	lsls	r7, r5, #16
    466c:	0c00      	lsrs	r0, r0, #16
    466e:	183f      	adds	r7, r7, r0
    4670:	4658      	mov	r0, fp
    4672:	9902      	ldr	r1, [sp, #8]
    4674:	1810      	adds	r0, r2, r0
    4676:	4689      	mov	r9, r1
    4678:	4290      	cmp	r0, r2
    467a:	4192      	sbcs	r2, r2
    467c:	444f      	add	r7, r9
    467e:	46ba      	mov	sl, r7
    4680:	4252      	negs	r2, r2
    4682:	4699      	mov	r9, r3
    4684:	4693      	mov	fp, r2
    4686:	44c2      	add	sl, r8
    4688:	44d1      	add	r9, sl
    468a:	44cb      	add	fp, r9
    468c:	428f      	cmp	r7, r1
    468e:	41bf      	sbcs	r7, r7
    4690:	45c2      	cmp	sl, r8
    4692:	4189      	sbcs	r1, r1
    4694:	4599      	cmp	r9, r3
    4696:	419b      	sbcs	r3, r3
    4698:	4593      	cmp	fp, r2
    469a:	4192      	sbcs	r2, r2
    469c:	427f      	negs	r7, r7
    469e:	4249      	negs	r1, r1
    46a0:	0c2d      	lsrs	r5, r5, #16
    46a2:	4252      	negs	r2, r2
    46a4:	430f      	orrs	r7, r1
    46a6:	425b      	negs	r3, r3
    46a8:	4313      	orrs	r3, r2
    46aa:	197f      	adds	r7, r7, r5
    46ac:	18ff      	adds	r7, r7, r3
    46ae:	465b      	mov	r3, fp
    46b0:	193c      	adds	r4, r7, r4
    46b2:	0ddb      	lsrs	r3, r3, #23
    46b4:	9a05      	ldr	r2, [sp, #20]
    46b6:	0264      	lsls	r4, r4, #9
    46b8:	431c      	orrs	r4, r3
    46ba:	0243      	lsls	r3, r0, #9
    46bc:	4313      	orrs	r3, r2
    46be:	1e5d      	subs	r5, r3, #1
    46c0:	41ab      	sbcs	r3, r5
    46c2:	465a      	mov	r2, fp
    46c4:	0dc0      	lsrs	r0, r0, #23
    46c6:	4303      	orrs	r3, r0
    46c8:	0252      	lsls	r2, r2, #9
    46ca:	4313      	orrs	r3, r2
    46cc:	01e2      	lsls	r2, r4, #7
    46ce:	d556      	bpl.n	477e <__aeabi_dmul+0x426>
    46d0:	2001      	movs	r0, #1
    46d2:	085a      	lsrs	r2, r3, #1
    46d4:	4003      	ands	r3, r0
    46d6:	4313      	orrs	r3, r2
    46d8:	07e2      	lsls	r2, r4, #31
    46da:	4313      	orrs	r3, r2
    46dc:	0864      	lsrs	r4, r4, #1
    46de:	485a      	ldr	r0, [pc, #360]	; (4848 <__aeabi_dmul+0x4f0>)
    46e0:	4460      	add	r0, ip
    46e2:	2800      	cmp	r0, #0
    46e4:	dd4d      	ble.n	4782 <__aeabi_dmul+0x42a>
    46e6:	075a      	lsls	r2, r3, #29
    46e8:	d009      	beq.n	46fe <__aeabi_dmul+0x3a6>
    46ea:	220f      	movs	r2, #15
    46ec:	401a      	ands	r2, r3
    46ee:	2a04      	cmp	r2, #4
    46f0:	d005      	beq.n	46fe <__aeabi_dmul+0x3a6>
    46f2:	1d1a      	adds	r2, r3, #4
    46f4:	429a      	cmp	r2, r3
    46f6:	419b      	sbcs	r3, r3
    46f8:	425b      	negs	r3, r3
    46fa:	18e4      	adds	r4, r4, r3
    46fc:	0013      	movs	r3, r2
    46fe:	01e2      	lsls	r2, r4, #7
    4700:	d504      	bpl.n	470c <__aeabi_dmul+0x3b4>
    4702:	2080      	movs	r0, #128	; 0x80
    4704:	4a51      	ldr	r2, [pc, #324]	; (484c <__aeabi_dmul+0x4f4>)
    4706:	00c0      	lsls	r0, r0, #3
    4708:	4014      	ands	r4, r2
    470a:	4460      	add	r0, ip
    470c:	4a50      	ldr	r2, [pc, #320]	; (4850 <__aeabi_dmul+0x4f8>)
    470e:	4290      	cmp	r0, r2
    4710:	dd00      	ble.n	4714 <__aeabi_dmul+0x3bc>
    4712:	e6e3      	b.n	44dc <__aeabi_dmul+0x184>
    4714:	2501      	movs	r5, #1
    4716:	08db      	lsrs	r3, r3, #3
    4718:	0762      	lsls	r2, r4, #29
    471a:	431a      	orrs	r2, r3
    471c:	0264      	lsls	r4, r4, #9
    471e:	9b01      	ldr	r3, [sp, #4]
    4720:	4691      	mov	r9, r2
    4722:	0b22      	lsrs	r2, r4, #12
    4724:	0544      	lsls	r4, r0, #21
    4726:	0d64      	lsrs	r4, r4, #21
    4728:	401d      	ands	r5, r3
    472a:	e67c      	b.n	4426 <__aeabi_dmul+0xce>
    472c:	2280      	movs	r2, #128	; 0x80
    472e:	4659      	mov	r1, fp
    4730:	0312      	lsls	r2, r2, #12
    4732:	4211      	tst	r1, r2
    4734:	d008      	beq.n	4748 <__aeabi_dmul+0x3f0>
    4736:	4214      	tst	r4, r2
    4738:	d106      	bne.n	4748 <__aeabi_dmul+0x3f0>
    473a:	4322      	orrs	r2, r4
    473c:	0312      	lsls	r2, r2, #12
    473e:	0b12      	lsrs	r2, r2, #12
    4740:	4645      	mov	r5, r8
    4742:	4699      	mov	r9, r3
    4744:	4c43      	ldr	r4, [pc, #268]	; (4854 <__aeabi_dmul+0x4fc>)
    4746:	e66e      	b.n	4426 <__aeabi_dmul+0xce>
    4748:	465b      	mov	r3, fp
    474a:	431a      	orrs	r2, r3
    474c:	0312      	lsls	r2, r2, #12
    474e:	0b12      	lsrs	r2, r2, #12
    4750:	4c40      	ldr	r4, [pc, #256]	; (4854 <__aeabi_dmul+0x4fc>)
    4752:	e668      	b.n	4426 <__aeabi_dmul+0xce>
    4754:	0003      	movs	r3, r0
    4756:	4654      	mov	r4, sl
    4758:	3b28      	subs	r3, #40	; 0x28
    475a:	409c      	lsls	r4, r3
    475c:	2300      	movs	r3, #0
    475e:	e6b9      	b.n	44d4 <__aeabi_dmul+0x17c>
    4760:	f000 fbfc 	bl	4f5c <__clzsi2>
    4764:	3020      	adds	r0, #32
    4766:	e6a6      	b.n	44b6 <__aeabi_dmul+0x15e>
    4768:	0003      	movs	r3, r0
    476a:	3b28      	subs	r3, #40	; 0x28
    476c:	409f      	lsls	r7, r3
    476e:	2300      	movs	r3, #0
    4770:	46bb      	mov	fp, r7
    4772:	4699      	mov	r9, r3
    4774:	e68a      	b.n	448c <__aeabi_dmul+0x134>
    4776:	f000 fbf1 	bl	4f5c <__clzsi2>
    477a:	3020      	adds	r0, #32
    477c:	e674      	b.n	4468 <__aeabi_dmul+0x110>
    477e:	46b4      	mov	ip, r6
    4780:	e7ad      	b.n	46de <__aeabi_dmul+0x386>
    4782:	2501      	movs	r5, #1
    4784:	1a2a      	subs	r2, r5, r0
    4786:	2a38      	cmp	r2, #56	; 0x38
    4788:	dd06      	ble.n	4798 <__aeabi_dmul+0x440>
    478a:	9b01      	ldr	r3, [sp, #4]
    478c:	2400      	movs	r4, #0
    478e:	401d      	ands	r5, r3
    4790:	2300      	movs	r3, #0
    4792:	2200      	movs	r2, #0
    4794:	4699      	mov	r9, r3
    4796:	e646      	b.n	4426 <__aeabi_dmul+0xce>
    4798:	2a1f      	cmp	r2, #31
    479a:	dc21      	bgt.n	47e0 <__aeabi_dmul+0x488>
    479c:	2520      	movs	r5, #32
    479e:	0020      	movs	r0, r4
    47a0:	1aad      	subs	r5, r5, r2
    47a2:	001e      	movs	r6, r3
    47a4:	40ab      	lsls	r3, r5
    47a6:	40a8      	lsls	r0, r5
    47a8:	40d6      	lsrs	r6, r2
    47aa:	1e5d      	subs	r5, r3, #1
    47ac:	41ab      	sbcs	r3, r5
    47ae:	4330      	orrs	r0, r6
    47b0:	4318      	orrs	r0, r3
    47b2:	40d4      	lsrs	r4, r2
    47b4:	0743      	lsls	r3, r0, #29
    47b6:	d009      	beq.n	47cc <__aeabi_dmul+0x474>
    47b8:	230f      	movs	r3, #15
    47ba:	4003      	ands	r3, r0
    47bc:	2b04      	cmp	r3, #4
    47be:	d005      	beq.n	47cc <__aeabi_dmul+0x474>
    47c0:	0003      	movs	r3, r0
    47c2:	1d18      	adds	r0, r3, #4
    47c4:	4298      	cmp	r0, r3
    47c6:	419b      	sbcs	r3, r3
    47c8:	425b      	negs	r3, r3
    47ca:	18e4      	adds	r4, r4, r3
    47cc:	0223      	lsls	r3, r4, #8
    47ce:	d521      	bpl.n	4814 <__aeabi_dmul+0x4bc>
    47d0:	2501      	movs	r5, #1
    47d2:	9b01      	ldr	r3, [sp, #4]
    47d4:	2401      	movs	r4, #1
    47d6:	401d      	ands	r5, r3
    47d8:	2300      	movs	r3, #0
    47da:	2200      	movs	r2, #0
    47dc:	4699      	mov	r9, r3
    47de:	e622      	b.n	4426 <__aeabi_dmul+0xce>
    47e0:	251f      	movs	r5, #31
    47e2:	0021      	movs	r1, r4
    47e4:	426d      	negs	r5, r5
    47e6:	1a28      	subs	r0, r5, r0
    47e8:	40c1      	lsrs	r1, r0
    47ea:	0008      	movs	r0, r1
    47ec:	2a20      	cmp	r2, #32
    47ee:	d01d      	beq.n	482c <__aeabi_dmul+0x4d4>
    47f0:	355f      	adds	r5, #95	; 0x5f
    47f2:	1aaa      	subs	r2, r5, r2
    47f4:	4094      	lsls	r4, r2
    47f6:	4323      	orrs	r3, r4
    47f8:	1e5c      	subs	r4, r3, #1
    47fa:	41a3      	sbcs	r3, r4
    47fc:	2507      	movs	r5, #7
    47fe:	4303      	orrs	r3, r0
    4800:	401d      	ands	r5, r3
    4802:	2200      	movs	r2, #0
    4804:	2d00      	cmp	r5, #0
    4806:	d009      	beq.n	481c <__aeabi_dmul+0x4c4>
    4808:	220f      	movs	r2, #15
    480a:	2400      	movs	r4, #0
    480c:	401a      	ands	r2, r3
    480e:	0018      	movs	r0, r3
    4810:	2a04      	cmp	r2, #4
    4812:	d1d6      	bne.n	47c2 <__aeabi_dmul+0x46a>
    4814:	0003      	movs	r3, r0
    4816:	0765      	lsls	r5, r4, #29
    4818:	0264      	lsls	r4, r4, #9
    481a:	0b22      	lsrs	r2, r4, #12
    481c:	08db      	lsrs	r3, r3, #3
    481e:	432b      	orrs	r3, r5
    4820:	2501      	movs	r5, #1
    4822:	4699      	mov	r9, r3
    4824:	9b01      	ldr	r3, [sp, #4]
    4826:	2400      	movs	r4, #0
    4828:	401d      	ands	r5, r3
    482a:	e5fc      	b.n	4426 <__aeabi_dmul+0xce>
    482c:	2400      	movs	r4, #0
    482e:	e7e2      	b.n	47f6 <__aeabi_dmul+0x49e>
    4830:	2280      	movs	r2, #128	; 0x80
    4832:	2501      	movs	r5, #1
    4834:	0312      	lsls	r2, r2, #12
    4836:	4322      	orrs	r2, r4
    4838:	9901      	ldr	r1, [sp, #4]
    483a:	0312      	lsls	r2, r2, #12
    483c:	0b12      	lsrs	r2, r2, #12
    483e:	400d      	ands	r5, r1
    4840:	4699      	mov	r9, r3
    4842:	4c04      	ldr	r4, [pc, #16]	; (4854 <__aeabi_dmul+0x4fc>)
    4844:	e5ef      	b.n	4426 <__aeabi_dmul+0xce>
    4846:	46c0      	nop			; (mov r8, r8)
    4848:	000003ff 	.word	0x000003ff
    484c:	feffffff 	.word	0xfeffffff
    4850:	000007fe 	.word	0x000007fe
    4854:	000007ff 	.word	0x000007ff

00004858 <__aeabi_dsub>:
    4858:	b5f0      	push	{r4, r5, r6, r7, lr}
    485a:	4646      	mov	r6, r8
    485c:	46d6      	mov	lr, sl
    485e:	464f      	mov	r7, r9
    4860:	030c      	lsls	r4, r1, #12
    4862:	b5c0      	push	{r6, r7, lr}
    4864:	0fcd      	lsrs	r5, r1, #31
    4866:	004e      	lsls	r6, r1, #1
    4868:	0a61      	lsrs	r1, r4, #9
    486a:	0f44      	lsrs	r4, r0, #29
    486c:	430c      	orrs	r4, r1
    486e:	00c1      	lsls	r1, r0, #3
    4870:	0058      	lsls	r0, r3, #1
    4872:	0d40      	lsrs	r0, r0, #21
    4874:	4684      	mov	ip, r0
    4876:	468a      	mov	sl, r1
    4878:	000f      	movs	r7, r1
    487a:	0319      	lsls	r1, r3, #12
    487c:	0f50      	lsrs	r0, r2, #29
    487e:	0a49      	lsrs	r1, r1, #9
    4880:	4301      	orrs	r1, r0
    4882:	48c6      	ldr	r0, [pc, #792]	; (4b9c <__aeabi_dsub+0x344>)
    4884:	0d76      	lsrs	r6, r6, #21
    4886:	46a8      	mov	r8, r5
    4888:	0fdb      	lsrs	r3, r3, #31
    488a:	00d2      	lsls	r2, r2, #3
    488c:	4584      	cmp	ip, r0
    488e:	d100      	bne.n	4892 <__aeabi_dsub+0x3a>
    4890:	e0d8      	b.n	4a44 <__aeabi_dsub+0x1ec>
    4892:	2001      	movs	r0, #1
    4894:	4043      	eors	r3, r0
    4896:	42ab      	cmp	r3, r5
    4898:	d100      	bne.n	489c <__aeabi_dsub+0x44>
    489a:	e0a6      	b.n	49ea <__aeabi_dsub+0x192>
    489c:	4660      	mov	r0, ip
    489e:	1a35      	subs	r5, r6, r0
    48a0:	2d00      	cmp	r5, #0
    48a2:	dc00      	bgt.n	48a6 <__aeabi_dsub+0x4e>
    48a4:	e105      	b.n	4ab2 <__aeabi_dsub+0x25a>
    48a6:	2800      	cmp	r0, #0
    48a8:	d110      	bne.n	48cc <__aeabi_dsub+0x74>
    48aa:	000b      	movs	r3, r1
    48ac:	4313      	orrs	r3, r2
    48ae:	d100      	bne.n	48b2 <__aeabi_dsub+0x5a>
    48b0:	e0d7      	b.n	4a62 <__aeabi_dsub+0x20a>
    48b2:	1e6b      	subs	r3, r5, #1
    48b4:	2b00      	cmp	r3, #0
    48b6:	d000      	beq.n	48ba <__aeabi_dsub+0x62>
    48b8:	e14b      	b.n	4b52 <__aeabi_dsub+0x2fa>
    48ba:	4653      	mov	r3, sl
    48bc:	1a9f      	subs	r7, r3, r2
    48be:	45ba      	cmp	sl, r7
    48c0:	4180      	sbcs	r0, r0
    48c2:	1a64      	subs	r4, r4, r1
    48c4:	4240      	negs	r0, r0
    48c6:	1a24      	subs	r4, r4, r0
    48c8:	2601      	movs	r6, #1
    48ca:	e01e      	b.n	490a <__aeabi_dsub+0xb2>
    48cc:	4bb3      	ldr	r3, [pc, #716]	; (4b9c <__aeabi_dsub+0x344>)
    48ce:	429e      	cmp	r6, r3
    48d0:	d048      	beq.n	4964 <__aeabi_dsub+0x10c>
    48d2:	2380      	movs	r3, #128	; 0x80
    48d4:	041b      	lsls	r3, r3, #16
    48d6:	4319      	orrs	r1, r3
    48d8:	2d38      	cmp	r5, #56	; 0x38
    48da:	dd00      	ble.n	48de <__aeabi_dsub+0x86>
    48dc:	e119      	b.n	4b12 <__aeabi_dsub+0x2ba>
    48de:	2d1f      	cmp	r5, #31
    48e0:	dd00      	ble.n	48e4 <__aeabi_dsub+0x8c>
    48e2:	e14c      	b.n	4b7e <__aeabi_dsub+0x326>
    48e4:	2320      	movs	r3, #32
    48e6:	000f      	movs	r7, r1
    48e8:	1b5b      	subs	r3, r3, r5
    48ea:	0010      	movs	r0, r2
    48ec:	409a      	lsls	r2, r3
    48ee:	409f      	lsls	r7, r3
    48f0:	40e8      	lsrs	r0, r5
    48f2:	1e53      	subs	r3, r2, #1
    48f4:	419a      	sbcs	r2, r3
    48f6:	40e9      	lsrs	r1, r5
    48f8:	4307      	orrs	r7, r0
    48fa:	4317      	orrs	r7, r2
    48fc:	4653      	mov	r3, sl
    48fe:	1bdf      	subs	r7, r3, r7
    4900:	1a61      	subs	r1, r4, r1
    4902:	45ba      	cmp	sl, r7
    4904:	41a4      	sbcs	r4, r4
    4906:	4264      	negs	r4, r4
    4908:	1b0c      	subs	r4, r1, r4
    490a:	0223      	lsls	r3, r4, #8
    490c:	d400      	bmi.n	4910 <__aeabi_dsub+0xb8>
    490e:	e0c5      	b.n	4a9c <__aeabi_dsub+0x244>
    4910:	0264      	lsls	r4, r4, #9
    4912:	0a65      	lsrs	r5, r4, #9
    4914:	2d00      	cmp	r5, #0
    4916:	d100      	bne.n	491a <__aeabi_dsub+0xc2>
    4918:	e0f6      	b.n	4b08 <__aeabi_dsub+0x2b0>
    491a:	0028      	movs	r0, r5
    491c:	f000 fb1e 	bl	4f5c <__clzsi2>
    4920:	0003      	movs	r3, r0
    4922:	3b08      	subs	r3, #8
    4924:	2b1f      	cmp	r3, #31
    4926:	dd00      	ble.n	492a <__aeabi_dsub+0xd2>
    4928:	e0e9      	b.n	4afe <__aeabi_dsub+0x2a6>
    492a:	2220      	movs	r2, #32
    492c:	003c      	movs	r4, r7
    492e:	1ad2      	subs	r2, r2, r3
    4930:	409d      	lsls	r5, r3
    4932:	40d4      	lsrs	r4, r2
    4934:	409f      	lsls	r7, r3
    4936:	4325      	orrs	r5, r4
    4938:	429e      	cmp	r6, r3
    493a:	dd00      	ble.n	493e <__aeabi_dsub+0xe6>
    493c:	e0db      	b.n	4af6 <__aeabi_dsub+0x29e>
    493e:	1b9e      	subs	r6, r3, r6
    4940:	1c73      	adds	r3, r6, #1
    4942:	2b1f      	cmp	r3, #31
    4944:	dd00      	ble.n	4948 <__aeabi_dsub+0xf0>
    4946:	e10a      	b.n	4b5e <__aeabi_dsub+0x306>
    4948:	2220      	movs	r2, #32
    494a:	0038      	movs	r0, r7
    494c:	1ad2      	subs	r2, r2, r3
    494e:	0029      	movs	r1, r5
    4950:	4097      	lsls	r7, r2
    4952:	002c      	movs	r4, r5
    4954:	4091      	lsls	r1, r2
    4956:	40d8      	lsrs	r0, r3
    4958:	1e7a      	subs	r2, r7, #1
    495a:	4197      	sbcs	r7, r2
    495c:	40dc      	lsrs	r4, r3
    495e:	2600      	movs	r6, #0
    4960:	4301      	orrs	r1, r0
    4962:	430f      	orrs	r7, r1
    4964:	077b      	lsls	r3, r7, #29
    4966:	d009      	beq.n	497c <__aeabi_dsub+0x124>
    4968:	230f      	movs	r3, #15
    496a:	403b      	ands	r3, r7
    496c:	2b04      	cmp	r3, #4
    496e:	d005      	beq.n	497c <__aeabi_dsub+0x124>
    4970:	1d3b      	adds	r3, r7, #4
    4972:	42bb      	cmp	r3, r7
    4974:	41bf      	sbcs	r7, r7
    4976:	427f      	negs	r7, r7
    4978:	19e4      	adds	r4, r4, r7
    497a:	001f      	movs	r7, r3
    497c:	0223      	lsls	r3, r4, #8
    497e:	d525      	bpl.n	49cc <__aeabi_dsub+0x174>
    4980:	4b86      	ldr	r3, [pc, #536]	; (4b9c <__aeabi_dsub+0x344>)
    4982:	3601      	adds	r6, #1
    4984:	429e      	cmp	r6, r3
    4986:	d100      	bne.n	498a <__aeabi_dsub+0x132>
    4988:	e0af      	b.n	4aea <__aeabi_dsub+0x292>
    498a:	4b85      	ldr	r3, [pc, #532]	; (4ba0 <__aeabi_dsub+0x348>)
    498c:	2501      	movs	r5, #1
    498e:	401c      	ands	r4, r3
    4990:	4643      	mov	r3, r8
    4992:	0762      	lsls	r2, r4, #29
    4994:	08ff      	lsrs	r7, r7, #3
    4996:	0264      	lsls	r4, r4, #9
    4998:	0576      	lsls	r6, r6, #21
    499a:	4317      	orrs	r7, r2
    499c:	0b24      	lsrs	r4, r4, #12
    499e:	0d76      	lsrs	r6, r6, #21
    49a0:	401d      	ands	r5, r3
    49a2:	2100      	movs	r1, #0
    49a4:	0324      	lsls	r4, r4, #12
    49a6:	0b23      	lsrs	r3, r4, #12
    49a8:	0d0c      	lsrs	r4, r1, #20
    49aa:	4a7e      	ldr	r2, [pc, #504]	; (4ba4 <__aeabi_dsub+0x34c>)
    49ac:	0524      	lsls	r4, r4, #20
    49ae:	431c      	orrs	r4, r3
    49b0:	4014      	ands	r4, r2
    49b2:	0533      	lsls	r3, r6, #20
    49b4:	4323      	orrs	r3, r4
    49b6:	005b      	lsls	r3, r3, #1
    49b8:	07ed      	lsls	r5, r5, #31
    49ba:	085b      	lsrs	r3, r3, #1
    49bc:	432b      	orrs	r3, r5
    49be:	0038      	movs	r0, r7
    49c0:	0019      	movs	r1, r3
    49c2:	bc1c      	pop	{r2, r3, r4}
    49c4:	4690      	mov	r8, r2
    49c6:	4699      	mov	r9, r3
    49c8:	46a2      	mov	sl, r4
    49ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49cc:	2501      	movs	r5, #1
    49ce:	4643      	mov	r3, r8
    49d0:	0762      	lsls	r2, r4, #29
    49d2:	08ff      	lsrs	r7, r7, #3
    49d4:	4317      	orrs	r7, r2
    49d6:	08e4      	lsrs	r4, r4, #3
    49d8:	401d      	ands	r5, r3
    49da:	4b70      	ldr	r3, [pc, #448]	; (4b9c <__aeabi_dsub+0x344>)
    49dc:	429e      	cmp	r6, r3
    49de:	d036      	beq.n	4a4e <__aeabi_dsub+0x1f6>
    49e0:	0324      	lsls	r4, r4, #12
    49e2:	0576      	lsls	r6, r6, #21
    49e4:	0b24      	lsrs	r4, r4, #12
    49e6:	0d76      	lsrs	r6, r6, #21
    49e8:	e7db      	b.n	49a2 <__aeabi_dsub+0x14a>
    49ea:	4663      	mov	r3, ip
    49ec:	1af3      	subs	r3, r6, r3
    49ee:	2b00      	cmp	r3, #0
    49f0:	dc00      	bgt.n	49f4 <__aeabi_dsub+0x19c>
    49f2:	e094      	b.n	4b1e <__aeabi_dsub+0x2c6>
    49f4:	4660      	mov	r0, ip
    49f6:	2800      	cmp	r0, #0
    49f8:	d035      	beq.n	4a66 <__aeabi_dsub+0x20e>
    49fa:	4868      	ldr	r0, [pc, #416]	; (4b9c <__aeabi_dsub+0x344>)
    49fc:	4286      	cmp	r6, r0
    49fe:	d0b1      	beq.n	4964 <__aeabi_dsub+0x10c>
    4a00:	2780      	movs	r7, #128	; 0x80
    4a02:	043f      	lsls	r7, r7, #16
    4a04:	4339      	orrs	r1, r7
    4a06:	2b38      	cmp	r3, #56	; 0x38
    4a08:	dc00      	bgt.n	4a0c <__aeabi_dsub+0x1b4>
    4a0a:	e0fd      	b.n	4c08 <__aeabi_dsub+0x3b0>
    4a0c:	430a      	orrs	r2, r1
    4a0e:	0017      	movs	r7, r2
    4a10:	2100      	movs	r1, #0
    4a12:	1e7a      	subs	r2, r7, #1
    4a14:	4197      	sbcs	r7, r2
    4a16:	4457      	add	r7, sl
    4a18:	4557      	cmp	r7, sl
    4a1a:	4180      	sbcs	r0, r0
    4a1c:	1909      	adds	r1, r1, r4
    4a1e:	4244      	negs	r4, r0
    4a20:	190c      	adds	r4, r1, r4
    4a22:	0223      	lsls	r3, r4, #8
    4a24:	d53a      	bpl.n	4a9c <__aeabi_dsub+0x244>
    4a26:	4b5d      	ldr	r3, [pc, #372]	; (4b9c <__aeabi_dsub+0x344>)
    4a28:	3601      	adds	r6, #1
    4a2a:	429e      	cmp	r6, r3
    4a2c:	d100      	bne.n	4a30 <__aeabi_dsub+0x1d8>
    4a2e:	e14b      	b.n	4cc8 <__aeabi_dsub+0x470>
    4a30:	2201      	movs	r2, #1
    4a32:	4b5b      	ldr	r3, [pc, #364]	; (4ba0 <__aeabi_dsub+0x348>)
    4a34:	401c      	ands	r4, r3
    4a36:	087b      	lsrs	r3, r7, #1
    4a38:	4017      	ands	r7, r2
    4a3a:	431f      	orrs	r7, r3
    4a3c:	07e2      	lsls	r2, r4, #31
    4a3e:	4317      	orrs	r7, r2
    4a40:	0864      	lsrs	r4, r4, #1
    4a42:	e78f      	b.n	4964 <__aeabi_dsub+0x10c>
    4a44:	0008      	movs	r0, r1
    4a46:	4310      	orrs	r0, r2
    4a48:	d000      	beq.n	4a4c <__aeabi_dsub+0x1f4>
    4a4a:	e724      	b.n	4896 <__aeabi_dsub+0x3e>
    4a4c:	e721      	b.n	4892 <__aeabi_dsub+0x3a>
    4a4e:	0023      	movs	r3, r4
    4a50:	433b      	orrs	r3, r7
    4a52:	d100      	bne.n	4a56 <__aeabi_dsub+0x1fe>
    4a54:	e1b9      	b.n	4dca <__aeabi_dsub+0x572>
    4a56:	2280      	movs	r2, #128	; 0x80
    4a58:	0312      	lsls	r2, r2, #12
    4a5a:	4314      	orrs	r4, r2
    4a5c:	0324      	lsls	r4, r4, #12
    4a5e:	0b24      	lsrs	r4, r4, #12
    4a60:	e79f      	b.n	49a2 <__aeabi_dsub+0x14a>
    4a62:	002e      	movs	r6, r5
    4a64:	e77e      	b.n	4964 <__aeabi_dsub+0x10c>
    4a66:	0008      	movs	r0, r1
    4a68:	4310      	orrs	r0, r2
    4a6a:	d100      	bne.n	4a6e <__aeabi_dsub+0x216>
    4a6c:	e0ca      	b.n	4c04 <__aeabi_dsub+0x3ac>
    4a6e:	1e58      	subs	r0, r3, #1
    4a70:	4684      	mov	ip, r0
    4a72:	2800      	cmp	r0, #0
    4a74:	d000      	beq.n	4a78 <__aeabi_dsub+0x220>
    4a76:	e0e7      	b.n	4c48 <__aeabi_dsub+0x3f0>
    4a78:	4452      	add	r2, sl
    4a7a:	4552      	cmp	r2, sl
    4a7c:	4180      	sbcs	r0, r0
    4a7e:	1864      	adds	r4, r4, r1
    4a80:	4240      	negs	r0, r0
    4a82:	1824      	adds	r4, r4, r0
    4a84:	0017      	movs	r7, r2
    4a86:	2601      	movs	r6, #1
    4a88:	0223      	lsls	r3, r4, #8
    4a8a:	d507      	bpl.n	4a9c <__aeabi_dsub+0x244>
    4a8c:	2602      	movs	r6, #2
    4a8e:	e7cf      	b.n	4a30 <__aeabi_dsub+0x1d8>
    4a90:	4664      	mov	r4, ip
    4a92:	432c      	orrs	r4, r5
    4a94:	d100      	bne.n	4a98 <__aeabi_dsub+0x240>
    4a96:	e1b3      	b.n	4e00 <__aeabi_dsub+0x5a8>
    4a98:	002c      	movs	r4, r5
    4a9a:	4667      	mov	r7, ip
    4a9c:	077b      	lsls	r3, r7, #29
    4a9e:	d000      	beq.n	4aa2 <__aeabi_dsub+0x24a>
    4aa0:	e762      	b.n	4968 <__aeabi_dsub+0x110>
    4aa2:	0763      	lsls	r3, r4, #29
    4aa4:	08ff      	lsrs	r7, r7, #3
    4aa6:	431f      	orrs	r7, r3
    4aa8:	2501      	movs	r5, #1
    4aaa:	4643      	mov	r3, r8
    4aac:	08e4      	lsrs	r4, r4, #3
    4aae:	401d      	ands	r5, r3
    4ab0:	e793      	b.n	49da <__aeabi_dsub+0x182>
    4ab2:	2d00      	cmp	r5, #0
    4ab4:	d178      	bne.n	4ba8 <__aeabi_dsub+0x350>
    4ab6:	1c75      	adds	r5, r6, #1
    4ab8:	056d      	lsls	r5, r5, #21
    4aba:	0d6d      	lsrs	r5, r5, #21
    4abc:	2d01      	cmp	r5, #1
    4abe:	dc00      	bgt.n	4ac2 <__aeabi_dsub+0x26a>
    4ac0:	e0f2      	b.n	4ca8 <__aeabi_dsub+0x450>
    4ac2:	4650      	mov	r0, sl
    4ac4:	1a80      	subs	r0, r0, r2
    4ac6:	4582      	cmp	sl, r0
    4ac8:	41bf      	sbcs	r7, r7
    4aca:	1a65      	subs	r5, r4, r1
    4acc:	427f      	negs	r7, r7
    4ace:	1bed      	subs	r5, r5, r7
    4ad0:	4684      	mov	ip, r0
    4ad2:	0228      	lsls	r0, r5, #8
    4ad4:	d400      	bmi.n	4ad8 <__aeabi_dsub+0x280>
    4ad6:	e08c      	b.n	4bf2 <__aeabi_dsub+0x39a>
    4ad8:	4650      	mov	r0, sl
    4ada:	1a17      	subs	r7, r2, r0
    4adc:	42ba      	cmp	r2, r7
    4ade:	4192      	sbcs	r2, r2
    4ae0:	1b0c      	subs	r4, r1, r4
    4ae2:	4255      	negs	r5, r2
    4ae4:	1b65      	subs	r5, r4, r5
    4ae6:	4698      	mov	r8, r3
    4ae8:	e714      	b.n	4914 <__aeabi_dsub+0xbc>
    4aea:	2501      	movs	r5, #1
    4aec:	4643      	mov	r3, r8
    4aee:	2400      	movs	r4, #0
    4af0:	401d      	ands	r5, r3
    4af2:	2700      	movs	r7, #0
    4af4:	e755      	b.n	49a2 <__aeabi_dsub+0x14a>
    4af6:	4c2a      	ldr	r4, [pc, #168]	; (4ba0 <__aeabi_dsub+0x348>)
    4af8:	1af6      	subs	r6, r6, r3
    4afa:	402c      	ands	r4, r5
    4afc:	e732      	b.n	4964 <__aeabi_dsub+0x10c>
    4afe:	003d      	movs	r5, r7
    4b00:	3828      	subs	r0, #40	; 0x28
    4b02:	4085      	lsls	r5, r0
    4b04:	2700      	movs	r7, #0
    4b06:	e717      	b.n	4938 <__aeabi_dsub+0xe0>
    4b08:	0038      	movs	r0, r7
    4b0a:	f000 fa27 	bl	4f5c <__clzsi2>
    4b0e:	3020      	adds	r0, #32
    4b10:	e706      	b.n	4920 <__aeabi_dsub+0xc8>
    4b12:	430a      	orrs	r2, r1
    4b14:	0017      	movs	r7, r2
    4b16:	2100      	movs	r1, #0
    4b18:	1e7a      	subs	r2, r7, #1
    4b1a:	4197      	sbcs	r7, r2
    4b1c:	e6ee      	b.n	48fc <__aeabi_dsub+0xa4>
    4b1e:	2b00      	cmp	r3, #0
    4b20:	d000      	beq.n	4b24 <__aeabi_dsub+0x2cc>
    4b22:	e0e5      	b.n	4cf0 <__aeabi_dsub+0x498>
    4b24:	1c73      	adds	r3, r6, #1
    4b26:	469c      	mov	ip, r3
    4b28:	055b      	lsls	r3, r3, #21
    4b2a:	0d5b      	lsrs	r3, r3, #21
    4b2c:	2b01      	cmp	r3, #1
    4b2e:	dc00      	bgt.n	4b32 <__aeabi_dsub+0x2da>
    4b30:	e09f      	b.n	4c72 <__aeabi_dsub+0x41a>
    4b32:	4b1a      	ldr	r3, [pc, #104]	; (4b9c <__aeabi_dsub+0x344>)
    4b34:	459c      	cmp	ip, r3
    4b36:	d100      	bne.n	4b3a <__aeabi_dsub+0x2e2>
    4b38:	e0c5      	b.n	4cc6 <__aeabi_dsub+0x46e>
    4b3a:	4452      	add	r2, sl
    4b3c:	4552      	cmp	r2, sl
    4b3e:	4180      	sbcs	r0, r0
    4b40:	1864      	adds	r4, r4, r1
    4b42:	4240      	negs	r0, r0
    4b44:	1824      	adds	r4, r4, r0
    4b46:	07e7      	lsls	r7, r4, #31
    4b48:	0852      	lsrs	r2, r2, #1
    4b4a:	4317      	orrs	r7, r2
    4b4c:	0864      	lsrs	r4, r4, #1
    4b4e:	4666      	mov	r6, ip
    4b50:	e708      	b.n	4964 <__aeabi_dsub+0x10c>
    4b52:	4812      	ldr	r0, [pc, #72]	; (4b9c <__aeabi_dsub+0x344>)
    4b54:	4285      	cmp	r5, r0
    4b56:	d100      	bne.n	4b5a <__aeabi_dsub+0x302>
    4b58:	e085      	b.n	4c66 <__aeabi_dsub+0x40e>
    4b5a:	001d      	movs	r5, r3
    4b5c:	e6bc      	b.n	48d8 <__aeabi_dsub+0x80>
    4b5e:	0029      	movs	r1, r5
    4b60:	3e1f      	subs	r6, #31
    4b62:	40f1      	lsrs	r1, r6
    4b64:	2b20      	cmp	r3, #32
    4b66:	d100      	bne.n	4b6a <__aeabi_dsub+0x312>
    4b68:	e07f      	b.n	4c6a <__aeabi_dsub+0x412>
    4b6a:	2240      	movs	r2, #64	; 0x40
    4b6c:	1ad3      	subs	r3, r2, r3
    4b6e:	409d      	lsls	r5, r3
    4b70:	432f      	orrs	r7, r5
    4b72:	1e7d      	subs	r5, r7, #1
    4b74:	41af      	sbcs	r7, r5
    4b76:	2400      	movs	r4, #0
    4b78:	430f      	orrs	r7, r1
    4b7a:	2600      	movs	r6, #0
    4b7c:	e78e      	b.n	4a9c <__aeabi_dsub+0x244>
    4b7e:	002b      	movs	r3, r5
    4b80:	000f      	movs	r7, r1
    4b82:	3b20      	subs	r3, #32
    4b84:	40df      	lsrs	r7, r3
    4b86:	2d20      	cmp	r5, #32
    4b88:	d071      	beq.n	4c6e <__aeabi_dsub+0x416>
    4b8a:	2340      	movs	r3, #64	; 0x40
    4b8c:	1b5d      	subs	r5, r3, r5
    4b8e:	40a9      	lsls	r1, r5
    4b90:	430a      	orrs	r2, r1
    4b92:	1e51      	subs	r1, r2, #1
    4b94:	418a      	sbcs	r2, r1
    4b96:	2100      	movs	r1, #0
    4b98:	4317      	orrs	r7, r2
    4b9a:	e6af      	b.n	48fc <__aeabi_dsub+0xa4>
    4b9c:	000007ff 	.word	0x000007ff
    4ba0:	ff7fffff 	.word	0xff7fffff
    4ba4:	800fffff 	.word	0x800fffff
    4ba8:	2e00      	cmp	r6, #0
    4baa:	d03e      	beq.n	4c2a <__aeabi_dsub+0x3d2>
    4bac:	4eb3      	ldr	r6, [pc, #716]	; (4e7c <__aeabi_dsub+0x624>)
    4bae:	45b4      	cmp	ip, r6
    4bb0:	d045      	beq.n	4c3e <__aeabi_dsub+0x3e6>
    4bb2:	2680      	movs	r6, #128	; 0x80
    4bb4:	0436      	lsls	r6, r6, #16
    4bb6:	426d      	negs	r5, r5
    4bb8:	4334      	orrs	r4, r6
    4bba:	2d38      	cmp	r5, #56	; 0x38
    4bbc:	dd00      	ble.n	4bc0 <__aeabi_dsub+0x368>
    4bbe:	e0a8      	b.n	4d12 <__aeabi_dsub+0x4ba>
    4bc0:	2d1f      	cmp	r5, #31
    4bc2:	dd00      	ble.n	4bc6 <__aeabi_dsub+0x36e>
    4bc4:	e11f      	b.n	4e06 <__aeabi_dsub+0x5ae>
    4bc6:	2620      	movs	r6, #32
    4bc8:	0027      	movs	r7, r4
    4bca:	4650      	mov	r0, sl
    4bcc:	1b76      	subs	r6, r6, r5
    4bce:	40b7      	lsls	r7, r6
    4bd0:	40e8      	lsrs	r0, r5
    4bd2:	4307      	orrs	r7, r0
    4bd4:	4650      	mov	r0, sl
    4bd6:	40b0      	lsls	r0, r6
    4bd8:	1e46      	subs	r6, r0, #1
    4bda:	41b0      	sbcs	r0, r6
    4bdc:	40ec      	lsrs	r4, r5
    4bde:	4338      	orrs	r0, r7
    4be0:	1a17      	subs	r7, r2, r0
    4be2:	42ba      	cmp	r2, r7
    4be4:	4192      	sbcs	r2, r2
    4be6:	1b0c      	subs	r4, r1, r4
    4be8:	4252      	negs	r2, r2
    4bea:	1aa4      	subs	r4, r4, r2
    4bec:	4666      	mov	r6, ip
    4bee:	4698      	mov	r8, r3
    4bf0:	e68b      	b.n	490a <__aeabi_dsub+0xb2>
    4bf2:	4664      	mov	r4, ip
    4bf4:	4667      	mov	r7, ip
    4bf6:	432c      	orrs	r4, r5
    4bf8:	d000      	beq.n	4bfc <__aeabi_dsub+0x3a4>
    4bfa:	e68b      	b.n	4914 <__aeabi_dsub+0xbc>
    4bfc:	2500      	movs	r5, #0
    4bfe:	2600      	movs	r6, #0
    4c00:	2700      	movs	r7, #0
    4c02:	e6ea      	b.n	49da <__aeabi_dsub+0x182>
    4c04:	001e      	movs	r6, r3
    4c06:	e6ad      	b.n	4964 <__aeabi_dsub+0x10c>
    4c08:	2b1f      	cmp	r3, #31
    4c0a:	dc60      	bgt.n	4cce <__aeabi_dsub+0x476>
    4c0c:	2720      	movs	r7, #32
    4c0e:	1af8      	subs	r0, r7, r3
    4c10:	000f      	movs	r7, r1
    4c12:	4684      	mov	ip, r0
    4c14:	4087      	lsls	r7, r0
    4c16:	0010      	movs	r0, r2
    4c18:	40d8      	lsrs	r0, r3
    4c1a:	4307      	orrs	r7, r0
    4c1c:	4660      	mov	r0, ip
    4c1e:	4082      	lsls	r2, r0
    4c20:	1e50      	subs	r0, r2, #1
    4c22:	4182      	sbcs	r2, r0
    4c24:	40d9      	lsrs	r1, r3
    4c26:	4317      	orrs	r7, r2
    4c28:	e6f5      	b.n	4a16 <__aeabi_dsub+0x1be>
    4c2a:	0026      	movs	r6, r4
    4c2c:	4650      	mov	r0, sl
    4c2e:	4306      	orrs	r6, r0
    4c30:	d005      	beq.n	4c3e <__aeabi_dsub+0x3e6>
    4c32:	43ed      	mvns	r5, r5
    4c34:	2d00      	cmp	r5, #0
    4c36:	d0d3      	beq.n	4be0 <__aeabi_dsub+0x388>
    4c38:	4e90      	ldr	r6, [pc, #576]	; (4e7c <__aeabi_dsub+0x624>)
    4c3a:	45b4      	cmp	ip, r6
    4c3c:	d1bd      	bne.n	4bba <__aeabi_dsub+0x362>
    4c3e:	000c      	movs	r4, r1
    4c40:	0017      	movs	r7, r2
    4c42:	4666      	mov	r6, ip
    4c44:	4698      	mov	r8, r3
    4c46:	e68d      	b.n	4964 <__aeabi_dsub+0x10c>
    4c48:	488c      	ldr	r0, [pc, #560]	; (4e7c <__aeabi_dsub+0x624>)
    4c4a:	4283      	cmp	r3, r0
    4c4c:	d00b      	beq.n	4c66 <__aeabi_dsub+0x40e>
    4c4e:	4663      	mov	r3, ip
    4c50:	e6d9      	b.n	4a06 <__aeabi_dsub+0x1ae>
    4c52:	2d00      	cmp	r5, #0
    4c54:	d000      	beq.n	4c58 <__aeabi_dsub+0x400>
    4c56:	e096      	b.n	4d86 <__aeabi_dsub+0x52e>
    4c58:	0008      	movs	r0, r1
    4c5a:	4310      	orrs	r0, r2
    4c5c:	d100      	bne.n	4c60 <__aeabi_dsub+0x408>
    4c5e:	e0e2      	b.n	4e26 <__aeabi_dsub+0x5ce>
    4c60:	000c      	movs	r4, r1
    4c62:	0017      	movs	r7, r2
    4c64:	4698      	mov	r8, r3
    4c66:	4e85      	ldr	r6, [pc, #532]	; (4e7c <__aeabi_dsub+0x624>)
    4c68:	e67c      	b.n	4964 <__aeabi_dsub+0x10c>
    4c6a:	2500      	movs	r5, #0
    4c6c:	e780      	b.n	4b70 <__aeabi_dsub+0x318>
    4c6e:	2100      	movs	r1, #0
    4c70:	e78e      	b.n	4b90 <__aeabi_dsub+0x338>
    4c72:	0023      	movs	r3, r4
    4c74:	4650      	mov	r0, sl
    4c76:	4303      	orrs	r3, r0
    4c78:	2e00      	cmp	r6, #0
    4c7a:	d000      	beq.n	4c7e <__aeabi_dsub+0x426>
    4c7c:	e0a8      	b.n	4dd0 <__aeabi_dsub+0x578>
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d100      	bne.n	4c84 <__aeabi_dsub+0x42c>
    4c82:	e0de      	b.n	4e42 <__aeabi_dsub+0x5ea>
    4c84:	000b      	movs	r3, r1
    4c86:	4313      	orrs	r3, r2
    4c88:	d100      	bne.n	4c8c <__aeabi_dsub+0x434>
    4c8a:	e66b      	b.n	4964 <__aeabi_dsub+0x10c>
    4c8c:	4452      	add	r2, sl
    4c8e:	4552      	cmp	r2, sl
    4c90:	4180      	sbcs	r0, r0
    4c92:	1864      	adds	r4, r4, r1
    4c94:	4240      	negs	r0, r0
    4c96:	1824      	adds	r4, r4, r0
    4c98:	0017      	movs	r7, r2
    4c9a:	0223      	lsls	r3, r4, #8
    4c9c:	d400      	bmi.n	4ca0 <__aeabi_dsub+0x448>
    4c9e:	e6fd      	b.n	4a9c <__aeabi_dsub+0x244>
    4ca0:	4b77      	ldr	r3, [pc, #476]	; (4e80 <__aeabi_dsub+0x628>)
    4ca2:	4666      	mov	r6, ip
    4ca4:	401c      	ands	r4, r3
    4ca6:	e65d      	b.n	4964 <__aeabi_dsub+0x10c>
    4ca8:	0025      	movs	r5, r4
    4caa:	4650      	mov	r0, sl
    4cac:	4305      	orrs	r5, r0
    4cae:	2e00      	cmp	r6, #0
    4cb0:	d1cf      	bne.n	4c52 <__aeabi_dsub+0x3fa>
    4cb2:	2d00      	cmp	r5, #0
    4cb4:	d14f      	bne.n	4d56 <__aeabi_dsub+0x4fe>
    4cb6:	000c      	movs	r4, r1
    4cb8:	4314      	orrs	r4, r2
    4cba:	d100      	bne.n	4cbe <__aeabi_dsub+0x466>
    4cbc:	e0a0      	b.n	4e00 <__aeabi_dsub+0x5a8>
    4cbe:	000c      	movs	r4, r1
    4cc0:	0017      	movs	r7, r2
    4cc2:	4698      	mov	r8, r3
    4cc4:	e64e      	b.n	4964 <__aeabi_dsub+0x10c>
    4cc6:	4666      	mov	r6, ip
    4cc8:	2400      	movs	r4, #0
    4cca:	2700      	movs	r7, #0
    4ccc:	e685      	b.n	49da <__aeabi_dsub+0x182>
    4cce:	001f      	movs	r7, r3
    4cd0:	0008      	movs	r0, r1
    4cd2:	3f20      	subs	r7, #32
    4cd4:	40f8      	lsrs	r0, r7
    4cd6:	0007      	movs	r7, r0
    4cd8:	2b20      	cmp	r3, #32
    4cda:	d100      	bne.n	4cde <__aeabi_dsub+0x486>
    4cdc:	e08e      	b.n	4dfc <__aeabi_dsub+0x5a4>
    4cde:	2040      	movs	r0, #64	; 0x40
    4ce0:	1ac3      	subs	r3, r0, r3
    4ce2:	4099      	lsls	r1, r3
    4ce4:	430a      	orrs	r2, r1
    4ce6:	1e51      	subs	r1, r2, #1
    4ce8:	418a      	sbcs	r2, r1
    4cea:	2100      	movs	r1, #0
    4cec:	4317      	orrs	r7, r2
    4cee:	e692      	b.n	4a16 <__aeabi_dsub+0x1be>
    4cf0:	2e00      	cmp	r6, #0
    4cf2:	d114      	bne.n	4d1e <__aeabi_dsub+0x4c6>
    4cf4:	0026      	movs	r6, r4
    4cf6:	4650      	mov	r0, sl
    4cf8:	4306      	orrs	r6, r0
    4cfa:	d062      	beq.n	4dc2 <__aeabi_dsub+0x56a>
    4cfc:	43db      	mvns	r3, r3
    4cfe:	2b00      	cmp	r3, #0
    4d00:	d15c      	bne.n	4dbc <__aeabi_dsub+0x564>
    4d02:	1887      	adds	r7, r0, r2
    4d04:	4297      	cmp	r7, r2
    4d06:	4192      	sbcs	r2, r2
    4d08:	1864      	adds	r4, r4, r1
    4d0a:	4252      	negs	r2, r2
    4d0c:	18a4      	adds	r4, r4, r2
    4d0e:	4666      	mov	r6, ip
    4d10:	e687      	b.n	4a22 <__aeabi_dsub+0x1ca>
    4d12:	4650      	mov	r0, sl
    4d14:	4320      	orrs	r0, r4
    4d16:	1e44      	subs	r4, r0, #1
    4d18:	41a0      	sbcs	r0, r4
    4d1a:	2400      	movs	r4, #0
    4d1c:	e760      	b.n	4be0 <__aeabi_dsub+0x388>
    4d1e:	4e57      	ldr	r6, [pc, #348]	; (4e7c <__aeabi_dsub+0x624>)
    4d20:	45b4      	cmp	ip, r6
    4d22:	d04e      	beq.n	4dc2 <__aeabi_dsub+0x56a>
    4d24:	2680      	movs	r6, #128	; 0x80
    4d26:	0436      	lsls	r6, r6, #16
    4d28:	425b      	negs	r3, r3
    4d2a:	4334      	orrs	r4, r6
    4d2c:	2b38      	cmp	r3, #56	; 0x38
    4d2e:	dd00      	ble.n	4d32 <__aeabi_dsub+0x4da>
    4d30:	e07f      	b.n	4e32 <__aeabi_dsub+0x5da>
    4d32:	2b1f      	cmp	r3, #31
    4d34:	dd00      	ble.n	4d38 <__aeabi_dsub+0x4e0>
    4d36:	e08b      	b.n	4e50 <__aeabi_dsub+0x5f8>
    4d38:	2620      	movs	r6, #32
    4d3a:	0027      	movs	r7, r4
    4d3c:	4650      	mov	r0, sl
    4d3e:	1af6      	subs	r6, r6, r3
    4d40:	40b7      	lsls	r7, r6
    4d42:	40d8      	lsrs	r0, r3
    4d44:	4307      	orrs	r7, r0
    4d46:	4650      	mov	r0, sl
    4d48:	40b0      	lsls	r0, r6
    4d4a:	1e46      	subs	r6, r0, #1
    4d4c:	41b0      	sbcs	r0, r6
    4d4e:	4307      	orrs	r7, r0
    4d50:	40dc      	lsrs	r4, r3
    4d52:	18bf      	adds	r7, r7, r2
    4d54:	e7d6      	b.n	4d04 <__aeabi_dsub+0x4ac>
    4d56:	000d      	movs	r5, r1
    4d58:	4315      	orrs	r5, r2
    4d5a:	d100      	bne.n	4d5e <__aeabi_dsub+0x506>
    4d5c:	e602      	b.n	4964 <__aeabi_dsub+0x10c>
    4d5e:	4650      	mov	r0, sl
    4d60:	1a80      	subs	r0, r0, r2
    4d62:	4582      	cmp	sl, r0
    4d64:	41bf      	sbcs	r7, r7
    4d66:	1a65      	subs	r5, r4, r1
    4d68:	427f      	negs	r7, r7
    4d6a:	1bed      	subs	r5, r5, r7
    4d6c:	4684      	mov	ip, r0
    4d6e:	0228      	lsls	r0, r5, #8
    4d70:	d400      	bmi.n	4d74 <__aeabi_dsub+0x51c>
    4d72:	e68d      	b.n	4a90 <__aeabi_dsub+0x238>
    4d74:	4650      	mov	r0, sl
    4d76:	1a17      	subs	r7, r2, r0
    4d78:	42ba      	cmp	r2, r7
    4d7a:	4192      	sbcs	r2, r2
    4d7c:	1b0c      	subs	r4, r1, r4
    4d7e:	4252      	negs	r2, r2
    4d80:	1aa4      	subs	r4, r4, r2
    4d82:	4698      	mov	r8, r3
    4d84:	e5ee      	b.n	4964 <__aeabi_dsub+0x10c>
    4d86:	000d      	movs	r5, r1
    4d88:	4315      	orrs	r5, r2
    4d8a:	d100      	bne.n	4d8e <__aeabi_dsub+0x536>
    4d8c:	e76b      	b.n	4c66 <__aeabi_dsub+0x40e>
    4d8e:	4650      	mov	r0, sl
    4d90:	0767      	lsls	r7, r4, #29
    4d92:	08c0      	lsrs	r0, r0, #3
    4d94:	4307      	orrs	r7, r0
    4d96:	2080      	movs	r0, #128	; 0x80
    4d98:	08e4      	lsrs	r4, r4, #3
    4d9a:	0300      	lsls	r0, r0, #12
    4d9c:	4204      	tst	r4, r0
    4d9e:	d007      	beq.n	4db0 <__aeabi_dsub+0x558>
    4da0:	08cd      	lsrs	r5, r1, #3
    4da2:	4205      	tst	r5, r0
    4da4:	d104      	bne.n	4db0 <__aeabi_dsub+0x558>
    4da6:	002c      	movs	r4, r5
    4da8:	4698      	mov	r8, r3
    4daa:	08d7      	lsrs	r7, r2, #3
    4dac:	0749      	lsls	r1, r1, #29
    4dae:	430f      	orrs	r7, r1
    4db0:	0f7b      	lsrs	r3, r7, #29
    4db2:	00e4      	lsls	r4, r4, #3
    4db4:	431c      	orrs	r4, r3
    4db6:	00ff      	lsls	r7, r7, #3
    4db8:	4e30      	ldr	r6, [pc, #192]	; (4e7c <__aeabi_dsub+0x624>)
    4dba:	e5d3      	b.n	4964 <__aeabi_dsub+0x10c>
    4dbc:	4e2f      	ldr	r6, [pc, #188]	; (4e7c <__aeabi_dsub+0x624>)
    4dbe:	45b4      	cmp	ip, r6
    4dc0:	d1b4      	bne.n	4d2c <__aeabi_dsub+0x4d4>
    4dc2:	000c      	movs	r4, r1
    4dc4:	0017      	movs	r7, r2
    4dc6:	4666      	mov	r6, ip
    4dc8:	e5cc      	b.n	4964 <__aeabi_dsub+0x10c>
    4dca:	2700      	movs	r7, #0
    4dcc:	2400      	movs	r4, #0
    4dce:	e5e8      	b.n	49a2 <__aeabi_dsub+0x14a>
    4dd0:	2b00      	cmp	r3, #0
    4dd2:	d039      	beq.n	4e48 <__aeabi_dsub+0x5f0>
    4dd4:	000b      	movs	r3, r1
    4dd6:	4313      	orrs	r3, r2
    4dd8:	d100      	bne.n	4ddc <__aeabi_dsub+0x584>
    4dda:	e744      	b.n	4c66 <__aeabi_dsub+0x40e>
    4ddc:	08c0      	lsrs	r0, r0, #3
    4dde:	0767      	lsls	r7, r4, #29
    4de0:	4307      	orrs	r7, r0
    4de2:	2080      	movs	r0, #128	; 0x80
    4de4:	08e4      	lsrs	r4, r4, #3
    4de6:	0300      	lsls	r0, r0, #12
    4de8:	4204      	tst	r4, r0
    4dea:	d0e1      	beq.n	4db0 <__aeabi_dsub+0x558>
    4dec:	08cb      	lsrs	r3, r1, #3
    4dee:	4203      	tst	r3, r0
    4df0:	d1de      	bne.n	4db0 <__aeabi_dsub+0x558>
    4df2:	08d7      	lsrs	r7, r2, #3
    4df4:	0749      	lsls	r1, r1, #29
    4df6:	430f      	orrs	r7, r1
    4df8:	001c      	movs	r4, r3
    4dfa:	e7d9      	b.n	4db0 <__aeabi_dsub+0x558>
    4dfc:	2100      	movs	r1, #0
    4dfe:	e771      	b.n	4ce4 <__aeabi_dsub+0x48c>
    4e00:	2500      	movs	r5, #0
    4e02:	2700      	movs	r7, #0
    4e04:	e5e9      	b.n	49da <__aeabi_dsub+0x182>
    4e06:	002e      	movs	r6, r5
    4e08:	0027      	movs	r7, r4
    4e0a:	3e20      	subs	r6, #32
    4e0c:	40f7      	lsrs	r7, r6
    4e0e:	2d20      	cmp	r5, #32
    4e10:	d02f      	beq.n	4e72 <__aeabi_dsub+0x61a>
    4e12:	2640      	movs	r6, #64	; 0x40
    4e14:	1b75      	subs	r5, r6, r5
    4e16:	40ac      	lsls	r4, r5
    4e18:	4650      	mov	r0, sl
    4e1a:	4320      	orrs	r0, r4
    4e1c:	1e44      	subs	r4, r0, #1
    4e1e:	41a0      	sbcs	r0, r4
    4e20:	2400      	movs	r4, #0
    4e22:	4338      	orrs	r0, r7
    4e24:	e6dc      	b.n	4be0 <__aeabi_dsub+0x388>
    4e26:	2480      	movs	r4, #128	; 0x80
    4e28:	2500      	movs	r5, #0
    4e2a:	0324      	lsls	r4, r4, #12
    4e2c:	4e13      	ldr	r6, [pc, #76]	; (4e7c <__aeabi_dsub+0x624>)
    4e2e:	2700      	movs	r7, #0
    4e30:	e5d3      	b.n	49da <__aeabi_dsub+0x182>
    4e32:	4650      	mov	r0, sl
    4e34:	4320      	orrs	r0, r4
    4e36:	0007      	movs	r7, r0
    4e38:	1e78      	subs	r0, r7, #1
    4e3a:	4187      	sbcs	r7, r0
    4e3c:	2400      	movs	r4, #0
    4e3e:	18bf      	adds	r7, r7, r2
    4e40:	e760      	b.n	4d04 <__aeabi_dsub+0x4ac>
    4e42:	000c      	movs	r4, r1
    4e44:	0017      	movs	r7, r2
    4e46:	e58d      	b.n	4964 <__aeabi_dsub+0x10c>
    4e48:	000c      	movs	r4, r1
    4e4a:	0017      	movs	r7, r2
    4e4c:	4e0b      	ldr	r6, [pc, #44]	; (4e7c <__aeabi_dsub+0x624>)
    4e4e:	e589      	b.n	4964 <__aeabi_dsub+0x10c>
    4e50:	001e      	movs	r6, r3
    4e52:	0027      	movs	r7, r4
    4e54:	3e20      	subs	r6, #32
    4e56:	40f7      	lsrs	r7, r6
    4e58:	2b20      	cmp	r3, #32
    4e5a:	d00c      	beq.n	4e76 <__aeabi_dsub+0x61e>
    4e5c:	2640      	movs	r6, #64	; 0x40
    4e5e:	1af3      	subs	r3, r6, r3
    4e60:	409c      	lsls	r4, r3
    4e62:	4650      	mov	r0, sl
    4e64:	4320      	orrs	r0, r4
    4e66:	1e44      	subs	r4, r0, #1
    4e68:	41a0      	sbcs	r0, r4
    4e6a:	4307      	orrs	r7, r0
    4e6c:	2400      	movs	r4, #0
    4e6e:	18bf      	adds	r7, r7, r2
    4e70:	e748      	b.n	4d04 <__aeabi_dsub+0x4ac>
    4e72:	2400      	movs	r4, #0
    4e74:	e7d0      	b.n	4e18 <__aeabi_dsub+0x5c0>
    4e76:	2400      	movs	r4, #0
    4e78:	e7f3      	b.n	4e62 <__aeabi_dsub+0x60a>
    4e7a:	46c0      	nop			; (mov r8, r8)
    4e7c:	000007ff 	.word	0x000007ff
    4e80:	ff7fffff 	.word	0xff7fffff

00004e84 <__aeabi_d2iz>:
    4e84:	b530      	push	{r4, r5, lr}
    4e86:	4d13      	ldr	r5, [pc, #76]	; (4ed4 <__aeabi_d2iz+0x50>)
    4e88:	030a      	lsls	r2, r1, #12
    4e8a:	004b      	lsls	r3, r1, #1
    4e8c:	0b12      	lsrs	r2, r2, #12
    4e8e:	0d5b      	lsrs	r3, r3, #21
    4e90:	0fc9      	lsrs	r1, r1, #31
    4e92:	2400      	movs	r4, #0
    4e94:	42ab      	cmp	r3, r5
    4e96:	dd10      	ble.n	4eba <__aeabi_d2iz+0x36>
    4e98:	4c0f      	ldr	r4, [pc, #60]	; (4ed8 <__aeabi_d2iz+0x54>)
    4e9a:	42a3      	cmp	r3, r4
    4e9c:	dc0f      	bgt.n	4ebe <__aeabi_d2iz+0x3a>
    4e9e:	2480      	movs	r4, #128	; 0x80
    4ea0:	4d0e      	ldr	r5, [pc, #56]	; (4edc <__aeabi_d2iz+0x58>)
    4ea2:	0364      	lsls	r4, r4, #13
    4ea4:	4322      	orrs	r2, r4
    4ea6:	1aed      	subs	r5, r5, r3
    4ea8:	2d1f      	cmp	r5, #31
    4eaa:	dd0b      	ble.n	4ec4 <__aeabi_d2iz+0x40>
    4eac:	480c      	ldr	r0, [pc, #48]	; (4ee0 <__aeabi_d2iz+0x5c>)
    4eae:	1ac3      	subs	r3, r0, r3
    4eb0:	40da      	lsrs	r2, r3
    4eb2:	4254      	negs	r4, r2
    4eb4:	2900      	cmp	r1, #0
    4eb6:	d100      	bne.n	4eba <__aeabi_d2iz+0x36>
    4eb8:	0014      	movs	r4, r2
    4eba:	0020      	movs	r0, r4
    4ebc:	bd30      	pop	{r4, r5, pc}
    4ebe:	4b09      	ldr	r3, [pc, #36]	; (4ee4 <__aeabi_d2iz+0x60>)
    4ec0:	18cc      	adds	r4, r1, r3
    4ec2:	e7fa      	b.n	4eba <__aeabi_d2iz+0x36>
    4ec4:	4c08      	ldr	r4, [pc, #32]	; (4ee8 <__aeabi_d2iz+0x64>)
    4ec6:	40e8      	lsrs	r0, r5
    4ec8:	46a4      	mov	ip, r4
    4eca:	4463      	add	r3, ip
    4ecc:	409a      	lsls	r2, r3
    4ece:	4302      	orrs	r2, r0
    4ed0:	e7ef      	b.n	4eb2 <__aeabi_d2iz+0x2e>
    4ed2:	46c0      	nop			; (mov r8, r8)
    4ed4:	000003fe 	.word	0x000003fe
    4ed8:	0000041d 	.word	0x0000041d
    4edc:	00000433 	.word	0x00000433
    4ee0:	00000413 	.word	0x00000413
    4ee4:	7fffffff 	.word	0x7fffffff
    4ee8:	fffffbed 	.word	0xfffffbed

00004eec <__aeabi_ui2d>:
    4eec:	b510      	push	{r4, lr}
    4eee:	1e04      	subs	r4, r0, #0
    4ef0:	d028      	beq.n	4f44 <__aeabi_ui2d+0x58>
    4ef2:	f000 f833 	bl	4f5c <__clzsi2>
    4ef6:	4b15      	ldr	r3, [pc, #84]	; (4f4c <__aeabi_ui2d+0x60>)
    4ef8:	4a15      	ldr	r2, [pc, #84]	; (4f50 <__aeabi_ui2d+0x64>)
    4efa:	1a1b      	subs	r3, r3, r0
    4efc:	1ad2      	subs	r2, r2, r3
    4efe:	2a1f      	cmp	r2, #31
    4f00:	dd15      	ble.n	4f2e <__aeabi_ui2d+0x42>
    4f02:	4a14      	ldr	r2, [pc, #80]	; (4f54 <__aeabi_ui2d+0x68>)
    4f04:	1ad2      	subs	r2, r2, r3
    4f06:	4094      	lsls	r4, r2
    4f08:	2200      	movs	r2, #0
    4f0a:	0324      	lsls	r4, r4, #12
    4f0c:	055b      	lsls	r3, r3, #21
    4f0e:	0b24      	lsrs	r4, r4, #12
    4f10:	0d5b      	lsrs	r3, r3, #21
    4f12:	2100      	movs	r1, #0
    4f14:	0010      	movs	r0, r2
    4f16:	0324      	lsls	r4, r4, #12
    4f18:	0d0a      	lsrs	r2, r1, #20
    4f1a:	0b24      	lsrs	r4, r4, #12
    4f1c:	0512      	lsls	r2, r2, #20
    4f1e:	4322      	orrs	r2, r4
    4f20:	4c0d      	ldr	r4, [pc, #52]	; (4f58 <__aeabi_ui2d+0x6c>)
    4f22:	051b      	lsls	r3, r3, #20
    4f24:	4022      	ands	r2, r4
    4f26:	4313      	orrs	r3, r2
    4f28:	005b      	lsls	r3, r3, #1
    4f2a:	0859      	lsrs	r1, r3, #1
    4f2c:	bd10      	pop	{r4, pc}
    4f2e:	0021      	movs	r1, r4
    4f30:	4091      	lsls	r1, r2
    4f32:	000a      	movs	r2, r1
    4f34:	210b      	movs	r1, #11
    4f36:	1a08      	subs	r0, r1, r0
    4f38:	40c4      	lsrs	r4, r0
    4f3a:	055b      	lsls	r3, r3, #21
    4f3c:	0324      	lsls	r4, r4, #12
    4f3e:	0b24      	lsrs	r4, r4, #12
    4f40:	0d5b      	lsrs	r3, r3, #21
    4f42:	e7e6      	b.n	4f12 <__aeabi_ui2d+0x26>
    4f44:	2300      	movs	r3, #0
    4f46:	2400      	movs	r4, #0
    4f48:	2200      	movs	r2, #0
    4f4a:	e7e2      	b.n	4f12 <__aeabi_ui2d+0x26>
    4f4c:	0000041e 	.word	0x0000041e
    4f50:	00000433 	.word	0x00000433
    4f54:	00000413 	.word	0x00000413
    4f58:	800fffff 	.word	0x800fffff

00004f5c <__clzsi2>:
    4f5c:	211c      	movs	r1, #28
    4f5e:	2301      	movs	r3, #1
    4f60:	041b      	lsls	r3, r3, #16
    4f62:	4298      	cmp	r0, r3
    4f64:	d301      	bcc.n	4f6a <__clzsi2+0xe>
    4f66:	0c00      	lsrs	r0, r0, #16
    4f68:	3910      	subs	r1, #16
    4f6a:	0a1b      	lsrs	r3, r3, #8
    4f6c:	4298      	cmp	r0, r3
    4f6e:	d301      	bcc.n	4f74 <__clzsi2+0x18>
    4f70:	0a00      	lsrs	r0, r0, #8
    4f72:	3908      	subs	r1, #8
    4f74:	091b      	lsrs	r3, r3, #4
    4f76:	4298      	cmp	r0, r3
    4f78:	d301      	bcc.n	4f7e <__clzsi2+0x22>
    4f7a:	0900      	lsrs	r0, r0, #4
    4f7c:	3904      	subs	r1, #4
    4f7e:	a202      	add	r2, pc, #8	; (adr r2, 4f88 <__clzsi2+0x2c>)
    4f80:	5c10      	ldrb	r0, [r2, r0]
    4f82:	1840      	adds	r0, r0, r1
    4f84:	4770      	bx	lr
    4f86:	46c0      	nop			; (mov r8, r8)
    4f88:	02020304 	.word	0x02020304
    4f8c:	01010101 	.word	0x01010101
	...

00004f98 <__libc_init_array>:
    4f98:	b570      	push	{r4, r5, r6, lr}
    4f9a:	2600      	movs	r6, #0
    4f9c:	4d0c      	ldr	r5, [pc, #48]	; (4fd0 <__libc_init_array+0x38>)
    4f9e:	4c0d      	ldr	r4, [pc, #52]	; (4fd4 <__libc_init_array+0x3c>)
    4fa0:	1b64      	subs	r4, r4, r5
    4fa2:	10a4      	asrs	r4, r4, #2
    4fa4:	42a6      	cmp	r6, r4
    4fa6:	d109      	bne.n	4fbc <__libc_init_array+0x24>
    4fa8:	2600      	movs	r6, #0
    4faa:	f000 f9db 	bl	5364 <_init>
    4fae:	4d0a      	ldr	r5, [pc, #40]	; (4fd8 <__libc_init_array+0x40>)
    4fb0:	4c0a      	ldr	r4, [pc, #40]	; (4fdc <__libc_init_array+0x44>)
    4fb2:	1b64      	subs	r4, r4, r5
    4fb4:	10a4      	asrs	r4, r4, #2
    4fb6:	42a6      	cmp	r6, r4
    4fb8:	d105      	bne.n	4fc6 <__libc_init_array+0x2e>
    4fba:	bd70      	pop	{r4, r5, r6, pc}
    4fbc:	00b3      	lsls	r3, r6, #2
    4fbe:	58eb      	ldr	r3, [r5, r3]
    4fc0:	4798      	blx	r3
    4fc2:	3601      	adds	r6, #1
    4fc4:	e7ee      	b.n	4fa4 <__libc_init_array+0xc>
    4fc6:	00b3      	lsls	r3, r6, #2
    4fc8:	58eb      	ldr	r3, [r5, r3]
    4fca:	4798      	blx	r3
    4fcc:	3601      	adds	r6, #1
    4fce:	e7f2      	b.n	4fb6 <__libc_init_array+0x1e>
    4fd0:	00005370 	.word	0x00005370
    4fd4:	00005370 	.word	0x00005370
    4fd8:	00005370 	.word	0x00005370
    4fdc:	00005374 	.word	0x00005374

00004fe0 <malloc>:
    4fe0:	b510      	push	{r4, lr}
    4fe2:	4b03      	ldr	r3, [pc, #12]	; (4ff0 <malloc+0x10>)
    4fe4:	0001      	movs	r1, r0
    4fe6:	6818      	ldr	r0, [r3, #0]
    4fe8:	f000 f80e 	bl	5008 <_malloc_r>
    4fec:	bd10      	pop	{r4, pc}
    4fee:	46c0      	nop			; (mov r8, r8)
    4ff0:	20000044 	.word	0x20000044

00004ff4 <memcpy>:
    4ff4:	2300      	movs	r3, #0
    4ff6:	b510      	push	{r4, lr}
    4ff8:	429a      	cmp	r2, r3
    4ffa:	d100      	bne.n	4ffe <memcpy+0xa>
    4ffc:	bd10      	pop	{r4, pc}
    4ffe:	5ccc      	ldrb	r4, [r1, r3]
    5000:	54c4      	strb	r4, [r0, r3]
    5002:	3301      	adds	r3, #1
    5004:	e7f8      	b.n	4ff8 <memcpy+0x4>
	...

00005008 <_malloc_r>:
    5008:	2303      	movs	r3, #3
    500a:	b570      	push	{r4, r5, r6, lr}
    500c:	1ccd      	adds	r5, r1, #3
    500e:	439d      	bics	r5, r3
    5010:	3508      	adds	r5, #8
    5012:	0006      	movs	r6, r0
    5014:	2d0c      	cmp	r5, #12
    5016:	d21e      	bcs.n	5056 <_malloc_r+0x4e>
    5018:	250c      	movs	r5, #12
    501a:	42a9      	cmp	r1, r5
    501c:	d81d      	bhi.n	505a <_malloc_r+0x52>
    501e:	0030      	movs	r0, r6
    5020:	f000 f862 	bl	50e8 <__malloc_lock>
    5024:	4a25      	ldr	r2, [pc, #148]	; (50bc <_malloc_r+0xb4>)
    5026:	6814      	ldr	r4, [r2, #0]
    5028:	0021      	movs	r1, r4
    502a:	2900      	cmp	r1, #0
    502c:	d119      	bne.n	5062 <_malloc_r+0x5a>
    502e:	4c24      	ldr	r4, [pc, #144]	; (50c0 <_malloc_r+0xb8>)
    5030:	6823      	ldr	r3, [r4, #0]
    5032:	2b00      	cmp	r3, #0
    5034:	d103      	bne.n	503e <_malloc_r+0x36>
    5036:	0030      	movs	r0, r6
    5038:	f000 f844 	bl	50c4 <_sbrk_r>
    503c:	6020      	str	r0, [r4, #0]
    503e:	0029      	movs	r1, r5
    5040:	0030      	movs	r0, r6
    5042:	f000 f83f 	bl	50c4 <_sbrk_r>
    5046:	1c43      	adds	r3, r0, #1
    5048:	d12c      	bne.n	50a4 <_malloc_r+0x9c>
    504a:	230c      	movs	r3, #12
    504c:	0030      	movs	r0, r6
    504e:	6033      	str	r3, [r6, #0]
    5050:	f000 f84b 	bl	50ea <__malloc_unlock>
    5054:	e003      	b.n	505e <_malloc_r+0x56>
    5056:	2d00      	cmp	r5, #0
    5058:	dadf      	bge.n	501a <_malloc_r+0x12>
    505a:	230c      	movs	r3, #12
    505c:	6033      	str	r3, [r6, #0]
    505e:	2000      	movs	r0, #0
    5060:	bd70      	pop	{r4, r5, r6, pc}
    5062:	680b      	ldr	r3, [r1, #0]
    5064:	1b5b      	subs	r3, r3, r5
    5066:	d41a      	bmi.n	509e <_malloc_r+0x96>
    5068:	2b0b      	cmp	r3, #11
    506a:	d903      	bls.n	5074 <_malloc_r+0x6c>
    506c:	600b      	str	r3, [r1, #0]
    506e:	18cc      	adds	r4, r1, r3
    5070:	6025      	str	r5, [r4, #0]
    5072:	e003      	b.n	507c <_malloc_r+0x74>
    5074:	428c      	cmp	r4, r1
    5076:	d10e      	bne.n	5096 <_malloc_r+0x8e>
    5078:	6863      	ldr	r3, [r4, #4]
    507a:	6013      	str	r3, [r2, #0]
    507c:	0030      	movs	r0, r6
    507e:	f000 f834 	bl	50ea <__malloc_unlock>
    5082:	0020      	movs	r0, r4
    5084:	2207      	movs	r2, #7
    5086:	300b      	adds	r0, #11
    5088:	1d23      	adds	r3, r4, #4
    508a:	4390      	bics	r0, r2
    508c:	1ac3      	subs	r3, r0, r3
    508e:	d0e7      	beq.n	5060 <_malloc_r+0x58>
    5090:	425a      	negs	r2, r3
    5092:	50e2      	str	r2, [r4, r3]
    5094:	e7e4      	b.n	5060 <_malloc_r+0x58>
    5096:	684b      	ldr	r3, [r1, #4]
    5098:	6063      	str	r3, [r4, #4]
    509a:	000c      	movs	r4, r1
    509c:	e7ee      	b.n	507c <_malloc_r+0x74>
    509e:	000c      	movs	r4, r1
    50a0:	6849      	ldr	r1, [r1, #4]
    50a2:	e7c2      	b.n	502a <_malloc_r+0x22>
    50a4:	2303      	movs	r3, #3
    50a6:	1cc4      	adds	r4, r0, #3
    50a8:	439c      	bics	r4, r3
    50aa:	42a0      	cmp	r0, r4
    50ac:	d0e0      	beq.n	5070 <_malloc_r+0x68>
    50ae:	1a21      	subs	r1, r4, r0
    50b0:	0030      	movs	r0, r6
    50b2:	f000 f807 	bl	50c4 <_sbrk_r>
    50b6:	1c43      	adds	r3, r0, #1
    50b8:	d1da      	bne.n	5070 <_malloc_r+0x68>
    50ba:	e7c6      	b.n	504a <_malloc_r+0x42>
    50bc:	20000da8 	.word	0x20000da8
    50c0:	20000dac 	.word	0x20000dac

000050c4 <_sbrk_r>:
    50c4:	2300      	movs	r3, #0
    50c6:	b570      	push	{r4, r5, r6, lr}
    50c8:	4c06      	ldr	r4, [pc, #24]	; (50e4 <_sbrk_r+0x20>)
    50ca:	0005      	movs	r5, r0
    50cc:	0008      	movs	r0, r1
    50ce:	6023      	str	r3, [r4, #0]
    50d0:	f7fe f9fe 	bl	34d0 <_sbrk>
    50d4:	1c43      	adds	r3, r0, #1
    50d6:	d103      	bne.n	50e0 <_sbrk_r+0x1c>
    50d8:	6823      	ldr	r3, [r4, #0]
    50da:	2b00      	cmp	r3, #0
    50dc:	d000      	beq.n	50e0 <_sbrk_r+0x1c>
    50de:	602b      	str	r3, [r5, #0]
    50e0:	bd70      	pop	{r4, r5, r6, pc}
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	200011b0 	.word	0x200011b0

000050e8 <__malloc_lock>:
    50e8:	4770      	bx	lr

000050ea <__malloc_unlock>:
    50ea:	4770      	bx	lr

000050ec <_tcc_intflag>:
    50ec:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    50fc:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    510c:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    511c:	2c00 4200 3000 4200 3400 4200 3800 4200     .,.B.0.B.4.B.8.B
    512c:	3c00 4200 0800 1000 2000 4000 8000 0000     .<.B..... .@....

0000513c <tc_interrupt_vectors.13123>:
    513c:	1312 1514 0016 0000 18f6 0000 1b42 0000     ............B...
    514c:	1b42 0000 1b42 0000 1b42 0000 1b42 0000     B...B...B...B...
    515c:	1b42 0000 1b42 0000 1b42 0000 1b42 0000     B...B...B...B...
    516c:	1b42 0000 1b42 0000 1b42 0000 1b42 0000     B...B...B...B...
    517c:	1b42 0000 1b42 0000 18de 0000 1b42 0000     B...B.......B...
    518c:	1b42 0000 1b42 0000 1b42 0000 1b42 0000     B...B...B...B...
    519c:	1b42 0000 1b42 0000 1b42 0000 1b42 0000     B...B...B...B...
    51ac:	1b42 0000 1b42 0000 1b42 0000 1b42 0000     B...B...B...B...
    51bc:	1b42 0000 1b42 0000 18ee 0000 1b42 0000     B...B.......B...
    51cc:	1b42 0000 1b42 0000 1b42 0000 1b42 0000     B...B...B...B...
    51dc:	1b42 0000 1b42 0000 1b42 0000 1b42 0000     B...B...B...B...
    51ec:	1b42 0000 1b42 0000 1b42 0000 1b42 0000     B...B...B...B...
    51fc:	1b42 0000 1b42 0000 18e6 0000 18fe 0000     B...B...........
    520c:	18c6 0000 18d6 0000 18ce 0000 0002 0000     ................
    521c:	0003 0000 0028 0000 0029 0000 0004 0000     ....(...).......
    522c:	0005 0000 0006 0000 0007 0000 0020 0000     ............ ...
    523c:	0021 0000 0022 0000 0023 0000 0024 0000     !..."...#...$...
    524c:	0025 0000 0026 0000 0027 0000 0008 0000     %...&...'.......
    525c:	0009 0000 000a 0000 000b 0000 0800 4200     ...............B
    526c:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    527c:	1c00 4200 296e 0000 2956 0000 294a 0000     ...Bn)..V)..J)..
    528c:	2962 0000 2920 0000                         b).. )..

00005294 <inputAnalogChannles>:
    5294:	0c00 0013                                   ....

00005298 <outputDetectAnalogChannles>:
    5298:	0504 0806 2e5e 0000 2e5a 0000 2e5a 0000     ....^...Z...Z...
    52a8:	2ebc 0000 2ebc 0000 2e72 0000 2e64 0000     ........r...d...
    52b8:	2e78 0000 2eaa 0000 2f44 0000 2f24 0000     x.......D/..$/..
    52c8:	2f24 0000 2fb0 0000 2f36 0000 2f52 0000     $/.../..6/..R/..
    52d8:	2f28 0000 2f60 0000 2fa0 0000 3ee8 0000     (/..`/.../...>..
    52e8:	3eca 0000 3e84 0000 3da2 0000 3e84 0000     .>...>...=...>..
    52f8:	3ebc 0000 3e84 0000 3da2 0000 3eca 0000     .>...>...=...>..
    5308:	3eca 0000 3ebc 0000 3da2 0000 3d9a 0000     .>...>...=...=..
    5318:	3d9a 0000 3d9a 0000 4100 0000 4548 0000     .=...=...A..HE..
    5328:	4408 0000 4408 0000 4404 0000 4520 0000     .D...D...D.. E..
    5338:	4520 0000 4512 0000 4404 0000 4520 0000      E...E...D.. E..
    5348:	4512 0000 4520 0000 4404 0000 4528 0000     .E.. E...D..(E..
    5358:	4528 0000 4528 0000 472c 0000               (E..(E..,G..

00005364 <_init>:
    5364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5366:	46c0      	nop			; (mov r8, r8)
    5368:	bcf8      	pop	{r3, r4, r5, r6, r7}
    536a:	bc08      	pop	{r3}
    536c:	469e      	mov	lr, r3
    536e:	4770      	bx	lr

00005370 <__init_array_start>:
    5370:	000000dd 	.word	0x000000dd

00005374 <_fini>:
    5374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5376:	46c0      	nop			; (mov r8, r8)
    5378:	bcf8      	pop	{r3, r4, r5, r6, r7}
    537a:	bc08      	pop	{r3}
    537c:	469e      	mov	lr, r3
    537e:	4770      	bx	lr

00005380 <__fini_array_start>:
    5380:	000000b5 	.word	0x000000b5
