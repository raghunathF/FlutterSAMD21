
FlutterSAMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005618  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  00005618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001140  200000bc  000056d4  000200bc  2**2
                  ALLOC
  3 .stack        00002004  200011fc  00006814  000200bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004f070  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000064af  00000000  00000000  0006f1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000860a  00000000  00000000  0007565c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008a0  00000000  00000000  0007dc66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000970  00000000  00000000  0007e506  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000bb9e  00000000  00000000  0007ee76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000170b6  00000000  00000000  0008aa14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e3c7  00000000  00000000  000a1aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001690  00000000  00000000  0012fe94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 32 00 20 81 36 00 00 7d 36 00 00 7d 36 00 00     .2. .6..}6..}6..
	...
      2c:	7d 36 00 00 00 00 00 00 00 00 00 00 7d 36 00 00     }6..........}6..
      3c:	7d 36 00 00 7d 36 00 00 7d 36 00 00 7d 36 00 00     }6..}6..}6..}6..
      4c:	7d 36 00 00 7d 36 00 00 7d 36 00 00 7d 36 00 00     }6..}6..}6..}6..
      5c:	7d 36 00 00 7d 36 00 00 99 20 00 00 a9 20 00 00     }6..}6... ... ..
      6c:	b9 20 00 00 c9 20 00 00 d9 20 00 00 e9 20 00 00     . ... ... ... ..
      7c:	f1 0a 00 00 01 0b 00 00 11 0b 00 00 b9 0b 00 00     ................
      8c:	c9 0b 00 00 d9 0b 00 00 e9 0b 00 00 f9 0b 00 00     ................
      9c:	f5 1b 00 00 7d 36 00 00 7d 36 00 00 7d 36 00 00     ....}6..}6..}6..
      ac:	7d 36 00 00 00 00 00 00                             }6......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000bc 	.word	0x200000bc
      d4:	00000000 	.word	0x00000000
      d8:	00005618 	.word	0x00005618

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c0 	.word	0x200000c0
     108:	00005618 	.word	0x00005618
     10c:	00005618 	.word	0x00005618
     110:	00000000 	.word	0x00000000

00000114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     116:	2207      	movs	r2, #7
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     11e:	4770      	bx	lr

00000120 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     120:	b5f0      	push	{r4, r5, r6, r7, lr}
     122:	46d6      	mov	lr, sl
     124:	464f      	mov	r7, r9
     126:	4646      	mov	r6, r8
     128:	b5c0      	push	{r6, r7, lr}
     12a:	b08a      	sub	sp, #40	; 0x28
     12c:	0006      	movs	r6, r0
     12e:	000f      	movs	r7, r1
     130:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     132:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     134:	0008      	movs	r0, r1
     136:	4ba0      	ldr	r3, [pc, #640]	; (3b8 <i2c_master_init+0x298>)
     138:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     13a:	4aa0      	ldr	r2, [pc, #640]	; (3bc <i2c_master_init+0x29c>)
     13c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     13e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     140:	2301      	movs	r3, #1
     142:	40ab      	lsls	r3, r5
     144:	430b      	orrs	r3, r1
     146:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     148:	a909      	add	r1, sp, #36	; 0x24
     14a:	7b23      	ldrb	r3, [r4, #12]
     14c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     14e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     150:	b2c5      	uxtb	r5, r0
     152:	0028      	movs	r0, r5
     154:	4b9a      	ldr	r3, [pc, #616]	; (3c0 <i2c_master_init+0x2a0>)
     156:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     158:	0028      	movs	r0, r5
     15a:	4b9a      	ldr	r3, [pc, #616]	; (3c4 <i2c_master_init+0x2a4>)
     15c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     15e:	7b20      	ldrb	r0, [r4, #12]
     160:	2100      	movs	r1, #0
     162:	4b99      	ldr	r3, [pc, #612]	; (3c8 <i2c_master_init+0x2a8>)
     164:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     166:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     168:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     16a:	079b      	lsls	r3, r3, #30
     16c:	d505      	bpl.n	17a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     16e:	b00a      	add	sp, #40	; 0x28
     170:	bc1c      	pop	{r2, r3, r4}
     172:	4690      	mov	r8, r2
     174:	4699      	mov	r9, r3
     176:	46a2      	mov	sl, r4
     178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     17c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d4f5      	bmi.n	16e <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     182:	6830      	ldr	r0, [r6, #0]
     184:	4b8c      	ldr	r3, [pc, #560]	; (3b8 <i2c_master_init+0x298>)
     186:	4699      	mov	r9, r3
     188:	4798      	blx	r3
     18a:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     18c:	498f      	ldr	r1, [pc, #572]	; (3cc <i2c_master_init+0x2ac>)
     18e:	4b90      	ldr	r3, [pc, #576]	; (3d0 <i2c_master_init+0x2b0>)
     190:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     192:	00ad      	lsls	r5, r5, #2
     194:	4b8f      	ldr	r3, [pc, #572]	; (3d4 <i2c_master_init+0x2b4>)
     196:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     198:	2300      	movs	r3, #0
     19a:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     19c:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     19e:	2500      	movs	r5, #0
     1a0:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     1a2:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     1a4:	2225      	movs	r2, #37	; 0x25
     1a6:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     1a8:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     1aa:	3314      	adds	r3, #20
     1ac:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ae:	6833      	ldr	r3, [r6, #0]
     1b0:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     1b2:	0018      	movs	r0, r3
     1b4:	47c8      	blx	r9
     1b6:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1b8:	2380      	movs	r3, #128	; 0x80
     1ba:	aa08      	add	r2, sp, #32
     1bc:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1be:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1c0:	2301      	movs	r3, #1
     1c2:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     1c4:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1c6:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     1c8:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     1ca:	2800      	cmp	r0, #0
     1cc:	d100      	bne.n	1d0 <i2c_master_init+0xb0>
     1ce:	e0af      	b.n	330 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1d0:	ab08      	add	r3, sp, #32
     1d2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1d4:	2302      	movs	r3, #2
     1d6:	aa08      	add	r2, sp, #32
     1d8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     1da:	0c00      	lsrs	r0, r0, #16
     1dc:	b2c0      	uxtb	r0, r0
     1de:	0011      	movs	r1, r2
     1e0:	4b7d      	ldr	r3, [pc, #500]	; (3d8 <i2c_master_init+0x2b8>)
     1e2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     1e4:	2f00      	cmp	r7, #0
     1e6:	d100      	bne.n	1ea <i2c_master_init+0xca>
     1e8:	e0a7      	b.n	33a <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     1ea:	ab08      	add	r3, sp, #32
     1ec:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1ee:	2302      	movs	r3, #2
     1f0:	aa08      	add	r2, sp, #32
     1f2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     1f4:	0c3f      	lsrs	r7, r7, #16
     1f6:	b2f8      	uxtb	r0, r7
     1f8:	0011      	movs	r1, r2
     1fa:	4b77      	ldr	r3, [pc, #476]	; (3d8 <i2c_master_init+0x2b8>)
     1fc:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     1fe:	8aa3      	ldrh	r3, [r4, #20]
     200:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     202:	8ae3      	ldrh	r3, [r4, #22]
     204:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     206:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     208:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     20a:	2b00      	cmp	r3, #0
     20c:	d104      	bne.n	218 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     20e:	4b73      	ldr	r3, [pc, #460]	; (3dc <i2c_master_init+0x2bc>)
     210:	789b      	ldrb	r3, [r3, #2]
     212:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     214:	0fdb      	lsrs	r3, r3, #31
     216:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     218:	68a1      	ldr	r1, [r4, #8]
     21a:	6923      	ldr	r3, [r4, #16]
     21c:	430b      	orrs	r3, r1
     21e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     220:	2224      	movs	r2, #36	; 0x24
     222:	5ca2      	ldrb	r2, [r4, r2]
     224:	2a00      	cmp	r2, #0
     226:	d002      	beq.n	22e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     228:	2280      	movs	r2, #128	; 0x80
     22a:	05d2      	lsls	r2, r2, #23
     22c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     22e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     230:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     232:	222c      	movs	r2, #44	; 0x2c
     234:	5ca2      	ldrb	r2, [r4, r2]
     236:	2a00      	cmp	r2, #0
     238:	d103      	bne.n	242 <i2c_master_init+0x122>
     23a:	2280      	movs	r2, #128	; 0x80
     23c:	0492      	lsls	r2, r2, #18
     23e:	4291      	cmp	r1, r2
     240:	d102      	bne.n	248 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     242:	2280      	movs	r2, #128	; 0x80
     244:	0512      	lsls	r2, r2, #20
     246:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     248:	222d      	movs	r2, #45	; 0x2d
     24a:	5ca2      	ldrb	r2, [r4, r2]
     24c:	2a00      	cmp	r2, #0
     24e:	d002      	beq.n	256 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     250:	2280      	movs	r2, #128	; 0x80
     252:	0412      	lsls	r2, r2, #16
     254:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     256:	222e      	movs	r2, #46	; 0x2e
     258:	5ca2      	ldrb	r2, [r4, r2]
     25a:	2a00      	cmp	r2, #0
     25c:	d002      	beq.n	264 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     25e:	2280      	movs	r2, #128	; 0x80
     260:	03d2      	lsls	r2, r2, #15
     262:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     264:	4642      	mov	r2, r8
     266:	6812      	ldr	r2, [r2, #0]
     268:	4313      	orrs	r3, r2
     26a:	4642      	mov	r2, r8
     26c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     26e:	2380      	movs	r3, #128	; 0x80
     270:	005b      	lsls	r3, r3, #1
     272:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     274:	4648      	mov	r0, r9
     276:	3014      	adds	r0, #20
     278:	b2c0      	uxtb	r0, r0
     27a:	4b59      	ldr	r3, [pc, #356]	; (3e0 <i2c_master_init+0x2c0>)
     27c:	4798      	blx	r3
     27e:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     280:	23fa      	movs	r3, #250	; 0xfa
     282:	009b      	lsls	r3, r3, #2
     284:	6822      	ldr	r2, [r4, #0]
     286:	435a      	muls	r2, r3
     288:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     28a:	6863      	ldr	r3, [r4, #4]
     28c:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     28e:	4d55      	ldr	r5, [pc, #340]	; (3e4 <i2c_master_init+0x2c4>)
     290:	47a8      	blx	r5
     292:	9000      	str	r0, [sp, #0]
     294:	9101      	str	r1, [sp, #4]
     296:	464b      	mov	r3, r9
     298:	0058      	lsls	r0, r3, #1
     29a:	47a8      	blx	r5
     29c:	9002      	str	r0, [sp, #8]
     29e:	9103      	str	r1, [sp, #12]
     2a0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     2a2:	47a8      	blx	r5
     2a4:	9004      	str	r0, [sp, #16]
     2a6:	9105      	str	r1, [sp, #20]
     2a8:	4f4f      	ldr	r7, [pc, #316]	; (3e8 <i2c_master_init+0x2c8>)
     2aa:	4a50      	ldr	r2, [pc, #320]	; (3ec <i2c_master_init+0x2cc>)
     2ac:	4b50      	ldr	r3, [pc, #320]	; (3f0 <i2c_master_init+0x2d0>)
     2ae:	9800      	ldr	r0, [sp, #0]
     2b0:	9901      	ldr	r1, [sp, #4]
     2b2:	47b8      	blx	r7
     2b4:	0002      	movs	r2, r0
     2b6:	000b      	movs	r3, r1
     2b8:	9804      	ldr	r0, [sp, #16]
     2ba:	9905      	ldr	r1, [sp, #20]
     2bc:	47b8      	blx	r7
     2be:	4e4d      	ldr	r6, [pc, #308]	; (3f4 <i2c_master_init+0x2d4>)
     2c0:	2200      	movs	r2, #0
     2c2:	4b4d      	ldr	r3, [pc, #308]	; (3f8 <i2c_master_init+0x2d8>)
     2c4:	47b0      	blx	r6
     2c6:	9004      	str	r0, [sp, #16]
     2c8:	9105      	str	r1, [sp, #20]
     2ca:	4648      	mov	r0, r9
     2cc:	47a8      	blx	r5
     2ce:	0002      	movs	r2, r0
     2d0:	000b      	movs	r3, r1
     2d2:	9804      	ldr	r0, [sp, #16]
     2d4:	9905      	ldr	r1, [sp, #20]
     2d6:	47b8      	blx	r7
     2d8:	0002      	movs	r2, r0
     2da:	000b      	movs	r3, r1
     2dc:	4d47      	ldr	r5, [pc, #284]	; (3fc <i2c_master_init+0x2dc>)
     2de:	9800      	ldr	r0, [sp, #0]
     2e0:	9901      	ldr	r1, [sp, #4]
     2e2:	47a8      	blx	r5
     2e4:	9a02      	ldr	r2, [sp, #8]
     2e6:	9b03      	ldr	r3, [sp, #12]
     2e8:	47b0      	blx	r6
     2ea:	2200      	movs	r2, #0
     2ec:	4b44      	ldr	r3, [pc, #272]	; (400 <i2c_master_init+0x2e0>)
     2ee:	47a8      	blx	r5
     2f0:	9a02      	ldr	r2, [sp, #8]
     2f2:	9b03      	ldr	r3, [sp, #12]
     2f4:	4d43      	ldr	r5, [pc, #268]	; (404 <i2c_master_init+0x2e4>)
     2f6:	47a8      	blx	r5
     2f8:	4b43      	ldr	r3, [pc, #268]	; (408 <i2c_master_init+0x2e8>)
     2fa:	4798      	blx	r3
     2fc:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     2fe:	2380      	movs	r3, #128	; 0x80
     300:	049b      	lsls	r3, r3, #18
     302:	68a2      	ldr	r2, [r4, #8]
     304:	429a      	cmp	r2, r3
     306:	d01e      	beq.n	346 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     308:	0003      	movs	r3, r0
     30a:	2040      	movs	r0, #64	; 0x40
     30c:	2dff      	cmp	r5, #255	; 0xff
     30e:	d900      	bls.n	312 <i2c_master_init+0x1f2>
     310:	e72d      	b.n	16e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     312:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     314:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     316:	25ff      	movs	r5, #255	; 0xff
     318:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     31a:	0624      	lsls	r4, r4, #24
     31c:	4325      	orrs	r5, r4
     31e:	0400      	lsls	r0, r0, #16
     320:	23ff      	movs	r3, #255	; 0xff
     322:	041b      	lsls	r3, r3, #16
     324:	4018      	ands	r0, r3
     326:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     328:	4643      	mov	r3, r8
     32a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     32c:	2000      	movs	r0, #0
     32e:	e71e      	b.n	16e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     330:	2100      	movs	r1, #0
     332:	4640      	mov	r0, r8
     334:	4b35      	ldr	r3, [pc, #212]	; (40c <i2c_master_init+0x2ec>)
     336:	4798      	blx	r3
     338:	e74a      	b.n	1d0 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     33a:	2101      	movs	r1, #1
     33c:	4640      	mov	r0, r8
     33e:	4b33      	ldr	r3, [pc, #204]	; (40c <i2c_master_init+0x2ec>)
     340:	4798      	blx	r3
     342:	0007      	movs	r7, r0
     344:	e751      	b.n	1ea <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     346:	26fa      	movs	r6, #250	; 0xfa
     348:	00b6      	lsls	r6, r6, #2
     34a:	4653      	mov	r3, sl
     34c:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     34e:	9800      	ldr	r0, [sp, #0]
     350:	9901      	ldr	r1, [sp, #4]
     352:	0002      	movs	r2, r0
     354:	000b      	movs	r3, r1
     356:	4c27      	ldr	r4, [pc, #156]	; (3f4 <i2c_master_init+0x2d4>)
     358:	47a0      	blx	r4
     35a:	9000      	str	r0, [sp, #0]
     35c:	9101      	str	r1, [sp, #4]
     35e:	0030      	movs	r0, r6
     360:	4b20      	ldr	r3, [pc, #128]	; (3e4 <i2c_master_init+0x2c4>)
     362:	4798      	blx	r3
     364:	2200      	movs	r2, #0
     366:	4b2a      	ldr	r3, [pc, #168]	; (410 <i2c_master_init+0x2f0>)
     368:	47b8      	blx	r7
     36a:	0002      	movs	r2, r0
     36c:	000b      	movs	r3, r1
     36e:	9800      	ldr	r0, [sp, #0]
     370:	9901      	ldr	r1, [sp, #4]
     372:	4c24      	ldr	r4, [pc, #144]	; (404 <i2c_master_init+0x2e4>)
     374:	47a0      	blx	r4
     376:	2200      	movs	r2, #0
     378:	4b21      	ldr	r3, [pc, #132]	; (400 <i2c_master_init+0x2e0>)
     37a:	4c20      	ldr	r4, [pc, #128]	; (3fc <i2c_master_init+0x2dc>)
     37c:	47a0      	blx	r4
     37e:	4b22      	ldr	r3, [pc, #136]	; (408 <i2c_master_init+0x2e8>)
     380:	4798      	blx	r3
     382:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     384:	d00c      	beq.n	3a0 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     386:	0031      	movs	r1, r6
     388:	9807      	ldr	r0, [sp, #28]
     38a:	4b22      	ldr	r3, [pc, #136]	; (414 <i2c_master_init+0x2f4>)
     38c:	4798      	blx	r3
     38e:	3802      	subs	r0, #2
     390:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     392:	002b      	movs	r3, r5
     394:	2dff      	cmp	r5, #255	; 0xff
     396:	d80c      	bhi.n	3b2 <i2c_master_init+0x292>
     398:	28ff      	cmp	r0, #255	; 0xff
     39a:	d9bc      	bls.n	316 <i2c_master_init+0x1f6>
     39c:	2040      	movs	r0, #64	; 0x40
     39e:	e6e6      	b.n	16e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     3a0:	0071      	lsls	r1, r6, #1
     3a2:	1e48      	subs	r0, r1, #1
     3a4:	9b07      	ldr	r3, [sp, #28]
     3a6:	469c      	mov	ip, r3
     3a8:	4460      	add	r0, ip
     3aa:	4b1a      	ldr	r3, [pc, #104]	; (414 <i2c_master_init+0x2f4>)
     3ac:	4798      	blx	r3
     3ae:	3801      	subs	r0, #1
     3b0:	e7ef      	b.n	392 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3b2:	2040      	movs	r0, #64	; 0x40
     3b4:	e6db      	b.n	16e <i2c_master_init+0x4e>
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	00001ff1 	.word	0x00001ff1
     3bc:	40000400 	.word	0x40000400
     3c0:	00003525 	.word	0x00003525
     3c4:	00003499 	.word	0x00003499
     3c8:	00001e2d 	.word	0x00001e2d
     3cc:	000008b9 	.word	0x000008b9
     3d0:	0000202d 	.word	0x0000202d
     3d4:	20000f3c 	.word	0x20000f3c
     3d8:	0000361d 	.word	0x0000361d
     3dc:	41002000 	.word	0x41002000
     3e0:	00003541 	.word	0x00003541
     3e4:	00005181 	.word	0x00005181
     3e8:	000045ed 	.word	0x000045ed
     3ec:	e826d695 	.word	0xe826d695
     3f0:	3e112e0b 	.word	0x3e112e0b
     3f4:	00003965 	.word	0x00003965
     3f8:	40240000 	.word	0x40240000
     3fc:	00004aed 	.word	0x00004aed
     400:	3ff00000 	.word	0x3ff00000
     404:	00003f85 	.word	0x00003f85
     408:	00005119 	.word	0x00005119
     40c:	00001e79 	.word	0x00001e79
     410:	40080000 	.word	0x40080000
     414:	000037f9 	.word	0x000037f9

00000418 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     418:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     41a:	7e1a      	ldrb	r2, [r3, #24]
     41c:	0792      	lsls	r2, r2, #30
     41e:	d507      	bpl.n	430 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     420:	2202      	movs	r2, #2
     422:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     424:	8b5b      	ldrh	r3, [r3, #26]
     426:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     428:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     42a:	17db      	asrs	r3, r3, #31
     42c:	4018      	ands	r0, r3
}
     42e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     430:	8b5a      	ldrh	r2, [r3, #26]
     432:	0752      	lsls	r2, r2, #29
     434:	d506      	bpl.n	444 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     436:	6859      	ldr	r1, [r3, #4]
     438:	22c0      	movs	r2, #192	; 0xc0
     43a:	0292      	lsls	r2, r2, #10
     43c:	430a      	orrs	r2, r1
     43e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     440:	2018      	movs	r0, #24
     442:	e7f4      	b.n	42e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     444:	2000      	movs	r0, #0
     446:	e7f2      	b.n	42e <_i2c_master_address_response+0x16>

00000448 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     448:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     44a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     44c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     44e:	2401      	movs	r4, #1
     450:	2502      	movs	r5, #2
     452:	7e11      	ldrb	r1, [r2, #24]
     454:	4221      	tst	r1, r4
     456:	d10b      	bne.n	470 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     458:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     45a:	4229      	tst	r1, r5
     45c:	d106      	bne.n	46c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     45e:	3301      	adds	r3, #1
     460:	b29b      	uxth	r3, r3
     462:	8901      	ldrh	r1, [r0, #8]
     464:	4299      	cmp	r1, r3
     466:	d8f4      	bhi.n	452 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     468:	2012      	movs	r0, #18
     46a:	e002      	b.n	472 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     46c:	2000      	movs	r0, #0
     46e:	e000      	b.n	472 <_i2c_master_wait_for_bus+0x2a>
     470:	2000      	movs	r0, #0
}
     472:	bd30      	pop	{r4, r5, pc}

00000474 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     474:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     476:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     478:	6862      	ldr	r2, [r4, #4]
     47a:	2380      	movs	r3, #128	; 0x80
     47c:	02db      	lsls	r3, r3, #11
     47e:	4313      	orrs	r3, r2
     480:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     482:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     484:	4b02      	ldr	r3, [pc, #8]	; (490 <_i2c_master_send_hs_master_code+0x1c>)
     486:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     488:	2301      	movs	r3, #1
     48a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     48c:	bd10      	pop	{r4, pc}
     48e:	46c0      	nop			; (mov r8, r8)
     490:	00000449 	.word	0x00000449

00000494 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     494:	b5f0      	push	{r4, r5, r6, r7, lr}
     496:	46de      	mov	lr, fp
     498:	4657      	mov	r7, sl
     49a:	464e      	mov	r6, r9
     49c:	4645      	mov	r5, r8
     49e:	b5e0      	push	{r5, r6, r7, lr}
     4a0:	b083      	sub	sp, #12
     4a2:	0006      	movs	r6, r0
     4a4:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4a6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     4a8:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     4aa:	682b      	ldr	r3, [r5, #0]
     4ac:	011b      	lsls	r3, r3, #4
     4ae:	0fdb      	lsrs	r3, r3, #31
     4b0:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     4b2:	7a4b      	ldrb	r3, [r1, #9]
     4b4:	2b00      	cmp	r3, #0
     4b6:	d12b      	bne.n	510 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     4b8:	686b      	ldr	r3, [r5, #4]
     4ba:	4a58      	ldr	r2, [pc, #352]	; (61c <_i2c_master_read_packet+0x188>)
     4bc:	4013      	ands	r3, r2
     4be:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     4c0:	464b      	mov	r3, r9
     4c2:	7a1b      	ldrb	r3, [r3, #8]
     4c4:	2b00      	cmp	r3, #0
     4c6:	d127      	bne.n	518 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4c8:	464b      	mov	r3, r9
     4ca:	881b      	ldrh	r3, [r3, #0]
     4cc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     4ce:	464a      	mov	r2, r9
     4d0:	7a52      	ldrb	r2, [r2, #9]
     4d2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4d4:	4313      	orrs	r3, r2
     4d6:	2201      	movs	r2, #1
     4d8:	4313      	orrs	r3, r2
     4da:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4dc:	0030      	movs	r0, r6
     4de:	4b50      	ldr	r3, [pc, #320]	; (620 <_i2c_master_read_packet+0x18c>)
     4e0:	4798      	blx	r3
     4e2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     4e4:	4653      	mov	r3, sl
     4e6:	2b00      	cmp	r3, #0
     4e8:	d003      	beq.n	4f2 <_i2c_master_read_packet+0x5e>
     4ea:	464b      	mov	r3, r9
     4ec:	885b      	ldrh	r3, [r3, #2]
     4ee:	2b01      	cmp	r3, #1
     4f0:	d03b      	beq.n	56a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     4f2:	686b      	ldr	r3, [r5, #4]
     4f4:	4a49      	ldr	r2, [pc, #292]	; (61c <_i2c_master_read_packet+0x188>)
     4f6:	4013      	ands	r3, r2
     4f8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     4fa:	9b01      	ldr	r3, [sp, #4]
     4fc:	2b00      	cmp	r3, #0
     4fe:	d03a      	beq.n	576 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     500:	9801      	ldr	r0, [sp, #4]
     502:	b003      	add	sp, #12
     504:	bc3c      	pop	{r2, r3, r4, r5}
     506:	4690      	mov	r8, r2
     508:	4699      	mov	r9, r3
     50a:	46a2      	mov	sl, r4
     50c:	46ab      	mov	fp, r5
     50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     510:	7a89      	ldrb	r1, [r1, #10]
     512:	4b44      	ldr	r3, [pc, #272]	; (624 <_i2c_master_read_packet+0x190>)
     514:	4798      	blx	r3
     516:	e7cf      	b.n	4b8 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     518:	464b      	mov	r3, r9
     51a:	881b      	ldrh	r3, [r3, #0]
     51c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     51e:	464a      	mov	r2, r9
     520:	7a52      	ldrb	r2, [r2, #9]
     522:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     524:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     526:	2280      	movs	r2, #128	; 0x80
     528:	0212      	lsls	r2, r2, #8
     52a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     52c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     52e:	0030      	movs	r0, r6
     530:	4b3b      	ldr	r3, [pc, #236]	; (620 <_i2c_master_read_packet+0x18c>)
     532:	4798      	blx	r3
     534:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     536:	686b      	ldr	r3, [r5, #4]
     538:	4a38      	ldr	r2, [pc, #224]	; (61c <_i2c_master_read_packet+0x188>)
     53a:	4013      	ands	r3, r2
     53c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     53e:	2800      	cmp	r0, #0
     540:	d1de      	bne.n	500 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     542:	0030      	movs	r0, r6
     544:	4b38      	ldr	r3, [pc, #224]	; (628 <_i2c_master_read_packet+0x194>)
     546:	4798      	blx	r3
     548:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     54a:	2800      	cmp	r0, #0
     54c:	d1d8      	bne.n	500 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     54e:	464b      	mov	r3, r9
     550:	881b      	ldrh	r3, [r3, #0]
     552:	0a1b      	lsrs	r3, r3, #8
     554:	2278      	movs	r2, #120	; 0x78
     556:	4313      	orrs	r3, r2
     558:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     55a:	464a      	mov	r2, r9
     55c:	7a52      	ldrb	r2, [r2, #9]
     55e:	0392      	lsls	r2, r2, #14
     560:	2101      	movs	r1, #1
     562:	430a      	orrs	r2, r1
     564:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     566:	626b      	str	r3, [r5, #36]	; 0x24
     568:	e7b8      	b.n	4dc <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     56a:	686a      	ldr	r2, [r5, #4]
     56c:	2380      	movs	r3, #128	; 0x80
     56e:	02db      	lsls	r3, r3, #11
     570:	4313      	orrs	r3, r2
     572:	606b      	str	r3, [r5, #4]
     574:	e7c1      	b.n	4fa <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     576:	0030      	movs	r0, r6
     578:	4b2b      	ldr	r3, [pc, #172]	; (628 <_i2c_master_read_packet+0x194>)
     57a:	4798      	blx	r3
     57c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     57e:	2800      	cmp	r0, #0
     580:	d1be      	bne.n	500 <_i2c_master_read_packet+0x6c>
     582:	3c01      	subs	r4, #1
     584:	b2a4      	uxth	r4, r4
     586:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     588:	4b28      	ldr	r3, [pc, #160]	; (62c <_i2c_master_read_packet+0x198>)
     58a:	469b      	mov	fp, r3
     58c:	e015      	b.n	5ba <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     58e:	2c01      	cmp	r4, #1
     590:	d020      	beq.n	5d4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     592:	0030      	movs	r0, r6
     594:	4b26      	ldr	r3, [pc, #152]	; (630 <_i2c_master_read_packet+0x19c>)
     596:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     598:	4643      	mov	r3, r8
     59a:	1c5f      	adds	r7, r3, #1
     59c:	b2bf      	uxth	r7, r7
     59e:	2328      	movs	r3, #40	; 0x28
     5a0:	5ceb      	ldrb	r3, [r5, r3]
     5a2:	464a      	mov	r2, r9
     5a4:	6852      	ldr	r2, [r2, #4]
     5a6:	4641      	mov	r1, r8
     5a8:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     5aa:	0030      	movs	r0, r6
     5ac:	4b1c      	ldr	r3, [pc, #112]	; (620 <_i2c_master_read_packet+0x18c>)
     5ae:	4798      	blx	r3
     5b0:	3c01      	subs	r4, #1
     5b2:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     5b4:	2800      	cmp	r0, #0
     5b6:	d115      	bne.n	5e4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     5b8:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     5ba:	455c      	cmp	r4, fp
     5bc:	d014      	beq.n	5e8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     5be:	8b6b      	ldrh	r3, [r5, #26]
     5c0:	069b      	lsls	r3, r3, #26
     5c2:	d527      	bpl.n	614 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     5c4:	7af3      	ldrb	r3, [r6, #11]
     5c6:	2b00      	cmp	r3, #0
     5c8:	d0e3      	beq.n	592 <_i2c_master_read_packet+0xfe>
     5ca:	4653      	mov	r3, sl
     5cc:	2b00      	cmp	r3, #0
     5ce:	d1de      	bne.n	58e <_i2c_master_read_packet+0xfa>
     5d0:	2c00      	cmp	r4, #0
     5d2:	d1de      	bne.n	592 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5d4:	686a      	ldr	r2, [r5, #4]
     5d6:	2380      	movs	r3, #128	; 0x80
     5d8:	02db      	lsls	r3, r3, #11
     5da:	4313      	orrs	r3, r2
     5dc:	606b      	str	r3, [r5, #4]
     5de:	3c01      	subs	r4, #1
     5e0:	b2a4      	uxth	r4, r4
     5e2:	e7ea      	b.n	5ba <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     5e4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     5e6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     5e8:	7ab3      	ldrb	r3, [r6, #10]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d109      	bne.n	602 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     5ee:	0030      	movs	r0, r6
     5f0:	4b0f      	ldr	r3, [pc, #60]	; (630 <_i2c_master_read_packet+0x19c>)
     5f2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     5f4:	2328      	movs	r3, #40	; 0x28
     5f6:	5cea      	ldrb	r2, [r5, r3]
     5f8:	464b      	mov	r3, r9
     5fa:	685b      	ldr	r3, [r3, #4]
     5fc:	4641      	mov	r1, r8
     5fe:	545a      	strb	r2, [r3, r1]
     600:	e77e      	b.n	500 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     602:	0030      	movs	r0, r6
     604:	4b0a      	ldr	r3, [pc, #40]	; (630 <_i2c_master_read_packet+0x19c>)
     606:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     608:	686a      	ldr	r2, [r5, #4]
     60a:	23c0      	movs	r3, #192	; 0xc0
     60c:	029b      	lsls	r3, r3, #10
     60e:	4313      	orrs	r3, r2
     610:	606b      	str	r3, [r5, #4]
     612:	e7ec      	b.n	5ee <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     614:	2341      	movs	r3, #65	; 0x41
     616:	9301      	str	r3, [sp, #4]
     618:	e772      	b.n	500 <_i2c_master_read_packet+0x6c>
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	fffbffff 	.word	0xfffbffff
     620:	00000449 	.word	0x00000449
     624:	00000475 	.word	0x00000475
     628:	00000419 	.word	0x00000419
     62c:	0000ffff 	.word	0x0000ffff
     630:	00000115 	.word	0x00000115

00000634 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     634:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
     636:	8b83      	ldrh	r3, [r0, #28]
     638:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     63a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     63c:	2b00      	cmp	r3, #0
     63e:	d001      	beq.n	644 <i2c_master_read_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_read_packet(module, packet);
}
     640:	0010      	movs	r0, r2
     642:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     644:	3301      	adds	r3, #1
     646:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     648:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     64a:	4b02      	ldr	r3, [pc, #8]	; (654 <i2c_master_read_packet_wait+0x20>)
     64c:	4798      	blx	r3
     64e:	0002      	movs	r2, r0
     650:	e7f6      	b.n	640 <i2c_master_read_packet_wait+0xc>
     652:	46c0      	nop			; (mov r8, r8)
     654:	00000495 	.word	0x00000495

00000658 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     658:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     65a:	2207      	movs	r2, #7
     65c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     65e:	421a      	tst	r2, r3
     660:	d1fc      	bne.n	65c <_i2c_master_wait_for_sync+0x4>
}
     662:	4770      	bx	lr

00000664 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     664:	b570      	push	{r4, r5, r6, lr}
     666:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     668:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     66a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     66c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     66e:	8b83      	ldrh	r3, [r0, #28]
     670:	1aed      	subs	r5, r5, r3
     672:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     674:	8b83      	ldrh	r3, [r0, #28]
     676:	3b01      	subs	r3, #1
     678:	b29b      	uxth	r3, r3
     67a:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     67c:	0113      	lsls	r3, r2, #4
     67e:	d51d      	bpl.n	6bc <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     680:	7ac3      	ldrb	r3, [r0, #11]
     682:	2b00      	cmp	r3, #0
     684:	d003      	beq.n	68e <_i2c_master_read+0x2a>
     686:	8b83      	ldrh	r3, [r0, #28]
     688:	b29b      	uxth	r3, r3
     68a:	2b01      	cmp	r3, #1
     68c:	d010      	beq.n	6b0 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     68e:	8ba3      	ldrh	r3, [r4, #28]
     690:	b29b      	uxth	r3, r3
     692:	2b00      	cmp	r3, #0
     694:	d102      	bne.n	69c <_i2c_master_read+0x38>
		if (module->send_stop) {
     696:	7aa3      	ldrb	r3, [r4, #10]
     698:	2b00      	cmp	r3, #0
     69a:	d11c      	bne.n	6d6 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     69c:	0020      	movs	r0, r4
     69e:	4b12      	ldr	r3, [pc, #72]	; (6e8 <_i2c_master_read+0x84>)
     6a0:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     6a2:	6a23      	ldr	r3, [r4, #32]
     6a4:	195d      	adds	r5, r3, r5
     6a6:	2328      	movs	r3, #40	; 0x28
     6a8:	5cf3      	ldrb	r3, [r6, r3]
     6aa:	b2db      	uxtb	r3, r3
     6ac:	702b      	strb	r3, [r5, #0]
}
     6ae:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6b0:	6872      	ldr	r2, [r6, #4]
     6b2:	2380      	movs	r3, #128	; 0x80
     6b4:	02db      	lsls	r3, r3, #11
     6b6:	4313      	orrs	r3, r2
     6b8:	6073      	str	r3, [r6, #4]
     6ba:	e7e8      	b.n	68e <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     6bc:	7ac3      	ldrb	r3, [r0, #11]
     6be:	2b00      	cmp	r3, #0
     6c0:	d0e5      	beq.n	68e <_i2c_master_read+0x2a>
     6c2:	8b83      	ldrh	r3, [r0, #28]
     6c4:	b29b      	uxth	r3, r3
     6c6:	2b00      	cmp	r3, #0
     6c8:	d1e1      	bne.n	68e <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6ca:	6872      	ldr	r2, [r6, #4]
     6cc:	2380      	movs	r3, #128	; 0x80
     6ce:	02db      	lsls	r3, r3, #11
     6d0:	4313      	orrs	r3, r2
     6d2:	6073      	str	r3, [r6, #4]
     6d4:	e7db      	b.n	68e <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     6d6:	0020      	movs	r0, r4
     6d8:	4b03      	ldr	r3, [pc, #12]	; (6e8 <_i2c_master_read+0x84>)
     6da:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6dc:	6872      	ldr	r2, [r6, #4]
     6de:	23c0      	movs	r3, #192	; 0xc0
     6e0:	029b      	lsls	r3, r3, #10
     6e2:	4313      	orrs	r3, r2
     6e4:	6073      	str	r3, [r6, #4]
     6e6:	e7d9      	b.n	69c <_i2c_master_read+0x38>
     6e8:	00000659 	.word	0x00000659

000006ec <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     6ec:	b570      	push	{r4, r5, r6, lr}
     6ee:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6f0:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     6f2:	8b6b      	ldrh	r3, [r5, #26]
     6f4:	075b      	lsls	r3, r3, #29
     6f6:	d503      	bpl.n	700 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     6f8:	221e      	movs	r2, #30
     6fa:	2325      	movs	r3, #37	; 0x25
     6fc:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     6fe:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     700:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     702:	8b83      	ldrh	r3, [r0, #28]
     704:	1af6      	subs	r6, r6, r3
     706:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     708:	8b83      	ldrh	r3, [r0, #28]
     70a:	3b01      	subs	r3, #1
     70c:	b29b      	uxth	r3, r3
     70e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     710:	4b04      	ldr	r3, [pc, #16]	; (724 <_i2c_master_write+0x38>)
     712:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     714:	6a23      	ldr	r3, [r4, #32]
     716:	199e      	adds	r6, r3, r6
     718:	7833      	ldrb	r3, [r6, #0]
     71a:	b2db      	uxtb	r3, r3
     71c:	2228      	movs	r2, #40	; 0x28
     71e:	54ab      	strb	r3, [r5, r2]
     720:	e7ed      	b.n	6fe <_i2c_master_write+0x12>
     722:	46c0      	nop			; (mov r8, r8)
     724:	00000659 	.word	0x00000659

00000728 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     728:	b570      	push	{r4, r5, r6, lr}
     72a:	0005      	movs	r5, r0
     72c:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     72e:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     730:	7a4b      	ldrb	r3, [r1, #9]
     732:	2b00      	cmp	r3, #0
     734:	d11a      	bne.n	76c <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     736:	6873      	ldr	r3, [r6, #4]
     738:	4a13      	ldr	r2, [pc, #76]	; (788 <_i2c_master_write_packet+0x60>)
     73a:	4013      	ands	r3, r2
     73c:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     73e:	6863      	ldr	r3, [r4, #4]
     740:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     742:	8863      	ldrh	r3, [r4, #2]
     744:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     746:	2200      	movs	r2, #0
     748:	2324      	movs	r3, #36	; 0x24
     74a:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     74c:	3205      	adds	r2, #5
     74e:	3301      	adds	r3, #1
     750:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     752:	3b22      	subs	r3, #34	; 0x22
     754:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     756:	7a23      	ldrb	r3, [r4, #8]
     758:	2b00      	cmp	r3, #0
     75a:	d10b      	bne.n	774 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     75c:	8823      	ldrh	r3, [r4, #0]
     75e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     760:	7a62      	ldrb	r2, [r4, #9]
     762:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     764:	4313      	orrs	r3, r2
     766:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     768:	2000      	movs	r0, #0
     76a:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     76c:	7a89      	ldrb	r1, [r1, #10]
     76e:	4b07      	ldr	r3, [pc, #28]	; (78c <_i2c_master_write_packet+0x64>)
     770:	4798      	blx	r3
     772:	e7e0      	b.n	736 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     774:	8823      	ldrh	r3, [r4, #0]
     776:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     778:	7a62      	ldrb	r2, [r4, #9]
     77a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     77c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     77e:	2280      	movs	r2, #128	; 0x80
     780:	0212      	lsls	r2, r2, #8
     782:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     784:	6273      	str	r3, [r6, #36]	; 0x24
     786:	e7ef      	b.n	768 <_i2c_master_write_packet+0x40>
     788:	fffbffff 	.word	0xfffbffff
     78c:	00000475 	.word	0x00000475

00000790 <_i2c_master_read_packet>:
{
     790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     792:	0005      	movs	r5, r0
     794:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     796:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     798:	684b      	ldr	r3, [r1, #4]
     79a:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     79c:	884b      	ldrh	r3, [r1, #2]
     79e:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     7a0:	2201      	movs	r2, #1
     7a2:	2324      	movs	r3, #36	; 0x24
     7a4:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     7a6:	3204      	adds	r2, #4
     7a8:	3301      	adds	r3, #1
     7aa:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7ac:	6837      	ldr	r7, [r6, #0]
     7ae:	013f      	lsls	r7, r7, #4
     7b0:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     7b2:	7a4b      	ldrb	r3, [r1, #9]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d117      	bne.n	7e8 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     7b8:	2f00      	cmp	r7, #0
     7ba:	d002      	beq.n	7c2 <_i2c_master_read_packet+0x32>
     7bc:	8863      	ldrh	r3, [r4, #2]
     7be:	2b01      	cmp	r3, #1
     7c0:	d016      	beq.n	7f0 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     7c2:	6873      	ldr	r3, [r6, #4]
     7c4:	4a20      	ldr	r2, [pc, #128]	; (848 <_i2c_master_read_packet+0xb8>)
     7c6:	4013      	ands	r3, r2
     7c8:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     7ca:	7a23      	ldrb	r3, [r4, #8]
     7cc:	2b00      	cmp	r3, #0
     7ce:	d115      	bne.n	7fc <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     7d0:	2303      	movs	r3, #3
     7d2:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7d4:	8823      	ldrh	r3, [r4, #0]
     7d6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     7d8:	7a62      	ldrb	r2, [r4, #9]
     7da:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7dc:	4313      	orrs	r3, r2
     7de:	2201      	movs	r2, #1
     7e0:	4313      	orrs	r3, r2
     7e2:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     7e4:	2000      	movs	r0, #0
}
     7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     7e8:	7a89      	ldrb	r1, [r1, #10]
     7ea:	4b18      	ldr	r3, [pc, #96]	; (84c <_i2c_master_read_packet+0xbc>)
     7ec:	4798      	blx	r3
     7ee:	e7e3      	b.n	7b8 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     7f0:	6872      	ldr	r2, [r6, #4]
     7f2:	2380      	movs	r3, #128	; 0x80
     7f4:	02db      	lsls	r3, r3, #11
     7f6:	4313      	orrs	r3, r2
     7f8:	6073      	str	r3, [r6, #4]
     7fa:	e7e6      	b.n	7ca <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     7fc:	8823      	ldrh	r3, [r4, #0]
     7fe:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     800:	7a62      	ldrb	r2, [r4, #9]
     802:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     804:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     806:	2280      	movs	r2, #128	; 0x80
     808:	0212      	lsls	r2, r2, #8
     80a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     80c:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     80e:	0028      	movs	r0, r5
     810:	4b0f      	ldr	r3, [pc, #60]	; (850 <_i2c_master_read_packet+0xc0>)
     812:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     814:	6873      	ldr	r3, [r6, #4]
     816:	4a0c      	ldr	r2, [pc, #48]	; (848 <_i2c_master_read_packet+0xb8>)
     818:	4013      	ands	r3, r2
     81a:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     81c:	2800      	cmp	r0, #0
     81e:	d1e2      	bne.n	7e6 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     820:	0028      	movs	r0, r5
     822:	4b0c      	ldr	r3, [pc, #48]	; (854 <_i2c_master_read_packet+0xc4>)
     824:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     826:	2800      	cmp	r0, #0
     828:	d1dd      	bne.n	7e6 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     82a:	2303      	movs	r3, #3
     82c:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     82e:	8823      	ldrh	r3, [r4, #0]
     830:	0a1b      	lsrs	r3, r3, #8
     832:	2278      	movs	r2, #120	; 0x78
     834:	4313      	orrs	r3, r2
     836:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     838:	7a62      	ldrb	r2, [r4, #9]
     83a:	0392      	lsls	r2, r2, #14
     83c:	2101      	movs	r1, #1
     83e:	430a      	orrs	r2, r1
     840:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     842:	6273      	str	r3, [r6, #36]	; 0x24
     844:	e7cf      	b.n	7e6 <_i2c_master_read_packet+0x56>
     846:	46c0      	nop			; (mov r8, r8)
     848:	fffbffff 	.word	0xfffbffff
     84c:	00000475 	.word	0x00000475
     850:	00000449 	.word	0x00000449
     854:	00000419 	.word	0x00000419

00000858 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     858:	1c93      	adds	r3, r2, #2
     85a:	009b      	lsls	r3, r3, #2
     85c:	18c3      	adds	r3, r0, r3
     85e:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     860:	7e03      	ldrb	r3, [r0, #24]
     862:	2101      	movs	r1, #1
     864:	4091      	lsls	r1, r2
     866:	430b      	orrs	r3, r1
     868:	b2db      	uxtb	r3, r3
     86a:	7603      	strb	r3, [r0, #24]
}
     86c:	4770      	bx	lr
	...

00000870 <i2c_master_read_packet_job>:
{
     870:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     872:	8b83      	ldrh	r3, [r0, #28]
     874:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     876:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     878:	2b00      	cmp	r3, #0
     87a:	d001      	beq.n	880 <i2c_master_read_packet_job+0x10>
}
     87c:	0010      	movs	r0, r2
     87e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     880:	3301      	adds	r3, #1
     882:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     884:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     886:	4b02      	ldr	r3, [pc, #8]	; (890 <i2c_master_read_packet_job+0x20>)
     888:	4798      	blx	r3
     88a:	0002      	movs	r2, r0
     88c:	e7f6      	b.n	87c <i2c_master_read_packet_job+0xc>
     88e:	46c0      	nop			; (mov r8, r8)
     890:	00000791 	.word	0x00000791

00000894 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     894:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     896:	8b83      	ldrh	r3, [r0, #28]
     898:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     89a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     89c:	2b00      	cmp	r3, #0
     89e:	d001      	beq.n	8a4 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     8a0:	0010      	movs	r0, r2
     8a2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     8a4:	3301      	adds	r3, #1
     8a6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     8a8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     8aa:	4b02      	ldr	r3, [pc, #8]	; (8b4 <i2c_master_write_packet_job+0x20>)
     8ac:	4798      	blx	r3
     8ae:	0002      	movs	r2, r0
     8b0:	e7f6      	b.n	8a0 <i2c_master_write_packet_job+0xc>
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	00000729 	.word	0x00000729

000008b8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     8b8:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     8ba:	0080      	lsls	r0, r0, #2
     8bc:	4b75      	ldr	r3, [pc, #468]	; (a94 <_i2c_master_interrupt_handler+0x1dc>)
     8be:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8c0:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     8c2:	682b      	ldr	r3, [r5, #0]
     8c4:	011b      	lsls	r3, r3, #4
     8c6:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     8c8:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     8ca:	7e26      	ldrb	r6, [r4, #24]
     8cc:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     8ce:	8b63      	ldrh	r3, [r4, #26]
     8d0:	b29b      	uxth	r3, r3
     8d2:	2b00      	cmp	r3, #0
     8d4:	d103      	bne.n	8de <_i2c_master_interrupt_handler+0x26>
     8d6:	8ba3      	ldrh	r3, [r4, #28]
     8d8:	b29b      	uxth	r3, r3
     8da:	2b00      	cmp	r3, #0
     8dc:	d123      	bne.n	926 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0)     && (module->buffer_remaining <= 0) &&
     8de:	8b63      	ldrh	r3, [r4, #26]
     8e0:	b29b      	uxth	r3, r3
     8e2:	2b00      	cmp	r3, #0
     8e4:	d008      	beq.n	8f8 <_i2c_master_interrupt_handler+0x40>
     8e6:	8ba3      	ldrh	r3, [r4, #28]
     8e8:	b29b      	uxth	r3, r3
     8ea:	2b00      	cmp	r3, #0
     8ec:	d104      	bne.n	8f8 <_i2c_master_interrupt_handler+0x40>
			   (module->status == STATUS_BUSY) && (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     8ee:	3325      	adds	r3, #37	; 0x25
     8f0:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0)     && (module->buffer_remaining <= 0) &&
     8f2:	2b05      	cmp	r3, #5
     8f4:	d100      	bne.n	8f8 <_i2c_master_interrupt_handler+0x40>
     8f6:	e06d      	b.n	9d4 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     8f8:	8b63      	ldrh	r3, [r4, #26]
     8fa:	b29b      	uxth	r3, r3
     8fc:	2b00      	cmp	r3, #0
     8fe:	d024      	beq.n	94a <_i2c_master_interrupt_handler+0x92>
     900:	8ba3      	ldrh	r3, [r4, #28]
     902:	b29b      	uxth	r3, r3
     904:	2b00      	cmp	r3, #0
     906:	d020      	beq.n	94a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     908:	8b6b      	ldrh	r3, [r5, #26]
     90a:	069b      	lsls	r3, r3, #26
     90c:	d500      	bpl.n	910 <_i2c_master_interrupt_handler+0x58>
     90e:	e081      	b.n	a14 <_i2c_master_interrupt_handler+0x15c>
     910:	2a00      	cmp	r2, #0
     912:	d004      	beq.n	91e <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     914:	8ba3      	ldrh	r3, [r4, #28]
     916:	b29b      	uxth	r3, r3
     918:	2b01      	cmp	r3, #1
     91a:	d100      	bne.n	91e <_i2c_master_interrupt_handler+0x66>
     91c:	e07a      	b.n	a14 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     91e:	2241      	movs	r2, #65	; 0x41
     920:	2325      	movs	r3, #37	; 0x25
     922:	54e2      	strb	r2, [r4, r3]
     924:	e011      	b.n	94a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     926:	7e2b      	ldrb	r3, [r5, #24]
     928:	07db      	lsls	r3, r3, #31
     92a:	d507      	bpl.n	93c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     92c:	2301      	movs	r3, #1
     92e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     930:	8b6b      	ldrh	r3, [r5, #26]
     932:	079b      	lsls	r3, r3, #30
     934:	d52e      	bpl.n	994 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     936:	2241      	movs	r2, #65	; 0x41
     938:	2325      	movs	r3, #37	; 0x25
     93a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     93c:	8ba3      	ldrh	r3, [r4, #28]
     93e:	b29b      	uxth	r3, r3
     940:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     942:	2325      	movs	r3, #37	; 0x25
     944:	5ce3      	ldrb	r3, [r4, r3]
     946:	2b05      	cmp	r3, #5
     948:	d038      	beq.n	9bc <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     94a:	8b63      	ldrh	r3, [r4, #26]
     94c:	b29b      	uxth	r3, r3
     94e:	2b00      	cmp	r3, #0
     950:	d007      	beq.n	962 <_i2c_master_interrupt_handler+0xaa>
     952:	8ba3      	ldrh	r3, [r4, #28]
     954:	b29b      	uxth	r3, r3
     956:	2b00      	cmp	r3, #0
     958:	d103      	bne.n	962 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     95a:	3325      	adds	r3, #37	; 0x25
     95c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     95e:	2b05      	cmp	r3, #5
     960:	d064      	beq.n	a2c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     962:	2325      	movs	r3, #37	; 0x25
     964:	5ce3      	ldrb	r3, [r4, r3]
     966:	2b05      	cmp	r3, #5
     968:	d013      	beq.n	992 <_i2c_master_interrupt_handler+0xda>
     96a:	2325      	movs	r3, #37	; 0x25
     96c:	5ce3      	ldrb	r3, [r4, r3]
     96e:	2b00      	cmp	r3, #0
     970:	d00f      	beq.n	992 <_i2c_master_interrupt_handler+0xda>
		
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
     972:	2303      	movs	r3, #3
     974:	752b      	strb	r3, [r5, #20]

		module->buffer_length = 0;
     976:	2300      	movs	r3, #0
     978:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     97a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     97c:	3325      	adds	r3, #37	; 0x25
     97e:	5ce3      	ldrb	r3, [r4, r3]
     980:	2b41      	cmp	r3, #65	; 0x41
     982:	d003      	beq.n	98c <_i2c_master_interrupt_handler+0xd4>
     984:	7aa3      	ldrb	r3, [r4, #10]
     986:	2b00      	cmp	r3, #0
     988:	d000      	beq.n	98c <_i2c_master_interrupt_handler+0xd4>
     98a:	e075      	b.n	a78 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     98c:	0773      	lsls	r3, r6, #29
     98e:	d500      	bpl.n	992 <_i2c_master_interrupt_handler+0xda>
     990:	e07b      	b.n	a8a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     992:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     994:	8b6b      	ldrh	r3, [r5, #26]
     996:	075b      	lsls	r3, r3, #29
     998:	d5d0      	bpl.n	93c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     99a:	2218      	movs	r2, #24
     99c:	2325      	movs	r3, #37	; 0x25
     99e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     9a0:	2300      	movs	r3, #0
     9a2:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     9a4:	7aa3      	ldrb	r3, [r4, #10]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d0c8      	beq.n	93c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     9aa:	0020      	movs	r0, r4
     9ac:	4b3a      	ldr	r3, [pc, #232]	; (a98 <_i2c_master_interrupt_handler+0x1e0>)
     9ae:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9b0:	686a      	ldr	r2, [r5, #4]
     9b2:	23c0      	movs	r3, #192	; 0xc0
     9b4:	029b      	lsls	r3, r3, #10
     9b6:	4313      	orrs	r3, r2
     9b8:	606b      	str	r3, [r5, #4]
     9ba:	e7bf      	b.n	93c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     9bc:	331f      	adds	r3, #31
     9be:	5ce3      	ldrb	r3, [r4, r3]
     9c0:	2b00      	cmp	r3, #0
     9c2:	d003      	beq.n	9cc <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     9c4:	0020      	movs	r0, r4
     9c6:	4b35      	ldr	r3, [pc, #212]	; (a9c <_i2c_master_interrupt_handler+0x1e4>)
     9c8:	4798      	blx	r3
     9ca:	e7be      	b.n	94a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     9cc:	0020      	movs	r0, r4
     9ce:	4b34      	ldr	r3, [pc, #208]	; (aa0 <_i2c_master_interrupt_handler+0x1e8>)
     9d0:	4798      	blx	r3
     9d2:	e7ba      	b.n	94a <_i2c_master_interrupt_handler+0x92>
			   (module->status == STATUS_BUSY) && (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     9d4:	331f      	adds	r3, #31
     9d6:	5ce3      	ldrb	r3, [r4, r3]
     9d8:	2b00      	cmp	r3, #0
     9da:	d000      	beq.n	9de <_i2c_master_interrupt_handler+0x126>
     9dc:	e78c      	b.n	8f8 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg	=	SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
     9de:	3303      	adds	r3, #3
     9e0:	752b      	strb	r3, [r5, #20]
		module->buffer_length		=	0;
     9e2:	2300      	movs	r3, #0
     9e4:	8363      	strh	r3, [r4, #26]
		module->status				=	STATUS_OK;
     9e6:	3325      	adds	r3, #37	; 0x25
     9e8:	2200      	movs	r2, #0
     9ea:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     9ec:	7aa3      	ldrb	r3, [r4, #10]
     9ee:	2b00      	cmp	r3, #0
     9f0:	d107      	bne.n	a02 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     9f2:	2301      	movs	r3, #1
     9f4:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     9f6:	07f3      	lsls	r3, r6, #31
     9f8:	d5a7      	bpl.n	94a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     9fa:	68e3      	ldr	r3, [r4, #12]
     9fc:	0020      	movs	r0, r4
     9fe:	4798      	blx	r3
     a00:	e7a3      	b.n	94a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     a02:	0020      	movs	r0, r4
     a04:	4b24      	ldr	r3, [pc, #144]	; (a98 <_i2c_master_interrupt_handler+0x1e0>)
     a06:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a08:	686a      	ldr	r2, [r5, #4]
     a0a:	23c0      	movs	r3, #192	; 0xc0
     a0c:	029b      	lsls	r3, r3, #10
     a0e:	4313      	orrs	r3, r2
     a10:	606b      	str	r3, [r5, #4]
     a12:	e7f0      	b.n	9f6 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     a14:	2324      	movs	r3, #36	; 0x24
     a16:	5ce3      	ldrb	r3, [r4, r3]
     a18:	2b00      	cmp	r3, #0
     a1a:	d103      	bne.n	a24 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     a1c:	0020      	movs	r0, r4
     a1e:	4b20      	ldr	r3, [pc, #128]	; (aa0 <_i2c_master_interrupt_handler+0x1e8>)
     a20:	4798      	blx	r3
     a22:	e792      	b.n	94a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     a24:	0020      	movs	r0, r4
     a26:	4b1d      	ldr	r3, [pc, #116]	; (a9c <_i2c_master_interrupt_handler+0x1e4>)
     a28:	4798      	blx	r3
     a2a:	e78e      	b.n	94a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     a2c:	331f      	adds	r3, #31
     a2e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     a30:	2b01      	cmp	r3, #1
     a32:	d196      	bne.n	962 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     a34:	7e2b      	ldrb	r3, [r5, #24]
     a36:	079b      	lsls	r3, r3, #30
     a38:	d501      	bpl.n	a3e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     a3a:	2302      	movs	r3, #2
     a3c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     a3e:	2303      	movs	r3, #3
     a40:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     a42:	2300      	movs	r3, #0
     a44:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     a46:	3325      	adds	r3, #37	; 0x25
     a48:	2200      	movs	r2, #0
     a4a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     a4c:	07b3      	lsls	r3, r6, #30
     a4e:	d503      	bpl.n	a58 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     a50:	2324      	movs	r3, #36	; 0x24
     a52:	5ce3      	ldrb	r3, [r4, r3]
     a54:	2b01      	cmp	r3, #1
     a56:	d00b      	beq.n	a70 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     a58:	07f3      	lsls	r3, r6, #31
     a5a:	d400      	bmi.n	a5e <_i2c_master_interrupt_handler+0x1a6>
     a5c:	e781      	b.n	962 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     a5e:	2324      	movs	r3, #36	; 0x24
     a60:	5ce3      	ldrb	r3, [r4, r3]
     a62:	2b00      	cmp	r3, #0
     a64:	d000      	beq.n	a68 <_i2c_master_interrupt_handler+0x1b0>
     a66:	e77c      	b.n	962 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     a68:	68e3      	ldr	r3, [r4, #12]
     a6a:	0020      	movs	r0, r4
     a6c:	4798      	blx	r3
     a6e:	e778      	b.n	962 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     a70:	6923      	ldr	r3, [r4, #16]
     a72:	0020      	movs	r0, r4
     a74:	4798      	blx	r3
     a76:	e774      	b.n	962 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     a78:	0020      	movs	r0, r4
     a7a:	4b07      	ldr	r3, [pc, #28]	; (a98 <_i2c_master_interrupt_handler+0x1e0>)
     a7c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     a7e:	686a      	ldr	r2, [r5, #4]
     a80:	23e0      	movs	r3, #224	; 0xe0
     a82:	02db      	lsls	r3, r3, #11
     a84:	4313      	orrs	r3, r2
     a86:	606b      	str	r3, [r5, #4]
     a88:	e780      	b.n	98c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     a8a:	6963      	ldr	r3, [r4, #20]
     a8c:	0020      	movs	r0, r4
     a8e:	4798      	blx	r3
}
     a90:	e77f      	b.n	992 <_i2c_master_interrupt_handler+0xda>
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	20000f3c 	.word	0x20000f3c
     a98:	00000659 	.word	0x00000659
     a9c:	00000665 	.word	0x00000665
     aa0:	000006ed 	.word	0x000006ed

00000aa4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa6:	46c6      	mov	lr, r8
     aa8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     aaa:	0080      	lsls	r0, r0, #2
     aac:	4b0e      	ldr	r3, [pc, #56]	; (ae8 <_tcc_interrupt_handler+0x44>)
     aae:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     ab0:	683b      	ldr	r3, [r7, #0]
     ab2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ab8:	4013      	ands	r3, r2
     aba:	401e      	ands	r6, r3
     abc:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     abe:	4b0b      	ldr	r3, [pc, #44]	; (aec <_tcc_interrupt_handler+0x48>)
     ac0:	4698      	mov	r8, r3
     ac2:	e002      	b.n	aca <_tcc_interrupt_handler+0x26>
     ac4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     ac6:	2c30      	cmp	r4, #48	; 0x30
     ac8:	d00a      	beq.n	ae0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     aca:	4643      	mov	r3, r8
     acc:	58e5      	ldr	r5, [r4, r3]
     ace:	4235      	tst	r5, r6
     ad0:	d0f8      	beq.n	ac4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     ad2:	193b      	adds	r3, r7, r4
     ad4:	685b      	ldr	r3, [r3, #4]
     ad6:	0038      	movs	r0, r7
     ad8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     ada:	683b      	ldr	r3, [r7, #0]
     adc:	62dd      	str	r5, [r3, #44]	; 0x2c
     ade:	e7f1      	b.n	ac4 <_tcc_interrupt_handler+0x20>
		}
	}
}
     ae0:	bc04      	pop	{r2}
     ae2:	4690      	mov	r8, r2
     ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	20000df8 	.word	0x20000df8
     aec:	00005380 	.word	0x00005380

00000af0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     af0:	b510      	push	{r4, lr}
     af2:	2000      	movs	r0, #0
     af4:	4b01      	ldr	r3, [pc, #4]	; (afc <TCC0_Handler+0xc>)
     af6:	4798      	blx	r3
     af8:	bd10      	pop	{r4, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	00000aa5 	.word	0x00000aa5

00000b00 <TCC1_Handler>:
     b00:	b510      	push	{r4, lr}
     b02:	2001      	movs	r0, #1
     b04:	4b01      	ldr	r3, [pc, #4]	; (b0c <TCC1_Handler+0xc>)
     b06:	4798      	blx	r3
     b08:	bd10      	pop	{r4, pc}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	00000aa5 	.word	0x00000aa5

00000b10 <TCC2_Handler>:
     b10:	b510      	push	{r4, lr}
     b12:	2002      	movs	r0, #2
     b14:	4b01      	ldr	r3, [pc, #4]	; (b1c <TCC2_Handler+0xc>)
     b16:	4798      	blx	r3
     b18:	bd10      	pop	{r4, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	00000aa5 	.word	0x00000aa5

00000b20 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     b20:	1c93      	adds	r3, r2, #2
     b22:	009b      	lsls	r3, r3, #2
     b24:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     b26:	2a02      	cmp	r2, #2
     b28:	d009      	beq.n	b3e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     b2a:	2a03      	cmp	r2, #3
     b2c:	d00c      	beq.n	b48 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     b2e:	2301      	movs	r3, #1
     b30:	4093      	lsls	r3, r2
     b32:	001a      	movs	r2, r3
     b34:	7e03      	ldrb	r3, [r0, #24]
     b36:	4313      	orrs	r3, r2
     b38:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     b3a:	2000      	movs	r0, #0
     b3c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     b3e:	7e03      	ldrb	r3, [r0, #24]
     b40:	2210      	movs	r2, #16
     b42:	4313      	orrs	r3, r2
     b44:	7603      	strb	r3, [r0, #24]
     b46:	e7f8      	b.n	b3a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     b48:	7e03      	ldrb	r3, [r0, #24]
     b4a:	2220      	movs	r2, #32
     b4c:	4313      	orrs	r3, r2
     b4e:	7603      	strb	r3, [r0, #24]
     b50:	e7f3      	b.n	b3a <tc_register_callback+0x1a>
	...

00000b54 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     b54:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     b56:	0080      	lsls	r0, r0, #2
     b58:	4b16      	ldr	r3, [pc, #88]	; (bb4 <_tc_interrupt_handler+0x60>)
     b5a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     b5c:	6823      	ldr	r3, [r4, #0]
     b5e:	7b9d      	ldrb	r5, [r3, #14]
     b60:	7e22      	ldrb	r2, [r4, #24]
     b62:	7e63      	ldrb	r3, [r4, #25]
     b64:	4013      	ands	r3, r2
     b66:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     b68:	07eb      	lsls	r3, r5, #31
     b6a:	d406      	bmi.n	b7a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     b6c:	07ab      	lsls	r3, r5, #30
     b6e:	d40b      	bmi.n	b88 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     b70:	06eb      	lsls	r3, r5, #27
     b72:	d410      	bmi.n	b96 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     b74:	06ab      	lsls	r3, r5, #26
     b76:	d415      	bmi.n	ba4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     b78:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     b7a:	0020      	movs	r0, r4
     b7c:	68a3      	ldr	r3, [r4, #8]
     b7e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     b80:	2301      	movs	r3, #1
     b82:	6822      	ldr	r2, [r4, #0]
     b84:	7393      	strb	r3, [r2, #14]
     b86:	e7f1      	b.n	b6c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     b88:	0020      	movs	r0, r4
     b8a:	68e3      	ldr	r3, [r4, #12]
     b8c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     b8e:	2302      	movs	r3, #2
     b90:	6822      	ldr	r2, [r4, #0]
     b92:	7393      	strb	r3, [r2, #14]
     b94:	e7ec      	b.n	b70 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     b96:	0020      	movs	r0, r4
     b98:	6923      	ldr	r3, [r4, #16]
     b9a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     b9c:	2310      	movs	r3, #16
     b9e:	6822      	ldr	r2, [r4, #0]
     ba0:	7393      	strb	r3, [r2, #14]
     ba2:	e7e7      	b.n	b74 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     ba4:	0020      	movs	r0, r4
     ba6:	6963      	ldr	r3, [r4, #20]
     ba8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     baa:	6823      	ldr	r3, [r4, #0]
     bac:	2220      	movs	r2, #32
     bae:	739a      	strb	r2, [r3, #14]
}
     bb0:	e7e2      	b.n	b78 <_tc_interrupt_handler+0x24>
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	20000e04 	.word	0x20000e04

00000bb8 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     bb8:	b510      	push	{r4, lr}
     bba:	2000      	movs	r0, #0
     bbc:	4b01      	ldr	r3, [pc, #4]	; (bc4 <TC3_Handler+0xc>)
     bbe:	4798      	blx	r3
     bc0:	bd10      	pop	{r4, pc}
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	00000b55 	.word	0x00000b55

00000bc8 <TC4_Handler>:
     bc8:	b510      	push	{r4, lr}
     bca:	2001      	movs	r0, #1
     bcc:	4b01      	ldr	r3, [pc, #4]	; (bd4 <TC4_Handler+0xc>)
     bce:	4798      	blx	r3
     bd0:	bd10      	pop	{r4, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	00000b55 	.word	0x00000b55

00000bd8 <TC5_Handler>:
     bd8:	b510      	push	{r4, lr}
     bda:	2002      	movs	r0, #2
     bdc:	4b01      	ldr	r3, [pc, #4]	; (be4 <TC5_Handler+0xc>)
     bde:	4798      	blx	r3
     be0:	bd10      	pop	{r4, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	00000b55 	.word	0x00000b55

00000be8 <TC6_Handler>:
     be8:	b510      	push	{r4, lr}
     bea:	2003      	movs	r0, #3
     bec:	4b01      	ldr	r3, [pc, #4]	; (bf4 <TC6_Handler+0xc>)
     bee:	4798      	blx	r3
     bf0:	bd10      	pop	{r4, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	00000b55 	.word	0x00000b55

00000bf8 <TC7_Handler>:
     bf8:	b510      	push	{r4, lr}
     bfa:	2004      	movs	r0, #4
     bfc:	4b01      	ldr	r3, [pc, #4]	; (c04 <TC7_Handler+0xc>)
     bfe:	4798      	blx	r3
     c00:	bd10      	pop	{r4, pc}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	00000b55 	.word	0x00000b55

00000c08 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     c08:	b530      	push	{r4, r5, lr}
     c0a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     c0c:	a901      	add	r1, sp, #4
     c0e:	4b0c      	ldr	r3, [pc, #48]	; (c40 <_tc_get_inst_index+0x38>)
     c10:	000a      	movs	r2, r1
     c12:	cb32      	ldmia	r3!, {r1, r4, r5}
     c14:	c232      	stmia	r2!, {r1, r4, r5}
     c16:	cb12      	ldmia	r3!, {r1, r4}
     c18:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     c1a:	9b01      	ldr	r3, [sp, #4]
     c1c:	4298      	cmp	r0, r3
     c1e:	d00b      	beq.n	c38 <_tc_get_inst_index+0x30>
     c20:	2301      	movs	r3, #1
     c22:	a901      	add	r1, sp, #4
     c24:	009a      	lsls	r2, r3, #2
     c26:	5852      	ldr	r2, [r2, r1]
     c28:	4282      	cmp	r2, r0
     c2a:	d006      	beq.n	c3a <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     c2c:	3301      	adds	r3, #1
     c2e:	2b05      	cmp	r3, #5
     c30:	d1f8      	bne.n	c24 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     c32:	2000      	movs	r0, #0
}
     c34:	b007      	add	sp, #28
     c36:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     c38:	2300      	movs	r3, #0
			return i;
     c3a:	b2d8      	uxtb	r0, r3
     c3c:	e7fa      	b.n	c34 <_tc_get_inst_index+0x2c>
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	000053b0 	.word	0x000053b0

00000c44 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     c44:	b5f0      	push	{r4, r5, r6, r7, lr}
     c46:	b089      	sub	sp, #36	; 0x24
     c48:	0004      	movs	r4, r0
     c4a:	000d      	movs	r5, r1
     c4c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     c4e:	0008      	movs	r0, r1
     c50:	4b84      	ldr	r3, [pc, #528]	; (e64 <tc_init+0x220>)
     c52:	4798      	blx	r3
     c54:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     c56:	ab06      	add	r3, sp, #24
     c58:	221b      	movs	r2, #27
     c5a:	701a      	strb	r2, [r3, #0]
     c5c:	3201      	adds	r2, #1
     c5e:	705a      	strb	r2, [r3, #1]
     c60:	709a      	strb	r2, [r3, #2]
     c62:	3201      	adds	r2, #1
     c64:	70da      	strb	r2, [r3, #3]
     c66:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     c68:	3a13      	subs	r2, #19
     c6a:	497f      	ldr	r1, [pc, #508]	; (e68 <tc_init+0x224>)
     c6c:	3114      	adds	r1, #20
     c6e:	a803      	add	r0, sp, #12
     c70:	4b7e      	ldr	r3, [pc, #504]	; (e6c <tc_init+0x228>)
     c72:	4798      	blx	r3
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     c74:	2300      	movs	r3, #0
     c76:	60a3      	str	r3, [r4, #8]
     c78:	60e3      	str	r3, [r4, #12]
     c7a:	6123      	str	r3, [r4, #16]
     c7c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     c7e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     c80:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     c82:	00ba      	lsls	r2, r7, #2
     c84:	4b7a      	ldr	r3, [pc, #488]	; (e70 <tc_init+0x22c>)
     c86:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     c88:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     c8a:	78b3      	ldrb	r3, [r6, #2]
     c8c:	2b08      	cmp	r3, #8
     c8e:	d006      	beq.n	c9e <tc_init+0x5a>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     c90:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     c92:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     c94:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     c96:	07db      	lsls	r3, r3, #31
     c98:	d505      	bpl.n	ca6 <tc_init+0x62>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     c9a:	b009      	add	sp, #36	; 0x24
     c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     c9e:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     ca0:	07fa      	lsls	r2, r7, #31
     ca2:	d5fa      	bpl.n	c9a <tc_init+0x56>
     ca4:	e7f4      	b.n	c90 <tc_init+0x4c>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     ca6:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     ca8:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     caa:	06db      	lsls	r3, r3, #27
     cac:	d4f5      	bmi.n	c9a <tc_init+0x56>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     cae:	882b      	ldrh	r3, [r5, #0]
     cb0:	079b      	lsls	r3, r3, #30
     cb2:	d4f2      	bmi.n	c9a <tc_init+0x56>
	if (config->pwm_channel[0].enabled) {
     cb4:	7c33      	ldrb	r3, [r6, #16]
     cb6:	2b00      	cmp	r3, #0
     cb8:	d179      	bne.n	dae <tc_init+0x16a>
	if (config->pwm_channel[1].enabled) {
     cba:	7f33      	ldrb	r3, [r6, #28]
     cbc:	2b00      	cmp	r3, #0
     cbe:	d000      	beq.n	cc2 <tc_init+0x7e>
     cc0:	e081      	b.n	dc6 <tc_init+0x182>
     cc2:	496c      	ldr	r1, [pc, #432]	; (e74 <tc_init+0x230>)
     cc4:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     cc6:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     cc8:	ab03      	add	r3, sp, #12
     cca:	5ad3      	ldrh	r3, [r2, r3]
     ccc:	4303      	orrs	r3, r0
     cce:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     cd0:	78b3      	ldrb	r3, [r6, #2]
     cd2:	2b08      	cmp	r3, #8
     cd4:	d100      	bne.n	cd8 <tc_init+0x94>
     cd6:	e086      	b.n	de6 <tc_init+0x1a2>
	gclk_chan_config.source_generator = config->clock_source;
     cd8:	a901      	add	r1, sp, #4
     cda:	7833      	ldrb	r3, [r6, #0]
     cdc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     cde:	ab06      	add	r3, sp, #24
     ce0:	5ddf      	ldrb	r7, [r3, r7]
     ce2:	0038      	movs	r0, r7
     ce4:	4b64      	ldr	r3, [pc, #400]	; (e78 <tc_init+0x234>)
     ce6:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     ce8:	0038      	movs	r0, r7
     cea:	4b64      	ldr	r3, [pc, #400]	; (e7c <tc_init+0x238>)
     cec:	4798      	blx	r3
	ctrla_tmp =
     cee:	8931      	ldrh	r1, [r6, #8]
     cf0:	88b3      	ldrh	r3, [r6, #4]
     cf2:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     cf4:	78b1      	ldrb	r1, [r6, #2]
     cf6:	79b2      	ldrb	r2, [r6, #6]
     cf8:	4311      	orrs	r1, r2
	ctrla_tmp =
     cfa:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     cfc:	7873      	ldrb	r3, [r6, #1]
     cfe:	2b00      	cmp	r3, #0
     d00:	d002      	beq.n	d08 <tc_init+0xc4>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     d02:	2380      	movs	r3, #128	; 0x80
     d04:	011b      	lsls	r3, r3, #4
     d06:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d08:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d0a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d0c:	b25b      	sxtb	r3, r3
     d0e:	2b00      	cmp	r3, #0
     d10:	dbfb      	blt.n	d0a <tc_init+0xc6>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     d12:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     d14:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     d16:	1e4b      	subs	r3, r1, #1
     d18:	4199      	sbcs	r1, r3
     d1a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     d1c:	7bb3      	ldrb	r3, [r6, #14]
     d1e:	2b00      	cmp	r3, #0
     d20:	d001      	beq.n	d26 <tc_init+0xe2>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     d22:	2301      	movs	r3, #1
     d24:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d26:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d28:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d2a:	b25b      	sxtb	r3, r3
     d2c:	2b00      	cmp	r3, #0
     d2e:	dbfb      	blt.n	d28 <tc_init+0xe4>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     d30:	23ff      	movs	r3, #255	; 0xff
     d32:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     d34:	2900      	cmp	r1, #0
     d36:	d005      	beq.n	d44 <tc_init+0x100>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d38:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d3a:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     d3c:	b25b      	sxtb	r3, r3
     d3e:	2b00      	cmp	r3, #0
     d40:	dbfb      	blt.n	d3a <tc_init+0xf6>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     d42:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     d44:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     d46:	7af3      	ldrb	r3, [r6, #11]
     d48:	2b00      	cmp	r3, #0
     d4a:	d001      	beq.n	d50 <tc_init+0x10c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     d4c:	2310      	movs	r3, #16
     d4e:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     d50:	7b33      	ldrb	r3, [r6, #12]
     d52:	2b00      	cmp	r3, #0
     d54:	d001      	beq.n	d5a <tc_init+0x116>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     d56:	2320      	movs	r3, #32
     d58:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d5a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d5c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d5e:	b25b      	sxtb	r3, r3
     d60:	2b00      	cmp	r3, #0
     d62:	dbfb      	blt.n	d5c <tc_init+0x118>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     d64:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d66:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d68:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d6a:	b25b      	sxtb	r3, r3
     d6c:	2b00      	cmp	r3, #0
     d6e:	dbfb      	blt.n	d68 <tc_init+0x124>
	switch (module_inst->counter_size) {
     d70:	7923      	ldrb	r3, [r4, #4]
     d72:	2b04      	cmp	r3, #4
     d74:	d03f      	beq.n	df6 <tc_init+0x1b2>
     d76:	2b08      	cmp	r3, #8
     d78:	d05e      	beq.n	e38 <tc_init+0x1f4>
	return STATUS_ERR_INVALID_ARG;
     d7a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     d7c:	2b00      	cmp	r3, #0
     d7e:	d000      	beq.n	d82 <tc_init+0x13e>
     d80:	e78b      	b.n	c9a <tc_init+0x56>
     d82:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d84:	b25b      	sxtb	r3, r3
     d86:	2b00      	cmp	r3, #0
     d88:	dbfb      	blt.n	d82 <tc_init+0x13e>
				= config->counter_16_bit.value;
     d8a:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     d8c:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d8e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d90:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d92:	b25b      	sxtb	r3, r3
     d94:	2b00      	cmp	r3, #0
     d96:	dbfb      	blt.n	d90 <tc_init+0x14c>
					config->counter_16_bit.compare_capture_channel[0];
     d98:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     d9a:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d9c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d9e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     da0:	b25b      	sxtb	r3, r3
     da2:	2b00      	cmp	r3, #0
     da4:	dbfb      	blt.n	d9e <tc_init+0x15a>
					config->counter_16_bit.compare_capture_channel[1];
     da6:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     da8:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     daa:	2000      	movs	r0, #0
     dac:	e775      	b.n	c9a <tc_init+0x56>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dae:	a902      	add	r1, sp, #8
     db0:	2301      	movs	r3, #1
     db2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     db4:	2200      	movs	r2, #0
     db6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     db8:	7e32      	ldrb	r2, [r6, #24]
     dba:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     dbc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     dbe:	7d30      	ldrb	r0, [r6, #20]
     dc0:	4b2f      	ldr	r3, [pc, #188]	; (e80 <tc_init+0x23c>)
     dc2:	4798      	blx	r3
     dc4:	e779      	b.n	cba <tc_init+0x76>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dc6:	a902      	add	r1, sp, #8
     dc8:	2301      	movs	r3, #1
     dca:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     dcc:	2200      	movs	r2, #0
     dce:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     dd0:	3224      	adds	r2, #36	; 0x24
     dd2:	18b2      	adds	r2, r6, r2
     dd4:	7812      	ldrb	r2, [r2, #0]
     dd6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     dd8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     dda:	331f      	adds	r3, #31
     ddc:	18f3      	adds	r3, r6, r3
     dde:	7818      	ldrb	r0, [r3, #0]
     de0:	4b27      	ldr	r3, [pc, #156]	; (e80 <tc_init+0x23c>)
     de2:	4798      	blx	r3
     de4:	e76d      	b.n	cc2 <tc_init+0x7e>
     de6:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     de8:	1c7a      	adds	r2, r7, #1
     dea:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     dec:	ab03      	add	r3, sp, #12
     dee:	5ad3      	ldrh	r3, [r2, r3]
     df0:	4303      	orrs	r3, r0
     df2:	620b      	str	r3, [r1, #32]
     df4:	e770      	b.n	cd8 <tc_init+0x94>
     df6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     df8:	b25b      	sxtb	r3, r3
     dfa:	2b00      	cmp	r3, #0
     dfc:	dbfb      	blt.n	df6 <tc_init+0x1b2>
					config->counter_8_bit.value;
     dfe:	2328      	movs	r3, #40	; 0x28
     e00:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     e02:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e04:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e06:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e08:	b25b      	sxtb	r3, r3
     e0a:	2b00      	cmp	r3, #0
     e0c:	dbfb      	blt.n	e06 <tc_init+0x1c2>
					config->counter_8_bit.period;
     e0e:	2329      	movs	r3, #41	; 0x29
     e10:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     e12:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e14:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e16:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e18:	b25b      	sxtb	r3, r3
     e1a:	2b00      	cmp	r3, #0
     e1c:	dbfb      	blt.n	e16 <tc_init+0x1d2>
					config->counter_8_bit.compare_capture_channel[0];
     e1e:	232a      	movs	r3, #42	; 0x2a
     e20:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     e22:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e24:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e26:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e28:	b25b      	sxtb	r3, r3
     e2a:	2b00      	cmp	r3, #0
     e2c:	dbfb      	blt.n	e26 <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
     e2e:	232b      	movs	r3, #43	; 0x2b
     e30:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     e32:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     e34:	2000      	movs	r0, #0
     e36:	e730      	b.n	c9a <tc_init+0x56>
     e38:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e3a:	b25b      	sxtb	r3, r3
     e3c:	2b00      	cmp	r3, #0
     e3e:	dbfb      	blt.n	e38 <tc_init+0x1f4>
				= config->counter_32_bit.value;
     e40:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     e42:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e44:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e46:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e48:	b25b      	sxtb	r3, r3
     e4a:	2b00      	cmp	r3, #0
     e4c:	dbfb      	blt.n	e46 <tc_init+0x202>
			hw->COUNT32.CC[0].reg =
     e4e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     e50:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e52:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e54:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e56:	b25b      	sxtb	r3, r3
     e58:	2b00      	cmp	r3, #0
     e5a:	dbfb      	blt.n	e54 <tc_init+0x210>
					config->counter_32_bit.compare_capture_channel[1];
     e5c:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     e5e:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     e60:	2000      	movs	r0, #0
     e62:	e71a      	b.n	c9a <tc_init+0x56>
     e64:	00000c09 	.word	0x00000c09
     e68:	000053b0 	.word	0x000053b0
     e6c:	00005289 	.word	0x00005289
     e70:	20000e04 	.word	0x20000e04
     e74:	40000400 	.word	0x40000400
     e78:	00003525 	.word	0x00003525
     e7c:	00003499 	.word	0x00003499
     e80:	0000361d 	.word	0x0000361d

00000e84 <resetOutput>:



void resetOutput(uint8_t port)
{
	outputPort[port].address			=		0x00;
     e84:	4b05      	ldr	r3, [pc, #20]	; (e9c <resetOutput+0x18>)
     e86:	00c0      	lsls	r0, r0, #3
     e88:	2200      	movs	r2, #0
     e8a:	54c2      	strb	r2, [r0, r3]
	outputPort[port].readDataLength     =		0x00;
     e8c:	1818      	adds	r0, r3, r0
     e8e:	70c2      	strb	r2, [r0, #3]
	outputPort[port].writeDataLength1   =		0x00;
     e90:	7102      	strb	r2, [r0, #4]
	outputPort[port].writeDataLength2   =		0x00;
     e92:	7142      	strb	r2, [r0, #5]
	outputPort[port].initialization     =       false;
     e94:	7182      	strb	r2, [r0, #6]
	outputPort[port].currentState		=		NOTHINGCONNECTED;
     e96:	7042      	strb	r2, [r0, #1]
};
     e98:	4770      	bx	lr
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	200010d4 	.word	0x200010d4

00000ea0 <checkSetOutputs>:



void  checkSetOutputs()
{
     ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ea2:	b085      	sub	sp, #20
     ea4:	2400      	movs	r4, #0
	//delay_cycles_ms(5);
	//outputPort[3].currentState		  =		OUTPUT_LEDMATRIX;
	
	for(i=0; i<NO_OUTPUTS;i++)
	{
		outputConnected	= outputsConnected[i];
     ea6:	4f25      	ldr	r7, [pc, #148]	; (f3c <checkSetOutputs+0x9c>)
		if(outputConnected != outputPort[i].currentState)
     ea8:	4e25      	ldr	r6, [pc, #148]	; (f40 <checkSetOutputs+0xa0>)
     eaa:	e009      	b.n	ec0 <checkSetOutputs+0x20>
						}
					}
					break;
					
				case NOTHINGCONNECTED:
					switch(outputPort[i].currentState)
     eac:	00e2      	lsls	r2, r4, #3
     eae:	4b24      	ldr	r3, [pc, #144]	; (f40 <checkSetOutputs+0xa0>)
     eb0:	469c      	mov	ip, r3
     eb2:	4462      	add	r2, ip
     eb4:	7853      	ldrb	r3, [r2, #1]
     eb6:	2b03      	cmp	r3, #3
     eb8:	d037      	beq.n	f2a <checkSetOutputs+0x8a>
     eba:	3401      	adds	r4, #1
	for(i=0; i<NO_OUTPUTS;i++)
     ebc:	2c04      	cmp	r4, #4
     ebe:	d032      	beq.n	f26 <checkSetOutputs+0x86>
     ec0:	b2e5      	uxtb	r5, r4
		outputConnected	= outputsConnected[i];
     ec2:	5d39      	ldrb	r1, [r7, r4]
		if(outputConnected != outputPort[i].currentState)
     ec4:	00e3      	lsls	r3, r4, #3
     ec6:	18f3      	adds	r3, r6, r3
     ec8:	785b      	ldrb	r3, [r3, #1]
     eca:	b2db      	uxtb	r3, r3
     ecc:	4299      	cmp	r1, r3
     ece:	d0f4      	beq.n	eba <checkSetOutputs+0x1a>
			switch(outputConnected)
     ed0:	2900      	cmp	r1, #0
     ed2:	d0eb      	beq.n	eac <checkSetOutputs+0xc>
     ed4:	2903      	cmp	r1, #3
     ed6:	d1f0      	bne.n	eba <checkSetOutputs+0x1a>
					if(i == 3) // Temporary
     ed8:	2d03      	cmp	r5, #3
     eda:	d1ee      	bne.n	eba <checkSetOutputs+0x1a>
						if(outputPort[i].initialization	  == 		false)
     edc:	4b18      	ldr	r3, [pc, #96]	; (f40 <checkSetOutputs+0xa0>)
     ede:	7f9b      	ldrb	r3, [r3, #30]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d120      	bne.n	f26 <checkSetOutputs+0x86>
							outputPort[i].address 			  =		LEDMATRIX_I2C_SLAVE_ADDRESS;
     ee4:	4c16      	ldr	r4, [pc, #88]	; (f40 <checkSetOutputs+0xa0>)
     ee6:	3311      	adds	r3, #17
     ee8:	7623      	strb	r3, [r4, #24]
							outputPort[i].readDataLength     =		LEDMATRIX_READ_DATA_LENGTH;
     eea:	3b0f      	subs	r3, #15
     eec:	76e3      	strb	r3, [r4, #27]
							outputPort[i].writeDataLength1   =		LEDMATRIX_WRITE_DATA_LENGTH_1;
     eee:	3347      	adds	r3, #71	; 0x47
     ef0:	7723      	strb	r3, [r4, #28]
							outputPort[i].writeDataLength2   =		LEDMATRIX_WRITE_DATA_LENGTH_2;
     ef2:	3502      	adds	r5, #2
     ef4:	7765      	strb	r5, [r4, #29]
							enableI2CModule(i+1);
     ef6:	2004      	movs	r0, #4
     ef8:	4b12      	ldr	r3, [pc, #72]	; (f44 <checkSetOutputs+0xa4>)
     efa:	4798      	blx	r3
								.address     = outputPort[i].address ,
     efc:	7e23      	ldrb	r3, [r4, #24]
							struct i2c_master_packet wr_packet = {
     efe:	a901      	add	r1, sp, #4
     f00:	800b      	strh	r3, [r1, #0]
								.data_length = outputPort[i].writeDataLength1,
     f02:	7f23      	ldrb	r3, [r4, #28]
							struct i2c_master_packet wr_packet = {
     f04:	804b      	strh	r3, [r1, #2]
     f06:	4b10      	ldr	r3, [pc, #64]	; (f48 <checkSetOutputs+0xa8>)
     f08:	604b      	str	r3, [r1, #4]
     f0a:	2300      	movs	r3, #0
     f0c:	720b      	strb	r3, [r1, #8]
     f0e:	724b      	strb	r3, [r1, #9]
     f10:	728b      	strb	r3, [r1, #10]
							I2CWrite((i+1) , &wr_packet);
     f12:	2004      	movs	r0, #4
     f14:	4b0d      	ldr	r3, [pc, #52]	; (f4c <checkSetOutputs+0xac>)
     f16:	4798      	blx	r3
							delay_cycles_ms(5);
     f18:	0028      	movs	r0, r5
     f1a:	4b0d      	ldr	r3, [pc, #52]	; (f50 <checkSetOutputs+0xb0>)
     f1c:	4798      	blx	r3
							outputPort[i].initialization	  =		true;
     f1e:	2301      	movs	r3, #1
     f20:	77a3      	strb	r3, [r4, #30]
							outputPort[i].currentState		  =		OUTPUT_LEDMATRIX;
     f22:	3302      	adds	r3, #2
     f24:	7663      	strb	r3, [r4, #25]
		}
		
	}
	
	
}
     f26:	b005      	add	sp, #20
     f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
							resetOutput(i);
     f2a:	0028      	movs	r0, r5
     f2c:	4b09      	ldr	r3, [pc, #36]	; (f54 <checkSetOutputs+0xb4>)
     f2e:	4798      	blx	r3
							disableI2CModule(i+1);
     f30:	3501      	adds	r5, #1
     f32:	b2e8      	uxtb	r0, r5
     f34:	4b08      	ldr	r3, [pc, #32]	; (f58 <checkSetOutputs+0xb8>)
     f36:	4798      	blx	r3
							break;
     f38:	e7bf      	b.n	eba <checkSetOutputs+0x1a>
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	20000f74 	.word	0x20000f74
     f40:	200010d4 	.word	0x200010d4
     f44:	00001255 	.word	0x00001255
     f48:	20000000 	.word	0x20000000
     f4c:	000010a9 	.word	0x000010a9
     f50:	00001759 	.word	0x00001759
     f54:	00000e85 	.word	0x00000e85
     f58:	000013b9 	.word	0x000013b9

00000f5c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     f5c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     f5e:	2207      	movs	r2, #7
     f60:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     f62:	421a      	tst	r2, r3
     f64:	d1fc      	bne.n	f60 <_i2c_master_wait_for_sync+0x4>
}
     f66:	4770      	bx	lr

00000f68 <i2c_read_complete_callback_1>:
	}
}

void i2c_read_complete_callback_1(struct i2c_master_module *const module)
{
	outputPort[0].I2CStatus = IDLE_MODE;
     f68:	2201      	movs	r2, #1
     f6a:	4b01      	ldr	r3, [pc, #4]	; (f70 <i2c_read_complete_callback_1+0x8>)
     f6c:	71da      	strb	r2, [r3, #7]
}
     f6e:	4770      	bx	lr
     f70:	200010d4 	.word	0x200010d4

00000f74 <i2c_read_complete_callback_2>:

void i2c_read_complete_callback_2(struct i2c_master_module *const module)
{
	outputPort[1].I2CStatus = IDLE_MODE;
     f74:	2201      	movs	r2, #1
     f76:	4b01      	ldr	r3, [pc, #4]	; (f7c <i2c_read_complete_callback_2+0x8>)
     f78:	73da      	strb	r2, [r3, #15]
}
     f7a:	4770      	bx	lr
     f7c:	200010d4 	.word	0x200010d4

00000f80 <i2c_read_complete_callback_3>:

void i2c_read_complete_callback_3(struct i2c_master_module *const module)
{
	outputPort[2].I2CStatus = IDLE_MODE;
     f80:	2201      	movs	r2, #1
     f82:	4b01      	ldr	r3, [pc, #4]	; (f88 <i2c_read_complete_callback_3+0x8>)
     f84:	75da      	strb	r2, [r3, #23]
}
     f86:	4770      	bx	lr
     f88:	200010d4 	.word	0x200010d4

00000f8c <i2c_write_complete_callback_1>:
	rd_packet_1.address     = outputPort[0].address;
	rd_packet_1.data_length = outputPort[0].readDataLength;
	rd_packet_1.data        = rd_buffer_1;
	i2c_master_read_packet_job(&i2c_master_instance_1,&rd_packet_1);
	*/
	outputPort[0].I2CStatus = IDLE_MODE;
     f8c:	2201      	movs	r2, #1
     f8e:	4b01      	ldr	r3, [pc, #4]	; (f94 <i2c_write_complete_callback_1+0x8>)
     f90:	71da      	strb	r2, [r3, #7]
}
     f92:	4770      	bx	lr
     f94:	200010d4 	.word	0x200010d4

00000f98 <i2c_write_complete_callback_2>:
	rd_packet_2.address     = outputPort[1].address;
	rd_packet_2.data_length = outputPort[1].readDataLength;
	rd_packet_2.data        = rd_buffer_2;
	i2c_master_read_packet_job(&i2c_master_instance_2,&rd_packet_2);
	*/
	outputPort[1].I2CStatus = IDLE_MODE;
     f98:	2201      	movs	r2, #1
     f9a:	4b01      	ldr	r3, [pc, #4]	; (fa0 <i2c_write_complete_callback_2+0x8>)
     f9c:	73da      	strb	r2, [r3, #15]
}
     f9e:	4770      	bx	lr
     fa0:	200010d4 	.word	0x200010d4

00000fa4 <i2c_write_complete_callback_3>:
	rd_packet_3.address     = outputPort[2].address;
	rd_packet_3.data_length = outputPort[2].readDataLength;
	rd_packet_3.data        = rd_buffer_3;
	i2c_master_read_packet_job(&i2c_master_instance_3,&rd_packet_3);
	*/
	outputPort[2].I2CStatus = IDLE_MODE;
     fa4:	2201      	movs	r2, #1
     fa6:	4b01      	ldr	r3, [pc, #4]	; (fac <i2c_write_complete_callback_3+0x8>)
     fa8:	75da      	strb	r2, [r3, #23]
}
     faa:	4770      	bx	lr
     fac:	200010d4 	.word	0x200010d4

00000fb0 <i2c_write_complete_callback_4>:
	rd_packet_4.data_length = outputPort[3].readDataLength;
	rd_packet_4.data        = rd_buffer_4;
	i2c_master_read_packet_job(&i2c_master_instance_4,&rd_packet_4);
	*/
	
	outputPort[3].I2CStatus = IDLE_MODE;
     fb0:	2201      	movs	r2, #1
     fb2:	4b01      	ldr	r3, [pc, #4]	; (fb8 <i2c_write_complete_callback_4+0x8>)
     fb4:	77da      	strb	r2, [r3, #31]
}
     fb6:	4770      	bx	lr
     fb8:	200010d4 	.word	0x200010d4

00000fbc <I2CRead>:
{
     fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fbe:	46de      	mov	lr, fp
     fc0:	4657      	mov	r7, sl
     fc2:	464e      	mov	r6, r9
     fc4:	4645      	mov	r5, r8
     fc6:	b5e0      	push	{r5, r6, r7, lr}
     fc8:	000d      	movs	r5, r1
	switch(instanceNo)
     fca:	2802      	cmp	r0, #2
     fcc:	d050      	beq.n	1070 <I2CRead+0xb4>
     fce:	d944      	bls.n	105a <I2CRead+0x9e>
     fd0:	2803      	cmp	r0, #3
     fd2:	d051      	beq.n	1078 <I2CRead+0xbc>
     fd4:	2804      	cmp	r0, #4
     fd6:	d145      	bne.n	1064 <I2CRead+0xa8>
     fd8:	4c29      	ldr	r4, [pc, #164]	; (1080 <I2CRead+0xc4>)
			while (i2c_master_read_packet_wait(&i2c_master_instance_4, rd_packet) !=STATUS_OK) {
     fda:	4e2a      	ldr	r6, [pc, #168]	; (1084 <I2CRead+0xc8>)
     fdc:	4f2a      	ldr	r7, [pc, #168]	; (1088 <I2CRead+0xcc>)
     fde:	0029      	movs	r1, r5
     fe0:	0030      	movs	r0, r6
     fe2:	47b8      	blx	r7
     fe4:	2800      	cmp	r0, #0
     fe6:	d03d      	beq.n	1064 <I2CRead+0xa8>
     fe8:	3c01      	subs	r4, #1
     fea:	b2a4      	uxth	r4, r4
				if (timeout++ == TIMEOUT) {
     fec:	2c00      	cmp	r4, #0
     fee:	d1f6      	bne.n	fde <I2CRead+0x22>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ff0:	4d24      	ldr	r5, [pc, #144]	; (1084 <I2CRead+0xc8>)
     ff2:	682c      	ldr	r4, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     ff4:	0020      	movs	r0, r4
     ff6:	4b25      	ldr	r3, [pc, #148]	; (108c <I2CRead+0xd0>)
     ff8:	4699      	mov	r9, r3
     ffa:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ffc:	271f      	movs	r7, #31
     ffe:	4038      	ands	r0, r7
    1000:	2601      	movs	r6, #1
    1002:	0032      	movs	r2, r6
    1004:	4082      	lsls	r2, r0
    1006:	4b22      	ldr	r3, [pc, #136]	; (1090 <I2CRead+0xd4>)
    1008:	4698      	mov	r8, r3
    100a:	2380      	movs	r3, #128	; 0x80
    100c:	4641      	mov	r1, r8
    100e:	50ca      	str	r2, [r1, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    1010:	0028      	movs	r0, r5
    1012:	4b20      	ldr	r3, [pc, #128]	; (1094 <I2CRead+0xd8>)
    1014:	469b      	mov	fp, r3
    1016:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1018:	2383      	movs	r3, #131	; 0x83
    101a:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    101c:	7623      	strb	r3, [r4, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    101e:	6823      	ldr	r3, [r4, #0]
    1020:	2202      	movs	r2, #2
    1022:	4692      	mov	sl, r2
    1024:	4393      	bics	r3, r2
    1026:	6023      	str	r3, [r4, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1028:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    102a:	0028      	movs	r0, r5
    102c:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    102e:	6823      	ldr	r3, [r4, #0]
    1030:	4652      	mov	r2, sl
    1032:	4313      	orrs	r3, r2
    1034:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1036:	6828      	ldr	r0, [r5, #0]
    1038:	47c8      	blx	r9
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    103a:	4007      	ands	r7, r0
    103c:	40be      	lsls	r6, r7
    103e:	4643      	mov	r3, r8
    1040:	601e      	str	r6, [r3, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1042:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1044:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1046:	2110      	movs	r1, #16
    1048:	8b62      	ldrh	r2, [r4, #26]
    104a:	420a      	tst	r2, r1
    104c:	d10a      	bne.n	1064 <I2CRead+0xa8>
		timeout_counter++;
    104e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1050:	4283      	cmp	r3, r0
    1052:	d3f9      	bcc.n	1048 <I2CRead+0x8c>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1054:	2310      	movs	r3, #16
    1056:	8363      	strh	r3, [r4, #26]
    1058:	e004      	b.n	1064 <I2CRead+0xa8>
	switch(instanceNo)
    105a:	2801      	cmp	r0, #1
    105c:	d102      	bne.n	1064 <I2CRead+0xa8>
			i2c_master_read_packet_job(&i2c_master_instance_1, rd_packet);
    105e:	480e      	ldr	r0, [pc, #56]	; (1098 <I2CRead+0xdc>)
    1060:	4b0e      	ldr	r3, [pc, #56]	; (109c <I2CRead+0xe0>)
    1062:	4798      	blx	r3
}
    1064:	bc3c      	pop	{r2, r3, r4, r5}
    1066:	4690      	mov	r8, r2
    1068:	4699      	mov	r9, r3
    106a:	46a2      	mov	sl, r4
    106c:	46ab      	mov	fp, r5
    106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_master_read_packet_job(&i2c_master_instance_2, rd_packet);
    1070:	480b      	ldr	r0, [pc, #44]	; (10a0 <I2CRead+0xe4>)
    1072:	4b0a      	ldr	r3, [pc, #40]	; (109c <I2CRead+0xe0>)
    1074:	4798      	blx	r3
			break;
    1076:	e7f5      	b.n	1064 <I2CRead+0xa8>
			i2c_master_read_packet_job(&i2c_master_instance_3, rd_packet);
    1078:	480a      	ldr	r0, [pc, #40]	; (10a4 <I2CRead+0xe8>)
    107a:	4b08      	ldr	r3, [pc, #32]	; (109c <I2CRead+0xe0>)
    107c:	4798      	blx	r3
			break;
    107e:	e7f1      	b.n	1064 <I2CRead+0xa8>
    1080:	000003e9 	.word	0x000003e9
    1084:	20000e98 	.word	0x20000e98
    1088:	00000635 	.word	0x00000635
    108c:	00002069 	.word	0x00002069
    1090:	e000e100 	.word	0xe000e100
    1094:	00000f5d 	.word	0x00000f5d
    1098:	20000e58 	.word	0x20000e58
    109c:	00000871 	.word	0x00000871
    10a0:	20000e18 	.word	0x20000e18
    10a4:	20000ec0 	.word	0x20000ec0

000010a8 <I2CWrite>:
{
    10a8:	b500      	push	{lr}
    10aa:	b083      	sub	sp, #12
	volatile uint32_t err_code = 0;
    10ac:	2300      	movs	r3, #0
    10ae:	9301      	str	r3, [sp, #4]
	switch(instanceNo)
    10b0:	2802      	cmp	r0, #2
    10b2:	d010      	beq.n	10d6 <I2CWrite+0x2e>
    10b4:	d908      	bls.n	10c8 <I2CWrite+0x20>
    10b6:	2803      	cmp	r0, #3
    10b8:	d011      	beq.n	10de <I2CWrite+0x36>
    10ba:	2804      	cmp	r0, #4
    10bc:	d109      	bne.n	10d2 <I2CWrite+0x2a>
			err_code = i2c_master_write_packet_job(&i2c_master_instance_4, wr_packet);
    10be:	480a      	ldr	r0, [pc, #40]	; (10e8 <I2CWrite+0x40>)
    10c0:	4b0a      	ldr	r3, [pc, #40]	; (10ec <I2CWrite+0x44>)
    10c2:	4798      	blx	r3
    10c4:	9001      	str	r0, [sp, #4]
}
    10c6:	e004      	b.n	10d2 <I2CWrite+0x2a>
	switch(instanceNo)
    10c8:	2801      	cmp	r0, #1
    10ca:	d102      	bne.n	10d2 <I2CWrite+0x2a>
			 i2c_master_write_packet_job(&i2c_master_instance_1, wr_packet);
    10cc:	4808      	ldr	r0, [pc, #32]	; (10f0 <I2CWrite+0x48>)
    10ce:	4b07      	ldr	r3, [pc, #28]	; (10ec <I2CWrite+0x44>)
    10d0:	4798      	blx	r3
}
    10d2:	b003      	add	sp, #12
    10d4:	bd00      	pop	{pc}
			i2c_master_write_packet_job(&i2c_master_instance_2, wr_packet);
    10d6:	4807      	ldr	r0, [pc, #28]	; (10f4 <I2CWrite+0x4c>)
    10d8:	4b04      	ldr	r3, [pc, #16]	; (10ec <I2CWrite+0x44>)
    10da:	4798      	blx	r3
			break;
    10dc:	e7f9      	b.n	10d2 <I2CWrite+0x2a>
			i2c_master_write_packet_job(&i2c_master_instance_3, wr_packet);
    10de:	4806      	ldr	r0, [pc, #24]	; (10f8 <I2CWrite+0x50>)
    10e0:	4b02      	ldr	r3, [pc, #8]	; (10ec <I2CWrite+0x44>)
    10e2:	4798      	blx	r3
			break;
    10e4:	e7f5      	b.n	10d2 <I2CWrite+0x2a>
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	20000e98 	.word	0x20000e98
    10ec:	00000895 	.word	0x00000895
    10f0:	20000e58 	.word	0x20000e58
    10f4:	20000e18 	.word	0x20000e18
    10f8:	20000ec0 	.word	0x20000ec0

000010fc <initializeI2CModules>:
{
	rewrite = true;
}
*/
void initializeI2CModules()
{
    10fc:	b530      	push	{r4, r5, lr}
    10fe:	b08f      	sub	sp, #60	; 0x3c
	config->baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
    1100:	ab01      	add	r3, sp, #4
    1102:	22c8      	movs	r2, #200	; 0xc8
    1104:	0052      	lsls	r2, r2, #1
    1106:	9201      	str	r2, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1108:	4a38      	ldr	r2, [pc, #224]	; (11ec <initializeI2CModules+0xf0>)
    110a:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    110c:	2200      	movs	r2, #0
    110e:	9203      	str	r2, [sp, #12]
	config->generator_source = GCLK_GENERATOR_0;
    1110:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1112:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1114:	2180      	movs	r1, #128	; 0x80
    1116:	0389      	lsls	r1, r1, #14
    1118:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    111a:	2101      	movs	r1, #1
    111c:	4249      	negs	r1, r1
    111e:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    1120:	8299      	strh	r1, [r3, #20]
	config->scl_low_timeout  = false;
    1122:	3125      	adds	r1, #37	; 0x25
    1124:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1126:	920b      	str	r2, [sp, #44]	; 0x2c
	config->scl_stretch_only_after_ack_bit = false;
    1128:	3108      	adds	r1, #8
    112a:	545a      	strb	r2, [r3, r1]
	config->slave_scl_low_extend_timeout   = false;
    112c:	3101      	adds	r1, #1
    112e:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    1130:	3101      	adds	r1, #1
    1132:	545a      	strb	r2, [r3, r1]
	config->sda_scl_rise_time_ns = 215;
    1134:	32d7      	adds	r2, #215	; 0xd7
    1136:	861a      	strh	r2, [r3, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
	//Output 1 
	config_i2c_master.pinmux_pad0    = OUTPUT1_I2C_SDA;
    1138:	4a2d      	ldr	r2, [pc, #180]	; (11f0 <initializeI2CModules+0xf4>)
    113a:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT1_I2C_SCL;
    113c:	4a2d      	ldr	r2, [pc, #180]	; (11f4 <initializeI2CModules+0xf8>)
    113e:	9209      	str	r2, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_1,  CONF_I2C_MASTER_MODULE_OUTPUT_1, &config_i2c_master)   != STATUS_OK);
    1140:	4d2d      	ldr	r5, [pc, #180]	; (11f8 <initializeI2CModules+0xfc>)
    1142:	4c2e      	ldr	r4, [pc, #184]	; (11fc <initializeI2CModules+0x100>)
    1144:	aa01      	add	r2, sp, #4
    1146:	492e      	ldr	r1, [pc, #184]	; (1200 <initializeI2CModules+0x104>)
    1148:	0028      	movs	r0, r5
    114a:	47a0      	blx	r4
    114c:	2800      	cmp	r0, #0
    114e:	d1f9      	bne.n	1144 <initializeI2CModules+0x48>
	i2c_master_register_callback(&i2c_master_instance_1, i2c_write_complete_callback_1,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1150:	4d29      	ldr	r5, [pc, #164]	; (11f8 <initializeI2CModules+0xfc>)
    1152:	2200      	movs	r2, #0
    1154:	492b      	ldr	r1, [pc, #172]	; (1204 <initializeI2CModules+0x108>)
    1156:	0028      	movs	r0, r5
    1158:	4c2b      	ldr	r4, [pc, #172]	; (1208 <initializeI2CModules+0x10c>)
    115a:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_1, i2c_read_complete_callback_1,I2C_MASTER_CALLBACK_READ_COMPLETE);
    115c:	2201      	movs	r2, #1
    115e:	492b      	ldr	r1, [pc, #172]	; (120c <initializeI2CModules+0x110>)
    1160:	0028      	movs	r0, r5
    1162:	47a0      	blx	r4
	
	//Output 2
	config_i2c_master.pinmux_pad0    = OUTPUT2_I2C_SDA;
    1164:	4b2a      	ldr	r3, [pc, #168]	; (1210 <initializeI2CModules+0x114>)
    1166:	9308      	str	r3, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT2_I2C_SCL;
    1168:	4b2a      	ldr	r3, [pc, #168]	; (1214 <initializeI2CModules+0x118>)
    116a:	9309      	str	r3, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_2,  CONF_I2C_MASTER_MODULE_OUTPUT_2, &config_i2c_master)   != STATUS_OK);
    116c:	4d2a      	ldr	r5, [pc, #168]	; (1218 <initializeI2CModules+0x11c>)
    116e:	4c23      	ldr	r4, [pc, #140]	; (11fc <initializeI2CModules+0x100>)
    1170:	aa01      	add	r2, sp, #4
    1172:	492a      	ldr	r1, [pc, #168]	; (121c <initializeI2CModules+0x120>)
    1174:	0028      	movs	r0, r5
    1176:	47a0      	blx	r4
    1178:	2800      	cmp	r0, #0
    117a:	d1f9      	bne.n	1170 <initializeI2CModules+0x74>
	i2c_master_register_callback(&i2c_master_instance_2, i2c_write_complete_callback_2, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    117c:	4d26      	ldr	r5, [pc, #152]	; (1218 <initializeI2CModules+0x11c>)
    117e:	2200      	movs	r2, #0
    1180:	4927      	ldr	r1, [pc, #156]	; (1220 <initializeI2CModules+0x124>)
    1182:	0028      	movs	r0, r5
    1184:	4c20      	ldr	r4, [pc, #128]	; (1208 <initializeI2CModules+0x10c>)
    1186:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_2, i2c_read_complete_callback_2,  I2C_MASTER_CALLBACK_READ_COMPLETE);
    1188:	2201      	movs	r2, #1
    118a:	4926      	ldr	r1, [pc, #152]	; (1224 <initializeI2CModules+0x128>)
    118c:	0028      	movs	r0, r5
    118e:	47a0      	blx	r4
	
	//Output 3
	config_i2c_master.pinmux_pad0    = OUTPUT3_I2C_SDA;
    1190:	4b25      	ldr	r3, [pc, #148]	; (1228 <initializeI2CModules+0x12c>)
    1192:	9308      	str	r3, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT3_I2C_SCL;
    1194:	4b25      	ldr	r3, [pc, #148]	; (122c <initializeI2CModules+0x130>)
    1196:	9309      	str	r3, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_3,  CONF_I2C_MASTER_MODULE_OUTPUT_3, &config_i2c_master)   != STATUS_OK);
    1198:	4d25      	ldr	r5, [pc, #148]	; (1230 <initializeI2CModules+0x134>)
    119a:	4c18      	ldr	r4, [pc, #96]	; (11fc <initializeI2CModules+0x100>)
    119c:	aa01      	add	r2, sp, #4
    119e:	4925      	ldr	r1, [pc, #148]	; (1234 <initializeI2CModules+0x138>)
    11a0:	0028      	movs	r0, r5
    11a2:	47a0      	blx	r4
    11a4:	2800      	cmp	r0, #0
    11a6:	d1f9      	bne.n	119c <initializeI2CModules+0xa0>
	i2c_master_register_callback(&i2c_master_instance_3, i2c_write_complete_callback_3,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    11a8:	4d21      	ldr	r5, [pc, #132]	; (1230 <initializeI2CModules+0x134>)
    11aa:	2200      	movs	r2, #0
    11ac:	4922      	ldr	r1, [pc, #136]	; (1238 <initializeI2CModules+0x13c>)
    11ae:	0028      	movs	r0, r5
    11b0:	4c15      	ldr	r4, [pc, #84]	; (1208 <initializeI2CModules+0x10c>)
    11b2:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_3, i2c_read_complete_callback_3,  I2C_MASTER_CALLBACK_READ_COMPLETE);
    11b4:	2201      	movs	r2, #1
    11b6:	4921      	ldr	r1, [pc, #132]	; (123c <initializeI2CModules+0x140>)
    11b8:	0028      	movs	r0, r5
    11ba:	47a0      	blx	r4
	
	//Output 4
	config_i2c_master.pinmux_pad0    = OUTPUT4_I2C_SDA;
    11bc:	ab01      	add	r3, sp, #4
    11be:	4a20      	ldr	r2, [pc, #128]	; (1240 <initializeI2CModules+0x144>)
    11c0:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT4_I2C_SCL;
    11c2:	4a20      	ldr	r2, [pc, #128]	; (1244 <initializeI2CModules+0x148>)
    11c4:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
    11c6:	22fa      	movs	r2, #250	; 0xfa
    11c8:	0092      	lsls	r2, r2, #2
    11ca:	82da      	strh	r2, [r3, #22]
	
	while(i2c_master_init(&i2c_master_instance_4,  CONF_I2C_MASTER_MODULE_OUTPUT_4, &config_i2c_master)   != STATUS_OK);
    11cc:	4d1e      	ldr	r5, [pc, #120]	; (1248 <initializeI2CModules+0x14c>)
    11ce:	4c0b      	ldr	r4, [pc, #44]	; (11fc <initializeI2CModules+0x100>)
    11d0:	aa01      	add	r2, sp, #4
    11d2:	491e      	ldr	r1, [pc, #120]	; (124c <initializeI2CModules+0x150>)
    11d4:	0028      	movs	r0, r5
    11d6:	47a0      	blx	r4
    11d8:	2800      	cmp	r0, #0
    11da:	d1f9      	bne.n	11d0 <initializeI2CModules+0xd4>
	i2c_master_register_callback(&i2c_master_instance_4, i2c_write_complete_callback_4, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    11dc:	2200      	movs	r2, #0
    11de:	491c      	ldr	r1, [pc, #112]	; (1250 <initializeI2CModules+0x154>)
    11e0:	4819      	ldr	r0, [pc, #100]	; (1248 <initializeI2CModules+0x14c>)
    11e2:	4b09      	ldr	r3, [pc, #36]	; (1208 <initializeI2CModules+0x10c>)
    11e4:	4798      	blx	r3
			//	break;
			//}
		//}
	
	
}
    11e6:	b00f      	add	sp, #60	; 0x3c
    11e8:	bd30      	pop	{r4, r5, pc}
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	00000d48 	.word	0x00000d48
    11f0:	00080002 	.word	0x00080002
    11f4:	00090002 	.word	0x00090002
    11f8:	20000e58 	.word	0x20000e58
    11fc:	00000121 	.word	0x00000121
    1200:	42000800 	.word	0x42000800
    1204:	00000f8d 	.word	0x00000f8d
    1208:	00000859 	.word	0x00000859
    120c:	00000f69 	.word	0x00000f69
    1210:	000c0002 	.word	0x000c0002
    1214:	000d0002 	.word	0x000d0002
    1218:	20000e18 	.word	0x20000e18
    121c:	42001000 	.word	0x42001000
    1220:	00000f99 	.word	0x00000f99
    1224:	00000f75 	.word	0x00000f75
    1228:	00100002 	.word	0x00100002
    122c:	00110002 	.word	0x00110002
    1230:	20000ec0 	.word	0x20000ec0
    1234:	42000c00 	.word	0x42000c00
    1238:	00000fa5 	.word	0x00000fa5
    123c:	00000f81 	.word	0x00000f81
    1240:	00160002 	.word	0x00160002
    1244:	00170002 	.word	0x00170002
    1248:	20000e98 	.word	0x20000e98
    124c:	42001400 	.word	0x42001400
    1250:	00000fb1 	.word	0x00000fb1

00001254 <enableI2CModule>:

void enableI2CModule(uint8_t port)
{
    1254:	b570      	push	{r4, r5, r6, lr}
	switch(port)
    1256:	2802      	cmp	r0, #2
    1258:	d051      	beq.n	12fe <enableI2CModule+0xaa>
    125a:	d927      	bls.n	12ac <enableI2CModule+0x58>
    125c:	2803      	cmp	r0, #3
    125e:	d100      	bne.n	1262 <enableI2CModule+0xe>
    1260:	e074      	b.n	134c <enableI2CModule+0xf8>
    1262:	2804      	cmp	r0, #4
    1264:	d14a      	bne.n	12fc <enableI2CModule+0xa8>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1266:	4d4d      	ldr	r5, [pc, #308]	; (139c <enableI2CModule+0x148>)
    1268:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    126a:	0028      	movs	r0, r5
    126c:	4b4c      	ldr	r3, [pc, #304]	; (13a0 <enableI2CModule+0x14c>)
    126e:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1270:	6823      	ldr	r3, [r4, #0]
    1272:	2202      	movs	r2, #2
    1274:	4313      	orrs	r3, r2
    1276:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1278:	6828      	ldr	r0, [r5, #0]
    127a:	4b4a      	ldr	r3, [pc, #296]	; (13a4 <enableI2CModule+0x150>)
    127c:	4798      	blx	r3
    127e:	231f      	movs	r3, #31
    1280:	4018      	ands	r0, r3
    1282:	3b1e      	subs	r3, #30
    1284:	4083      	lsls	r3, r0
    1286:	4a48      	ldr	r2, [pc, #288]	; (13a8 <enableI2CModule+0x154>)
    1288:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    128a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    128c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    128e:	2110      	movs	r1, #16
    1290:	8b62      	ldrh	r2, [r4, #26]
    1292:	420a      	tst	r2, r1
    1294:	d104      	bne.n	12a0 <enableI2CModule+0x4c>
		timeout_counter++;
    1296:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1298:	4283      	cmp	r3, r0
    129a:	d3f9      	bcc.n	1290 <enableI2CModule+0x3c>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    129c:	2310      	movs	r3, #16
    129e:	8363      	strh	r3, [r4, #26]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    12a0:	4a3e      	ldr	r2, [pc, #248]	; (139c <enableI2CModule+0x148>)
    12a2:	7e53      	ldrb	r3, [r2, #25]
    12a4:	2101      	movs	r1, #1
    12a6:	430b      	orrs	r3, r1
    12a8:	7653      	strb	r3, [r2, #25]
			
		default:
			break;
	}
	
}
    12aa:	e027      	b.n	12fc <enableI2CModule+0xa8>
	switch(port)
    12ac:	2801      	cmp	r0, #1
    12ae:	d125      	bne.n	12fc <enableI2CModule+0xa8>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    12b0:	4d3e      	ldr	r5, [pc, #248]	; (13ac <enableI2CModule+0x158>)
    12b2:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    12b4:	0028      	movs	r0, r5
    12b6:	4b3a      	ldr	r3, [pc, #232]	; (13a0 <enableI2CModule+0x14c>)
    12b8:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    12ba:	6823      	ldr	r3, [r4, #0]
    12bc:	2202      	movs	r2, #2
    12be:	4313      	orrs	r3, r2
    12c0:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    12c2:	6828      	ldr	r0, [r5, #0]
    12c4:	4b37      	ldr	r3, [pc, #220]	; (13a4 <enableI2CModule+0x150>)
    12c6:	4798      	blx	r3
    12c8:	231f      	movs	r3, #31
    12ca:	4018      	ands	r0, r3
    12cc:	3b1e      	subs	r3, #30
    12ce:	4083      	lsls	r3, r0
    12d0:	4a35      	ldr	r2, [pc, #212]	; (13a8 <enableI2CModule+0x154>)
    12d2:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    12d4:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    12d6:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    12d8:	2110      	movs	r1, #16
    12da:	8b62      	ldrh	r2, [r4, #26]
    12dc:	420a      	tst	r2, r1
    12de:	d104      	bne.n	12ea <enableI2CModule+0x96>
		timeout_counter++;
    12e0:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    12e2:	4283      	cmp	r3, r0
    12e4:	d3f9      	bcc.n	12da <enableI2CModule+0x86>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    12e6:	2310      	movs	r3, #16
    12e8:	8363      	strh	r3, [r4, #26]
    12ea:	4b30      	ldr	r3, [pc, #192]	; (13ac <enableI2CModule+0x158>)
    12ec:	7e5a      	ldrb	r2, [r3, #25]
    12ee:	2101      	movs	r1, #1
    12f0:	430a      	orrs	r2, r1
    12f2:	765a      	strb	r2, [r3, #25]
    12f4:	7e5a      	ldrb	r2, [r3, #25]
    12f6:	3101      	adds	r1, #1
    12f8:	430a      	orrs	r2, r1
    12fa:	765a      	strb	r2, [r3, #25]
}
    12fc:	bd70      	pop	{r4, r5, r6, pc}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    12fe:	4d2c      	ldr	r5, [pc, #176]	; (13b0 <enableI2CModule+0x15c>)
    1300:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1302:	0028      	movs	r0, r5
    1304:	4b26      	ldr	r3, [pc, #152]	; (13a0 <enableI2CModule+0x14c>)
    1306:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1308:	6823      	ldr	r3, [r4, #0]
    130a:	2202      	movs	r2, #2
    130c:	4313      	orrs	r3, r2
    130e:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1310:	6828      	ldr	r0, [r5, #0]
    1312:	4b24      	ldr	r3, [pc, #144]	; (13a4 <enableI2CModule+0x150>)
    1314:	4798      	blx	r3
    1316:	231f      	movs	r3, #31
    1318:	4018      	ands	r0, r3
    131a:	3b1e      	subs	r3, #30
    131c:	4083      	lsls	r3, r0
    131e:	4a22      	ldr	r2, [pc, #136]	; (13a8 <enableI2CModule+0x154>)
    1320:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1322:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1324:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1326:	2110      	movs	r1, #16
    1328:	8b62      	ldrh	r2, [r4, #26]
    132a:	420a      	tst	r2, r1
    132c:	d104      	bne.n	1338 <enableI2CModule+0xe4>
		timeout_counter++;
    132e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1330:	4283      	cmp	r3, r0
    1332:	d3f9      	bcc.n	1328 <enableI2CModule+0xd4>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1334:	2310      	movs	r3, #16
    1336:	8363      	strh	r3, [r4, #26]
    1338:	4b1d      	ldr	r3, [pc, #116]	; (13b0 <enableI2CModule+0x15c>)
    133a:	7e5a      	ldrb	r2, [r3, #25]
    133c:	2101      	movs	r1, #1
    133e:	430a      	orrs	r2, r1
    1340:	765a      	strb	r2, [r3, #25]
    1342:	7e5a      	ldrb	r2, [r3, #25]
    1344:	3101      	adds	r1, #1
    1346:	430a      	orrs	r2, r1
    1348:	765a      	strb	r2, [r3, #25]
    134a:	e7d7      	b.n	12fc <enableI2CModule+0xa8>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    134c:	4d19      	ldr	r5, [pc, #100]	; (13b4 <enableI2CModule+0x160>)
    134e:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1350:	0028      	movs	r0, r5
    1352:	4b13      	ldr	r3, [pc, #76]	; (13a0 <enableI2CModule+0x14c>)
    1354:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1356:	6823      	ldr	r3, [r4, #0]
    1358:	2202      	movs	r2, #2
    135a:	4313      	orrs	r3, r2
    135c:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    135e:	6828      	ldr	r0, [r5, #0]
    1360:	4b10      	ldr	r3, [pc, #64]	; (13a4 <enableI2CModule+0x150>)
    1362:	4798      	blx	r3
    1364:	231f      	movs	r3, #31
    1366:	4018      	ands	r0, r3
    1368:	3b1e      	subs	r3, #30
    136a:	4083      	lsls	r3, r0
    136c:	4a0e      	ldr	r2, [pc, #56]	; (13a8 <enableI2CModule+0x154>)
    136e:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1370:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1372:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1374:	2110      	movs	r1, #16
    1376:	8b62      	ldrh	r2, [r4, #26]
    1378:	420a      	tst	r2, r1
    137a:	d104      	bne.n	1386 <enableI2CModule+0x132>
		timeout_counter++;
    137c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    137e:	4283      	cmp	r3, r0
    1380:	d3f9      	bcc.n	1376 <enableI2CModule+0x122>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1382:	2310      	movs	r3, #16
    1384:	8363      	strh	r3, [r4, #26]
    1386:	4b0b      	ldr	r3, [pc, #44]	; (13b4 <enableI2CModule+0x160>)
    1388:	7e5a      	ldrb	r2, [r3, #25]
    138a:	2101      	movs	r1, #1
    138c:	430a      	orrs	r2, r1
    138e:	765a      	strb	r2, [r3, #25]
    1390:	7e5a      	ldrb	r2, [r3, #25]
    1392:	3101      	adds	r1, #1
    1394:	430a      	orrs	r2, r1
    1396:	765a      	strb	r2, [r3, #25]
    1398:	e7b0      	b.n	12fc <enableI2CModule+0xa8>
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	20000e98 	.word	0x20000e98
    13a0:	00000f5d 	.word	0x00000f5d
    13a4:	00002069 	.word	0x00002069
    13a8:	e000e100 	.word	0xe000e100
    13ac:	20000e58 	.word	0x20000e58
    13b0:	20000e18 	.word	0x20000e18
    13b4:	20000ec0 	.word	0x20000ec0

000013b8 <disableI2CModule>:

void disableI2CModule(uint8_t port)
{
    13b8:	b570      	push	{r4, r5, r6, lr}

	switch(port)
    13ba:	2802      	cmp	r0, #2
    13bc:	d03c      	beq.n	1438 <disableI2CModule+0x80>
    13be:	d91e      	bls.n	13fe <disableI2CModule+0x46>
    13c0:	2803      	cmp	r0, #3
    13c2:	d054      	beq.n	146e <disableI2CModule+0xb6>
    13c4:	2804      	cmp	r0, #4
    13c6:	d136      	bne.n	1436 <disableI2CModule+0x7e>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13c8:	4d36      	ldr	r5, [pc, #216]	; (14a4 <disableI2CModule+0xec>)
    13ca:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    13cc:	0020      	movs	r0, r4
    13ce:	4b36      	ldr	r3, [pc, #216]	; (14a8 <disableI2CModule+0xf0>)
    13d0:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    13d2:	231f      	movs	r3, #31
    13d4:	4018      	ands	r0, r3
    13d6:	2601      	movs	r6, #1
    13d8:	0031      	movs	r1, r6
    13da:	4081      	lsls	r1, r0
    13dc:	3361      	adds	r3, #97	; 0x61
    13de:	4a33      	ldr	r2, [pc, #204]	; (14ac <disableI2CModule+0xf4>)
    13e0:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    13e2:	0028      	movs	r0, r5
    13e4:	4b32      	ldr	r3, [pc, #200]	; (14b0 <disableI2CModule+0xf8>)
    13e6:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    13e8:	2383      	movs	r3, #131	; 0x83
    13ea:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    13ec:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    13ee:	6823      	ldr	r3, [r4, #0]
    13f0:	2202      	movs	r2, #2
    13f2:	4393      	bics	r3, r2
    13f4:	6023      	str	r3, [r4, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as disabled */
	module->enabled_callback &= ~(1 << callback_type);
    13f6:	7e6b      	ldrb	r3, [r5, #25]
    13f8:	43b3      	bics	r3, r6
    13fa:	766b      	strb	r3, [r5, #25]
		
		default:
			break;
	}
	
}
    13fc:	e01b      	b.n	1436 <disableI2CModule+0x7e>
	switch(port)
    13fe:	2801      	cmp	r0, #1
    1400:	d119      	bne.n	1436 <disableI2CModule+0x7e>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1402:	4d2c      	ldr	r5, [pc, #176]	; (14b4 <disableI2CModule+0xfc>)
    1404:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1406:	0020      	movs	r0, r4
    1408:	4b27      	ldr	r3, [pc, #156]	; (14a8 <disableI2CModule+0xf0>)
    140a:	4798      	blx	r3
    140c:	231f      	movs	r3, #31
    140e:	4018      	ands	r0, r3
    1410:	2601      	movs	r6, #1
    1412:	0031      	movs	r1, r6
    1414:	4081      	lsls	r1, r0
    1416:	3361      	adds	r3, #97	; 0x61
    1418:	4a24      	ldr	r2, [pc, #144]	; (14ac <disableI2CModule+0xf4>)
    141a:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    141c:	0028      	movs	r0, r5
    141e:	4b24      	ldr	r3, [pc, #144]	; (14b0 <disableI2CModule+0xf8>)
    1420:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1422:	2383      	movs	r3, #131	; 0x83
    1424:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1426:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1428:	6823      	ldr	r3, [r4, #0]
    142a:	2202      	movs	r2, #2
    142c:	4393      	bics	r3, r2
    142e:	6023      	str	r3, [r4, #0]
    1430:	7e6b      	ldrb	r3, [r5, #25]
    1432:	43b3      	bics	r3, r6
    1434:	766b      	strb	r3, [r5, #25]
}
    1436:	bd70      	pop	{r4, r5, r6, pc}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1438:	4d1f      	ldr	r5, [pc, #124]	; (14b8 <disableI2CModule+0x100>)
    143a:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    143c:	0020      	movs	r0, r4
    143e:	4b1a      	ldr	r3, [pc, #104]	; (14a8 <disableI2CModule+0xf0>)
    1440:	4798      	blx	r3
    1442:	231f      	movs	r3, #31
    1444:	4018      	ands	r0, r3
    1446:	2601      	movs	r6, #1
    1448:	0031      	movs	r1, r6
    144a:	4081      	lsls	r1, r0
    144c:	3361      	adds	r3, #97	; 0x61
    144e:	4a17      	ldr	r2, [pc, #92]	; (14ac <disableI2CModule+0xf4>)
    1450:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    1452:	0028      	movs	r0, r5
    1454:	4b16      	ldr	r3, [pc, #88]	; (14b0 <disableI2CModule+0xf8>)
    1456:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1458:	2383      	movs	r3, #131	; 0x83
    145a:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    145c:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    145e:	6823      	ldr	r3, [r4, #0]
    1460:	2202      	movs	r2, #2
    1462:	4393      	bics	r3, r2
    1464:	6023      	str	r3, [r4, #0]
    1466:	7e6b      	ldrb	r3, [r5, #25]
    1468:	43b3      	bics	r3, r6
    146a:	766b      	strb	r3, [r5, #25]
    146c:	e7e3      	b.n	1436 <disableI2CModule+0x7e>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    146e:	4d13      	ldr	r5, [pc, #76]	; (14bc <disableI2CModule+0x104>)
    1470:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1472:	0020      	movs	r0, r4
    1474:	4b0c      	ldr	r3, [pc, #48]	; (14a8 <disableI2CModule+0xf0>)
    1476:	4798      	blx	r3
    1478:	231f      	movs	r3, #31
    147a:	4018      	ands	r0, r3
    147c:	2601      	movs	r6, #1
    147e:	0031      	movs	r1, r6
    1480:	4081      	lsls	r1, r0
    1482:	3361      	adds	r3, #97	; 0x61
    1484:	4a09      	ldr	r2, [pc, #36]	; (14ac <disableI2CModule+0xf4>)
    1486:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    1488:	0028      	movs	r0, r5
    148a:	4b09      	ldr	r3, [pc, #36]	; (14b0 <disableI2CModule+0xf8>)
    148c:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    148e:	2383      	movs	r3, #131	; 0x83
    1490:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1492:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1494:	6823      	ldr	r3, [r4, #0]
    1496:	2202      	movs	r2, #2
    1498:	4393      	bics	r3, r2
    149a:	6023      	str	r3, [r4, #0]
    149c:	7e6b      	ldrb	r3, [r5, #25]
    149e:	43b3      	bics	r3, r6
    14a0:	766b      	strb	r3, [r5, #25]
    14a2:	e7c8      	b.n	1436 <disableI2CModule+0x7e>
    14a4:	20000e98 	.word	0x20000e98
    14a8:	00002069 	.word	0x00002069
    14ac:	e000e100 	.word	0xe000e100
    14b0:	00000f5d 	.word	0x00000f5d
    14b4:	20000e58 	.word	0x20000e58
    14b8:	20000e18 	.word	0x20000e18
    14bc:	20000ec0 	.word	0x20000ec0

000014c0 <checkSendOutputs>:
static bool timerOutput = false;

extern volatile struct outputPorts  outputPort[4];

void checkSendOutputs()
{
    14c0:	b510      	push	{r4, lr}
    14c2:	b084      	sub	sp, #16
	uint8_t i =0;
	uint8_t temp =0;
	static uint8_t rd_buffer[20] ;
	
	if(readySendI2CRead == true)
    14c4:	4b1a      	ldr	r3, [pc, #104]	; (1530 <checkSendOutputs+0x70>)
    14c6:	781b      	ldrb	r3, [r3, #0]
    14c8:	2b00      	cmp	r3, #0
    14ca:	d02f      	beq.n	152c <checkSendOutputs+0x6c>
	{
		readySendI2CRead = false;
    14cc:	2200      	movs	r2, #0
    14ce:	4b18      	ldr	r3, [pc, #96]	; (1530 <checkSendOutputs+0x70>)
    14d0:	701a      	strb	r2, [r3, #0]
    14d2:	2300      	movs	r3, #0
		for(i=0;i<NO_OUTPUTS;i++)
		{
			if(outputPort[i].currentState != NOTHINGCONNECTED)
    14d4:	4917      	ldr	r1, [pc, #92]	; (1534 <checkSendOutputs+0x74>)
			{
				switch(outputPort[i].currentState)
    14d6:	0008      	movs	r0, r1
    14d8:	e002      	b.n	14e0 <checkSendOutputs+0x20>
    14da:	3301      	adds	r3, #1
		for(i=0;i<NO_OUTPUTS;i++)
    14dc:	2b04      	cmp	r3, #4
    14de:	d025      	beq.n	152c <checkSendOutputs+0x6c>
			if(outputPort[i].currentState != NOTHINGCONNECTED)
    14e0:	00da      	lsls	r2, r3, #3
    14e2:	188a      	adds	r2, r1, r2
    14e4:	7852      	ldrb	r2, [r2, #1]
    14e6:	2a00      	cmp	r2, #0
    14e8:	d0f7      	beq.n	14da <checkSendOutputs+0x1a>
				switch(outputPort[i].currentState)
    14ea:	00da      	lsls	r2, r3, #3
    14ec:	1882      	adds	r2, r0, r2
    14ee:	7852      	ldrb	r2, [r2, #1]
    14f0:	2a03      	cmp	r2, #3
    14f2:	d1f2      	bne.n	14da <checkSendOutputs+0x1a>
				{
					case OUTPUT_LEDMATRIX:
						
						//Read the dial values regularly 
						if(i == 3)
    14f4:	b2da      	uxtb	r2, r3
    14f6:	2a03      	cmp	r2, #3
    14f8:	d1ef      	bne.n	14da <checkSendOutputs+0x1a>
						{
							struct i2c_master_packet rd_packet = {
								.address		 = outputPort[i].address, 
    14fa:	4b0e      	ldr	r3, [pc, #56]	; (1534 <checkSendOutputs+0x74>)
    14fc:	7e1a      	ldrb	r2, [r3, #24]
							struct i2c_master_packet rd_packet = {
    14fe:	a901      	add	r1, sp, #4
    1500:	800a      	strh	r2, [r1, #0]
								.data_length	 = outputPort[i].readDataLength,
    1502:	7edb      	ldrb	r3, [r3, #27]
							struct i2c_master_packet rd_packet = {
    1504:	804b      	strh	r3, [r1, #2]
    1506:	4c0c      	ldr	r4, [pc, #48]	; (1538 <checkSendOutputs+0x78>)
    1508:	604c      	str	r4, [r1, #4]
    150a:	2300      	movs	r3, #0
    150c:	720b      	strb	r3, [r1, #8]
    150e:	724b      	strb	r3, [r1, #9]
    1510:	728b      	strb	r3, [r1, #10]
								.high_speed      = false,
								.hs_master_code  = 0x0,
							};
							
							//outputPort[i].I2CStatus =	BUSY_MODE; 
							I2CRead((i+1) , &rd_packet);
    1512:	2004      	movs	r0, #4
    1514:	4b09      	ldr	r3, [pc, #36]	; (153c <checkSendOutputs+0x7c>)
    1516:	4798      	blx	r3
							sensorOutputs[20 + i*5]		=	 i + 4;
    1518:	4b09      	ldr	r3, [pc, #36]	; (1540 <checkSendOutputs+0x80>)
    151a:	2107      	movs	r1, #7
    151c:	2223      	movs	r2, #35	; 0x23
    151e:	5499      	strb	r1, [r3, r2]
							sensorOutputs[20 + i*5 + 1] =    rd_buffer[0] ;
    1520:	7821      	ldrb	r1, [r4, #0]
    1522:	3201      	adds	r2, #1
    1524:	5499      	strb	r1, [r3, r2]
							sensorOutputs[20 + i*5 + 2] = 	 rd_buffer[1] ;
    1526:	7861      	ldrb	r1, [r4, #1]
    1528:	3201      	adds	r2, #1
    152a:	5499      	strb	r1, [r3, r2]
						break;
				}
			}
		}
	}
}
    152c:	b004      	add	sp, #16
    152e:	bd10      	pop	{r4, pc}
    1530:	20000dec 	.word	0x20000dec
    1534:	200010d4 	.word	0x200010d4
    1538:	200000d8 	.word	0x200000d8
    153c:	00000fbd 	.word	0x00000fbd
    1540:	20000f78 	.word	0x20000f78

00001544 <sendInfoCallback>:
}

void sendInfoCallback()
{
	static uint8_t tempCount = 0;
	tempCount++;
    1544:	4b08      	ldr	r3, [pc, #32]	; (1568 <sendInfoCallback+0x24>)
    1546:	781b      	ldrb	r3, [r3, #0]
    1548:	3301      	adds	r3, #1
    154a:	b2db      	uxtb	r3, r3
	if(tempCount>1)
    154c:	2b01      	cmp	r3, #1
    154e:	d908      	bls.n	1562 <sendInfoCallback+0x1e>
	{
		tempCount = 0;
    1550:	2200      	movs	r2, #0
    1552:	4b05      	ldr	r3, [pc, #20]	; (1568 <sendInfoCallback+0x24>)
    1554:	701a      	strb	r2, [r3, #0]
		readySendData = true;
    1556:	2301      	movs	r3, #1
    1558:	4a04      	ldr	r2, [pc, #16]	; (156c <sendInfoCallback+0x28>)
    155a:	7013      	strb	r3, [r2, #0]
		readySendI2CRead = true;
    155c:	4a04      	ldr	r2, [pc, #16]	; (1570 <sendInfoCallback+0x2c>)
    155e:	7013      	strb	r3, [r2, #0]
	}
	
	//usart_write_buffer_wait(&usart_instance, transmit_value ,VERSION_SET_LEN);
}
    1560:	4770      	bx	lr
	tempCount++;
    1562:	4a01      	ldr	r2, [pc, #4]	; (1568 <sendInfoCallback+0x24>)
    1564:	7013      	strb	r3, [r2, #0]
    1566:	e7fb      	b.n	1560 <sendInfoCallback+0x1c>
    1568:	20000100 	.word	0x20000100
    156c:	20000deb 	.word	0x20000deb
    1570:	20000dec 	.word	0x20000dec

00001574 <configureTimer>:
{
    1574:	b510      	push	{r4, lr}
    1576:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1578:	aa01      	add	r2, sp, #4
    157a:	2300      	movs	r3, #0
    157c:	2100      	movs	r1, #0
    157e:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1580:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1582:	2000      	movs	r0, #0
    1584:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1586:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1588:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    158a:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    158c:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    158e:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1590:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1592:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1594:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1596:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1598:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    159a:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    159c:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    159e:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0]		=		true;
    15a0:	3301      	adds	r3, #1
    15a2:	72d3      	strb	r3, [r2, #11]
	config_tc.counter_size						=		TC_COUNTER_SIZE_8BIT; //8
    15a4:	3303      	adds	r3, #3
    15a6:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source						=		GCLK_GENERATOR_3;
    15a8:	3b01      	subs	r3, #1
    15aa:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler					=		TC_CLOCK_PRESCALER_DIV1024; //1024
    15ac:	23e0      	movs	r3, #224	; 0xe0
    15ae:	00db      	lsls	r3, r3, #3
    15b0:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period				=		0xFF;
    15b2:	21ff      	movs	r1, #255	; 0xff
    15b4:	2329      	movs	r3, #41	; 0x29
    15b6:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_encoder_capture, SEND_TIMER , &config_tc);
    15b8:	4c07      	ldr	r4, [pc, #28]	; (15d8 <configureTimer+0x64>)
    15ba:	4908      	ldr	r1, [pc, #32]	; (15dc <configureTimer+0x68>)
    15bc:	0020      	movs	r0, r4
    15be:	4b08      	ldr	r3, [pc, #32]	; (15e0 <configureTimer+0x6c>)
    15c0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15c2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15c4:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    15c6:	b25b      	sxtb	r3, r3
    15c8:	2b00      	cmp	r3, #0
    15ca:	dbfb      	blt.n	15c4 <configureTimer+0x50>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    15cc:	8813      	ldrh	r3, [r2, #0]
    15ce:	2102      	movs	r1, #2
    15d0:	430b      	orrs	r3, r1
    15d2:	8013      	strh	r3, [r2, #0]
}
    15d4:	b00e      	add	sp, #56	; 0x38
    15d6:	bd10      	pop	{r4, pc}
    15d8:	20000f1c 	.word	0x20000f1c
    15dc:	42003c00 	.word	0x42003c00
    15e0:	00000c45 	.word	0x00000c45

000015e4 <arrangeSensorData>:
{
    15e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15e6:	2300      	movs	r3, #0
		sendSensorOutputs[i]	= sensorOutputs[i];
    15e8:	4921      	ldr	r1, [pc, #132]	; (1670 <arrangeSensorData+0x8c>)
    15ea:	5cca      	ldrb	r2, [r1, r3]
    15ec:	54c2      	strb	r2, [r0, r3]
    15ee:	3301      	adds	r3, #1
	for(i=0;i<4;i++)
    15f0:	2b04      	cmp	r3, #4
    15f2:	d1fa      	bne.n	15ea <arrangeSensorData+0x6>
    15f4:	2400      	movs	r4, #0
    15f6:	2500      	movs	r5, #0
		if(inputsConnected[i] != NOTHINGCONNECTED )
    15f8:	4e1e      	ldr	r6, [pc, #120]	; (1674 <arrangeSensorData+0x90>)
    15fa:	e004      	b.n	1606 <arrangeSensorData+0x22>
			countSensorOutputs++;
    15fc:	3501      	adds	r5, #1
    15fe:	b2ed      	uxtb	r5, r5
    1600:	3401      	adds	r4, #1
	for(i=0;i<3;i++)
    1602:	2c03      	cmp	r4, #3
    1604:	d014      	beq.n	1630 <arrangeSensorData+0x4c>
		if(inputsConnected[i] != NOTHINGCONNECTED )
    1606:	5d33      	ldrb	r3, [r6, r4]
    1608:	2b00      	cmp	r3, #0
    160a:	d0f9      	beq.n	1600 <arrangeSensorData+0x1c>
    160c:	00a3      	lsls	r3, r4, #2
    160e:	191b      	adds	r3, r3, r4
    1610:	3304      	adds	r3, #4
    1612:	4a17      	ldr	r2, [pc, #92]	; (1670 <arrangeSensorData+0x8c>)
    1614:	4694      	mov	ip, r2
    1616:	4463      	add	r3, ip
				sendSensorOutputs[countSensorOutputs*5 + j + 4] = sensorOutputs[5*i + 4+j];
    1618:	00a9      	lsls	r1, r5, #2
    161a:	1949      	adds	r1, r1, r5
    161c:	1842      	adds	r2, r0, r1
    161e:	3105      	adds	r1, #5
    1620:	1841      	adds	r1, r0, r1
    1622:	781f      	ldrb	r7, [r3, #0]
    1624:	7117      	strb	r7, [r2, #4]
    1626:	3301      	adds	r3, #1
    1628:	3201      	adds	r2, #1
			for(j=0;j<5;j++)
    162a:	428a      	cmp	r2, r1
    162c:	d1f9      	bne.n	1622 <arrangeSensorData+0x3e>
    162e:	e7e5      	b.n	15fc <arrangeSensorData+0x18>
    1630:	2300      	movs	r3, #0
		if(outputsConnected[i] != NOTHINGCONNECTED )
    1632:	4c11      	ldr	r4, [pc, #68]	; (1678 <arrangeSensorData+0x94>)
    1634:	e004      	b.n	1640 <arrangeSensorData+0x5c>
					countSensorOutputs++;
    1636:	3501      	adds	r5, #1
    1638:	b2ed      	uxtb	r5, r5
    163a:	3301      	adds	r3, #1
	for(i=0;i<4;i++)
    163c:	2b04      	cmp	r3, #4
    163e:	d016      	beq.n	166e <arrangeSensorData+0x8a>
			if(outputsConnected[i] == OUTPUT_LEDMATRIX)
    1640:	5ce2      	ldrb	r2, [r4, r3]
    1642:	2a03      	cmp	r2, #3
    1644:	d1f9      	bne.n	163a <arrangeSensorData+0x56>
				if(countSensorOutputs < 3)
    1646:	2d02      	cmp	r5, #2
    1648:	d8f7      	bhi.n	163a <arrangeSensorData+0x56>
    164a:	009a      	lsls	r2, r3, #2
    164c:	18d2      	adds	r2, r2, r3
    164e:	3214      	adds	r2, #20
    1650:	4907      	ldr	r1, [pc, #28]	; (1670 <arrangeSensorData+0x8c>)
    1652:	468c      	mov	ip, r1
    1654:	4462      	add	r2, ip
						sendSensorOutputs[countSensorOutputs*5 + j + 4] = sensorOutputs[5*i + 20+j];
    1656:	00ae      	lsls	r6, r5, #2
    1658:	1976      	adds	r6, r6, r5
    165a:	1981      	adds	r1, r0, r6
    165c:	3605      	adds	r6, #5
    165e:	1986      	adds	r6, r0, r6
    1660:	7817      	ldrb	r7, [r2, #0]
    1662:	710f      	strb	r7, [r1, #4]
    1664:	3201      	adds	r2, #1
    1666:	3101      	adds	r1, #1
					for(j=0;j<5;j++)
    1668:	428e      	cmp	r6, r1
    166a:	d1f9      	bne.n	1660 <arrangeSensorData+0x7c>
    166c:	e7e3      	b.n	1636 <arrangeSensorData+0x52>
}
    166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1670:	20000f78 	.word	0x20000f78
    1674:	20000de8 	.word	0x20000de8
    1678:	20000f74 	.word	0x20000f74

0000167c <sendDataBLE>:
{
    167c:	b510      	push	{r4, lr}
	if(readySendData)
    167e:	4b09      	ldr	r3, [pc, #36]	; (16a4 <sendDataBLE+0x28>)
    1680:	781b      	ldrb	r3, [r3, #0]
    1682:	2b00      	cmp	r3, #0
    1684:	d100      	bne.n	1688 <sendDataBLE+0xc>
}
    1686:	bd10      	pop	{r4, pc}
		readySendData = false;
    1688:	2200      	movs	r2, #0
    168a:	4b06      	ldr	r3, [pc, #24]	; (16a4 <sendDataBLE+0x28>)
    168c:	701a      	strb	r2, [r3, #0]
		arrangeSensorData(sendSensorOutputs);
    168e:	4c06      	ldr	r4, [pc, #24]	; (16a8 <sendDataBLE+0x2c>)
    1690:	0020      	movs	r0, r4
    1692:	4b06      	ldr	r3, [pc, #24]	; (16ac <sendDataBLE+0x30>)
    1694:	4798      	blx	r3
		usart_write_buffer_wait(&usart_instance, sendSensorOutputs, LENGTH_SENSORS_DATA );
    1696:	2214      	movs	r2, #20
    1698:	0021      	movs	r1, r4
    169a:	4805      	ldr	r0, [pc, #20]	; (16b0 <sendDataBLE+0x34>)
    169c:	4b05      	ldr	r3, [pc, #20]	; (16b4 <sendDataBLE+0x38>)
    169e:	4798      	blx	r3
}
    16a0:	e7f1      	b.n	1686 <sendDataBLE+0xa>
    16a2:	46c0      	nop			; (mov r8, r8)
    16a4:	20000deb 	.word	0x20000deb
    16a8:	200000ec 	.word	0x200000ec
    16ac:	000015e5 	.word	0x000015e5
    16b0:	20000ee8 	.word	0x20000ee8
    16b4:	00002469 	.word	0x00002469

000016b8 <configureTimerCallbacks>:


void configureTimerCallbacks()
{
    16b8:	b510      	push	{r4, lr}
	tc_register_callback(&tc_encoder_capture, sendInfoCallback,TC_CALLBACK_OVERFLOW);
    16ba:	4c0c      	ldr	r4, [pc, #48]	; (16ec <configureTimerCallbacks+0x34>)
    16bc:	2200      	movs	r2, #0
    16be:	490c      	ldr	r1, [pc, #48]	; (16f0 <configureTimerCallbacks+0x38>)
    16c0:	0020      	movs	r0, r4
    16c2:	4b0c      	ldr	r3, [pc, #48]	; (16f4 <configureTimerCallbacks+0x3c>)
    16c4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    16c6:	6820      	ldr	r0, [r4, #0]
    16c8:	4b0b      	ldr	r3, [pc, #44]	; (16f8 <configureTimerCallbacks+0x40>)
    16ca:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    16cc:	4b0b      	ldr	r3, [pc, #44]	; (16fc <configureTimerCallbacks+0x44>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    16ce:	5c1a      	ldrb	r2, [r3, r0]
    16d0:	231f      	movs	r3, #31
    16d2:	4013      	ands	r3, r2
    16d4:	2201      	movs	r2, #1
    16d6:	0011      	movs	r1, r2
    16d8:	4099      	lsls	r1, r3
    16da:	4b09      	ldr	r3, [pc, #36]	; (1700 <configureTimerCallbacks+0x48>)
    16dc:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    16de:	7e63      	ldrb	r3, [r4, #25]
    16e0:	2101      	movs	r1, #1
    16e2:	430b      	orrs	r3, r1
    16e4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    16e6:	6823      	ldr	r3, [r4, #0]
    16e8:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_encoder_capture, TC_CALLBACK_OVERFLOW);
}
    16ea:	bd10      	pop	{r4, pc}
    16ec:	20000f1c 	.word	0x20000f1c
    16f0:	00001545 	.word	0x00001545
    16f4:	00000b21 	.word	0x00000b21
    16f8:	00000c09 	.word	0x00000c09
    16fc:	000053d0 	.word	0x000053d0
    1700:	e000e100 	.word	0xe000e100

00001704 <configureSendInfo>:


//Send data to BLE every 60msec so that notifications can be sent in a timely manner
void configureSendInfo()
{
    1704:	b510      	push	{r4, lr}
	configureTimer();
    1706:	4b02      	ldr	r3, [pc, #8]	; (1710 <configureSendInfo+0xc>)
    1708:	4798      	blx	r3
	configureTimerCallbacks();
    170a:	4b02      	ldr	r3, [pc, #8]	; (1714 <configureSendInfo+0x10>)
    170c:	4798      	blx	r3
    170e:	bd10      	pop	{r4, pc}
    1710:	00001575 	.word	0x00001575
    1714:	000016b9 	.word	0x000016b9

00001718 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1718:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    171a:	2000      	movs	r0, #0
    171c:	4b08      	ldr	r3, [pc, #32]	; (1740 <delay_init+0x28>)
    171e:	4798      	blx	r3
    1720:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1722:	4c08      	ldr	r4, [pc, #32]	; (1744 <delay_init+0x2c>)
    1724:	21fa      	movs	r1, #250	; 0xfa
    1726:	0089      	lsls	r1, r1, #2
    1728:	47a0      	blx	r4
    172a:	4b07      	ldr	r3, [pc, #28]	; (1748 <delay_init+0x30>)
    172c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    172e:	4907      	ldr	r1, [pc, #28]	; (174c <delay_init+0x34>)
    1730:	0028      	movs	r0, r5
    1732:	47a0      	blx	r4
    1734:	4b06      	ldr	r3, [pc, #24]	; (1750 <delay_init+0x38>)
    1736:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1738:	2205      	movs	r2, #5
    173a:	4b06      	ldr	r3, [pc, #24]	; (1754 <delay_init+0x3c>)
    173c:	601a      	str	r2, [r3, #0]
}
    173e:	bd70      	pop	{r4, r5, r6, pc}
    1740:	0000340d 	.word	0x0000340d
    1744:	000037f9 	.word	0x000037f9
    1748:	2000004c 	.word	0x2000004c
    174c:	000f4240 	.word	0x000f4240
    1750:	20000050 	.word	0x20000050
    1754:	e000e010 	.word	0xe000e010

00001758 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1758:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    175a:	4b08      	ldr	r3, [pc, #32]	; (177c <delay_cycles_ms+0x24>)
    175c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    175e:	4a08      	ldr	r2, [pc, #32]	; (1780 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1760:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1762:	2180      	movs	r1, #128	; 0x80
    1764:	0249      	lsls	r1, r1, #9
	while (n--) {
    1766:	3801      	subs	r0, #1
    1768:	d307      	bcc.n	177a <delay_cycles_ms+0x22>
	if (n > 0) {
    176a:	2c00      	cmp	r4, #0
    176c:	d0fb      	beq.n	1766 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    176e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1770:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1772:	6813      	ldr	r3, [r2, #0]
    1774:	420b      	tst	r3, r1
    1776:	d0fc      	beq.n	1772 <delay_cycles_ms+0x1a>
    1778:	e7f5      	b.n	1766 <delay_cycles_ms+0xe>
	}
}
    177a:	bd30      	pop	{r4, r5, pc}
    177c:	2000004c 	.word	0x2000004c
    1780:	e000e010 	.word	0xe000e010

00001784 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1784:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1786:	2200      	movs	r2, #0
    1788:	2300      	movs	r3, #0
    178a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    178c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    178e:	2100      	movs	r1, #0
    1790:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1792:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1794:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    1796:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    1798:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    179a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    179c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    179e:	24c0      	movs	r4, #192	; 0xc0
    17a0:	0164      	lsls	r4, r4, #5
    17a2:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    17a4:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    17a6:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    17a8:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    17aa:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    17ac:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    17ae:	242a      	movs	r4, #42	; 0x2a
    17b0:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    17b2:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    17b4:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    17b6:	3c06      	subs	r4, #6
    17b8:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    17ba:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    17bc:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    17be:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    17c0:	232b      	movs	r3, #43	; 0x2b
    17c2:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    17c4:	3301      	adds	r3, #1
    17c6:	54c1      	strb	r1, [r0, r3]
}
    17c8:	bd10      	pop	{r4, pc}
	...

000017cc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    17cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ce:	46d6      	mov	lr, sl
    17d0:	464f      	mov	r7, r9
    17d2:	4646      	mov	r6, r8
    17d4:	b5c0      	push	{r6, r7, lr}
    17d6:	b096      	sub	sp, #88	; 0x58
    17d8:	0007      	movs	r7, r0
    17da:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    17dc:	6001      	str	r1, [r0, #0]
    17de:	4ac6      	ldr	r2, [pc, #792]	; (1af8 <adc_init+0x32c>)
    17e0:	6a10      	ldr	r0, [r2, #32]
    17e2:	2380      	movs	r3, #128	; 0x80
    17e4:	025b      	lsls	r3, r3, #9
    17e6:	4303      	orrs	r3, r0
    17e8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    17ea:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    17ec:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    17ee:	07db      	lsls	r3, r3, #31
    17f0:	d505      	bpl.n	17fe <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    17f2:	b016      	add	sp, #88	; 0x58
    17f4:	bc1c      	pop	{r2, r3, r4}
    17f6:	4690      	mov	r8, r2
    17f8:	4699      	mov	r9, r3
    17fa:	46a2      	mov	sl, r4
    17fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    17fe:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1800:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1802:	079b      	lsls	r3, r3, #30
    1804:	d4f5      	bmi.n	17f2 <adc_init+0x26>
	module_inst->reference = config->reference;
    1806:	7873      	ldrb	r3, [r6, #1]
    1808:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    180a:	2b00      	cmp	r3, #0
    180c:	d104      	bne.n	1818 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    180e:	4abb      	ldr	r2, [pc, #748]	; (1afc <adc_init+0x330>)
    1810:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1812:	2104      	movs	r1, #4
    1814:	430b      	orrs	r3, r1
    1816:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1818:	2300      	movs	r3, #0
    181a:	60bb      	str	r3, [r7, #8]
    181c:	60fb      	str	r3, [r7, #12]
    181e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1820:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    1822:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1824:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1826:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1828:	4bb5      	ldr	r3, [pc, #724]	; (1b00 <adc_init+0x334>)
    182a:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    182c:	232a      	movs	r3, #42	; 0x2a
    182e:	5cf3      	ldrb	r3, [r6, r3]
    1830:	2b00      	cmp	r3, #0
    1832:	d105      	bne.n	1840 <adc_init+0x74>
    1834:	7d33      	ldrb	r3, [r6, #20]
    1836:	2b00      	cmp	r3, #0
    1838:	d102      	bne.n	1840 <adc_init+0x74>
		module_inst->software_trigger = true;
    183a:	3301      	adds	r3, #1
    183c:	777b      	strb	r3, [r7, #29]
    183e:	e001      	b.n	1844 <adc_init+0x78>
		module_inst->software_trigger = false;
    1840:	2300      	movs	r3, #0
    1842:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1844:	683b      	ldr	r3, [r7, #0]
    1846:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1848:	7833      	ldrb	r3, [r6, #0]
    184a:	466a      	mov	r2, sp
    184c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    184e:	4669      	mov	r1, sp
    1850:	201e      	movs	r0, #30
    1852:	4bac      	ldr	r3, [pc, #688]	; (1b04 <adc_init+0x338>)
    1854:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1856:	201e      	movs	r0, #30
    1858:	4bab      	ldr	r3, [pc, #684]	; (1b08 <adc_init+0x33c>)
    185a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    185c:	232c      	movs	r3, #44	; 0x2c
    185e:	5cf2      	ldrb	r2, [r6, r3]
    1860:	2a00      	cmp	r2, #0
    1862:	d054      	beq.n	190e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1864:	3b01      	subs	r3, #1
    1866:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1868:	7b33      	ldrb	r3, [r6, #12]
    186a:	18eb      	adds	r3, r5, r3
    186c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    186e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1870:	b2c9      	uxtb	r1, r1
    1872:	428b      	cmp	r3, r1
    1874:	d221      	bcs.n	18ba <adc_init+0xee>
    1876:	1952      	adds	r2, r2, r5
    1878:	b2d3      	uxtb	r3, r2
    187a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    187c:	4ba3      	ldr	r3, [pc, #652]	; (1b0c <adc_init+0x340>)
    187e:	469a      	mov	sl, r3
    1880:	e003      	b.n	188a <adc_init+0xbe>
			offset++;
    1882:	3501      	adds	r5, #1
    1884:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1886:	454d      	cmp	r5, r9
    1888:	d017      	beq.n	18ba <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    188a:	240f      	movs	r4, #15
    188c:	402c      	ands	r4, r5
    188e:	7b33      	ldrb	r3, [r6, #12]
    1890:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    1892:	2250      	movs	r2, #80	; 0x50
    1894:	499e      	ldr	r1, [pc, #632]	; (1b10 <adc_init+0x344>)
    1896:	a802      	add	r0, sp, #8
    1898:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    189a:	2c13      	cmp	r4, #19
    189c:	d8f1      	bhi.n	1882 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    189e:	00a4      	lsls	r4, r4, #2
    18a0:	ab02      	add	r3, sp, #8
    18a2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    18a4:	a901      	add	r1, sp, #4
    18a6:	2300      	movs	r3, #0
    18a8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    18aa:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    18ac:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    18ae:	3301      	adds	r3, #1
    18b0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    18b2:	b2c0      	uxtb	r0, r0
    18b4:	4b97      	ldr	r3, [pc, #604]	; (1b14 <adc_init+0x348>)
    18b6:	4798      	blx	r3
    18b8:	e7e3      	b.n	1882 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    18ba:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    18bc:	2250      	movs	r2, #80	; 0x50
    18be:	4994      	ldr	r1, [pc, #592]	; (1b10 <adc_init+0x344>)
    18c0:	a802      	add	r0, sp, #8
    18c2:	4b92      	ldr	r3, [pc, #584]	; (1b0c <adc_init+0x340>)
    18c4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    18c6:	2c13      	cmp	r4, #19
    18c8:	d913      	bls.n	18f2 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    18ca:	7d73      	ldrb	r3, [r6, #21]
    18cc:	009b      	lsls	r3, r3, #2
    18ce:	b2db      	uxtb	r3, r3
    18d0:	4642      	mov	r2, r8
    18d2:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    18d4:	7db3      	ldrb	r3, [r6, #22]
    18d6:	01db      	lsls	r3, r3, #7
    18d8:	7872      	ldrb	r2, [r6, #1]
    18da:	4313      	orrs	r3, r2
    18dc:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    18de:	4642      	mov	r2, r8
    18e0:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    18e2:	7933      	ldrb	r3, [r6, #4]
    18e4:	2b34      	cmp	r3, #52	; 0x34
    18e6:	d900      	bls.n	18ea <adc_init+0x11e>
    18e8:	e17b      	b.n	1be2 <adc_init+0x416>
    18ea:	009b      	lsls	r3, r3, #2
    18ec:	4a8a      	ldr	r2, [pc, #552]	; (1b18 <adc_init+0x34c>)
    18ee:	58d3      	ldr	r3, [r2, r3]
    18f0:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    18f2:	00a4      	lsls	r4, r4, #2
    18f4:	ab02      	add	r3, sp, #8
    18f6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    18f8:	a901      	add	r1, sp, #4
    18fa:	2300      	movs	r3, #0
    18fc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    18fe:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1900:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1902:	3301      	adds	r3, #1
    1904:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1906:	b2c0      	uxtb	r0, r0
    1908:	4b82      	ldr	r3, [pc, #520]	; (1b14 <adc_init+0x348>)
    190a:	4798      	blx	r3
    190c:	e7dd      	b.n	18ca <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    190e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    1910:	2250      	movs	r2, #80	; 0x50
    1912:	497f      	ldr	r1, [pc, #508]	; (1b10 <adc_init+0x344>)
    1914:	a802      	add	r0, sp, #8
    1916:	4b7d      	ldr	r3, [pc, #500]	; (1b0c <adc_init+0x340>)
    1918:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    191a:	2c13      	cmp	r4, #19
    191c:	d915      	bls.n	194a <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    191e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1920:	2250      	movs	r2, #80	; 0x50
    1922:	497b      	ldr	r1, [pc, #492]	; (1b10 <adc_init+0x344>)
    1924:	a802      	add	r0, sp, #8
    1926:	4b79      	ldr	r3, [pc, #484]	; (1b0c <adc_init+0x340>)
    1928:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    192a:	2c13      	cmp	r4, #19
    192c:	d8cd      	bhi.n	18ca <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    192e:	00a4      	lsls	r4, r4, #2
    1930:	ab02      	add	r3, sp, #8
    1932:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1934:	a901      	add	r1, sp, #4
    1936:	2300      	movs	r3, #0
    1938:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    193a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    193c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    193e:	3301      	adds	r3, #1
    1940:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1942:	b2c0      	uxtb	r0, r0
    1944:	4b73      	ldr	r3, [pc, #460]	; (1b14 <adc_init+0x348>)
    1946:	4798      	blx	r3
    1948:	e7bf      	b.n	18ca <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    194a:	00a4      	lsls	r4, r4, #2
    194c:	ab02      	add	r3, sp, #8
    194e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1950:	a901      	add	r1, sp, #4
    1952:	2300      	movs	r3, #0
    1954:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1956:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1958:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    195a:	3301      	adds	r3, #1
    195c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    195e:	b2c0      	uxtb	r0, r0
    1960:	4b6c      	ldr	r3, [pc, #432]	; (1b14 <adc_init+0x348>)
    1962:	4798      	blx	r3
    1964:	e7db      	b.n	191e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1966:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1968:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    196a:	2102      	movs	r1, #2
    196c:	e01a      	b.n	19a4 <adc_init+0x1d8>
		adjres = config->divide_result;
    196e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1970:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1972:	2410      	movs	r4, #16
    1974:	e016      	b.n	19a4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1976:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1978:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    197a:	2101      	movs	r1, #1
    197c:	e012      	b.n	19a4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    197e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1980:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1982:	2100      	movs	r1, #0
    1984:	e00e      	b.n	19a4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1986:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1988:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    198a:	2100      	movs	r1, #0
    198c:	e00a      	b.n	19a4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    198e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1990:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    1992:	2100      	movs	r1, #0
    1994:	e006      	b.n	19a4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1996:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1998:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    199a:	2100      	movs	r1, #0
    199c:	e002      	b.n	19a4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    199e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    19a0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    19a2:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    19a4:	0109      	lsls	r1, r1, #4
    19a6:	2270      	movs	r2, #112	; 0x70
    19a8:	400a      	ands	r2, r1
    19aa:	4313      	orrs	r3, r2
    19ac:	4642      	mov	r2, r8
    19ae:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    19b0:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    19b2:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    19b4:	2b3f      	cmp	r3, #63	; 0x3f
    19b6:	d900      	bls.n	19ba <adc_init+0x1ee>
    19b8:	e71b      	b.n	17f2 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    19ba:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    19bc:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    19be:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    19c0:	b25b      	sxtb	r3, r3
    19c2:	2b00      	cmp	r3, #0
    19c4:	dbfb      	blt.n	19be <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    19c6:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    19c8:	8872      	ldrh	r2, [r6, #2]
    19ca:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    19cc:	2224      	movs	r2, #36	; 0x24
    19ce:	5cb2      	ldrb	r2, [r6, r2]
    19d0:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    19d2:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    19d4:	7d32      	ldrb	r2, [r6, #20]
    19d6:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    19d8:	4313      	orrs	r3, r2
    19da:	7cb2      	ldrb	r2, [r6, #18]
    19dc:	0052      	lsls	r2, r2, #1
    19de:	4313      	orrs	r3, r2
    19e0:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    19e2:	4642      	mov	r2, r8
    19e4:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    19e6:	7e33      	ldrb	r3, [r6, #24]
    19e8:	2b00      	cmp	r3, #0
    19ea:	d020      	beq.n	1a2e <adc_init+0x262>
		switch (resolution) {
    19ec:	2c10      	cmp	r4, #16
    19ee:	d100      	bne.n	19f2 <adc_init+0x226>
    19f0:	e0d9      	b.n	1ba6 <adc_init+0x3da>
    19f2:	d800      	bhi.n	19f6 <adc_init+0x22a>
    19f4:	e098      	b.n	1b28 <adc_init+0x35c>
    19f6:	2c20      	cmp	r4, #32
    19f8:	d100      	bne.n	19fc <adc_init+0x230>
    19fa:	e0b6      	b.n	1b6a <adc_init+0x39e>
    19fc:	2c30      	cmp	r4, #48	; 0x30
    19fe:	d116      	bne.n	1a2e <adc_init+0x262>
			if (config->differential_mode &&
    1a00:	7cf2      	ldrb	r2, [r6, #19]
    1a02:	2a00      	cmp	r2, #0
    1a04:	d00a      	beq.n	1a1c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1a06:	69f2      	ldr	r2, [r6, #28]
    1a08:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    1a0a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1a0c:	2aff      	cmp	r2, #255	; 0xff
    1a0e:	d900      	bls.n	1a12 <adc_init+0x246>
    1a10:	e6ef      	b.n	17f2 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    1a12:	6a32      	ldr	r2, [r6, #32]
    1a14:	3280      	adds	r2, #128	; 0x80
    1a16:	2aff      	cmp	r2, #255	; 0xff
    1a18:	d900      	bls.n	1a1c <adc_init+0x250>
    1a1a:	e6ea      	b.n	17f2 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    1a1c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    1a1e:	69f2      	ldr	r2, [r6, #28]
    1a20:	2aff      	cmp	r2, #255	; 0xff
    1a22:	dd00      	ble.n	1a26 <adc_init+0x25a>
    1a24:	e6e5      	b.n	17f2 <adc_init+0x26>
    1a26:	6a32      	ldr	r2, [r6, #32]
    1a28:	2aff      	cmp	r2, #255	; 0xff
    1a2a:	dd00      	ble.n	1a2e <adc_init+0x262>
    1a2c:	e6e1      	b.n	17f2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1a2e:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1a30:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1a32:	b252      	sxtb	r2, r2
    1a34:	2a00      	cmp	r2, #0
    1a36:	dbfb      	blt.n	1a30 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1a38:	4642      	mov	r2, r8
    1a3a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    1a3c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1a3e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1a40:	b25b      	sxtb	r3, r3
    1a42:	2b00      	cmp	r3, #0
    1a44:	dbfb      	blt.n	1a3e <adc_init+0x272>
	adc_module->WINLT.reg =
    1a46:	8bb3      	ldrh	r3, [r6, #28]
    1a48:	4642      	mov	r2, r8
    1a4a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    1a4c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1a4e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1a50:	b25b      	sxtb	r3, r3
    1a52:	2b00      	cmp	r3, #0
    1a54:	dbfb      	blt.n	1a4e <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1a56:	8c33      	ldrh	r3, [r6, #32]
    1a58:	4642      	mov	r2, r8
    1a5a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1a5c:	232c      	movs	r3, #44	; 0x2c
    1a5e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1a60:	2b00      	cmp	r3, #0
    1a62:	d005      	beq.n	1a70 <adc_init+0x2a4>
		inputs_to_scan--;
    1a64:	3b01      	subs	r3, #1
    1a66:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1a68:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1a6a:	2b0f      	cmp	r3, #15
    1a6c:	d900      	bls.n	1a70 <adc_init+0x2a4>
    1a6e:	e6c0      	b.n	17f2 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1a70:	222b      	movs	r2, #43	; 0x2b
    1a72:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1a74:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1a76:	290f      	cmp	r1, #15
    1a78:	d900      	bls.n	1a7c <adc_init+0x2b0>
    1a7a:	e6ba      	b.n	17f2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1a7c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1a7e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1a80:	b252      	sxtb	r2, r2
    1a82:	2a00      	cmp	r2, #0
    1a84:	dbfb      	blt.n	1a7e <adc_init+0x2b2>
			config->negative_input |
    1a86:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1a88:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    1a8a:	4302      	orrs	r2, r0
    1a8c:	68b0      	ldr	r0, [r6, #8]
    1a8e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    1a90:	0509      	lsls	r1, r1, #20
			config->negative_input |
    1a92:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1a94:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1a96:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1a98:	4642      	mov	r2, r8
    1a9a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    1a9c:	232a      	movs	r3, #42	; 0x2a
    1a9e:	5cf3      	ldrb	r3, [r6, r3]
    1aa0:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    1aa2:	230f      	movs	r3, #15
    1aa4:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1aa6:	3315      	adds	r3, #21
    1aa8:	5cf3      	ldrb	r3, [r6, r3]
    1aaa:	2b00      	cmp	r3, #0
    1aac:	d012      	beq.n	1ad4 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1aae:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    1ab0:	4a1a      	ldr	r2, [pc, #104]	; (1b1c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    1ab2:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1ab4:	4293      	cmp	r3, r2
    1ab6:	d900      	bls.n	1aba <adc_init+0x2ee>
    1ab8:	e69b      	b.n	17f2 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1aba:	4642      	mov	r2, r8
    1abc:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    1abe:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    1ac0:	2380      	movs	r3, #128	; 0x80
    1ac2:	011b      	lsls	r3, r3, #4
    1ac4:	18d3      	adds	r3, r2, r3
    1ac6:	4915      	ldr	r1, [pc, #84]	; (1b1c <adc_init+0x350>)
    1ac8:	b29b      	uxth	r3, r3
    1aca:	428b      	cmp	r3, r1
    1acc:	d900      	bls.n	1ad0 <adc_init+0x304>
    1ace:	e690      	b.n	17f2 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1ad0:	4643      	mov	r3, r8
    1ad2:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1ad4:	4b12      	ldr	r3, [pc, #72]	; (1b20 <adc_init+0x354>)
    1ad6:	681b      	ldr	r3, [r3, #0]
    1ad8:	015b      	lsls	r3, r3, #5
    1ada:	22e0      	movs	r2, #224	; 0xe0
    1adc:	00d2      	lsls	r2, r2, #3
    1ade:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    1ae0:	4a10      	ldr	r2, [pc, #64]	; (1b24 <adc_init+0x358>)
    1ae2:	6851      	ldr	r1, [r2, #4]
    1ae4:	0149      	lsls	r1, r1, #5
    1ae6:	6812      	ldr	r2, [r2, #0]
    1ae8:	0ed2      	lsrs	r2, r2, #27
    1aea:	430a      	orrs	r2, r1
    1aec:	b2d2      	uxtb	r2, r2
			) |
    1aee:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1af0:	4642      	mov	r2, r8
    1af2:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    1af4:	2000      	movs	r0, #0
    1af6:	e67c      	b.n	17f2 <adc_init+0x26>
    1af8:	40000400 	.word	0x40000400
    1afc:	40000800 	.word	0x40000800
    1b00:	20000f38 	.word	0x20000f38
    1b04:	00003525 	.word	0x00003525
    1b08:	00003499 	.word	0x00003499
    1b0c:	00005289 	.word	0x00005289
    1b10:	000054ac 	.word	0x000054ac
    1b14:	0000361d 	.word	0x0000361d
    1b18:	000053d8 	.word	0x000053d8
    1b1c:	00000fff 	.word	0x00000fff
    1b20:	00806024 	.word	0x00806024
    1b24:	00806020 	.word	0x00806020
		switch (resolution) {
    1b28:	2c00      	cmp	r4, #0
    1b2a:	d000      	beq.n	1b2e <adc_init+0x362>
    1b2c:	e77f      	b.n	1a2e <adc_init+0x262>
			if (config->differential_mode &&
    1b2e:	7cf2      	ldrb	r2, [r6, #19]
    1b30:	2a00      	cmp	r2, #0
    1b32:	d00f      	beq.n	1b54 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    1b34:	69f2      	ldr	r2, [r6, #28]
    1b36:	2180      	movs	r1, #128	; 0x80
    1b38:	0109      	lsls	r1, r1, #4
    1b3a:	468c      	mov	ip, r1
    1b3c:	4462      	add	r2, ip
			if (config->differential_mode &&
    1b3e:	492a      	ldr	r1, [pc, #168]	; (1be8 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1b40:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1b42:	428a      	cmp	r2, r1
    1b44:	d900      	bls.n	1b48 <adc_init+0x37c>
    1b46:	e654      	b.n	17f2 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1b48:	6a32      	ldr	r2, [r6, #32]
    1b4a:	4462      	add	r2, ip
    1b4c:	4926      	ldr	r1, [pc, #152]	; (1be8 <adc_init+0x41c>)
    1b4e:	428a      	cmp	r2, r1
    1b50:	d900      	bls.n	1b54 <adc_init+0x388>
    1b52:	e64e      	b.n	17f2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    1b54:	4a24      	ldr	r2, [pc, #144]	; (1be8 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1b56:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1b58:	69f1      	ldr	r1, [r6, #28]
    1b5a:	4291      	cmp	r1, r2
    1b5c:	dd00      	ble.n	1b60 <adc_init+0x394>
    1b5e:	e648      	b.n	17f2 <adc_init+0x26>
    1b60:	6a31      	ldr	r1, [r6, #32]
    1b62:	4291      	cmp	r1, r2
    1b64:	dd00      	ble.n	1b68 <adc_init+0x39c>
    1b66:	e644      	b.n	17f2 <adc_init+0x26>
    1b68:	e761      	b.n	1a2e <adc_init+0x262>
			if (config->differential_mode &&
    1b6a:	7cf2      	ldrb	r2, [r6, #19]
    1b6c:	2a00      	cmp	r2, #0
    1b6e:	d00f      	beq.n	1b90 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    1b70:	69f2      	ldr	r2, [r6, #28]
    1b72:	2180      	movs	r1, #128	; 0x80
    1b74:	0089      	lsls	r1, r1, #2
    1b76:	468c      	mov	ip, r1
    1b78:	4462      	add	r2, ip
			if (config->differential_mode &&
    1b7a:	491c      	ldr	r1, [pc, #112]	; (1bec <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1b7c:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1b7e:	428a      	cmp	r2, r1
    1b80:	d900      	bls.n	1b84 <adc_init+0x3b8>
    1b82:	e636      	b.n	17f2 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    1b84:	6a32      	ldr	r2, [r6, #32]
    1b86:	4462      	add	r2, ip
    1b88:	4918      	ldr	r1, [pc, #96]	; (1bec <adc_init+0x420>)
    1b8a:	428a      	cmp	r2, r1
    1b8c:	d900      	bls.n	1b90 <adc_init+0x3c4>
    1b8e:	e630      	b.n	17f2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1b90:	4a16      	ldr	r2, [pc, #88]	; (1bec <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1b92:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    1b94:	69f1      	ldr	r1, [r6, #28]
    1b96:	4291      	cmp	r1, r2
    1b98:	dd00      	ble.n	1b9c <adc_init+0x3d0>
    1b9a:	e62a      	b.n	17f2 <adc_init+0x26>
    1b9c:	6a31      	ldr	r1, [r6, #32]
    1b9e:	4291      	cmp	r1, r2
    1ba0:	dd00      	ble.n	1ba4 <adc_init+0x3d8>
    1ba2:	e626      	b.n	17f2 <adc_init+0x26>
    1ba4:	e743      	b.n	1a2e <adc_init+0x262>
			if (config->differential_mode &&
    1ba6:	7cf2      	ldrb	r2, [r6, #19]
    1ba8:	2a00      	cmp	r2, #0
    1baa:	d00f      	beq.n	1bcc <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    1bac:	69f2      	ldr	r2, [r6, #28]
    1bae:	2180      	movs	r1, #128	; 0x80
    1bb0:	0209      	lsls	r1, r1, #8
    1bb2:	468c      	mov	ip, r1
    1bb4:	4462      	add	r2, ip
			if (config->differential_mode &&
    1bb6:	490e      	ldr	r1, [pc, #56]	; (1bf0 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1bb8:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1bba:	428a      	cmp	r2, r1
    1bbc:	d900      	bls.n	1bc0 <adc_init+0x3f4>
    1bbe:	e618      	b.n	17f2 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    1bc0:	6a32      	ldr	r2, [r6, #32]
    1bc2:	4462      	add	r2, ip
    1bc4:	490a      	ldr	r1, [pc, #40]	; (1bf0 <adc_init+0x424>)
    1bc6:	428a      	cmp	r2, r1
    1bc8:	d900      	bls.n	1bcc <adc_init+0x400>
    1bca:	e612      	b.n	17f2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    1bcc:	4a08      	ldr	r2, [pc, #32]	; (1bf0 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1bce:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    1bd0:	69f1      	ldr	r1, [r6, #28]
    1bd2:	4291      	cmp	r1, r2
    1bd4:	dd00      	ble.n	1bd8 <adc_init+0x40c>
    1bd6:	e60c      	b.n	17f2 <adc_init+0x26>
    1bd8:	6a31      	ldr	r1, [r6, #32]
    1bda:	4291      	cmp	r1, r2
    1bdc:	dd00      	ble.n	1be0 <adc_init+0x414>
    1bde:	e608      	b.n	17f2 <adc_init+0x26>
    1be0:	e725      	b.n	1a2e <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    1be2:	2017      	movs	r0, #23
    1be4:	e605      	b.n	17f2 <adc_init+0x26>
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	00000fff 	.word	0x00000fff
    1bec:	000003ff 	.word	0x000003ff
    1bf0:	0000ffff 	.word	0x0000ffff

00001bf4 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1bf4:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1bf6:	4b2e      	ldr	r3, [pc, #184]	; (1cb0 <ADC_Handler+0xbc>)
    1bf8:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    1bfa:	6823      	ldr	r3, [r4, #0]
    1bfc:	7e1d      	ldrb	r5, [r3, #24]
    1bfe:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    1c00:	07ea      	lsls	r2, r5, #31
    1c02:	d505      	bpl.n	1c10 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1c04:	7ee2      	ldrb	r2, [r4, #27]
    1c06:	07d2      	lsls	r2, r2, #31
    1c08:	d502      	bpl.n	1c10 <ADC_Handler+0x1c>
    1c0a:	7ea2      	ldrb	r2, [r4, #26]
    1c0c:	07d2      	lsls	r2, r2, #31
    1c0e:	d416      	bmi.n	1c3e <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    1c10:	076b      	lsls	r3, r5, #29
    1c12:	d508      	bpl.n	1c26 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1c14:	2304      	movs	r3, #4
    1c16:	6822      	ldr	r2, [r4, #0]
    1c18:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1c1a:	7ee3      	ldrb	r3, [r4, #27]
    1c1c:	079b      	lsls	r3, r3, #30
    1c1e:	d502      	bpl.n	1c26 <ADC_Handler+0x32>
    1c20:	7ea3      	ldrb	r3, [r4, #26]
    1c22:	079b      	lsls	r3, r3, #30
    1c24:	d43c      	bmi.n	1ca0 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    1c26:	07ab      	lsls	r3, r5, #30
    1c28:	d508      	bpl.n	1c3c <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1c2a:	2302      	movs	r3, #2
    1c2c:	6822      	ldr	r2, [r4, #0]
    1c2e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1c30:	7ee3      	ldrb	r3, [r4, #27]
    1c32:	075b      	lsls	r3, r3, #29
    1c34:	d502      	bpl.n	1c3c <ADC_Handler+0x48>
    1c36:	7ea3      	ldrb	r3, [r4, #26]
    1c38:	075b      	lsls	r3, r3, #29
    1c3a:	d435      	bmi.n	1ca8 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    1c3c:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1c3e:	2201      	movs	r2, #1
    1c40:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    1c42:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1c44:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    1c46:	b25b      	sxtb	r3, r3
    1c48:	2b00      	cmp	r3, #0
    1c4a:	dbfb      	blt.n	1c44 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    1c4c:	6961      	ldr	r1, [r4, #20]
    1c4e:	1c8b      	adds	r3, r1, #2
    1c50:	6163      	str	r3, [r4, #20]
    1c52:	8b53      	ldrh	r3, [r2, #26]
    1c54:	b29b      	uxth	r3, r3
    1c56:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    1c58:	8b23      	ldrh	r3, [r4, #24]
    1c5a:	3b01      	subs	r3, #1
    1c5c:	b29b      	uxth	r3, r3
    1c5e:	8323      	strh	r3, [r4, #24]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d011      	beq.n	1c88 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
    1c64:	7f63      	ldrb	r3, [r4, #29]
    1c66:	2b00      	cmp	r3, #0
    1c68:	d0d2      	beq.n	1c10 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1c6a:	6822      	ldr	r2, [r4, #0]
    1c6c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1c6e:	b25b      	sxtb	r3, r3
    1c70:	2b00      	cmp	r3, #0
    1c72:	dbfb      	blt.n	1c6c <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1c74:	7b13      	ldrb	r3, [r2, #12]
    1c76:	2102      	movs	r1, #2
    1c78:	430b      	orrs	r3, r1
    1c7a:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    1c7c:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1c7e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1c80:	b25b      	sxtb	r3, r3
    1c82:	2b00      	cmp	r3, #0
    1c84:	dbfb      	blt.n	1c7e <ADC_Handler+0x8a>
    1c86:	e7c3      	b.n	1c10 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    1c88:	7f23      	ldrb	r3, [r4, #28]
    1c8a:	2b05      	cmp	r3, #5
    1c8c:	d1c0      	bne.n	1c10 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    1c8e:	2300      	movs	r3, #0
    1c90:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    1c92:	3301      	adds	r3, #1
    1c94:	6822      	ldr	r2, [r4, #0]
    1c96:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1c98:	0020      	movs	r0, r4
    1c9a:	68a3      	ldr	r3, [r4, #8]
    1c9c:	4798      	blx	r3
    1c9e:	e7b7      	b.n	1c10 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1ca0:	0020      	movs	r0, r4
    1ca2:	68e3      	ldr	r3, [r4, #12]
    1ca4:	4798      	blx	r3
    1ca6:	e7be      	b.n	1c26 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1ca8:	6923      	ldr	r3, [r4, #16]
    1caa:	0020      	movs	r0, r4
    1cac:	4798      	blx	r3
}
    1cae:	e7c5      	b.n	1c3c <ADC_Handler+0x48>
    1cb0:	20000f38 	.word	0x20000f38

00001cb4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cb6:	46de      	mov	lr, fp
    1cb8:	4657      	mov	r7, sl
    1cba:	464e      	mov	r6, r9
    1cbc:	4645      	mov	r5, r8
    1cbe:	b5e0      	push	{r5, r6, r7, lr}
    1cc0:	b087      	sub	sp, #28
    1cc2:	4680      	mov	r8, r0
    1cc4:	9104      	str	r1, [sp, #16]
    1cc6:	0016      	movs	r6, r2
    1cc8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1cca:	2200      	movs	r2, #0
    1ccc:	2300      	movs	r3, #0
    1cce:	2100      	movs	r1, #0
    1cd0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1cd2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1cd4:	2001      	movs	r0, #1
    1cd6:	0021      	movs	r1, r4
    1cd8:	9600      	str	r6, [sp, #0]
    1cda:	9701      	str	r7, [sp, #4]
    1cdc:	465c      	mov	r4, fp
    1cde:	9403      	str	r4, [sp, #12]
    1ce0:	4644      	mov	r4, r8
    1ce2:	9405      	str	r4, [sp, #20]
    1ce4:	e013      	b.n	1d0e <long_division+0x5a>
    1ce6:	2420      	movs	r4, #32
    1ce8:	1a64      	subs	r4, r4, r1
    1cea:	0005      	movs	r5, r0
    1cec:	40e5      	lsrs	r5, r4
    1cee:	46a8      	mov	r8, r5
    1cf0:	e014      	b.n	1d1c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1cf2:	9c00      	ldr	r4, [sp, #0]
    1cf4:	9d01      	ldr	r5, [sp, #4]
    1cf6:	1b12      	subs	r2, r2, r4
    1cf8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1cfa:	465c      	mov	r4, fp
    1cfc:	464d      	mov	r5, r9
    1cfe:	432c      	orrs	r4, r5
    1d00:	46a3      	mov	fp, r4
    1d02:	9c03      	ldr	r4, [sp, #12]
    1d04:	4645      	mov	r5, r8
    1d06:	432c      	orrs	r4, r5
    1d08:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1d0a:	3901      	subs	r1, #1
    1d0c:	d325      	bcc.n	1d5a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1d0e:	2420      	movs	r4, #32
    1d10:	4264      	negs	r4, r4
    1d12:	190c      	adds	r4, r1, r4
    1d14:	d4e7      	bmi.n	1ce6 <long_division+0x32>
    1d16:	0005      	movs	r5, r0
    1d18:	40a5      	lsls	r5, r4
    1d1a:	46a8      	mov	r8, r5
    1d1c:	0004      	movs	r4, r0
    1d1e:	408c      	lsls	r4, r1
    1d20:	46a1      	mov	r9, r4
		r = r << 1;
    1d22:	1892      	adds	r2, r2, r2
    1d24:	415b      	adcs	r3, r3
    1d26:	0014      	movs	r4, r2
    1d28:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1d2a:	9e05      	ldr	r6, [sp, #20]
    1d2c:	464f      	mov	r7, r9
    1d2e:	403e      	ands	r6, r7
    1d30:	46b4      	mov	ip, r6
    1d32:	9e04      	ldr	r6, [sp, #16]
    1d34:	4647      	mov	r7, r8
    1d36:	403e      	ands	r6, r7
    1d38:	46b2      	mov	sl, r6
    1d3a:	4666      	mov	r6, ip
    1d3c:	4657      	mov	r7, sl
    1d3e:	433e      	orrs	r6, r7
    1d40:	d003      	beq.n	1d4a <long_division+0x96>
			r |= 0x01;
    1d42:	0006      	movs	r6, r0
    1d44:	4326      	orrs	r6, r4
    1d46:	0032      	movs	r2, r6
    1d48:	002b      	movs	r3, r5
		if (r >= d) {
    1d4a:	9c00      	ldr	r4, [sp, #0]
    1d4c:	9d01      	ldr	r5, [sp, #4]
    1d4e:	429d      	cmp	r5, r3
    1d50:	d8db      	bhi.n	1d0a <long_division+0x56>
    1d52:	d1ce      	bne.n	1cf2 <long_division+0x3e>
    1d54:	4294      	cmp	r4, r2
    1d56:	d8d8      	bhi.n	1d0a <long_division+0x56>
    1d58:	e7cb      	b.n	1cf2 <long_division+0x3e>
    1d5a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1d5c:	4658      	mov	r0, fp
    1d5e:	0019      	movs	r1, r3
    1d60:	b007      	add	sp, #28
    1d62:	bc3c      	pop	{r2, r3, r4, r5}
    1d64:	4690      	mov	r8, r2
    1d66:	4699      	mov	r9, r3
    1d68:	46a2      	mov	sl, r4
    1d6a:	46ab      	mov	fp, r5
    1d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d6e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1d6e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1d70:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d72:	2340      	movs	r3, #64	; 0x40
    1d74:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1d76:	4281      	cmp	r1, r0
    1d78:	d202      	bcs.n	1d80 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1d7a:	0018      	movs	r0, r3
    1d7c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1d7e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1d80:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1d82:	1c63      	adds	r3, r4, #1
    1d84:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1d86:	4288      	cmp	r0, r1
    1d88:	d9f9      	bls.n	1d7e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d8a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1d8c:	2cff      	cmp	r4, #255	; 0xff
    1d8e:	d8f4      	bhi.n	1d7a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1d90:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1d92:	2300      	movs	r3, #0
    1d94:	e7f1      	b.n	1d7a <_sercom_get_sync_baud_val+0xc>
	...

00001d98 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9a:	b083      	sub	sp, #12
    1d9c:	000f      	movs	r7, r1
    1d9e:	0016      	movs	r6, r2
    1da0:	aa08      	add	r2, sp, #32
    1da2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1da4:	0004      	movs	r4, r0
    1da6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1da8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1daa:	42bc      	cmp	r4, r7
    1dac:	d902      	bls.n	1db4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1dae:	0010      	movs	r0, r2
    1db0:	b003      	add	sp, #12
    1db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1db4:	2b00      	cmp	r3, #0
    1db6:	d114      	bne.n	1de2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1db8:	0002      	movs	r2, r0
    1dba:	0008      	movs	r0, r1
    1dbc:	2100      	movs	r1, #0
    1dbe:	4c19      	ldr	r4, [pc, #100]	; (1e24 <_sercom_get_async_baud_val+0x8c>)
    1dc0:	47a0      	blx	r4
    1dc2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1dc4:	003a      	movs	r2, r7
    1dc6:	2300      	movs	r3, #0
    1dc8:	2000      	movs	r0, #0
    1dca:	4c17      	ldr	r4, [pc, #92]	; (1e28 <_sercom_get_async_baud_val+0x90>)
    1dcc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1dce:	2200      	movs	r2, #0
    1dd0:	2301      	movs	r3, #1
    1dd2:	1a12      	subs	r2, r2, r0
    1dd4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1dd6:	0c12      	lsrs	r2, r2, #16
    1dd8:	041b      	lsls	r3, r3, #16
    1dda:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1ddc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1dde:	2200      	movs	r2, #0
    1de0:	e7e5      	b.n	1dae <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1de2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1de4:	2b01      	cmp	r3, #1
    1de6:	d1f9      	bne.n	1ddc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1de8:	000a      	movs	r2, r1
    1dea:	2300      	movs	r3, #0
    1dec:	2100      	movs	r1, #0
    1dee:	4c0d      	ldr	r4, [pc, #52]	; (1e24 <_sercom_get_async_baud_val+0x8c>)
    1df0:	47a0      	blx	r4
    1df2:	0002      	movs	r2, r0
    1df4:	000b      	movs	r3, r1
    1df6:	9200      	str	r2, [sp, #0]
    1df8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1dfa:	0038      	movs	r0, r7
    1dfc:	2100      	movs	r1, #0
    1dfe:	4c0a      	ldr	r4, [pc, #40]	; (1e28 <_sercom_get_async_baud_val+0x90>)
    1e00:	47a0      	blx	r4
    1e02:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1e04:	2380      	movs	r3, #128	; 0x80
    1e06:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e08:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1e0a:	4298      	cmp	r0, r3
    1e0c:	d8cf      	bhi.n	1dae <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1e0e:	0f79      	lsrs	r1, r7, #29
    1e10:	00f8      	lsls	r0, r7, #3
    1e12:	9a00      	ldr	r2, [sp, #0]
    1e14:	9b01      	ldr	r3, [sp, #4]
    1e16:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1e18:	00ea      	lsls	r2, r5, #3
    1e1a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1e1c:	b2d2      	uxtb	r2, r2
    1e1e:	0352      	lsls	r2, r2, #13
    1e20:	432a      	orrs	r2, r5
    1e22:	e7db      	b.n	1ddc <_sercom_get_async_baud_val+0x44>
    1e24:	00003911 	.word	0x00003911
    1e28:	00001cb5 	.word	0x00001cb5

00001e2c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1e2c:	b510      	push	{r4, lr}
    1e2e:	b082      	sub	sp, #8
    1e30:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1e32:	4b0e      	ldr	r3, [pc, #56]	; (1e6c <sercom_set_gclk_generator+0x40>)
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d007      	beq.n	1e4a <sercom_set_gclk_generator+0x1e>
    1e3a:	2900      	cmp	r1, #0
    1e3c:	d105      	bne.n	1e4a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1e3e:	4b0b      	ldr	r3, [pc, #44]	; (1e6c <sercom_set_gclk_generator+0x40>)
    1e40:	785b      	ldrb	r3, [r3, #1]
    1e42:	4283      	cmp	r3, r0
    1e44:	d010      	beq.n	1e68 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1e46:	201d      	movs	r0, #29
    1e48:	e00c      	b.n	1e64 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1e4a:	a901      	add	r1, sp, #4
    1e4c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1e4e:	2013      	movs	r0, #19
    1e50:	4b07      	ldr	r3, [pc, #28]	; (1e70 <sercom_set_gclk_generator+0x44>)
    1e52:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1e54:	2013      	movs	r0, #19
    1e56:	4b07      	ldr	r3, [pc, #28]	; (1e74 <sercom_set_gclk_generator+0x48>)
    1e58:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1e5a:	4b04      	ldr	r3, [pc, #16]	; (1e6c <sercom_set_gclk_generator+0x40>)
    1e5c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1e5e:	2201      	movs	r2, #1
    1e60:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1e62:	2000      	movs	r0, #0
}
    1e64:	b002      	add	sp, #8
    1e66:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1e68:	2000      	movs	r0, #0
    1e6a:	e7fb      	b.n	1e64 <sercom_set_gclk_generator+0x38>
    1e6c:	20000104 	.word	0x20000104
    1e70:	00003525 	.word	0x00003525
    1e74:	00003499 	.word	0x00003499

00001e78 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1e78:	4b40      	ldr	r3, [pc, #256]	; (1f7c <_sercom_get_default_pad+0x104>)
    1e7a:	4298      	cmp	r0, r3
    1e7c:	d031      	beq.n	1ee2 <_sercom_get_default_pad+0x6a>
    1e7e:	d90a      	bls.n	1e96 <_sercom_get_default_pad+0x1e>
    1e80:	4b3f      	ldr	r3, [pc, #252]	; (1f80 <_sercom_get_default_pad+0x108>)
    1e82:	4298      	cmp	r0, r3
    1e84:	d04d      	beq.n	1f22 <_sercom_get_default_pad+0xaa>
    1e86:	4b3f      	ldr	r3, [pc, #252]	; (1f84 <_sercom_get_default_pad+0x10c>)
    1e88:	4298      	cmp	r0, r3
    1e8a:	d05a      	beq.n	1f42 <_sercom_get_default_pad+0xca>
    1e8c:	4b3e      	ldr	r3, [pc, #248]	; (1f88 <_sercom_get_default_pad+0x110>)
    1e8e:	4298      	cmp	r0, r3
    1e90:	d037      	beq.n	1f02 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1e92:	2000      	movs	r0, #0
}
    1e94:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1e96:	4b3d      	ldr	r3, [pc, #244]	; (1f8c <_sercom_get_default_pad+0x114>)
    1e98:	4298      	cmp	r0, r3
    1e9a:	d00c      	beq.n	1eb6 <_sercom_get_default_pad+0x3e>
    1e9c:	4b3c      	ldr	r3, [pc, #240]	; (1f90 <_sercom_get_default_pad+0x118>)
    1e9e:	4298      	cmp	r0, r3
    1ea0:	d1f7      	bne.n	1e92 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ea2:	2901      	cmp	r1, #1
    1ea4:	d017      	beq.n	1ed6 <_sercom_get_default_pad+0x5e>
    1ea6:	2900      	cmp	r1, #0
    1ea8:	d05d      	beq.n	1f66 <_sercom_get_default_pad+0xee>
    1eaa:	2902      	cmp	r1, #2
    1eac:	d015      	beq.n	1eda <_sercom_get_default_pad+0x62>
    1eae:	2903      	cmp	r1, #3
    1eb0:	d015      	beq.n	1ede <_sercom_get_default_pad+0x66>
	return 0;
    1eb2:	2000      	movs	r0, #0
    1eb4:	e7ee      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eb6:	2901      	cmp	r1, #1
    1eb8:	d007      	beq.n	1eca <_sercom_get_default_pad+0x52>
    1eba:	2900      	cmp	r1, #0
    1ebc:	d051      	beq.n	1f62 <_sercom_get_default_pad+0xea>
    1ebe:	2902      	cmp	r1, #2
    1ec0:	d005      	beq.n	1ece <_sercom_get_default_pad+0x56>
    1ec2:	2903      	cmp	r1, #3
    1ec4:	d005      	beq.n	1ed2 <_sercom_get_default_pad+0x5a>
	return 0;
    1ec6:	2000      	movs	r0, #0
    1ec8:	e7e4      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eca:	4832      	ldr	r0, [pc, #200]	; (1f94 <_sercom_get_default_pad+0x11c>)
    1ecc:	e7e2      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1ece:	4832      	ldr	r0, [pc, #200]	; (1f98 <_sercom_get_default_pad+0x120>)
    1ed0:	e7e0      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1ed2:	4832      	ldr	r0, [pc, #200]	; (1f9c <_sercom_get_default_pad+0x124>)
    1ed4:	e7de      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1ed6:	4832      	ldr	r0, [pc, #200]	; (1fa0 <_sercom_get_default_pad+0x128>)
    1ed8:	e7dc      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1eda:	4832      	ldr	r0, [pc, #200]	; (1fa4 <_sercom_get_default_pad+0x12c>)
    1edc:	e7da      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1ede:	4832      	ldr	r0, [pc, #200]	; (1fa8 <_sercom_get_default_pad+0x130>)
    1ee0:	e7d8      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1ee2:	2901      	cmp	r1, #1
    1ee4:	d007      	beq.n	1ef6 <_sercom_get_default_pad+0x7e>
    1ee6:	2900      	cmp	r1, #0
    1ee8:	d03f      	beq.n	1f6a <_sercom_get_default_pad+0xf2>
    1eea:	2902      	cmp	r1, #2
    1eec:	d005      	beq.n	1efa <_sercom_get_default_pad+0x82>
    1eee:	2903      	cmp	r1, #3
    1ef0:	d005      	beq.n	1efe <_sercom_get_default_pad+0x86>
	return 0;
    1ef2:	2000      	movs	r0, #0
    1ef4:	e7ce      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ef6:	482d      	ldr	r0, [pc, #180]	; (1fac <_sercom_get_default_pad+0x134>)
    1ef8:	e7cc      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1efa:	482d      	ldr	r0, [pc, #180]	; (1fb0 <_sercom_get_default_pad+0x138>)
    1efc:	e7ca      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1efe:	482d      	ldr	r0, [pc, #180]	; (1fb4 <_sercom_get_default_pad+0x13c>)
    1f00:	e7c8      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f02:	2901      	cmp	r1, #1
    1f04:	d007      	beq.n	1f16 <_sercom_get_default_pad+0x9e>
    1f06:	2900      	cmp	r1, #0
    1f08:	d031      	beq.n	1f6e <_sercom_get_default_pad+0xf6>
    1f0a:	2902      	cmp	r1, #2
    1f0c:	d005      	beq.n	1f1a <_sercom_get_default_pad+0xa2>
    1f0e:	2903      	cmp	r1, #3
    1f10:	d005      	beq.n	1f1e <_sercom_get_default_pad+0xa6>
	return 0;
    1f12:	2000      	movs	r0, #0
    1f14:	e7be      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f16:	4828      	ldr	r0, [pc, #160]	; (1fb8 <_sercom_get_default_pad+0x140>)
    1f18:	e7bc      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f1a:	4828      	ldr	r0, [pc, #160]	; (1fbc <_sercom_get_default_pad+0x144>)
    1f1c:	e7ba      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f1e:	4828      	ldr	r0, [pc, #160]	; (1fc0 <_sercom_get_default_pad+0x148>)
    1f20:	e7b8      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f22:	2901      	cmp	r1, #1
    1f24:	d007      	beq.n	1f36 <_sercom_get_default_pad+0xbe>
    1f26:	2900      	cmp	r1, #0
    1f28:	d023      	beq.n	1f72 <_sercom_get_default_pad+0xfa>
    1f2a:	2902      	cmp	r1, #2
    1f2c:	d005      	beq.n	1f3a <_sercom_get_default_pad+0xc2>
    1f2e:	2903      	cmp	r1, #3
    1f30:	d005      	beq.n	1f3e <_sercom_get_default_pad+0xc6>
	return 0;
    1f32:	2000      	movs	r0, #0
    1f34:	e7ae      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f36:	4823      	ldr	r0, [pc, #140]	; (1fc4 <_sercom_get_default_pad+0x14c>)
    1f38:	e7ac      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f3a:	4823      	ldr	r0, [pc, #140]	; (1fc8 <_sercom_get_default_pad+0x150>)
    1f3c:	e7aa      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f3e:	4823      	ldr	r0, [pc, #140]	; (1fcc <_sercom_get_default_pad+0x154>)
    1f40:	e7a8      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f42:	2901      	cmp	r1, #1
    1f44:	d007      	beq.n	1f56 <_sercom_get_default_pad+0xde>
    1f46:	2900      	cmp	r1, #0
    1f48:	d015      	beq.n	1f76 <_sercom_get_default_pad+0xfe>
    1f4a:	2902      	cmp	r1, #2
    1f4c:	d005      	beq.n	1f5a <_sercom_get_default_pad+0xe2>
    1f4e:	2903      	cmp	r1, #3
    1f50:	d005      	beq.n	1f5e <_sercom_get_default_pad+0xe6>
	return 0;
    1f52:	2000      	movs	r0, #0
    1f54:	e79e      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f56:	481e      	ldr	r0, [pc, #120]	; (1fd0 <_sercom_get_default_pad+0x158>)
    1f58:	e79c      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f5a:	481e      	ldr	r0, [pc, #120]	; (1fd4 <_sercom_get_default_pad+0x15c>)
    1f5c:	e79a      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f5e:	481e      	ldr	r0, [pc, #120]	; (1fd8 <_sercom_get_default_pad+0x160>)
    1f60:	e798      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f62:	481e      	ldr	r0, [pc, #120]	; (1fdc <_sercom_get_default_pad+0x164>)
    1f64:	e796      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f66:	2003      	movs	r0, #3
    1f68:	e794      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f6a:	481d      	ldr	r0, [pc, #116]	; (1fe0 <_sercom_get_default_pad+0x168>)
    1f6c:	e792      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f6e:	481d      	ldr	r0, [pc, #116]	; (1fe4 <_sercom_get_default_pad+0x16c>)
    1f70:	e790      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f72:	481d      	ldr	r0, [pc, #116]	; (1fe8 <_sercom_get_default_pad+0x170>)
    1f74:	e78e      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f76:	481d      	ldr	r0, [pc, #116]	; (1fec <_sercom_get_default_pad+0x174>)
    1f78:	e78c      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	42001000 	.word	0x42001000
    1f80:	42001800 	.word	0x42001800
    1f84:	42001c00 	.word	0x42001c00
    1f88:	42001400 	.word	0x42001400
    1f8c:	42000800 	.word	0x42000800
    1f90:	42000c00 	.word	0x42000c00
    1f94:	00050003 	.word	0x00050003
    1f98:	00060003 	.word	0x00060003
    1f9c:	00070003 	.word	0x00070003
    1fa0:	00010003 	.word	0x00010003
    1fa4:	001e0003 	.word	0x001e0003
    1fa8:	001f0003 	.word	0x001f0003
    1fac:	00090003 	.word	0x00090003
    1fb0:	000a0003 	.word	0x000a0003
    1fb4:	000b0003 	.word	0x000b0003
    1fb8:	00110003 	.word	0x00110003
    1fbc:	00120003 	.word	0x00120003
    1fc0:	00130003 	.word	0x00130003
    1fc4:	000d0003 	.word	0x000d0003
    1fc8:	000e0003 	.word	0x000e0003
    1fcc:	000f0003 	.word	0x000f0003
    1fd0:	00170003 	.word	0x00170003
    1fd4:	00180003 	.word	0x00180003
    1fd8:	00190003 	.word	0x00190003
    1fdc:	00040003 	.word	0x00040003
    1fe0:	00080003 	.word	0x00080003
    1fe4:	00100003 	.word	0x00100003
    1fe8:	000c0003 	.word	0x000c0003
    1fec:	00160003 	.word	0x00160003

00001ff0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1ff0:	b530      	push	{r4, r5, lr}
    1ff2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1ff4:	4b0b      	ldr	r3, [pc, #44]	; (2024 <STACK_SIZE+0x24>)
    1ff6:	466a      	mov	r2, sp
    1ff8:	cb32      	ldmia	r3!, {r1, r4, r5}
    1ffa:	c232      	stmia	r2!, {r1, r4, r5}
    1ffc:	cb32      	ldmia	r3!, {r1, r4, r5}
    1ffe:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2000:	9b00      	ldr	r3, [sp, #0]
    2002:	4283      	cmp	r3, r0
    2004:	d00b      	beq.n	201e <STACK_SIZE+0x1e>
    2006:	2301      	movs	r3, #1
    2008:	009a      	lsls	r2, r3, #2
    200a:	4669      	mov	r1, sp
    200c:	5852      	ldr	r2, [r2, r1]
    200e:	4282      	cmp	r2, r0
    2010:	d006      	beq.n	2020 <STACK_SIZE+0x20>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2012:	3301      	adds	r3, #1
    2014:	2b06      	cmp	r3, #6
    2016:	d1f7      	bne.n	2008 <STACK_SIZE+0x8>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2018:	2000      	movs	r0, #0
}
    201a:	b007      	add	sp, #28
    201c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    201e:	2300      	movs	r3, #0
			return i;
    2020:	b2d8      	uxtb	r0, r3
    2022:	e7fa      	b.n	201a <STACK_SIZE+0x1a>
    2024:	000054fc 	.word	0x000054fc

00002028 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2028:	4770      	bx	lr
	...

0000202c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    202c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    202e:	4b0a      	ldr	r3, [pc, #40]	; (2058 <_sercom_set_handler+0x2c>)
    2030:	781b      	ldrb	r3, [r3, #0]
    2032:	2b00      	cmp	r3, #0
    2034:	d10c      	bne.n	2050 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2036:	4f09      	ldr	r7, [pc, #36]	; (205c <_sercom_set_handler+0x30>)
    2038:	4e09      	ldr	r6, [pc, #36]	; (2060 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    203a:	4d0a      	ldr	r5, [pc, #40]	; (2064 <_sercom_set_handler+0x38>)
    203c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    203e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2040:	195a      	adds	r2, r3, r5
    2042:	6014      	str	r4, [r2, #0]
    2044:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2046:	2b18      	cmp	r3, #24
    2048:	d1f9      	bne.n	203e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    204a:	2201      	movs	r2, #1
    204c:	4b02      	ldr	r3, [pc, #8]	; (2058 <_sercom_set_handler+0x2c>)
    204e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2050:	0080      	lsls	r0, r0, #2
    2052:	4b02      	ldr	r3, [pc, #8]	; (205c <_sercom_set_handler+0x30>)
    2054:	50c1      	str	r1, [r0, r3]
}
    2056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2058:	20000106 	.word	0x20000106
    205c:	20000108 	.word	0x20000108
    2060:	00002029 	.word	0x00002029
    2064:	20000f3c 	.word	0x20000f3c

00002068 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2068:	b500      	push	{lr}
    206a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    206c:	2309      	movs	r3, #9
    206e:	466a      	mov	r2, sp
    2070:	7013      	strb	r3, [r2, #0]
    2072:	3301      	adds	r3, #1
    2074:	7053      	strb	r3, [r2, #1]
    2076:	3301      	adds	r3, #1
    2078:	7093      	strb	r3, [r2, #2]
    207a:	3301      	adds	r3, #1
    207c:	70d3      	strb	r3, [r2, #3]
    207e:	3301      	adds	r3, #1
    2080:	7113      	strb	r3, [r2, #4]
    2082:	3301      	adds	r3, #1
    2084:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2086:	4b03      	ldr	r3, [pc, #12]	; (2094 <_sercom_get_interrupt_vector+0x2c>)
    2088:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    208a:	466b      	mov	r3, sp
    208c:	5618      	ldrsb	r0, [r3, r0]
}
    208e:	b003      	add	sp, #12
    2090:	bd00      	pop	{pc}
    2092:	46c0      	nop			; (mov r8, r8)
    2094:	00001ff1 	.word	0x00001ff1

00002098 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2098:	b510      	push	{r4, lr}
    209a:	4b02      	ldr	r3, [pc, #8]	; (20a4 <SERCOM0_Handler+0xc>)
    209c:	681b      	ldr	r3, [r3, #0]
    209e:	2000      	movs	r0, #0
    20a0:	4798      	blx	r3
    20a2:	bd10      	pop	{r4, pc}
    20a4:	20000108 	.word	0x20000108

000020a8 <SERCOM1_Handler>:
    20a8:	b510      	push	{r4, lr}
    20aa:	4b02      	ldr	r3, [pc, #8]	; (20b4 <SERCOM1_Handler+0xc>)
    20ac:	685b      	ldr	r3, [r3, #4]
    20ae:	2001      	movs	r0, #1
    20b0:	4798      	blx	r3
    20b2:	bd10      	pop	{r4, pc}
    20b4:	20000108 	.word	0x20000108

000020b8 <SERCOM2_Handler>:
    20b8:	b510      	push	{r4, lr}
    20ba:	4b02      	ldr	r3, [pc, #8]	; (20c4 <SERCOM2_Handler+0xc>)
    20bc:	689b      	ldr	r3, [r3, #8]
    20be:	2002      	movs	r0, #2
    20c0:	4798      	blx	r3
    20c2:	bd10      	pop	{r4, pc}
    20c4:	20000108 	.word	0x20000108

000020c8 <SERCOM3_Handler>:
    20c8:	b510      	push	{r4, lr}
    20ca:	4b02      	ldr	r3, [pc, #8]	; (20d4 <SERCOM3_Handler+0xc>)
    20cc:	68db      	ldr	r3, [r3, #12]
    20ce:	2003      	movs	r0, #3
    20d0:	4798      	blx	r3
    20d2:	bd10      	pop	{r4, pc}
    20d4:	20000108 	.word	0x20000108

000020d8 <SERCOM4_Handler>:
    20d8:	b510      	push	{r4, lr}
    20da:	4b02      	ldr	r3, [pc, #8]	; (20e4 <SERCOM4_Handler+0xc>)
    20dc:	691b      	ldr	r3, [r3, #16]
    20de:	2004      	movs	r0, #4
    20e0:	4798      	blx	r3
    20e2:	bd10      	pop	{r4, pc}
    20e4:	20000108 	.word	0x20000108

000020e8 <SERCOM5_Handler>:
    20e8:	b510      	push	{r4, lr}
    20ea:	4b02      	ldr	r3, [pc, #8]	; (20f4 <SERCOM5_Handler+0xc>)
    20ec:	695b      	ldr	r3, [r3, #20]
    20ee:	2005      	movs	r0, #5
    20f0:	4798      	blx	r3
    20f2:	bd10      	pop	{r4, pc}
    20f4:	20000108 	.word	0x20000108

000020f8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fa:	46de      	mov	lr, fp
    20fc:	4657      	mov	r7, sl
    20fe:	464e      	mov	r6, r9
    2100:	4645      	mov	r5, r8
    2102:	b5e0      	push	{r5, r6, r7, lr}
    2104:	b091      	sub	sp, #68	; 0x44
    2106:	0005      	movs	r5, r0
    2108:	000c      	movs	r4, r1
    210a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    210c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    210e:	0008      	movs	r0, r1
    2110:	4bbc      	ldr	r3, [pc, #752]	; (2404 <usart_init+0x30c>)
    2112:	4798      	blx	r3
    2114:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2116:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2118:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    211a:	07db      	lsls	r3, r3, #31
    211c:	d506      	bpl.n	212c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    211e:	b011      	add	sp, #68	; 0x44
    2120:	bc3c      	pop	{r2, r3, r4, r5}
    2122:	4690      	mov	r8, r2
    2124:	4699      	mov	r9, r3
    2126:	46a2      	mov	sl, r4
    2128:	46ab      	mov	fp, r5
    212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    212c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    212e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2130:	079b      	lsls	r3, r3, #30
    2132:	d4f4      	bmi.n	211e <usart_init+0x26>
    2134:	49b4      	ldr	r1, [pc, #720]	; (2408 <usart_init+0x310>)
    2136:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2138:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    213a:	2301      	movs	r3, #1
    213c:	40bb      	lsls	r3, r7
    213e:	4303      	orrs	r3, r0
    2140:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2142:	a90f      	add	r1, sp, #60	; 0x3c
    2144:	272d      	movs	r7, #45	; 0x2d
    2146:	5df3      	ldrb	r3, [r6, r7]
    2148:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    214a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    214c:	b2d3      	uxtb	r3, r2
    214e:	9302      	str	r3, [sp, #8]
    2150:	0018      	movs	r0, r3
    2152:	4bae      	ldr	r3, [pc, #696]	; (240c <usart_init+0x314>)
    2154:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2156:	9802      	ldr	r0, [sp, #8]
    2158:	4bad      	ldr	r3, [pc, #692]	; (2410 <usart_init+0x318>)
    215a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    215c:	5df0      	ldrb	r0, [r6, r7]
    215e:	2100      	movs	r1, #0
    2160:	4bac      	ldr	r3, [pc, #688]	; (2414 <usart_init+0x31c>)
    2162:	4798      	blx	r3
	module->character_size = config->character_size;
    2164:	7af3      	ldrb	r3, [r6, #11]
    2166:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2168:	2324      	movs	r3, #36	; 0x24
    216a:	5cf3      	ldrb	r3, [r6, r3]
    216c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    216e:	2325      	movs	r3, #37	; 0x25
    2170:	5cf3      	ldrb	r3, [r6, r3]
    2172:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2174:	7ef3      	ldrb	r3, [r6, #27]
    2176:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2178:	7f33      	ldrb	r3, [r6, #28]
    217a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    217c:	682b      	ldr	r3, [r5, #0]
    217e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2180:	0018      	movs	r0, r3
    2182:	4ba0      	ldr	r3, [pc, #640]	; (2404 <usart_init+0x30c>)
    2184:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2186:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2188:	2200      	movs	r2, #0
    218a:	230e      	movs	r3, #14
    218c:	a906      	add	r1, sp, #24
    218e:	468c      	mov	ip, r1
    2190:	4463      	add	r3, ip
    2192:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2194:	8a32      	ldrh	r2, [r6, #16]
    2196:	9202      	str	r2, [sp, #8]
    2198:	2380      	movs	r3, #128	; 0x80
    219a:	01db      	lsls	r3, r3, #7
    219c:	429a      	cmp	r2, r3
    219e:	d100      	bne.n	21a2 <usart_init+0xaa>
    21a0:	e09e      	b.n	22e0 <usart_init+0x1e8>
    21a2:	d90f      	bls.n	21c4 <usart_init+0xcc>
    21a4:	23c0      	movs	r3, #192	; 0xc0
    21a6:	01db      	lsls	r3, r3, #7
    21a8:	9a02      	ldr	r2, [sp, #8]
    21aa:	429a      	cmp	r2, r3
    21ac:	d100      	bne.n	21b0 <usart_init+0xb8>
    21ae:	e092      	b.n	22d6 <usart_init+0x1de>
    21b0:	2380      	movs	r3, #128	; 0x80
    21b2:	021b      	lsls	r3, r3, #8
    21b4:	429a      	cmp	r2, r3
    21b6:	d000      	beq.n	21ba <usart_init+0xc2>
    21b8:	e11f      	b.n	23fa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    21ba:	2303      	movs	r3, #3
    21bc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    21be:	2300      	movs	r3, #0
    21c0:	9307      	str	r3, [sp, #28]
    21c2:	e008      	b.n	21d6 <usart_init+0xde>
	switch (config->sample_rate) {
    21c4:	2380      	movs	r3, #128	; 0x80
    21c6:	019b      	lsls	r3, r3, #6
    21c8:	429a      	cmp	r2, r3
    21ca:	d000      	beq.n	21ce <usart_init+0xd6>
    21cc:	e115      	b.n	23fa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    21ce:	2310      	movs	r3, #16
    21d0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    21d2:	3b0f      	subs	r3, #15
    21d4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    21d6:	6833      	ldr	r3, [r6, #0]
    21d8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    21da:	68f3      	ldr	r3, [r6, #12]
    21dc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    21de:	6973      	ldr	r3, [r6, #20]
    21e0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    21e2:	7e33      	ldrb	r3, [r6, #24]
    21e4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    21e6:	2326      	movs	r3, #38	; 0x26
    21e8:	5cf3      	ldrb	r3, [r6, r3]
    21ea:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    21ec:	6873      	ldr	r3, [r6, #4]
    21ee:	4699      	mov	r9, r3
	switch (transfer_mode)
    21f0:	2b00      	cmp	r3, #0
    21f2:	d100      	bne.n	21f6 <usart_init+0xfe>
    21f4:	e0a0      	b.n	2338 <usart_init+0x240>
    21f6:	2380      	movs	r3, #128	; 0x80
    21f8:	055b      	lsls	r3, r3, #21
    21fa:	4599      	cmp	r9, r3
    21fc:	d100      	bne.n	2200 <usart_init+0x108>
    21fe:	e084      	b.n	230a <usart_init+0x212>
	if(config->encoding_format_enable) {
    2200:	7e73      	ldrb	r3, [r6, #25]
    2202:	2b00      	cmp	r3, #0
    2204:	d002      	beq.n	220c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2206:	7eb3      	ldrb	r3, [r6, #26]
    2208:	4642      	mov	r2, r8
    220a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    220c:	682a      	ldr	r2, [r5, #0]
    220e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2210:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2212:	2b00      	cmp	r3, #0
    2214:	d1fc      	bne.n	2210 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    2216:	330e      	adds	r3, #14
    2218:	aa06      	add	r2, sp, #24
    221a:	4694      	mov	ip, r2
    221c:	4463      	add	r3, ip
    221e:	881b      	ldrh	r3, [r3, #0]
    2220:	4642      	mov	r2, r8
    2222:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2224:	9b05      	ldr	r3, [sp, #20]
    2226:	9a03      	ldr	r2, [sp, #12]
    2228:	4313      	orrs	r3, r2
    222a:	9a04      	ldr	r2, [sp, #16]
    222c:	4313      	orrs	r3, r2
    222e:	464a      	mov	r2, r9
    2230:	4313      	orrs	r3, r2
    2232:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2234:	465b      	mov	r3, fp
    2236:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2238:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    223a:	4653      	mov	r3, sl
    223c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    223e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2240:	2327      	movs	r3, #39	; 0x27
    2242:	5cf3      	ldrb	r3, [r6, r3]
    2244:	2b00      	cmp	r3, #0
    2246:	d101      	bne.n	224c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2248:	3304      	adds	r3, #4
    224a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    224c:	7e73      	ldrb	r3, [r6, #25]
    224e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2250:	7f32      	ldrb	r2, [r6, #28]
    2252:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2254:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2256:	7f72      	ldrb	r2, [r6, #29]
    2258:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    225a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    225c:	2224      	movs	r2, #36	; 0x24
    225e:	5cb2      	ldrb	r2, [r6, r2]
    2260:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2262:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2264:	2225      	movs	r2, #37	; 0x25
    2266:	5cb2      	ldrb	r2, [r6, r2]
    2268:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    226a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    226c:	7ab1      	ldrb	r1, [r6, #10]
    226e:	7af2      	ldrb	r2, [r6, #11]
    2270:	4311      	orrs	r1, r2
    2272:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2274:	8933      	ldrh	r3, [r6, #8]
    2276:	2bff      	cmp	r3, #255	; 0xff
    2278:	d100      	bne.n	227c <usart_init+0x184>
    227a:	e081      	b.n	2380 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    227c:	2280      	movs	r2, #128	; 0x80
    227e:	0452      	lsls	r2, r2, #17
    2280:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2282:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2284:	232c      	movs	r3, #44	; 0x2c
    2286:	5cf3      	ldrb	r3, [r6, r3]
    2288:	2b00      	cmp	r3, #0
    228a:	d103      	bne.n	2294 <usart_init+0x19c>
    228c:	4b62      	ldr	r3, [pc, #392]	; (2418 <usart_init+0x320>)
    228e:	789b      	ldrb	r3, [r3, #2]
    2290:	079b      	lsls	r3, r3, #30
    2292:	d501      	bpl.n	2298 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2294:	2380      	movs	r3, #128	; 0x80
    2296:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2298:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    229a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    229c:	2b00      	cmp	r3, #0
    229e:	d1fc      	bne.n	229a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    22a0:	4643      	mov	r3, r8
    22a2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    22a4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    22a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    22a8:	2b00      	cmp	r3, #0
    22aa:	d1fc      	bne.n	22a6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    22ac:	4643      	mov	r3, r8
    22ae:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    22b0:	ab0e      	add	r3, sp, #56	; 0x38
    22b2:	2280      	movs	r2, #128	; 0x80
    22b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    22b6:	2200      	movs	r2, #0
    22b8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    22ba:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    22bc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    22be:	6b33      	ldr	r3, [r6, #48]	; 0x30
    22c0:	930a      	str	r3, [sp, #40]	; 0x28
    22c2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    22c4:	930b      	str	r3, [sp, #44]	; 0x2c
    22c6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    22c8:	930c      	str	r3, [sp, #48]	; 0x30
    22ca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    22cc:	9302      	str	r3, [sp, #8]
    22ce:	930d      	str	r3, [sp, #52]	; 0x34
    22d0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    22d2:	ae0a      	add	r6, sp, #40	; 0x28
    22d4:	e063      	b.n	239e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    22d6:	2308      	movs	r3, #8
    22d8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    22da:	3b07      	subs	r3, #7
    22dc:	9307      	str	r3, [sp, #28]
    22de:	e77a      	b.n	21d6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    22e0:	6833      	ldr	r3, [r6, #0]
    22e2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    22e4:	68f3      	ldr	r3, [r6, #12]
    22e6:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    22e8:	6973      	ldr	r3, [r6, #20]
    22ea:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    22ec:	7e33      	ldrb	r3, [r6, #24]
    22ee:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    22f0:	2326      	movs	r3, #38	; 0x26
    22f2:	5cf3      	ldrb	r3, [r6, r3]
    22f4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    22f6:	6873      	ldr	r3, [r6, #4]
    22f8:	4699      	mov	r9, r3
	switch (transfer_mode)
    22fa:	2b00      	cmp	r3, #0
    22fc:	d018      	beq.n	2330 <usart_init+0x238>
    22fe:	2380      	movs	r3, #128	; 0x80
    2300:	055b      	lsls	r3, r3, #21
    2302:	4599      	cmp	r9, r3
    2304:	d001      	beq.n	230a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2306:	2000      	movs	r0, #0
    2308:	e025      	b.n	2356 <usart_init+0x25e>
			if (!config->use_external_clock) {
    230a:	2327      	movs	r3, #39	; 0x27
    230c:	5cf3      	ldrb	r3, [r6, r3]
    230e:	2b00      	cmp	r3, #0
    2310:	d000      	beq.n	2314 <usart_init+0x21c>
    2312:	e775      	b.n	2200 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2314:	6a33      	ldr	r3, [r6, #32]
    2316:	001f      	movs	r7, r3
    2318:	b2c0      	uxtb	r0, r0
    231a:	4b40      	ldr	r3, [pc, #256]	; (241c <usart_init+0x324>)
    231c:	4798      	blx	r3
    231e:	0001      	movs	r1, r0
    2320:	220e      	movs	r2, #14
    2322:	ab06      	add	r3, sp, #24
    2324:	469c      	mov	ip, r3
    2326:	4462      	add	r2, ip
    2328:	0038      	movs	r0, r7
    232a:	4b3d      	ldr	r3, [pc, #244]	; (2420 <usart_init+0x328>)
    232c:	4798      	blx	r3
    232e:	e012      	b.n	2356 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2330:	2308      	movs	r3, #8
    2332:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2334:	2300      	movs	r3, #0
    2336:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2338:	2327      	movs	r3, #39	; 0x27
    233a:	5cf3      	ldrb	r3, [r6, r3]
    233c:	2b00      	cmp	r3, #0
    233e:	d00e      	beq.n	235e <usart_init+0x266>
				status_code =
    2340:	9b06      	ldr	r3, [sp, #24]
    2342:	9300      	str	r3, [sp, #0]
    2344:	9b07      	ldr	r3, [sp, #28]
    2346:	220e      	movs	r2, #14
    2348:	a906      	add	r1, sp, #24
    234a:	468c      	mov	ip, r1
    234c:	4462      	add	r2, ip
    234e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2350:	6a30      	ldr	r0, [r6, #32]
    2352:	4f34      	ldr	r7, [pc, #208]	; (2424 <usart_init+0x32c>)
    2354:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2356:	2800      	cmp	r0, #0
    2358:	d000      	beq.n	235c <usart_init+0x264>
    235a:	e6e0      	b.n	211e <usart_init+0x26>
    235c:	e750      	b.n	2200 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    235e:	6a33      	ldr	r3, [r6, #32]
    2360:	001f      	movs	r7, r3
    2362:	b2c0      	uxtb	r0, r0
    2364:	4b2d      	ldr	r3, [pc, #180]	; (241c <usart_init+0x324>)
    2366:	4798      	blx	r3
    2368:	0001      	movs	r1, r0
				status_code =
    236a:	9b06      	ldr	r3, [sp, #24]
    236c:	9300      	str	r3, [sp, #0]
    236e:	9b07      	ldr	r3, [sp, #28]
    2370:	220e      	movs	r2, #14
    2372:	a806      	add	r0, sp, #24
    2374:	4684      	mov	ip, r0
    2376:	4462      	add	r2, ip
    2378:	0038      	movs	r0, r7
    237a:	4f2a      	ldr	r7, [pc, #168]	; (2424 <usart_init+0x32c>)
    237c:	47b8      	blx	r7
    237e:	e7ea      	b.n	2356 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2380:	7ef3      	ldrb	r3, [r6, #27]
    2382:	2b00      	cmp	r3, #0
    2384:	d100      	bne.n	2388 <usart_init+0x290>
    2386:	e77d      	b.n	2284 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2388:	2380      	movs	r3, #128	; 0x80
    238a:	04db      	lsls	r3, r3, #19
    238c:	431f      	orrs	r7, r3
    238e:	e779      	b.n	2284 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2390:	0020      	movs	r0, r4
    2392:	4b25      	ldr	r3, [pc, #148]	; (2428 <usart_init+0x330>)
    2394:	4798      	blx	r3
    2396:	e007      	b.n	23a8 <usart_init+0x2b0>
    2398:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    239a:	2f04      	cmp	r7, #4
    239c:	d00d      	beq.n	23ba <usart_init+0x2c2>
    239e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    23a0:	00bb      	lsls	r3, r7, #2
    23a2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    23a4:	2800      	cmp	r0, #0
    23a6:	d0f3      	beq.n	2390 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    23a8:	1c43      	adds	r3, r0, #1
    23aa:	d0f5      	beq.n	2398 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    23ac:	a90e      	add	r1, sp, #56	; 0x38
    23ae:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    23b0:	0c00      	lsrs	r0, r0, #16
    23b2:	b2c0      	uxtb	r0, r0
    23b4:	4b1d      	ldr	r3, [pc, #116]	; (242c <usart_init+0x334>)
    23b6:	4798      	blx	r3
    23b8:	e7ee      	b.n	2398 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    23ba:	2300      	movs	r3, #0
    23bc:	60eb      	str	r3, [r5, #12]
    23be:	612b      	str	r3, [r5, #16]
    23c0:	616b      	str	r3, [r5, #20]
    23c2:	61ab      	str	r3, [r5, #24]
    23c4:	61eb      	str	r3, [r5, #28]
    23c6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    23c8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    23ca:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    23cc:	2200      	movs	r2, #0
    23ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    23d0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    23d2:	3330      	adds	r3, #48	; 0x30
    23d4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    23d6:	3301      	adds	r3, #1
    23d8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    23da:	3301      	adds	r3, #1
    23dc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    23de:	3301      	adds	r3, #1
    23e0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    23e2:	6828      	ldr	r0, [r5, #0]
    23e4:	4b07      	ldr	r3, [pc, #28]	; (2404 <usart_init+0x30c>)
    23e6:	4798      	blx	r3
    23e8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    23ea:	4911      	ldr	r1, [pc, #68]	; (2430 <usart_init+0x338>)
    23ec:	4b11      	ldr	r3, [pc, #68]	; (2434 <usart_init+0x33c>)
    23ee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    23f0:	00a4      	lsls	r4, r4, #2
    23f2:	4b11      	ldr	r3, [pc, #68]	; (2438 <usart_init+0x340>)
    23f4:	50e5      	str	r5, [r4, r3]
	return status_code;
    23f6:	2000      	movs	r0, #0
    23f8:	e691      	b.n	211e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    23fa:	2310      	movs	r3, #16
    23fc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    23fe:	2300      	movs	r3, #0
    2400:	9307      	str	r3, [sp, #28]
    2402:	e6e8      	b.n	21d6 <usart_init+0xde>
    2404:	00001ff1 	.word	0x00001ff1
    2408:	40000400 	.word	0x40000400
    240c:	00003525 	.word	0x00003525
    2410:	00003499 	.word	0x00003499
    2414:	00001e2d 	.word	0x00001e2d
    2418:	41002000 	.word	0x41002000
    241c:	00003541 	.word	0x00003541
    2420:	00001d6f 	.word	0x00001d6f
    2424:	00001d99 	.word	0x00001d99
    2428:	00001e79 	.word	0x00001e79
    242c:	0000361d 	.word	0x0000361d
    2430:	000025b1 	.word	0x000025b1
    2434:	0000202d 	.word	0x0000202d
    2438:	20000f3c 	.word	0x20000f3c

0000243c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    243c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    243e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2440:	2a00      	cmp	r2, #0
    2442:	d101      	bne.n	2448 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2444:	0018      	movs	r0, r3
    2446:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2448:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    244a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    244c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    244e:	2a00      	cmp	r2, #0
    2450:	d1f8      	bne.n	2444 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2452:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2454:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2456:	2a00      	cmp	r2, #0
    2458:	d1fc      	bne.n	2454 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    245a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    245c:	2102      	movs	r1, #2
    245e:	7e1a      	ldrb	r2, [r3, #24]
    2460:	420a      	tst	r2, r1
    2462:	d0fc      	beq.n	245e <usart_write_wait+0x22>
	return STATUS_OK;
    2464:	2300      	movs	r3, #0
    2466:	e7ed      	b.n	2444 <usart_write_wait+0x8>

00002468 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2468:	b5f0      	push	{r4, r5, r6, r7, lr}
    246a:	46ce      	mov	lr, r9
    246c:	4647      	mov	r7, r8
    246e:	b580      	push	{r7, lr}
    2470:	b083      	sub	sp, #12
    2472:	0005      	movs	r5, r0
    2474:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2476:	2017      	movs	r0, #23
	if (length == 0) {
    2478:	2a00      	cmp	r2, #0
    247a:	d104      	bne.n	2486 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    247c:	b003      	add	sp, #12
    247e:	bc0c      	pop	{r2, r3}
    2480:	4690      	mov	r8, r2
    2482:	4699      	mov	r9, r3
    2484:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    2486:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    2488:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    248a:	2b00      	cmp	r3, #0
    248c:	d0f6      	beq.n	247c <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    248e:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2490:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2492:	2b00      	cmp	r3, #0
    2494:	d1fc      	bne.n	2490 <usart_write_buffer_wait+0x28>
	while (length--) {
    2496:	3a01      	subs	r2, #1
    2498:	b293      	uxth	r3, r2
    249a:	4699      	mov	r9, r3
    249c:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    249e:	2701      	movs	r7, #1
	while (length--) {
    24a0:	4b1f      	ldr	r3, [pc, #124]	; (2520 <usart_write_buffer_wait+0xb8>)
    24a2:	4698      	mov	r8, r3
    24a4:	e011      	b.n	24ca <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    24a6:	1c73      	adds	r3, r6, #1
    24a8:	b29b      	uxth	r3, r3
    24aa:	9a01      	ldr	r2, [sp, #4]
    24ac:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    24ae:	796a      	ldrb	r2, [r5, #5]
    24b0:	2a01      	cmp	r2, #1
    24b2:	d017      	beq.n	24e4 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    24b4:	b289      	uxth	r1, r1
    24b6:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    24b8:	0028      	movs	r0, r5
    24ba:	4b1a      	ldr	r3, [pc, #104]	; (2524 <usart_write_buffer_wait+0xbc>)
    24bc:	4798      	blx	r3
	while (length--) {
    24be:	464b      	mov	r3, r9
    24c0:	3b01      	subs	r3, #1
    24c2:	b29b      	uxth	r3, r3
    24c4:	4699      	mov	r9, r3
    24c6:	4543      	cmp	r3, r8
    24c8:	d013      	beq.n	24f2 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    24ca:	7e23      	ldrb	r3, [r4, #24]
    24cc:	423b      	tst	r3, r7
    24ce:	d1ea      	bne.n	24a6 <usart_write_buffer_wait+0x3e>
    24d0:	4b13      	ldr	r3, [pc, #76]	; (2520 <usart_write_buffer_wait+0xb8>)
    24d2:	7e22      	ldrb	r2, [r4, #24]
    24d4:	423a      	tst	r2, r7
    24d6:	d1e6      	bne.n	24a6 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    24d8:	2b01      	cmp	r3, #1
    24da:	d019      	beq.n	2510 <usart_write_buffer_wait+0xa8>
    24dc:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    24de:	2b00      	cmp	r3, #0
    24e0:	d1f7      	bne.n	24d2 <usart_write_buffer_wait+0x6a>
    24e2:	e7e0      	b.n	24a6 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    24e4:	3602      	adds	r6, #2
    24e6:	b2b6      	uxth	r6, r6
    24e8:	9a01      	ldr	r2, [sp, #4]
    24ea:	5cd3      	ldrb	r3, [r2, r3]
    24ec:	021b      	lsls	r3, r3, #8
    24ee:	4319      	orrs	r1, r3
    24f0:	e7e2      	b.n	24b8 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    24f2:	7e23      	ldrb	r3, [r4, #24]
    24f4:	079b      	lsls	r3, r3, #30
    24f6:	d40d      	bmi.n	2514 <usart_write_buffer_wait+0xac>
    24f8:	4b09      	ldr	r3, [pc, #36]	; (2520 <usart_write_buffer_wait+0xb8>)
    24fa:	2102      	movs	r1, #2
    24fc:	7e22      	ldrb	r2, [r4, #24]
    24fe:	420a      	tst	r2, r1
    2500:	d10a      	bne.n	2518 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    2502:	2b01      	cmp	r3, #1
    2504:	d00a      	beq.n	251c <usart_write_buffer_wait+0xb4>
    2506:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2508:	2b00      	cmp	r3, #0
    250a:	d1f7      	bne.n	24fc <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    250c:	2000      	movs	r0, #0
    250e:	e7b5      	b.n	247c <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    2510:	2012      	movs	r0, #18
    2512:	e7b3      	b.n	247c <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    2514:	2000      	movs	r0, #0
    2516:	e7b1      	b.n	247c <usart_write_buffer_wait+0x14>
    2518:	2000      	movs	r0, #0
    251a:	e7af      	b.n	247c <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    251c:	2012      	movs	r0, #18
    251e:	e7ad      	b.n	247c <usart_write_buffer_wait+0x14>
    2520:	0000ffff 	.word	0x0000ffff
    2524:	0000243d 	.word	0x0000243d

00002528 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    252a:	0004      	movs	r4, r0
    252c:	000d      	movs	r5, r1
    252e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2530:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2532:	4b0f      	ldr	r3, [pc, #60]	; (2570 <_usart_read_buffer+0x48>)
    2534:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2536:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2538:	b29b      	uxth	r3, r3
    253a:	2b00      	cmp	r3, #0
    253c:	d003      	beq.n	2546 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    253e:	4b0d      	ldr	r3, [pc, #52]	; (2574 <_usart_read_buffer+0x4c>)
    2540:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2542:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2546:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2548:	4b0a      	ldr	r3, [pc, #40]	; (2574 <_usart_read_buffer+0x4c>)
    254a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    254c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    254e:	2205      	movs	r2, #5
    2550:	2332      	movs	r3, #50	; 0x32
    2552:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2554:	3b2e      	subs	r3, #46	; 0x2e
    2556:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2558:	7a23      	ldrb	r3, [r4, #8]
    255a:	2b00      	cmp	r3, #0
    255c:	d001      	beq.n	2562 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    255e:	2320      	movs	r3, #32
    2560:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2562:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2564:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2566:	2b00      	cmp	r3, #0
    2568:	d0ec      	beq.n	2544 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    256a:	2308      	movs	r3, #8
    256c:	75bb      	strb	r3, [r7, #22]
    256e:	e7e9      	b.n	2544 <_usart_read_buffer+0x1c>
    2570:	00002e91 	.word	0x00002e91
    2574:	00002ed1 	.word	0x00002ed1

00002578 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2578:	1c93      	adds	r3, r2, #2
    257a:	009b      	lsls	r3, r3, #2
    257c:	18c3      	adds	r3, r0, r3
    257e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2580:	2130      	movs	r1, #48	; 0x30
    2582:	2301      	movs	r3, #1
    2584:	4093      	lsls	r3, r2
    2586:	001a      	movs	r2, r3
    2588:	5c43      	ldrb	r3, [r0, r1]
    258a:	4313      	orrs	r3, r2
    258c:	5443      	strb	r3, [r0, r1]
}
    258e:	4770      	bx	lr

00002590 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2590:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2592:	2317      	movs	r3, #23
	if (length == 0) {
    2594:	2a00      	cmp	r2, #0
    2596:	d101      	bne.n	259c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2598:	0018      	movs	r0, r3
    259a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    259c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    259e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    25a0:	2c00      	cmp	r4, #0
    25a2:	d0f9      	beq.n	2598 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    25a4:	4b01      	ldr	r3, [pc, #4]	; (25ac <usart_read_buffer_job+0x1c>)
    25a6:	4798      	blx	r3
    25a8:	0003      	movs	r3, r0
    25aa:	e7f5      	b.n	2598 <usart_read_buffer_job+0x8>
    25ac:	00002529 	.word	0x00002529

000025b0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    25b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    25b2:	0080      	lsls	r0, r0, #2
    25b4:	4b51      	ldr	r3, [pc, #324]	; (26fc <_usart_interrupt_handler+0x14c>)
    25b6:	58c6      	ldr	r6, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    25b8:	6834      	ldr	r4, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    25ba:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    25bc:	2b00      	cmp	r3, #0
    25be:	d1fc      	bne.n	25ba <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    25c0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    25c2:	7da5      	ldrb	r5, [r4, #22]
    25c4:	401d      	ands	r5, r3
	callback_status = module->callback_reg_mask &
    25c6:	2330      	movs	r3, #48	; 0x30
    25c8:	5cf3      	ldrb	r3, [r6, r3]
    25ca:	2231      	movs	r2, #49	; 0x31
    25cc:	5cb7      	ldrb	r7, [r6, r2]
    25ce:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    25d0:	07eb      	lsls	r3, r5, #31
    25d2:	d522      	bpl.n	261a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    25d4:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    25d6:	b29b      	uxth	r3, r3
    25d8:	2b00      	cmp	r3, #0
    25da:	d01c      	beq.n	2616 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    25dc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    25de:	7813      	ldrb	r3, [r2, #0]
    25e0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    25e2:	1c51      	adds	r1, r2, #1
    25e4:	62b1      	str	r1, [r6, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    25e6:	7971      	ldrb	r1, [r6, #5]
    25e8:	2901      	cmp	r1, #1
    25ea:	d00e      	beq.n	260a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    25ec:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    25ee:	05db      	lsls	r3, r3, #23
    25f0:	0ddb      	lsrs	r3, r3, #23
    25f2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    25f4:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    25f6:	3b01      	subs	r3, #1
    25f8:	b29b      	uxth	r3, r3
    25fa:	85f3      	strh	r3, [r6, #46]	; 0x2e
    25fc:	2b00      	cmp	r3, #0
    25fe:	d10c      	bne.n	261a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2600:	3301      	adds	r3, #1
    2602:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2604:	3301      	adds	r3, #1
    2606:	75a3      	strb	r3, [r4, #22]
    2608:	e007      	b.n	261a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    260a:	7851      	ldrb	r1, [r2, #1]
    260c:	0209      	lsls	r1, r1, #8
    260e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2610:	3202      	adds	r2, #2
    2612:	62b2      	str	r2, [r6, #40]	; 0x28
    2614:	e7eb      	b.n	25ee <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2616:	2301      	movs	r3, #1
    2618:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    261a:	07ab      	lsls	r3, r5, #30
    261c:	d506      	bpl.n	262c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    261e:	2302      	movs	r3, #2
    2620:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2622:	2200      	movs	r2, #0
    2624:	3331      	adds	r3, #49	; 0x31
    2626:	54f2      	strb	r2, [r6, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2628:	07fb      	lsls	r3, r7, #31
    262a:	d428      	bmi.n	267e <_usart_interrupt_handler+0xce>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    262c:	076b      	lsls	r3, r5, #29
    262e:	d510      	bpl.n	2652 <_usart_interrupt_handler+0xa2>

		//if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2630:	8b63      	ldrh	r3, [r4, #26]
    2632:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2634:	071a      	lsls	r2, r3, #28
    2636:	d426      	bmi.n	2686 <_usart_interrupt_handler+0xd6>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2638:	223f      	movs	r2, #63	; 0x3f
    263a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) 
    263c:	2b00      	cmp	r3, #0
    263e:	d04a      	beq.n	26d6 <_usart_interrupt_handler+0x126>
			{
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2640:	079a      	lsls	r2, r3, #30
    2642:	d523      	bpl.n	268c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2644:	221a      	movs	r2, #26
    2646:	2332      	movs	r3, #50	; 0x32
    2648:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    264a:	3b30      	subs	r3, #48	; 0x30
    264c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    264e:	077b      	lsls	r3, r7, #29
    2650:	d43d      	bmi.n	26ce <_usart_interrupt_handler+0x11e>
			//usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		//}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2652:	06eb      	lsls	r3, r5, #27
    2654:	d504      	bpl.n	2660 <_usart_interrupt_handler+0xb0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2656:	2310      	movs	r3, #16
    2658:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    265a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    265c:	06fb      	lsls	r3, r7, #27
    265e:	d440      	bmi.n	26e2 <_usart_interrupt_handler+0x132>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2660:	06ab      	lsls	r3, r5, #26
    2662:	d504      	bpl.n	266e <_usart_interrupt_handler+0xbe>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2664:	2320      	movs	r3, #32
    2666:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2668:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    266a:	073b      	lsls	r3, r7, #28
    266c:	d43d      	bmi.n	26ea <_usart_interrupt_handler+0x13a>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    266e:	072b      	lsls	r3, r5, #28
    2670:	d504      	bpl.n	267c <_usart_interrupt_handler+0xcc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2672:	2308      	movs	r3, #8
    2674:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2676:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2678:	06bb      	lsls	r3, r7, #26
    267a:	d43a      	bmi.n	26f2 <_usart_interrupt_handler+0x142>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    267c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    267e:	0030      	movs	r0, r6
    2680:	68f3      	ldr	r3, [r6, #12]
    2682:	4798      	blx	r3
    2684:	e7d2      	b.n	262c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2686:	2237      	movs	r2, #55	; 0x37
    2688:	4013      	ands	r3, r2
    268a:	e7d7      	b.n	263c <_usart_interrupt_handler+0x8c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    268c:	075a      	lsls	r2, r3, #29
    268e:	d505      	bpl.n	269c <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2690:	221e      	movs	r2, #30
    2692:	2332      	movs	r3, #50	; 0x32
    2694:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2696:	3b2e      	subs	r3, #46	; 0x2e
    2698:	8363      	strh	r3, [r4, #26]
    269a:	e7d8      	b.n	264e <_usart_interrupt_handler+0x9e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    269c:	07da      	lsls	r2, r3, #31
    269e:	d505      	bpl.n	26ac <_usart_interrupt_handler+0xfc>
					module->rx_status = STATUS_ERR_BAD_DATA;
    26a0:	2213      	movs	r2, #19
    26a2:	2332      	movs	r3, #50	; 0x32
    26a4:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    26a6:	3b31      	subs	r3, #49	; 0x31
    26a8:	8363      	strh	r3, [r4, #26]
    26aa:	e7d0      	b.n	264e <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    26ac:	06da      	lsls	r2, r3, #27
    26ae:	d505      	bpl.n	26bc <_usart_interrupt_handler+0x10c>
					module->rx_status = STATUS_ERR_PROTOCOL;
    26b0:	2242      	movs	r2, #66	; 0x42
    26b2:	2332      	movs	r3, #50	; 0x32
    26b4:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    26b6:	3b22      	subs	r3, #34	; 0x22
    26b8:	8363      	strh	r3, [r4, #26]
    26ba:	e7c8      	b.n	264e <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    26bc:	2220      	movs	r2, #32
    26be:	421a      	tst	r2, r3
    26c0:	d0c5      	beq.n	264e <_usart_interrupt_handler+0x9e>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    26c2:	3221      	adds	r2, #33	; 0x21
    26c4:	2332      	movs	r3, #50	; 0x32
    26c6:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    26c8:	3b12      	subs	r3, #18
    26ca:	8363      	strh	r3, [r4, #26]
    26cc:	e7bf      	b.n	264e <_usart_interrupt_handler+0x9e>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    26ce:	0030      	movs	r0, r6
    26d0:	6973      	ldr	r3, [r6, #20]
    26d2:	4798      	blx	r3
    26d4:	e7bd      	b.n	2652 <_usart_interrupt_handler+0xa2>
				if (callback_status
    26d6:	07bb      	lsls	r3, r7, #30
    26d8:	d5bb      	bpl.n	2652 <_usart_interrupt_handler+0xa2>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    26da:	0030      	movs	r0, r6
    26dc:	6933      	ldr	r3, [r6, #16]
    26de:	4798      	blx	r3
    26e0:	e7b7      	b.n	2652 <_usart_interrupt_handler+0xa2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    26e2:	0030      	movs	r0, r6
    26e4:	69f3      	ldr	r3, [r6, #28]
    26e6:	4798      	blx	r3
    26e8:	e7ba      	b.n	2660 <_usart_interrupt_handler+0xb0>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    26ea:	0030      	movs	r0, r6
    26ec:	69b3      	ldr	r3, [r6, #24]
    26ee:	4798      	blx	r3
    26f0:	e7bd      	b.n	266e <_usart_interrupt_handler+0xbe>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    26f2:	6a33      	ldr	r3, [r6, #32]
    26f4:	0030      	movs	r0, r6
    26f6:	4798      	blx	r3
}
    26f8:	e7c0      	b.n	267c <_usart_interrupt_handler+0xcc>
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	20000f3c 	.word	0x20000f3c

00002700 <configureADC>:
#include    "FlutterADC.h"
#define OUTPUT1_DET_AI			4	
uint16_t* ADCResult = NULL;

void configureADC()
{
    2700:	b510      	push	{r4, lr}
    2702:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	ADCResult = malloc(sizeof(uint16_t));
    2704:	2002      	movs	r0, #2
    2706:	4b19      	ldr	r3, [pc, #100]	; (276c <configureADC+0x6c>)
    2708:	4798      	blx	r3
    270a:	4b19      	ldr	r3, [pc, #100]	; (2770 <configureADC+0x70>)
    270c:	6018      	str	r0, [r3, #0]
	
	adc_get_config_defaults(&conf_adc);
    270e:	4668      	mov	r0, sp
    2710:	4b18      	ldr	r3, [pc, #96]	; (2774 <configureADC+0x74>)
    2712:	4798      	blx	r3

	conf_adc.reference			=  ADC_REFCTRL_REFSEL_INT1V;
    2714:	2300      	movs	r3, #0
    2716:	466a      	mov	r2, sp
    2718:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	=  ADC_CLOCK_PRESCALER_DIV32;
    271a:	23c0      	movs	r3, #192	; 0xc0
    271c:	009b      	lsls	r3, r3, #2
    271e:	8053      	strh	r3, [r2, #2]
	conf_adc.positive_input		=  OUTPUT1_DET_AI;
    2720:	2304      	movs	r3, #4
    2722:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input		=  ADC_NEGATIVE_INPUT_GND;
    2724:	23c0      	movs	r3, #192	; 0xc0
    2726:	015b      	lsls	r3, r3, #5
    2728:	81d3      	strh	r3, [r2, #14]
	conf_adc.resolution			=  ADC_RESOLUTION_8BIT;
    272a:	2330      	movs	r3, #48	; 0x30
    272c:	7113      	strb	r3, [r2, #4]
	conf_adc.clock_source       = GCLK_GENERATOR_3;
    272e:	3b2d      	subs	r3, #45	; 0x2d
    2730:	7013      	strb	r3, [r2, #0]
	//conf_adc.left_adjust		=  true;

	adc_init(&adc_instance, ADC, &conf_adc);
    2732:	4c11      	ldr	r4, [pc, #68]	; (2778 <configureADC+0x78>)
    2734:	4911      	ldr	r1, [pc, #68]	; (277c <configureADC+0x7c>)
    2736:	0020      	movs	r0, r4
    2738:	4b11      	ldr	r3, [pc, #68]	; (2780 <configureADC+0x80>)
    273a:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    273c:	6822      	ldr	r2, [r4, #0]
    273e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2740:	b25b      	sxtb	r3, r3
    2742:	2b00      	cmp	r3, #0
    2744:	dbfb      	blt.n	273e <configureADC+0x3e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2746:	2180      	movs	r1, #128	; 0x80
    2748:	0409      	lsls	r1, r1, #16
    274a:	4b0e      	ldr	r3, [pc, #56]	; (2784 <configureADC+0x84>)
    274c:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    274e:	230f      	movs	r3, #15
    2750:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2752:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2754:	7813      	ldrb	r3, [r2, #0]
    2756:	2102      	movs	r1, #2
    2758:	430b      	orrs	r3, r1
    275a:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    275c:	4b06      	ldr	r3, [pc, #24]	; (2778 <configureADC+0x78>)
    275e:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2760:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2762:	b25b      	sxtb	r3, r3
    2764:	2b00      	cmp	r3, #0
    2766:	dbfb      	blt.n	2760 <configureADC+0x60>
	adc_enable(&adc_instance);
}
    2768:	b00c      	add	sp, #48	; 0x30
    276a:	bd10      	pop	{r4, pc}
    276c:	00005275 	.word	0x00005275
    2770:	20000120 	.word	0x20000120
    2774:	00001785 	.word	0x00001785
    2778:	20000f54 	.word	0x20000f54
    277c:	42004000 	.word	0x42004000
    2780:	000017cd 	.word	0x000017cd
    2784:	e000e100 	.word	0xe000e100

00002788 <adc_start_read_result>:




uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    2788:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    278a:	4b2d      	ldr	r3, [pc, #180]	; (2840 <adc_start_read_result+0xb8>)
    278c:	6819      	ldr	r1, [r3, #0]
    278e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2790:	b25b      	sxtb	r3, r3
    2792:	2b00      	cmp	r3, #0
    2794:	dbfb      	blt.n	278e <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2796:	690b      	ldr	r3, [r1, #16]
    2798:	221f      	movs	r2, #31
    279a:	4393      	bics	r3, r2
    279c:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    279e:	6108      	str	r0, [r1, #16]
    27a0:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    27a2:	b25b      	sxtb	r3, r3
    27a4:	2b00      	cmp	r3, #0
    27a6:	dbfb      	blt.n	27a0 <adc_start_read_result+0x18>
    27a8:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    27aa:	b25b      	sxtb	r3, r3
    27ac:	2b00      	cmp	r3, #0
    27ae:	dbfb      	blt.n	27a8 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    27b0:	7b0b      	ldrb	r3, [r1, #12]
    27b2:	2202      	movs	r2, #2
    27b4:	4313      	orrs	r3, r2
    27b6:	730b      	strb	r3, [r1, #12]
    27b8:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    27ba:	b25b      	sxtb	r3, r3
    27bc:	2b00      	cmp	r3, #0
    27be:	dbfb      	blt.n	27b8 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    27c0:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    27c2:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    27c4:	2402      	movs	r4, #2
    27c6:	e001      	b.n	27cc <adc_start_read_result+0x44>
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    27c8:	4210      	tst	r0, r2
    27ca:	d10a      	bne.n	27e2 <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    27cc:	7e0b      	ldrb	r3, [r1, #24]
    27ce:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    27d0:	0002      	movs	r2, r0
    27d2:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    27d4:	421d      	tst	r5, r3
    27d6:	d000      	beq.n	27da <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    27d8:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    27da:	421c      	tst	r4, r3
    27dc:	d0f4      	beq.n	27c8 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    27de:	432a      	orrs	r2, r5
    27e0:	e7f2      	b.n	27c8 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    27e2:	7e0a      	ldrb	r2, [r1, #24]
    27e4:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    27e6:	2301      	movs	r3, #1
    27e8:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    27ea:	0750      	lsls	r0, r2, #29
    27ec:	d501      	bpl.n	27f2 <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    27ee:	2002      	movs	r0, #2
    27f0:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    27f2:	0792      	lsls	r2, r2, #30
    27f4:	d501      	bpl.n	27fa <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    27f6:	2204      	movs	r2, #4
    27f8:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    27fa:	07db      	lsls	r3, r3, #31
    27fc:	d403      	bmi.n	2806 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
	temp = *ADCResult;
    27fe:	4b11      	ldr	r3, [pc, #68]	; (2844 <adc_start_read_result+0xbc>)
    2800:	681b      	ldr	r3, [r3, #0]
	return temp;
    2802:	8818      	ldrh	r0, [r3, #0]
    2804:	bd30      	pop	{r4, r5, pc}
    2806:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2808:	b25b      	sxtb	r3, r3
    280a:	2b00      	cmp	r3, #0
    280c:	dbfb      	blt.n	2806 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
    280e:	4b0d      	ldr	r3, [pc, #52]	; (2844 <adc_start_read_result+0xbc>)
    2810:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    2812:	8b4a      	ldrh	r2, [r1, #26]
    2814:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    2816:	4b0a      	ldr	r3, [pc, #40]	; (2840 <adc_start_read_result+0xb8>)
    2818:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    281a:	2301      	movs	r3, #1
    281c:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    281e:	7e0a      	ldrb	r2, [r1, #24]
    2820:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2822:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2824:	0750      	lsls	r0, r2, #29
    2826:	d501      	bpl.n	282c <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    2828:	2002      	movs	r0, #2
    282a:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    282c:	0792      	lsls	r2, r2, #30
    282e:	d501      	bpl.n	2834 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    2830:	2204      	movs	r2, #4
    2832:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2834:	075b      	lsls	r3, r3, #29
    2836:	d5e2      	bpl.n	27fe <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    2838:	2302      	movs	r3, #2
    283a:	760b      	strb	r3, [r1, #24]
    283c:	e7df      	b.n	27fe <adc_start_read_result+0x76>
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	20000f54 	.word	0x20000f54
    2844:	20000120 	.word	0x20000120

00002848 <UARTReceiveBytes>:
#define LEN_LEDMATRIX_SETALL	  72

//#define LEN_COMMON_SETALL		

void UARTReceiveBytes(uint8_t* receiveData ,uint8_t countReceive)
{
    2848:	b530      	push	{r4, r5, lr}
	uint8_t i =0;
	while((headPointer - tailPointer) < countReceive )
    284a:	4d0c      	ldr	r5, [pc, #48]	; (287c <UARTReceiveBytes+0x34>)
    284c:	4c0c      	ldr	r4, [pc, #48]	; (2880 <UARTReceiveBytes+0x38>)
    284e:	782b      	ldrb	r3, [r5, #0]
    2850:	7822      	ldrb	r2, [r4, #0]
    2852:	1a9b      	subs	r3, r3, r2
    2854:	428b      	cmp	r3, r1
    2856:	dbfa      	blt.n	284e <UARTReceiveBytes+0x6>
	{
	}
	for(i=1;i<=countReceive;i++)
    2858:	2900      	cmp	r1, #0
    285a:	d00e      	beq.n	287a <UARTReceiveBytes+0x32>
    285c:	2301      	movs	r3, #1
	{
		receiveData[i] = ringBuffer[tailPointer];
    285e:	4c08      	ldr	r4, [pc, #32]	; (2880 <UARTReceiveBytes+0x38>)
    2860:	4d08      	ldr	r5, [pc, #32]	; (2884 <UARTReceiveBytes+0x3c>)
    2862:	7822      	ldrb	r2, [r4, #0]
    2864:	b2d2      	uxtb	r2, r2
    2866:	5caa      	ldrb	r2, [r5, r2]
    2868:	54c2      	strb	r2, [r0, r3]
		tailPointer++;
    286a:	7822      	ldrb	r2, [r4, #0]
    286c:	3201      	adds	r2, #1
    286e:	b2d2      	uxtb	r2, r2
    2870:	7022      	strb	r2, [r4, #0]
	for(i=1;i<=countReceive;i++)
    2872:	3301      	adds	r3, #1
    2874:	b2db      	uxtb	r3, r3
    2876:	4299      	cmp	r1, r3
    2878:	d2f3      	bcs.n	2862 <UARTReceiveBytes+0x1a>
	}
}
    287a:	bd30      	pop	{r4, r5, pc}
    287c:	200010d0 	.word	0x200010d0
    2880:	200010f4 	.word	0x200010f4
    2884:	200010f8 	.word	0x200010f8

00002888 <transferLEDMatrixValues>:

void transferLEDMatrixValues(uint8_t* tempTransfer , uint8_t port)
{
    2888:	b570      	push	{r4, r5, r6, lr}
    288a:	b084      	sub	sp, #16
    288c:	2300      	movs	r3, #0
	uint32_t err_code = 0;
	//static bool firstTime = true;
	static uint8_t LEDMatrixValues[LEN_LEDMATRIX_SETALL+1]; 
	for(i=0;i<(LEN_LEDMATRIX_SETALL+1);i++)
	{
		LEDMatrixValues[i] = tempTransfer[i] ;
    288e:	4c11      	ldr	r4, [pc, #68]	; (28d4 <transferLEDMatrixValues+0x4c>)
    2890:	5cc2      	ldrb	r2, [r0, r3]
    2892:	551a      	strb	r2, [r3, r4]
    2894:	3301      	adds	r3, #1
	for(i=0;i<(LEN_LEDMATRIX_SETALL+1);i++)
    2896:	2b49      	cmp	r3, #73	; 0x49
    2898:	d1fa      	bne.n	2890 <transferLEDMatrixValues+0x8>
	}
	struct i2c_master_packet wr_packet = {
		.address     = outputPort[port].address ,
    289a:	4b0f      	ldr	r3, [pc, #60]	; (28d8 <transferLEDMatrixValues+0x50>)
    289c:	00ca      	lsls	r2, r1, #3
    289e:	5cd0      	ldrb	r0, [r2, r3]
	struct i2c_master_packet wr_packet = {
    28a0:	ac01      	add	r4, sp, #4
    28a2:	8020      	strh	r0, [r4, #0]
		.data_length = outputPort[port].writeDataLength1,
    28a4:	189b      	adds	r3, r3, r2
    28a6:	791b      	ldrb	r3, [r3, #4]
	struct i2c_master_packet wr_packet = {
    28a8:	8063      	strh	r3, [r4, #2]
    28aa:	4b0a      	ldr	r3, [pc, #40]	; (28d4 <transferLEDMatrixValues+0x4c>)
    28ac:	9302      	str	r3, [sp, #8]
    28ae:	2300      	movs	r3, #0
    28b0:	7223      	strb	r3, [r4, #8]
    28b2:	7263      	strb	r3, [r4, #9]
    28b4:	72a3      	strb	r3, [r4, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	//while(outputPort[port].I2CStatus == BUSY_MODE);
	//outputPort[port].I2CStatus = BUSY_MODE;
	I2CWrite((port+1) , &wr_packet);
    28b6:	3101      	adds	r1, #1
    28b8:	b2cd      	uxtb	r5, r1
    28ba:	0021      	movs	r1, r4
    28bc:	0028      	movs	r0, r5
    28be:	4e07      	ldr	r6, [pc, #28]	; (28dc <transferLEDMatrixValues+0x54>)
    28c0:	47b0      	blx	r6
	delay_cycles_ms(1);
    28c2:	2001      	movs	r0, #1
    28c4:	4b06      	ldr	r3, [pc, #24]	; (28e0 <transferLEDMatrixValues+0x58>)
    28c6:	4798      	blx	r3
	I2CWrite((port+1) , &wr_packet);
    28c8:	0021      	movs	r1, r4
    28ca:	0028      	movs	r0, r5
    28cc:	47b0      	blx	r6
		
	}
	firstTime = false;
	*/
	
}
    28ce:	b004      	add	sp, #16
    28d0:	bd70      	pop	{r4, r5, r6, pc}
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	20000124 	.word	0x20000124
    28d8:	200010d4 	.word	0x200010d4
    28dc:	000010a9 	.word	0x000010a9
    28e0:	00001759 	.word	0x00001759

000028e4 <checkUART>:


void checkUART()
{
    28e4:	b510      	push	{r4, lr}
	uint8_t i =0;
	uint8_t port = 3;
	static uint8_t receivedValue[100];
	if(headPointer != tailPointer)
    28e6:	4b2b      	ldr	r3, [pc, #172]	; (2994 <checkUART+0xb0>)
    28e8:	781b      	ldrb	r3, [r3, #0]
    28ea:	4a2b      	ldr	r2, [pc, #172]	; (2998 <checkUART+0xb4>)
    28ec:	7812      	ldrb	r2, [r2, #0]
    28ee:	b2db      	uxtb	r3, r3
    28f0:	4293      	cmp	r3, r2
    28f2:	d03c      	beq.n	296e <checkUART+0x8a>
	{
		receivedValue[0]  = ringBuffer[tailPointer];
    28f4:	4928      	ldr	r1, [pc, #160]	; (2998 <checkUART+0xb4>)
    28f6:	780b      	ldrb	r3, [r1, #0]
    28f8:	b2db      	uxtb	r3, r3
    28fa:	4a28      	ldr	r2, [pc, #160]	; (299c <checkUART+0xb8>)
    28fc:	5cd3      	ldrb	r3, [r2, r3]
    28fe:	b2db      	uxtb	r3, r3
    2900:	4a27      	ldr	r2, [pc, #156]	; (29a0 <checkUART+0xbc>)
    2902:	7013      	strb	r3, [r2, #0]
		tailPointer++;
    2904:	780a      	ldrb	r2, [r1, #0]
    2906:	3201      	adds	r2, #1
    2908:	b2d2      	uxtb	r2, r2
    290a:	700a      	strb	r2, [r1, #0]
		switch(receivedValue[0])
    290c:	2b4c      	cmp	r3, #76	; 0x4c
    290e:	d021      	beq.n	2954 <checkUART+0x70>
    2910:	d90f      	bls.n	2932 <checkUART+0x4e>
    2912:	2b62      	cmp	r3, #98	; 0x62
    2914:	d117      	bne.n	2946 <checkUART+0x62>
		{
			case TEST:
				break;
			case BROADCAST:
				UARTReceiveBytes(receivedValue , LEN_BROADCAST_COMMAND );
    2916:	4c22      	ldr	r4, [pc, #136]	; (29a0 <checkUART+0xbc>)
    2918:	2101      	movs	r1, #1
    291a:	0020      	movs	r0, r4
    291c:	4b21      	ldr	r3, [pc, #132]	; (29a4 <checkUART+0xc0>)
    291e:	4798      	blx	r3
				if(receivedValue[1]  == START_BROADCAST)
    2920:	7863      	ldrb	r3, [r4, #1]
    2922:	2b67      	cmp	r3, #103	; 0x67
    2924:	d012      	beq.n	294c <checkUART+0x68>
				{
					broadcastFlag = true;
				}
				else if(receivedValue[1] == STOP_BROADCAST)
    2926:	2b73      	cmp	r3, #115	; 0x73
    2928:	d12a      	bne.n	2980 <checkUART+0x9c>
				{
					broadcastFlag = false;
    292a:	2200      	movs	r2, #0
    292c:	4b1e      	ldr	r3, [pc, #120]	; (29a8 <checkUART+0xc4>)
    292e:	701a      	strb	r2, [r3, #0]
    2930:	e026      	b.n	2980 <checkUART+0x9c>
		switch(receivedValue[0])
    2932:	2b01      	cmp	r3, #1
    2934:	d024      	beq.n	2980 <checkUART+0x9c>
    2936:	2b43      	cmp	r3, #67	; 0x43
    2938:	d022      	beq.n	2980 <checkUART+0x9c>
			*/
				break;
			case STOP_BROADCAST:
				break;
			default:
			    headPointer = 0;
    293a:	2300      	movs	r3, #0
    293c:	4a15      	ldr	r2, [pc, #84]	; (2994 <checkUART+0xb0>)
    293e:	7013      	strb	r3, [r2, #0]
			    tailPointer = 0;
    2940:	4a15      	ldr	r2, [pc, #84]	; (2998 <checkUART+0xb4>)
    2942:	7013      	strb	r3, [r2, #0]
				break;
    2944:	e01c      	b.n	2980 <checkUART+0x9c>
		switch(receivedValue[0])
    2946:	2b73      	cmp	r3, #115	; 0x73
    2948:	d1f7      	bne.n	293a <checkUART+0x56>
    294a:	e019      	b.n	2980 <checkUART+0x9c>
					broadcastFlag = true;
    294c:	2201      	movs	r2, #1
    294e:	4b16      	ldr	r3, [pc, #88]	; (29a8 <checkUART+0xc4>)
    2950:	701a      	strb	r2, [r3, #0]
    2952:	e015      	b.n	2980 <checkUART+0x9c>
				UARTReceiveBytes(receivedValue , LEN_LEDMATRIX_SETALL );
    2954:	2148      	movs	r1, #72	; 0x48
    2956:	4812      	ldr	r0, [pc, #72]	; (29a0 <checkUART+0xbc>)
    2958:	4b12      	ldr	r3, [pc, #72]	; (29a4 <checkUART+0xc0>)
    295a:	4798      	blx	r3
				if(outputPort[port].currentState == 	OUTPUT_LEDMATRIX )
    295c:	4b13      	ldr	r3, [pc, #76]	; (29ac <checkUART+0xc8>)
    295e:	7e5b      	ldrb	r3, [r3, #25]
    2960:	2b03      	cmp	r3, #3
    2962:	d10d      	bne.n	2980 <checkUART+0x9c>
					transferLEDMatrixValues(receivedValue,port);
    2964:	2103      	movs	r1, #3
    2966:	480e      	ldr	r0, [pc, #56]	; (29a0 <checkUART+0xbc>)
    2968:	4b11      	ldr	r3, [pc, #68]	; (29b0 <checkUART+0xcc>)
    296a:	4798      	blx	r3
    296c:	e008      	b.n	2980 <checkUART+0x9c>
		}
	}
	else if(broadcastFlag == true)
    296e:	4b0e      	ldr	r3, [pc, #56]	; (29a8 <checkUART+0xc4>)
    2970:	781b      	ldrb	r3, [r3, #0]
    2972:	2b01      	cmp	r3, #1
    2974:	d005      	beq.n	2982 <checkUART+0x9e>
		tailPointer = 0;
		sendDataBLE();
	}
	else
	{
		headPointer = 0;
    2976:	2300      	movs	r3, #0
    2978:	4a06      	ldr	r2, [pc, #24]	; (2994 <checkUART+0xb0>)
    297a:	7013      	strb	r3, [r2, #0]
		tailPointer = 0;
    297c:	4a06      	ldr	r2, [pc, #24]	; (2998 <checkUART+0xb4>)
    297e:	7013      	strb	r3, [r2, #0]
	}
    2980:	bd10      	pop	{r4, pc}
		headPointer = 0;
    2982:	2300      	movs	r3, #0
    2984:	4a03      	ldr	r2, [pc, #12]	; (2994 <checkUART+0xb0>)
    2986:	7013      	strb	r3, [r2, #0]
		tailPointer = 0;
    2988:	4a03      	ldr	r2, [pc, #12]	; (2998 <checkUART+0xb4>)
    298a:	7013      	strb	r3, [r2, #0]
		sendDataBLE();
    298c:	4b09      	ldr	r3, [pc, #36]	; (29b4 <checkUART+0xd0>)
    298e:	4798      	blx	r3
    2990:	e7f6      	b.n	2980 <checkUART+0x9c>
    2992:	46c0      	nop			; (mov r8, r8)
    2994:	200010d0 	.word	0x200010d0
    2998:	200010f4 	.word	0x200010f4
    299c:	200010f8 	.word	0x200010f8
    29a0:	20000170 	.word	0x20000170
    29a4:	00002849 	.word	0x00002849
    29a8:	2000016d 	.word	0x2000016d
    29ac:	200010d4 	.word	0x200010d4
    29b0:	00002889 	.word	0x00002889
    29b4:	0000167d 	.word	0x0000167d

000029b8 <readSensors>:
extern uint8_t NoInDevCon ;
extern uint8_t inputsConnected[3];
extern uint8_t sensorOutputs[40];

void readSensors()
{
    29b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29ba:	4f19      	ldr	r7, [pc, #100]	; (2a20 <readSensors+0x68>)
    29bc:	4e19      	ldr	r6, [pc, #100]	; (2a24 <readSensors+0x6c>)
    29be:	4c1a      	ldr	r4, [pc, #104]	; (2a28 <readSensors+0x70>)
    29c0:	2501      	movs	r5, #1
    29c2:	e00b      	b.n	29dc <readSensors+0x24>
		for(i=0;i<NO_SENSORS;i++)
		{
			switch(inputsConnected[i])
			{
				case ANALOG_LIGHT_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    29c4:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    29c6:	7820      	ldrb	r0, [r4, #0]
    29c8:	4b18      	ldr	r3, [pc, #96]	; (2a2c <readSensors+0x74>)
    29ca:	4798      	blx	r3
    29cc:	7170      	strb	r0, [r6, #5]
    29ce:	3501      	adds	r5, #1
    29d0:	b2ed      	uxtb	r5, r5
    29d2:	3701      	adds	r7, #1
    29d4:	3605      	adds	r6, #5
    29d6:	3401      	adds	r4, #1
		for(i=0;i<NO_SENSORS;i++)
    29d8:	2d04      	cmp	r5, #4
    29da:	d020      	beq.n	2a1e <readSensors+0x66>
			switch(inputsConnected[i])
    29dc:	783b      	ldrb	r3, [r7, #0]
    29de:	3b1b      	subs	r3, #27
    29e0:	b2da      	uxtb	r2, r3
    29e2:	2a04      	cmp	r2, #4
    29e4:	d8f3      	bhi.n	29ce <readSensors+0x16>
    29e6:	0093      	lsls	r3, r2, #2
    29e8:	4a11      	ldr	r2, [pc, #68]	; (2a30 <readSensors+0x78>)
    29ea:	58d3      	ldr	r3, [r2, r3]
    29ec:	469f      	mov	pc, r3
					break;
				case ANALOG_DISTANCE_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    29ee:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    29f0:	7820      	ldrb	r0, [r4, #0]
    29f2:	4b0e      	ldr	r3, [pc, #56]	; (2a2c <readSensors+0x74>)
    29f4:	4798      	blx	r3
    29f6:	7170      	strb	r0, [r6, #5]
					break;
    29f8:	e7e9      	b.n	29ce <readSensors+0x16>
				case ANALOG_SOUND_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    29fa:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    29fc:	7820      	ldrb	r0, [r4, #0]
    29fe:	4b0b      	ldr	r3, [pc, #44]	; (2a2c <readSensors+0x74>)
    2a00:	4798      	blx	r3
    2a02:	7170      	strb	r0, [r6, #5]
					break;
    2a04:	e7e3      	b.n	29ce <readSensors+0x16>
				case ANALOG_DIAL:
					sensorOutputs[5*i + 4]     = i+1;
    2a06:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2a08:	7820      	ldrb	r0, [r4, #0]
    2a0a:	4b08      	ldr	r3, [pc, #32]	; (2a2c <readSensors+0x74>)
    2a0c:	4798      	blx	r3
    2a0e:	7170      	strb	r0, [r6, #5]
					break;
    2a10:	e7dd      	b.n	29ce <readSensors+0x16>
				case ANALOG_TEMPERATURE:
					sensorOutputs[5*i + 4]     = i+1;
    2a12:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2a14:	7820      	ldrb	r0, [r4, #0]
    2a16:	4b05      	ldr	r3, [pc, #20]	; (2a2c <readSensors+0x74>)
    2a18:	4798      	blx	r3
    2a1a:	7170      	strb	r0, [r6, #5]
					break;
    2a1c:	e7d7      	b.n	29ce <readSensors+0x16>
					*/
					break;
			}
		}
	//}
}
    2a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a20:	20000de8 	.word	0x20000de8
    2a24:	20000f78 	.word	0x20000f78
    2a28:	00005528 	.word	0x00005528
    2a2c:	00002789 	.word	0x00002789
    2a30:	00005514 	.word	0x00005514

00002a34 <usart_read_callback>:
	usart_enable(&usart_instance);
}

//USART callback with a ring buffer 
void usart_read_callback(struct usart_module *const usart_module)
{
    2a34:	b082      	sub	sp, #8
	volatile uint16_t recData = 0;
    2a36:	466b      	mov	r3, sp
    2a38:	1d99      	adds	r1, r3, #6
    2a3a:	2300      	movs	r3, #0
    2a3c:	800b      	strh	r3, [r1, #0]
	recData = (usart_instance.hw->USART.DATA.reg & SERCOM_USART_DATA_MASK);
    2a3e:	4b0b      	ldr	r3, [pc, #44]	; (2a6c <usart_read_callback+0x38>)
    2a40:	681b      	ldr	r3, [r3, #0]
    2a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2a44:	05db      	lsls	r3, r3, #23
    2a46:	0ddb      	lsrs	r3, r3, #23
    2a48:	800b      	strh	r3, [r1, #0]
	*(ringBuffer + headPointer) = (uint8_t)recData;
    2a4a:	4a09      	ldr	r2, [pc, #36]	; (2a70 <usart_read_callback+0x3c>)
    2a4c:	7810      	ldrb	r0, [r2, #0]
    2a4e:	4b09      	ldr	r3, [pc, #36]	; (2a74 <usart_read_callback+0x40>)
    2a50:	181b      	adds	r3, r3, r0
    2a52:	8809      	ldrh	r1, [r1, #0]
    2a54:	b2c9      	uxtb	r1, r1
    2a56:	7019      	strb	r1, [r3, #0]
	headPointer++;
    2a58:	7813      	ldrb	r3, [r2, #0]
    2a5a:	3301      	adds	r3, #1
    2a5c:	b2db      	uxtb	r3, r3
    2a5e:	7013      	strb	r3, [r2, #0]
	recDataStatus = true;
    2a60:	2201      	movs	r2, #1
    2a62:	4b05      	ldr	r3, [pc, #20]	; (2a78 <usart_read_callback+0x44>)
    2a64:	701a      	strb	r2, [r3, #0]
}
    2a66:	b002      	add	sp, #8
    2a68:	4770      	bx	lr
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	20000ee8 	.word	0x20000ee8
    2a70:	200010d0 	.word	0x200010d0
    2a74:	200010f8 	.word	0x200010f8
    2a78:	20000fa0 	.word	0x20000fa0

00002a7c <serialInit>:
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}

//Main function 
void serialInit()
{
    2a7c:	b530      	push	{r4, r5, lr}
    2a7e:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2a80:	ab01      	add	r3, sp, #4
    2a82:	2280      	movs	r2, #128	; 0x80
    2a84:	05d2      	lsls	r2, r2, #23
    2a86:	9201      	str	r2, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2a88:	2200      	movs	r2, #0
    2a8a:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    2a8c:	21ff      	movs	r1, #255	; 0xff
    2a8e:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    2a90:	2100      	movs	r1, #0
    2a92:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2a94:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2a96:	2001      	movs	r0, #1
    2a98:	2424      	movs	r4, #36	; 0x24
    2a9a:	5518      	strb	r0, [r3, r4]
	config->transmitter_enable = true;
    2a9c:	3401      	adds	r4, #1
    2a9e:	5518      	strb	r0, [r3, r4]
	config->clock_polarity_inverted = false;
    2aa0:	3025      	adds	r0, #37	; 0x25
    2aa2:	541a      	strb	r2, [r3, r0]
	config->use_external_clock = false;
    2aa4:	3001      	adds	r0, #1
    2aa6:	541a      	strb	r2, [r3, r0]
	config->ext_clock_freq   = 0;
    2aa8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2aaa:	3005      	adds	r0, #5
    2aac:	541a      	strb	r2, [r3, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2aae:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2ab0:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2ab2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2ab4:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2ab6:	7719      	strb	r1, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2ab8:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    2aba:	2213      	movs	r2, #19
    2abc:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2abe:	7759      	strb	r1, [r3, #29]
	config_usart.baudrate    = BAUDRATE_BLE;
    2ac0:	22e1      	movs	r2, #225	; 0xe1
    2ac2:	0252      	lsls	r2, r2, #9
    2ac4:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_SERCOM_MUX_SETTING;
    2ac6:	2280      	movs	r2, #128	; 0x80
    2ac8:	0392      	lsls	r2, r2, #14
    2aca:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = USART_SERCOM_PINMUX_PAD0_TX;
    2acc:	4a1b      	ldr	r2, [pc, #108]	; (2b3c <serialInit+0xc0>)
    2ace:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = USART_SERCOM_PINMUX_PAD1_UNUSED;
    2ad0:	2201      	movs	r2, #1
    2ad2:	4252      	negs	r2, r2
    2ad4:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = USART_SERCOM_PINMUX_PAD2_RX;
    2ad6:	491a      	ldr	r1, [pc, #104]	; (2b40 <serialInit+0xc4>)
    2ad8:	6399      	str	r1, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = USART_SERCOM_PINMUX_PAD3_UNUSED;
    2ada:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.generator_source = GCLK_GENERATOR_3;
    2adc:	2103      	movs	r1, #3
    2ade:	322e      	adds	r2, #46	; 0x2e
    2ae0:	5499      	strb	r1, [r3, r2]
	while (usart_init(&usart_instance,BLE_UART_MODULE, &config_usart) != STATUS_OK){}
    2ae2:	4d18      	ldr	r5, [pc, #96]	; (2b44 <serialInit+0xc8>)
    2ae4:	4c18      	ldr	r4, [pc, #96]	; (2b48 <serialInit+0xcc>)
    2ae6:	aa01      	add	r2, sp, #4
    2ae8:	4918      	ldr	r1, [pc, #96]	; (2b4c <serialInit+0xd0>)
    2aea:	0028      	movs	r0, r5
    2aec:	47a0      	blx	r4
    2aee:	2800      	cmp	r0, #0
    2af0:	d1f9      	bne.n	2ae6 <serialInit+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2af2:	4d14      	ldr	r5, [pc, #80]	; (2b44 <serialInit+0xc8>)
    2af4:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2af6:	0020      	movs	r0, r4
    2af8:	4b15      	ldr	r3, [pc, #84]	; (2b50 <serialInit+0xd4>)
    2afa:	4798      	blx	r3
    2afc:	231f      	movs	r3, #31
    2afe:	4018      	ands	r0, r3
    2b00:	3b1e      	subs	r3, #30
    2b02:	4083      	lsls	r3, r0
    2b04:	4a13      	ldr	r2, [pc, #76]	; (2b54 <serialInit+0xd8>)
    2b06:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b08:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b0a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2b0c:	2b00      	cmp	r3, #0
    2b0e:	d1fc      	bne.n	2b0a <serialInit+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2b10:	6823      	ldr	r3, [r4, #0]
    2b12:	2202      	movs	r2, #2
    2b14:	4313      	orrs	r3, r2
    2b16:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    2b18:	4c0a      	ldr	r4, [pc, #40]	; (2b44 <serialInit+0xc8>)
    2b1a:	3a01      	subs	r2, #1
    2b1c:	490e      	ldr	r1, [pc, #56]	; (2b58 <serialInit+0xdc>)
    2b1e:	0020      	movs	r0, r4
    2b20:	4b0e      	ldr	r3, [pc, #56]	; (2b5c <serialInit+0xe0>)
    2b22:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2b24:	2231      	movs	r2, #49	; 0x31
    2b26:	5ca3      	ldrb	r3, [r4, r2]
    2b28:	2102      	movs	r1, #2
    2b2a:	430b      	orrs	r3, r1
    2b2c:	54a3      	strb	r3, [r4, r2]
	uint8_t temp_buffer[MAX_RX_BUFFER_LENGTH];
	configureUSART();
	configureUSARTCallbacks();
	usart_read_buffer_job(&usart_instance,(uint8_t *)temp_buffer, MAX_RX_BUFFER_LENGTH);
    2b2e:	3a30      	subs	r2, #48	; 0x30
    2b30:	a911      	add	r1, sp, #68	; 0x44
    2b32:	0020      	movs	r0, r4
    2b34:	4b0a      	ldr	r3, [pc, #40]	; (2b60 <serialInit+0xe4>)
    2b36:	4798      	blx	r3
    2b38:	b013      	add	sp, #76	; 0x4c
    2b3a:	bd30      	pop	{r4, r5, pc}
    2b3c:	002c0002 	.word	0x002c0002
    2b40:	002e0002 	.word	0x002e0002
    2b44:	20000ee8 	.word	0x20000ee8
    2b48:	000020f9 	.word	0x000020f9
    2b4c:	42001800 	.word	0x42001800
    2b50:	00002069 	.word	0x00002069
    2b54:	e000e100 	.word	0xe000e100
    2b58:	00002a35 	.word	0x00002a35
    2b5c:	00002579 	.word	0x00002579
    2b60:	00002591 	.word	0x00002591

00002b64 <inputOutputConnection>:

uint8_t  inputOutputConnection(uint8_t analogInput)
{
	uint8_t inputOutput = 100;
	
	if((analogInput > MIN_THRES_LIGHT) && (analogInput <= MAX_THRES_LIGHT))
    2b64:	0003      	movs	r3, r0
    2b66:	330f      	adds	r3, #15
    2b68:	b2db      	uxtb	r3, r3
	{
		inputOutput	=		ANALOG_LIGHT_SENSOR;
    2b6a:	221f      	movs	r2, #31
	if((analogInput > MIN_THRES_LIGHT) && (analogInput <= MAX_THRES_LIGHT))
    2b6c:	2b09      	cmp	r3, #9
    2b6e:	d801      	bhi.n	2b74 <inputOutputConnection+0x10>
	else if((analogInput > MIN_THRES_NOTHING) && (analogInput <= MAX_THRES_NOTHING))
	{
		inputOutput	=		NOTHINGCONNECTED;
	}
	return inputOutput;
}
    2b70:	0010      	movs	r0, r2
    2b72:	4770      	bx	lr
	else if((analogInput > MIN_THRES_DIAL) && (analogInput <= MAX_THRES_DIAL))
    2b74:	0003      	movs	r3, r0
    2b76:	3319      	adds	r3, #25
    2b78:	b2db      	uxtb	r3, r3
		inputOutput	=		ANALOG_DIAL;
    2b7a:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_DIAL) && (analogInput <= MAX_THRES_DIAL))
    2b7c:	2b09      	cmp	r3, #9
    2b7e:	d9f7      	bls.n	2b70 <inputOutputConnection+0xc>
	else if((analogInput > MIN_THRES_DISTANCE) && (analogInput <= MAX_THRES_DISTANCE))
    2b80:	0003      	movs	r3, r0
    2b82:	3323      	adds	r3, #35	; 0x23
    2b84:	b2db      	uxtb	r3, r3
		inputOutput	=	    ANALOG_DISTANCE_SENSOR;
    2b86:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_DISTANCE) && (analogInput <= MAX_THRES_DISTANCE))
    2b88:	2b09      	cmp	r3, #9
    2b8a:	d9f1      	bls.n	2b70 <inputOutputConnection+0xc>
	else if((analogInput > MIN_THRES_SOUND) && (analogInput <= MAX_THRES_SOUND))
    2b8c:	0003      	movs	r3, r0
    2b8e:	332d      	adds	r3, #45	; 0x2d
    2b90:	b2db      	uxtb	r3, r3
		inputOutput	=		ANALOG_SOUND_SENSOR;
    2b92:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_SOUND) && (analogInput <= MAX_THRES_SOUND))
    2b94:	2b09      	cmp	r3, #9
    2b96:	d9eb      	bls.n	2b70 <inputOutputConnection+0xc>
		inputOutput	=		OUTPUT_SERVO_POSITION;
    2b98:	3a1a      	subs	r2, #26
	else if((analogInput > MIN_THRES_SERVO) && (analogInput <= MAX_THRES_SERVO))
    2b9a:	0003      	movs	r3, r0
    2b9c:	3b0b      	subs	r3, #11
    2b9e:	2b09      	cmp	r3, #9
    2ba0:	d9e6      	bls.n	2b70 <inputOutputConnection+0xc>
		inputOutput	=		OUTPUT_LEDMATRIX;
    2ba2:	3201      	adds	r2, #1
	else if((analogInput > MIN_THRES_LEDMATRIX) && (analogInput <= MAX_THRES_LEDMATRIX))
    2ba4:	3b14      	subs	r3, #20
    2ba6:	2b27      	cmp	r3, #39	; 0x27
    2ba8:	d9e2      	bls.n	2b70 <inputOutputConnection+0xc>
	uint8_t inputOutput = 100;
    2baa:	3261      	adds	r2, #97	; 0x61
	else if((analogInput > MIN_THRES_NOTHING) && (analogInput <= MAX_THRES_NOTHING))
    2bac:	28fa      	cmp	r0, #250	; 0xfa
    2bae:	d9df      	bls.n	2b70 <inputOutputConnection+0xc>
		inputOutput	=		NOTHINGCONNECTED;
    2bb0:	2200      	movs	r2, #0
    2bb2:	e7dd      	b.n	2b70 <inputOutputConnection+0xc>

00002bb4 <convertAnalogOutputs>:


void convertAnalogOutputs(uint8_t* analogOutput)
{
    2bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bb6:	0006      	movs	r6, r0
    2bb8:	4d34      	ldr	r5, [pc, #208]	; (2c8c <convertAnalogOutputs+0xd8>)
    2bba:	2400      	movs	r4, #0
	uint8_t tempOutput = 0;
	uint8_t i =0;
	uint8_t tempOutputCount = 0;
	for(i=0;i<NO_OUTPUTS;i++)
	{
		tempOutput	=   inputOutputConnection(analogOutput[i]);
    2bbc:	4f34      	ldr	r7, [pc, #208]	; (2c90 <convertAnalogOutputs+0xdc>)
    2bbe:	e011      	b.n	2be4 <convertAnalogOutputs+0x30>
    2bc0:	0029      	movs	r1, r5
				connecting[i] = true;
				tempOutputsConnected[i] = tempOutput;
			}
			else
			{
				if((connecting[i] == true) && (tempOutputsConnected[i] == tempOutput ))
    2bc2:	782a      	ldrb	r2, [r5, #0]
    2bc4:	2a01      	cmp	r2, #1
    2bc6:	d020      	beq.n	2c0a <convertAnalogOutputs+0x56>
						countConnecting[i] = 0;
					}
				}
				else
				{
					connecting[i] = false;
    2bc8:	2300      	movs	r3, #0
    2bca:	700b      	strb	r3, [r1, #0]
					countConnecting[i] = 0;
    2bcc:	4a31      	ldr	r2, [pc, #196]	; (2c94 <convertAnalogOutputs+0xe0>)
    2bce:	54a3      	strb	r3, [r4, r2]
					tempOutputsConnected[i] = NOTHINGCONNECTED;
    2bd0:	4a31      	ldr	r2, [pc, #196]	; (2c98 <convertAnalogOutputs+0xe4>)
    2bd2:	54a3      	strb	r3, [r4, r2]
				countDisconnection[i] = 0;
				outputsConnected[i]	= NOTHINGCONNECTED;
			}
		}
		
		previousOutputsConnected[i] = outputsConnected[i];
    2bd4:	4b31      	ldr	r3, [pc, #196]	; (2c9c <convertAnalogOutputs+0xe8>)
    2bd6:	5d1a      	ldrb	r2, [r3, r4]
    2bd8:	4b31      	ldr	r3, [pc, #196]	; (2ca0 <convertAnalogOutputs+0xec>)
    2bda:	54e2      	strb	r2, [r4, r3]
    2bdc:	3401      	adds	r4, #1
    2bde:	3501      	adds	r5, #1
	for(i=0;i<NO_OUTPUTS;i++)
    2be0:	2c04      	cmp	r4, #4
    2be2:	d03a      	beq.n	2c5a <convertAnalogOutputs+0xa6>
		tempOutput	=   inputOutputConnection(analogOutput[i]);
    2be4:	5d30      	ldrb	r0, [r6, r4]
    2be6:	47b8      	blx	r7
    2be8:	1e03      	subs	r3, r0, #0
		if(tempOutput != NOTHINGCONNECTED)
    2bea:	d01f      	beq.n	2c2c <convertAnalogOutputs+0x78>
			countDisconnection[i] = 0;
    2bec:	2200      	movs	r2, #0
    2bee:	492d      	ldr	r1, [pc, #180]	; (2ca4 <convertAnalogOutputs+0xf0>)
    2bf0:	5462      	strb	r2, [r4, r1]
			if((previousOutputsConnected[i] == NOTHINGCONNECTED) && (connecting[i] == false))
    2bf2:	4a2b      	ldr	r2, [pc, #172]	; (2ca0 <convertAnalogOutputs+0xec>)
    2bf4:	5ca2      	ldrb	r2, [r4, r2]
    2bf6:	2a00      	cmp	r2, #0
    2bf8:	d1e2      	bne.n	2bc0 <convertAnalogOutputs+0xc>
    2bfa:	782a      	ldrb	r2, [r5, #0]
    2bfc:	2a00      	cmp	r2, #0
    2bfe:	d1df      	bne.n	2bc0 <convertAnalogOutputs+0xc>
				connecting[i] = true;
    2c00:	2301      	movs	r3, #1
    2c02:	702b      	strb	r3, [r5, #0]
				tempOutputsConnected[i] = tempOutput;
    2c04:	4b24      	ldr	r3, [pc, #144]	; (2c98 <convertAnalogOutputs+0xe4>)
    2c06:	54e0      	strb	r0, [r4, r3]
    2c08:	e7e4      	b.n	2bd4 <convertAnalogOutputs+0x20>
				if((connecting[i] == true) && (tempOutputsConnected[i] == tempOutput ))
    2c0a:	4a23      	ldr	r2, [pc, #140]	; (2c98 <convertAnalogOutputs+0xe4>)
    2c0c:	5ca2      	ldrb	r2, [r4, r2]
    2c0e:	429a      	cmp	r2, r3
    2c10:	d1da      	bne.n	2bc8 <convertAnalogOutputs+0x14>
					countConnecting[i]++;
    2c12:	4a20      	ldr	r2, [pc, #128]	; (2c94 <convertAnalogOutputs+0xe0>)
    2c14:	5ca3      	ldrb	r3, [r4, r2]
    2c16:	3301      	adds	r3, #1
    2c18:	b2db      	uxtb	r3, r3
    2c1a:	54a3      	strb	r3, [r4, r2]
					if(countConnecting[i] > COUNT_CONNECTING_THRESHOLD)
    2c1c:	2b05      	cmp	r3, #5
    2c1e:	d9d9      	bls.n	2bd4 <convertAnalogOutputs+0x20>
						outputsConnected[i] = tempOutput;
    2c20:	4b1e      	ldr	r3, [pc, #120]	; (2c9c <convertAnalogOutputs+0xe8>)
    2c22:	5518      	strb	r0, [r3, r4]
						connecting[i] = false;
    2c24:	2300      	movs	r3, #0
    2c26:	702b      	strb	r3, [r5, #0]
						countConnecting[i] = 0;
    2c28:	54a3      	strb	r3, [r4, r2]
    2c2a:	e7d3      	b.n	2bd4 <convertAnalogOutputs+0x20>
			countDisconnection[i]++;
    2c2c:	4b1d      	ldr	r3, [pc, #116]	; (2ca4 <convertAnalogOutputs+0xf0>)
    2c2e:	5ce3      	ldrb	r3, [r4, r3]
    2c30:	3301      	adds	r3, #1
    2c32:	b2db      	uxtb	r3, r3
    2c34:	4a1b      	ldr	r2, [pc, #108]	; (2ca4 <convertAnalogOutputs+0xf0>)
    2c36:	54a3      	strb	r3, [r4, r2]
			if(countDisconnection[i] > COUNT_CONNECTING_THRESHOLD)
    2c38:	2b05      	cmp	r3, #5
    2c3a:	d9cb      	bls.n	2bd4 <convertAnalogOutputs+0x20>
				if(i==3)
    2c3c:	b2e3      	uxtb	r3, r4
    2c3e:	2b03      	cmp	r3, #3
    2c40:	d006      	beq.n	2c50 <convertAnalogOutputs+0x9c>
				countDisconnection[i] = 0;
    2c42:	2300      	movs	r3, #0
    2c44:	4a17      	ldr	r2, [pc, #92]	; (2ca4 <convertAnalogOutputs+0xf0>)
    2c46:	54a3      	strb	r3, [r4, r2]
				outputsConnected[i]	= NOTHINGCONNECTED;
    2c48:	4a14      	ldr	r2, [pc, #80]	; (2c9c <convertAnalogOutputs+0xe8>)
    2c4a:	18a2      	adds	r2, r4, r2
    2c4c:	7013      	strb	r3, [r2, #0]
    2c4e:	e7c1      	b.n	2bd4 <convertAnalogOutputs+0x20>
					countDisconnection[3] = 0;
    2c50:	2300      	movs	r3, #0
    2c52:	70d3      	strb	r3, [r2, #3]
				    outputsConnected[3]	= NOTHINGCONNECTED;
    2c54:	4a11      	ldr	r2, [pc, #68]	; (2c9c <convertAnalogOutputs+0xe8>)
    2c56:	70d3      	strb	r3, [r2, #3]
    2c58:	e7f3      	b.n	2c42 <convertAnalogOutputs+0x8e>
	}
	temp_test_outputs_connected_1[temp_count] = analogOutput[0] ;
    2c5a:	4b13      	ldr	r3, [pc, #76]	; (2ca8 <convertAnalogOutputs+0xf4>)
    2c5c:	881b      	ldrh	r3, [r3, #0]
    2c5e:	7831      	ldrb	r1, [r6, #0]
    2c60:	4a12      	ldr	r2, [pc, #72]	; (2cac <convertAnalogOutputs+0xf8>)
    2c62:	54d1      	strb	r1, [r2, r3]
	temp_test_outputs_connected_2[temp_count] = analogOutput[1] ;
    2c64:	7871      	ldrb	r1, [r6, #1]
    2c66:	4a12      	ldr	r2, [pc, #72]	; (2cb0 <convertAnalogOutputs+0xfc>)
    2c68:	54d1      	strb	r1, [r2, r3]
	temp_test_outputs_connected_3[temp_count] = analogOutput[3] ;
    2c6a:	78f1      	ldrb	r1, [r6, #3]
    2c6c:	4a11      	ldr	r2, [pc, #68]	; (2cb4 <convertAnalogOutputs+0x100>)
    2c6e:	54d1      	strb	r1, [r2, r3]
	
	temp_count++;
    2c70:	3301      	adds	r3, #1
    2c72:	b29b      	uxth	r3, r3
	if(temp_count == 500)
    2c74:	22fa      	movs	r2, #250	; 0xfa
    2c76:	0052      	lsls	r2, r2, #1
    2c78:	4293      	cmp	r3, r2
    2c7a:	d002      	beq.n	2c82 <convertAnalogOutputs+0xce>
	temp_count++;
    2c7c:	4a0a      	ldr	r2, [pc, #40]	; (2ca8 <convertAnalogOutputs+0xf4>)
    2c7e:	8013      	strh	r3, [r2, #0]
	{
		temp_count = 0;
	}
	
}
    2c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp_count = 0;
    2c82:	2200      	movs	r2, #0
    2c84:	4b08      	ldr	r3, [pc, #32]	; (2ca8 <convertAnalogOutputs+0xf4>)
    2c86:	801a      	strh	r2, [r3, #0]
}
    2c88:	e7fa      	b.n	2c80 <convertAnalogOutputs+0xcc>
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	200001dc 	.word	0x200001dc
    2c90:	00002b65 	.word	0x00002b65
    2c94:	200001e4 	.word	0x200001e4
    2c98:	20000204 	.word	0x20000204
    2c9c:	20000f74 	.word	0x20000f74
    2ca0:	200001f8 	.word	0x200001f8
    2ca4:	200001ec 	.word	0x200001ec
    2ca8:	20000208 	.word	0x20000208
    2cac:	200007e8 	.word	0x200007e8
    2cb0:	200009dc 	.word	0x200009dc
    2cb4:	20000bd0 	.word	0x20000bd0

00002cb8 <convertAnalogInputs>:




void convertAnalogInputs(uint8_t* analogInputs)
{
    2cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cba:	0006      	movs	r6, r0
    2cbc:	4d30      	ldr	r5, [pc, #192]	; (2d80 <convertAnalogInputs+0xc8>)
    2cbe:	2400      	movs	r4, #0
	uint8_t tempInput = 0;
	uint8_t i =0;
	uint8_t tempInputCount = 0;
	for(i=0;i<NO_SENSORS;i++)
	{
		tempInput			=		inputOutputConnection(analogInputs[i]);
    2cc0:	4f30      	ldr	r7, [pc, #192]	; (2d84 <convertAnalogInputs+0xcc>)
    2cc2:	e011      	b.n	2ce8 <convertAnalogInputs+0x30>
    2cc4:	0029      	movs	r1, r5
				connecting[i] = true;
				tempInputsConnected[i] = tempInput;
			}
			else 
			{
				if((connecting[i] == true) && (tempInputsConnected[i] == tempInput ))
    2cc6:	782a      	ldrb	r2, [r5, #0]
    2cc8:	2a01      	cmp	r2, #1
    2cca:	d020      	beq.n	2d0e <convertAnalogInputs+0x56>
						countConnecting[i] = 0;
					}
				}
				else
				{
					connecting[i] = false;
    2ccc:	2300      	movs	r3, #0
    2cce:	700b      	strb	r3, [r1, #0]
					countConnecting[i] = 0;
    2cd0:	4a2d      	ldr	r2, [pc, #180]	; (2d88 <convertAnalogInputs+0xd0>)
    2cd2:	54a3      	strb	r3, [r4, r2]
					tempInputsConnected[i] = NOTHINGCONNECTED;
    2cd4:	4a2d      	ldr	r2, [pc, #180]	; (2d8c <convertAnalogInputs+0xd4>)
    2cd6:	54a3      	strb	r3, [r4, r2]
				countDisconnection[i]	= 0;
				inputsConnected[i]		= NOTHINGCONNECTED;
			}
		}
		
		previousInputsConnected[i] = inputsConnected[i];
    2cd8:	4b2d      	ldr	r3, [pc, #180]	; (2d90 <convertAnalogInputs+0xd8>)
    2cda:	5d1a      	ldrb	r2, [r3, r4]
    2cdc:	4b2d      	ldr	r3, [pc, #180]	; (2d94 <convertAnalogInputs+0xdc>)
    2cde:	54e2      	strb	r2, [r4, r3]
    2ce0:	3401      	adds	r4, #1
    2ce2:	3501      	adds	r5, #1
	for(i=0;i<NO_SENSORS;i++)
    2ce4:	2c03      	cmp	r4, #3
    2ce6:	d033      	beq.n	2d50 <convertAnalogInputs+0x98>
		tempInput			=		inputOutputConnection(analogInputs[i]);
    2ce8:	5d30      	ldrb	r0, [r6, r4]
    2cea:	47b8      	blx	r7
    2cec:	1e03      	subs	r3, r0, #0
		if(tempInput != NOTHINGCONNECTED)
    2cee:	d01f      	beq.n	2d30 <convertAnalogInputs+0x78>
			countDisconnection[i] = 0;
    2cf0:	2200      	movs	r2, #0
    2cf2:	4929      	ldr	r1, [pc, #164]	; (2d98 <convertAnalogInputs+0xe0>)
    2cf4:	5462      	strb	r2, [r4, r1]
			if((previousInputsConnected[i] == NOTHINGCONNECTED) && (connecting[i] == false))
    2cf6:	4a27      	ldr	r2, [pc, #156]	; (2d94 <convertAnalogInputs+0xdc>)
    2cf8:	5ca2      	ldrb	r2, [r4, r2]
    2cfa:	2a00      	cmp	r2, #0
    2cfc:	d1e2      	bne.n	2cc4 <convertAnalogInputs+0xc>
    2cfe:	782a      	ldrb	r2, [r5, #0]
    2d00:	2a00      	cmp	r2, #0
    2d02:	d1df      	bne.n	2cc4 <convertAnalogInputs+0xc>
				connecting[i] = true;
    2d04:	2301      	movs	r3, #1
    2d06:	702b      	strb	r3, [r5, #0]
				tempInputsConnected[i] = tempInput;
    2d08:	4b20      	ldr	r3, [pc, #128]	; (2d8c <convertAnalogInputs+0xd4>)
    2d0a:	54e0      	strb	r0, [r4, r3]
    2d0c:	e7e4      	b.n	2cd8 <convertAnalogInputs+0x20>
				if((connecting[i] == true) && (tempInputsConnected[i] == tempInput ))
    2d0e:	4a1f      	ldr	r2, [pc, #124]	; (2d8c <convertAnalogInputs+0xd4>)
    2d10:	5ca2      	ldrb	r2, [r4, r2]
    2d12:	429a      	cmp	r2, r3
    2d14:	d1da      	bne.n	2ccc <convertAnalogInputs+0x14>
					countConnecting[i]++;
    2d16:	4a1c      	ldr	r2, [pc, #112]	; (2d88 <convertAnalogInputs+0xd0>)
    2d18:	5ca3      	ldrb	r3, [r4, r2]
    2d1a:	3301      	adds	r3, #1
    2d1c:	b2db      	uxtb	r3, r3
    2d1e:	54a3      	strb	r3, [r4, r2]
					if(countConnecting[i] > COUNT_CONNECTING_THRESHOLD)
    2d20:	2b05      	cmp	r3, #5
    2d22:	d9d9      	bls.n	2cd8 <convertAnalogInputs+0x20>
						inputsConnected[i] = tempInput;
    2d24:	4b1a      	ldr	r3, [pc, #104]	; (2d90 <convertAnalogInputs+0xd8>)
    2d26:	5518      	strb	r0, [r3, r4]
						connecting[i] = false;
    2d28:	2300      	movs	r3, #0
    2d2a:	702b      	strb	r3, [r5, #0]
						countConnecting[i] = 0;
    2d2c:	54a3      	strb	r3, [r4, r2]
    2d2e:	e7d3      	b.n	2cd8 <convertAnalogInputs+0x20>
			countDisconnection[i]++;
    2d30:	4b19      	ldr	r3, [pc, #100]	; (2d98 <convertAnalogInputs+0xe0>)
    2d32:	5ce3      	ldrb	r3, [r4, r3]
    2d34:	3301      	adds	r3, #1
    2d36:	b2db      	uxtb	r3, r3
			if(countDisconnection[i] > COUNT_CONNECTING_THRESHOLD)
    2d38:	2b05      	cmp	r3, #5
    2d3a:	d802      	bhi.n	2d42 <convertAnalogInputs+0x8a>
			countDisconnection[i]++;
    2d3c:	4a16      	ldr	r2, [pc, #88]	; (2d98 <convertAnalogInputs+0xe0>)
    2d3e:	54a3      	strb	r3, [r4, r2]
    2d40:	e7ca      	b.n	2cd8 <convertAnalogInputs+0x20>
				countDisconnection[i]	= 0;
    2d42:	2300      	movs	r3, #0
    2d44:	4a14      	ldr	r2, [pc, #80]	; (2d98 <convertAnalogInputs+0xe0>)
    2d46:	54a3      	strb	r3, [r4, r2]
				inputsConnected[i]		= NOTHINGCONNECTED;
    2d48:	4a11      	ldr	r2, [pc, #68]	; (2d90 <convertAnalogInputs+0xd8>)
    2d4a:	18a2      	adds	r2, r4, r2
    2d4c:	7013      	strb	r3, [r2, #0]
    2d4e:	e7c3      	b.n	2cd8 <convertAnalogInputs+0x20>
	{
		NoInDevCon = tempInputCount;
	}
	*/
	
	temp_test_inputs_connected_1[temp_count] = analogInputs[0] ;
    2d50:	4b12      	ldr	r3, [pc, #72]	; (2d9c <convertAnalogInputs+0xe4>)
    2d52:	881b      	ldrh	r3, [r3, #0]
    2d54:	7831      	ldrb	r1, [r6, #0]
    2d56:	4a12      	ldr	r2, [pc, #72]	; (2da0 <convertAnalogInputs+0xe8>)
    2d58:	54d1      	strb	r1, [r2, r3]
	temp_test_inputs_connected_2[temp_count] = analogInputs[1];
    2d5a:	7871      	ldrb	r1, [r6, #1]
    2d5c:	4a11      	ldr	r2, [pc, #68]	; (2da4 <convertAnalogInputs+0xec>)
    2d5e:	54d1      	strb	r1, [r2, r3]
	temp_test_inputs_connected_3[temp_count] = analogInputs[2] ;
    2d60:	78b1      	ldrb	r1, [r6, #2]
    2d62:	4a11      	ldr	r2, [pc, #68]	; (2da8 <convertAnalogInputs+0xf0>)
    2d64:	54d1      	strb	r1, [r2, r3]
	
	temp_count++;
    2d66:	3301      	adds	r3, #1
    2d68:	b29b      	uxth	r3, r3
	if(temp_count == 500)
    2d6a:	22fa      	movs	r2, #250	; 0xfa
    2d6c:	0052      	lsls	r2, r2, #1
    2d6e:	4293      	cmp	r3, r2
    2d70:	d002      	beq.n	2d78 <convertAnalogInputs+0xc0>
	temp_count++;
    2d72:	4a0a      	ldr	r2, [pc, #40]	; (2d9c <convertAnalogInputs+0xe4>)
    2d74:	8013      	strh	r3, [r2, #0]
	{
		temp_count = 0;
	}
}
    2d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp_count = 0;
    2d78:	2200      	movs	r2, #0
    2d7a:	4b08      	ldr	r3, [pc, #32]	; (2d9c <convertAnalogInputs+0xe4>)
    2d7c:	801a      	strh	r2, [r3, #0]
}
    2d7e:	e7fa      	b.n	2d76 <convertAnalogInputs+0xbe>
    2d80:	200001e0 	.word	0x200001e0
    2d84:	00002b65 	.word	0x00002b65
    2d88:	200001e8 	.word	0x200001e8
    2d8c:	20000200 	.word	0x20000200
    2d90:	20000de8 	.word	0x20000de8
    2d94:	200001f4 	.word	0x200001f4
    2d98:	200001f0 	.word	0x200001f0
    2d9c:	2000020a 	.word	0x2000020a
    2da0:	2000020c 	.word	0x2000020c
    2da4:	20000400 	.word	0x20000400
    2da8:	200005f4 	.word	0x200005f4

00002dac <checkOutputs>:



void checkOutputs()
{
    2dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dae:	2400      	movs	r4, #0
	uint8_t i =0;
	static uint8_t analogOutput[4];
	for(i=0;i<4;i++)
	{
		analogOutput[i] = adc_start_read_result(outputDetectAnalogChannles[i]);
    2db0:	4f06      	ldr	r7, [pc, #24]	; (2dcc <checkOutputs+0x20>)
    2db2:	4e07      	ldr	r6, [pc, #28]	; (2dd0 <checkOutputs+0x24>)
    2db4:	4d07      	ldr	r5, [pc, #28]	; (2dd4 <checkOutputs+0x28>)
    2db6:	5de0      	ldrb	r0, [r4, r7]
    2db8:	47b0      	blx	r6
    2dba:	5560      	strb	r0, [r4, r5]
    2dbc:	3401      	adds	r4, #1
	for(i=0;i<4;i++)
    2dbe:	2c04      	cmp	r4, #4
    2dc0:	d1f9      	bne.n	2db6 <checkOutputs+0xa>
	}
	convertAnalogOutputs(analogOutput);
    2dc2:	4804      	ldr	r0, [pc, #16]	; (2dd4 <checkOutputs+0x28>)
    2dc4:	4b04      	ldr	r3, [pc, #16]	; (2dd8 <checkOutputs+0x2c>)
    2dc6:	4798      	blx	r3
}
    2dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	0000552c 	.word	0x0000552c
    2dd0:	00002789 	.word	0x00002789
    2dd4:	200001d8 	.word	0x200001d8
    2dd8:	00002bb5 	.word	0x00002bb5

00002ddc <checkInputs>:


void checkInputs()
{
    2ddc:	b570      	push	{r4, r5, r6, lr}
	uint8_t i =0;
	static uint8_t analogInput[4];
	for(i=0;i<3;i++)
	{
		analogInput[i]			= adc_start_read_result(sensorDetectAnalogChannles[i]);
    2dde:	200e      	movs	r0, #14
    2de0:	4d06      	ldr	r5, [pc, #24]	; (2dfc <checkInputs+0x20>)
    2de2:	47a8      	blx	r5
    2de4:	4c06      	ldr	r4, [pc, #24]	; (2e00 <checkInputs+0x24>)
    2de6:	7020      	strb	r0, [r4, #0]
    2de8:	200d      	movs	r0, #13
    2dea:	47a8      	blx	r5
    2dec:	7060      	strb	r0, [r4, #1]
    2dee:	2012      	movs	r0, #18
    2df0:	47a8      	blx	r5
    2df2:	70a0      	strb	r0, [r4, #2]
	}
	convertAnalogInputs(analogInput);
    2df4:	0020      	movs	r0, r4
    2df6:	4b03      	ldr	r3, [pc, #12]	; (2e04 <checkInputs+0x28>)
    2df8:	4798      	blx	r3
}
    2dfa:	bd70      	pop	{r4, r5, r6, pc}
    2dfc:	00002789 	.word	0x00002789
    2e00:	200001d4 	.word	0x200001d4
    2e04:	00002cb9 	.word	0x00002cb9

00002e08 <loadIdentifier>:
	uint32_t temp				= 0;
	uint8_t  i					= 0;
	
	for(i=0;i<NO_OUTPUTS;i++)
	{
		temp		         =  outputsConnected[i];
    2e08:	4a12      	ldr	r2, [pc, #72]	; (2e54 <loadIdentifier+0x4c>)
    2e0a:	7813      	ldrb	r3, [r2, #0]
		current_identifier  |=  temp << (28 - 4*i);
    2e0c:	071b      	lsls	r3, r3, #28
		temp		         =  outputsConnected[i];
    2e0e:	7851      	ldrb	r1, [r2, #1]
		current_identifier  |=  temp << (28 - 4*i);
    2e10:	0609      	lsls	r1, r1, #24
    2e12:	430b      	orrs	r3, r1
	}
	
	for(i=0;i<NO_SENSORS;i++)
	{
		temp		  =  inputsConnected[i];
    2e14:	4910      	ldr	r1, [pc, #64]	; (2e58 <loadIdentifier+0x50>)
    2e16:	7808      	ldrb	r0, [r1, #0]
		current_identifier  |=  temp << (11-(5*i));
    2e18:	02c0      	lsls	r0, r0, #11
    2e1a:	4303      	orrs	r3, r0
		temp		  =  inputsConnected[i];
    2e1c:	7848      	ldrb	r0, [r1, #1]
		current_identifier  |=  temp << (11-(5*i));
    2e1e:	0180      	lsls	r0, r0, #6
    2e20:	4303      	orrs	r3, r0
		temp		         =  outputsConnected[i];
    2e22:	7890      	ldrb	r0, [r2, #2]
		current_identifier  |=  temp << (28 - 4*i);
    2e24:	0500      	lsls	r0, r0, #20
    2e26:	4303      	orrs	r3, r0
		temp		  =  inputsConnected[i];
    2e28:	7889      	ldrb	r1, [r1, #2]
		current_identifier  |=  temp << (11-(5*i));
    2e2a:	0049      	lsls	r1, r1, #1
    2e2c:	430b      	orrs	r3, r1
		temp		         =  outputsConnected[i];
    2e2e:	78d2      	ldrb	r2, [r2, #3]
		current_identifier  |=  temp << (28 - 4*i);
    2e30:	0412      	lsls	r2, r2, #16
		current_identifier  |=  temp << (11-(5*i));
    2e32:	4313      	orrs	r3, r2
	}

	if(current_identifier != previous_identifier)
    2e34:	4a09      	ldr	r2, [pc, #36]	; (2e5c <loadIdentifier+0x54>)
    2e36:	6812      	ldr	r2, [r2, #0]
    2e38:	4293      	cmp	r3, r2
    2e3a:	d009      	beq.n	2e50 <loadIdentifier+0x48>
	{
		for(i=0;i<4;i++)
		{
			sensorOutputs[i] = (current_identifier >> 8* (3-i)) & 0x000000FF ;
    2e3c:	4a08      	ldr	r2, [pc, #32]	; (2e60 <loadIdentifier+0x58>)
    2e3e:	0e19      	lsrs	r1, r3, #24
    2e40:	7011      	strb	r1, [r2, #0]
    2e42:	0c19      	lsrs	r1, r3, #16
    2e44:	7051      	strb	r1, [r2, #1]
    2e46:	0a19      	lsrs	r1, r3, #8
    2e48:	7091      	strb	r1, [r2, #2]
    2e4a:	70d3      	strb	r3, [r2, #3]
		}
		previous_identifier = current_identifier;
    2e4c:	4a03      	ldr	r2, [pc, #12]	; (2e5c <loadIdentifier+0x54>)
    2e4e:	6013      	str	r3, [r2, #0]
	}
}
    2e50:	4770      	bx	lr
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	20000f74 	.word	0x20000f74
    2e58:	20000de8 	.word	0x20000de8
    2e5c:	200001fc 	.word	0x200001fc
    2e60:	20000f78 	.word	0x20000f78

00002e64 <checkOutputsInputs>:

void checkOutputsInputs()
{
    2e64:	b510      	push	{r4, lr}
	checkOutputs();
    2e66:	4b03      	ldr	r3, [pc, #12]	; (2e74 <checkOutputsInputs+0x10>)
    2e68:	4798      	blx	r3
	checkInputs();
    2e6a:	4b03      	ldr	r3, [pc, #12]	; (2e78 <checkOutputsInputs+0x14>)
    2e6c:	4798      	blx	r3
	loadIdentifier(); //Set the identifier which will be used in the notifications by the Bluetooth
    2e6e:	4b03      	ldr	r3, [pc, #12]	; (2e7c <checkOutputsInputs+0x18>)
    2e70:	4798      	blx	r3
}
    2e72:	bd10      	pop	{r4, pc}
    2e74:	00002dad 	.word	0x00002dad
    2e78:	00002ddd 	.word	0x00002ddd
    2e7c:	00002e09 	.word	0x00002e09

00002e80 <configureInputOutputDetection>:


void configureInputOutputDetection()
{
    2e80:	b510      	push	{r4, lr}
	configureADC();
    2e82:	4b01      	ldr	r3, [pc, #4]	; (2e88 <configureInputOutputDetection+0x8>)
    2e84:	4798      	blx	r3
    2e86:	bd10      	pop	{r4, pc}
    2e88:	00002701 	.word	0x00002701

00002e8c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2e8c:	4770      	bx	lr
	...

00002e90 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2e90:	4b0c      	ldr	r3, [pc, #48]	; (2ec4 <cpu_irq_enter_critical+0x34>)
    2e92:	681b      	ldr	r3, [r3, #0]
    2e94:	2b00      	cmp	r3, #0
    2e96:	d106      	bne.n	2ea6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e98:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d007      	beq.n	2eb0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2ea0:	2200      	movs	r2, #0
    2ea2:	4b09      	ldr	r3, [pc, #36]	; (2ec8 <cpu_irq_enter_critical+0x38>)
    2ea4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2ea6:	4a07      	ldr	r2, [pc, #28]	; (2ec4 <cpu_irq_enter_critical+0x34>)
    2ea8:	6813      	ldr	r3, [r2, #0]
    2eaa:	3301      	adds	r3, #1
    2eac:	6013      	str	r3, [r2, #0]
}
    2eae:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2eb0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2eb2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2eb6:	2200      	movs	r2, #0
    2eb8:	4b04      	ldr	r3, [pc, #16]	; (2ecc <cpu_irq_enter_critical+0x3c>)
    2eba:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2ebc:	3201      	adds	r2, #1
    2ebe:	4b02      	ldr	r3, [pc, #8]	; (2ec8 <cpu_irq_enter_critical+0x38>)
    2ec0:	701a      	strb	r2, [r3, #0]
    2ec2:	e7f0      	b.n	2ea6 <cpu_irq_enter_critical+0x16>
    2ec4:	20000dc4 	.word	0x20000dc4
    2ec8:	20000dc8 	.word	0x20000dc8
    2ecc:	20000054 	.word	0x20000054

00002ed0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2ed0:	4b08      	ldr	r3, [pc, #32]	; (2ef4 <cpu_irq_leave_critical+0x24>)
    2ed2:	681a      	ldr	r2, [r3, #0]
    2ed4:	3a01      	subs	r2, #1
    2ed6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2ed8:	681b      	ldr	r3, [r3, #0]
    2eda:	2b00      	cmp	r3, #0
    2edc:	d109      	bne.n	2ef2 <cpu_irq_leave_critical+0x22>
    2ede:	4b06      	ldr	r3, [pc, #24]	; (2ef8 <cpu_irq_leave_critical+0x28>)
    2ee0:	781b      	ldrb	r3, [r3, #0]
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d005      	beq.n	2ef2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2ee6:	2201      	movs	r2, #1
    2ee8:	4b04      	ldr	r3, [pc, #16]	; (2efc <cpu_irq_leave_critical+0x2c>)
    2eea:	701a      	strb	r2, [r3, #0]
    2eec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2ef0:	b662      	cpsie	i
	}
}
    2ef2:	4770      	bx	lr
    2ef4:	20000dc4 	.word	0x20000dc4
    2ef8:	20000dc8 	.word	0x20000dc8
    2efc:	20000054 	.word	0x20000054

00002f00 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2f00:	b510      	push	{r4, lr}
	switch (clock_source) {
    2f02:	2808      	cmp	r0, #8
    2f04:	d803      	bhi.n	2f0e <system_clock_source_get_hz+0xe>
    2f06:	0080      	lsls	r0, r0, #2
    2f08:	4b1b      	ldr	r3, [pc, #108]	; (2f78 <system_clock_source_get_hz+0x78>)
    2f0a:	581b      	ldr	r3, [r3, r0]
    2f0c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2f0e:	2000      	movs	r0, #0
    2f10:	e030      	b.n	2f74 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2f12:	4b1a      	ldr	r3, [pc, #104]	; (2f7c <system_clock_source_get_hz+0x7c>)
    2f14:	6918      	ldr	r0, [r3, #16]
    2f16:	e02d      	b.n	2f74 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2f18:	4b19      	ldr	r3, [pc, #100]	; (2f80 <system_clock_source_get_hz+0x80>)
    2f1a:	6a1b      	ldr	r3, [r3, #32]
    2f1c:	059b      	lsls	r3, r3, #22
    2f1e:	0f9b      	lsrs	r3, r3, #30
    2f20:	4818      	ldr	r0, [pc, #96]	; (2f84 <system_clock_source_get_hz+0x84>)
    2f22:	40d8      	lsrs	r0, r3
    2f24:	e026      	b.n	2f74 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2f26:	4b15      	ldr	r3, [pc, #84]	; (2f7c <system_clock_source_get_hz+0x7c>)
    2f28:	6958      	ldr	r0, [r3, #20]
    2f2a:	e023      	b.n	2f74 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2f2c:	4b13      	ldr	r3, [pc, #76]	; (2f7c <system_clock_source_get_hz+0x7c>)
    2f2e:	681b      	ldr	r3, [r3, #0]
			return 0;
    2f30:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2f32:	079b      	lsls	r3, r3, #30
    2f34:	d51e      	bpl.n	2f74 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f36:	4912      	ldr	r1, [pc, #72]	; (2f80 <system_clock_source_get_hz+0x80>)
    2f38:	2210      	movs	r2, #16
    2f3a:	68cb      	ldr	r3, [r1, #12]
    2f3c:	421a      	tst	r2, r3
    2f3e:	d0fc      	beq.n	2f3a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2f40:	4b0e      	ldr	r3, [pc, #56]	; (2f7c <system_clock_source_get_hz+0x7c>)
    2f42:	681b      	ldr	r3, [r3, #0]
    2f44:	075b      	lsls	r3, r3, #29
    2f46:	d401      	bmi.n	2f4c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2f48:	480f      	ldr	r0, [pc, #60]	; (2f88 <system_clock_source_get_hz+0x88>)
    2f4a:	e013      	b.n	2f74 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f4c:	2000      	movs	r0, #0
    2f4e:	4b0f      	ldr	r3, [pc, #60]	; (2f8c <system_clock_source_get_hz+0x8c>)
    2f50:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2f52:	4b0a      	ldr	r3, [pc, #40]	; (2f7c <system_clock_source_get_hz+0x7c>)
    2f54:	689b      	ldr	r3, [r3, #8]
    2f56:	041b      	lsls	r3, r3, #16
    2f58:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f5a:	4358      	muls	r0, r3
    2f5c:	e00a      	b.n	2f74 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f5e:	2350      	movs	r3, #80	; 0x50
    2f60:	4a07      	ldr	r2, [pc, #28]	; (2f80 <system_clock_source_get_hz+0x80>)
    2f62:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2f64:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f66:	075b      	lsls	r3, r3, #29
    2f68:	d504      	bpl.n	2f74 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2f6a:	4b04      	ldr	r3, [pc, #16]	; (2f7c <system_clock_source_get_hz+0x7c>)
    2f6c:	68d8      	ldr	r0, [r3, #12]
    2f6e:	e001      	b.n	2f74 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2f70:	2080      	movs	r0, #128	; 0x80
    2f72:	0200      	lsls	r0, r0, #8
	}
}
    2f74:	bd10      	pop	{r4, pc}
    2f76:	46c0      	nop			; (mov r8, r8)
    2f78:	00005530 	.word	0x00005530
    2f7c:	20000dcc 	.word	0x20000dcc
    2f80:	40000800 	.word	0x40000800
    2f84:	007a1200 	.word	0x007a1200
    2f88:	02dc6c00 	.word	0x02dc6c00
    2f8c:	00003541 	.word	0x00003541

00002f90 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2f90:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2f92:	490c      	ldr	r1, [pc, #48]	; (2fc4 <system_clock_source_osc8m_set_config+0x34>)
    2f94:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2f96:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2f98:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2f9a:	7840      	ldrb	r0, [r0, #1]
    2f9c:	2201      	movs	r2, #1
    2f9e:	4010      	ands	r0, r2
    2fa0:	0180      	lsls	r0, r0, #6
    2fa2:	2640      	movs	r6, #64	; 0x40
    2fa4:	43b3      	bics	r3, r6
    2fa6:	4303      	orrs	r3, r0
    2fa8:	402a      	ands	r2, r5
    2faa:	01d2      	lsls	r2, r2, #7
    2fac:	2080      	movs	r0, #128	; 0x80
    2fae:	4383      	bics	r3, r0
    2fb0:	4313      	orrs	r3, r2
    2fb2:	2203      	movs	r2, #3
    2fb4:	4022      	ands	r2, r4
    2fb6:	0212      	lsls	r2, r2, #8
    2fb8:	4803      	ldr	r0, [pc, #12]	; (2fc8 <system_clock_source_osc8m_set_config+0x38>)
    2fba:	4003      	ands	r3, r0
    2fbc:	4313      	orrs	r3, r2
    2fbe:	620b      	str	r3, [r1, #32]
}
    2fc0:	bd70      	pop	{r4, r5, r6, pc}
    2fc2:	46c0      	nop			; (mov r8, r8)
    2fc4:	40000800 	.word	0x40000800
    2fc8:	fffffcff 	.word	0xfffffcff

00002fcc <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fce:	46ce      	mov	lr, r9
    2fd0:	4647      	mov	r7, r8
    2fd2:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2fd4:	4b19      	ldr	r3, [pc, #100]	; (303c <system_clock_source_osc32k_set_config+0x70>)
    2fd6:	4699      	mov	r9, r3
    2fd8:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2fda:	7841      	ldrb	r1, [r0, #1]
    2fdc:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2fde:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2fe0:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2fe2:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2fe4:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2fe6:	7880      	ldrb	r0, [r0, #2]
    2fe8:	2101      	movs	r1, #1
    2fea:	4008      	ands	r0, r1
    2fec:	0080      	lsls	r0, r0, #2
    2fee:	2204      	movs	r2, #4
    2ff0:	4393      	bics	r3, r2
    2ff2:	4303      	orrs	r3, r0
    2ff4:	4660      	mov	r0, ip
    2ff6:	4008      	ands	r0, r1
    2ff8:	00c0      	lsls	r0, r0, #3
    2ffa:	3204      	adds	r2, #4
    2ffc:	4393      	bics	r3, r2
    2ffe:	4303      	orrs	r3, r0
    3000:	0038      	movs	r0, r7
    3002:	4008      	ands	r0, r1
    3004:	0180      	lsls	r0, r0, #6
    3006:	2740      	movs	r7, #64	; 0x40
    3008:	43bb      	bics	r3, r7
    300a:	4303      	orrs	r3, r0
    300c:	0030      	movs	r0, r6
    300e:	4008      	ands	r0, r1
    3010:	01c0      	lsls	r0, r0, #7
    3012:	2680      	movs	r6, #128	; 0x80
    3014:	43b3      	bics	r3, r6
    3016:	4303      	orrs	r3, r0
    3018:	2007      	movs	r0, #7
    301a:	4005      	ands	r5, r0
    301c:	022d      	lsls	r5, r5, #8
    301e:	4808      	ldr	r0, [pc, #32]	; (3040 <system_clock_source_osc32k_set_config+0x74>)
    3020:	4003      	ands	r3, r0
    3022:	432b      	orrs	r3, r5
    3024:	4021      	ands	r1, r4
    3026:	0309      	lsls	r1, r1, #12
    3028:	4806      	ldr	r0, [pc, #24]	; (3044 <system_clock_source_osc32k_set_config+0x78>)
    302a:	4003      	ands	r3, r0
    302c:	430b      	orrs	r3, r1
    302e:	464a      	mov	r2, r9
    3030:	6193      	str	r3, [r2, #24]
}
    3032:	bc0c      	pop	{r2, r3}
    3034:	4690      	mov	r8, r2
    3036:	4699      	mov	r9, r3
    3038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	40000800 	.word	0x40000800
    3040:	fffff8ff 	.word	0xfffff8ff
    3044:	ffffefff 	.word	0xffffefff

00003048 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3048:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    304a:	7a03      	ldrb	r3, [r0, #8]
    304c:	069b      	lsls	r3, r3, #26
    304e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3050:	8942      	ldrh	r2, [r0, #10]
    3052:	0592      	lsls	r2, r2, #22
    3054:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3056:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3058:	4918      	ldr	r1, [pc, #96]	; (30bc <system_clock_source_dfll_set_config+0x74>)
    305a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    305c:	7983      	ldrb	r3, [r0, #6]
    305e:	79c2      	ldrb	r2, [r0, #7]
    3060:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3062:	8842      	ldrh	r2, [r0, #2]
    3064:	8884      	ldrh	r4, [r0, #4]
    3066:	4322      	orrs	r2, r4
    3068:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    306a:	7842      	ldrb	r2, [r0, #1]
    306c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    306e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    3070:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3072:	7803      	ldrb	r3, [r0, #0]
    3074:	2b04      	cmp	r3, #4
    3076:	d011      	beq.n	309c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3078:	2b20      	cmp	r3, #32
    307a:	d10e      	bne.n	309a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    307c:	7b03      	ldrb	r3, [r0, #12]
    307e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3080:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3082:	4313      	orrs	r3, r2
    3084:	89c2      	ldrh	r2, [r0, #14]
    3086:	0412      	lsls	r2, r2, #16
    3088:	490d      	ldr	r1, [pc, #52]	; (30c0 <system_clock_source_dfll_set_config+0x78>)
    308a:	400a      	ands	r2, r1
    308c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    308e:	4a0b      	ldr	r2, [pc, #44]	; (30bc <system_clock_source_dfll_set_config+0x74>)
    3090:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3092:	6811      	ldr	r1, [r2, #0]
    3094:	4b0b      	ldr	r3, [pc, #44]	; (30c4 <system_clock_source_dfll_set_config+0x7c>)
    3096:	430b      	orrs	r3, r1
    3098:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    309a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    309c:	7b03      	ldrb	r3, [r0, #12]
    309e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    30a0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    30a2:	4313      	orrs	r3, r2
    30a4:	89c2      	ldrh	r2, [r0, #14]
    30a6:	0412      	lsls	r2, r2, #16
    30a8:	4905      	ldr	r1, [pc, #20]	; (30c0 <system_clock_source_dfll_set_config+0x78>)
    30aa:	400a      	ands	r2, r1
    30ac:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    30ae:	4a03      	ldr	r2, [pc, #12]	; (30bc <system_clock_source_dfll_set_config+0x74>)
    30b0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    30b2:	6813      	ldr	r3, [r2, #0]
    30b4:	2104      	movs	r1, #4
    30b6:	430b      	orrs	r3, r1
    30b8:	6013      	str	r3, [r2, #0]
    30ba:	e7ee      	b.n	309a <system_clock_source_dfll_set_config+0x52>
    30bc:	20000dcc 	.word	0x20000dcc
    30c0:	03ff0000 	.word	0x03ff0000
    30c4:	00000424 	.word	0x00000424

000030c8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    30c8:	2808      	cmp	r0, #8
    30ca:	d803      	bhi.n	30d4 <system_clock_source_enable+0xc>
    30cc:	0080      	lsls	r0, r0, #2
    30ce:	4b25      	ldr	r3, [pc, #148]	; (3164 <system_clock_source_enable+0x9c>)
    30d0:	581b      	ldr	r3, [r3, r0]
    30d2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    30d4:	2017      	movs	r0, #23
    30d6:	e044      	b.n	3162 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    30d8:	4a23      	ldr	r2, [pc, #140]	; (3168 <system_clock_source_enable+0xa0>)
    30da:	6a13      	ldr	r3, [r2, #32]
    30dc:	2102      	movs	r1, #2
    30de:	430b      	orrs	r3, r1
    30e0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    30e2:	2000      	movs	r0, #0
    30e4:	e03d      	b.n	3162 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    30e6:	4a20      	ldr	r2, [pc, #128]	; (3168 <system_clock_source_enable+0xa0>)
    30e8:	6993      	ldr	r3, [r2, #24]
    30ea:	2102      	movs	r1, #2
    30ec:	430b      	orrs	r3, r1
    30ee:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    30f0:	2000      	movs	r0, #0
		break;
    30f2:	e036      	b.n	3162 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    30f4:	4a1c      	ldr	r2, [pc, #112]	; (3168 <system_clock_source_enable+0xa0>)
    30f6:	8a13      	ldrh	r3, [r2, #16]
    30f8:	2102      	movs	r1, #2
    30fa:	430b      	orrs	r3, r1
    30fc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    30fe:	2000      	movs	r0, #0
		break;
    3100:	e02f      	b.n	3162 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3102:	4a19      	ldr	r2, [pc, #100]	; (3168 <system_clock_source_enable+0xa0>)
    3104:	8a93      	ldrh	r3, [r2, #20]
    3106:	2102      	movs	r1, #2
    3108:	430b      	orrs	r3, r1
    310a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    310c:	2000      	movs	r0, #0
		break;
    310e:	e028      	b.n	3162 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3110:	4916      	ldr	r1, [pc, #88]	; (316c <system_clock_source_enable+0xa4>)
    3112:	680b      	ldr	r3, [r1, #0]
    3114:	2202      	movs	r2, #2
    3116:	4313      	orrs	r3, r2
    3118:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    311a:	4b13      	ldr	r3, [pc, #76]	; (3168 <system_clock_source_enable+0xa0>)
    311c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    311e:	0019      	movs	r1, r3
    3120:	320e      	adds	r2, #14
    3122:	68cb      	ldr	r3, [r1, #12]
    3124:	421a      	tst	r2, r3
    3126:	d0fc      	beq.n	3122 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3128:	4a10      	ldr	r2, [pc, #64]	; (316c <system_clock_source_enable+0xa4>)
    312a:	6891      	ldr	r1, [r2, #8]
    312c:	4b0e      	ldr	r3, [pc, #56]	; (3168 <system_clock_source_enable+0xa0>)
    312e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3130:	6852      	ldr	r2, [r2, #4]
    3132:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3134:	2200      	movs	r2, #0
    3136:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3138:	0019      	movs	r1, r3
    313a:	3210      	adds	r2, #16
    313c:	68cb      	ldr	r3, [r1, #12]
    313e:	421a      	tst	r2, r3
    3140:	d0fc      	beq.n	313c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3142:	4b0a      	ldr	r3, [pc, #40]	; (316c <system_clock_source_enable+0xa4>)
    3144:	681b      	ldr	r3, [r3, #0]
    3146:	b29b      	uxth	r3, r3
    3148:	4a07      	ldr	r2, [pc, #28]	; (3168 <system_clock_source_enable+0xa0>)
    314a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    314c:	2000      	movs	r0, #0
    314e:	e008      	b.n	3162 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3150:	4905      	ldr	r1, [pc, #20]	; (3168 <system_clock_source_enable+0xa0>)
    3152:	2244      	movs	r2, #68	; 0x44
    3154:	5c8b      	ldrb	r3, [r1, r2]
    3156:	2002      	movs	r0, #2
    3158:	4303      	orrs	r3, r0
    315a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    315c:	2000      	movs	r0, #0
		break;
    315e:	e000      	b.n	3162 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3160:	2000      	movs	r0, #0
}
    3162:	4770      	bx	lr
    3164:	00005554 	.word	0x00005554
    3168:	40000800 	.word	0x40000800
    316c:	20000dcc 	.word	0x20000dcc

00003170 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3170:	b5f0      	push	{r4, r5, r6, r7, lr}
    3172:	46ce      	mov	lr, r9
    3174:	4647      	mov	r7, r8
    3176:	b580      	push	{r7, lr}
    3178:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    317a:	22c2      	movs	r2, #194	; 0xc2
    317c:	00d2      	lsls	r2, r2, #3
    317e:	4b4d      	ldr	r3, [pc, #308]	; (32b4 <system_clock_init+0x144>)
    3180:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3182:	494d      	ldr	r1, [pc, #308]	; (32b8 <system_clock_init+0x148>)
    3184:	684b      	ldr	r3, [r1, #4]
    3186:	221e      	movs	r2, #30
    3188:	4393      	bics	r3, r2
    318a:	3a1c      	subs	r2, #28
    318c:	4313      	orrs	r3, r2
    318e:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    3190:	ab01      	add	r3, sp, #4
    3192:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3194:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3196:	4d49      	ldr	r5, [pc, #292]	; (32bc <system_clock_init+0x14c>)
    3198:	b2e0      	uxtb	r0, r4
    319a:	a901      	add	r1, sp, #4
    319c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    319e:	3401      	adds	r4, #1
    31a0:	2c25      	cmp	r4, #37	; 0x25
    31a2:	d1f9      	bne.n	3198 <system_clock_init+0x28>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    31a4:	4c46      	ldr	r4, [pc, #280]	; (32c0 <system_clock_init+0x150>)
	SYSCTRL->OSC32K.bit.CALIB =
    31a6:	6823      	ldr	r3, [r4, #0]
    31a8:	04db      	lsls	r3, r3, #19
    31aa:	4942      	ldr	r1, [pc, #264]	; (32b4 <system_clock_init+0x144>)
    31ac:	698a      	ldr	r2, [r1, #24]
    31ae:	0e5b      	lsrs	r3, r3, #25
    31b0:	041b      	lsls	r3, r3, #16
    31b2:	4844      	ldr	r0, [pc, #272]	; (32c4 <system_clock_init+0x154>)
    31b4:	4002      	ands	r2, r0
    31b6:	4313      	orrs	r3, r2
    31b8:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    31ba:	a80a      	add	r0, sp, #40	; 0x28
    31bc:	2301      	movs	r3, #1
    31be:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    31c0:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    31c2:	2500      	movs	r5, #0
    31c4:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    31c6:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    31c8:	3306      	adds	r3, #6
    31ca:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    31cc:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    31ce:	4b3e      	ldr	r3, [pc, #248]	; (32c8 <system_clock_init+0x158>)
    31d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    31d2:	2004      	movs	r0, #4
    31d4:	4b3d      	ldr	r3, [pc, #244]	; (32cc <system_clock_init+0x15c>)
    31d6:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    31d8:	ab05      	add	r3, sp, #20
    31da:	2200      	movs	r2, #0
    31dc:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    31de:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    31e0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    31e2:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    31e4:	213f      	movs	r1, #63	; 0x3f
    31e6:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    31e8:	393b      	subs	r1, #59	; 0x3b
    31ea:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    31ec:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    31ee:	6823      	ldr	r3, [r4, #0]
    31f0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    31f2:	2b3f      	cmp	r3, #63	; 0x3f
    31f4:	d05b      	beq.n	32ae <system_clock_init+0x13e>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    31f6:	a805      	add	r0, sp, #20
    31f8:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    31fa:	23b7      	movs	r3, #183	; 0xb7
    31fc:	00db      	lsls	r3, r3, #3
    31fe:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3200:	2307      	movs	r3, #7
    3202:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    3204:	3338      	adds	r3, #56	; 0x38
    3206:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3208:	4b31      	ldr	r3, [pc, #196]	; (32d0 <system_clock_init+0x160>)
    320a:	4798      	blx	r3
	config->run_in_standby  = false;
    320c:	a804      	add	r0, sp, #16
    320e:	2500      	movs	r5, #0
    3210:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    3212:	2601      	movs	r6, #1
    3214:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3216:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3218:	4b2e      	ldr	r3, [pc, #184]	; (32d4 <system_clock_init+0x164>)
    321a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    321c:	2006      	movs	r0, #6
    321e:	4f2b      	ldr	r7, [pc, #172]	; (32cc <system_clock_init+0x15c>)
    3220:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3222:	4b2d      	ldr	r3, [pc, #180]	; (32d8 <system_clock_init+0x168>)
    3224:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3226:	ac01      	add	r4, sp, #4
    3228:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    322a:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    322c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    322e:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3230:	2304      	movs	r3, #4
    3232:	7023      	strb	r3, [r4, #0]
    3234:	0021      	movs	r1, r4
    3236:	2001      	movs	r0, #1
    3238:	4b28      	ldr	r3, [pc, #160]	; (32dc <system_clock_init+0x16c>)
    323a:	4699      	mov	r9, r3
    323c:	4798      	blx	r3
    323e:	2001      	movs	r0, #1
    3240:	4b27      	ldr	r3, [pc, #156]	; (32e0 <system_clock_init+0x170>)
    3242:	4698      	mov	r8, r3
    3244:	4798      	blx	r3
	config->division_factor    = 1;
    3246:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3248:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    324a:	2306      	movs	r3, #6
    324c:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    324e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3250:	7265      	strb	r5, [r4, #9]
    3252:	0021      	movs	r1, r4
    3254:	2003      	movs	r0, #3
    3256:	47c8      	blx	r9
    3258:	2003      	movs	r0, #3
    325a:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    325c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    325e:	0021      	movs	r1, r4
    3260:	2000      	movs	r0, #0
    3262:	4b16      	ldr	r3, [pc, #88]	; (32bc <system_clock_init+0x14c>)
    3264:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    3266:	2000      	movs	r0, #0
    3268:	4b1e      	ldr	r3, [pc, #120]	; (32e4 <system_clock_init+0x174>)
    326a:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    326c:	2007      	movs	r0, #7
    326e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3270:	4910      	ldr	r1, [pc, #64]	; (32b4 <system_clock_init+0x144>)
    3272:	22d0      	movs	r2, #208	; 0xd0
    3274:	68cb      	ldr	r3, [r1, #12]
    3276:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3278:	2bd0      	cmp	r3, #208	; 0xd0
    327a:	d1fb      	bne.n	3274 <system_clock_init+0x104>
	PM->CPUSEL.reg = (uint32_t)divider;
    327c:	4a1a      	ldr	r2, [pc, #104]	; (32e8 <system_clock_init+0x178>)
    327e:	2300      	movs	r3, #0
    3280:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    3282:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3284:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3286:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    3288:	a901      	add	r1, sp, #4
    328a:	2201      	movs	r2, #1
    328c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    328e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    3290:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    3292:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3294:	3307      	adds	r3, #7
    3296:	700b      	strb	r3, [r1, #0]
    3298:	2000      	movs	r0, #0
    329a:	4b10      	ldr	r3, [pc, #64]	; (32dc <system_clock_init+0x16c>)
    329c:	4798      	blx	r3
    329e:	2000      	movs	r0, #0
    32a0:	4b0f      	ldr	r3, [pc, #60]	; (32e0 <system_clock_init+0x170>)
    32a2:	4798      	blx	r3
#endif
}
    32a4:	b00d      	add	sp, #52	; 0x34
    32a6:	bc0c      	pop	{r2, r3}
    32a8:	4690      	mov	r8, r2
    32aa:	4699      	mov	r9, r3
    32ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    32ae:	3b20      	subs	r3, #32
    32b0:	e7a1      	b.n	31f6 <system_clock_init+0x86>
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	40000800 	.word	0x40000800
    32b8:	41004000 	.word	0x41004000
    32bc:	00003525 	.word	0x00003525
    32c0:	00806024 	.word	0x00806024
    32c4:	ff80ffff 	.word	0xff80ffff
    32c8:	00002fcd 	.word	0x00002fcd
    32cc:	000030c9 	.word	0x000030c9
    32d0:	00003049 	.word	0x00003049
    32d4:	00002f91 	.word	0x00002f91
    32d8:	000032ed 	.word	0x000032ed
    32dc:	00003311 	.word	0x00003311
    32e0:	000033c9 	.word	0x000033c9
    32e4:	00003499 	.word	0x00003499
    32e8:	40000400 	.word	0x40000400

000032ec <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    32ec:	4a06      	ldr	r2, [pc, #24]	; (3308 <system_gclk_init+0x1c>)
    32ee:	6993      	ldr	r3, [r2, #24]
    32f0:	2108      	movs	r1, #8
    32f2:	430b      	orrs	r3, r1
    32f4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    32f6:	2201      	movs	r2, #1
    32f8:	4b04      	ldr	r3, [pc, #16]	; (330c <system_gclk_init+0x20>)
    32fa:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    32fc:	0019      	movs	r1, r3
    32fe:	780b      	ldrb	r3, [r1, #0]
    3300:	4213      	tst	r3, r2
    3302:	d1fc      	bne.n	32fe <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3304:	4770      	bx	lr
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	40000400 	.word	0x40000400
    330c:	40000c00 	.word	0x40000c00

00003310 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3310:	b570      	push	{r4, r5, r6, lr}
    3312:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3314:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3316:	780d      	ldrb	r5, [r1, #0]
    3318:	022d      	lsls	r5, r5, #8
    331a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    331c:	784b      	ldrb	r3, [r1, #1]
    331e:	2b00      	cmp	r3, #0
    3320:	d002      	beq.n	3328 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3322:	2380      	movs	r3, #128	; 0x80
    3324:	02db      	lsls	r3, r3, #11
    3326:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3328:	7a4b      	ldrb	r3, [r1, #9]
    332a:	2b00      	cmp	r3, #0
    332c:	d002      	beq.n	3334 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    332e:	2380      	movs	r3, #128	; 0x80
    3330:	031b      	lsls	r3, r3, #12
    3332:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3334:	6848      	ldr	r0, [r1, #4]
    3336:	2801      	cmp	r0, #1
    3338:	d910      	bls.n	335c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    333a:	1e43      	subs	r3, r0, #1
    333c:	4218      	tst	r0, r3
    333e:	d134      	bne.n	33aa <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3340:	2802      	cmp	r0, #2
    3342:	d930      	bls.n	33a6 <system_gclk_gen_set_config+0x96>
    3344:	2302      	movs	r3, #2
    3346:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3348:	3201      	adds	r2, #1
						mask <<= 1) {
    334a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    334c:	4298      	cmp	r0, r3
    334e:	d8fb      	bhi.n	3348 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3350:	0212      	lsls	r2, r2, #8
    3352:	4332      	orrs	r2, r6
    3354:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3356:	2380      	movs	r3, #128	; 0x80
    3358:	035b      	lsls	r3, r3, #13
    335a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    335c:	7a0b      	ldrb	r3, [r1, #8]
    335e:	2b00      	cmp	r3, #0
    3360:	d002      	beq.n	3368 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3362:	2380      	movs	r3, #128	; 0x80
    3364:	039b      	lsls	r3, r3, #14
    3366:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3368:	4a13      	ldr	r2, [pc, #76]	; (33b8 <system_gclk_gen_set_config+0xa8>)
    336a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    336c:	b25b      	sxtb	r3, r3
    336e:	2b00      	cmp	r3, #0
    3370:	dbfb      	blt.n	336a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    3372:	4b12      	ldr	r3, [pc, #72]	; (33bc <system_gclk_gen_set_config+0xac>)
    3374:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3376:	4b12      	ldr	r3, [pc, #72]	; (33c0 <system_gclk_gen_set_config+0xb0>)
    3378:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    337a:	4a0f      	ldr	r2, [pc, #60]	; (33b8 <system_gclk_gen_set_config+0xa8>)
    337c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    337e:	b25b      	sxtb	r3, r3
    3380:	2b00      	cmp	r3, #0
    3382:	dbfb      	blt.n	337c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3384:	4b0c      	ldr	r3, [pc, #48]	; (33b8 <system_gclk_gen_set_config+0xa8>)
    3386:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3388:	001a      	movs	r2, r3
    338a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    338c:	b25b      	sxtb	r3, r3
    338e:	2b00      	cmp	r3, #0
    3390:	dbfb      	blt.n	338a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3392:	4a09      	ldr	r2, [pc, #36]	; (33b8 <system_gclk_gen_set_config+0xa8>)
    3394:	6853      	ldr	r3, [r2, #4]
    3396:	2180      	movs	r1, #128	; 0x80
    3398:	0249      	lsls	r1, r1, #9
    339a:	400b      	ands	r3, r1
    339c:	431d      	orrs	r5, r3
    339e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    33a0:	4b08      	ldr	r3, [pc, #32]	; (33c4 <system_gclk_gen_set_config+0xb4>)
    33a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    33a4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    33a6:	2200      	movs	r2, #0
    33a8:	e7d2      	b.n	3350 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    33aa:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    33ac:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    33ae:	2380      	movs	r3, #128	; 0x80
    33b0:	029b      	lsls	r3, r3, #10
    33b2:	431d      	orrs	r5, r3
    33b4:	e7d2      	b.n	335c <system_gclk_gen_set_config+0x4c>
    33b6:	46c0      	nop			; (mov r8, r8)
    33b8:	40000c00 	.word	0x40000c00
    33bc:	00002e91 	.word	0x00002e91
    33c0:	40000c08 	.word	0x40000c08
    33c4:	00002ed1 	.word	0x00002ed1

000033c8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    33c8:	b510      	push	{r4, lr}
    33ca:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33cc:	4a0b      	ldr	r2, [pc, #44]	; (33fc <system_gclk_gen_enable+0x34>)
    33ce:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    33d0:	b25b      	sxtb	r3, r3
    33d2:	2b00      	cmp	r3, #0
    33d4:	dbfb      	blt.n	33ce <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    33d6:	4b0a      	ldr	r3, [pc, #40]	; (3400 <system_gclk_gen_enable+0x38>)
    33d8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    33da:	4b0a      	ldr	r3, [pc, #40]	; (3404 <system_gclk_gen_enable+0x3c>)
    33dc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33de:	4a07      	ldr	r2, [pc, #28]	; (33fc <system_gclk_gen_enable+0x34>)
    33e0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    33e2:	b25b      	sxtb	r3, r3
    33e4:	2b00      	cmp	r3, #0
    33e6:	dbfb      	blt.n	33e0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    33e8:	4a04      	ldr	r2, [pc, #16]	; (33fc <system_gclk_gen_enable+0x34>)
    33ea:	6851      	ldr	r1, [r2, #4]
    33ec:	2380      	movs	r3, #128	; 0x80
    33ee:	025b      	lsls	r3, r3, #9
    33f0:	430b      	orrs	r3, r1
    33f2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    33f4:	4b04      	ldr	r3, [pc, #16]	; (3408 <system_gclk_gen_enable+0x40>)
    33f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    33f8:	bd10      	pop	{r4, pc}
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	40000c00 	.word	0x40000c00
    3400:	00002e91 	.word	0x00002e91
    3404:	40000c04 	.word	0x40000c04
    3408:	00002ed1 	.word	0x00002ed1

0000340c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    340c:	b570      	push	{r4, r5, r6, lr}
    340e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3410:	4a1a      	ldr	r2, [pc, #104]	; (347c <system_gclk_gen_get_hz+0x70>)
    3412:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3414:	b25b      	sxtb	r3, r3
    3416:	2b00      	cmp	r3, #0
    3418:	dbfb      	blt.n	3412 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    341a:	4b19      	ldr	r3, [pc, #100]	; (3480 <system_gclk_gen_get_hz+0x74>)
    341c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    341e:	4b19      	ldr	r3, [pc, #100]	; (3484 <system_gclk_gen_get_hz+0x78>)
    3420:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3422:	4a16      	ldr	r2, [pc, #88]	; (347c <system_gclk_gen_get_hz+0x70>)
    3424:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3426:	b25b      	sxtb	r3, r3
    3428:	2b00      	cmp	r3, #0
    342a:	dbfb      	blt.n	3424 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    342c:	4e13      	ldr	r6, [pc, #76]	; (347c <system_gclk_gen_get_hz+0x70>)
    342e:	6870      	ldr	r0, [r6, #4]
    3430:	04c0      	lsls	r0, r0, #19
    3432:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3434:	4b14      	ldr	r3, [pc, #80]	; (3488 <system_gclk_gen_get_hz+0x7c>)
    3436:	4798      	blx	r3
    3438:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    343a:	4b12      	ldr	r3, [pc, #72]	; (3484 <system_gclk_gen_get_hz+0x78>)
    343c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    343e:	6876      	ldr	r6, [r6, #4]
    3440:	02f6      	lsls	r6, r6, #11
    3442:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3444:	4b11      	ldr	r3, [pc, #68]	; (348c <system_gclk_gen_get_hz+0x80>)
    3446:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3448:	4a0c      	ldr	r2, [pc, #48]	; (347c <system_gclk_gen_get_hz+0x70>)
    344a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    344c:	b25b      	sxtb	r3, r3
    344e:	2b00      	cmp	r3, #0
    3450:	dbfb      	blt.n	344a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3452:	4b0a      	ldr	r3, [pc, #40]	; (347c <system_gclk_gen_get_hz+0x70>)
    3454:	689c      	ldr	r4, [r3, #8]
    3456:	0224      	lsls	r4, r4, #8
    3458:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    345a:	4b0d      	ldr	r3, [pc, #52]	; (3490 <system_gclk_gen_get_hz+0x84>)
    345c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    345e:	2e00      	cmp	r6, #0
    3460:	d107      	bne.n	3472 <system_gclk_gen_get_hz+0x66>
    3462:	2c01      	cmp	r4, #1
    3464:	d907      	bls.n	3476 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3466:	0021      	movs	r1, r4
    3468:	0028      	movs	r0, r5
    346a:	4b0a      	ldr	r3, [pc, #40]	; (3494 <system_gclk_gen_get_hz+0x88>)
    346c:	4798      	blx	r3
    346e:	0005      	movs	r5, r0
    3470:	e001      	b.n	3476 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3472:	3401      	adds	r4, #1
    3474:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3476:	0028      	movs	r0, r5
    3478:	bd70      	pop	{r4, r5, r6, pc}
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	40000c00 	.word	0x40000c00
    3480:	00002e91 	.word	0x00002e91
    3484:	40000c04 	.word	0x40000c04
    3488:	00002f01 	.word	0x00002f01
    348c:	40000c08 	.word	0x40000c08
    3490:	00002ed1 	.word	0x00002ed1
    3494:	000037f9 	.word	0x000037f9

00003498 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3498:	b510      	push	{r4, lr}
    349a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    349c:	4b06      	ldr	r3, [pc, #24]	; (34b8 <system_gclk_chan_enable+0x20>)
    349e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    34a0:	4b06      	ldr	r3, [pc, #24]	; (34bc <system_gclk_chan_enable+0x24>)
    34a2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    34a4:	4a06      	ldr	r2, [pc, #24]	; (34c0 <system_gclk_chan_enable+0x28>)
    34a6:	8853      	ldrh	r3, [r2, #2]
    34a8:	2180      	movs	r1, #128	; 0x80
    34aa:	01c9      	lsls	r1, r1, #7
    34ac:	430b      	orrs	r3, r1
    34ae:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    34b0:	4b04      	ldr	r3, [pc, #16]	; (34c4 <system_gclk_chan_enable+0x2c>)
    34b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    34b4:	bd10      	pop	{r4, pc}
    34b6:	46c0      	nop			; (mov r8, r8)
    34b8:	00002e91 	.word	0x00002e91
    34bc:	40000c02 	.word	0x40000c02
    34c0:	40000c00 	.word	0x40000c00
    34c4:	00002ed1 	.word	0x00002ed1

000034c8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    34c8:	b510      	push	{r4, lr}
    34ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    34cc:	4b0f      	ldr	r3, [pc, #60]	; (350c <system_gclk_chan_disable+0x44>)
    34ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    34d0:	4b0f      	ldr	r3, [pc, #60]	; (3510 <system_gclk_chan_disable+0x48>)
    34d2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    34d4:	4a0f      	ldr	r2, [pc, #60]	; (3514 <system_gclk_chan_disable+0x4c>)
    34d6:	8853      	ldrh	r3, [r2, #2]
    34d8:	051b      	lsls	r3, r3, #20
    34da:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    34dc:	8853      	ldrh	r3, [r2, #2]
    34de:	490e      	ldr	r1, [pc, #56]	; (3518 <system_gclk_chan_disable+0x50>)
    34e0:	400b      	ands	r3, r1
    34e2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    34e4:	8853      	ldrh	r3, [r2, #2]
    34e6:	490d      	ldr	r1, [pc, #52]	; (351c <system_gclk_chan_disable+0x54>)
    34e8:	400b      	ands	r3, r1
    34ea:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    34ec:	0011      	movs	r1, r2
    34ee:	2280      	movs	r2, #128	; 0x80
    34f0:	01d2      	lsls	r2, r2, #7
    34f2:	884b      	ldrh	r3, [r1, #2]
    34f4:	4213      	tst	r3, r2
    34f6:	d1fc      	bne.n	34f2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    34f8:	4906      	ldr	r1, [pc, #24]	; (3514 <system_gclk_chan_disable+0x4c>)
    34fa:	884a      	ldrh	r2, [r1, #2]
    34fc:	0203      	lsls	r3, r0, #8
    34fe:	4806      	ldr	r0, [pc, #24]	; (3518 <system_gclk_chan_disable+0x50>)
    3500:	4002      	ands	r2, r0
    3502:	4313      	orrs	r3, r2
    3504:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3506:	4b06      	ldr	r3, [pc, #24]	; (3520 <system_gclk_chan_disable+0x58>)
    3508:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    350a:	bd10      	pop	{r4, pc}
    350c:	00002e91 	.word	0x00002e91
    3510:	40000c02 	.word	0x40000c02
    3514:	40000c00 	.word	0x40000c00
    3518:	fffff0ff 	.word	0xfffff0ff
    351c:	ffffbfff 	.word	0xffffbfff
    3520:	00002ed1 	.word	0x00002ed1

00003524 <system_gclk_chan_set_config>:
{
    3524:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3526:	780c      	ldrb	r4, [r1, #0]
    3528:	0224      	lsls	r4, r4, #8
    352a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    352c:	4b02      	ldr	r3, [pc, #8]	; (3538 <system_gclk_chan_set_config+0x14>)
    352e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3530:	b2a4      	uxth	r4, r4
    3532:	4b02      	ldr	r3, [pc, #8]	; (353c <system_gclk_chan_set_config+0x18>)
    3534:	805c      	strh	r4, [r3, #2]
}
    3536:	bd10      	pop	{r4, pc}
    3538:	000034c9 	.word	0x000034c9
    353c:	40000c00 	.word	0x40000c00

00003540 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3540:	b510      	push	{r4, lr}
    3542:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3544:	4b06      	ldr	r3, [pc, #24]	; (3560 <system_gclk_chan_get_hz+0x20>)
    3546:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3548:	4b06      	ldr	r3, [pc, #24]	; (3564 <system_gclk_chan_get_hz+0x24>)
    354a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    354c:	4b06      	ldr	r3, [pc, #24]	; (3568 <system_gclk_chan_get_hz+0x28>)
    354e:	885c      	ldrh	r4, [r3, #2]
    3550:	0524      	lsls	r4, r4, #20
    3552:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3554:	4b05      	ldr	r3, [pc, #20]	; (356c <system_gclk_chan_get_hz+0x2c>)
    3556:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3558:	0020      	movs	r0, r4
    355a:	4b05      	ldr	r3, [pc, #20]	; (3570 <system_gclk_chan_get_hz+0x30>)
    355c:	4798      	blx	r3
}
    355e:	bd10      	pop	{r4, pc}
    3560:	00002e91 	.word	0x00002e91
    3564:	40000c02 	.word	0x40000c02
    3568:	40000c00 	.word	0x40000c00
    356c:	00002ed1 	.word	0x00002ed1
    3570:	0000340d 	.word	0x0000340d

00003574 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3574:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3576:	78d3      	ldrb	r3, [r2, #3]
    3578:	2b00      	cmp	r3, #0
    357a:	d135      	bne.n	35e8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    357c:	7813      	ldrb	r3, [r2, #0]
    357e:	2b80      	cmp	r3, #128	; 0x80
    3580:	d029      	beq.n	35d6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3582:	061b      	lsls	r3, r3, #24
    3584:	2480      	movs	r4, #128	; 0x80
    3586:	0264      	lsls	r4, r4, #9
    3588:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    358a:	7854      	ldrb	r4, [r2, #1]
    358c:	2502      	movs	r5, #2
    358e:	43ac      	bics	r4, r5
    3590:	d106      	bne.n	35a0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3592:	7894      	ldrb	r4, [r2, #2]
    3594:	2c00      	cmp	r4, #0
    3596:	d120      	bne.n	35da <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3598:	2480      	movs	r4, #128	; 0x80
    359a:	02a4      	lsls	r4, r4, #10
    359c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    359e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    35a0:	7854      	ldrb	r4, [r2, #1]
    35a2:	3c01      	subs	r4, #1
    35a4:	2c01      	cmp	r4, #1
    35a6:	d91c      	bls.n	35e2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    35a8:	040d      	lsls	r5, r1, #16
    35aa:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    35ac:	24a0      	movs	r4, #160	; 0xa0
    35ae:	05e4      	lsls	r4, r4, #23
    35b0:	432c      	orrs	r4, r5
    35b2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35b4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    35b6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    35b8:	24d0      	movs	r4, #208	; 0xd0
    35ba:	0624      	lsls	r4, r4, #24
    35bc:	432c      	orrs	r4, r5
    35be:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35c0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    35c2:	78d4      	ldrb	r4, [r2, #3]
    35c4:	2c00      	cmp	r4, #0
    35c6:	d122      	bne.n	360e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    35c8:	035b      	lsls	r3, r3, #13
    35ca:	d51c      	bpl.n	3606 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    35cc:	7893      	ldrb	r3, [r2, #2]
    35ce:	2b01      	cmp	r3, #1
    35d0:	d01e      	beq.n	3610 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    35d2:	6141      	str	r1, [r0, #20]
    35d4:	e017      	b.n	3606 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    35d6:	2300      	movs	r3, #0
    35d8:	e7d7      	b.n	358a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    35da:	24c0      	movs	r4, #192	; 0xc0
    35dc:	02e4      	lsls	r4, r4, #11
    35de:	4323      	orrs	r3, r4
    35e0:	e7dd      	b.n	359e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    35e2:	4c0d      	ldr	r4, [pc, #52]	; (3618 <_system_pinmux_config+0xa4>)
    35e4:	4023      	ands	r3, r4
    35e6:	e7df      	b.n	35a8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    35e8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    35ea:	040c      	lsls	r4, r1, #16
    35ec:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    35ee:	23a0      	movs	r3, #160	; 0xa0
    35f0:	05db      	lsls	r3, r3, #23
    35f2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35f4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    35f6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    35f8:	23d0      	movs	r3, #208	; 0xd0
    35fa:	061b      	lsls	r3, r3, #24
    35fc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35fe:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3600:	78d3      	ldrb	r3, [r2, #3]
    3602:	2b00      	cmp	r3, #0
    3604:	d103      	bne.n	360e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3606:	7853      	ldrb	r3, [r2, #1]
    3608:	3b01      	subs	r3, #1
    360a:	2b01      	cmp	r3, #1
    360c:	d902      	bls.n	3614 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    360e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3610:	6181      	str	r1, [r0, #24]
    3612:	e7f8      	b.n	3606 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3614:	6081      	str	r1, [r0, #8]
}
    3616:	e7fa      	b.n	360e <_system_pinmux_config+0x9a>
    3618:	fffbffff 	.word	0xfffbffff

0000361c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    361c:	b510      	push	{r4, lr}
    361e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3620:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3622:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3624:	2900      	cmp	r1, #0
    3626:	d104      	bne.n	3632 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3628:	0943      	lsrs	r3, r0, #5
    362a:	01db      	lsls	r3, r3, #7
    362c:	4905      	ldr	r1, [pc, #20]	; (3644 <system_pinmux_pin_set_config+0x28>)
    362e:	468c      	mov	ip, r1
    3630:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3632:	241f      	movs	r4, #31
    3634:	4020      	ands	r0, r4
    3636:	2101      	movs	r1, #1
    3638:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    363a:	0018      	movs	r0, r3
    363c:	4b02      	ldr	r3, [pc, #8]	; (3648 <system_pinmux_pin_set_config+0x2c>)
    363e:	4798      	blx	r3
}
    3640:	bd10      	pop	{r4, pc}
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	41004400 	.word	0x41004400
    3648:	00003575 	.word	0x00003575

0000364c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    364c:	4770      	bx	lr
	...

00003650 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3650:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3652:	4b05      	ldr	r3, [pc, #20]	; (3668 <system_init+0x18>)
    3654:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3656:	4b05      	ldr	r3, [pc, #20]	; (366c <system_init+0x1c>)
    3658:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    365a:	4b05      	ldr	r3, [pc, #20]	; (3670 <system_init+0x20>)
    365c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    365e:	4b05      	ldr	r3, [pc, #20]	; (3674 <system_init+0x24>)
    3660:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3662:	4b05      	ldr	r3, [pc, #20]	; (3678 <system_init+0x28>)
    3664:	4798      	blx	r3
}
    3666:	bd10      	pop	{r4, pc}
    3668:	00003171 	.word	0x00003171
    366c:	00002e8d 	.word	0x00002e8d
    3670:	0000364d 	.word	0x0000364d
    3674:	0000364d 	.word	0x0000364d
    3678:	0000364d 	.word	0x0000364d

0000367c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    367c:	e7fe      	b.n	367c <Dummy_Handler>
	...

00003680 <Reset_Handler>:
{
    3680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3682:	4a2a      	ldr	r2, [pc, #168]	; (372c <Reset_Handler+0xac>)
    3684:	4b2a      	ldr	r3, [pc, #168]	; (3730 <Reset_Handler+0xb0>)
    3686:	429a      	cmp	r2, r3
    3688:	d011      	beq.n	36ae <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    368a:	001a      	movs	r2, r3
    368c:	4b29      	ldr	r3, [pc, #164]	; (3734 <Reset_Handler+0xb4>)
    368e:	429a      	cmp	r2, r3
    3690:	d20d      	bcs.n	36ae <Reset_Handler+0x2e>
    3692:	4a29      	ldr	r2, [pc, #164]	; (3738 <Reset_Handler+0xb8>)
    3694:	3303      	adds	r3, #3
    3696:	1a9b      	subs	r3, r3, r2
    3698:	089b      	lsrs	r3, r3, #2
    369a:	3301      	adds	r3, #1
    369c:	009b      	lsls	r3, r3, #2
    369e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    36a0:	4823      	ldr	r0, [pc, #140]	; (3730 <Reset_Handler+0xb0>)
    36a2:	4922      	ldr	r1, [pc, #136]	; (372c <Reset_Handler+0xac>)
    36a4:	588c      	ldr	r4, [r1, r2]
    36a6:	5084      	str	r4, [r0, r2]
    36a8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    36aa:	429a      	cmp	r2, r3
    36ac:	d1fa      	bne.n	36a4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    36ae:	4a23      	ldr	r2, [pc, #140]	; (373c <Reset_Handler+0xbc>)
    36b0:	4b23      	ldr	r3, [pc, #140]	; (3740 <Reset_Handler+0xc0>)
    36b2:	429a      	cmp	r2, r3
    36b4:	d20a      	bcs.n	36cc <Reset_Handler+0x4c>
    36b6:	43d3      	mvns	r3, r2
    36b8:	4921      	ldr	r1, [pc, #132]	; (3740 <Reset_Handler+0xc0>)
    36ba:	185b      	adds	r3, r3, r1
    36bc:	2103      	movs	r1, #3
    36be:	438b      	bics	r3, r1
    36c0:	3304      	adds	r3, #4
    36c2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    36c4:	2100      	movs	r1, #0
    36c6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    36c8:	4293      	cmp	r3, r2
    36ca:	d1fc      	bne.n	36c6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    36cc:	4a1d      	ldr	r2, [pc, #116]	; (3744 <Reset_Handler+0xc4>)
    36ce:	21ff      	movs	r1, #255	; 0xff
    36d0:	4b1d      	ldr	r3, [pc, #116]	; (3748 <Reset_Handler+0xc8>)
    36d2:	438b      	bics	r3, r1
    36d4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    36d6:	39fd      	subs	r1, #253	; 0xfd
    36d8:	2390      	movs	r3, #144	; 0x90
    36da:	005b      	lsls	r3, r3, #1
    36dc:	4a1b      	ldr	r2, [pc, #108]	; (374c <Reset_Handler+0xcc>)
    36de:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    36e0:	4a1b      	ldr	r2, [pc, #108]	; (3750 <Reset_Handler+0xd0>)
    36e2:	78d3      	ldrb	r3, [r2, #3]
    36e4:	2503      	movs	r5, #3
    36e6:	43ab      	bics	r3, r5
    36e8:	2402      	movs	r4, #2
    36ea:	4323      	orrs	r3, r4
    36ec:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    36ee:	78d3      	ldrb	r3, [r2, #3]
    36f0:	270c      	movs	r7, #12
    36f2:	43bb      	bics	r3, r7
    36f4:	2608      	movs	r6, #8
    36f6:	4333      	orrs	r3, r6
    36f8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    36fa:	4b16      	ldr	r3, [pc, #88]	; (3754 <Reset_Handler+0xd4>)
    36fc:	7b98      	ldrb	r0, [r3, #14]
    36fe:	2230      	movs	r2, #48	; 0x30
    3700:	4390      	bics	r0, r2
    3702:	2220      	movs	r2, #32
    3704:	4310      	orrs	r0, r2
    3706:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3708:	7b99      	ldrb	r1, [r3, #14]
    370a:	43b9      	bics	r1, r7
    370c:	4331      	orrs	r1, r6
    370e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3710:	7b9a      	ldrb	r2, [r3, #14]
    3712:	43aa      	bics	r2, r5
    3714:	4322      	orrs	r2, r4
    3716:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3718:	4a0f      	ldr	r2, [pc, #60]	; (3758 <Reset_Handler+0xd8>)
    371a:	6853      	ldr	r3, [r2, #4]
    371c:	2180      	movs	r1, #128	; 0x80
    371e:	430b      	orrs	r3, r1
    3720:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3722:	4b0e      	ldr	r3, [pc, #56]	; (375c <Reset_Handler+0xdc>)
    3724:	4798      	blx	r3
        main();
    3726:	4b0e      	ldr	r3, [pc, #56]	; (3760 <Reset_Handler+0xe0>)
    3728:	4798      	blx	r3
    372a:	e7fe      	b.n	372a <Reset_Handler+0xaa>
    372c:	00005618 	.word	0x00005618
    3730:	20000000 	.word	0x20000000
    3734:	200000bc 	.word	0x200000bc
    3738:	20000004 	.word	0x20000004
    373c:	200000bc 	.word	0x200000bc
    3740:	200011fc 	.word	0x200011fc
    3744:	e000ed00 	.word	0xe000ed00
    3748:	00000000 	.word	0x00000000
    374c:	41007000 	.word	0x41007000
    3750:	41005000 	.word	0x41005000
    3754:	41004800 	.word	0x41004800
    3758:	41004000 	.word	0x41004000
    375c:	0000522d 	.word	0x0000522d
    3760:	00003789 	.word	0x00003789

00003764 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3764:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3766:	4a06      	ldr	r2, [pc, #24]	; (3780 <_sbrk+0x1c>)
    3768:	6812      	ldr	r2, [r2, #0]
    376a:	2a00      	cmp	r2, #0
    376c:	d004      	beq.n	3778 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    376e:	4a04      	ldr	r2, [pc, #16]	; (3780 <_sbrk+0x1c>)
    3770:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3772:	18c3      	adds	r3, r0, r3
    3774:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3776:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3778:	4902      	ldr	r1, [pc, #8]	; (3784 <_sbrk+0x20>)
    377a:	4a01      	ldr	r2, [pc, #4]	; (3780 <_sbrk+0x1c>)
    377c:	6011      	str	r1, [r2, #0]
    377e:	e7f6      	b.n	376e <_sbrk+0xa>
    3780:	20000de4 	.word	0x20000de4
    3784:	20003200 	.word	0x20003200

00003788 <main>:
};
*/ 


int main (void)
{
    3788:	b570      	push	{r4, r5, r6, lr}
	system_init();
    378a:	4b0f      	ldr	r3, [pc, #60]	; (37c8 <main+0x40>)
    378c:	4798      	blx	r3
	delay_init();
    378e:	4b0f      	ldr	r3, [pc, #60]	; (37cc <main+0x44>)
    3790:	4798      	blx	r3
	configureSendInfo();
    3792:	4b0f      	ldr	r3, [pc, #60]	; (37d0 <main+0x48>)
    3794:	4798      	blx	r3
	initializeI2CModules();
    3796:	4b0f      	ldr	r3, [pc, #60]	; (37d4 <main+0x4c>)
    3798:	4798      	blx	r3
	delay_cycles_ms(500);
    379a:	20fa      	movs	r0, #250	; 0xfa
    379c:	0040      	lsls	r0, r0, #1
    379e:	4b0e      	ldr	r3, [pc, #56]	; (37d8 <main+0x50>)
    37a0:	4798      	blx	r3
	//enableServoTCC();
	//USART -- 115200
	serialInit();
    37a2:	4b0e      	ldr	r3, [pc, #56]	; (37dc <main+0x54>)
    37a4:	4798      	blx	r3
	configureInputOutputDetection();
    37a6:	4b0e      	ldr	r3, [pc, #56]	; (37e0 <main+0x58>)
    37a8:	4798      	blx	r3
	while(1)
	{
		
		checkOutputsInputs();
    37aa:	4e0e      	ldr	r6, [pc, #56]	; (37e4 <main+0x5c>)
		checkSetOutputs();
    37ac:	4d0e      	ldr	r5, [pc, #56]	; (37e8 <main+0x60>)
		readSensors();
    37ae:	4c0f      	ldr	r4, [pc, #60]	; (37ec <main+0x64>)
		checkOutputsInputs();
    37b0:	47b0      	blx	r6
		checkSetOutputs();
    37b2:	47a8      	blx	r5
		readSensors();
    37b4:	47a0      	blx	r4
		//setOutputs();
		checkUART();
    37b6:	4b0e      	ldr	r3, [pc, #56]	; (37f0 <main+0x68>)
    37b8:	4798      	blx	r3
		delay_ms(10);
    37ba:	200a      	movs	r0, #10
    37bc:	4b06      	ldr	r3, [pc, #24]	; (37d8 <main+0x50>)
    37be:	4798      	blx	r3
		checkSendOutputs();
    37c0:	4b0c      	ldr	r3, [pc, #48]	; (37f4 <main+0x6c>)
    37c2:	4798      	blx	r3
    37c4:	e7f4      	b.n	37b0 <main+0x28>
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	00003651 	.word	0x00003651
    37cc:	00001719 	.word	0x00001719
    37d0:	00001705 	.word	0x00001705
    37d4:	000010fd 	.word	0x000010fd
    37d8:	00001759 	.word	0x00001759
    37dc:	00002a7d 	.word	0x00002a7d
    37e0:	00002e81 	.word	0x00002e81
    37e4:	00002e65 	.word	0x00002e65
    37e8:	00000ea1 	.word	0x00000ea1
    37ec:	000029b9 	.word	0x000029b9
    37f0:	000028e5 	.word	0x000028e5
    37f4:	000014c1 	.word	0x000014c1

000037f8 <__udivsi3>:
    37f8:	2200      	movs	r2, #0
    37fa:	0843      	lsrs	r3, r0, #1
    37fc:	428b      	cmp	r3, r1
    37fe:	d374      	bcc.n	38ea <__udivsi3+0xf2>
    3800:	0903      	lsrs	r3, r0, #4
    3802:	428b      	cmp	r3, r1
    3804:	d35f      	bcc.n	38c6 <__udivsi3+0xce>
    3806:	0a03      	lsrs	r3, r0, #8
    3808:	428b      	cmp	r3, r1
    380a:	d344      	bcc.n	3896 <__udivsi3+0x9e>
    380c:	0b03      	lsrs	r3, r0, #12
    380e:	428b      	cmp	r3, r1
    3810:	d328      	bcc.n	3864 <__udivsi3+0x6c>
    3812:	0c03      	lsrs	r3, r0, #16
    3814:	428b      	cmp	r3, r1
    3816:	d30d      	bcc.n	3834 <__udivsi3+0x3c>
    3818:	22ff      	movs	r2, #255	; 0xff
    381a:	0209      	lsls	r1, r1, #8
    381c:	ba12      	rev	r2, r2
    381e:	0c03      	lsrs	r3, r0, #16
    3820:	428b      	cmp	r3, r1
    3822:	d302      	bcc.n	382a <__udivsi3+0x32>
    3824:	1212      	asrs	r2, r2, #8
    3826:	0209      	lsls	r1, r1, #8
    3828:	d065      	beq.n	38f6 <__udivsi3+0xfe>
    382a:	0b03      	lsrs	r3, r0, #12
    382c:	428b      	cmp	r3, r1
    382e:	d319      	bcc.n	3864 <__udivsi3+0x6c>
    3830:	e000      	b.n	3834 <__udivsi3+0x3c>
    3832:	0a09      	lsrs	r1, r1, #8
    3834:	0bc3      	lsrs	r3, r0, #15
    3836:	428b      	cmp	r3, r1
    3838:	d301      	bcc.n	383e <__udivsi3+0x46>
    383a:	03cb      	lsls	r3, r1, #15
    383c:	1ac0      	subs	r0, r0, r3
    383e:	4152      	adcs	r2, r2
    3840:	0b83      	lsrs	r3, r0, #14
    3842:	428b      	cmp	r3, r1
    3844:	d301      	bcc.n	384a <__udivsi3+0x52>
    3846:	038b      	lsls	r3, r1, #14
    3848:	1ac0      	subs	r0, r0, r3
    384a:	4152      	adcs	r2, r2
    384c:	0b43      	lsrs	r3, r0, #13
    384e:	428b      	cmp	r3, r1
    3850:	d301      	bcc.n	3856 <__udivsi3+0x5e>
    3852:	034b      	lsls	r3, r1, #13
    3854:	1ac0      	subs	r0, r0, r3
    3856:	4152      	adcs	r2, r2
    3858:	0b03      	lsrs	r3, r0, #12
    385a:	428b      	cmp	r3, r1
    385c:	d301      	bcc.n	3862 <__udivsi3+0x6a>
    385e:	030b      	lsls	r3, r1, #12
    3860:	1ac0      	subs	r0, r0, r3
    3862:	4152      	adcs	r2, r2
    3864:	0ac3      	lsrs	r3, r0, #11
    3866:	428b      	cmp	r3, r1
    3868:	d301      	bcc.n	386e <__udivsi3+0x76>
    386a:	02cb      	lsls	r3, r1, #11
    386c:	1ac0      	subs	r0, r0, r3
    386e:	4152      	adcs	r2, r2
    3870:	0a83      	lsrs	r3, r0, #10
    3872:	428b      	cmp	r3, r1
    3874:	d301      	bcc.n	387a <__udivsi3+0x82>
    3876:	028b      	lsls	r3, r1, #10
    3878:	1ac0      	subs	r0, r0, r3
    387a:	4152      	adcs	r2, r2
    387c:	0a43      	lsrs	r3, r0, #9
    387e:	428b      	cmp	r3, r1
    3880:	d301      	bcc.n	3886 <__udivsi3+0x8e>
    3882:	024b      	lsls	r3, r1, #9
    3884:	1ac0      	subs	r0, r0, r3
    3886:	4152      	adcs	r2, r2
    3888:	0a03      	lsrs	r3, r0, #8
    388a:	428b      	cmp	r3, r1
    388c:	d301      	bcc.n	3892 <__udivsi3+0x9a>
    388e:	020b      	lsls	r3, r1, #8
    3890:	1ac0      	subs	r0, r0, r3
    3892:	4152      	adcs	r2, r2
    3894:	d2cd      	bcs.n	3832 <__udivsi3+0x3a>
    3896:	09c3      	lsrs	r3, r0, #7
    3898:	428b      	cmp	r3, r1
    389a:	d301      	bcc.n	38a0 <__udivsi3+0xa8>
    389c:	01cb      	lsls	r3, r1, #7
    389e:	1ac0      	subs	r0, r0, r3
    38a0:	4152      	adcs	r2, r2
    38a2:	0983      	lsrs	r3, r0, #6
    38a4:	428b      	cmp	r3, r1
    38a6:	d301      	bcc.n	38ac <__udivsi3+0xb4>
    38a8:	018b      	lsls	r3, r1, #6
    38aa:	1ac0      	subs	r0, r0, r3
    38ac:	4152      	adcs	r2, r2
    38ae:	0943      	lsrs	r3, r0, #5
    38b0:	428b      	cmp	r3, r1
    38b2:	d301      	bcc.n	38b8 <__udivsi3+0xc0>
    38b4:	014b      	lsls	r3, r1, #5
    38b6:	1ac0      	subs	r0, r0, r3
    38b8:	4152      	adcs	r2, r2
    38ba:	0903      	lsrs	r3, r0, #4
    38bc:	428b      	cmp	r3, r1
    38be:	d301      	bcc.n	38c4 <__udivsi3+0xcc>
    38c0:	010b      	lsls	r3, r1, #4
    38c2:	1ac0      	subs	r0, r0, r3
    38c4:	4152      	adcs	r2, r2
    38c6:	08c3      	lsrs	r3, r0, #3
    38c8:	428b      	cmp	r3, r1
    38ca:	d301      	bcc.n	38d0 <__udivsi3+0xd8>
    38cc:	00cb      	lsls	r3, r1, #3
    38ce:	1ac0      	subs	r0, r0, r3
    38d0:	4152      	adcs	r2, r2
    38d2:	0883      	lsrs	r3, r0, #2
    38d4:	428b      	cmp	r3, r1
    38d6:	d301      	bcc.n	38dc <__udivsi3+0xe4>
    38d8:	008b      	lsls	r3, r1, #2
    38da:	1ac0      	subs	r0, r0, r3
    38dc:	4152      	adcs	r2, r2
    38de:	0843      	lsrs	r3, r0, #1
    38e0:	428b      	cmp	r3, r1
    38e2:	d301      	bcc.n	38e8 <__udivsi3+0xf0>
    38e4:	004b      	lsls	r3, r1, #1
    38e6:	1ac0      	subs	r0, r0, r3
    38e8:	4152      	adcs	r2, r2
    38ea:	1a41      	subs	r1, r0, r1
    38ec:	d200      	bcs.n	38f0 <__udivsi3+0xf8>
    38ee:	4601      	mov	r1, r0
    38f0:	4152      	adcs	r2, r2
    38f2:	4610      	mov	r0, r2
    38f4:	4770      	bx	lr
    38f6:	e7ff      	b.n	38f8 <__udivsi3+0x100>
    38f8:	b501      	push	{r0, lr}
    38fa:	2000      	movs	r0, #0
    38fc:	f000 f806 	bl	390c <__aeabi_idiv0>
    3900:	bd02      	pop	{r1, pc}
    3902:	46c0      	nop			; (mov r8, r8)

00003904 <__aeabi_uidivmod>:
    3904:	2900      	cmp	r1, #0
    3906:	d0f7      	beq.n	38f8 <__udivsi3+0x100>
    3908:	e776      	b.n	37f8 <__udivsi3>
    390a:	4770      	bx	lr

0000390c <__aeabi_idiv0>:
    390c:	4770      	bx	lr
    390e:	46c0      	nop			; (mov r8, r8)

00003910 <__aeabi_lmul>:
    3910:	b5f0      	push	{r4, r5, r6, r7, lr}
    3912:	46ce      	mov	lr, r9
    3914:	4647      	mov	r7, r8
    3916:	0415      	lsls	r5, r2, #16
    3918:	0c2d      	lsrs	r5, r5, #16
    391a:	002e      	movs	r6, r5
    391c:	b580      	push	{r7, lr}
    391e:	0407      	lsls	r7, r0, #16
    3920:	0c14      	lsrs	r4, r2, #16
    3922:	0c3f      	lsrs	r7, r7, #16
    3924:	4699      	mov	r9, r3
    3926:	0c03      	lsrs	r3, r0, #16
    3928:	437e      	muls	r6, r7
    392a:	435d      	muls	r5, r3
    392c:	4367      	muls	r7, r4
    392e:	4363      	muls	r3, r4
    3930:	197f      	adds	r7, r7, r5
    3932:	0c34      	lsrs	r4, r6, #16
    3934:	19e4      	adds	r4, r4, r7
    3936:	469c      	mov	ip, r3
    3938:	42a5      	cmp	r5, r4
    393a:	d903      	bls.n	3944 <__aeabi_lmul+0x34>
    393c:	2380      	movs	r3, #128	; 0x80
    393e:	025b      	lsls	r3, r3, #9
    3940:	4698      	mov	r8, r3
    3942:	44c4      	add	ip, r8
    3944:	464b      	mov	r3, r9
    3946:	4351      	muls	r1, r2
    3948:	4343      	muls	r3, r0
    394a:	0436      	lsls	r6, r6, #16
    394c:	0c36      	lsrs	r6, r6, #16
    394e:	0c25      	lsrs	r5, r4, #16
    3950:	0424      	lsls	r4, r4, #16
    3952:	4465      	add	r5, ip
    3954:	19a4      	adds	r4, r4, r6
    3956:	1859      	adds	r1, r3, r1
    3958:	1949      	adds	r1, r1, r5
    395a:	0020      	movs	r0, r4
    395c:	bc0c      	pop	{r2, r3}
    395e:	4690      	mov	r8, r2
    3960:	4699      	mov	r9, r3
    3962:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003964 <__aeabi_dadd>:
    3964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3966:	4645      	mov	r5, r8
    3968:	46de      	mov	lr, fp
    396a:	4657      	mov	r7, sl
    396c:	464e      	mov	r6, r9
    396e:	030c      	lsls	r4, r1, #12
    3970:	b5e0      	push	{r5, r6, r7, lr}
    3972:	004e      	lsls	r6, r1, #1
    3974:	0fc9      	lsrs	r1, r1, #31
    3976:	4688      	mov	r8, r1
    3978:	000d      	movs	r5, r1
    397a:	0a61      	lsrs	r1, r4, #9
    397c:	0f44      	lsrs	r4, r0, #29
    397e:	430c      	orrs	r4, r1
    3980:	00c7      	lsls	r7, r0, #3
    3982:	0319      	lsls	r1, r3, #12
    3984:	0058      	lsls	r0, r3, #1
    3986:	0fdb      	lsrs	r3, r3, #31
    3988:	469b      	mov	fp, r3
    398a:	0a4b      	lsrs	r3, r1, #9
    398c:	0f51      	lsrs	r1, r2, #29
    398e:	430b      	orrs	r3, r1
    3990:	0d76      	lsrs	r6, r6, #21
    3992:	0d40      	lsrs	r0, r0, #21
    3994:	0019      	movs	r1, r3
    3996:	00d2      	lsls	r2, r2, #3
    3998:	45d8      	cmp	r8, fp
    399a:	d100      	bne.n	399e <__aeabi_dadd+0x3a>
    399c:	e0ae      	b.n	3afc <__aeabi_dadd+0x198>
    399e:	1a35      	subs	r5, r6, r0
    39a0:	2d00      	cmp	r5, #0
    39a2:	dc00      	bgt.n	39a6 <__aeabi_dadd+0x42>
    39a4:	e0f6      	b.n	3b94 <__aeabi_dadd+0x230>
    39a6:	2800      	cmp	r0, #0
    39a8:	d10f      	bne.n	39ca <__aeabi_dadd+0x66>
    39aa:	4313      	orrs	r3, r2
    39ac:	d100      	bne.n	39b0 <__aeabi_dadd+0x4c>
    39ae:	e0db      	b.n	3b68 <__aeabi_dadd+0x204>
    39b0:	1e6b      	subs	r3, r5, #1
    39b2:	2b00      	cmp	r3, #0
    39b4:	d000      	beq.n	39b8 <__aeabi_dadd+0x54>
    39b6:	e137      	b.n	3c28 <__aeabi_dadd+0x2c4>
    39b8:	1aba      	subs	r2, r7, r2
    39ba:	4297      	cmp	r7, r2
    39bc:	41bf      	sbcs	r7, r7
    39be:	1a64      	subs	r4, r4, r1
    39c0:	427f      	negs	r7, r7
    39c2:	1be4      	subs	r4, r4, r7
    39c4:	2601      	movs	r6, #1
    39c6:	0017      	movs	r7, r2
    39c8:	e024      	b.n	3a14 <__aeabi_dadd+0xb0>
    39ca:	4bc6      	ldr	r3, [pc, #792]	; (3ce4 <__aeabi_dadd+0x380>)
    39cc:	429e      	cmp	r6, r3
    39ce:	d04d      	beq.n	3a6c <__aeabi_dadd+0x108>
    39d0:	2380      	movs	r3, #128	; 0x80
    39d2:	041b      	lsls	r3, r3, #16
    39d4:	4319      	orrs	r1, r3
    39d6:	2d38      	cmp	r5, #56	; 0x38
    39d8:	dd00      	ble.n	39dc <__aeabi_dadd+0x78>
    39da:	e107      	b.n	3bec <__aeabi_dadd+0x288>
    39dc:	2d1f      	cmp	r5, #31
    39de:	dd00      	ble.n	39e2 <__aeabi_dadd+0x7e>
    39e0:	e138      	b.n	3c54 <__aeabi_dadd+0x2f0>
    39e2:	2020      	movs	r0, #32
    39e4:	1b43      	subs	r3, r0, r5
    39e6:	469a      	mov	sl, r3
    39e8:	000b      	movs	r3, r1
    39ea:	4650      	mov	r0, sl
    39ec:	4083      	lsls	r3, r0
    39ee:	4699      	mov	r9, r3
    39f0:	0013      	movs	r3, r2
    39f2:	4648      	mov	r0, r9
    39f4:	40eb      	lsrs	r3, r5
    39f6:	4318      	orrs	r0, r3
    39f8:	0003      	movs	r3, r0
    39fa:	4650      	mov	r0, sl
    39fc:	4082      	lsls	r2, r0
    39fe:	1e50      	subs	r0, r2, #1
    3a00:	4182      	sbcs	r2, r0
    3a02:	40e9      	lsrs	r1, r5
    3a04:	431a      	orrs	r2, r3
    3a06:	1aba      	subs	r2, r7, r2
    3a08:	1a61      	subs	r1, r4, r1
    3a0a:	4297      	cmp	r7, r2
    3a0c:	41a4      	sbcs	r4, r4
    3a0e:	0017      	movs	r7, r2
    3a10:	4264      	negs	r4, r4
    3a12:	1b0c      	subs	r4, r1, r4
    3a14:	0223      	lsls	r3, r4, #8
    3a16:	d562      	bpl.n	3ade <__aeabi_dadd+0x17a>
    3a18:	0264      	lsls	r4, r4, #9
    3a1a:	0a65      	lsrs	r5, r4, #9
    3a1c:	2d00      	cmp	r5, #0
    3a1e:	d100      	bne.n	3a22 <__aeabi_dadd+0xbe>
    3a20:	e0df      	b.n	3be2 <__aeabi_dadd+0x27e>
    3a22:	0028      	movs	r0, r5
    3a24:	f001 fbe4 	bl	51f0 <__clzsi2>
    3a28:	0003      	movs	r3, r0
    3a2a:	3b08      	subs	r3, #8
    3a2c:	2b1f      	cmp	r3, #31
    3a2e:	dd00      	ble.n	3a32 <__aeabi_dadd+0xce>
    3a30:	e0d2      	b.n	3bd8 <__aeabi_dadd+0x274>
    3a32:	2220      	movs	r2, #32
    3a34:	003c      	movs	r4, r7
    3a36:	1ad2      	subs	r2, r2, r3
    3a38:	409d      	lsls	r5, r3
    3a3a:	40d4      	lsrs	r4, r2
    3a3c:	409f      	lsls	r7, r3
    3a3e:	4325      	orrs	r5, r4
    3a40:	429e      	cmp	r6, r3
    3a42:	dd00      	ble.n	3a46 <__aeabi_dadd+0xe2>
    3a44:	e0c4      	b.n	3bd0 <__aeabi_dadd+0x26c>
    3a46:	1b9e      	subs	r6, r3, r6
    3a48:	1c73      	adds	r3, r6, #1
    3a4a:	2b1f      	cmp	r3, #31
    3a4c:	dd00      	ble.n	3a50 <__aeabi_dadd+0xec>
    3a4e:	e0f1      	b.n	3c34 <__aeabi_dadd+0x2d0>
    3a50:	2220      	movs	r2, #32
    3a52:	0038      	movs	r0, r7
    3a54:	0029      	movs	r1, r5
    3a56:	1ad2      	subs	r2, r2, r3
    3a58:	40d8      	lsrs	r0, r3
    3a5a:	4091      	lsls	r1, r2
    3a5c:	4097      	lsls	r7, r2
    3a5e:	002c      	movs	r4, r5
    3a60:	4301      	orrs	r1, r0
    3a62:	1e78      	subs	r0, r7, #1
    3a64:	4187      	sbcs	r7, r0
    3a66:	40dc      	lsrs	r4, r3
    3a68:	2600      	movs	r6, #0
    3a6a:	430f      	orrs	r7, r1
    3a6c:	077b      	lsls	r3, r7, #29
    3a6e:	d009      	beq.n	3a84 <__aeabi_dadd+0x120>
    3a70:	230f      	movs	r3, #15
    3a72:	403b      	ands	r3, r7
    3a74:	2b04      	cmp	r3, #4
    3a76:	d005      	beq.n	3a84 <__aeabi_dadd+0x120>
    3a78:	1d3b      	adds	r3, r7, #4
    3a7a:	42bb      	cmp	r3, r7
    3a7c:	41bf      	sbcs	r7, r7
    3a7e:	427f      	negs	r7, r7
    3a80:	19e4      	adds	r4, r4, r7
    3a82:	001f      	movs	r7, r3
    3a84:	0223      	lsls	r3, r4, #8
    3a86:	d52c      	bpl.n	3ae2 <__aeabi_dadd+0x17e>
    3a88:	4b96      	ldr	r3, [pc, #600]	; (3ce4 <__aeabi_dadd+0x380>)
    3a8a:	3601      	adds	r6, #1
    3a8c:	429e      	cmp	r6, r3
    3a8e:	d100      	bne.n	3a92 <__aeabi_dadd+0x12e>
    3a90:	e09a      	b.n	3bc8 <__aeabi_dadd+0x264>
    3a92:	4645      	mov	r5, r8
    3a94:	4b94      	ldr	r3, [pc, #592]	; (3ce8 <__aeabi_dadd+0x384>)
    3a96:	08ff      	lsrs	r7, r7, #3
    3a98:	401c      	ands	r4, r3
    3a9a:	0760      	lsls	r0, r4, #29
    3a9c:	0576      	lsls	r6, r6, #21
    3a9e:	0264      	lsls	r4, r4, #9
    3aa0:	4307      	orrs	r7, r0
    3aa2:	0b24      	lsrs	r4, r4, #12
    3aa4:	0d76      	lsrs	r6, r6, #21
    3aa6:	2100      	movs	r1, #0
    3aa8:	0324      	lsls	r4, r4, #12
    3aaa:	0b23      	lsrs	r3, r4, #12
    3aac:	0d0c      	lsrs	r4, r1, #20
    3aae:	4a8f      	ldr	r2, [pc, #572]	; (3cec <__aeabi_dadd+0x388>)
    3ab0:	0524      	lsls	r4, r4, #20
    3ab2:	431c      	orrs	r4, r3
    3ab4:	4014      	ands	r4, r2
    3ab6:	0533      	lsls	r3, r6, #20
    3ab8:	4323      	orrs	r3, r4
    3aba:	005b      	lsls	r3, r3, #1
    3abc:	07ed      	lsls	r5, r5, #31
    3abe:	085b      	lsrs	r3, r3, #1
    3ac0:	432b      	orrs	r3, r5
    3ac2:	0038      	movs	r0, r7
    3ac4:	0019      	movs	r1, r3
    3ac6:	bc3c      	pop	{r2, r3, r4, r5}
    3ac8:	4690      	mov	r8, r2
    3aca:	4699      	mov	r9, r3
    3acc:	46a2      	mov	sl, r4
    3ace:	46ab      	mov	fp, r5
    3ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ad2:	4664      	mov	r4, ip
    3ad4:	4304      	orrs	r4, r0
    3ad6:	d100      	bne.n	3ada <__aeabi_dadd+0x176>
    3ad8:	e211      	b.n	3efe <__aeabi_dadd+0x59a>
    3ada:	0004      	movs	r4, r0
    3adc:	4667      	mov	r7, ip
    3ade:	077b      	lsls	r3, r7, #29
    3ae0:	d1c6      	bne.n	3a70 <__aeabi_dadd+0x10c>
    3ae2:	4645      	mov	r5, r8
    3ae4:	0760      	lsls	r0, r4, #29
    3ae6:	08ff      	lsrs	r7, r7, #3
    3ae8:	4307      	orrs	r7, r0
    3aea:	08e4      	lsrs	r4, r4, #3
    3aec:	4b7d      	ldr	r3, [pc, #500]	; (3ce4 <__aeabi_dadd+0x380>)
    3aee:	429e      	cmp	r6, r3
    3af0:	d030      	beq.n	3b54 <__aeabi_dadd+0x1f0>
    3af2:	0324      	lsls	r4, r4, #12
    3af4:	0576      	lsls	r6, r6, #21
    3af6:	0b24      	lsrs	r4, r4, #12
    3af8:	0d76      	lsrs	r6, r6, #21
    3afa:	e7d4      	b.n	3aa6 <__aeabi_dadd+0x142>
    3afc:	1a33      	subs	r3, r6, r0
    3afe:	469a      	mov	sl, r3
    3b00:	2b00      	cmp	r3, #0
    3b02:	dd78      	ble.n	3bf6 <__aeabi_dadd+0x292>
    3b04:	2800      	cmp	r0, #0
    3b06:	d031      	beq.n	3b6c <__aeabi_dadd+0x208>
    3b08:	4876      	ldr	r0, [pc, #472]	; (3ce4 <__aeabi_dadd+0x380>)
    3b0a:	4286      	cmp	r6, r0
    3b0c:	d0ae      	beq.n	3a6c <__aeabi_dadd+0x108>
    3b0e:	2080      	movs	r0, #128	; 0x80
    3b10:	0400      	lsls	r0, r0, #16
    3b12:	4301      	orrs	r1, r0
    3b14:	4653      	mov	r3, sl
    3b16:	2b38      	cmp	r3, #56	; 0x38
    3b18:	dc00      	bgt.n	3b1c <__aeabi_dadd+0x1b8>
    3b1a:	e0e9      	b.n	3cf0 <__aeabi_dadd+0x38c>
    3b1c:	430a      	orrs	r2, r1
    3b1e:	1e51      	subs	r1, r2, #1
    3b20:	418a      	sbcs	r2, r1
    3b22:	2100      	movs	r1, #0
    3b24:	19d2      	adds	r2, r2, r7
    3b26:	42ba      	cmp	r2, r7
    3b28:	41bf      	sbcs	r7, r7
    3b2a:	1909      	adds	r1, r1, r4
    3b2c:	427c      	negs	r4, r7
    3b2e:	0017      	movs	r7, r2
    3b30:	190c      	adds	r4, r1, r4
    3b32:	0223      	lsls	r3, r4, #8
    3b34:	d5d3      	bpl.n	3ade <__aeabi_dadd+0x17a>
    3b36:	4b6b      	ldr	r3, [pc, #428]	; (3ce4 <__aeabi_dadd+0x380>)
    3b38:	3601      	adds	r6, #1
    3b3a:	429e      	cmp	r6, r3
    3b3c:	d100      	bne.n	3b40 <__aeabi_dadd+0x1dc>
    3b3e:	e13a      	b.n	3db6 <__aeabi_dadd+0x452>
    3b40:	2001      	movs	r0, #1
    3b42:	4b69      	ldr	r3, [pc, #420]	; (3ce8 <__aeabi_dadd+0x384>)
    3b44:	401c      	ands	r4, r3
    3b46:	087b      	lsrs	r3, r7, #1
    3b48:	4007      	ands	r7, r0
    3b4a:	431f      	orrs	r7, r3
    3b4c:	07e0      	lsls	r0, r4, #31
    3b4e:	4307      	orrs	r7, r0
    3b50:	0864      	lsrs	r4, r4, #1
    3b52:	e78b      	b.n	3a6c <__aeabi_dadd+0x108>
    3b54:	0023      	movs	r3, r4
    3b56:	433b      	orrs	r3, r7
    3b58:	d100      	bne.n	3b5c <__aeabi_dadd+0x1f8>
    3b5a:	e1cb      	b.n	3ef4 <__aeabi_dadd+0x590>
    3b5c:	2280      	movs	r2, #128	; 0x80
    3b5e:	0312      	lsls	r2, r2, #12
    3b60:	4314      	orrs	r4, r2
    3b62:	0324      	lsls	r4, r4, #12
    3b64:	0b24      	lsrs	r4, r4, #12
    3b66:	e79e      	b.n	3aa6 <__aeabi_dadd+0x142>
    3b68:	002e      	movs	r6, r5
    3b6a:	e77f      	b.n	3a6c <__aeabi_dadd+0x108>
    3b6c:	0008      	movs	r0, r1
    3b6e:	4310      	orrs	r0, r2
    3b70:	d100      	bne.n	3b74 <__aeabi_dadd+0x210>
    3b72:	e0b4      	b.n	3cde <__aeabi_dadd+0x37a>
    3b74:	1e58      	subs	r0, r3, #1
    3b76:	2800      	cmp	r0, #0
    3b78:	d000      	beq.n	3b7c <__aeabi_dadd+0x218>
    3b7a:	e0de      	b.n	3d3a <__aeabi_dadd+0x3d6>
    3b7c:	18ba      	adds	r2, r7, r2
    3b7e:	42ba      	cmp	r2, r7
    3b80:	419b      	sbcs	r3, r3
    3b82:	1864      	adds	r4, r4, r1
    3b84:	425b      	negs	r3, r3
    3b86:	18e4      	adds	r4, r4, r3
    3b88:	0017      	movs	r7, r2
    3b8a:	2601      	movs	r6, #1
    3b8c:	0223      	lsls	r3, r4, #8
    3b8e:	d5a6      	bpl.n	3ade <__aeabi_dadd+0x17a>
    3b90:	2602      	movs	r6, #2
    3b92:	e7d5      	b.n	3b40 <__aeabi_dadd+0x1dc>
    3b94:	2d00      	cmp	r5, #0
    3b96:	d16e      	bne.n	3c76 <__aeabi_dadd+0x312>
    3b98:	1c70      	adds	r0, r6, #1
    3b9a:	0540      	lsls	r0, r0, #21
    3b9c:	0d40      	lsrs	r0, r0, #21
    3b9e:	2801      	cmp	r0, #1
    3ba0:	dc00      	bgt.n	3ba4 <__aeabi_dadd+0x240>
    3ba2:	e0f9      	b.n	3d98 <__aeabi_dadd+0x434>
    3ba4:	1ab8      	subs	r0, r7, r2
    3ba6:	4684      	mov	ip, r0
    3ba8:	4287      	cmp	r7, r0
    3baa:	4180      	sbcs	r0, r0
    3bac:	1ae5      	subs	r5, r4, r3
    3bae:	4240      	negs	r0, r0
    3bb0:	1a2d      	subs	r5, r5, r0
    3bb2:	0228      	lsls	r0, r5, #8
    3bb4:	d400      	bmi.n	3bb8 <__aeabi_dadd+0x254>
    3bb6:	e089      	b.n	3ccc <__aeabi_dadd+0x368>
    3bb8:	1bd7      	subs	r7, r2, r7
    3bba:	42ba      	cmp	r2, r7
    3bbc:	4192      	sbcs	r2, r2
    3bbe:	1b1c      	subs	r4, r3, r4
    3bc0:	4252      	negs	r2, r2
    3bc2:	1aa5      	subs	r5, r4, r2
    3bc4:	46d8      	mov	r8, fp
    3bc6:	e729      	b.n	3a1c <__aeabi_dadd+0xb8>
    3bc8:	4645      	mov	r5, r8
    3bca:	2400      	movs	r4, #0
    3bcc:	2700      	movs	r7, #0
    3bce:	e76a      	b.n	3aa6 <__aeabi_dadd+0x142>
    3bd0:	4c45      	ldr	r4, [pc, #276]	; (3ce8 <__aeabi_dadd+0x384>)
    3bd2:	1af6      	subs	r6, r6, r3
    3bd4:	402c      	ands	r4, r5
    3bd6:	e749      	b.n	3a6c <__aeabi_dadd+0x108>
    3bd8:	003d      	movs	r5, r7
    3bda:	3828      	subs	r0, #40	; 0x28
    3bdc:	4085      	lsls	r5, r0
    3bde:	2700      	movs	r7, #0
    3be0:	e72e      	b.n	3a40 <__aeabi_dadd+0xdc>
    3be2:	0038      	movs	r0, r7
    3be4:	f001 fb04 	bl	51f0 <__clzsi2>
    3be8:	3020      	adds	r0, #32
    3bea:	e71d      	b.n	3a28 <__aeabi_dadd+0xc4>
    3bec:	430a      	orrs	r2, r1
    3bee:	1e51      	subs	r1, r2, #1
    3bf0:	418a      	sbcs	r2, r1
    3bf2:	2100      	movs	r1, #0
    3bf4:	e707      	b.n	3a06 <__aeabi_dadd+0xa2>
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d000      	beq.n	3bfc <__aeabi_dadd+0x298>
    3bfa:	e0f3      	b.n	3de4 <__aeabi_dadd+0x480>
    3bfc:	1c70      	adds	r0, r6, #1
    3bfe:	0543      	lsls	r3, r0, #21
    3c00:	0d5b      	lsrs	r3, r3, #21
    3c02:	2b01      	cmp	r3, #1
    3c04:	dc00      	bgt.n	3c08 <__aeabi_dadd+0x2a4>
    3c06:	e0ad      	b.n	3d64 <__aeabi_dadd+0x400>
    3c08:	4b36      	ldr	r3, [pc, #216]	; (3ce4 <__aeabi_dadd+0x380>)
    3c0a:	4298      	cmp	r0, r3
    3c0c:	d100      	bne.n	3c10 <__aeabi_dadd+0x2ac>
    3c0e:	e0d1      	b.n	3db4 <__aeabi_dadd+0x450>
    3c10:	18ba      	adds	r2, r7, r2
    3c12:	42ba      	cmp	r2, r7
    3c14:	41bf      	sbcs	r7, r7
    3c16:	1864      	adds	r4, r4, r1
    3c18:	427f      	negs	r7, r7
    3c1a:	19e4      	adds	r4, r4, r7
    3c1c:	07e7      	lsls	r7, r4, #31
    3c1e:	0852      	lsrs	r2, r2, #1
    3c20:	4317      	orrs	r7, r2
    3c22:	0864      	lsrs	r4, r4, #1
    3c24:	0006      	movs	r6, r0
    3c26:	e721      	b.n	3a6c <__aeabi_dadd+0x108>
    3c28:	482e      	ldr	r0, [pc, #184]	; (3ce4 <__aeabi_dadd+0x380>)
    3c2a:	4285      	cmp	r5, r0
    3c2c:	d100      	bne.n	3c30 <__aeabi_dadd+0x2cc>
    3c2e:	e093      	b.n	3d58 <__aeabi_dadd+0x3f4>
    3c30:	001d      	movs	r5, r3
    3c32:	e6d0      	b.n	39d6 <__aeabi_dadd+0x72>
    3c34:	0029      	movs	r1, r5
    3c36:	3e1f      	subs	r6, #31
    3c38:	40f1      	lsrs	r1, r6
    3c3a:	2b20      	cmp	r3, #32
    3c3c:	d100      	bne.n	3c40 <__aeabi_dadd+0x2dc>
    3c3e:	e08d      	b.n	3d5c <__aeabi_dadd+0x3f8>
    3c40:	2240      	movs	r2, #64	; 0x40
    3c42:	1ad3      	subs	r3, r2, r3
    3c44:	409d      	lsls	r5, r3
    3c46:	432f      	orrs	r7, r5
    3c48:	1e7d      	subs	r5, r7, #1
    3c4a:	41af      	sbcs	r7, r5
    3c4c:	2400      	movs	r4, #0
    3c4e:	430f      	orrs	r7, r1
    3c50:	2600      	movs	r6, #0
    3c52:	e744      	b.n	3ade <__aeabi_dadd+0x17a>
    3c54:	002b      	movs	r3, r5
    3c56:	0008      	movs	r0, r1
    3c58:	3b20      	subs	r3, #32
    3c5a:	40d8      	lsrs	r0, r3
    3c5c:	0003      	movs	r3, r0
    3c5e:	2d20      	cmp	r5, #32
    3c60:	d100      	bne.n	3c64 <__aeabi_dadd+0x300>
    3c62:	e07d      	b.n	3d60 <__aeabi_dadd+0x3fc>
    3c64:	2040      	movs	r0, #64	; 0x40
    3c66:	1b45      	subs	r5, r0, r5
    3c68:	40a9      	lsls	r1, r5
    3c6a:	430a      	orrs	r2, r1
    3c6c:	1e51      	subs	r1, r2, #1
    3c6e:	418a      	sbcs	r2, r1
    3c70:	2100      	movs	r1, #0
    3c72:	431a      	orrs	r2, r3
    3c74:	e6c7      	b.n	3a06 <__aeabi_dadd+0xa2>
    3c76:	2e00      	cmp	r6, #0
    3c78:	d050      	beq.n	3d1c <__aeabi_dadd+0x3b8>
    3c7a:	4e1a      	ldr	r6, [pc, #104]	; (3ce4 <__aeabi_dadd+0x380>)
    3c7c:	42b0      	cmp	r0, r6
    3c7e:	d057      	beq.n	3d30 <__aeabi_dadd+0x3cc>
    3c80:	2680      	movs	r6, #128	; 0x80
    3c82:	426b      	negs	r3, r5
    3c84:	4699      	mov	r9, r3
    3c86:	0436      	lsls	r6, r6, #16
    3c88:	4334      	orrs	r4, r6
    3c8a:	464b      	mov	r3, r9
    3c8c:	2b38      	cmp	r3, #56	; 0x38
    3c8e:	dd00      	ble.n	3c92 <__aeabi_dadd+0x32e>
    3c90:	e0d6      	b.n	3e40 <__aeabi_dadd+0x4dc>
    3c92:	2b1f      	cmp	r3, #31
    3c94:	dd00      	ble.n	3c98 <__aeabi_dadd+0x334>
    3c96:	e135      	b.n	3f04 <__aeabi_dadd+0x5a0>
    3c98:	2620      	movs	r6, #32
    3c9a:	1af5      	subs	r5, r6, r3
    3c9c:	0026      	movs	r6, r4
    3c9e:	40ae      	lsls	r6, r5
    3ca0:	46b2      	mov	sl, r6
    3ca2:	003e      	movs	r6, r7
    3ca4:	40de      	lsrs	r6, r3
    3ca6:	46ac      	mov	ip, r5
    3ca8:	0035      	movs	r5, r6
    3caa:	4656      	mov	r6, sl
    3cac:	432e      	orrs	r6, r5
    3cae:	4665      	mov	r5, ip
    3cb0:	40af      	lsls	r7, r5
    3cb2:	1e7d      	subs	r5, r7, #1
    3cb4:	41af      	sbcs	r7, r5
    3cb6:	40dc      	lsrs	r4, r3
    3cb8:	4337      	orrs	r7, r6
    3cba:	1bd7      	subs	r7, r2, r7
    3cbc:	42ba      	cmp	r2, r7
    3cbe:	4192      	sbcs	r2, r2
    3cc0:	1b0c      	subs	r4, r1, r4
    3cc2:	4252      	negs	r2, r2
    3cc4:	1aa4      	subs	r4, r4, r2
    3cc6:	0006      	movs	r6, r0
    3cc8:	46d8      	mov	r8, fp
    3cca:	e6a3      	b.n	3a14 <__aeabi_dadd+0xb0>
    3ccc:	4664      	mov	r4, ip
    3cce:	4667      	mov	r7, ip
    3cd0:	432c      	orrs	r4, r5
    3cd2:	d000      	beq.n	3cd6 <__aeabi_dadd+0x372>
    3cd4:	e6a2      	b.n	3a1c <__aeabi_dadd+0xb8>
    3cd6:	2500      	movs	r5, #0
    3cd8:	2600      	movs	r6, #0
    3cda:	2700      	movs	r7, #0
    3cdc:	e706      	b.n	3aec <__aeabi_dadd+0x188>
    3cde:	001e      	movs	r6, r3
    3ce0:	e6c4      	b.n	3a6c <__aeabi_dadd+0x108>
    3ce2:	46c0      	nop			; (mov r8, r8)
    3ce4:	000007ff 	.word	0x000007ff
    3ce8:	ff7fffff 	.word	0xff7fffff
    3cec:	800fffff 	.word	0x800fffff
    3cf0:	2b1f      	cmp	r3, #31
    3cf2:	dc63      	bgt.n	3dbc <__aeabi_dadd+0x458>
    3cf4:	2020      	movs	r0, #32
    3cf6:	1ac3      	subs	r3, r0, r3
    3cf8:	0008      	movs	r0, r1
    3cfa:	4098      	lsls	r0, r3
    3cfc:	469c      	mov	ip, r3
    3cfe:	4683      	mov	fp, r0
    3d00:	4653      	mov	r3, sl
    3d02:	0010      	movs	r0, r2
    3d04:	40d8      	lsrs	r0, r3
    3d06:	0003      	movs	r3, r0
    3d08:	4658      	mov	r0, fp
    3d0a:	4318      	orrs	r0, r3
    3d0c:	4663      	mov	r3, ip
    3d0e:	409a      	lsls	r2, r3
    3d10:	1e53      	subs	r3, r2, #1
    3d12:	419a      	sbcs	r2, r3
    3d14:	4653      	mov	r3, sl
    3d16:	4302      	orrs	r2, r0
    3d18:	40d9      	lsrs	r1, r3
    3d1a:	e703      	b.n	3b24 <__aeabi_dadd+0x1c0>
    3d1c:	0026      	movs	r6, r4
    3d1e:	433e      	orrs	r6, r7
    3d20:	d006      	beq.n	3d30 <__aeabi_dadd+0x3cc>
    3d22:	43eb      	mvns	r3, r5
    3d24:	4699      	mov	r9, r3
    3d26:	2b00      	cmp	r3, #0
    3d28:	d0c7      	beq.n	3cba <__aeabi_dadd+0x356>
    3d2a:	4e94      	ldr	r6, [pc, #592]	; (3f7c <__aeabi_dadd+0x618>)
    3d2c:	42b0      	cmp	r0, r6
    3d2e:	d1ac      	bne.n	3c8a <__aeabi_dadd+0x326>
    3d30:	000c      	movs	r4, r1
    3d32:	0017      	movs	r7, r2
    3d34:	0006      	movs	r6, r0
    3d36:	46d8      	mov	r8, fp
    3d38:	e698      	b.n	3a6c <__aeabi_dadd+0x108>
    3d3a:	4b90      	ldr	r3, [pc, #576]	; (3f7c <__aeabi_dadd+0x618>)
    3d3c:	459a      	cmp	sl, r3
    3d3e:	d00b      	beq.n	3d58 <__aeabi_dadd+0x3f4>
    3d40:	4682      	mov	sl, r0
    3d42:	e6e7      	b.n	3b14 <__aeabi_dadd+0x1b0>
    3d44:	2800      	cmp	r0, #0
    3d46:	d000      	beq.n	3d4a <__aeabi_dadd+0x3e6>
    3d48:	e09e      	b.n	3e88 <__aeabi_dadd+0x524>
    3d4a:	0018      	movs	r0, r3
    3d4c:	4310      	orrs	r0, r2
    3d4e:	d100      	bne.n	3d52 <__aeabi_dadd+0x3ee>
    3d50:	e0e9      	b.n	3f26 <__aeabi_dadd+0x5c2>
    3d52:	001c      	movs	r4, r3
    3d54:	0017      	movs	r7, r2
    3d56:	46d8      	mov	r8, fp
    3d58:	4e88      	ldr	r6, [pc, #544]	; (3f7c <__aeabi_dadd+0x618>)
    3d5a:	e687      	b.n	3a6c <__aeabi_dadd+0x108>
    3d5c:	2500      	movs	r5, #0
    3d5e:	e772      	b.n	3c46 <__aeabi_dadd+0x2e2>
    3d60:	2100      	movs	r1, #0
    3d62:	e782      	b.n	3c6a <__aeabi_dadd+0x306>
    3d64:	0023      	movs	r3, r4
    3d66:	433b      	orrs	r3, r7
    3d68:	2e00      	cmp	r6, #0
    3d6a:	d000      	beq.n	3d6e <__aeabi_dadd+0x40a>
    3d6c:	e0ab      	b.n	3ec6 <__aeabi_dadd+0x562>
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d100      	bne.n	3d74 <__aeabi_dadd+0x410>
    3d72:	e0e7      	b.n	3f44 <__aeabi_dadd+0x5e0>
    3d74:	000b      	movs	r3, r1
    3d76:	4313      	orrs	r3, r2
    3d78:	d100      	bne.n	3d7c <__aeabi_dadd+0x418>
    3d7a:	e677      	b.n	3a6c <__aeabi_dadd+0x108>
    3d7c:	18ba      	adds	r2, r7, r2
    3d7e:	42ba      	cmp	r2, r7
    3d80:	41bf      	sbcs	r7, r7
    3d82:	1864      	adds	r4, r4, r1
    3d84:	427f      	negs	r7, r7
    3d86:	19e4      	adds	r4, r4, r7
    3d88:	0223      	lsls	r3, r4, #8
    3d8a:	d400      	bmi.n	3d8e <__aeabi_dadd+0x42a>
    3d8c:	e0f2      	b.n	3f74 <__aeabi_dadd+0x610>
    3d8e:	4b7c      	ldr	r3, [pc, #496]	; (3f80 <__aeabi_dadd+0x61c>)
    3d90:	0017      	movs	r7, r2
    3d92:	401c      	ands	r4, r3
    3d94:	0006      	movs	r6, r0
    3d96:	e669      	b.n	3a6c <__aeabi_dadd+0x108>
    3d98:	0020      	movs	r0, r4
    3d9a:	4338      	orrs	r0, r7
    3d9c:	2e00      	cmp	r6, #0
    3d9e:	d1d1      	bne.n	3d44 <__aeabi_dadd+0x3e0>
    3da0:	2800      	cmp	r0, #0
    3da2:	d15b      	bne.n	3e5c <__aeabi_dadd+0x4f8>
    3da4:	001c      	movs	r4, r3
    3da6:	4314      	orrs	r4, r2
    3da8:	d100      	bne.n	3dac <__aeabi_dadd+0x448>
    3daa:	e0a8      	b.n	3efe <__aeabi_dadd+0x59a>
    3dac:	001c      	movs	r4, r3
    3dae:	0017      	movs	r7, r2
    3db0:	46d8      	mov	r8, fp
    3db2:	e65b      	b.n	3a6c <__aeabi_dadd+0x108>
    3db4:	0006      	movs	r6, r0
    3db6:	2400      	movs	r4, #0
    3db8:	2700      	movs	r7, #0
    3dba:	e697      	b.n	3aec <__aeabi_dadd+0x188>
    3dbc:	4650      	mov	r0, sl
    3dbe:	000b      	movs	r3, r1
    3dc0:	3820      	subs	r0, #32
    3dc2:	40c3      	lsrs	r3, r0
    3dc4:	4699      	mov	r9, r3
    3dc6:	4653      	mov	r3, sl
    3dc8:	2b20      	cmp	r3, #32
    3dca:	d100      	bne.n	3dce <__aeabi_dadd+0x46a>
    3dcc:	e095      	b.n	3efa <__aeabi_dadd+0x596>
    3dce:	2340      	movs	r3, #64	; 0x40
    3dd0:	4650      	mov	r0, sl
    3dd2:	1a1b      	subs	r3, r3, r0
    3dd4:	4099      	lsls	r1, r3
    3dd6:	430a      	orrs	r2, r1
    3dd8:	1e51      	subs	r1, r2, #1
    3dda:	418a      	sbcs	r2, r1
    3ddc:	464b      	mov	r3, r9
    3dde:	2100      	movs	r1, #0
    3de0:	431a      	orrs	r2, r3
    3de2:	e69f      	b.n	3b24 <__aeabi_dadd+0x1c0>
    3de4:	2e00      	cmp	r6, #0
    3de6:	d130      	bne.n	3e4a <__aeabi_dadd+0x4e6>
    3de8:	0026      	movs	r6, r4
    3dea:	433e      	orrs	r6, r7
    3dec:	d067      	beq.n	3ebe <__aeabi_dadd+0x55a>
    3dee:	43db      	mvns	r3, r3
    3df0:	469a      	mov	sl, r3
    3df2:	2b00      	cmp	r3, #0
    3df4:	d01c      	beq.n	3e30 <__aeabi_dadd+0x4cc>
    3df6:	4e61      	ldr	r6, [pc, #388]	; (3f7c <__aeabi_dadd+0x618>)
    3df8:	42b0      	cmp	r0, r6
    3dfa:	d060      	beq.n	3ebe <__aeabi_dadd+0x55a>
    3dfc:	4653      	mov	r3, sl
    3dfe:	2b38      	cmp	r3, #56	; 0x38
    3e00:	dd00      	ble.n	3e04 <__aeabi_dadd+0x4a0>
    3e02:	e096      	b.n	3f32 <__aeabi_dadd+0x5ce>
    3e04:	2b1f      	cmp	r3, #31
    3e06:	dd00      	ble.n	3e0a <__aeabi_dadd+0x4a6>
    3e08:	e09f      	b.n	3f4a <__aeabi_dadd+0x5e6>
    3e0a:	2620      	movs	r6, #32
    3e0c:	1af3      	subs	r3, r6, r3
    3e0e:	0026      	movs	r6, r4
    3e10:	409e      	lsls	r6, r3
    3e12:	469c      	mov	ip, r3
    3e14:	46b3      	mov	fp, r6
    3e16:	4653      	mov	r3, sl
    3e18:	003e      	movs	r6, r7
    3e1a:	40de      	lsrs	r6, r3
    3e1c:	0033      	movs	r3, r6
    3e1e:	465e      	mov	r6, fp
    3e20:	431e      	orrs	r6, r3
    3e22:	4663      	mov	r3, ip
    3e24:	409f      	lsls	r7, r3
    3e26:	1e7b      	subs	r3, r7, #1
    3e28:	419f      	sbcs	r7, r3
    3e2a:	4653      	mov	r3, sl
    3e2c:	40dc      	lsrs	r4, r3
    3e2e:	4337      	orrs	r7, r6
    3e30:	18bf      	adds	r7, r7, r2
    3e32:	4297      	cmp	r7, r2
    3e34:	4192      	sbcs	r2, r2
    3e36:	1864      	adds	r4, r4, r1
    3e38:	4252      	negs	r2, r2
    3e3a:	18a4      	adds	r4, r4, r2
    3e3c:	0006      	movs	r6, r0
    3e3e:	e678      	b.n	3b32 <__aeabi_dadd+0x1ce>
    3e40:	4327      	orrs	r7, r4
    3e42:	1e7c      	subs	r4, r7, #1
    3e44:	41a7      	sbcs	r7, r4
    3e46:	2400      	movs	r4, #0
    3e48:	e737      	b.n	3cba <__aeabi_dadd+0x356>
    3e4a:	4e4c      	ldr	r6, [pc, #304]	; (3f7c <__aeabi_dadd+0x618>)
    3e4c:	42b0      	cmp	r0, r6
    3e4e:	d036      	beq.n	3ebe <__aeabi_dadd+0x55a>
    3e50:	2680      	movs	r6, #128	; 0x80
    3e52:	425b      	negs	r3, r3
    3e54:	0436      	lsls	r6, r6, #16
    3e56:	469a      	mov	sl, r3
    3e58:	4334      	orrs	r4, r6
    3e5a:	e7cf      	b.n	3dfc <__aeabi_dadd+0x498>
    3e5c:	0018      	movs	r0, r3
    3e5e:	4310      	orrs	r0, r2
    3e60:	d100      	bne.n	3e64 <__aeabi_dadd+0x500>
    3e62:	e603      	b.n	3a6c <__aeabi_dadd+0x108>
    3e64:	1ab8      	subs	r0, r7, r2
    3e66:	4684      	mov	ip, r0
    3e68:	4567      	cmp	r7, ip
    3e6a:	41ad      	sbcs	r5, r5
    3e6c:	1ae0      	subs	r0, r4, r3
    3e6e:	426d      	negs	r5, r5
    3e70:	1b40      	subs	r0, r0, r5
    3e72:	0205      	lsls	r5, r0, #8
    3e74:	d400      	bmi.n	3e78 <__aeabi_dadd+0x514>
    3e76:	e62c      	b.n	3ad2 <__aeabi_dadd+0x16e>
    3e78:	1bd7      	subs	r7, r2, r7
    3e7a:	42ba      	cmp	r2, r7
    3e7c:	4192      	sbcs	r2, r2
    3e7e:	1b1c      	subs	r4, r3, r4
    3e80:	4252      	negs	r2, r2
    3e82:	1aa4      	subs	r4, r4, r2
    3e84:	46d8      	mov	r8, fp
    3e86:	e5f1      	b.n	3a6c <__aeabi_dadd+0x108>
    3e88:	0018      	movs	r0, r3
    3e8a:	4310      	orrs	r0, r2
    3e8c:	d100      	bne.n	3e90 <__aeabi_dadd+0x52c>
    3e8e:	e763      	b.n	3d58 <__aeabi_dadd+0x3f4>
    3e90:	08f8      	lsrs	r0, r7, #3
    3e92:	0767      	lsls	r7, r4, #29
    3e94:	4307      	orrs	r7, r0
    3e96:	2080      	movs	r0, #128	; 0x80
    3e98:	08e4      	lsrs	r4, r4, #3
    3e9a:	0300      	lsls	r0, r0, #12
    3e9c:	4204      	tst	r4, r0
    3e9e:	d008      	beq.n	3eb2 <__aeabi_dadd+0x54e>
    3ea0:	08dd      	lsrs	r5, r3, #3
    3ea2:	4205      	tst	r5, r0
    3ea4:	d105      	bne.n	3eb2 <__aeabi_dadd+0x54e>
    3ea6:	08d2      	lsrs	r2, r2, #3
    3ea8:	0759      	lsls	r1, r3, #29
    3eaa:	4311      	orrs	r1, r2
    3eac:	000f      	movs	r7, r1
    3eae:	002c      	movs	r4, r5
    3eb0:	46d8      	mov	r8, fp
    3eb2:	0f7b      	lsrs	r3, r7, #29
    3eb4:	00e4      	lsls	r4, r4, #3
    3eb6:	431c      	orrs	r4, r3
    3eb8:	00ff      	lsls	r7, r7, #3
    3eba:	4e30      	ldr	r6, [pc, #192]	; (3f7c <__aeabi_dadd+0x618>)
    3ebc:	e5d6      	b.n	3a6c <__aeabi_dadd+0x108>
    3ebe:	000c      	movs	r4, r1
    3ec0:	0017      	movs	r7, r2
    3ec2:	0006      	movs	r6, r0
    3ec4:	e5d2      	b.n	3a6c <__aeabi_dadd+0x108>
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d038      	beq.n	3f3c <__aeabi_dadd+0x5d8>
    3eca:	000b      	movs	r3, r1
    3ecc:	4313      	orrs	r3, r2
    3ece:	d100      	bne.n	3ed2 <__aeabi_dadd+0x56e>
    3ed0:	e742      	b.n	3d58 <__aeabi_dadd+0x3f4>
    3ed2:	08f8      	lsrs	r0, r7, #3
    3ed4:	0767      	lsls	r7, r4, #29
    3ed6:	4307      	orrs	r7, r0
    3ed8:	2080      	movs	r0, #128	; 0x80
    3eda:	08e4      	lsrs	r4, r4, #3
    3edc:	0300      	lsls	r0, r0, #12
    3ede:	4204      	tst	r4, r0
    3ee0:	d0e7      	beq.n	3eb2 <__aeabi_dadd+0x54e>
    3ee2:	08cb      	lsrs	r3, r1, #3
    3ee4:	4203      	tst	r3, r0
    3ee6:	d1e4      	bne.n	3eb2 <__aeabi_dadd+0x54e>
    3ee8:	08d2      	lsrs	r2, r2, #3
    3eea:	0749      	lsls	r1, r1, #29
    3eec:	4311      	orrs	r1, r2
    3eee:	000f      	movs	r7, r1
    3ef0:	001c      	movs	r4, r3
    3ef2:	e7de      	b.n	3eb2 <__aeabi_dadd+0x54e>
    3ef4:	2700      	movs	r7, #0
    3ef6:	2400      	movs	r4, #0
    3ef8:	e5d5      	b.n	3aa6 <__aeabi_dadd+0x142>
    3efa:	2100      	movs	r1, #0
    3efc:	e76b      	b.n	3dd6 <__aeabi_dadd+0x472>
    3efe:	2500      	movs	r5, #0
    3f00:	2700      	movs	r7, #0
    3f02:	e5f3      	b.n	3aec <__aeabi_dadd+0x188>
    3f04:	464e      	mov	r6, r9
    3f06:	0025      	movs	r5, r4
    3f08:	3e20      	subs	r6, #32
    3f0a:	40f5      	lsrs	r5, r6
    3f0c:	464b      	mov	r3, r9
    3f0e:	002e      	movs	r6, r5
    3f10:	2b20      	cmp	r3, #32
    3f12:	d02d      	beq.n	3f70 <__aeabi_dadd+0x60c>
    3f14:	2540      	movs	r5, #64	; 0x40
    3f16:	1aed      	subs	r5, r5, r3
    3f18:	40ac      	lsls	r4, r5
    3f1a:	4327      	orrs	r7, r4
    3f1c:	1e7c      	subs	r4, r7, #1
    3f1e:	41a7      	sbcs	r7, r4
    3f20:	2400      	movs	r4, #0
    3f22:	4337      	orrs	r7, r6
    3f24:	e6c9      	b.n	3cba <__aeabi_dadd+0x356>
    3f26:	2480      	movs	r4, #128	; 0x80
    3f28:	2500      	movs	r5, #0
    3f2a:	0324      	lsls	r4, r4, #12
    3f2c:	4e13      	ldr	r6, [pc, #76]	; (3f7c <__aeabi_dadd+0x618>)
    3f2e:	2700      	movs	r7, #0
    3f30:	e5dc      	b.n	3aec <__aeabi_dadd+0x188>
    3f32:	4327      	orrs	r7, r4
    3f34:	1e7c      	subs	r4, r7, #1
    3f36:	41a7      	sbcs	r7, r4
    3f38:	2400      	movs	r4, #0
    3f3a:	e779      	b.n	3e30 <__aeabi_dadd+0x4cc>
    3f3c:	000c      	movs	r4, r1
    3f3e:	0017      	movs	r7, r2
    3f40:	4e0e      	ldr	r6, [pc, #56]	; (3f7c <__aeabi_dadd+0x618>)
    3f42:	e593      	b.n	3a6c <__aeabi_dadd+0x108>
    3f44:	000c      	movs	r4, r1
    3f46:	0017      	movs	r7, r2
    3f48:	e590      	b.n	3a6c <__aeabi_dadd+0x108>
    3f4a:	4656      	mov	r6, sl
    3f4c:	0023      	movs	r3, r4
    3f4e:	3e20      	subs	r6, #32
    3f50:	40f3      	lsrs	r3, r6
    3f52:	4699      	mov	r9, r3
    3f54:	4653      	mov	r3, sl
    3f56:	2b20      	cmp	r3, #32
    3f58:	d00e      	beq.n	3f78 <__aeabi_dadd+0x614>
    3f5a:	2340      	movs	r3, #64	; 0x40
    3f5c:	4656      	mov	r6, sl
    3f5e:	1b9b      	subs	r3, r3, r6
    3f60:	409c      	lsls	r4, r3
    3f62:	4327      	orrs	r7, r4
    3f64:	1e7c      	subs	r4, r7, #1
    3f66:	41a7      	sbcs	r7, r4
    3f68:	464b      	mov	r3, r9
    3f6a:	2400      	movs	r4, #0
    3f6c:	431f      	orrs	r7, r3
    3f6e:	e75f      	b.n	3e30 <__aeabi_dadd+0x4cc>
    3f70:	2400      	movs	r4, #0
    3f72:	e7d2      	b.n	3f1a <__aeabi_dadd+0x5b6>
    3f74:	0017      	movs	r7, r2
    3f76:	e5b2      	b.n	3ade <__aeabi_dadd+0x17a>
    3f78:	2400      	movs	r4, #0
    3f7a:	e7f2      	b.n	3f62 <__aeabi_dadd+0x5fe>
    3f7c:	000007ff 	.word	0x000007ff
    3f80:	ff7fffff 	.word	0xff7fffff

00003f84 <__aeabi_ddiv>:
    3f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f86:	4657      	mov	r7, sl
    3f88:	4645      	mov	r5, r8
    3f8a:	46de      	mov	lr, fp
    3f8c:	464e      	mov	r6, r9
    3f8e:	b5e0      	push	{r5, r6, r7, lr}
    3f90:	004c      	lsls	r4, r1, #1
    3f92:	030e      	lsls	r6, r1, #12
    3f94:	b087      	sub	sp, #28
    3f96:	4683      	mov	fp, r0
    3f98:	4692      	mov	sl, r2
    3f9a:	001d      	movs	r5, r3
    3f9c:	4680      	mov	r8, r0
    3f9e:	0b36      	lsrs	r6, r6, #12
    3fa0:	0d64      	lsrs	r4, r4, #21
    3fa2:	0fcf      	lsrs	r7, r1, #31
    3fa4:	2c00      	cmp	r4, #0
    3fa6:	d04f      	beq.n	4048 <__aeabi_ddiv+0xc4>
    3fa8:	4b6f      	ldr	r3, [pc, #444]	; (4168 <__aeabi_ddiv+0x1e4>)
    3faa:	429c      	cmp	r4, r3
    3fac:	d035      	beq.n	401a <__aeabi_ddiv+0x96>
    3fae:	2380      	movs	r3, #128	; 0x80
    3fb0:	0f42      	lsrs	r2, r0, #29
    3fb2:	041b      	lsls	r3, r3, #16
    3fb4:	00f6      	lsls	r6, r6, #3
    3fb6:	4313      	orrs	r3, r2
    3fb8:	4333      	orrs	r3, r6
    3fba:	4699      	mov	r9, r3
    3fbc:	00c3      	lsls	r3, r0, #3
    3fbe:	4698      	mov	r8, r3
    3fc0:	4b6a      	ldr	r3, [pc, #424]	; (416c <__aeabi_ddiv+0x1e8>)
    3fc2:	2600      	movs	r6, #0
    3fc4:	469c      	mov	ip, r3
    3fc6:	2300      	movs	r3, #0
    3fc8:	4464      	add	r4, ip
    3fca:	9303      	str	r3, [sp, #12]
    3fcc:	032b      	lsls	r3, r5, #12
    3fce:	0b1b      	lsrs	r3, r3, #12
    3fd0:	469b      	mov	fp, r3
    3fd2:	006b      	lsls	r3, r5, #1
    3fd4:	0fed      	lsrs	r5, r5, #31
    3fd6:	4650      	mov	r0, sl
    3fd8:	0d5b      	lsrs	r3, r3, #21
    3fda:	9501      	str	r5, [sp, #4]
    3fdc:	d05e      	beq.n	409c <__aeabi_ddiv+0x118>
    3fde:	4a62      	ldr	r2, [pc, #392]	; (4168 <__aeabi_ddiv+0x1e4>)
    3fe0:	4293      	cmp	r3, r2
    3fe2:	d053      	beq.n	408c <__aeabi_ddiv+0x108>
    3fe4:	465a      	mov	r2, fp
    3fe6:	00d1      	lsls	r1, r2, #3
    3fe8:	2280      	movs	r2, #128	; 0x80
    3fea:	0f40      	lsrs	r0, r0, #29
    3fec:	0412      	lsls	r2, r2, #16
    3fee:	4302      	orrs	r2, r0
    3ff0:	430a      	orrs	r2, r1
    3ff2:	4693      	mov	fp, r2
    3ff4:	4652      	mov	r2, sl
    3ff6:	00d1      	lsls	r1, r2, #3
    3ff8:	4a5c      	ldr	r2, [pc, #368]	; (416c <__aeabi_ddiv+0x1e8>)
    3ffa:	4694      	mov	ip, r2
    3ffc:	2200      	movs	r2, #0
    3ffe:	4463      	add	r3, ip
    4000:	0038      	movs	r0, r7
    4002:	4068      	eors	r0, r5
    4004:	4684      	mov	ip, r0
    4006:	9002      	str	r0, [sp, #8]
    4008:	1ae4      	subs	r4, r4, r3
    400a:	4316      	orrs	r6, r2
    400c:	2e0f      	cmp	r6, #15
    400e:	d900      	bls.n	4012 <__aeabi_ddiv+0x8e>
    4010:	e0b4      	b.n	417c <__aeabi_ddiv+0x1f8>
    4012:	4b57      	ldr	r3, [pc, #348]	; (4170 <__aeabi_ddiv+0x1ec>)
    4014:	00b6      	lsls	r6, r6, #2
    4016:	599b      	ldr	r3, [r3, r6]
    4018:	469f      	mov	pc, r3
    401a:	0003      	movs	r3, r0
    401c:	4333      	orrs	r3, r6
    401e:	4699      	mov	r9, r3
    4020:	d16c      	bne.n	40fc <__aeabi_ddiv+0x178>
    4022:	2300      	movs	r3, #0
    4024:	4698      	mov	r8, r3
    4026:	3302      	adds	r3, #2
    4028:	2608      	movs	r6, #8
    402a:	9303      	str	r3, [sp, #12]
    402c:	e7ce      	b.n	3fcc <__aeabi_ddiv+0x48>
    402e:	46cb      	mov	fp, r9
    4030:	4641      	mov	r1, r8
    4032:	9a03      	ldr	r2, [sp, #12]
    4034:	9701      	str	r7, [sp, #4]
    4036:	2a02      	cmp	r2, #2
    4038:	d165      	bne.n	4106 <__aeabi_ddiv+0x182>
    403a:	9b01      	ldr	r3, [sp, #4]
    403c:	4c4a      	ldr	r4, [pc, #296]	; (4168 <__aeabi_ddiv+0x1e4>)
    403e:	469c      	mov	ip, r3
    4040:	2300      	movs	r3, #0
    4042:	2200      	movs	r2, #0
    4044:	4698      	mov	r8, r3
    4046:	e06b      	b.n	4120 <__aeabi_ddiv+0x19c>
    4048:	0003      	movs	r3, r0
    404a:	4333      	orrs	r3, r6
    404c:	4699      	mov	r9, r3
    404e:	d04e      	beq.n	40ee <__aeabi_ddiv+0x16a>
    4050:	2e00      	cmp	r6, #0
    4052:	d100      	bne.n	4056 <__aeabi_ddiv+0xd2>
    4054:	e1bc      	b.n	43d0 <__aeabi_ddiv+0x44c>
    4056:	0030      	movs	r0, r6
    4058:	f001 f8ca 	bl	51f0 <__clzsi2>
    405c:	0003      	movs	r3, r0
    405e:	3b0b      	subs	r3, #11
    4060:	2b1c      	cmp	r3, #28
    4062:	dd00      	ble.n	4066 <__aeabi_ddiv+0xe2>
    4064:	e1ac      	b.n	43c0 <__aeabi_ddiv+0x43c>
    4066:	221d      	movs	r2, #29
    4068:	1ad3      	subs	r3, r2, r3
    406a:	465a      	mov	r2, fp
    406c:	0001      	movs	r1, r0
    406e:	40da      	lsrs	r2, r3
    4070:	3908      	subs	r1, #8
    4072:	408e      	lsls	r6, r1
    4074:	0013      	movs	r3, r2
    4076:	4333      	orrs	r3, r6
    4078:	4699      	mov	r9, r3
    407a:	465b      	mov	r3, fp
    407c:	408b      	lsls	r3, r1
    407e:	4698      	mov	r8, r3
    4080:	2300      	movs	r3, #0
    4082:	4c3c      	ldr	r4, [pc, #240]	; (4174 <__aeabi_ddiv+0x1f0>)
    4084:	2600      	movs	r6, #0
    4086:	1a24      	subs	r4, r4, r0
    4088:	9303      	str	r3, [sp, #12]
    408a:	e79f      	b.n	3fcc <__aeabi_ddiv+0x48>
    408c:	4651      	mov	r1, sl
    408e:	465a      	mov	r2, fp
    4090:	4311      	orrs	r1, r2
    4092:	d129      	bne.n	40e8 <__aeabi_ddiv+0x164>
    4094:	2200      	movs	r2, #0
    4096:	4693      	mov	fp, r2
    4098:	3202      	adds	r2, #2
    409a:	e7b1      	b.n	4000 <__aeabi_ddiv+0x7c>
    409c:	4659      	mov	r1, fp
    409e:	4301      	orrs	r1, r0
    40a0:	d01e      	beq.n	40e0 <__aeabi_ddiv+0x15c>
    40a2:	465b      	mov	r3, fp
    40a4:	2b00      	cmp	r3, #0
    40a6:	d100      	bne.n	40aa <__aeabi_ddiv+0x126>
    40a8:	e19e      	b.n	43e8 <__aeabi_ddiv+0x464>
    40aa:	4658      	mov	r0, fp
    40ac:	f001 f8a0 	bl	51f0 <__clzsi2>
    40b0:	0003      	movs	r3, r0
    40b2:	3b0b      	subs	r3, #11
    40b4:	2b1c      	cmp	r3, #28
    40b6:	dd00      	ble.n	40ba <__aeabi_ddiv+0x136>
    40b8:	e18f      	b.n	43da <__aeabi_ddiv+0x456>
    40ba:	0002      	movs	r2, r0
    40bc:	4659      	mov	r1, fp
    40be:	3a08      	subs	r2, #8
    40c0:	4091      	lsls	r1, r2
    40c2:	468b      	mov	fp, r1
    40c4:	211d      	movs	r1, #29
    40c6:	1acb      	subs	r3, r1, r3
    40c8:	4651      	mov	r1, sl
    40ca:	40d9      	lsrs	r1, r3
    40cc:	000b      	movs	r3, r1
    40ce:	4659      	mov	r1, fp
    40d0:	430b      	orrs	r3, r1
    40d2:	4651      	mov	r1, sl
    40d4:	469b      	mov	fp, r3
    40d6:	4091      	lsls	r1, r2
    40d8:	4b26      	ldr	r3, [pc, #152]	; (4174 <__aeabi_ddiv+0x1f0>)
    40da:	2200      	movs	r2, #0
    40dc:	1a1b      	subs	r3, r3, r0
    40de:	e78f      	b.n	4000 <__aeabi_ddiv+0x7c>
    40e0:	2300      	movs	r3, #0
    40e2:	2201      	movs	r2, #1
    40e4:	469b      	mov	fp, r3
    40e6:	e78b      	b.n	4000 <__aeabi_ddiv+0x7c>
    40e8:	4651      	mov	r1, sl
    40ea:	2203      	movs	r2, #3
    40ec:	e788      	b.n	4000 <__aeabi_ddiv+0x7c>
    40ee:	2300      	movs	r3, #0
    40f0:	4698      	mov	r8, r3
    40f2:	3301      	adds	r3, #1
    40f4:	2604      	movs	r6, #4
    40f6:	2400      	movs	r4, #0
    40f8:	9303      	str	r3, [sp, #12]
    40fa:	e767      	b.n	3fcc <__aeabi_ddiv+0x48>
    40fc:	2303      	movs	r3, #3
    40fe:	46b1      	mov	r9, r6
    4100:	9303      	str	r3, [sp, #12]
    4102:	260c      	movs	r6, #12
    4104:	e762      	b.n	3fcc <__aeabi_ddiv+0x48>
    4106:	2a03      	cmp	r2, #3
    4108:	d100      	bne.n	410c <__aeabi_ddiv+0x188>
    410a:	e25c      	b.n	45c6 <__aeabi_ddiv+0x642>
    410c:	9b01      	ldr	r3, [sp, #4]
    410e:	2a01      	cmp	r2, #1
    4110:	d000      	beq.n	4114 <__aeabi_ddiv+0x190>
    4112:	e1e4      	b.n	44de <__aeabi_ddiv+0x55a>
    4114:	4013      	ands	r3, r2
    4116:	469c      	mov	ip, r3
    4118:	2300      	movs	r3, #0
    411a:	2400      	movs	r4, #0
    411c:	2200      	movs	r2, #0
    411e:	4698      	mov	r8, r3
    4120:	2100      	movs	r1, #0
    4122:	0312      	lsls	r2, r2, #12
    4124:	0b13      	lsrs	r3, r2, #12
    4126:	0d0a      	lsrs	r2, r1, #20
    4128:	0512      	lsls	r2, r2, #20
    412a:	431a      	orrs	r2, r3
    412c:	0523      	lsls	r3, r4, #20
    412e:	4c12      	ldr	r4, [pc, #72]	; (4178 <__aeabi_ddiv+0x1f4>)
    4130:	4640      	mov	r0, r8
    4132:	4022      	ands	r2, r4
    4134:	4313      	orrs	r3, r2
    4136:	4662      	mov	r2, ip
    4138:	005b      	lsls	r3, r3, #1
    413a:	07d2      	lsls	r2, r2, #31
    413c:	085b      	lsrs	r3, r3, #1
    413e:	4313      	orrs	r3, r2
    4140:	0019      	movs	r1, r3
    4142:	b007      	add	sp, #28
    4144:	bc3c      	pop	{r2, r3, r4, r5}
    4146:	4690      	mov	r8, r2
    4148:	4699      	mov	r9, r3
    414a:	46a2      	mov	sl, r4
    414c:	46ab      	mov	fp, r5
    414e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4150:	2300      	movs	r3, #0
    4152:	2280      	movs	r2, #128	; 0x80
    4154:	469c      	mov	ip, r3
    4156:	0312      	lsls	r2, r2, #12
    4158:	4698      	mov	r8, r3
    415a:	4c03      	ldr	r4, [pc, #12]	; (4168 <__aeabi_ddiv+0x1e4>)
    415c:	e7e0      	b.n	4120 <__aeabi_ddiv+0x19c>
    415e:	2300      	movs	r3, #0
    4160:	4c01      	ldr	r4, [pc, #4]	; (4168 <__aeabi_ddiv+0x1e4>)
    4162:	2200      	movs	r2, #0
    4164:	4698      	mov	r8, r3
    4166:	e7db      	b.n	4120 <__aeabi_ddiv+0x19c>
    4168:	000007ff 	.word	0x000007ff
    416c:	fffffc01 	.word	0xfffffc01
    4170:	00005578 	.word	0x00005578
    4174:	fffffc0d 	.word	0xfffffc0d
    4178:	800fffff 	.word	0x800fffff
    417c:	45d9      	cmp	r9, fp
    417e:	d900      	bls.n	4182 <__aeabi_ddiv+0x1fe>
    4180:	e139      	b.n	43f6 <__aeabi_ddiv+0x472>
    4182:	d100      	bne.n	4186 <__aeabi_ddiv+0x202>
    4184:	e134      	b.n	43f0 <__aeabi_ddiv+0x46c>
    4186:	2300      	movs	r3, #0
    4188:	4646      	mov	r6, r8
    418a:	464d      	mov	r5, r9
    418c:	469a      	mov	sl, r3
    418e:	3c01      	subs	r4, #1
    4190:	465b      	mov	r3, fp
    4192:	0e0a      	lsrs	r2, r1, #24
    4194:	021b      	lsls	r3, r3, #8
    4196:	431a      	orrs	r2, r3
    4198:	020b      	lsls	r3, r1, #8
    419a:	0c17      	lsrs	r7, r2, #16
    419c:	9303      	str	r3, [sp, #12]
    419e:	0413      	lsls	r3, r2, #16
    41a0:	0c1b      	lsrs	r3, r3, #16
    41a2:	0039      	movs	r1, r7
    41a4:	0028      	movs	r0, r5
    41a6:	4690      	mov	r8, r2
    41a8:	9301      	str	r3, [sp, #4]
    41aa:	f7ff fb25 	bl	37f8 <__udivsi3>
    41ae:	0002      	movs	r2, r0
    41b0:	9b01      	ldr	r3, [sp, #4]
    41b2:	4683      	mov	fp, r0
    41b4:	435a      	muls	r2, r3
    41b6:	0028      	movs	r0, r5
    41b8:	0039      	movs	r1, r7
    41ba:	4691      	mov	r9, r2
    41bc:	f7ff fba2 	bl	3904 <__aeabi_uidivmod>
    41c0:	0c35      	lsrs	r5, r6, #16
    41c2:	0409      	lsls	r1, r1, #16
    41c4:	430d      	orrs	r5, r1
    41c6:	45a9      	cmp	r9, r5
    41c8:	d90d      	bls.n	41e6 <__aeabi_ddiv+0x262>
    41ca:	465b      	mov	r3, fp
    41cc:	4445      	add	r5, r8
    41ce:	3b01      	subs	r3, #1
    41d0:	45a8      	cmp	r8, r5
    41d2:	d900      	bls.n	41d6 <__aeabi_ddiv+0x252>
    41d4:	e13a      	b.n	444c <__aeabi_ddiv+0x4c8>
    41d6:	45a9      	cmp	r9, r5
    41d8:	d800      	bhi.n	41dc <__aeabi_ddiv+0x258>
    41da:	e137      	b.n	444c <__aeabi_ddiv+0x4c8>
    41dc:	2302      	movs	r3, #2
    41de:	425b      	negs	r3, r3
    41e0:	469c      	mov	ip, r3
    41e2:	4445      	add	r5, r8
    41e4:	44e3      	add	fp, ip
    41e6:	464b      	mov	r3, r9
    41e8:	1aeb      	subs	r3, r5, r3
    41ea:	0039      	movs	r1, r7
    41ec:	0018      	movs	r0, r3
    41ee:	9304      	str	r3, [sp, #16]
    41f0:	f7ff fb02 	bl	37f8 <__udivsi3>
    41f4:	9b01      	ldr	r3, [sp, #4]
    41f6:	0005      	movs	r5, r0
    41f8:	4343      	muls	r3, r0
    41fa:	0039      	movs	r1, r7
    41fc:	9804      	ldr	r0, [sp, #16]
    41fe:	4699      	mov	r9, r3
    4200:	f7ff fb80 	bl	3904 <__aeabi_uidivmod>
    4204:	0433      	lsls	r3, r6, #16
    4206:	0409      	lsls	r1, r1, #16
    4208:	0c1b      	lsrs	r3, r3, #16
    420a:	430b      	orrs	r3, r1
    420c:	4599      	cmp	r9, r3
    420e:	d909      	bls.n	4224 <__aeabi_ddiv+0x2a0>
    4210:	4443      	add	r3, r8
    4212:	1e6a      	subs	r2, r5, #1
    4214:	4598      	cmp	r8, r3
    4216:	d900      	bls.n	421a <__aeabi_ddiv+0x296>
    4218:	e11a      	b.n	4450 <__aeabi_ddiv+0x4cc>
    421a:	4599      	cmp	r9, r3
    421c:	d800      	bhi.n	4220 <__aeabi_ddiv+0x29c>
    421e:	e117      	b.n	4450 <__aeabi_ddiv+0x4cc>
    4220:	3d02      	subs	r5, #2
    4222:	4443      	add	r3, r8
    4224:	464a      	mov	r2, r9
    4226:	1a9b      	subs	r3, r3, r2
    4228:	465a      	mov	r2, fp
    422a:	0412      	lsls	r2, r2, #16
    422c:	432a      	orrs	r2, r5
    422e:	9903      	ldr	r1, [sp, #12]
    4230:	4693      	mov	fp, r2
    4232:	0c10      	lsrs	r0, r2, #16
    4234:	0c0a      	lsrs	r2, r1, #16
    4236:	4691      	mov	r9, r2
    4238:	0409      	lsls	r1, r1, #16
    423a:	465a      	mov	r2, fp
    423c:	0c09      	lsrs	r1, r1, #16
    423e:	464e      	mov	r6, r9
    4240:	000d      	movs	r5, r1
    4242:	0412      	lsls	r2, r2, #16
    4244:	0c12      	lsrs	r2, r2, #16
    4246:	4345      	muls	r5, r0
    4248:	9105      	str	r1, [sp, #20]
    424a:	4351      	muls	r1, r2
    424c:	4372      	muls	r2, r6
    424e:	4370      	muls	r0, r6
    4250:	1952      	adds	r2, r2, r5
    4252:	0c0e      	lsrs	r6, r1, #16
    4254:	18b2      	adds	r2, r6, r2
    4256:	4295      	cmp	r5, r2
    4258:	d903      	bls.n	4262 <__aeabi_ddiv+0x2de>
    425a:	2580      	movs	r5, #128	; 0x80
    425c:	026d      	lsls	r5, r5, #9
    425e:	46ac      	mov	ip, r5
    4260:	4460      	add	r0, ip
    4262:	0c15      	lsrs	r5, r2, #16
    4264:	0409      	lsls	r1, r1, #16
    4266:	0412      	lsls	r2, r2, #16
    4268:	0c09      	lsrs	r1, r1, #16
    426a:	1828      	adds	r0, r5, r0
    426c:	1852      	adds	r2, r2, r1
    426e:	4283      	cmp	r3, r0
    4270:	d200      	bcs.n	4274 <__aeabi_ddiv+0x2f0>
    4272:	e0ce      	b.n	4412 <__aeabi_ddiv+0x48e>
    4274:	d100      	bne.n	4278 <__aeabi_ddiv+0x2f4>
    4276:	e0c8      	b.n	440a <__aeabi_ddiv+0x486>
    4278:	1a1d      	subs	r5, r3, r0
    427a:	4653      	mov	r3, sl
    427c:	1a9e      	subs	r6, r3, r2
    427e:	45b2      	cmp	sl, r6
    4280:	4192      	sbcs	r2, r2
    4282:	4252      	negs	r2, r2
    4284:	1aab      	subs	r3, r5, r2
    4286:	469a      	mov	sl, r3
    4288:	4598      	cmp	r8, r3
    428a:	d100      	bne.n	428e <__aeabi_ddiv+0x30a>
    428c:	e117      	b.n	44be <__aeabi_ddiv+0x53a>
    428e:	0039      	movs	r1, r7
    4290:	0018      	movs	r0, r3
    4292:	f7ff fab1 	bl	37f8 <__udivsi3>
    4296:	9b01      	ldr	r3, [sp, #4]
    4298:	0005      	movs	r5, r0
    429a:	4343      	muls	r3, r0
    429c:	0039      	movs	r1, r7
    429e:	4650      	mov	r0, sl
    42a0:	9304      	str	r3, [sp, #16]
    42a2:	f7ff fb2f 	bl	3904 <__aeabi_uidivmod>
    42a6:	9804      	ldr	r0, [sp, #16]
    42a8:	040b      	lsls	r3, r1, #16
    42aa:	0c31      	lsrs	r1, r6, #16
    42ac:	4319      	orrs	r1, r3
    42ae:	4288      	cmp	r0, r1
    42b0:	d909      	bls.n	42c6 <__aeabi_ddiv+0x342>
    42b2:	4441      	add	r1, r8
    42b4:	1e6b      	subs	r3, r5, #1
    42b6:	4588      	cmp	r8, r1
    42b8:	d900      	bls.n	42bc <__aeabi_ddiv+0x338>
    42ba:	e107      	b.n	44cc <__aeabi_ddiv+0x548>
    42bc:	4288      	cmp	r0, r1
    42be:	d800      	bhi.n	42c2 <__aeabi_ddiv+0x33e>
    42c0:	e104      	b.n	44cc <__aeabi_ddiv+0x548>
    42c2:	3d02      	subs	r5, #2
    42c4:	4441      	add	r1, r8
    42c6:	9b04      	ldr	r3, [sp, #16]
    42c8:	1acb      	subs	r3, r1, r3
    42ca:	0018      	movs	r0, r3
    42cc:	0039      	movs	r1, r7
    42ce:	9304      	str	r3, [sp, #16]
    42d0:	f7ff fa92 	bl	37f8 <__udivsi3>
    42d4:	9b01      	ldr	r3, [sp, #4]
    42d6:	4682      	mov	sl, r0
    42d8:	4343      	muls	r3, r0
    42da:	0039      	movs	r1, r7
    42dc:	9804      	ldr	r0, [sp, #16]
    42de:	9301      	str	r3, [sp, #4]
    42e0:	f7ff fb10 	bl	3904 <__aeabi_uidivmod>
    42e4:	9801      	ldr	r0, [sp, #4]
    42e6:	040b      	lsls	r3, r1, #16
    42e8:	0431      	lsls	r1, r6, #16
    42ea:	0c09      	lsrs	r1, r1, #16
    42ec:	4319      	orrs	r1, r3
    42ee:	4288      	cmp	r0, r1
    42f0:	d90d      	bls.n	430e <__aeabi_ddiv+0x38a>
    42f2:	4653      	mov	r3, sl
    42f4:	4441      	add	r1, r8
    42f6:	3b01      	subs	r3, #1
    42f8:	4588      	cmp	r8, r1
    42fa:	d900      	bls.n	42fe <__aeabi_ddiv+0x37a>
    42fc:	e0e8      	b.n	44d0 <__aeabi_ddiv+0x54c>
    42fe:	4288      	cmp	r0, r1
    4300:	d800      	bhi.n	4304 <__aeabi_ddiv+0x380>
    4302:	e0e5      	b.n	44d0 <__aeabi_ddiv+0x54c>
    4304:	2302      	movs	r3, #2
    4306:	425b      	negs	r3, r3
    4308:	469c      	mov	ip, r3
    430a:	4441      	add	r1, r8
    430c:	44e2      	add	sl, ip
    430e:	9b01      	ldr	r3, [sp, #4]
    4310:	042d      	lsls	r5, r5, #16
    4312:	1ace      	subs	r6, r1, r3
    4314:	4651      	mov	r1, sl
    4316:	4329      	orrs	r1, r5
    4318:	9d05      	ldr	r5, [sp, #20]
    431a:	464f      	mov	r7, r9
    431c:	002a      	movs	r2, r5
    431e:	040b      	lsls	r3, r1, #16
    4320:	0c08      	lsrs	r0, r1, #16
    4322:	0c1b      	lsrs	r3, r3, #16
    4324:	435a      	muls	r2, r3
    4326:	4345      	muls	r5, r0
    4328:	437b      	muls	r3, r7
    432a:	4378      	muls	r0, r7
    432c:	195b      	adds	r3, r3, r5
    432e:	0c17      	lsrs	r7, r2, #16
    4330:	18fb      	adds	r3, r7, r3
    4332:	429d      	cmp	r5, r3
    4334:	d903      	bls.n	433e <__aeabi_ddiv+0x3ba>
    4336:	2580      	movs	r5, #128	; 0x80
    4338:	026d      	lsls	r5, r5, #9
    433a:	46ac      	mov	ip, r5
    433c:	4460      	add	r0, ip
    433e:	0c1d      	lsrs	r5, r3, #16
    4340:	0412      	lsls	r2, r2, #16
    4342:	041b      	lsls	r3, r3, #16
    4344:	0c12      	lsrs	r2, r2, #16
    4346:	1828      	adds	r0, r5, r0
    4348:	189b      	adds	r3, r3, r2
    434a:	4286      	cmp	r6, r0
    434c:	d200      	bcs.n	4350 <__aeabi_ddiv+0x3cc>
    434e:	e093      	b.n	4478 <__aeabi_ddiv+0x4f4>
    4350:	d100      	bne.n	4354 <__aeabi_ddiv+0x3d0>
    4352:	e08e      	b.n	4472 <__aeabi_ddiv+0x4ee>
    4354:	2301      	movs	r3, #1
    4356:	4319      	orrs	r1, r3
    4358:	4ba0      	ldr	r3, [pc, #640]	; (45dc <__aeabi_ddiv+0x658>)
    435a:	18e3      	adds	r3, r4, r3
    435c:	2b00      	cmp	r3, #0
    435e:	dc00      	bgt.n	4362 <__aeabi_ddiv+0x3de>
    4360:	e099      	b.n	4496 <__aeabi_ddiv+0x512>
    4362:	074a      	lsls	r2, r1, #29
    4364:	d000      	beq.n	4368 <__aeabi_ddiv+0x3e4>
    4366:	e09e      	b.n	44a6 <__aeabi_ddiv+0x522>
    4368:	465a      	mov	r2, fp
    436a:	01d2      	lsls	r2, r2, #7
    436c:	d506      	bpl.n	437c <__aeabi_ddiv+0x3f8>
    436e:	465a      	mov	r2, fp
    4370:	4b9b      	ldr	r3, [pc, #620]	; (45e0 <__aeabi_ddiv+0x65c>)
    4372:	401a      	ands	r2, r3
    4374:	2380      	movs	r3, #128	; 0x80
    4376:	4693      	mov	fp, r2
    4378:	00db      	lsls	r3, r3, #3
    437a:	18e3      	adds	r3, r4, r3
    437c:	4a99      	ldr	r2, [pc, #612]	; (45e4 <__aeabi_ddiv+0x660>)
    437e:	4293      	cmp	r3, r2
    4380:	dd68      	ble.n	4454 <__aeabi_ddiv+0x4d0>
    4382:	2301      	movs	r3, #1
    4384:	9a02      	ldr	r2, [sp, #8]
    4386:	4c98      	ldr	r4, [pc, #608]	; (45e8 <__aeabi_ddiv+0x664>)
    4388:	401a      	ands	r2, r3
    438a:	2300      	movs	r3, #0
    438c:	4694      	mov	ip, r2
    438e:	4698      	mov	r8, r3
    4390:	2200      	movs	r2, #0
    4392:	e6c5      	b.n	4120 <__aeabi_ddiv+0x19c>
    4394:	2280      	movs	r2, #128	; 0x80
    4396:	464b      	mov	r3, r9
    4398:	0312      	lsls	r2, r2, #12
    439a:	4213      	tst	r3, r2
    439c:	d00a      	beq.n	43b4 <__aeabi_ddiv+0x430>
    439e:	465b      	mov	r3, fp
    43a0:	4213      	tst	r3, r2
    43a2:	d106      	bne.n	43b2 <__aeabi_ddiv+0x42e>
    43a4:	431a      	orrs	r2, r3
    43a6:	0312      	lsls	r2, r2, #12
    43a8:	0b12      	lsrs	r2, r2, #12
    43aa:	46ac      	mov	ip, r5
    43ac:	4688      	mov	r8, r1
    43ae:	4c8e      	ldr	r4, [pc, #568]	; (45e8 <__aeabi_ddiv+0x664>)
    43b0:	e6b6      	b.n	4120 <__aeabi_ddiv+0x19c>
    43b2:	464b      	mov	r3, r9
    43b4:	431a      	orrs	r2, r3
    43b6:	0312      	lsls	r2, r2, #12
    43b8:	0b12      	lsrs	r2, r2, #12
    43ba:	46bc      	mov	ip, r7
    43bc:	4c8a      	ldr	r4, [pc, #552]	; (45e8 <__aeabi_ddiv+0x664>)
    43be:	e6af      	b.n	4120 <__aeabi_ddiv+0x19c>
    43c0:	0003      	movs	r3, r0
    43c2:	465a      	mov	r2, fp
    43c4:	3b28      	subs	r3, #40	; 0x28
    43c6:	409a      	lsls	r2, r3
    43c8:	2300      	movs	r3, #0
    43ca:	4691      	mov	r9, r2
    43cc:	4698      	mov	r8, r3
    43ce:	e657      	b.n	4080 <__aeabi_ddiv+0xfc>
    43d0:	4658      	mov	r0, fp
    43d2:	f000 ff0d 	bl	51f0 <__clzsi2>
    43d6:	3020      	adds	r0, #32
    43d8:	e640      	b.n	405c <__aeabi_ddiv+0xd8>
    43da:	0003      	movs	r3, r0
    43dc:	4652      	mov	r2, sl
    43de:	3b28      	subs	r3, #40	; 0x28
    43e0:	409a      	lsls	r2, r3
    43e2:	2100      	movs	r1, #0
    43e4:	4693      	mov	fp, r2
    43e6:	e677      	b.n	40d8 <__aeabi_ddiv+0x154>
    43e8:	f000 ff02 	bl	51f0 <__clzsi2>
    43ec:	3020      	adds	r0, #32
    43ee:	e65f      	b.n	40b0 <__aeabi_ddiv+0x12c>
    43f0:	4588      	cmp	r8, r1
    43f2:	d200      	bcs.n	43f6 <__aeabi_ddiv+0x472>
    43f4:	e6c7      	b.n	4186 <__aeabi_ddiv+0x202>
    43f6:	464b      	mov	r3, r9
    43f8:	07de      	lsls	r6, r3, #31
    43fa:	085d      	lsrs	r5, r3, #1
    43fc:	4643      	mov	r3, r8
    43fe:	085b      	lsrs	r3, r3, #1
    4400:	431e      	orrs	r6, r3
    4402:	4643      	mov	r3, r8
    4404:	07db      	lsls	r3, r3, #31
    4406:	469a      	mov	sl, r3
    4408:	e6c2      	b.n	4190 <__aeabi_ddiv+0x20c>
    440a:	2500      	movs	r5, #0
    440c:	4592      	cmp	sl, r2
    440e:	d300      	bcc.n	4412 <__aeabi_ddiv+0x48e>
    4410:	e733      	b.n	427a <__aeabi_ddiv+0x2f6>
    4412:	9e03      	ldr	r6, [sp, #12]
    4414:	4659      	mov	r1, fp
    4416:	46b4      	mov	ip, r6
    4418:	44e2      	add	sl, ip
    441a:	45b2      	cmp	sl, r6
    441c:	41ad      	sbcs	r5, r5
    441e:	426d      	negs	r5, r5
    4420:	4445      	add	r5, r8
    4422:	18eb      	adds	r3, r5, r3
    4424:	3901      	subs	r1, #1
    4426:	4598      	cmp	r8, r3
    4428:	d207      	bcs.n	443a <__aeabi_ddiv+0x4b6>
    442a:	4298      	cmp	r0, r3
    442c:	d900      	bls.n	4430 <__aeabi_ddiv+0x4ac>
    442e:	e07f      	b.n	4530 <__aeabi_ddiv+0x5ac>
    4430:	d100      	bne.n	4434 <__aeabi_ddiv+0x4b0>
    4432:	e0bc      	b.n	45ae <__aeabi_ddiv+0x62a>
    4434:	1a1d      	subs	r5, r3, r0
    4436:	468b      	mov	fp, r1
    4438:	e71f      	b.n	427a <__aeabi_ddiv+0x2f6>
    443a:	4598      	cmp	r8, r3
    443c:	d1fa      	bne.n	4434 <__aeabi_ddiv+0x4b0>
    443e:	9d03      	ldr	r5, [sp, #12]
    4440:	4555      	cmp	r5, sl
    4442:	d9f2      	bls.n	442a <__aeabi_ddiv+0x4a6>
    4444:	4643      	mov	r3, r8
    4446:	468b      	mov	fp, r1
    4448:	1a1d      	subs	r5, r3, r0
    444a:	e716      	b.n	427a <__aeabi_ddiv+0x2f6>
    444c:	469b      	mov	fp, r3
    444e:	e6ca      	b.n	41e6 <__aeabi_ddiv+0x262>
    4450:	0015      	movs	r5, r2
    4452:	e6e7      	b.n	4224 <__aeabi_ddiv+0x2a0>
    4454:	465a      	mov	r2, fp
    4456:	08c9      	lsrs	r1, r1, #3
    4458:	0752      	lsls	r2, r2, #29
    445a:	430a      	orrs	r2, r1
    445c:	055b      	lsls	r3, r3, #21
    445e:	4690      	mov	r8, r2
    4460:	0d5c      	lsrs	r4, r3, #21
    4462:	465a      	mov	r2, fp
    4464:	2301      	movs	r3, #1
    4466:	9902      	ldr	r1, [sp, #8]
    4468:	0252      	lsls	r2, r2, #9
    446a:	4019      	ands	r1, r3
    446c:	0b12      	lsrs	r2, r2, #12
    446e:	468c      	mov	ip, r1
    4470:	e656      	b.n	4120 <__aeabi_ddiv+0x19c>
    4472:	2b00      	cmp	r3, #0
    4474:	d100      	bne.n	4478 <__aeabi_ddiv+0x4f4>
    4476:	e76f      	b.n	4358 <__aeabi_ddiv+0x3d4>
    4478:	4446      	add	r6, r8
    447a:	1e4a      	subs	r2, r1, #1
    447c:	45b0      	cmp	r8, r6
    447e:	d929      	bls.n	44d4 <__aeabi_ddiv+0x550>
    4480:	0011      	movs	r1, r2
    4482:	4286      	cmp	r6, r0
    4484:	d000      	beq.n	4488 <__aeabi_ddiv+0x504>
    4486:	e765      	b.n	4354 <__aeabi_ddiv+0x3d0>
    4488:	9a03      	ldr	r2, [sp, #12]
    448a:	4293      	cmp	r3, r2
    448c:	d000      	beq.n	4490 <__aeabi_ddiv+0x50c>
    448e:	e761      	b.n	4354 <__aeabi_ddiv+0x3d0>
    4490:	e762      	b.n	4358 <__aeabi_ddiv+0x3d4>
    4492:	2101      	movs	r1, #1
    4494:	4249      	negs	r1, r1
    4496:	2001      	movs	r0, #1
    4498:	1ac2      	subs	r2, r0, r3
    449a:	2a38      	cmp	r2, #56	; 0x38
    449c:	dd21      	ble.n	44e2 <__aeabi_ddiv+0x55e>
    449e:	9b02      	ldr	r3, [sp, #8]
    44a0:	4003      	ands	r3, r0
    44a2:	469c      	mov	ip, r3
    44a4:	e638      	b.n	4118 <__aeabi_ddiv+0x194>
    44a6:	220f      	movs	r2, #15
    44a8:	400a      	ands	r2, r1
    44aa:	2a04      	cmp	r2, #4
    44ac:	d100      	bne.n	44b0 <__aeabi_ddiv+0x52c>
    44ae:	e75b      	b.n	4368 <__aeabi_ddiv+0x3e4>
    44b0:	000a      	movs	r2, r1
    44b2:	1d11      	adds	r1, r2, #4
    44b4:	4291      	cmp	r1, r2
    44b6:	4192      	sbcs	r2, r2
    44b8:	4252      	negs	r2, r2
    44ba:	4493      	add	fp, r2
    44bc:	e754      	b.n	4368 <__aeabi_ddiv+0x3e4>
    44be:	4b47      	ldr	r3, [pc, #284]	; (45dc <__aeabi_ddiv+0x658>)
    44c0:	18e3      	adds	r3, r4, r3
    44c2:	2b00      	cmp	r3, #0
    44c4:	dde5      	ble.n	4492 <__aeabi_ddiv+0x50e>
    44c6:	2201      	movs	r2, #1
    44c8:	4252      	negs	r2, r2
    44ca:	e7f2      	b.n	44b2 <__aeabi_ddiv+0x52e>
    44cc:	001d      	movs	r5, r3
    44ce:	e6fa      	b.n	42c6 <__aeabi_ddiv+0x342>
    44d0:	469a      	mov	sl, r3
    44d2:	e71c      	b.n	430e <__aeabi_ddiv+0x38a>
    44d4:	42b0      	cmp	r0, r6
    44d6:	d839      	bhi.n	454c <__aeabi_ddiv+0x5c8>
    44d8:	d06e      	beq.n	45b8 <__aeabi_ddiv+0x634>
    44da:	0011      	movs	r1, r2
    44dc:	e73a      	b.n	4354 <__aeabi_ddiv+0x3d0>
    44de:	9302      	str	r3, [sp, #8]
    44e0:	e73a      	b.n	4358 <__aeabi_ddiv+0x3d4>
    44e2:	2a1f      	cmp	r2, #31
    44e4:	dc3c      	bgt.n	4560 <__aeabi_ddiv+0x5dc>
    44e6:	2320      	movs	r3, #32
    44e8:	1a9b      	subs	r3, r3, r2
    44ea:	000c      	movs	r4, r1
    44ec:	4658      	mov	r0, fp
    44ee:	4099      	lsls	r1, r3
    44f0:	4098      	lsls	r0, r3
    44f2:	1e4b      	subs	r3, r1, #1
    44f4:	4199      	sbcs	r1, r3
    44f6:	465b      	mov	r3, fp
    44f8:	40d4      	lsrs	r4, r2
    44fa:	40d3      	lsrs	r3, r2
    44fc:	4320      	orrs	r0, r4
    44fe:	4308      	orrs	r0, r1
    4500:	001a      	movs	r2, r3
    4502:	0743      	lsls	r3, r0, #29
    4504:	d009      	beq.n	451a <__aeabi_ddiv+0x596>
    4506:	230f      	movs	r3, #15
    4508:	4003      	ands	r3, r0
    450a:	2b04      	cmp	r3, #4
    450c:	d005      	beq.n	451a <__aeabi_ddiv+0x596>
    450e:	0001      	movs	r1, r0
    4510:	1d08      	adds	r0, r1, #4
    4512:	4288      	cmp	r0, r1
    4514:	419b      	sbcs	r3, r3
    4516:	425b      	negs	r3, r3
    4518:	18d2      	adds	r2, r2, r3
    451a:	0213      	lsls	r3, r2, #8
    451c:	d53a      	bpl.n	4594 <__aeabi_ddiv+0x610>
    451e:	2301      	movs	r3, #1
    4520:	9a02      	ldr	r2, [sp, #8]
    4522:	2401      	movs	r4, #1
    4524:	401a      	ands	r2, r3
    4526:	2300      	movs	r3, #0
    4528:	4694      	mov	ip, r2
    452a:	4698      	mov	r8, r3
    452c:	2200      	movs	r2, #0
    452e:	e5f7      	b.n	4120 <__aeabi_ddiv+0x19c>
    4530:	2102      	movs	r1, #2
    4532:	4249      	negs	r1, r1
    4534:	468c      	mov	ip, r1
    4536:	9d03      	ldr	r5, [sp, #12]
    4538:	44e3      	add	fp, ip
    453a:	46ac      	mov	ip, r5
    453c:	44e2      	add	sl, ip
    453e:	45aa      	cmp	sl, r5
    4540:	41ad      	sbcs	r5, r5
    4542:	426d      	negs	r5, r5
    4544:	4445      	add	r5, r8
    4546:	18ed      	adds	r5, r5, r3
    4548:	1a2d      	subs	r5, r5, r0
    454a:	e696      	b.n	427a <__aeabi_ddiv+0x2f6>
    454c:	1e8a      	subs	r2, r1, #2
    454e:	9903      	ldr	r1, [sp, #12]
    4550:	004d      	lsls	r5, r1, #1
    4552:	428d      	cmp	r5, r1
    4554:	4189      	sbcs	r1, r1
    4556:	4249      	negs	r1, r1
    4558:	4441      	add	r1, r8
    455a:	1876      	adds	r6, r6, r1
    455c:	9503      	str	r5, [sp, #12]
    455e:	e78f      	b.n	4480 <__aeabi_ddiv+0x4fc>
    4560:	201f      	movs	r0, #31
    4562:	4240      	negs	r0, r0
    4564:	1ac3      	subs	r3, r0, r3
    4566:	4658      	mov	r0, fp
    4568:	40d8      	lsrs	r0, r3
    456a:	0003      	movs	r3, r0
    456c:	2a20      	cmp	r2, #32
    456e:	d028      	beq.n	45c2 <__aeabi_ddiv+0x63e>
    4570:	2040      	movs	r0, #64	; 0x40
    4572:	465d      	mov	r5, fp
    4574:	1a82      	subs	r2, r0, r2
    4576:	4095      	lsls	r5, r2
    4578:	4329      	orrs	r1, r5
    457a:	1e4a      	subs	r2, r1, #1
    457c:	4191      	sbcs	r1, r2
    457e:	4319      	orrs	r1, r3
    4580:	2307      	movs	r3, #7
    4582:	2200      	movs	r2, #0
    4584:	400b      	ands	r3, r1
    4586:	d009      	beq.n	459c <__aeabi_ddiv+0x618>
    4588:	230f      	movs	r3, #15
    458a:	2200      	movs	r2, #0
    458c:	400b      	ands	r3, r1
    458e:	0008      	movs	r0, r1
    4590:	2b04      	cmp	r3, #4
    4592:	d1bd      	bne.n	4510 <__aeabi_ddiv+0x58c>
    4594:	0001      	movs	r1, r0
    4596:	0753      	lsls	r3, r2, #29
    4598:	0252      	lsls	r2, r2, #9
    459a:	0b12      	lsrs	r2, r2, #12
    459c:	08c9      	lsrs	r1, r1, #3
    459e:	4319      	orrs	r1, r3
    45a0:	2301      	movs	r3, #1
    45a2:	4688      	mov	r8, r1
    45a4:	9902      	ldr	r1, [sp, #8]
    45a6:	2400      	movs	r4, #0
    45a8:	4019      	ands	r1, r3
    45aa:	468c      	mov	ip, r1
    45ac:	e5b8      	b.n	4120 <__aeabi_ddiv+0x19c>
    45ae:	4552      	cmp	r2, sl
    45b0:	d8be      	bhi.n	4530 <__aeabi_ddiv+0x5ac>
    45b2:	468b      	mov	fp, r1
    45b4:	2500      	movs	r5, #0
    45b6:	e660      	b.n	427a <__aeabi_ddiv+0x2f6>
    45b8:	9d03      	ldr	r5, [sp, #12]
    45ba:	429d      	cmp	r5, r3
    45bc:	d3c6      	bcc.n	454c <__aeabi_ddiv+0x5c8>
    45be:	0011      	movs	r1, r2
    45c0:	e762      	b.n	4488 <__aeabi_ddiv+0x504>
    45c2:	2500      	movs	r5, #0
    45c4:	e7d8      	b.n	4578 <__aeabi_ddiv+0x5f4>
    45c6:	2280      	movs	r2, #128	; 0x80
    45c8:	465b      	mov	r3, fp
    45ca:	0312      	lsls	r2, r2, #12
    45cc:	431a      	orrs	r2, r3
    45ce:	9b01      	ldr	r3, [sp, #4]
    45d0:	0312      	lsls	r2, r2, #12
    45d2:	0b12      	lsrs	r2, r2, #12
    45d4:	469c      	mov	ip, r3
    45d6:	4688      	mov	r8, r1
    45d8:	4c03      	ldr	r4, [pc, #12]	; (45e8 <__aeabi_ddiv+0x664>)
    45da:	e5a1      	b.n	4120 <__aeabi_ddiv+0x19c>
    45dc:	000003ff 	.word	0x000003ff
    45e0:	feffffff 	.word	0xfeffffff
    45e4:	000007fe 	.word	0x000007fe
    45e8:	000007ff 	.word	0x000007ff

000045ec <__aeabi_dmul>:
    45ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ee:	4657      	mov	r7, sl
    45f0:	4645      	mov	r5, r8
    45f2:	46de      	mov	lr, fp
    45f4:	464e      	mov	r6, r9
    45f6:	b5e0      	push	{r5, r6, r7, lr}
    45f8:	030c      	lsls	r4, r1, #12
    45fa:	4698      	mov	r8, r3
    45fc:	004e      	lsls	r6, r1, #1
    45fe:	0b23      	lsrs	r3, r4, #12
    4600:	b087      	sub	sp, #28
    4602:	0007      	movs	r7, r0
    4604:	4692      	mov	sl, r2
    4606:	469b      	mov	fp, r3
    4608:	0d76      	lsrs	r6, r6, #21
    460a:	0fcd      	lsrs	r5, r1, #31
    460c:	2e00      	cmp	r6, #0
    460e:	d06b      	beq.n	46e8 <__aeabi_dmul+0xfc>
    4610:	4b6d      	ldr	r3, [pc, #436]	; (47c8 <__aeabi_dmul+0x1dc>)
    4612:	429e      	cmp	r6, r3
    4614:	d035      	beq.n	4682 <__aeabi_dmul+0x96>
    4616:	2480      	movs	r4, #128	; 0x80
    4618:	465b      	mov	r3, fp
    461a:	0f42      	lsrs	r2, r0, #29
    461c:	0424      	lsls	r4, r4, #16
    461e:	00db      	lsls	r3, r3, #3
    4620:	4314      	orrs	r4, r2
    4622:	431c      	orrs	r4, r3
    4624:	00c3      	lsls	r3, r0, #3
    4626:	4699      	mov	r9, r3
    4628:	4b68      	ldr	r3, [pc, #416]	; (47cc <__aeabi_dmul+0x1e0>)
    462a:	46a3      	mov	fp, r4
    462c:	469c      	mov	ip, r3
    462e:	2300      	movs	r3, #0
    4630:	2700      	movs	r7, #0
    4632:	4466      	add	r6, ip
    4634:	9302      	str	r3, [sp, #8]
    4636:	4643      	mov	r3, r8
    4638:	031c      	lsls	r4, r3, #12
    463a:	005a      	lsls	r2, r3, #1
    463c:	0fdb      	lsrs	r3, r3, #31
    463e:	4650      	mov	r0, sl
    4640:	0b24      	lsrs	r4, r4, #12
    4642:	0d52      	lsrs	r2, r2, #21
    4644:	4698      	mov	r8, r3
    4646:	d100      	bne.n	464a <__aeabi_dmul+0x5e>
    4648:	e076      	b.n	4738 <__aeabi_dmul+0x14c>
    464a:	4b5f      	ldr	r3, [pc, #380]	; (47c8 <__aeabi_dmul+0x1dc>)
    464c:	429a      	cmp	r2, r3
    464e:	d06d      	beq.n	472c <__aeabi_dmul+0x140>
    4650:	2380      	movs	r3, #128	; 0x80
    4652:	0f41      	lsrs	r1, r0, #29
    4654:	041b      	lsls	r3, r3, #16
    4656:	430b      	orrs	r3, r1
    4658:	495c      	ldr	r1, [pc, #368]	; (47cc <__aeabi_dmul+0x1e0>)
    465a:	00e4      	lsls	r4, r4, #3
    465c:	468c      	mov	ip, r1
    465e:	431c      	orrs	r4, r3
    4660:	00c3      	lsls	r3, r0, #3
    4662:	2000      	movs	r0, #0
    4664:	4462      	add	r2, ip
    4666:	4641      	mov	r1, r8
    4668:	18b6      	adds	r6, r6, r2
    466a:	4069      	eors	r1, r5
    466c:	1c72      	adds	r2, r6, #1
    466e:	9101      	str	r1, [sp, #4]
    4670:	4694      	mov	ip, r2
    4672:	4307      	orrs	r7, r0
    4674:	2f0f      	cmp	r7, #15
    4676:	d900      	bls.n	467a <__aeabi_dmul+0x8e>
    4678:	e0b0      	b.n	47dc <__aeabi_dmul+0x1f0>
    467a:	4a55      	ldr	r2, [pc, #340]	; (47d0 <__aeabi_dmul+0x1e4>)
    467c:	00bf      	lsls	r7, r7, #2
    467e:	59d2      	ldr	r2, [r2, r7]
    4680:	4697      	mov	pc, r2
    4682:	465b      	mov	r3, fp
    4684:	4303      	orrs	r3, r0
    4686:	4699      	mov	r9, r3
    4688:	d000      	beq.n	468c <__aeabi_dmul+0xa0>
    468a:	e087      	b.n	479c <__aeabi_dmul+0x1b0>
    468c:	2300      	movs	r3, #0
    468e:	469b      	mov	fp, r3
    4690:	3302      	adds	r3, #2
    4692:	2708      	movs	r7, #8
    4694:	9302      	str	r3, [sp, #8]
    4696:	e7ce      	b.n	4636 <__aeabi_dmul+0x4a>
    4698:	4642      	mov	r2, r8
    469a:	9201      	str	r2, [sp, #4]
    469c:	2802      	cmp	r0, #2
    469e:	d067      	beq.n	4770 <__aeabi_dmul+0x184>
    46a0:	2803      	cmp	r0, #3
    46a2:	d100      	bne.n	46a6 <__aeabi_dmul+0xba>
    46a4:	e20e      	b.n	4ac4 <__aeabi_dmul+0x4d8>
    46a6:	2801      	cmp	r0, #1
    46a8:	d000      	beq.n	46ac <__aeabi_dmul+0xc0>
    46aa:	e162      	b.n	4972 <__aeabi_dmul+0x386>
    46ac:	2300      	movs	r3, #0
    46ae:	2400      	movs	r4, #0
    46b0:	2200      	movs	r2, #0
    46b2:	4699      	mov	r9, r3
    46b4:	9901      	ldr	r1, [sp, #4]
    46b6:	4001      	ands	r1, r0
    46b8:	b2cd      	uxtb	r5, r1
    46ba:	2100      	movs	r1, #0
    46bc:	0312      	lsls	r2, r2, #12
    46be:	0d0b      	lsrs	r3, r1, #20
    46c0:	0b12      	lsrs	r2, r2, #12
    46c2:	051b      	lsls	r3, r3, #20
    46c4:	4313      	orrs	r3, r2
    46c6:	4a43      	ldr	r2, [pc, #268]	; (47d4 <__aeabi_dmul+0x1e8>)
    46c8:	0524      	lsls	r4, r4, #20
    46ca:	4013      	ands	r3, r2
    46cc:	431c      	orrs	r4, r3
    46ce:	0064      	lsls	r4, r4, #1
    46d0:	07ed      	lsls	r5, r5, #31
    46d2:	0864      	lsrs	r4, r4, #1
    46d4:	432c      	orrs	r4, r5
    46d6:	4648      	mov	r0, r9
    46d8:	0021      	movs	r1, r4
    46da:	b007      	add	sp, #28
    46dc:	bc3c      	pop	{r2, r3, r4, r5}
    46de:	4690      	mov	r8, r2
    46e0:	4699      	mov	r9, r3
    46e2:	46a2      	mov	sl, r4
    46e4:	46ab      	mov	fp, r5
    46e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46e8:	4303      	orrs	r3, r0
    46ea:	4699      	mov	r9, r3
    46ec:	d04f      	beq.n	478e <__aeabi_dmul+0x1a2>
    46ee:	465b      	mov	r3, fp
    46f0:	2b00      	cmp	r3, #0
    46f2:	d100      	bne.n	46f6 <__aeabi_dmul+0x10a>
    46f4:	e189      	b.n	4a0a <__aeabi_dmul+0x41e>
    46f6:	4658      	mov	r0, fp
    46f8:	f000 fd7a 	bl	51f0 <__clzsi2>
    46fc:	0003      	movs	r3, r0
    46fe:	3b0b      	subs	r3, #11
    4700:	2b1c      	cmp	r3, #28
    4702:	dd00      	ble.n	4706 <__aeabi_dmul+0x11a>
    4704:	e17a      	b.n	49fc <__aeabi_dmul+0x410>
    4706:	221d      	movs	r2, #29
    4708:	1ad3      	subs	r3, r2, r3
    470a:	003a      	movs	r2, r7
    470c:	0001      	movs	r1, r0
    470e:	465c      	mov	r4, fp
    4710:	40da      	lsrs	r2, r3
    4712:	3908      	subs	r1, #8
    4714:	408c      	lsls	r4, r1
    4716:	0013      	movs	r3, r2
    4718:	408f      	lsls	r7, r1
    471a:	4323      	orrs	r3, r4
    471c:	469b      	mov	fp, r3
    471e:	46b9      	mov	r9, r7
    4720:	2300      	movs	r3, #0
    4722:	4e2d      	ldr	r6, [pc, #180]	; (47d8 <__aeabi_dmul+0x1ec>)
    4724:	2700      	movs	r7, #0
    4726:	1a36      	subs	r6, r6, r0
    4728:	9302      	str	r3, [sp, #8]
    472a:	e784      	b.n	4636 <__aeabi_dmul+0x4a>
    472c:	4653      	mov	r3, sl
    472e:	4323      	orrs	r3, r4
    4730:	d12a      	bne.n	4788 <__aeabi_dmul+0x19c>
    4732:	2400      	movs	r4, #0
    4734:	2002      	movs	r0, #2
    4736:	e796      	b.n	4666 <__aeabi_dmul+0x7a>
    4738:	4653      	mov	r3, sl
    473a:	4323      	orrs	r3, r4
    473c:	d020      	beq.n	4780 <__aeabi_dmul+0x194>
    473e:	2c00      	cmp	r4, #0
    4740:	d100      	bne.n	4744 <__aeabi_dmul+0x158>
    4742:	e157      	b.n	49f4 <__aeabi_dmul+0x408>
    4744:	0020      	movs	r0, r4
    4746:	f000 fd53 	bl	51f0 <__clzsi2>
    474a:	0003      	movs	r3, r0
    474c:	3b0b      	subs	r3, #11
    474e:	2b1c      	cmp	r3, #28
    4750:	dd00      	ble.n	4754 <__aeabi_dmul+0x168>
    4752:	e149      	b.n	49e8 <__aeabi_dmul+0x3fc>
    4754:	211d      	movs	r1, #29
    4756:	1acb      	subs	r3, r1, r3
    4758:	4651      	mov	r1, sl
    475a:	0002      	movs	r2, r0
    475c:	40d9      	lsrs	r1, r3
    475e:	4653      	mov	r3, sl
    4760:	3a08      	subs	r2, #8
    4762:	4094      	lsls	r4, r2
    4764:	4093      	lsls	r3, r2
    4766:	430c      	orrs	r4, r1
    4768:	4a1b      	ldr	r2, [pc, #108]	; (47d8 <__aeabi_dmul+0x1ec>)
    476a:	1a12      	subs	r2, r2, r0
    476c:	2000      	movs	r0, #0
    476e:	e77a      	b.n	4666 <__aeabi_dmul+0x7a>
    4770:	2501      	movs	r5, #1
    4772:	9b01      	ldr	r3, [sp, #4]
    4774:	4c14      	ldr	r4, [pc, #80]	; (47c8 <__aeabi_dmul+0x1dc>)
    4776:	401d      	ands	r5, r3
    4778:	2300      	movs	r3, #0
    477a:	2200      	movs	r2, #0
    477c:	4699      	mov	r9, r3
    477e:	e79c      	b.n	46ba <__aeabi_dmul+0xce>
    4780:	2400      	movs	r4, #0
    4782:	2200      	movs	r2, #0
    4784:	2001      	movs	r0, #1
    4786:	e76e      	b.n	4666 <__aeabi_dmul+0x7a>
    4788:	4653      	mov	r3, sl
    478a:	2003      	movs	r0, #3
    478c:	e76b      	b.n	4666 <__aeabi_dmul+0x7a>
    478e:	2300      	movs	r3, #0
    4790:	469b      	mov	fp, r3
    4792:	3301      	adds	r3, #1
    4794:	2704      	movs	r7, #4
    4796:	2600      	movs	r6, #0
    4798:	9302      	str	r3, [sp, #8]
    479a:	e74c      	b.n	4636 <__aeabi_dmul+0x4a>
    479c:	2303      	movs	r3, #3
    479e:	4681      	mov	r9, r0
    47a0:	270c      	movs	r7, #12
    47a2:	9302      	str	r3, [sp, #8]
    47a4:	e747      	b.n	4636 <__aeabi_dmul+0x4a>
    47a6:	2280      	movs	r2, #128	; 0x80
    47a8:	2300      	movs	r3, #0
    47aa:	2500      	movs	r5, #0
    47ac:	0312      	lsls	r2, r2, #12
    47ae:	4699      	mov	r9, r3
    47b0:	4c05      	ldr	r4, [pc, #20]	; (47c8 <__aeabi_dmul+0x1dc>)
    47b2:	e782      	b.n	46ba <__aeabi_dmul+0xce>
    47b4:	465c      	mov	r4, fp
    47b6:	464b      	mov	r3, r9
    47b8:	9802      	ldr	r0, [sp, #8]
    47ba:	e76f      	b.n	469c <__aeabi_dmul+0xb0>
    47bc:	465c      	mov	r4, fp
    47be:	464b      	mov	r3, r9
    47c0:	9501      	str	r5, [sp, #4]
    47c2:	9802      	ldr	r0, [sp, #8]
    47c4:	e76a      	b.n	469c <__aeabi_dmul+0xb0>
    47c6:	46c0      	nop			; (mov r8, r8)
    47c8:	000007ff 	.word	0x000007ff
    47cc:	fffffc01 	.word	0xfffffc01
    47d0:	000055b8 	.word	0x000055b8
    47d4:	800fffff 	.word	0x800fffff
    47d8:	fffffc0d 	.word	0xfffffc0d
    47dc:	464a      	mov	r2, r9
    47de:	4649      	mov	r1, r9
    47e0:	0c17      	lsrs	r7, r2, #16
    47e2:	0c1a      	lsrs	r2, r3, #16
    47e4:	041b      	lsls	r3, r3, #16
    47e6:	0c1b      	lsrs	r3, r3, #16
    47e8:	0408      	lsls	r0, r1, #16
    47ea:	0019      	movs	r1, r3
    47ec:	0c00      	lsrs	r0, r0, #16
    47ee:	4341      	muls	r1, r0
    47f0:	0015      	movs	r5, r2
    47f2:	4688      	mov	r8, r1
    47f4:	0019      	movs	r1, r3
    47f6:	437d      	muls	r5, r7
    47f8:	4379      	muls	r1, r7
    47fa:	9503      	str	r5, [sp, #12]
    47fc:	4689      	mov	r9, r1
    47fe:	0029      	movs	r1, r5
    4800:	0015      	movs	r5, r2
    4802:	4345      	muls	r5, r0
    4804:	444d      	add	r5, r9
    4806:	9502      	str	r5, [sp, #8]
    4808:	4645      	mov	r5, r8
    480a:	0c2d      	lsrs	r5, r5, #16
    480c:	46aa      	mov	sl, r5
    480e:	9d02      	ldr	r5, [sp, #8]
    4810:	4455      	add	r5, sl
    4812:	45a9      	cmp	r9, r5
    4814:	d906      	bls.n	4824 <__aeabi_dmul+0x238>
    4816:	468a      	mov	sl, r1
    4818:	2180      	movs	r1, #128	; 0x80
    481a:	0249      	lsls	r1, r1, #9
    481c:	4689      	mov	r9, r1
    481e:	44ca      	add	sl, r9
    4820:	4651      	mov	r1, sl
    4822:	9103      	str	r1, [sp, #12]
    4824:	0c29      	lsrs	r1, r5, #16
    4826:	9104      	str	r1, [sp, #16]
    4828:	4641      	mov	r1, r8
    482a:	0409      	lsls	r1, r1, #16
    482c:	042d      	lsls	r5, r5, #16
    482e:	0c09      	lsrs	r1, r1, #16
    4830:	4688      	mov	r8, r1
    4832:	0029      	movs	r1, r5
    4834:	0c25      	lsrs	r5, r4, #16
    4836:	0424      	lsls	r4, r4, #16
    4838:	4441      	add	r1, r8
    483a:	0c24      	lsrs	r4, r4, #16
    483c:	9105      	str	r1, [sp, #20]
    483e:	0021      	movs	r1, r4
    4840:	4341      	muls	r1, r0
    4842:	4688      	mov	r8, r1
    4844:	0021      	movs	r1, r4
    4846:	4379      	muls	r1, r7
    4848:	468a      	mov	sl, r1
    484a:	4368      	muls	r0, r5
    484c:	4641      	mov	r1, r8
    484e:	4450      	add	r0, sl
    4850:	4681      	mov	r9, r0
    4852:	0c08      	lsrs	r0, r1, #16
    4854:	4448      	add	r0, r9
    4856:	436f      	muls	r7, r5
    4858:	4582      	cmp	sl, r0
    485a:	d903      	bls.n	4864 <__aeabi_dmul+0x278>
    485c:	2180      	movs	r1, #128	; 0x80
    485e:	0249      	lsls	r1, r1, #9
    4860:	4689      	mov	r9, r1
    4862:	444f      	add	r7, r9
    4864:	0c01      	lsrs	r1, r0, #16
    4866:	4689      	mov	r9, r1
    4868:	0039      	movs	r1, r7
    486a:	4449      	add	r1, r9
    486c:	9102      	str	r1, [sp, #8]
    486e:	4641      	mov	r1, r8
    4870:	040f      	lsls	r7, r1, #16
    4872:	9904      	ldr	r1, [sp, #16]
    4874:	0c3f      	lsrs	r7, r7, #16
    4876:	4688      	mov	r8, r1
    4878:	0400      	lsls	r0, r0, #16
    487a:	19c0      	adds	r0, r0, r7
    487c:	4480      	add	r8, r0
    487e:	4641      	mov	r1, r8
    4880:	9104      	str	r1, [sp, #16]
    4882:	4659      	mov	r1, fp
    4884:	0c0f      	lsrs	r7, r1, #16
    4886:	0409      	lsls	r1, r1, #16
    4888:	0c09      	lsrs	r1, r1, #16
    488a:	4688      	mov	r8, r1
    488c:	4359      	muls	r1, r3
    488e:	468a      	mov	sl, r1
    4890:	0039      	movs	r1, r7
    4892:	4351      	muls	r1, r2
    4894:	4689      	mov	r9, r1
    4896:	4641      	mov	r1, r8
    4898:	434a      	muls	r2, r1
    489a:	4651      	mov	r1, sl
    489c:	0c09      	lsrs	r1, r1, #16
    489e:	468b      	mov	fp, r1
    48a0:	437b      	muls	r3, r7
    48a2:	18d2      	adds	r2, r2, r3
    48a4:	445a      	add	r2, fp
    48a6:	4293      	cmp	r3, r2
    48a8:	d903      	bls.n	48b2 <__aeabi_dmul+0x2c6>
    48aa:	2380      	movs	r3, #128	; 0x80
    48ac:	025b      	lsls	r3, r3, #9
    48ae:	469b      	mov	fp, r3
    48b0:	44d9      	add	r9, fp
    48b2:	4651      	mov	r1, sl
    48b4:	0409      	lsls	r1, r1, #16
    48b6:	0c09      	lsrs	r1, r1, #16
    48b8:	468a      	mov	sl, r1
    48ba:	4641      	mov	r1, r8
    48bc:	4361      	muls	r1, r4
    48be:	437c      	muls	r4, r7
    48c0:	0c13      	lsrs	r3, r2, #16
    48c2:	0412      	lsls	r2, r2, #16
    48c4:	444b      	add	r3, r9
    48c6:	4452      	add	r2, sl
    48c8:	46a1      	mov	r9, r4
    48ca:	468a      	mov	sl, r1
    48cc:	003c      	movs	r4, r7
    48ce:	4641      	mov	r1, r8
    48d0:	436c      	muls	r4, r5
    48d2:	434d      	muls	r5, r1
    48d4:	4651      	mov	r1, sl
    48d6:	444d      	add	r5, r9
    48d8:	0c0f      	lsrs	r7, r1, #16
    48da:	197d      	adds	r5, r7, r5
    48dc:	45a9      	cmp	r9, r5
    48de:	d903      	bls.n	48e8 <__aeabi_dmul+0x2fc>
    48e0:	2180      	movs	r1, #128	; 0x80
    48e2:	0249      	lsls	r1, r1, #9
    48e4:	4688      	mov	r8, r1
    48e6:	4444      	add	r4, r8
    48e8:	9f04      	ldr	r7, [sp, #16]
    48ea:	9903      	ldr	r1, [sp, #12]
    48ec:	46b8      	mov	r8, r7
    48ee:	4441      	add	r1, r8
    48f0:	468b      	mov	fp, r1
    48f2:	4583      	cmp	fp, r0
    48f4:	4180      	sbcs	r0, r0
    48f6:	4241      	negs	r1, r0
    48f8:	4688      	mov	r8, r1
    48fa:	4651      	mov	r1, sl
    48fc:	0408      	lsls	r0, r1, #16
    48fe:	042f      	lsls	r7, r5, #16
    4900:	0c00      	lsrs	r0, r0, #16
    4902:	183f      	adds	r7, r7, r0
    4904:	4658      	mov	r0, fp
    4906:	9902      	ldr	r1, [sp, #8]
    4908:	1810      	adds	r0, r2, r0
    490a:	4689      	mov	r9, r1
    490c:	4290      	cmp	r0, r2
    490e:	4192      	sbcs	r2, r2
    4910:	444f      	add	r7, r9
    4912:	46ba      	mov	sl, r7
    4914:	4252      	negs	r2, r2
    4916:	4699      	mov	r9, r3
    4918:	4693      	mov	fp, r2
    491a:	44c2      	add	sl, r8
    491c:	44d1      	add	r9, sl
    491e:	44cb      	add	fp, r9
    4920:	428f      	cmp	r7, r1
    4922:	41bf      	sbcs	r7, r7
    4924:	45c2      	cmp	sl, r8
    4926:	4189      	sbcs	r1, r1
    4928:	4599      	cmp	r9, r3
    492a:	419b      	sbcs	r3, r3
    492c:	4593      	cmp	fp, r2
    492e:	4192      	sbcs	r2, r2
    4930:	427f      	negs	r7, r7
    4932:	4249      	negs	r1, r1
    4934:	0c2d      	lsrs	r5, r5, #16
    4936:	4252      	negs	r2, r2
    4938:	430f      	orrs	r7, r1
    493a:	425b      	negs	r3, r3
    493c:	4313      	orrs	r3, r2
    493e:	197f      	adds	r7, r7, r5
    4940:	18ff      	adds	r7, r7, r3
    4942:	465b      	mov	r3, fp
    4944:	193c      	adds	r4, r7, r4
    4946:	0ddb      	lsrs	r3, r3, #23
    4948:	9a05      	ldr	r2, [sp, #20]
    494a:	0264      	lsls	r4, r4, #9
    494c:	431c      	orrs	r4, r3
    494e:	0243      	lsls	r3, r0, #9
    4950:	4313      	orrs	r3, r2
    4952:	1e5d      	subs	r5, r3, #1
    4954:	41ab      	sbcs	r3, r5
    4956:	465a      	mov	r2, fp
    4958:	0dc0      	lsrs	r0, r0, #23
    495a:	4303      	orrs	r3, r0
    495c:	0252      	lsls	r2, r2, #9
    495e:	4313      	orrs	r3, r2
    4960:	01e2      	lsls	r2, r4, #7
    4962:	d556      	bpl.n	4a12 <__aeabi_dmul+0x426>
    4964:	2001      	movs	r0, #1
    4966:	085a      	lsrs	r2, r3, #1
    4968:	4003      	ands	r3, r0
    496a:	4313      	orrs	r3, r2
    496c:	07e2      	lsls	r2, r4, #31
    496e:	4313      	orrs	r3, r2
    4970:	0864      	lsrs	r4, r4, #1
    4972:	485a      	ldr	r0, [pc, #360]	; (4adc <__aeabi_dmul+0x4f0>)
    4974:	4460      	add	r0, ip
    4976:	2800      	cmp	r0, #0
    4978:	dd4d      	ble.n	4a16 <__aeabi_dmul+0x42a>
    497a:	075a      	lsls	r2, r3, #29
    497c:	d009      	beq.n	4992 <__aeabi_dmul+0x3a6>
    497e:	220f      	movs	r2, #15
    4980:	401a      	ands	r2, r3
    4982:	2a04      	cmp	r2, #4
    4984:	d005      	beq.n	4992 <__aeabi_dmul+0x3a6>
    4986:	1d1a      	adds	r2, r3, #4
    4988:	429a      	cmp	r2, r3
    498a:	419b      	sbcs	r3, r3
    498c:	425b      	negs	r3, r3
    498e:	18e4      	adds	r4, r4, r3
    4990:	0013      	movs	r3, r2
    4992:	01e2      	lsls	r2, r4, #7
    4994:	d504      	bpl.n	49a0 <__aeabi_dmul+0x3b4>
    4996:	2080      	movs	r0, #128	; 0x80
    4998:	4a51      	ldr	r2, [pc, #324]	; (4ae0 <__aeabi_dmul+0x4f4>)
    499a:	00c0      	lsls	r0, r0, #3
    499c:	4014      	ands	r4, r2
    499e:	4460      	add	r0, ip
    49a0:	4a50      	ldr	r2, [pc, #320]	; (4ae4 <__aeabi_dmul+0x4f8>)
    49a2:	4290      	cmp	r0, r2
    49a4:	dd00      	ble.n	49a8 <__aeabi_dmul+0x3bc>
    49a6:	e6e3      	b.n	4770 <__aeabi_dmul+0x184>
    49a8:	2501      	movs	r5, #1
    49aa:	08db      	lsrs	r3, r3, #3
    49ac:	0762      	lsls	r2, r4, #29
    49ae:	431a      	orrs	r2, r3
    49b0:	0264      	lsls	r4, r4, #9
    49b2:	9b01      	ldr	r3, [sp, #4]
    49b4:	4691      	mov	r9, r2
    49b6:	0b22      	lsrs	r2, r4, #12
    49b8:	0544      	lsls	r4, r0, #21
    49ba:	0d64      	lsrs	r4, r4, #21
    49bc:	401d      	ands	r5, r3
    49be:	e67c      	b.n	46ba <__aeabi_dmul+0xce>
    49c0:	2280      	movs	r2, #128	; 0x80
    49c2:	4659      	mov	r1, fp
    49c4:	0312      	lsls	r2, r2, #12
    49c6:	4211      	tst	r1, r2
    49c8:	d008      	beq.n	49dc <__aeabi_dmul+0x3f0>
    49ca:	4214      	tst	r4, r2
    49cc:	d106      	bne.n	49dc <__aeabi_dmul+0x3f0>
    49ce:	4322      	orrs	r2, r4
    49d0:	0312      	lsls	r2, r2, #12
    49d2:	0b12      	lsrs	r2, r2, #12
    49d4:	4645      	mov	r5, r8
    49d6:	4699      	mov	r9, r3
    49d8:	4c43      	ldr	r4, [pc, #268]	; (4ae8 <__aeabi_dmul+0x4fc>)
    49da:	e66e      	b.n	46ba <__aeabi_dmul+0xce>
    49dc:	465b      	mov	r3, fp
    49de:	431a      	orrs	r2, r3
    49e0:	0312      	lsls	r2, r2, #12
    49e2:	0b12      	lsrs	r2, r2, #12
    49e4:	4c40      	ldr	r4, [pc, #256]	; (4ae8 <__aeabi_dmul+0x4fc>)
    49e6:	e668      	b.n	46ba <__aeabi_dmul+0xce>
    49e8:	0003      	movs	r3, r0
    49ea:	4654      	mov	r4, sl
    49ec:	3b28      	subs	r3, #40	; 0x28
    49ee:	409c      	lsls	r4, r3
    49f0:	2300      	movs	r3, #0
    49f2:	e6b9      	b.n	4768 <__aeabi_dmul+0x17c>
    49f4:	f000 fbfc 	bl	51f0 <__clzsi2>
    49f8:	3020      	adds	r0, #32
    49fa:	e6a6      	b.n	474a <__aeabi_dmul+0x15e>
    49fc:	0003      	movs	r3, r0
    49fe:	3b28      	subs	r3, #40	; 0x28
    4a00:	409f      	lsls	r7, r3
    4a02:	2300      	movs	r3, #0
    4a04:	46bb      	mov	fp, r7
    4a06:	4699      	mov	r9, r3
    4a08:	e68a      	b.n	4720 <__aeabi_dmul+0x134>
    4a0a:	f000 fbf1 	bl	51f0 <__clzsi2>
    4a0e:	3020      	adds	r0, #32
    4a10:	e674      	b.n	46fc <__aeabi_dmul+0x110>
    4a12:	46b4      	mov	ip, r6
    4a14:	e7ad      	b.n	4972 <__aeabi_dmul+0x386>
    4a16:	2501      	movs	r5, #1
    4a18:	1a2a      	subs	r2, r5, r0
    4a1a:	2a38      	cmp	r2, #56	; 0x38
    4a1c:	dd06      	ble.n	4a2c <__aeabi_dmul+0x440>
    4a1e:	9b01      	ldr	r3, [sp, #4]
    4a20:	2400      	movs	r4, #0
    4a22:	401d      	ands	r5, r3
    4a24:	2300      	movs	r3, #0
    4a26:	2200      	movs	r2, #0
    4a28:	4699      	mov	r9, r3
    4a2a:	e646      	b.n	46ba <__aeabi_dmul+0xce>
    4a2c:	2a1f      	cmp	r2, #31
    4a2e:	dc21      	bgt.n	4a74 <__aeabi_dmul+0x488>
    4a30:	2520      	movs	r5, #32
    4a32:	0020      	movs	r0, r4
    4a34:	1aad      	subs	r5, r5, r2
    4a36:	001e      	movs	r6, r3
    4a38:	40ab      	lsls	r3, r5
    4a3a:	40a8      	lsls	r0, r5
    4a3c:	40d6      	lsrs	r6, r2
    4a3e:	1e5d      	subs	r5, r3, #1
    4a40:	41ab      	sbcs	r3, r5
    4a42:	4330      	orrs	r0, r6
    4a44:	4318      	orrs	r0, r3
    4a46:	40d4      	lsrs	r4, r2
    4a48:	0743      	lsls	r3, r0, #29
    4a4a:	d009      	beq.n	4a60 <__aeabi_dmul+0x474>
    4a4c:	230f      	movs	r3, #15
    4a4e:	4003      	ands	r3, r0
    4a50:	2b04      	cmp	r3, #4
    4a52:	d005      	beq.n	4a60 <__aeabi_dmul+0x474>
    4a54:	0003      	movs	r3, r0
    4a56:	1d18      	adds	r0, r3, #4
    4a58:	4298      	cmp	r0, r3
    4a5a:	419b      	sbcs	r3, r3
    4a5c:	425b      	negs	r3, r3
    4a5e:	18e4      	adds	r4, r4, r3
    4a60:	0223      	lsls	r3, r4, #8
    4a62:	d521      	bpl.n	4aa8 <__aeabi_dmul+0x4bc>
    4a64:	2501      	movs	r5, #1
    4a66:	9b01      	ldr	r3, [sp, #4]
    4a68:	2401      	movs	r4, #1
    4a6a:	401d      	ands	r5, r3
    4a6c:	2300      	movs	r3, #0
    4a6e:	2200      	movs	r2, #0
    4a70:	4699      	mov	r9, r3
    4a72:	e622      	b.n	46ba <__aeabi_dmul+0xce>
    4a74:	251f      	movs	r5, #31
    4a76:	0021      	movs	r1, r4
    4a78:	426d      	negs	r5, r5
    4a7a:	1a28      	subs	r0, r5, r0
    4a7c:	40c1      	lsrs	r1, r0
    4a7e:	0008      	movs	r0, r1
    4a80:	2a20      	cmp	r2, #32
    4a82:	d01d      	beq.n	4ac0 <__aeabi_dmul+0x4d4>
    4a84:	355f      	adds	r5, #95	; 0x5f
    4a86:	1aaa      	subs	r2, r5, r2
    4a88:	4094      	lsls	r4, r2
    4a8a:	4323      	orrs	r3, r4
    4a8c:	1e5c      	subs	r4, r3, #1
    4a8e:	41a3      	sbcs	r3, r4
    4a90:	2507      	movs	r5, #7
    4a92:	4303      	orrs	r3, r0
    4a94:	401d      	ands	r5, r3
    4a96:	2200      	movs	r2, #0
    4a98:	2d00      	cmp	r5, #0
    4a9a:	d009      	beq.n	4ab0 <__aeabi_dmul+0x4c4>
    4a9c:	220f      	movs	r2, #15
    4a9e:	2400      	movs	r4, #0
    4aa0:	401a      	ands	r2, r3
    4aa2:	0018      	movs	r0, r3
    4aa4:	2a04      	cmp	r2, #4
    4aa6:	d1d6      	bne.n	4a56 <__aeabi_dmul+0x46a>
    4aa8:	0003      	movs	r3, r0
    4aaa:	0765      	lsls	r5, r4, #29
    4aac:	0264      	lsls	r4, r4, #9
    4aae:	0b22      	lsrs	r2, r4, #12
    4ab0:	08db      	lsrs	r3, r3, #3
    4ab2:	432b      	orrs	r3, r5
    4ab4:	2501      	movs	r5, #1
    4ab6:	4699      	mov	r9, r3
    4ab8:	9b01      	ldr	r3, [sp, #4]
    4aba:	2400      	movs	r4, #0
    4abc:	401d      	ands	r5, r3
    4abe:	e5fc      	b.n	46ba <__aeabi_dmul+0xce>
    4ac0:	2400      	movs	r4, #0
    4ac2:	e7e2      	b.n	4a8a <__aeabi_dmul+0x49e>
    4ac4:	2280      	movs	r2, #128	; 0x80
    4ac6:	2501      	movs	r5, #1
    4ac8:	0312      	lsls	r2, r2, #12
    4aca:	4322      	orrs	r2, r4
    4acc:	9901      	ldr	r1, [sp, #4]
    4ace:	0312      	lsls	r2, r2, #12
    4ad0:	0b12      	lsrs	r2, r2, #12
    4ad2:	400d      	ands	r5, r1
    4ad4:	4699      	mov	r9, r3
    4ad6:	4c04      	ldr	r4, [pc, #16]	; (4ae8 <__aeabi_dmul+0x4fc>)
    4ad8:	e5ef      	b.n	46ba <__aeabi_dmul+0xce>
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	000003ff 	.word	0x000003ff
    4ae0:	feffffff 	.word	0xfeffffff
    4ae4:	000007fe 	.word	0x000007fe
    4ae8:	000007ff 	.word	0x000007ff

00004aec <__aeabi_dsub>:
    4aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aee:	4646      	mov	r6, r8
    4af0:	46d6      	mov	lr, sl
    4af2:	464f      	mov	r7, r9
    4af4:	030c      	lsls	r4, r1, #12
    4af6:	b5c0      	push	{r6, r7, lr}
    4af8:	0fcd      	lsrs	r5, r1, #31
    4afa:	004e      	lsls	r6, r1, #1
    4afc:	0a61      	lsrs	r1, r4, #9
    4afe:	0f44      	lsrs	r4, r0, #29
    4b00:	430c      	orrs	r4, r1
    4b02:	00c1      	lsls	r1, r0, #3
    4b04:	0058      	lsls	r0, r3, #1
    4b06:	0d40      	lsrs	r0, r0, #21
    4b08:	4684      	mov	ip, r0
    4b0a:	468a      	mov	sl, r1
    4b0c:	000f      	movs	r7, r1
    4b0e:	0319      	lsls	r1, r3, #12
    4b10:	0f50      	lsrs	r0, r2, #29
    4b12:	0a49      	lsrs	r1, r1, #9
    4b14:	4301      	orrs	r1, r0
    4b16:	48c6      	ldr	r0, [pc, #792]	; (4e30 <__aeabi_dsub+0x344>)
    4b18:	0d76      	lsrs	r6, r6, #21
    4b1a:	46a8      	mov	r8, r5
    4b1c:	0fdb      	lsrs	r3, r3, #31
    4b1e:	00d2      	lsls	r2, r2, #3
    4b20:	4584      	cmp	ip, r0
    4b22:	d100      	bne.n	4b26 <__aeabi_dsub+0x3a>
    4b24:	e0d8      	b.n	4cd8 <__aeabi_dsub+0x1ec>
    4b26:	2001      	movs	r0, #1
    4b28:	4043      	eors	r3, r0
    4b2a:	42ab      	cmp	r3, r5
    4b2c:	d100      	bne.n	4b30 <__aeabi_dsub+0x44>
    4b2e:	e0a6      	b.n	4c7e <__aeabi_dsub+0x192>
    4b30:	4660      	mov	r0, ip
    4b32:	1a35      	subs	r5, r6, r0
    4b34:	2d00      	cmp	r5, #0
    4b36:	dc00      	bgt.n	4b3a <__aeabi_dsub+0x4e>
    4b38:	e105      	b.n	4d46 <__aeabi_dsub+0x25a>
    4b3a:	2800      	cmp	r0, #0
    4b3c:	d110      	bne.n	4b60 <__aeabi_dsub+0x74>
    4b3e:	000b      	movs	r3, r1
    4b40:	4313      	orrs	r3, r2
    4b42:	d100      	bne.n	4b46 <__aeabi_dsub+0x5a>
    4b44:	e0d7      	b.n	4cf6 <__aeabi_dsub+0x20a>
    4b46:	1e6b      	subs	r3, r5, #1
    4b48:	2b00      	cmp	r3, #0
    4b4a:	d000      	beq.n	4b4e <__aeabi_dsub+0x62>
    4b4c:	e14b      	b.n	4de6 <__aeabi_dsub+0x2fa>
    4b4e:	4653      	mov	r3, sl
    4b50:	1a9f      	subs	r7, r3, r2
    4b52:	45ba      	cmp	sl, r7
    4b54:	4180      	sbcs	r0, r0
    4b56:	1a64      	subs	r4, r4, r1
    4b58:	4240      	negs	r0, r0
    4b5a:	1a24      	subs	r4, r4, r0
    4b5c:	2601      	movs	r6, #1
    4b5e:	e01e      	b.n	4b9e <__aeabi_dsub+0xb2>
    4b60:	4bb3      	ldr	r3, [pc, #716]	; (4e30 <__aeabi_dsub+0x344>)
    4b62:	429e      	cmp	r6, r3
    4b64:	d048      	beq.n	4bf8 <__aeabi_dsub+0x10c>
    4b66:	2380      	movs	r3, #128	; 0x80
    4b68:	041b      	lsls	r3, r3, #16
    4b6a:	4319      	orrs	r1, r3
    4b6c:	2d38      	cmp	r5, #56	; 0x38
    4b6e:	dd00      	ble.n	4b72 <__aeabi_dsub+0x86>
    4b70:	e119      	b.n	4da6 <__aeabi_dsub+0x2ba>
    4b72:	2d1f      	cmp	r5, #31
    4b74:	dd00      	ble.n	4b78 <__aeabi_dsub+0x8c>
    4b76:	e14c      	b.n	4e12 <__aeabi_dsub+0x326>
    4b78:	2320      	movs	r3, #32
    4b7a:	000f      	movs	r7, r1
    4b7c:	1b5b      	subs	r3, r3, r5
    4b7e:	0010      	movs	r0, r2
    4b80:	409a      	lsls	r2, r3
    4b82:	409f      	lsls	r7, r3
    4b84:	40e8      	lsrs	r0, r5
    4b86:	1e53      	subs	r3, r2, #1
    4b88:	419a      	sbcs	r2, r3
    4b8a:	40e9      	lsrs	r1, r5
    4b8c:	4307      	orrs	r7, r0
    4b8e:	4317      	orrs	r7, r2
    4b90:	4653      	mov	r3, sl
    4b92:	1bdf      	subs	r7, r3, r7
    4b94:	1a61      	subs	r1, r4, r1
    4b96:	45ba      	cmp	sl, r7
    4b98:	41a4      	sbcs	r4, r4
    4b9a:	4264      	negs	r4, r4
    4b9c:	1b0c      	subs	r4, r1, r4
    4b9e:	0223      	lsls	r3, r4, #8
    4ba0:	d400      	bmi.n	4ba4 <__aeabi_dsub+0xb8>
    4ba2:	e0c5      	b.n	4d30 <__aeabi_dsub+0x244>
    4ba4:	0264      	lsls	r4, r4, #9
    4ba6:	0a65      	lsrs	r5, r4, #9
    4ba8:	2d00      	cmp	r5, #0
    4baa:	d100      	bne.n	4bae <__aeabi_dsub+0xc2>
    4bac:	e0f6      	b.n	4d9c <__aeabi_dsub+0x2b0>
    4bae:	0028      	movs	r0, r5
    4bb0:	f000 fb1e 	bl	51f0 <__clzsi2>
    4bb4:	0003      	movs	r3, r0
    4bb6:	3b08      	subs	r3, #8
    4bb8:	2b1f      	cmp	r3, #31
    4bba:	dd00      	ble.n	4bbe <__aeabi_dsub+0xd2>
    4bbc:	e0e9      	b.n	4d92 <__aeabi_dsub+0x2a6>
    4bbe:	2220      	movs	r2, #32
    4bc0:	003c      	movs	r4, r7
    4bc2:	1ad2      	subs	r2, r2, r3
    4bc4:	409d      	lsls	r5, r3
    4bc6:	40d4      	lsrs	r4, r2
    4bc8:	409f      	lsls	r7, r3
    4bca:	4325      	orrs	r5, r4
    4bcc:	429e      	cmp	r6, r3
    4bce:	dd00      	ble.n	4bd2 <__aeabi_dsub+0xe6>
    4bd0:	e0db      	b.n	4d8a <__aeabi_dsub+0x29e>
    4bd2:	1b9e      	subs	r6, r3, r6
    4bd4:	1c73      	adds	r3, r6, #1
    4bd6:	2b1f      	cmp	r3, #31
    4bd8:	dd00      	ble.n	4bdc <__aeabi_dsub+0xf0>
    4bda:	e10a      	b.n	4df2 <__aeabi_dsub+0x306>
    4bdc:	2220      	movs	r2, #32
    4bde:	0038      	movs	r0, r7
    4be0:	1ad2      	subs	r2, r2, r3
    4be2:	0029      	movs	r1, r5
    4be4:	4097      	lsls	r7, r2
    4be6:	002c      	movs	r4, r5
    4be8:	4091      	lsls	r1, r2
    4bea:	40d8      	lsrs	r0, r3
    4bec:	1e7a      	subs	r2, r7, #1
    4bee:	4197      	sbcs	r7, r2
    4bf0:	40dc      	lsrs	r4, r3
    4bf2:	2600      	movs	r6, #0
    4bf4:	4301      	orrs	r1, r0
    4bf6:	430f      	orrs	r7, r1
    4bf8:	077b      	lsls	r3, r7, #29
    4bfa:	d009      	beq.n	4c10 <__aeabi_dsub+0x124>
    4bfc:	230f      	movs	r3, #15
    4bfe:	403b      	ands	r3, r7
    4c00:	2b04      	cmp	r3, #4
    4c02:	d005      	beq.n	4c10 <__aeabi_dsub+0x124>
    4c04:	1d3b      	adds	r3, r7, #4
    4c06:	42bb      	cmp	r3, r7
    4c08:	41bf      	sbcs	r7, r7
    4c0a:	427f      	negs	r7, r7
    4c0c:	19e4      	adds	r4, r4, r7
    4c0e:	001f      	movs	r7, r3
    4c10:	0223      	lsls	r3, r4, #8
    4c12:	d525      	bpl.n	4c60 <__aeabi_dsub+0x174>
    4c14:	4b86      	ldr	r3, [pc, #536]	; (4e30 <__aeabi_dsub+0x344>)
    4c16:	3601      	adds	r6, #1
    4c18:	429e      	cmp	r6, r3
    4c1a:	d100      	bne.n	4c1e <__aeabi_dsub+0x132>
    4c1c:	e0af      	b.n	4d7e <__aeabi_dsub+0x292>
    4c1e:	4b85      	ldr	r3, [pc, #532]	; (4e34 <__aeabi_dsub+0x348>)
    4c20:	2501      	movs	r5, #1
    4c22:	401c      	ands	r4, r3
    4c24:	4643      	mov	r3, r8
    4c26:	0762      	lsls	r2, r4, #29
    4c28:	08ff      	lsrs	r7, r7, #3
    4c2a:	0264      	lsls	r4, r4, #9
    4c2c:	0576      	lsls	r6, r6, #21
    4c2e:	4317      	orrs	r7, r2
    4c30:	0b24      	lsrs	r4, r4, #12
    4c32:	0d76      	lsrs	r6, r6, #21
    4c34:	401d      	ands	r5, r3
    4c36:	2100      	movs	r1, #0
    4c38:	0324      	lsls	r4, r4, #12
    4c3a:	0b23      	lsrs	r3, r4, #12
    4c3c:	0d0c      	lsrs	r4, r1, #20
    4c3e:	4a7e      	ldr	r2, [pc, #504]	; (4e38 <__aeabi_dsub+0x34c>)
    4c40:	0524      	lsls	r4, r4, #20
    4c42:	431c      	orrs	r4, r3
    4c44:	4014      	ands	r4, r2
    4c46:	0533      	lsls	r3, r6, #20
    4c48:	4323      	orrs	r3, r4
    4c4a:	005b      	lsls	r3, r3, #1
    4c4c:	07ed      	lsls	r5, r5, #31
    4c4e:	085b      	lsrs	r3, r3, #1
    4c50:	432b      	orrs	r3, r5
    4c52:	0038      	movs	r0, r7
    4c54:	0019      	movs	r1, r3
    4c56:	bc1c      	pop	{r2, r3, r4}
    4c58:	4690      	mov	r8, r2
    4c5a:	4699      	mov	r9, r3
    4c5c:	46a2      	mov	sl, r4
    4c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c60:	2501      	movs	r5, #1
    4c62:	4643      	mov	r3, r8
    4c64:	0762      	lsls	r2, r4, #29
    4c66:	08ff      	lsrs	r7, r7, #3
    4c68:	4317      	orrs	r7, r2
    4c6a:	08e4      	lsrs	r4, r4, #3
    4c6c:	401d      	ands	r5, r3
    4c6e:	4b70      	ldr	r3, [pc, #448]	; (4e30 <__aeabi_dsub+0x344>)
    4c70:	429e      	cmp	r6, r3
    4c72:	d036      	beq.n	4ce2 <__aeabi_dsub+0x1f6>
    4c74:	0324      	lsls	r4, r4, #12
    4c76:	0576      	lsls	r6, r6, #21
    4c78:	0b24      	lsrs	r4, r4, #12
    4c7a:	0d76      	lsrs	r6, r6, #21
    4c7c:	e7db      	b.n	4c36 <__aeabi_dsub+0x14a>
    4c7e:	4663      	mov	r3, ip
    4c80:	1af3      	subs	r3, r6, r3
    4c82:	2b00      	cmp	r3, #0
    4c84:	dc00      	bgt.n	4c88 <__aeabi_dsub+0x19c>
    4c86:	e094      	b.n	4db2 <__aeabi_dsub+0x2c6>
    4c88:	4660      	mov	r0, ip
    4c8a:	2800      	cmp	r0, #0
    4c8c:	d035      	beq.n	4cfa <__aeabi_dsub+0x20e>
    4c8e:	4868      	ldr	r0, [pc, #416]	; (4e30 <__aeabi_dsub+0x344>)
    4c90:	4286      	cmp	r6, r0
    4c92:	d0b1      	beq.n	4bf8 <__aeabi_dsub+0x10c>
    4c94:	2780      	movs	r7, #128	; 0x80
    4c96:	043f      	lsls	r7, r7, #16
    4c98:	4339      	orrs	r1, r7
    4c9a:	2b38      	cmp	r3, #56	; 0x38
    4c9c:	dc00      	bgt.n	4ca0 <__aeabi_dsub+0x1b4>
    4c9e:	e0fd      	b.n	4e9c <__aeabi_dsub+0x3b0>
    4ca0:	430a      	orrs	r2, r1
    4ca2:	0017      	movs	r7, r2
    4ca4:	2100      	movs	r1, #0
    4ca6:	1e7a      	subs	r2, r7, #1
    4ca8:	4197      	sbcs	r7, r2
    4caa:	4457      	add	r7, sl
    4cac:	4557      	cmp	r7, sl
    4cae:	4180      	sbcs	r0, r0
    4cb0:	1909      	adds	r1, r1, r4
    4cb2:	4244      	negs	r4, r0
    4cb4:	190c      	adds	r4, r1, r4
    4cb6:	0223      	lsls	r3, r4, #8
    4cb8:	d53a      	bpl.n	4d30 <__aeabi_dsub+0x244>
    4cba:	4b5d      	ldr	r3, [pc, #372]	; (4e30 <__aeabi_dsub+0x344>)
    4cbc:	3601      	adds	r6, #1
    4cbe:	429e      	cmp	r6, r3
    4cc0:	d100      	bne.n	4cc4 <__aeabi_dsub+0x1d8>
    4cc2:	e14b      	b.n	4f5c <__aeabi_dsub+0x470>
    4cc4:	2201      	movs	r2, #1
    4cc6:	4b5b      	ldr	r3, [pc, #364]	; (4e34 <__aeabi_dsub+0x348>)
    4cc8:	401c      	ands	r4, r3
    4cca:	087b      	lsrs	r3, r7, #1
    4ccc:	4017      	ands	r7, r2
    4cce:	431f      	orrs	r7, r3
    4cd0:	07e2      	lsls	r2, r4, #31
    4cd2:	4317      	orrs	r7, r2
    4cd4:	0864      	lsrs	r4, r4, #1
    4cd6:	e78f      	b.n	4bf8 <__aeabi_dsub+0x10c>
    4cd8:	0008      	movs	r0, r1
    4cda:	4310      	orrs	r0, r2
    4cdc:	d000      	beq.n	4ce0 <__aeabi_dsub+0x1f4>
    4cde:	e724      	b.n	4b2a <__aeabi_dsub+0x3e>
    4ce0:	e721      	b.n	4b26 <__aeabi_dsub+0x3a>
    4ce2:	0023      	movs	r3, r4
    4ce4:	433b      	orrs	r3, r7
    4ce6:	d100      	bne.n	4cea <__aeabi_dsub+0x1fe>
    4ce8:	e1b9      	b.n	505e <__aeabi_dsub+0x572>
    4cea:	2280      	movs	r2, #128	; 0x80
    4cec:	0312      	lsls	r2, r2, #12
    4cee:	4314      	orrs	r4, r2
    4cf0:	0324      	lsls	r4, r4, #12
    4cf2:	0b24      	lsrs	r4, r4, #12
    4cf4:	e79f      	b.n	4c36 <__aeabi_dsub+0x14a>
    4cf6:	002e      	movs	r6, r5
    4cf8:	e77e      	b.n	4bf8 <__aeabi_dsub+0x10c>
    4cfa:	0008      	movs	r0, r1
    4cfc:	4310      	orrs	r0, r2
    4cfe:	d100      	bne.n	4d02 <__aeabi_dsub+0x216>
    4d00:	e0ca      	b.n	4e98 <__aeabi_dsub+0x3ac>
    4d02:	1e58      	subs	r0, r3, #1
    4d04:	4684      	mov	ip, r0
    4d06:	2800      	cmp	r0, #0
    4d08:	d000      	beq.n	4d0c <__aeabi_dsub+0x220>
    4d0a:	e0e7      	b.n	4edc <__aeabi_dsub+0x3f0>
    4d0c:	4452      	add	r2, sl
    4d0e:	4552      	cmp	r2, sl
    4d10:	4180      	sbcs	r0, r0
    4d12:	1864      	adds	r4, r4, r1
    4d14:	4240      	negs	r0, r0
    4d16:	1824      	adds	r4, r4, r0
    4d18:	0017      	movs	r7, r2
    4d1a:	2601      	movs	r6, #1
    4d1c:	0223      	lsls	r3, r4, #8
    4d1e:	d507      	bpl.n	4d30 <__aeabi_dsub+0x244>
    4d20:	2602      	movs	r6, #2
    4d22:	e7cf      	b.n	4cc4 <__aeabi_dsub+0x1d8>
    4d24:	4664      	mov	r4, ip
    4d26:	432c      	orrs	r4, r5
    4d28:	d100      	bne.n	4d2c <__aeabi_dsub+0x240>
    4d2a:	e1b3      	b.n	5094 <__aeabi_dsub+0x5a8>
    4d2c:	002c      	movs	r4, r5
    4d2e:	4667      	mov	r7, ip
    4d30:	077b      	lsls	r3, r7, #29
    4d32:	d000      	beq.n	4d36 <__aeabi_dsub+0x24a>
    4d34:	e762      	b.n	4bfc <__aeabi_dsub+0x110>
    4d36:	0763      	lsls	r3, r4, #29
    4d38:	08ff      	lsrs	r7, r7, #3
    4d3a:	431f      	orrs	r7, r3
    4d3c:	2501      	movs	r5, #1
    4d3e:	4643      	mov	r3, r8
    4d40:	08e4      	lsrs	r4, r4, #3
    4d42:	401d      	ands	r5, r3
    4d44:	e793      	b.n	4c6e <__aeabi_dsub+0x182>
    4d46:	2d00      	cmp	r5, #0
    4d48:	d178      	bne.n	4e3c <__aeabi_dsub+0x350>
    4d4a:	1c75      	adds	r5, r6, #1
    4d4c:	056d      	lsls	r5, r5, #21
    4d4e:	0d6d      	lsrs	r5, r5, #21
    4d50:	2d01      	cmp	r5, #1
    4d52:	dc00      	bgt.n	4d56 <__aeabi_dsub+0x26a>
    4d54:	e0f2      	b.n	4f3c <__aeabi_dsub+0x450>
    4d56:	4650      	mov	r0, sl
    4d58:	1a80      	subs	r0, r0, r2
    4d5a:	4582      	cmp	sl, r0
    4d5c:	41bf      	sbcs	r7, r7
    4d5e:	1a65      	subs	r5, r4, r1
    4d60:	427f      	negs	r7, r7
    4d62:	1bed      	subs	r5, r5, r7
    4d64:	4684      	mov	ip, r0
    4d66:	0228      	lsls	r0, r5, #8
    4d68:	d400      	bmi.n	4d6c <__aeabi_dsub+0x280>
    4d6a:	e08c      	b.n	4e86 <__aeabi_dsub+0x39a>
    4d6c:	4650      	mov	r0, sl
    4d6e:	1a17      	subs	r7, r2, r0
    4d70:	42ba      	cmp	r2, r7
    4d72:	4192      	sbcs	r2, r2
    4d74:	1b0c      	subs	r4, r1, r4
    4d76:	4255      	negs	r5, r2
    4d78:	1b65      	subs	r5, r4, r5
    4d7a:	4698      	mov	r8, r3
    4d7c:	e714      	b.n	4ba8 <__aeabi_dsub+0xbc>
    4d7e:	2501      	movs	r5, #1
    4d80:	4643      	mov	r3, r8
    4d82:	2400      	movs	r4, #0
    4d84:	401d      	ands	r5, r3
    4d86:	2700      	movs	r7, #0
    4d88:	e755      	b.n	4c36 <__aeabi_dsub+0x14a>
    4d8a:	4c2a      	ldr	r4, [pc, #168]	; (4e34 <__aeabi_dsub+0x348>)
    4d8c:	1af6      	subs	r6, r6, r3
    4d8e:	402c      	ands	r4, r5
    4d90:	e732      	b.n	4bf8 <__aeabi_dsub+0x10c>
    4d92:	003d      	movs	r5, r7
    4d94:	3828      	subs	r0, #40	; 0x28
    4d96:	4085      	lsls	r5, r0
    4d98:	2700      	movs	r7, #0
    4d9a:	e717      	b.n	4bcc <__aeabi_dsub+0xe0>
    4d9c:	0038      	movs	r0, r7
    4d9e:	f000 fa27 	bl	51f0 <__clzsi2>
    4da2:	3020      	adds	r0, #32
    4da4:	e706      	b.n	4bb4 <__aeabi_dsub+0xc8>
    4da6:	430a      	orrs	r2, r1
    4da8:	0017      	movs	r7, r2
    4daa:	2100      	movs	r1, #0
    4dac:	1e7a      	subs	r2, r7, #1
    4dae:	4197      	sbcs	r7, r2
    4db0:	e6ee      	b.n	4b90 <__aeabi_dsub+0xa4>
    4db2:	2b00      	cmp	r3, #0
    4db4:	d000      	beq.n	4db8 <__aeabi_dsub+0x2cc>
    4db6:	e0e5      	b.n	4f84 <__aeabi_dsub+0x498>
    4db8:	1c73      	adds	r3, r6, #1
    4dba:	469c      	mov	ip, r3
    4dbc:	055b      	lsls	r3, r3, #21
    4dbe:	0d5b      	lsrs	r3, r3, #21
    4dc0:	2b01      	cmp	r3, #1
    4dc2:	dc00      	bgt.n	4dc6 <__aeabi_dsub+0x2da>
    4dc4:	e09f      	b.n	4f06 <__aeabi_dsub+0x41a>
    4dc6:	4b1a      	ldr	r3, [pc, #104]	; (4e30 <__aeabi_dsub+0x344>)
    4dc8:	459c      	cmp	ip, r3
    4dca:	d100      	bne.n	4dce <__aeabi_dsub+0x2e2>
    4dcc:	e0c5      	b.n	4f5a <__aeabi_dsub+0x46e>
    4dce:	4452      	add	r2, sl
    4dd0:	4552      	cmp	r2, sl
    4dd2:	4180      	sbcs	r0, r0
    4dd4:	1864      	adds	r4, r4, r1
    4dd6:	4240      	negs	r0, r0
    4dd8:	1824      	adds	r4, r4, r0
    4dda:	07e7      	lsls	r7, r4, #31
    4ddc:	0852      	lsrs	r2, r2, #1
    4dde:	4317      	orrs	r7, r2
    4de0:	0864      	lsrs	r4, r4, #1
    4de2:	4666      	mov	r6, ip
    4de4:	e708      	b.n	4bf8 <__aeabi_dsub+0x10c>
    4de6:	4812      	ldr	r0, [pc, #72]	; (4e30 <__aeabi_dsub+0x344>)
    4de8:	4285      	cmp	r5, r0
    4dea:	d100      	bne.n	4dee <__aeabi_dsub+0x302>
    4dec:	e085      	b.n	4efa <__aeabi_dsub+0x40e>
    4dee:	001d      	movs	r5, r3
    4df0:	e6bc      	b.n	4b6c <__aeabi_dsub+0x80>
    4df2:	0029      	movs	r1, r5
    4df4:	3e1f      	subs	r6, #31
    4df6:	40f1      	lsrs	r1, r6
    4df8:	2b20      	cmp	r3, #32
    4dfa:	d100      	bne.n	4dfe <__aeabi_dsub+0x312>
    4dfc:	e07f      	b.n	4efe <__aeabi_dsub+0x412>
    4dfe:	2240      	movs	r2, #64	; 0x40
    4e00:	1ad3      	subs	r3, r2, r3
    4e02:	409d      	lsls	r5, r3
    4e04:	432f      	orrs	r7, r5
    4e06:	1e7d      	subs	r5, r7, #1
    4e08:	41af      	sbcs	r7, r5
    4e0a:	2400      	movs	r4, #0
    4e0c:	430f      	orrs	r7, r1
    4e0e:	2600      	movs	r6, #0
    4e10:	e78e      	b.n	4d30 <__aeabi_dsub+0x244>
    4e12:	002b      	movs	r3, r5
    4e14:	000f      	movs	r7, r1
    4e16:	3b20      	subs	r3, #32
    4e18:	40df      	lsrs	r7, r3
    4e1a:	2d20      	cmp	r5, #32
    4e1c:	d071      	beq.n	4f02 <__aeabi_dsub+0x416>
    4e1e:	2340      	movs	r3, #64	; 0x40
    4e20:	1b5d      	subs	r5, r3, r5
    4e22:	40a9      	lsls	r1, r5
    4e24:	430a      	orrs	r2, r1
    4e26:	1e51      	subs	r1, r2, #1
    4e28:	418a      	sbcs	r2, r1
    4e2a:	2100      	movs	r1, #0
    4e2c:	4317      	orrs	r7, r2
    4e2e:	e6af      	b.n	4b90 <__aeabi_dsub+0xa4>
    4e30:	000007ff 	.word	0x000007ff
    4e34:	ff7fffff 	.word	0xff7fffff
    4e38:	800fffff 	.word	0x800fffff
    4e3c:	2e00      	cmp	r6, #0
    4e3e:	d03e      	beq.n	4ebe <__aeabi_dsub+0x3d2>
    4e40:	4eb3      	ldr	r6, [pc, #716]	; (5110 <__aeabi_dsub+0x624>)
    4e42:	45b4      	cmp	ip, r6
    4e44:	d045      	beq.n	4ed2 <__aeabi_dsub+0x3e6>
    4e46:	2680      	movs	r6, #128	; 0x80
    4e48:	0436      	lsls	r6, r6, #16
    4e4a:	426d      	negs	r5, r5
    4e4c:	4334      	orrs	r4, r6
    4e4e:	2d38      	cmp	r5, #56	; 0x38
    4e50:	dd00      	ble.n	4e54 <__aeabi_dsub+0x368>
    4e52:	e0a8      	b.n	4fa6 <__aeabi_dsub+0x4ba>
    4e54:	2d1f      	cmp	r5, #31
    4e56:	dd00      	ble.n	4e5a <__aeabi_dsub+0x36e>
    4e58:	e11f      	b.n	509a <__aeabi_dsub+0x5ae>
    4e5a:	2620      	movs	r6, #32
    4e5c:	0027      	movs	r7, r4
    4e5e:	4650      	mov	r0, sl
    4e60:	1b76      	subs	r6, r6, r5
    4e62:	40b7      	lsls	r7, r6
    4e64:	40e8      	lsrs	r0, r5
    4e66:	4307      	orrs	r7, r0
    4e68:	4650      	mov	r0, sl
    4e6a:	40b0      	lsls	r0, r6
    4e6c:	1e46      	subs	r6, r0, #1
    4e6e:	41b0      	sbcs	r0, r6
    4e70:	40ec      	lsrs	r4, r5
    4e72:	4338      	orrs	r0, r7
    4e74:	1a17      	subs	r7, r2, r0
    4e76:	42ba      	cmp	r2, r7
    4e78:	4192      	sbcs	r2, r2
    4e7a:	1b0c      	subs	r4, r1, r4
    4e7c:	4252      	negs	r2, r2
    4e7e:	1aa4      	subs	r4, r4, r2
    4e80:	4666      	mov	r6, ip
    4e82:	4698      	mov	r8, r3
    4e84:	e68b      	b.n	4b9e <__aeabi_dsub+0xb2>
    4e86:	4664      	mov	r4, ip
    4e88:	4667      	mov	r7, ip
    4e8a:	432c      	orrs	r4, r5
    4e8c:	d000      	beq.n	4e90 <__aeabi_dsub+0x3a4>
    4e8e:	e68b      	b.n	4ba8 <__aeabi_dsub+0xbc>
    4e90:	2500      	movs	r5, #0
    4e92:	2600      	movs	r6, #0
    4e94:	2700      	movs	r7, #0
    4e96:	e6ea      	b.n	4c6e <__aeabi_dsub+0x182>
    4e98:	001e      	movs	r6, r3
    4e9a:	e6ad      	b.n	4bf8 <__aeabi_dsub+0x10c>
    4e9c:	2b1f      	cmp	r3, #31
    4e9e:	dc60      	bgt.n	4f62 <__aeabi_dsub+0x476>
    4ea0:	2720      	movs	r7, #32
    4ea2:	1af8      	subs	r0, r7, r3
    4ea4:	000f      	movs	r7, r1
    4ea6:	4684      	mov	ip, r0
    4ea8:	4087      	lsls	r7, r0
    4eaa:	0010      	movs	r0, r2
    4eac:	40d8      	lsrs	r0, r3
    4eae:	4307      	orrs	r7, r0
    4eb0:	4660      	mov	r0, ip
    4eb2:	4082      	lsls	r2, r0
    4eb4:	1e50      	subs	r0, r2, #1
    4eb6:	4182      	sbcs	r2, r0
    4eb8:	40d9      	lsrs	r1, r3
    4eba:	4317      	orrs	r7, r2
    4ebc:	e6f5      	b.n	4caa <__aeabi_dsub+0x1be>
    4ebe:	0026      	movs	r6, r4
    4ec0:	4650      	mov	r0, sl
    4ec2:	4306      	orrs	r6, r0
    4ec4:	d005      	beq.n	4ed2 <__aeabi_dsub+0x3e6>
    4ec6:	43ed      	mvns	r5, r5
    4ec8:	2d00      	cmp	r5, #0
    4eca:	d0d3      	beq.n	4e74 <__aeabi_dsub+0x388>
    4ecc:	4e90      	ldr	r6, [pc, #576]	; (5110 <__aeabi_dsub+0x624>)
    4ece:	45b4      	cmp	ip, r6
    4ed0:	d1bd      	bne.n	4e4e <__aeabi_dsub+0x362>
    4ed2:	000c      	movs	r4, r1
    4ed4:	0017      	movs	r7, r2
    4ed6:	4666      	mov	r6, ip
    4ed8:	4698      	mov	r8, r3
    4eda:	e68d      	b.n	4bf8 <__aeabi_dsub+0x10c>
    4edc:	488c      	ldr	r0, [pc, #560]	; (5110 <__aeabi_dsub+0x624>)
    4ede:	4283      	cmp	r3, r0
    4ee0:	d00b      	beq.n	4efa <__aeabi_dsub+0x40e>
    4ee2:	4663      	mov	r3, ip
    4ee4:	e6d9      	b.n	4c9a <__aeabi_dsub+0x1ae>
    4ee6:	2d00      	cmp	r5, #0
    4ee8:	d000      	beq.n	4eec <__aeabi_dsub+0x400>
    4eea:	e096      	b.n	501a <__aeabi_dsub+0x52e>
    4eec:	0008      	movs	r0, r1
    4eee:	4310      	orrs	r0, r2
    4ef0:	d100      	bne.n	4ef4 <__aeabi_dsub+0x408>
    4ef2:	e0e2      	b.n	50ba <__aeabi_dsub+0x5ce>
    4ef4:	000c      	movs	r4, r1
    4ef6:	0017      	movs	r7, r2
    4ef8:	4698      	mov	r8, r3
    4efa:	4e85      	ldr	r6, [pc, #532]	; (5110 <__aeabi_dsub+0x624>)
    4efc:	e67c      	b.n	4bf8 <__aeabi_dsub+0x10c>
    4efe:	2500      	movs	r5, #0
    4f00:	e780      	b.n	4e04 <__aeabi_dsub+0x318>
    4f02:	2100      	movs	r1, #0
    4f04:	e78e      	b.n	4e24 <__aeabi_dsub+0x338>
    4f06:	0023      	movs	r3, r4
    4f08:	4650      	mov	r0, sl
    4f0a:	4303      	orrs	r3, r0
    4f0c:	2e00      	cmp	r6, #0
    4f0e:	d000      	beq.n	4f12 <__aeabi_dsub+0x426>
    4f10:	e0a8      	b.n	5064 <__aeabi_dsub+0x578>
    4f12:	2b00      	cmp	r3, #0
    4f14:	d100      	bne.n	4f18 <__aeabi_dsub+0x42c>
    4f16:	e0de      	b.n	50d6 <__aeabi_dsub+0x5ea>
    4f18:	000b      	movs	r3, r1
    4f1a:	4313      	orrs	r3, r2
    4f1c:	d100      	bne.n	4f20 <__aeabi_dsub+0x434>
    4f1e:	e66b      	b.n	4bf8 <__aeabi_dsub+0x10c>
    4f20:	4452      	add	r2, sl
    4f22:	4552      	cmp	r2, sl
    4f24:	4180      	sbcs	r0, r0
    4f26:	1864      	adds	r4, r4, r1
    4f28:	4240      	negs	r0, r0
    4f2a:	1824      	adds	r4, r4, r0
    4f2c:	0017      	movs	r7, r2
    4f2e:	0223      	lsls	r3, r4, #8
    4f30:	d400      	bmi.n	4f34 <__aeabi_dsub+0x448>
    4f32:	e6fd      	b.n	4d30 <__aeabi_dsub+0x244>
    4f34:	4b77      	ldr	r3, [pc, #476]	; (5114 <__aeabi_dsub+0x628>)
    4f36:	4666      	mov	r6, ip
    4f38:	401c      	ands	r4, r3
    4f3a:	e65d      	b.n	4bf8 <__aeabi_dsub+0x10c>
    4f3c:	0025      	movs	r5, r4
    4f3e:	4650      	mov	r0, sl
    4f40:	4305      	orrs	r5, r0
    4f42:	2e00      	cmp	r6, #0
    4f44:	d1cf      	bne.n	4ee6 <__aeabi_dsub+0x3fa>
    4f46:	2d00      	cmp	r5, #0
    4f48:	d14f      	bne.n	4fea <__aeabi_dsub+0x4fe>
    4f4a:	000c      	movs	r4, r1
    4f4c:	4314      	orrs	r4, r2
    4f4e:	d100      	bne.n	4f52 <__aeabi_dsub+0x466>
    4f50:	e0a0      	b.n	5094 <__aeabi_dsub+0x5a8>
    4f52:	000c      	movs	r4, r1
    4f54:	0017      	movs	r7, r2
    4f56:	4698      	mov	r8, r3
    4f58:	e64e      	b.n	4bf8 <__aeabi_dsub+0x10c>
    4f5a:	4666      	mov	r6, ip
    4f5c:	2400      	movs	r4, #0
    4f5e:	2700      	movs	r7, #0
    4f60:	e685      	b.n	4c6e <__aeabi_dsub+0x182>
    4f62:	001f      	movs	r7, r3
    4f64:	0008      	movs	r0, r1
    4f66:	3f20      	subs	r7, #32
    4f68:	40f8      	lsrs	r0, r7
    4f6a:	0007      	movs	r7, r0
    4f6c:	2b20      	cmp	r3, #32
    4f6e:	d100      	bne.n	4f72 <__aeabi_dsub+0x486>
    4f70:	e08e      	b.n	5090 <__aeabi_dsub+0x5a4>
    4f72:	2040      	movs	r0, #64	; 0x40
    4f74:	1ac3      	subs	r3, r0, r3
    4f76:	4099      	lsls	r1, r3
    4f78:	430a      	orrs	r2, r1
    4f7a:	1e51      	subs	r1, r2, #1
    4f7c:	418a      	sbcs	r2, r1
    4f7e:	2100      	movs	r1, #0
    4f80:	4317      	orrs	r7, r2
    4f82:	e692      	b.n	4caa <__aeabi_dsub+0x1be>
    4f84:	2e00      	cmp	r6, #0
    4f86:	d114      	bne.n	4fb2 <__aeabi_dsub+0x4c6>
    4f88:	0026      	movs	r6, r4
    4f8a:	4650      	mov	r0, sl
    4f8c:	4306      	orrs	r6, r0
    4f8e:	d062      	beq.n	5056 <__aeabi_dsub+0x56a>
    4f90:	43db      	mvns	r3, r3
    4f92:	2b00      	cmp	r3, #0
    4f94:	d15c      	bne.n	5050 <__aeabi_dsub+0x564>
    4f96:	1887      	adds	r7, r0, r2
    4f98:	4297      	cmp	r7, r2
    4f9a:	4192      	sbcs	r2, r2
    4f9c:	1864      	adds	r4, r4, r1
    4f9e:	4252      	negs	r2, r2
    4fa0:	18a4      	adds	r4, r4, r2
    4fa2:	4666      	mov	r6, ip
    4fa4:	e687      	b.n	4cb6 <__aeabi_dsub+0x1ca>
    4fa6:	4650      	mov	r0, sl
    4fa8:	4320      	orrs	r0, r4
    4faa:	1e44      	subs	r4, r0, #1
    4fac:	41a0      	sbcs	r0, r4
    4fae:	2400      	movs	r4, #0
    4fb0:	e760      	b.n	4e74 <__aeabi_dsub+0x388>
    4fb2:	4e57      	ldr	r6, [pc, #348]	; (5110 <__aeabi_dsub+0x624>)
    4fb4:	45b4      	cmp	ip, r6
    4fb6:	d04e      	beq.n	5056 <__aeabi_dsub+0x56a>
    4fb8:	2680      	movs	r6, #128	; 0x80
    4fba:	0436      	lsls	r6, r6, #16
    4fbc:	425b      	negs	r3, r3
    4fbe:	4334      	orrs	r4, r6
    4fc0:	2b38      	cmp	r3, #56	; 0x38
    4fc2:	dd00      	ble.n	4fc6 <__aeabi_dsub+0x4da>
    4fc4:	e07f      	b.n	50c6 <__aeabi_dsub+0x5da>
    4fc6:	2b1f      	cmp	r3, #31
    4fc8:	dd00      	ble.n	4fcc <__aeabi_dsub+0x4e0>
    4fca:	e08b      	b.n	50e4 <__aeabi_dsub+0x5f8>
    4fcc:	2620      	movs	r6, #32
    4fce:	0027      	movs	r7, r4
    4fd0:	4650      	mov	r0, sl
    4fd2:	1af6      	subs	r6, r6, r3
    4fd4:	40b7      	lsls	r7, r6
    4fd6:	40d8      	lsrs	r0, r3
    4fd8:	4307      	orrs	r7, r0
    4fda:	4650      	mov	r0, sl
    4fdc:	40b0      	lsls	r0, r6
    4fde:	1e46      	subs	r6, r0, #1
    4fe0:	41b0      	sbcs	r0, r6
    4fe2:	4307      	orrs	r7, r0
    4fe4:	40dc      	lsrs	r4, r3
    4fe6:	18bf      	adds	r7, r7, r2
    4fe8:	e7d6      	b.n	4f98 <__aeabi_dsub+0x4ac>
    4fea:	000d      	movs	r5, r1
    4fec:	4315      	orrs	r5, r2
    4fee:	d100      	bne.n	4ff2 <__aeabi_dsub+0x506>
    4ff0:	e602      	b.n	4bf8 <__aeabi_dsub+0x10c>
    4ff2:	4650      	mov	r0, sl
    4ff4:	1a80      	subs	r0, r0, r2
    4ff6:	4582      	cmp	sl, r0
    4ff8:	41bf      	sbcs	r7, r7
    4ffa:	1a65      	subs	r5, r4, r1
    4ffc:	427f      	negs	r7, r7
    4ffe:	1bed      	subs	r5, r5, r7
    5000:	4684      	mov	ip, r0
    5002:	0228      	lsls	r0, r5, #8
    5004:	d400      	bmi.n	5008 <__aeabi_dsub+0x51c>
    5006:	e68d      	b.n	4d24 <__aeabi_dsub+0x238>
    5008:	4650      	mov	r0, sl
    500a:	1a17      	subs	r7, r2, r0
    500c:	42ba      	cmp	r2, r7
    500e:	4192      	sbcs	r2, r2
    5010:	1b0c      	subs	r4, r1, r4
    5012:	4252      	negs	r2, r2
    5014:	1aa4      	subs	r4, r4, r2
    5016:	4698      	mov	r8, r3
    5018:	e5ee      	b.n	4bf8 <__aeabi_dsub+0x10c>
    501a:	000d      	movs	r5, r1
    501c:	4315      	orrs	r5, r2
    501e:	d100      	bne.n	5022 <__aeabi_dsub+0x536>
    5020:	e76b      	b.n	4efa <__aeabi_dsub+0x40e>
    5022:	4650      	mov	r0, sl
    5024:	0767      	lsls	r7, r4, #29
    5026:	08c0      	lsrs	r0, r0, #3
    5028:	4307      	orrs	r7, r0
    502a:	2080      	movs	r0, #128	; 0x80
    502c:	08e4      	lsrs	r4, r4, #3
    502e:	0300      	lsls	r0, r0, #12
    5030:	4204      	tst	r4, r0
    5032:	d007      	beq.n	5044 <__aeabi_dsub+0x558>
    5034:	08cd      	lsrs	r5, r1, #3
    5036:	4205      	tst	r5, r0
    5038:	d104      	bne.n	5044 <__aeabi_dsub+0x558>
    503a:	002c      	movs	r4, r5
    503c:	4698      	mov	r8, r3
    503e:	08d7      	lsrs	r7, r2, #3
    5040:	0749      	lsls	r1, r1, #29
    5042:	430f      	orrs	r7, r1
    5044:	0f7b      	lsrs	r3, r7, #29
    5046:	00e4      	lsls	r4, r4, #3
    5048:	431c      	orrs	r4, r3
    504a:	00ff      	lsls	r7, r7, #3
    504c:	4e30      	ldr	r6, [pc, #192]	; (5110 <__aeabi_dsub+0x624>)
    504e:	e5d3      	b.n	4bf8 <__aeabi_dsub+0x10c>
    5050:	4e2f      	ldr	r6, [pc, #188]	; (5110 <__aeabi_dsub+0x624>)
    5052:	45b4      	cmp	ip, r6
    5054:	d1b4      	bne.n	4fc0 <__aeabi_dsub+0x4d4>
    5056:	000c      	movs	r4, r1
    5058:	0017      	movs	r7, r2
    505a:	4666      	mov	r6, ip
    505c:	e5cc      	b.n	4bf8 <__aeabi_dsub+0x10c>
    505e:	2700      	movs	r7, #0
    5060:	2400      	movs	r4, #0
    5062:	e5e8      	b.n	4c36 <__aeabi_dsub+0x14a>
    5064:	2b00      	cmp	r3, #0
    5066:	d039      	beq.n	50dc <__aeabi_dsub+0x5f0>
    5068:	000b      	movs	r3, r1
    506a:	4313      	orrs	r3, r2
    506c:	d100      	bne.n	5070 <__aeabi_dsub+0x584>
    506e:	e744      	b.n	4efa <__aeabi_dsub+0x40e>
    5070:	08c0      	lsrs	r0, r0, #3
    5072:	0767      	lsls	r7, r4, #29
    5074:	4307      	orrs	r7, r0
    5076:	2080      	movs	r0, #128	; 0x80
    5078:	08e4      	lsrs	r4, r4, #3
    507a:	0300      	lsls	r0, r0, #12
    507c:	4204      	tst	r4, r0
    507e:	d0e1      	beq.n	5044 <__aeabi_dsub+0x558>
    5080:	08cb      	lsrs	r3, r1, #3
    5082:	4203      	tst	r3, r0
    5084:	d1de      	bne.n	5044 <__aeabi_dsub+0x558>
    5086:	08d7      	lsrs	r7, r2, #3
    5088:	0749      	lsls	r1, r1, #29
    508a:	430f      	orrs	r7, r1
    508c:	001c      	movs	r4, r3
    508e:	e7d9      	b.n	5044 <__aeabi_dsub+0x558>
    5090:	2100      	movs	r1, #0
    5092:	e771      	b.n	4f78 <__aeabi_dsub+0x48c>
    5094:	2500      	movs	r5, #0
    5096:	2700      	movs	r7, #0
    5098:	e5e9      	b.n	4c6e <__aeabi_dsub+0x182>
    509a:	002e      	movs	r6, r5
    509c:	0027      	movs	r7, r4
    509e:	3e20      	subs	r6, #32
    50a0:	40f7      	lsrs	r7, r6
    50a2:	2d20      	cmp	r5, #32
    50a4:	d02f      	beq.n	5106 <__aeabi_dsub+0x61a>
    50a6:	2640      	movs	r6, #64	; 0x40
    50a8:	1b75      	subs	r5, r6, r5
    50aa:	40ac      	lsls	r4, r5
    50ac:	4650      	mov	r0, sl
    50ae:	4320      	orrs	r0, r4
    50b0:	1e44      	subs	r4, r0, #1
    50b2:	41a0      	sbcs	r0, r4
    50b4:	2400      	movs	r4, #0
    50b6:	4338      	orrs	r0, r7
    50b8:	e6dc      	b.n	4e74 <__aeabi_dsub+0x388>
    50ba:	2480      	movs	r4, #128	; 0x80
    50bc:	2500      	movs	r5, #0
    50be:	0324      	lsls	r4, r4, #12
    50c0:	4e13      	ldr	r6, [pc, #76]	; (5110 <__aeabi_dsub+0x624>)
    50c2:	2700      	movs	r7, #0
    50c4:	e5d3      	b.n	4c6e <__aeabi_dsub+0x182>
    50c6:	4650      	mov	r0, sl
    50c8:	4320      	orrs	r0, r4
    50ca:	0007      	movs	r7, r0
    50cc:	1e78      	subs	r0, r7, #1
    50ce:	4187      	sbcs	r7, r0
    50d0:	2400      	movs	r4, #0
    50d2:	18bf      	adds	r7, r7, r2
    50d4:	e760      	b.n	4f98 <__aeabi_dsub+0x4ac>
    50d6:	000c      	movs	r4, r1
    50d8:	0017      	movs	r7, r2
    50da:	e58d      	b.n	4bf8 <__aeabi_dsub+0x10c>
    50dc:	000c      	movs	r4, r1
    50de:	0017      	movs	r7, r2
    50e0:	4e0b      	ldr	r6, [pc, #44]	; (5110 <__aeabi_dsub+0x624>)
    50e2:	e589      	b.n	4bf8 <__aeabi_dsub+0x10c>
    50e4:	001e      	movs	r6, r3
    50e6:	0027      	movs	r7, r4
    50e8:	3e20      	subs	r6, #32
    50ea:	40f7      	lsrs	r7, r6
    50ec:	2b20      	cmp	r3, #32
    50ee:	d00c      	beq.n	510a <__aeabi_dsub+0x61e>
    50f0:	2640      	movs	r6, #64	; 0x40
    50f2:	1af3      	subs	r3, r6, r3
    50f4:	409c      	lsls	r4, r3
    50f6:	4650      	mov	r0, sl
    50f8:	4320      	orrs	r0, r4
    50fa:	1e44      	subs	r4, r0, #1
    50fc:	41a0      	sbcs	r0, r4
    50fe:	4307      	orrs	r7, r0
    5100:	2400      	movs	r4, #0
    5102:	18bf      	adds	r7, r7, r2
    5104:	e748      	b.n	4f98 <__aeabi_dsub+0x4ac>
    5106:	2400      	movs	r4, #0
    5108:	e7d0      	b.n	50ac <__aeabi_dsub+0x5c0>
    510a:	2400      	movs	r4, #0
    510c:	e7f3      	b.n	50f6 <__aeabi_dsub+0x60a>
    510e:	46c0      	nop			; (mov r8, r8)
    5110:	000007ff 	.word	0x000007ff
    5114:	ff7fffff 	.word	0xff7fffff

00005118 <__aeabi_d2iz>:
    5118:	b530      	push	{r4, r5, lr}
    511a:	4d13      	ldr	r5, [pc, #76]	; (5168 <__aeabi_d2iz+0x50>)
    511c:	030a      	lsls	r2, r1, #12
    511e:	004b      	lsls	r3, r1, #1
    5120:	0b12      	lsrs	r2, r2, #12
    5122:	0d5b      	lsrs	r3, r3, #21
    5124:	0fc9      	lsrs	r1, r1, #31
    5126:	2400      	movs	r4, #0
    5128:	42ab      	cmp	r3, r5
    512a:	dd10      	ble.n	514e <__aeabi_d2iz+0x36>
    512c:	4c0f      	ldr	r4, [pc, #60]	; (516c <__aeabi_d2iz+0x54>)
    512e:	42a3      	cmp	r3, r4
    5130:	dc0f      	bgt.n	5152 <__aeabi_d2iz+0x3a>
    5132:	2480      	movs	r4, #128	; 0x80
    5134:	4d0e      	ldr	r5, [pc, #56]	; (5170 <__aeabi_d2iz+0x58>)
    5136:	0364      	lsls	r4, r4, #13
    5138:	4322      	orrs	r2, r4
    513a:	1aed      	subs	r5, r5, r3
    513c:	2d1f      	cmp	r5, #31
    513e:	dd0b      	ble.n	5158 <__aeabi_d2iz+0x40>
    5140:	480c      	ldr	r0, [pc, #48]	; (5174 <__aeabi_d2iz+0x5c>)
    5142:	1ac3      	subs	r3, r0, r3
    5144:	40da      	lsrs	r2, r3
    5146:	4254      	negs	r4, r2
    5148:	2900      	cmp	r1, #0
    514a:	d100      	bne.n	514e <__aeabi_d2iz+0x36>
    514c:	0014      	movs	r4, r2
    514e:	0020      	movs	r0, r4
    5150:	bd30      	pop	{r4, r5, pc}
    5152:	4b09      	ldr	r3, [pc, #36]	; (5178 <__aeabi_d2iz+0x60>)
    5154:	18cc      	adds	r4, r1, r3
    5156:	e7fa      	b.n	514e <__aeabi_d2iz+0x36>
    5158:	4c08      	ldr	r4, [pc, #32]	; (517c <__aeabi_d2iz+0x64>)
    515a:	40e8      	lsrs	r0, r5
    515c:	46a4      	mov	ip, r4
    515e:	4463      	add	r3, ip
    5160:	409a      	lsls	r2, r3
    5162:	4302      	orrs	r2, r0
    5164:	e7ef      	b.n	5146 <__aeabi_d2iz+0x2e>
    5166:	46c0      	nop			; (mov r8, r8)
    5168:	000003fe 	.word	0x000003fe
    516c:	0000041d 	.word	0x0000041d
    5170:	00000433 	.word	0x00000433
    5174:	00000413 	.word	0x00000413
    5178:	7fffffff 	.word	0x7fffffff
    517c:	fffffbed 	.word	0xfffffbed

00005180 <__aeabi_ui2d>:
    5180:	b510      	push	{r4, lr}
    5182:	1e04      	subs	r4, r0, #0
    5184:	d028      	beq.n	51d8 <__aeabi_ui2d+0x58>
    5186:	f000 f833 	bl	51f0 <__clzsi2>
    518a:	4b15      	ldr	r3, [pc, #84]	; (51e0 <__aeabi_ui2d+0x60>)
    518c:	4a15      	ldr	r2, [pc, #84]	; (51e4 <__aeabi_ui2d+0x64>)
    518e:	1a1b      	subs	r3, r3, r0
    5190:	1ad2      	subs	r2, r2, r3
    5192:	2a1f      	cmp	r2, #31
    5194:	dd15      	ble.n	51c2 <__aeabi_ui2d+0x42>
    5196:	4a14      	ldr	r2, [pc, #80]	; (51e8 <__aeabi_ui2d+0x68>)
    5198:	1ad2      	subs	r2, r2, r3
    519a:	4094      	lsls	r4, r2
    519c:	2200      	movs	r2, #0
    519e:	0324      	lsls	r4, r4, #12
    51a0:	055b      	lsls	r3, r3, #21
    51a2:	0b24      	lsrs	r4, r4, #12
    51a4:	0d5b      	lsrs	r3, r3, #21
    51a6:	2100      	movs	r1, #0
    51a8:	0010      	movs	r0, r2
    51aa:	0324      	lsls	r4, r4, #12
    51ac:	0d0a      	lsrs	r2, r1, #20
    51ae:	0b24      	lsrs	r4, r4, #12
    51b0:	0512      	lsls	r2, r2, #20
    51b2:	4322      	orrs	r2, r4
    51b4:	4c0d      	ldr	r4, [pc, #52]	; (51ec <__aeabi_ui2d+0x6c>)
    51b6:	051b      	lsls	r3, r3, #20
    51b8:	4022      	ands	r2, r4
    51ba:	4313      	orrs	r3, r2
    51bc:	005b      	lsls	r3, r3, #1
    51be:	0859      	lsrs	r1, r3, #1
    51c0:	bd10      	pop	{r4, pc}
    51c2:	0021      	movs	r1, r4
    51c4:	4091      	lsls	r1, r2
    51c6:	000a      	movs	r2, r1
    51c8:	210b      	movs	r1, #11
    51ca:	1a08      	subs	r0, r1, r0
    51cc:	40c4      	lsrs	r4, r0
    51ce:	055b      	lsls	r3, r3, #21
    51d0:	0324      	lsls	r4, r4, #12
    51d2:	0b24      	lsrs	r4, r4, #12
    51d4:	0d5b      	lsrs	r3, r3, #21
    51d6:	e7e6      	b.n	51a6 <__aeabi_ui2d+0x26>
    51d8:	2300      	movs	r3, #0
    51da:	2400      	movs	r4, #0
    51dc:	2200      	movs	r2, #0
    51de:	e7e2      	b.n	51a6 <__aeabi_ui2d+0x26>
    51e0:	0000041e 	.word	0x0000041e
    51e4:	00000433 	.word	0x00000433
    51e8:	00000413 	.word	0x00000413
    51ec:	800fffff 	.word	0x800fffff

000051f0 <__clzsi2>:
    51f0:	211c      	movs	r1, #28
    51f2:	2301      	movs	r3, #1
    51f4:	041b      	lsls	r3, r3, #16
    51f6:	4298      	cmp	r0, r3
    51f8:	d301      	bcc.n	51fe <__clzsi2+0xe>
    51fa:	0c00      	lsrs	r0, r0, #16
    51fc:	3910      	subs	r1, #16
    51fe:	0a1b      	lsrs	r3, r3, #8
    5200:	4298      	cmp	r0, r3
    5202:	d301      	bcc.n	5208 <__clzsi2+0x18>
    5204:	0a00      	lsrs	r0, r0, #8
    5206:	3908      	subs	r1, #8
    5208:	091b      	lsrs	r3, r3, #4
    520a:	4298      	cmp	r0, r3
    520c:	d301      	bcc.n	5212 <__clzsi2+0x22>
    520e:	0900      	lsrs	r0, r0, #4
    5210:	3904      	subs	r1, #4
    5212:	a202      	add	r2, pc, #8	; (adr r2, 521c <__clzsi2+0x2c>)
    5214:	5c10      	ldrb	r0, [r2, r0]
    5216:	1840      	adds	r0, r0, r1
    5218:	4770      	bx	lr
    521a:	46c0      	nop			; (mov r8, r8)
    521c:	02020304 	.word	0x02020304
    5220:	01010101 	.word	0x01010101
	...

0000522c <__libc_init_array>:
    522c:	b570      	push	{r4, r5, r6, lr}
    522e:	2600      	movs	r6, #0
    5230:	4d0c      	ldr	r5, [pc, #48]	; (5264 <__libc_init_array+0x38>)
    5232:	4c0d      	ldr	r4, [pc, #52]	; (5268 <__libc_init_array+0x3c>)
    5234:	1b64      	subs	r4, r4, r5
    5236:	10a4      	asrs	r4, r4, #2
    5238:	42a6      	cmp	r6, r4
    523a:	d109      	bne.n	5250 <__libc_init_array+0x24>
    523c:	2600      	movs	r6, #0
    523e:	f000 f9db 	bl	55f8 <_init>
    5242:	4d0a      	ldr	r5, [pc, #40]	; (526c <__libc_init_array+0x40>)
    5244:	4c0a      	ldr	r4, [pc, #40]	; (5270 <__libc_init_array+0x44>)
    5246:	1b64      	subs	r4, r4, r5
    5248:	10a4      	asrs	r4, r4, #2
    524a:	42a6      	cmp	r6, r4
    524c:	d105      	bne.n	525a <__libc_init_array+0x2e>
    524e:	bd70      	pop	{r4, r5, r6, pc}
    5250:	00b3      	lsls	r3, r6, #2
    5252:	58eb      	ldr	r3, [r5, r3]
    5254:	4798      	blx	r3
    5256:	3601      	adds	r6, #1
    5258:	e7ee      	b.n	5238 <__libc_init_array+0xc>
    525a:	00b3      	lsls	r3, r6, #2
    525c:	58eb      	ldr	r3, [r5, r3]
    525e:	4798      	blx	r3
    5260:	3601      	adds	r6, #1
    5262:	e7f2      	b.n	524a <__libc_init_array+0x1e>
    5264:	00005604 	.word	0x00005604
    5268:	00005604 	.word	0x00005604
    526c:	00005604 	.word	0x00005604
    5270:	00005608 	.word	0x00005608

00005274 <malloc>:
    5274:	b510      	push	{r4, lr}
    5276:	4b03      	ldr	r3, [pc, #12]	; (5284 <malloc+0x10>)
    5278:	0001      	movs	r1, r0
    527a:	6818      	ldr	r0, [r3, #0]
    527c:	f000 f80e 	bl	529c <_malloc_r>
    5280:	bd10      	pop	{r4, pc}
    5282:	46c0      	nop			; (mov r8, r8)
    5284:	20000058 	.word	0x20000058

00005288 <memcpy>:
    5288:	2300      	movs	r3, #0
    528a:	b510      	push	{r4, lr}
    528c:	429a      	cmp	r2, r3
    528e:	d100      	bne.n	5292 <memcpy+0xa>
    5290:	bd10      	pop	{r4, pc}
    5292:	5ccc      	ldrb	r4, [r1, r3]
    5294:	54c4      	strb	r4, [r0, r3]
    5296:	3301      	adds	r3, #1
    5298:	e7f8      	b.n	528c <memcpy+0x4>
	...

0000529c <_malloc_r>:
    529c:	2303      	movs	r3, #3
    529e:	b570      	push	{r4, r5, r6, lr}
    52a0:	1ccd      	adds	r5, r1, #3
    52a2:	439d      	bics	r5, r3
    52a4:	3508      	adds	r5, #8
    52a6:	0006      	movs	r6, r0
    52a8:	2d0c      	cmp	r5, #12
    52aa:	d21e      	bcs.n	52ea <_malloc_r+0x4e>
    52ac:	250c      	movs	r5, #12
    52ae:	42a9      	cmp	r1, r5
    52b0:	d81d      	bhi.n	52ee <_malloc_r+0x52>
    52b2:	0030      	movs	r0, r6
    52b4:	f000 f862 	bl	537c <__malloc_lock>
    52b8:	4a25      	ldr	r2, [pc, #148]	; (5350 <_malloc_r+0xb4>)
    52ba:	6814      	ldr	r4, [r2, #0]
    52bc:	0021      	movs	r1, r4
    52be:	2900      	cmp	r1, #0
    52c0:	d119      	bne.n	52f6 <_malloc_r+0x5a>
    52c2:	4c24      	ldr	r4, [pc, #144]	; (5354 <_malloc_r+0xb8>)
    52c4:	6823      	ldr	r3, [r4, #0]
    52c6:	2b00      	cmp	r3, #0
    52c8:	d103      	bne.n	52d2 <_malloc_r+0x36>
    52ca:	0030      	movs	r0, r6
    52cc:	f000 f844 	bl	5358 <_sbrk_r>
    52d0:	6020      	str	r0, [r4, #0]
    52d2:	0029      	movs	r1, r5
    52d4:	0030      	movs	r0, r6
    52d6:	f000 f83f 	bl	5358 <_sbrk_r>
    52da:	1c43      	adds	r3, r0, #1
    52dc:	d12c      	bne.n	5338 <_malloc_r+0x9c>
    52de:	230c      	movs	r3, #12
    52e0:	0030      	movs	r0, r6
    52e2:	6033      	str	r3, [r6, #0]
    52e4:	f000 f84b 	bl	537e <__malloc_unlock>
    52e8:	e003      	b.n	52f2 <_malloc_r+0x56>
    52ea:	2d00      	cmp	r5, #0
    52ec:	dadf      	bge.n	52ae <_malloc_r+0x12>
    52ee:	230c      	movs	r3, #12
    52f0:	6033      	str	r3, [r6, #0]
    52f2:	2000      	movs	r0, #0
    52f4:	bd70      	pop	{r4, r5, r6, pc}
    52f6:	680b      	ldr	r3, [r1, #0]
    52f8:	1b5b      	subs	r3, r3, r5
    52fa:	d41a      	bmi.n	5332 <_malloc_r+0x96>
    52fc:	2b0b      	cmp	r3, #11
    52fe:	d903      	bls.n	5308 <_malloc_r+0x6c>
    5300:	600b      	str	r3, [r1, #0]
    5302:	18cc      	adds	r4, r1, r3
    5304:	6025      	str	r5, [r4, #0]
    5306:	e003      	b.n	5310 <_malloc_r+0x74>
    5308:	428c      	cmp	r4, r1
    530a:	d10e      	bne.n	532a <_malloc_r+0x8e>
    530c:	6863      	ldr	r3, [r4, #4]
    530e:	6013      	str	r3, [r2, #0]
    5310:	0030      	movs	r0, r6
    5312:	f000 f834 	bl	537e <__malloc_unlock>
    5316:	0020      	movs	r0, r4
    5318:	2207      	movs	r2, #7
    531a:	300b      	adds	r0, #11
    531c:	1d23      	adds	r3, r4, #4
    531e:	4390      	bics	r0, r2
    5320:	1ac3      	subs	r3, r0, r3
    5322:	d0e7      	beq.n	52f4 <_malloc_r+0x58>
    5324:	425a      	negs	r2, r3
    5326:	50e2      	str	r2, [r4, r3]
    5328:	e7e4      	b.n	52f4 <_malloc_r+0x58>
    532a:	684b      	ldr	r3, [r1, #4]
    532c:	6063      	str	r3, [r4, #4]
    532e:	000c      	movs	r4, r1
    5330:	e7ee      	b.n	5310 <_malloc_r+0x74>
    5332:	000c      	movs	r4, r1
    5334:	6849      	ldr	r1, [r1, #4]
    5336:	e7c2      	b.n	52be <_malloc_r+0x22>
    5338:	2303      	movs	r3, #3
    533a:	1cc4      	adds	r4, r0, #3
    533c:	439c      	bics	r4, r3
    533e:	42a0      	cmp	r0, r4
    5340:	d0e0      	beq.n	5304 <_malloc_r+0x68>
    5342:	1a21      	subs	r1, r4, r0
    5344:	0030      	movs	r0, r6
    5346:	f000 f807 	bl	5358 <_sbrk_r>
    534a:	1c43      	adds	r3, r0, #1
    534c:	d1da      	bne.n	5304 <_malloc_r+0x68>
    534e:	e7c6      	b.n	52de <_malloc_r+0x42>
    5350:	20000df0 	.word	0x20000df0
    5354:	20000df4 	.word	0x20000df4

00005358 <_sbrk_r>:
    5358:	2300      	movs	r3, #0
    535a:	b570      	push	{r4, r5, r6, lr}
    535c:	4c06      	ldr	r4, [pc, #24]	; (5378 <_sbrk_r+0x20>)
    535e:	0005      	movs	r5, r0
    5360:	0008      	movs	r0, r1
    5362:	6023      	str	r3, [r4, #0]
    5364:	f7fe f9fe 	bl	3764 <_sbrk>
    5368:	1c43      	adds	r3, r0, #1
    536a:	d103      	bne.n	5374 <_sbrk_r+0x1c>
    536c:	6823      	ldr	r3, [r4, #0]
    536e:	2b00      	cmp	r3, #0
    5370:	d000      	beq.n	5374 <_sbrk_r+0x1c>
    5372:	602b      	str	r3, [r5, #0]
    5374:	bd70      	pop	{r4, r5, r6, pc}
    5376:	46c0      	nop			; (mov r8, r8)
    5378:	200011f8 	.word	0x200011f8

0000537c <__malloc_lock>:
    537c:	4770      	bx	lr

0000537e <__malloc_unlock>:
    537e:	4770      	bx	lr

00005380 <_tcc_intflag>:
    5380:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    5390:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    53a0:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    53b0:	2c00 4200 3000 4200 3400 4200 3800 4200     .,.B.0.B.4.B.8.B
    53c0:	3c00 4200 0800 1000 2000 4000 8000 0000     .<.B..... .@....

000053d0 <tc_interrupt_vectors.13123>:
    53d0:	1312 1514 0016 0000 1996 0000 1be2 0000     ................
    53e0:	1be2 0000 1be2 0000 1be2 0000 1be2 0000     ................
    53f0:	1be2 0000 1be2 0000 1be2 0000 1be2 0000     ................
    5400:	1be2 0000 1be2 0000 1be2 0000 1be2 0000     ................
    5410:	1be2 0000 1be2 0000 197e 0000 1be2 0000     ........~.......
    5420:	1be2 0000 1be2 0000 1be2 0000 1be2 0000     ................
    5430:	1be2 0000 1be2 0000 1be2 0000 1be2 0000     ................
    5440:	1be2 0000 1be2 0000 1be2 0000 1be2 0000     ................
    5450:	1be2 0000 1be2 0000 198e 0000 1be2 0000     ................
    5460:	1be2 0000 1be2 0000 1be2 0000 1be2 0000     ................
    5470:	1be2 0000 1be2 0000 1be2 0000 1be2 0000     ................
    5480:	1be2 0000 1be2 0000 1be2 0000 1be2 0000     ................
    5490:	1be2 0000 1be2 0000 1986 0000 199e 0000     ................
    54a0:	1966 0000 1976 0000 196e 0000 0002 0000     f...v...n.......
    54b0:	0003 0000 0028 0000 0029 0000 0004 0000     ....(...).......
    54c0:	0005 0000 0006 0000 0007 0000 0020 0000     ............ ...
    54d0:	0021 0000 0022 0000 0023 0000 0024 0000     !..."...#...$...
    54e0:	0025 0000 0026 0000 0027 0000 0008 0000     %...&...'.......
    54f0:	0009 0000 000a 0000 000b 0000 0800 4200     ...............B
    5500:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    5510:	1c00 4200 2a12 0000 29fa 0000 29ee 0000     ...B.*...)...)..
    5520:	2a06 0000 29c4 0000                         .*...)..

00005528 <inputAnalogChannles>:
    5528:	0c00 0013                                   ....

0000552c <outputDetectAnalogChannles>:
    552c:	0504 0806 2f12 0000 2f0e 0000 2f0e 0000     ...../.../.../..
    553c:	2f70 0000 2f70 0000 2f26 0000 2f18 0000     p/..p/..&/.../..
    554c:	2f2c 0000 2f5e 0000 30f4 0000 30d4 0000     ,/..^/...0...0..
    555c:	30d4 0000 3160 0000 30e6 0000 3102 0000     .0..`1...0...1..
    556c:	30d8 0000 3110 0000 3150 0000 417c 0000     .0...1..P1..|A..
    557c:	415e 0000 4118 0000 4036 0000 4118 0000     ^A...A..6@...A..
    558c:	4150 0000 4118 0000 4036 0000 415e 0000     PA...A..6@..^A..
    559c:	415e 0000 4150 0000 4036 0000 402e 0000     ^A..PA..6@...@..
    55ac:	402e 0000 402e 0000 4394 0000 47dc 0000     .@...@...C...G..
    55bc:	469c 0000 469c 0000 4698 0000 47b4 0000     .F...F...F...G..
    55cc:	47b4 0000 47a6 0000 4698 0000 47b4 0000     .G...G...F...G..
    55dc:	47a6 0000 47b4 0000 4698 0000 47bc 0000     .G...G...F...G..
    55ec:	47bc 0000 47bc 0000 49c0 0000               .G...G...I..

000055f8 <_init>:
    55f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55fa:	46c0      	nop			; (mov r8, r8)
    55fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    55fe:	bc08      	pop	{r3}
    5600:	469e      	mov	lr, r3
    5602:	4770      	bx	lr

00005604 <__init_array_start>:
    5604:	000000dd 	.word	0x000000dd

00005608 <_fini>:
    5608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    560a:	46c0      	nop			; (mov r8, r8)
    560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    560e:	bc08      	pop	{r3}
    5610:	469e      	mov	lr, r3
    5612:	4770      	bx	lr

00005614 <__fini_array_start>:
    5614:	000000b5 	.word	0x000000b5
