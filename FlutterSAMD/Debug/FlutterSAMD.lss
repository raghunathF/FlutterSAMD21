
FlutterSAMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005b30  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  00005b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000011b0  200000bc  00005bec  000200bc  2**2
                  ALLOC
  3 .stack        00002004  2000126c  00006d9c  000200bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00054dcb  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006e26  00000000  00000000  00074f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008f2b  00000000  00000000  0007bd2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000950  00000000  00000000  00084c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009f0  00000000  00000000  000855a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020d9b  00000000  00000000  00085f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001996f  00000000  00000000  000a6d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008ea50  00000000  00000000  000c06a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000180c  00000000  00000000  0014f0f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 32 00 20 3d 3b 00 00 39 3b 00 00 39 3b 00 00     p2. =;..9;..9;..
	...
      2c:	39 3b 00 00 00 00 00 00 00 00 00 00 39 3b 00 00     9;..........9;..
      3c:	39 3b 00 00 39 3b 00 00 39 3b 00 00 39 3b 00 00     9;..9;..9;..9;..
      4c:	39 3b 00 00 39 3b 00 00 39 3b 00 00 39 3b 00 00     9;..9;..9;..9;..
      5c:	39 3b 00 00 39 3b 00 00 49 25 00 00 59 25 00 00     9;..9;..I%..Y%..
      6c:	69 25 00 00 79 25 00 00 89 25 00 00 99 25 00 00     i%..y%...%...%..
      7c:	29 0a 00 00 39 0a 00 00 49 0a 00 00 f1 0a 00 00     )...9...I.......
      8c:	01 0b 00 00 11 0b 00 00 21 0b 00 00 31 0b 00 00     ........!...1...
      9c:	a5 20 00 00 39 3b 00 00 39 3b 00 00 39 3b 00 00     . ..9;..9;..9;..
      ac:	39 3b 00 00 00 00 00 00                             9;......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000bc 	.word	0x200000bc
      d4:	00000000 	.word	0x00000000
      d8:	00005b30 	.word	0x00005b30

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c0 	.word	0x200000c0
     108:	00005b30 	.word	0x00005b30
     10c:	00005b30 	.word	0x00005b30
     110:	00000000 	.word	0x00000000

00000114 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     114:	b500      	push	{lr}
     116:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     118:	ab01      	add	r3, sp, #4
     11a:	2280      	movs	r2, #128	; 0x80
     11c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     11e:	780a      	ldrb	r2, [r1, #0]
     120:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     122:	784a      	ldrb	r2, [r1, #1]
     124:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     126:	788a      	ldrb	r2, [r1, #2]
     128:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     12a:	0019      	movs	r1, r3
     12c:	4b01      	ldr	r3, [pc, #4]	; (134 <port_pin_set_config+0x20>)
     12e:	4798      	blx	r3
}
     130:	b003      	add	sp, #12
     132:	bd00      	pop	{pc}
     134:	00003ad9 	.word	0x00003ad9

00000138 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     138:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     13a:	2207      	movs	r2, #7
     13c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     13e:	421a      	tst	r2, r3
     140:	d1fc      	bne.n	13c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     142:	4770      	bx	lr

00000144 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     144:	b5f0      	push	{r4, r5, r6, r7, lr}
     146:	46d6      	mov	lr, sl
     148:	464f      	mov	r7, r9
     14a:	4646      	mov	r6, r8
     14c:	b5c0      	push	{r6, r7, lr}
     14e:	b08a      	sub	sp, #40	; 0x28
     150:	0006      	movs	r6, r0
     152:	000f      	movs	r7, r1
     154:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     156:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     158:	0008      	movs	r0, r1
     15a:	4ba0      	ldr	r3, [pc, #640]	; (3dc <i2c_master_init+0x298>)
     15c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     15e:	4aa0      	ldr	r2, [pc, #640]	; (3e0 <i2c_master_init+0x29c>)
     160:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     162:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     164:	2301      	movs	r3, #1
     166:	40ab      	lsls	r3, r5
     168:	430b      	orrs	r3, r1
     16a:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     16c:	a909      	add	r1, sp, #36	; 0x24
     16e:	7b23      	ldrb	r3, [r4, #12]
     170:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     172:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     174:	b2c5      	uxtb	r5, r0
     176:	0028      	movs	r0, r5
     178:	4b9a      	ldr	r3, [pc, #616]	; (3e4 <i2c_master_init+0x2a0>)
     17a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     17c:	0028      	movs	r0, r5
     17e:	4b9a      	ldr	r3, [pc, #616]	; (3e8 <i2c_master_init+0x2a4>)
     180:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     182:	7b20      	ldrb	r0, [r4, #12]
     184:	2100      	movs	r1, #0
     186:	4b99      	ldr	r3, [pc, #612]	; (3ec <i2c_master_init+0x2a8>)
     188:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     18a:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     18c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     18e:	079b      	lsls	r3, r3, #30
     190:	d505      	bpl.n	19e <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     192:	b00a      	add	sp, #40	; 0x28
     194:	bc1c      	pop	{r2, r3, r4}
     196:	4690      	mov	r8, r2
     198:	4699      	mov	r9, r3
     19a:	46a2      	mov	sl, r4
     19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     19e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     1a0:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     1a2:	07db      	lsls	r3, r3, #31
     1a4:	d4f5      	bmi.n	192 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     1a6:	6830      	ldr	r0, [r6, #0]
     1a8:	4b8c      	ldr	r3, [pc, #560]	; (3dc <i2c_master_init+0x298>)
     1aa:	4699      	mov	r9, r3
     1ac:	4798      	blx	r3
     1ae:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     1b0:	498f      	ldr	r1, [pc, #572]	; (3f0 <i2c_master_init+0x2ac>)
     1b2:	4b90      	ldr	r3, [pc, #576]	; (3f4 <i2c_master_init+0x2b0>)
     1b4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     1b6:	00ad      	lsls	r5, r5, #2
     1b8:	4b8f      	ldr	r3, [pc, #572]	; (3f8 <i2c_master_init+0x2b4>)
     1ba:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     1bc:	2300      	movs	r3, #0
     1be:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     1c0:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     1c2:	2500      	movs	r5, #0
     1c4:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     1c6:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     1c8:	2225      	movs	r2, #37	; 0x25
     1ca:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     1cc:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     1ce:	3314      	adds	r3, #20
     1d0:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1d2:	6833      	ldr	r3, [r6, #0]
     1d4:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     1d6:	0018      	movs	r0, r3
     1d8:	47c8      	blx	r9
     1da:	4681      	mov	r9, r0
     1dc:	2380      	movs	r3, #128	; 0x80
     1de:	aa08      	add	r2, sp, #32
     1e0:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1e2:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1e4:	2301      	movs	r3, #1
     1e6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     1e8:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1ea:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     1ec:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     1ee:	2800      	cmp	r0, #0
     1f0:	d100      	bne.n	1f4 <i2c_master_init+0xb0>
     1f2:	e0af      	b.n	354 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1f4:	ab08      	add	r3, sp, #32
     1f6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1f8:	2302      	movs	r3, #2
     1fa:	aa08      	add	r2, sp, #32
     1fc:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     1fe:	0c00      	lsrs	r0, r0, #16
     200:	b2c0      	uxtb	r0, r0
     202:	0011      	movs	r1, r2
     204:	4b7d      	ldr	r3, [pc, #500]	; (3fc <i2c_master_init+0x2b8>)
     206:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     208:	2f00      	cmp	r7, #0
     20a:	d100      	bne.n	20e <i2c_master_init+0xca>
     20c:	e0a7      	b.n	35e <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     20e:	ab08      	add	r3, sp, #32
     210:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     212:	2302      	movs	r3, #2
     214:	aa08      	add	r2, sp, #32
     216:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     218:	0c3f      	lsrs	r7, r7, #16
     21a:	b2f8      	uxtb	r0, r7
     21c:	0011      	movs	r1, r2
     21e:	4b77      	ldr	r3, [pc, #476]	; (3fc <i2c_master_init+0x2b8>)
     220:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     222:	8aa3      	ldrh	r3, [r4, #20]
     224:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     226:	8ae3      	ldrh	r3, [r4, #22]
     228:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     22a:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     22c:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     22e:	2b00      	cmp	r3, #0
     230:	d104      	bne.n	23c <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     232:	4b73      	ldr	r3, [pc, #460]	; (400 <i2c_master_init+0x2bc>)
     234:	789b      	ldrb	r3, [r3, #2]
     236:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     238:	0fdb      	lsrs	r3, r3, #31
     23a:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     23c:	68a1      	ldr	r1, [r4, #8]
     23e:	6923      	ldr	r3, [r4, #16]
     240:	430b      	orrs	r3, r1
     242:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     244:	2224      	movs	r2, #36	; 0x24
     246:	5ca2      	ldrb	r2, [r4, r2]
     248:	2a00      	cmp	r2, #0
     24a:	d002      	beq.n	252 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     24c:	2280      	movs	r2, #128	; 0x80
     24e:	05d2      	lsls	r2, r2, #23
     250:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     252:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     254:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     256:	222c      	movs	r2, #44	; 0x2c
     258:	5ca2      	ldrb	r2, [r4, r2]
     25a:	2a00      	cmp	r2, #0
     25c:	d103      	bne.n	266 <i2c_master_init+0x122>
     25e:	2280      	movs	r2, #128	; 0x80
     260:	0492      	lsls	r2, r2, #18
     262:	4291      	cmp	r1, r2
     264:	d102      	bne.n	26c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     266:	2280      	movs	r2, #128	; 0x80
     268:	0512      	lsls	r2, r2, #20
     26a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     26c:	222d      	movs	r2, #45	; 0x2d
     26e:	5ca2      	ldrb	r2, [r4, r2]
     270:	2a00      	cmp	r2, #0
     272:	d002      	beq.n	27a <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     274:	2280      	movs	r2, #128	; 0x80
     276:	0412      	lsls	r2, r2, #16
     278:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     27a:	222e      	movs	r2, #46	; 0x2e
     27c:	5ca2      	ldrb	r2, [r4, r2]
     27e:	2a00      	cmp	r2, #0
     280:	d002      	beq.n	288 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     282:	2280      	movs	r2, #128	; 0x80
     284:	03d2      	lsls	r2, r2, #15
     286:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     288:	4642      	mov	r2, r8
     28a:	6812      	ldr	r2, [r2, #0]
     28c:	4313      	orrs	r3, r2
     28e:	4642      	mov	r2, r8
     290:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     292:	2380      	movs	r3, #128	; 0x80
     294:	005b      	lsls	r3, r3, #1
     296:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     298:	4648      	mov	r0, r9
     29a:	3014      	adds	r0, #20
     29c:	b2c0      	uxtb	r0, r0
     29e:	4b59      	ldr	r3, [pc, #356]	; (404 <i2c_master_init+0x2c0>)
     2a0:	4798      	blx	r3
     2a2:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     2a4:	23fa      	movs	r3, #250	; 0xfa
     2a6:	009b      	lsls	r3, r3, #2
     2a8:	6822      	ldr	r2, [r4, #0]
     2aa:	435a      	muls	r2, r3
     2ac:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     2ae:	6863      	ldr	r3, [r4, #4]
     2b0:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     2b2:	4d55      	ldr	r5, [pc, #340]	; (408 <i2c_master_init+0x2c4>)
     2b4:	47a8      	blx	r5
     2b6:	9000      	str	r0, [sp, #0]
     2b8:	9101      	str	r1, [sp, #4]
     2ba:	464b      	mov	r3, r9
     2bc:	0058      	lsls	r0, r3, #1
     2be:	47a8      	blx	r5
     2c0:	9002      	str	r0, [sp, #8]
     2c2:	9103      	str	r1, [sp, #12]
     2c4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     2c6:	47a8      	blx	r5
     2c8:	9004      	str	r0, [sp, #16]
     2ca:	9105      	str	r1, [sp, #20]
     2cc:	4f4f      	ldr	r7, [pc, #316]	; (40c <i2c_master_init+0x2c8>)
     2ce:	4a50      	ldr	r2, [pc, #320]	; (410 <i2c_master_init+0x2cc>)
     2d0:	4b50      	ldr	r3, [pc, #320]	; (414 <i2c_master_init+0x2d0>)
     2d2:	9800      	ldr	r0, [sp, #0]
     2d4:	9901      	ldr	r1, [sp, #4]
     2d6:	47b8      	blx	r7
     2d8:	0002      	movs	r2, r0
     2da:	000b      	movs	r3, r1
     2dc:	9804      	ldr	r0, [sp, #16]
     2de:	9905      	ldr	r1, [sp, #20]
     2e0:	47b8      	blx	r7
     2e2:	4e4d      	ldr	r6, [pc, #308]	; (418 <i2c_master_init+0x2d4>)
     2e4:	2200      	movs	r2, #0
     2e6:	4b4d      	ldr	r3, [pc, #308]	; (41c <i2c_master_init+0x2d8>)
     2e8:	47b0      	blx	r6
     2ea:	9004      	str	r0, [sp, #16]
     2ec:	9105      	str	r1, [sp, #20]
     2ee:	4648      	mov	r0, r9
     2f0:	47a8      	blx	r5
     2f2:	0002      	movs	r2, r0
     2f4:	000b      	movs	r3, r1
     2f6:	9804      	ldr	r0, [sp, #16]
     2f8:	9905      	ldr	r1, [sp, #20]
     2fa:	47b8      	blx	r7
     2fc:	0002      	movs	r2, r0
     2fe:	000b      	movs	r3, r1
     300:	4d47      	ldr	r5, [pc, #284]	; (420 <i2c_master_init+0x2dc>)
     302:	9800      	ldr	r0, [sp, #0]
     304:	9901      	ldr	r1, [sp, #4]
     306:	47a8      	blx	r5
     308:	9a02      	ldr	r2, [sp, #8]
     30a:	9b03      	ldr	r3, [sp, #12]
     30c:	47b0      	blx	r6
     30e:	2200      	movs	r2, #0
     310:	4b44      	ldr	r3, [pc, #272]	; (424 <i2c_master_init+0x2e0>)
     312:	47a8      	blx	r5
     314:	9a02      	ldr	r2, [sp, #8]
     316:	9b03      	ldr	r3, [sp, #12]
     318:	4d43      	ldr	r5, [pc, #268]	; (428 <i2c_master_init+0x2e4>)
     31a:	47a8      	blx	r5
     31c:	4b43      	ldr	r3, [pc, #268]	; (42c <i2c_master_init+0x2e8>)
     31e:	4798      	blx	r3
     320:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     322:	2380      	movs	r3, #128	; 0x80
     324:	049b      	lsls	r3, r3, #18
     326:	68a2      	ldr	r2, [r4, #8]
     328:	429a      	cmp	r2, r3
     32a:	d01e      	beq.n	36a <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     32c:	0003      	movs	r3, r0
     32e:	2040      	movs	r0, #64	; 0x40
     330:	2dff      	cmp	r5, #255	; 0xff
     332:	d900      	bls.n	336 <i2c_master_init+0x1f2>
     334:	e72d      	b.n	192 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     336:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     338:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     33a:	25ff      	movs	r5, #255	; 0xff
     33c:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     33e:	0624      	lsls	r4, r4, #24
     340:	4325      	orrs	r5, r4
     342:	0400      	lsls	r0, r0, #16
     344:	23ff      	movs	r3, #255	; 0xff
     346:	041b      	lsls	r3, r3, #16
     348:	4018      	ands	r0, r3
     34a:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     34c:	4643      	mov	r3, r8
     34e:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     350:	2000      	movs	r0, #0
     352:	e71e      	b.n	192 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     354:	2100      	movs	r1, #0
     356:	4640      	mov	r0, r8
     358:	4b35      	ldr	r3, [pc, #212]	; (430 <i2c_master_init+0x2ec>)
     35a:	4798      	blx	r3
     35c:	e74a      	b.n	1f4 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     35e:	2101      	movs	r1, #1
     360:	4640      	mov	r0, r8
     362:	4b33      	ldr	r3, [pc, #204]	; (430 <i2c_master_init+0x2ec>)
     364:	4798      	blx	r3
     366:	0007      	movs	r7, r0
     368:	e751      	b.n	20e <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     36a:	26fa      	movs	r6, #250	; 0xfa
     36c:	00b6      	lsls	r6, r6, #2
     36e:	4653      	mov	r3, sl
     370:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     372:	9800      	ldr	r0, [sp, #0]
     374:	9901      	ldr	r1, [sp, #4]
     376:	0002      	movs	r2, r0
     378:	000b      	movs	r3, r1
     37a:	4c27      	ldr	r4, [pc, #156]	; (418 <i2c_master_init+0x2d4>)
     37c:	47a0      	blx	r4
     37e:	9000      	str	r0, [sp, #0]
     380:	9101      	str	r1, [sp, #4]
     382:	0030      	movs	r0, r6
     384:	4b20      	ldr	r3, [pc, #128]	; (408 <i2c_master_init+0x2c4>)
     386:	4798      	blx	r3
     388:	2200      	movs	r2, #0
     38a:	4b2a      	ldr	r3, [pc, #168]	; (434 <i2c_master_init+0x2f0>)
     38c:	47b8      	blx	r7
     38e:	0002      	movs	r2, r0
     390:	000b      	movs	r3, r1
     392:	9800      	ldr	r0, [sp, #0]
     394:	9901      	ldr	r1, [sp, #4]
     396:	4c24      	ldr	r4, [pc, #144]	; (428 <i2c_master_init+0x2e4>)
     398:	47a0      	blx	r4
     39a:	2200      	movs	r2, #0
     39c:	4b21      	ldr	r3, [pc, #132]	; (424 <i2c_master_init+0x2e0>)
     39e:	4c20      	ldr	r4, [pc, #128]	; (420 <i2c_master_init+0x2dc>)
     3a0:	47a0      	blx	r4
     3a2:	4b22      	ldr	r3, [pc, #136]	; (42c <i2c_master_init+0x2e8>)
     3a4:	4798      	blx	r3
     3a6:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     3a8:	d00c      	beq.n	3c4 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     3aa:	0031      	movs	r1, r6
     3ac:	9807      	ldr	r0, [sp, #28]
     3ae:	4b22      	ldr	r3, [pc, #136]	; (438 <i2c_master_init+0x2f4>)
     3b0:	4798      	blx	r3
     3b2:	3802      	subs	r0, #2
     3b4:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3b6:	002b      	movs	r3, r5
     3b8:	2dff      	cmp	r5, #255	; 0xff
     3ba:	d80c      	bhi.n	3d6 <i2c_master_init+0x292>
     3bc:	28ff      	cmp	r0, #255	; 0xff
     3be:	d9bc      	bls.n	33a <i2c_master_init+0x1f6>
     3c0:	2040      	movs	r0, #64	; 0x40
     3c2:	e6e6      	b.n	192 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     3c4:	0071      	lsls	r1, r6, #1
     3c6:	1e48      	subs	r0, r1, #1
     3c8:	9b07      	ldr	r3, [sp, #28]
     3ca:	469c      	mov	ip, r3
     3cc:	4460      	add	r0, ip
     3ce:	4b1a      	ldr	r3, [pc, #104]	; (438 <i2c_master_init+0x2f4>)
     3d0:	4798      	blx	r3
     3d2:	3801      	subs	r0, #1
     3d4:	e7ef      	b.n	3b6 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3d6:	2040      	movs	r0, #64	; 0x40
     3d8:	e6db      	b.n	192 <i2c_master_init+0x4e>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	000024a1 	.word	0x000024a1
     3e0:	40000400 	.word	0x40000400
     3e4:	000039e1 	.word	0x000039e1
     3e8:	00003955 	.word	0x00003955
     3ec:	000022dd 	.word	0x000022dd
     3f0:	000007f1 	.word	0x000007f1
     3f4:	000024dd 	.word	0x000024dd
     3f8:	20000f8c 	.word	0x20000f8c
     3fc:	00003ad9 	.word	0x00003ad9
     400:	41002000 	.word	0x41002000
     404:	000039fd 	.word	0x000039fd
     408:	0000564d 	.word	0x0000564d
     40c:	00004ab9 	.word	0x00004ab9
     410:	e826d695 	.word	0xe826d695
     414:	3e112e0b 	.word	0x3e112e0b
     418:	00003e31 	.word	0x00003e31
     41c:	40240000 	.word	0x40240000
     420:	00004fb9 	.word	0x00004fb9
     424:	3ff00000 	.word	0x3ff00000
     428:	00004451 	.word	0x00004451
     42c:	000055e5 	.word	0x000055e5
     430:	00002329 	.word	0x00002329
     434:	40080000 	.word	0x40080000
     438:	00003cc5 	.word	0x00003cc5

0000043c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     43c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     43e:	7e1a      	ldrb	r2, [r3, #24]
     440:	0792      	lsls	r2, r2, #30
     442:	d507      	bpl.n	454 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     444:	2202      	movs	r2, #2
     446:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     448:	8b5b      	ldrh	r3, [r3, #26]
     44a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     44c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     44e:	17db      	asrs	r3, r3, #31
     450:	4018      	ands	r0, r3
}
     452:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     454:	8b5a      	ldrh	r2, [r3, #26]
     456:	0752      	lsls	r2, r2, #29
     458:	d506      	bpl.n	468 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     45a:	6859      	ldr	r1, [r3, #4]
     45c:	22c0      	movs	r2, #192	; 0xc0
     45e:	0292      	lsls	r2, r2, #10
     460:	430a      	orrs	r2, r1
     462:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     464:	2018      	movs	r0, #24
     466:	e7f4      	b.n	452 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     468:	2000      	movs	r0, #0
     46a:	e7f2      	b.n	452 <_i2c_master_address_response+0x16>

0000046c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     46c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     46e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     470:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     472:	2401      	movs	r4, #1
     474:	2502      	movs	r5, #2
     476:	7e11      	ldrb	r1, [r2, #24]
     478:	4221      	tst	r1, r4
     47a:	d10b      	bne.n	494 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     47c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     47e:	4229      	tst	r1, r5
     480:	d106      	bne.n	490 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     482:	3301      	adds	r3, #1
     484:	b29b      	uxth	r3, r3
     486:	8901      	ldrh	r1, [r0, #8]
     488:	4299      	cmp	r1, r3
     48a:	d8f4      	bhi.n	476 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     48c:	2012      	movs	r0, #18
     48e:	e002      	b.n	496 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     490:	2000      	movs	r0, #0
     492:	e000      	b.n	496 <_i2c_master_wait_for_bus+0x2a>
     494:	2000      	movs	r0, #0
}
     496:	bd30      	pop	{r4, r5, pc}

00000498 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     498:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     49a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     49c:	6862      	ldr	r2, [r4, #4]
     49e:	2380      	movs	r3, #128	; 0x80
     4a0:	02db      	lsls	r3, r3, #11
     4a2:	4313      	orrs	r3, r2
     4a4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     4a6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4a8:	4b02      	ldr	r3, [pc, #8]	; (4b4 <_i2c_master_send_hs_master_code+0x1c>)
     4aa:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     4ac:	2301      	movs	r3, #1
     4ae:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     4b0:	bd10      	pop	{r4, pc}
     4b2:	46c0      	nop			; (mov r8, r8)
     4b4:	0000046d 	.word	0x0000046d

000004b8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ba:	46de      	mov	lr, fp
     4bc:	4657      	mov	r7, sl
     4be:	464e      	mov	r6, r9
     4c0:	4645      	mov	r5, r8
     4c2:	b5e0      	push	{r5, r6, r7, lr}
     4c4:	b083      	sub	sp, #12
     4c6:	0006      	movs	r6, r0
     4c8:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4ca:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     4cc:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     4ce:	682b      	ldr	r3, [r5, #0]
     4d0:	011b      	lsls	r3, r3, #4
     4d2:	0fdb      	lsrs	r3, r3, #31
     4d4:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     4d6:	7a4b      	ldrb	r3, [r1, #9]
     4d8:	2b00      	cmp	r3, #0
     4da:	d12b      	bne.n	534 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     4dc:	686b      	ldr	r3, [r5, #4]
     4de:	4a58      	ldr	r2, [pc, #352]	; (640 <_i2c_master_read_packet+0x188>)
     4e0:	4013      	ands	r3, r2
     4e2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     4e4:	464b      	mov	r3, r9
     4e6:	7a1b      	ldrb	r3, [r3, #8]
     4e8:	2b00      	cmp	r3, #0
     4ea:	d127      	bne.n	53c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4ec:	464b      	mov	r3, r9
     4ee:	881b      	ldrh	r3, [r3, #0]
     4f0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     4f2:	464a      	mov	r2, r9
     4f4:	7a52      	ldrb	r2, [r2, #9]
     4f6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4f8:	4313      	orrs	r3, r2
     4fa:	2201      	movs	r2, #1
     4fc:	4313      	orrs	r3, r2
     4fe:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     500:	0030      	movs	r0, r6
     502:	4b50      	ldr	r3, [pc, #320]	; (644 <_i2c_master_read_packet+0x18c>)
     504:	4798      	blx	r3
     506:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     508:	4653      	mov	r3, sl
     50a:	2b00      	cmp	r3, #0
     50c:	d003      	beq.n	516 <_i2c_master_read_packet+0x5e>
     50e:	464b      	mov	r3, r9
     510:	885b      	ldrh	r3, [r3, #2]
     512:	2b01      	cmp	r3, #1
     514:	d03b      	beq.n	58e <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     516:	686b      	ldr	r3, [r5, #4]
     518:	4a49      	ldr	r2, [pc, #292]	; (640 <_i2c_master_read_packet+0x188>)
     51a:	4013      	ands	r3, r2
     51c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     51e:	9b01      	ldr	r3, [sp, #4]
     520:	2b00      	cmp	r3, #0
     522:	d03a      	beq.n	59a <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     524:	9801      	ldr	r0, [sp, #4]
     526:	b003      	add	sp, #12
     528:	bc3c      	pop	{r2, r3, r4, r5}
     52a:	4690      	mov	r8, r2
     52c:	4699      	mov	r9, r3
     52e:	46a2      	mov	sl, r4
     530:	46ab      	mov	fp, r5
     532:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     534:	7a89      	ldrb	r1, [r1, #10]
     536:	4b44      	ldr	r3, [pc, #272]	; (648 <_i2c_master_read_packet+0x190>)
     538:	4798      	blx	r3
     53a:	e7cf      	b.n	4dc <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     53c:	464b      	mov	r3, r9
     53e:	881b      	ldrh	r3, [r3, #0]
     540:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     542:	464a      	mov	r2, r9
     544:	7a52      	ldrb	r2, [r2, #9]
     546:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     548:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     54a:	2280      	movs	r2, #128	; 0x80
     54c:	0212      	lsls	r2, r2, #8
     54e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     550:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     552:	0030      	movs	r0, r6
     554:	4b3b      	ldr	r3, [pc, #236]	; (644 <_i2c_master_read_packet+0x18c>)
     556:	4798      	blx	r3
     558:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     55a:	686b      	ldr	r3, [r5, #4]
     55c:	4a38      	ldr	r2, [pc, #224]	; (640 <_i2c_master_read_packet+0x188>)
     55e:	4013      	ands	r3, r2
     560:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     562:	2800      	cmp	r0, #0
     564:	d1de      	bne.n	524 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     566:	0030      	movs	r0, r6
     568:	4b38      	ldr	r3, [pc, #224]	; (64c <_i2c_master_read_packet+0x194>)
     56a:	4798      	blx	r3
     56c:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     56e:	2800      	cmp	r0, #0
     570:	d1d8      	bne.n	524 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     572:	464b      	mov	r3, r9
     574:	881b      	ldrh	r3, [r3, #0]
     576:	0a1b      	lsrs	r3, r3, #8
     578:	2278      	movs	r2, #120	; 0x78
     57a:	4313      	orrs	r3, r2
     57c:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     57e:	464a      	mov	r2, r9
     580:	7a52      	ldrb	r2, [r2, #9]
     582:	0392      	lsls	r2, r2, #14
     584:	2101      	movs	r1, #1
     586:	430a      	orrs	r2, r1
     588:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     58a:	626b      	str	r3, [r5, #36]	; 0x24
     58c:	e7b8      	b.n	500 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     58e:	686a      	ldr	r2, [r5, #4]
     590:	2380      	movs	r3, #128	; 0x80
     592:	02db      	lsls	r3, r3, #11
     594:	4313      	orrs	r3, r2
     596:	606b      	str	r3, [r5, #4]
     598:	e7c1      	b.n	51e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     59a:	0030      	movs	r0, r6
     59c:	4b2b      	ldr	r3, [pc, #172]	; (64c <_i2c_master_read_packet+0x194>)
     59e:	4798      	blx	r3
     5a0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     5a2:	2800      	cmp	r0, #0
     5a4:	d1be      	bne.n	524 <_i2c_master_read_packet+0x6c>
     5a6:	3c01      	subs	r4, #1
     5a8:	b2a4      	uxth	r4, r4
     5aa:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     5ac:	4b28      	ldr	r3, [pc, #160]	; (650 <_i2c_master_read_packet+0x198>)
     5ae:	469b      	mov	fp, r3
     5b0:	e015      	b.n	5de <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     5b2:	2c01      	cmp	r4, #1
     5b4:	d020      	beq.n	5f8 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     5b6:	0030      	movs	r0, r6
     5b8:	4b26      	ldr	r3, [pc, #152]	; (654 <_i2c_master_read_packet+0x19c>)
     5ba:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     5bc:	4643      	mov	r3, r8
     5be:	1c5f      	adds	r7, r3, #1
     5c0:	b2bf      	uxth	r7, r7
     5c2:	2328      	movs	r3, #40	; 0x28
     5c4:	5ceb      	ldrb	r3, [r5, r3]
     5c6:	464a      	mov	r2, r9
     5c8:	6852      	ldr	r2, [r2, #4]
     5ca:	4641      	mov	r1, r8
     5cc:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     5ce:	0030      	movs	r0, r6
     5d0:	4b1c      	ldr	r3, [pc, #112]	; (644 <_i2c_master_read_packet+0x18c>)
     5d2:	4798      	blx	r3
     5d4:	3c01      	subs	r4, #1
     5d6:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     5d8:	2800      	cmp	r0, #0
     5da:	d115      	bne.n	608 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     5dc:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     5de:	455c      	cmp	r4, fp
     5e0:	d014      	beq.n	60c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     5e2:	8b6b      	ldrh	r3, [r5, #26]
     5e4:	069b      	lsls	r3, r3, #26
     5e6:	d527      	bpl.n	638 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     5e8:	7af3      	ldrb	r3, [r6, #11]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d0e3      	beq.n	5b6 <_i2c_master_read_packet+0xfe>
     5ee:	4653      	mov	r3, sl
     5f0:	2b00      	cmp	r3, #0
     5f2:	d1de      	bne.n	5b2 <_i2c_master_read_packet+0xfa>
     5f4:	2c00      	cmp	r4, #0
     5f6:	d1de      	bne.n	5b6 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5f8:	686a      	ldr	r2, [r5, #4]
     5fa:	2380      	movs	r3, #128	; 0x80
     5fc:	02db      	lsls	r3, r3, #11
     5fe:	4313      	orrs	r3, r2
     600:	606b      	str	r3, [r5, #4]
     602:	3c01      	subs	r4, #1
     604:	b2a4      	uxth	r4, r4
     606:	e7ea      	b.n	5de <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     608:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     60a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     60c:	7ab3      	ldrb	r3, [r6, #10]
     60e:	2b00      	cmp	r3, #0
     610:	d109      	bne.n	626 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     612:	0030      	movs	r0, r6
     614:	4b0f      	ldr	r3, [pc, #60]	; (654 <_i2c_master_read_packet+0x19c>)
     616:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     618:	2328      	movs	r3, #40	; 0x28
     61a:	5cea      	ldrb	r2, [r5, r3]
     61c:	464b      	mov	r3, r9
     61e:	685b      	ldr	r3, [r3, #4]
     620:	4641      	mov	r1, r8
     622:	545a      	strb	r2, [r3, r1]
     624:	e77e      	b.n	524 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     626:	0030      	movs	r0, r6
     628:	4b0a      	ldr	r3, [pc, #40]	; (654 <_i2c_master_read_packet+0x19c>)
     62a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     62c:	686a      	ldr	r2, [r5, #4]
     62e:	23c0      	movs	r3, #192	; 0xc0
     630:	029b      	lsls	r3, r3, #10
     632:	4313      	orrs	r3, r2
     634:	606b      	str	r3, [r5, #4]
     636:	e7ec      	b.n	612 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     638:	2341      	movs	r3, #65	; 0x41
     63a:	9301      	str	r3, [sp, #4]
     63c:	e772      	b.n	524 <_i2c_master_read_packet+0x6c>
     63e:	46c0      	nop			; (mov r8, r8)
     640:	fffbffff 	.word	0xfffbffff
     644:	0000046d 	.word	0x0000046d
     648:	00000499 	.word	0x00000499
     64c:	0000043d 	.word	0x0000043d
     650:	0000ffff 	.word	0x0000ffff
     654:	00000139 	.word	0x00000139

00000658 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     658:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
     65a:	8b83      	ldrh	r3, [r0, #28]
     65c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     65e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     660:	2b00      	cmp	r3, #0
     662:	d001      	beq.n	668 <i2c_master_read_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_read_packet(module, packet);
}
     664:	0010      	movs	r0, r2
     666:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     668:	3301      	adds	r3, #1
     66a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     66c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     66e:	4b02      	ldr	r3, [pc, #8]	; (678 <i2c_master_read_packet_wait+0x20>)
     670:	4798      	blx	r3
     672:	0002      	movs	r2, r0
     674:	e7f6      	b.n	664 <i2c_master_read_packet_wait+0xc>
     676:	46c0      	nop			; (mov r8, r8)
     678:	000004b9 	.word	0x000004b9

0000067c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     67c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     67e:	2207      	movs	r2, #7
     680:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     682:	421a      	tst	r2, r3
     684:	d1fc      	bne.n	680 <_i2c_master_wait_for_sync+0x4>
}
     686:	4770      	bx	lr

00000688 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     688:	b570      	push	{r4, r5, r6, lr}
     68a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     68c:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     68e:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     690:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     692:	8b83      	ldrh	r3, [r0, #28]
     694:	1aed      	subs	r5, r5, r3
     696:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     698:	8b83      	ldrh	r3, [r0, #28]
     69a:	3b01      	subs	r3, #1
     69c:	b29b      	uxth	r3, r3
     69e:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     6a0:	0113      	lsls	r3, r2, #4
     6a2:	d51d      	bpl.n	6e0 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     6a4:	7ac3      	ldrb	r3, [r0, #11]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d003      	beq.n	6b2 <_i2c_master_read+0x2a>
     6aa:	8b83      	ldrh	r3, [r0, #28]
     6ac:	b29b      	uxth	r3, r3
     6ae:	2b01      	cmp	r3, #1
     6b0:	d010      	beq.n	6d4 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     6b2:	8ba3      	ldrh	r3, [r4, #28]
     6b4:	b29b      	uxth	r3, r3
     6b6:	2b00      	cmp	r3, #0
     6b8:	d102      	bne.n	6c0 <_i2c_master_read+0x38>
		if (module->send_stop) {
     6ba:	7aa3      	ldrb	r3, [r4, #10]
     6bc:	2b00      	cmp	r3, #0
     6be:	d11c      	bne.n	6fa <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     6c0:	0020      	movs	r0, r4
     6c2:	4b12      	ldr	r3, [pc, #72]	; (70c <_i2c_master_read+0x84>)
     6c4:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     6c6:	6a23      	ldr	r3, [r4, #32]
     6c8:	195d      	adds	r5, r3, r5
     6ca:	2328      	movs	r3, #40	; 0x28
     6cc:	5cf3      	ldrb	r3, [r6, r3]
     6ce:	b2db      	uxtb	r3, r3
     6d0:	702b      	strb	r3, [r5, #0]
}
     6d2:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6d4:	6872      	ldr	r2, [r6, #4]
     6d6:	2380      	movs	r3, #128	; 0x80
     6d8:	02db      	lsls	r3, r3, #11
     6da:	4313      	orrs	r3, r2
     6dc:	6073      	str	r3, [r6, #4]
     6de:	e7e8      	b.n	6b2 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     6e0:	7ac3      	ldrb	r3, [r0, #11]
     6e2:	2b00      	cmp	r3, #0
     6e4:	d0e5      	beq.n	6b2 <_i2c_master_read+0x2a>
     6e6:	8b83      	ldrh	r3, [r0, #28]
     6e8:	b29b      	uxth	r3, r3
     6ea:	2b00      	cmp	r3, #0
     6ec:	d1e1      	bne.n	6b2 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6ee:	6872      	ldr	r2, [r6, #4]
     6f0:	2380      	movs	r3, #128	; 0x80
     6f2:	02db      	lsls	r3, r3, #11
     6f4:	4313      	orrs	r3, r2
     6f6:	6073      	str	r3, [r6, #4]
     6f8:	e7db      	b.n	6b2 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     6fa:	0020      	movs	r0, r4
     6fc:	4b03      	ldr	r3, [pc, #12]	; (70c <_i2c_master_read+0x84>)
     6fe:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     700:	6872      	ldr	r2, [r6, #4]
     702:	23c0      	movs	r3, #192	; 0xc0
     704:	029b      	lsls	r3, r3, #10
     706:	4313      	orrs	r3, r2
     708:	6073      	str	r3, [r6, #4]
     70a:	e7d9      	b.n	6c0 <_i2c_master_read+0x38>
     70c:	0000067d 	.word	0x0000067d

00000710 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     710:	b570      	push	{r4, r5, r6, lr}
     712:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     714:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     716:	8b6b      	ldrh	r3, [r5, #26]
     718:	075b      	lsls	r3, r3, #29
     71a:	d503      	bpl.n	724 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     71c:	221e      	movs	r2, #30
     71e:	2325      	movs	r3, #37	; 0x25
     720:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     722:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     724:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     726:	8b83      	ldrh	r3, [r0, #28]
     728:	1af6      	subs	r6, r6, r3
     72a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     72c:	8b83      	ldrh	r3, [r0, #28]
     72e:	3b01      	subs	r3, #1
     730:	b29b      	uxth	r3, r3
     732:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     734:	4b04      	ldr	r3, [pc, #16]	; (748 <_i2c_master_write+0x38>)
     736:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     738:	6a23      	ldr	r3, [r4, #32]
     73a:	199e      	adds	r6, r3, r6
     73c:	7833      	ldrb	r3, [r6, #0]
     73e:	b2db      	uxtb	r3, r3
     740:	2228      	movs	r2, #40	; 0x28
     742:	54ab      	strb	r3, [r5, r2]
     744:	e7ed      	b.n	722 <_i2c_master_write+0x12>
     746:	46c0      	nop			; (mov r8, r8)
     748:	0000067d 	.word	0x0000067d

0000074c <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     74c:	b570      	push	{r4, r5, r6, lr}
     74e:	0005      	movs	r5, r0
     750:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     752:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     754:	7a4b      	ldrb	r3, [r1, #9]
     756:	2b00      	cmp	r3, #0
     758:	d11a      	bne.n	790 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     75a:	6873      	ldr	r3, [r6, #4]
     75c:	4a13      	ldr	r2, [pc, #76]	; (7ac <_i2c_master_write_packet+0x60>)
     75e:	4013      	ands	r3, r2
     760:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     762:	6863      	ldr	r3, [r4, #4]
     764:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     766:	8863      	ldrh	r3, [r4, #2]
     768:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     76a:	2200      	movs	r2, #0
     76c:	2324      	movs	r3, #36	; 0x24
     76e:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     770:	3205      	adds	r2, #5
     772:	3301      	adds	r3, #1
     774:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     776:	3b22      	subs	r3, #34	; 0x22
     778:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     77a:	7a23      	ldrb	r3, [r4, #8]
     77c:	2b00      	cmp	r3, #0
     77e:	d10b      	bne.n	798 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     780:	8823      	ldrh	r3, [r4, #0]
     782:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     784:	7a62      	ldrb	r2, [r4, #9]
     786:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     788:	4313      	orrs	r3, r2
     78a:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     78c:	2000      	movs	r0, #0
     78e:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     790:	7a89      	ldrb	r1, [r1, #10]
     792:	4b07      	ldr	r3, [pc, #28]	; (7b0 <_i2c_master_write_packet+0x64>)
     794:	4798      	blx	r3
     796:	e7e0      	b.n	75a <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     798:	8823      	ldrh	r3, [r4, #0]
     79a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     79c:	7a62      	ldrb	r2, [r4, #9]
     79e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     7a0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7a2:	2280      	movs	r2, #128	; 0x80
     7a4:	0212      	lsls	r2, r2, #8
     7a6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     7a8:	6273      	str	r3, [r6, #36]	; 0x24
     7aa:	e7ef      	b.n	78c <_i2c_master_write_packet+0x40>
     7ac:	fffbffff 	.word	0xfffbffff
     7b0:	00000499 	.word	0x00000499

000007b4 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     7b4:	1c93      	adds	r3, r2, #2
     7b6:	009b      	lsls	r3, r3, #2
     7b8:	18c3      	adds	r3, r0, r3
     7ba:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     7bc:	7e03      	ldrb	r3, [r0, #24]
     7be:	2101      	movs	r1, #1
     7c0:	4091      	lsls	r1, r2
     7c2:	430b      	orrs	r3, r1
     7c4:	b2db      	uxtb	r3, r3
     7c6:	7603      	strb	r3, [r0, #24]
}
     7c8:	4770      	bx	lr
	...

000007cc <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7cc:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     7ce:	8b83      	ldrh	r3, [r0, #28]
     7d0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     7d2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     7d4:	2b00      	cmp	r3, #0
     7d6:	d001      	beq.n	7dc <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     7d8:	0010      	movs	r0, r2
     7da:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     7dc:	3301      	adds	r3, #1
     7de:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7e0:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     7e2:	4b02      	ldr	r3, [pc, #8]	; (7ec <i2c_master_write_packet_job+0x20>)
     7e4:	4798      	blx	r3
     7e6:	0002      	movs	r2, r0
     7e8:	e7f6      	b.n	7d8 <i2c_master_write_packet_job+0xc>
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	0000074d 	.word	0x0000074d

000007f0 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     7f0:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     7f2:	0080      	lsls	r0, r0, #2
     7f4:	4b75      	ldr	r3, [pc, #468]	; (9cc <_i2c_master_interrupt_handler+0x1dc>)
     7f6:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7f8:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7fa:	682b      	ldr	r3, [r5, #0]
     7fc:	011b      	lsls	r3, r3, #4
     7fe:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     800:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     802:	7e26      	ldrb	r6, [r4, #24]
     804:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     806:	8b63      	ldrh	r3, [r4, #26]
     808:	b29b      	uxth	r3, r3
     80a:	2b00      	cmp	r3, #0
     80c:	d103      	bne.n	816 <_i2c_master_interrupt_handler+0x26>
     80e:	8ba3      	ldrh	r3, [r4, #28]
     810:	b29b      	uxth	r3, r3
     812:	2b00      	cmp	r3, #0
     814:	d123      	bne.n	85e <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0)     && (module->buffer_remaining <= 0) &&
     816:	8b63      	ldrh	r3, [r4, #26]
     818:	b29b      	uxth	r3, r3
     81a:	2b00      	cmp	r3, #0
     81c:	d008      	beq.n	830 <_i2c_master_interrupt_handler+0x40>
     81e:	8ba3      	ldrh	r3, [r4, #28]
     820:	b29b      	uxth	r3, r3
     822:	2b00      	cmp	r3, #0
     824:	d104      	bne.n	830 <_i2c_master_interrupt_handler+0x40>
			   (module->status == STATUS_BUSY) && (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     826:	3325      	adds	r3, #37	; 0x25
     828:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0)     && (module->buffer_remaining <= 0) &&
     82a:	2b05      	cmp	r3, #5
     82c:	d100      	bne.n	830 <_i2c_master_interrupt_handler+0x40>
     82e:	e06d      	b.n	90c <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     830:	8b63      	ldrh	r3, [r4, #26]
     832:	b29b      	uxth	r3, r3
     834:	2b00      	cmp	r3, #0
     836:	d024      	beq.n	882 <_i2c_master_interrupt_handler+0x92>
     838:	8ba3      	ldrh	r3, [r4, #28]
     83a:	b29b      	uxth	r3, r3
     83c:	2b00      	cmp	r3, #0
     83e:	d020      	beq.n	882 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     840:	8b6b      	ldrh	r3, [r5, #26]
     842:	069b      	lsls	r3, r3, #26
     844:	d500      	bpl.n	848 <_i2c_master_interrupt_handler+0x58>
     846:	e081      	b.n	94c <_i2c_master_interrupt_handler+0x15c>
     848:	2a00      	cmp	r2, #0
     84a:	d004      	beq.n	856 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     84c:	8ba3      	ldrh	r3, [r4, #28]
     84e:	b29b      	uxth	r3, r3
     850:	2b01      	cmp	r3, #1
     852:	d100      	bne.n	856 <_i2c_master_interrupt_handler+0x66>
     854:	e07a      	b.n	94c <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     856:	2241      	movs	r2, #65	; 0x41
     858:	2325      	movs	r3, #37	; 0x25
     85a:	54e2      	strb	r2, [r4, r3]
     85c:	e011      	b.n	882 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     85e:	7e2b      	ldrb	r3, [r5, #24]
     860:	07db      	lsls	r3, r3, #31
     862:	d507      	bpl.n	874 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     864:	2301      	movs	r3, #1
     866:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     868:	8b6b      	ldrh	r3, [r5, #26]
     86a:	079b      	lsls	r3, r3, #30
     86c:	d52e      	bpl.n	8cc <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     86e:	2241      	movs	r2, #65	; 0x41
     870:	2325      	movs	r3, #37	; 0x25
     872:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     874:	8ba3      	ldrh	r3, [r4, #28]
     876:	b29b      	uxth	r3, r3
     878:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     87a:	2325      	movs	r3, #37	; 0x25
     87c:	5ce3      	ldrb	r3, [r4, r3]
     87e:	2b05      	cmp	r3, #5
     880:	d038      	beq.n	8f4 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     882:	8b63      	ldrh	r3, [r4, #26]
     884:	b29b      	uxth	r3, r3
     886:	2b00      	cmp	r3, #0
     888:	d007      	beq.n	89a <_i2c_master_interrupt_handler+0xaa>
     88a:	8ba3      	ldrh	r3, [r4, #28]
     88c:	b29b      	uxth	r3, r3
     88e:	2b00      	cmp	r3, #0
     890:	d103      	bne.n	89a <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     892:	3325      	adds	r3, #37	; 0x25
     894:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     896:	2b05      	cmp	r3, #5
     898:	d064      	beq.n	964 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     89a:	2325      	movs	r3, #37	; 0x25
     89c:	5ce3      	ldrb	r3, [r4, r3]
     89e:	2b05      	cmp	r3, #5
     8a0:	d013      	beq.n	8ca <_i2c_master_interrupt_handler+0xda>
     8a2:	2325      	movs	r3, #37	; 0x25
     8a4:	5ce3      	ldrb	r3, [r4, r3]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d00f      	beq.n	8ca <_i2c_master_interrupt_handler+0xda>
		
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
     8aa:	2303      	movs	r3, #3
     8ac:	752b      	strb	r3, [r5, #20]

		module->buffer_length = 0;
     8ae:	2300      	movs	r3, #0
     8b0:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     8b2:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     8b4:	3325      	adds	r3, #37	; 0x25
     8b6:	5ce3      	ldrb	r3, [r4, r3]
     8b8:	2b41      	cmp	r3, #65	; 0x41
     8ba:	d003      	beq.n	8c4 <_i2c_master_interrupt_handler+0xd4>
     8bc:	7aa3      	ldrb	r3, [r4, #10]
     8be:	2b00      	cmp	r3, #0
     8c0:	d000      	beq.n	8c4 <_i2c_master_interrupt_handler+0xd4>
     8c2:	e075      	b.n	9b0 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     8c4:	0773      	lsls	r3, r6, #29
     8c6:	d500      	bpl.n	8ca <_i2c_master_interrupt_handler+0xda>
     8c8:	e07b      	b.n	9c2 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     8ca:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     8cc:	8b6b      	ldrh	r3, [r5, #26]
     8ce:	075b      	lsls	r3, r3, #29
     8d0:	d5d0      	bpl.n	874 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     8d2:	2218      	movs	r2, #24
     8d4:	2325      	movs	r3, #37	; 0x25
     8d6:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     8d8:	2300      	movs	r3, #0
     8da:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     8dc:	7aa3      	ldrb	r3, [r4, #10]
     8de:	2b00      	cmp	r3, #0
     8e0:	d0c8      	beq.n	874 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     8e2:	0020      	movs	r0, r4
     8e4:	4b3a      	ldr	r3, [pc, #232]	; (9d0 <_i2c_master_interrupt_handler+0x1e0>)
     8e6:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8e8:	686a      	ldr	r2, [r5, #4]
     8ea:	23c0      	movs	r3, #192	; 0xc0
     8ec:	029b      	lsls	r3, r3, #10
     8ee:	4313      	orrs	r3, r2
     8f0:	606b      	str	r3, [r5, #4]
     8f2:	e7bf      	b.n	874 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     8f4:	331f      	adds	r3, #31
     8f6:	5ce3      	ldrb	r3, [r4, r3]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d003      	beq.n	904 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     8fc:	0020      	movs	r0, r4
     8fe:	4b35      	ldr	r3, [pc, #212]	; (9d4 <_i2c_master_interrupt_handler+0x1e4>)
     900:	4798      	blx	r3
     902:	e7be      	b.n	882 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     904:	0020      	movs	r0, r4
     906:	4b34      	ldr	r3, [pc, #208]	; (9d8 <_i2c_master_interrupt_handler+0x1e8>)
     908:	4798      	blx	r3
     90a:	e7ba      	b.n	882 <_i2c_master_interrupt_handler+0x92>
			   (module->status == STATUS_BUSY) && (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     90c:	331f      	adds	r3, #31
     90e:	5ce3      	ldrb	r3, [r4, r3]
     910:	2b00      	cmp	r3, #0
     912:	d000      	beq.n	916 <_i2c_master_interrupt_handler+0x126>
     914:	e78c      	b.n	830 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg	=	SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
     916:	3303      	adds	r3, #3
     918:	752b      	strb	r3, [r5, #20]
		module->buffer_length		=	0;
     91a:	2300      	movs	r3, #0
     91c:	8363      	strh	r3, [r4, #26]
		module->status				=	STATUS_OK;
     91e:	3325      	adds	r3, #37	; 0x25
     920:	2200      	movs	r2, #0
     922:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     924:	7aa3      	ldrb	r3, [r4, #10]
     926:	2b00      	cmp	r3, #0
     928:	d107      	bne.n	93a <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     92a:	2301      	movs	r3, #1
     92c:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     92e:	07f3      	lsls	r3, r6, #31
     930:	d5a7      	bpl.n	882 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     932:	68e3      	ldr	r3, [r4, #12]
     934:	0020      	movs	r0, r4
     936:	4798      	blx	r3
     938:	e7a3      	b.n	882 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     93a:	0020      	movs	r0, r4
     93c:	4b24      	ldr	r3, [pc, #144]	; (9d0 <_i2c_master_interrupt_handler+0x1e0>)
     93e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     940:	686a      	ldr	r2, [r5, #4]
     942:	23c0      	movs	r3, #192	; 0xc0
     944:	029b      	lsls	r3, r3, #10
     946:	4313      	orrs	r3, r2
     948:	606b      	str	r3, [r5, #4]
     94a:	e7f0      	b.n	92e <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     94c:	2324      	movs	r3, #36	; 0x24
     94e:	5ce3      	ldrb	r3, [r4, r3]
     950:	2b00      	cmp	r3, #0
     952:	d103      	bne.n	95c <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     954:	0020      	movs	r0, r4
     956:	4b20      	ldr	r3, [pc, #128]	; (9d8 <_i2c_master_interrupt_handler+0x1e8>)
     958:	4798      	blx	r3
     95a:	e792      	b.n	882 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     95c:	0020      	movs	r0, r4
     95e:	4b1d      	ldr	r3, [pc, #116]	; (9d4 <_i2c_master_interrupt_handler+0x1e4>)
     960:	4798      	blx	r3
     962:	e78e      	b.n	882 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     964:	331f      	adds	r3, #31
     966:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     968:	2b01      	cmp	r3, #1
     96a:	d196      	bne.n	89a <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     96c:	7e2b      	ldrb	r3, [r5, #24]
     96e:	079b      	lsls	r3, r3, #30
     970:	d501      	bpl.n	976 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     972:	2302      	movs	r3, #2
     974:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     976:	2303      	movs	r3, #3
     978:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     97a:	2300      	movs	r3, #0
     97c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     97e:	3325      	adds	r3, #37	; 0x25
     980:	2200      	movs	r2, #0
     982:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     984:	07b3      	lsls	r3, r6, #30
     986:	d503      	bpl.n	990 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     988:	2324      	movs	r3, #36	; 0x24
     98a:	5ce3      	ldrb	r3, [r4, r3]
     98c:	2b01      	cmp	r3, #1
     98e:	d00b      	beq.n	9a8 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     990:	07f3      	lsls	r3, r6, #31
     992:	d400      	bmi.n	996 <_i2c_master_interrupt_handler+0x1a6>
     994:	e781      	b.n	89a <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     996:	2324      	movs	r3, #36	; 0x24
     998:	5ce3      	ldrb	r3, [r4, r3]
     99a:	2b00      	cmp	r3, #0
     99c:	d000      	beq.n	9a0 <_i2c_master_interrupt_handler+0x1b0>
     99e:	e77c      	b.n	89a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     9a0:	68e3      	ldr	r3, [r4, #12]
     9a2:	0020      	movs	r0, r4
     9a4:	4798      	blx	r3
     9a6:	e778      	b.n	89a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     9a8:	6923      	ldr	r3, [r4, #16]
     9aa:	0020      	movs	r0, r4
     9ac:	4798      	blx	r3
     9ae:	e774      	b.n	89a <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     9b0:	0020      	movs	r0, r4
     9b2:	4b07      	ldr	r3, [pc, #28]	; (9d0 <_i2c_master_interrupt_handler+0x1e0>)
     9b4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     9b6:	686a      	ldr	r2, [r5, #4]
     9b8:	23e0      	movs	r3, #224	; 0xe0
     9ba:	02db      	lsls	r3, r3, #11
     9bc:	4313      	orrs	r3, r2
     9be:	606b      	str	r3, [r5, #4]
     9c0:	e780      	b.n	8c4 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     9c2:	6963      	ldr	r3, [r4, #20]
     9c4:	0020      	movs	r0, r4
     9c6:	4798      	blx	r3
}
     9c8:	e77f      	b.n	8ca <_i2c_master_interrupt_handler+0xda>
     9ca:	46c0      	nop			; (mov r8, r8)
     9cc:	20000f8c 	.word	0x20000f8c
     9d0:	0000067d 	.word	0x0000067d
     9d4:	00000689 	.word	0x00000689
     9d8:	00000711 	.word	0x00000711

000009dc <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9de:	46c6      	mov	lr, r8
     9e0:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     9e2:	0080      	lsls	r0, r0, #2
     9e4:	4b0e      	ldr	r3, [pc, #56]	; (a20 <_tcc_interrupt_handler+0x44>)
     9e6:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     9e8:	683b      	ldr	r3, [r7, #0]
     9ea:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     9ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     9f0:	4013      	ands	r3, r2
     9f2:	401e      	ands	r6, r3
     9f4:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     9f6:	4b0b      	ldr	r3, [pc, #44]	; (a24 <_tcc_interrupt_handler+0x48>)
     9f8:	4698      	mov	r8, r3
     9fa:	e002      	b.n	a02 <_tcc_interrupt_handler+0x26>
     9fc:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     9fe:	2c30      	cmp	r4, #48	; 0x30
     a00:	d00a      	beq.n	a18 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     a02:	4643      	mov	r3, r8
     a04:	58e5      	ldr	r5, [r4, r3]
     a06:	4235      	tst	r5, r6
     a08:	d0f8      	beq.n	9fc <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     a0a:	193b      	adds	r3, r7, r4
     a0c:	685b      	ldr	r3, [r3, #4]
     a0e:	0038      	movs	r0, r7
     a10:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     a12:	683b      	ldr	r3, [r7, #0]
     a14:	62dd      	str	r5, [r3, #44]	; 0x2c
     a16:	e7f1      	b.n	9fc <_tcc_interrupt_handler+0x20>
		}
	}
}
     a18:	bc04      	pop	{r2}
     a1a:	4690      	mov	r8, r2
     a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	20000e20 	.word	0x20000e20
     a24:	0000584c 	.word	0x0000584c

00000a28 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     a28:	b510      	push	{r4, lr}
     a2a:	2000      	movs	r0, #0
     a2c:	4b01      	ldr	r3, [pc, #4]	; (a34 <TCC0_Handler+0xc>)
     a2e:	4798      	blx	r3
     a30:	bd10      	pop	{r4, pc}
     a32:	46c0      	nop			; (mov r8, r8)
     a34:	000009dd 	.word	0x000009dd

00000a38 <TCC1_Handler>:
     a38:	b510      	push	{r4, lr}
     a3a:	2001      	movs	r0, #1
     a3c:	4b01      	ldr	r3, [pc, #4]	; (a44 <TCC1_Handler+0xc>)
     a3e:	4798      	blx	r3
     a40:	bd10      	pop	{r4, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	000009dd 	.word	0x000009dd

00000a48 <TCC2_Handler>:
     a48:	b510      	push	{r4, lr}
     a4a:	2002      	movs	r0, #2
     a4c:	4b01      	ldr	r3, [pc, #4]	; (a54 <TCC2_Handler+0xc>)
     a4e:	4798      	blx	r3
     a50:	bd10      	pop	{r4, pc}
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	000009dd 	.word	0x000009dd

00000a58 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     a58:	1c93      	adds	r3, r2, #2
     a5a:	009b      	lsls	r3, r3, #2
     a5c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     a5e:	2a02      	cmp	r2, #2
     a60:	d009      	beq.n	a76 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     a62:	2a03      	cmp	r2, #3
     a64:	d00c      	beq.n	a80 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     a66:	2301      	movs	r3, #1
     a68:	4093      	lsls	r3, r2
     a6a:	001a      	movs	r2, r3
     a6c:	7e03      	ldrb	r3, [r0, #24]
     a6e:	4313      	orrs	r3, r2
     a70:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     a72:	2000      	movs	r0, #0
     a74:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     a76:	7e03      	ldrb	r3, [r0, #24]
     a78:	2210      	movs	r2, #16
     a7a:	4313      	orrs	r3, r2
     a7c:	7603      	strb	r3, [r0, #24]
     a7e:	e7f8      	b.n	a72 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     a80:	7e03      	ldrb	r3, [r0, #24]
     a82:	2220      	movs	r2, #32
     a84:	4313      	orrs	r3, r2
     a86:	7603      	strb	r3, [r0, #24]
     a88:	e7f3      	b.n	a72 <tc_register_callback+0x1a>
	...

00000a8c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     a8c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     a8e:	0080      	lsls	r0, r0, #2
     a90:	4b16      	ldr	r3, [pc, #88]	; (aec <_tc_interrupt_handler+0x60>)
     a92:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     a94:	6823      	ldr	r3, [r4, #0]
     a96:	7b9d      	ldrb	r5, [r3, #14]
     a98:	7e22      	ldrb	r2, [r4, #24]
     a9a:	7e63      	ldrb	r3, [r4, #25]
     a9c:	4013      	ands	r3, r2
     a9e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     aa0:	07eb      	lsls	r3, r5, #31
     aa2:	d406      	bmi.n	ab2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     aa4:	07ab      	lsls	r3, r5, #30
     aa6:	d40b      	bmi.n	ac0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     aa8:	06eb      	lsls	r3, r5, #27
     aaa:	d410      	bmi.n	ace <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     aac:	06ab      	lsls	r3, r5, #26
     aae:	d415      	bmi.n	adc <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     ab0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     ab2:	0020      	movs	r0, r4
     ab4:	68a3      	ldr	r3, [r4, #8]
     ab6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     ab8:	2301      	movs	r3, #1
     aba:	6822      	ldr	r2, [r4, #0]
     abc:	7393      	strb	r3, [r2, #14]
     abe:	e7f1      	b.n	aa4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     ac0:	0020      	movs	r0, r4
     ac2:	68e3      	ldr	r3, [r4, #12]
     ac4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     ac6:	2302      	movs	r3, #2
     ac8:	6822      	ldr	r2, [r4, #0]
     aca:	7393      	strb	r3, [r2, #14]
     acc:	e7ec      	b.n	aa8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     ace:	0020      	movs	r0, r4
     ad0:	6923      	ldr	r3, [r4, #16]
     ad2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     ad4:	2310      	movs	r3, #16
     ad6:	6822      	ldr	r2, [r4, #0]
     ad8:	7393      	strb	r3, [r2, #14]
     ada:	e7e7      	b.n	aac <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     adc:	0020      	movs	r0, r4
     ade:	6963      	ldr	r3, [r4, #20]
     ae0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     ae2:	6823      	ldr	r3, [r4, #0]
     ae4:	2220      	movs	r2, #32
     ae6:	739a      	strb	r2, [r3, #14]
}
     ae8:	e7e2      	b.n	ab0 <_tc_interrupt_handler+0x24>
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	20000e2c 	.word	0x20000e2c

00000af0 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     af0:	b510      	push	{r4, lr}
     af2:	2000      	movs	r0, #0
     af4:	4b01      	ldr	r3, [pc, #4]	; (afc <TC3_Handler+0xc>)
     af6:	4798      	blx	r3
     af8:	bd10      	pop	{r4, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	00000a8d 	.word	0x00000a8d

00000b00 <TC4_Handler>:
     b00:	b510      	push	{r4, lr}
     b02:	2001      	movs	r0, #1
     b04:	4b01      	ldr	r3, [pc, #4]	; (b0c <TC4_Handler+0xc>)
     b06:	4798      	blx	r3
     b08:	bd10      	pop	{r4, pc}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	00000a8d 	.word	0x00000a8d

00000b10 <TC5_Handler>:
     b10:	b510      	push	{r4, lr}
     b12:	2002      	movs	r0, #2
     b14:	4b01      	ldr	r3, [pc, #4]	; (b1c <TC5_Handler+0xc>)
     b16:	4798      	blx	r3
     b18:	bd10      	pop	{r4, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	00000a8d 	.word	0x00000a8d

00000b20 <TC6_Handler>:
     b20:	b510      	push	{r4, lr}
     b22:	2003      	movs	r0, #3
     b24:	4b01      	ldr	r3, [pc, #4]	; (b2c <TC6_Handler+0xc>)
     b26:	4798      	blx	r3
     b28:	bd10      	pop	{r4, pc}
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	00000a8d 	.word	0x00000a8d

00000b30 <TC7_Handler>:
     b30:	b510      	push	{r4, lr}
     b32:	2004      	movs	r0, #4
     b34:	4b01      	ldr	r3, [pc, #4]	; (b3c <TC7_Handler+0xc>)
     b36:	4798      	blx	r3
     b38:	bd10      	pop	{r4, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	00000a8d 	.word	0x00000a8d

00000b40 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     b40:	b530      	push	{r4, r5, lr}
     b42:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     b44:	a901      	add	r1, sp, #4
     b46:	4b0c      	ldr	r3, [pc, #48]	; (b78 <_tc_get_inst_index+0x38>)
     b48:	000a      	movs	r2, r1
     b4a:	cb32      	ldmia	r3!, {r1, r4, r5}
     b4c:	c232      	stmia	r2!, {r1, r4, r5}
     b4e:	cb12      	ldmia	r3!, {r1, r4}
     b50:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     b52:	9b01      	ldr	r3, [sp, #4]
     b54:	4298      	cmp	r0, r3
     b56:	d00b      	beq.n	b70 <_tc_get_inst_index+0x30>
     b58:	2301      	movs	r3, #1
     b5a:	a901      	add	r1, sp, #4
     b5c:	009a      	lsls	r2, r3, #2
     b5e:	5852      	ldr	r2, [r2, r1]
     b60:	4282      	cmp	r2, r0
     b62:	d006      	beq.n	b72 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     b64:	3301      	adds	r3, #1
     b66:	2b05      	cmp	r3, #5
     b68:	d1f8      	bne.n	b5c <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     b6a:	2000      	movs	r0, #0
}
     b6c:	b007      	add	sp, #28
     b6e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     b70:	2300      	movs	r3, #0
			return i;
     b72:	b2d8      	uxtb	r0, r3
     b74:	e7fa      	b.n	b6c <_tc_get_inst_index+0x2c>
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	0000587c 	.word	0x0000587c

00000b7c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b7e:	b089      	sub	sp, #36	; 0x24
     b80:	0004      	movs	r4, r0
     b82:	000d      	movs	r5, r1
     b84:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     b86:	0008      	movs	r0, r1
     b88:	4b84      	ldr	r3, [pc, #528]	; (d9c <tc_init+0x220>)
     b8a:	4798      	blx	r3
     b8c:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     b8e:	ab06      	add	r3, sp, #24
     b90:	221b      	movs	r2, #27
     b92:	701a      	strb	r2, [r3, #0]
     b94:	3201      	adds	r2, #1
     b96:	705a      	strb	r2, [r3, #1]
     b98:	709a      	strb	r2, [r3, #2]
     b9a:	3201      	adds	r2, #1
     b9c:	70da      	strb	r2, [r3, #3]
     b9e:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     ba0:	3a13      	subs	r2, #19
     ba2:	497f      	ldr	r1, [pc, #508]	; (da0 <tc_init+0x224>)
     ba4:	3114      	adds	r1, #20
     ba6:	a803      	add	r0, sp, #12
     ba8:	4b7e      	ldr	r3, [pc, #504]	; (da4 <tc_init+0x228>)
     baa:	4798      	blx	r3
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     bac:	2300      	movs	r3, #0
     bae:	60a3      	str	r3, [r4, #8]
     bb0:	60e3      	str	r3, [r4, #12]
     bb2:	6123      	str	r3, [r4, #16]
     bb4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     bb6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     bb8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     bba:	00ba      	lsls	r2, r7, #2
     bbc:	4b7a      	ldr	r3, [pc, #488]	; (da8 <tc_init+0x22c>)
     bbe:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     bc0:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     bc2:	78b3      	ldrb	r3, [r6, #2]
     bc4:	2b08      	cmp	r3, #8
     bc6:	d006      	beq.n	bd6 <tc_init+0x5a>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     bc8:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     bca:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     bcc:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     bce:	07db      	lsls	r3, r3, #31
     bd0:	d505      	bpl.n	bde <tc_init+0x62>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     bd2:	b009      	add	sp, #36	; 0x24
     bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     bd6:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     bd8:	07fa      	lsls	r2, r7, #31
     bda:	d5fa      	bpl.n	bd2 <tc_init+0x56>
     bdc:	e7f4      	b.n	bc8 <tc_init+0x4c>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     bde:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     be0:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     be2:	06db      	lsls	r3, r3, #27
     be4:	d4f5      	bmi.n	bd2 <tc_init+0x56>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     be6:	882b      	ldrh	r3, [r5, #0]
     be8:	079b      	lsls	r3, r3, #30
     bea:	d4f2      	bmi.n	bd2 <tc_init+0x56>
	if (config->pwm_channel[0].enabled) {
     bec:	7c33      	ldrb	r3, [r6, #16]
     bee:	2b00      	cmp	r3, #0
     bf0:	d179      	bne.n	ce6 <tc_init+0x16a>
	if (config->pwm_channel[1].enabled) {
     bf2:	7f33      	ldrb	r3, [r6, #28]
     bf4:	2b00      	cmp	r3, #0
     bf6:	d000      	beq.n	bfa <tc_init+0x7e>
     bf8:	e081      	b.n	cfe <tc_init+0x182>
     bfa:	496c      	ldr	r1, [pc, #432]	; (dac <tc_init+0x230>)
     bfc:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     bfe:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     c00:	ab03      	add	r3, sp, #12
     c02:	5ad3      	ldrh	r3, [r2, r3]
     c04:	4303      	orrs	r3, r0
     c06:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     c08:	78b3      	ldrb	r3, [r6, #2]
     c0a:	2b08      	cmp	r3, #8
     c0c:	d100      	bne.n	c10 <tc_init+0x94>
     c0e:	e086      	b.n	d1e <tc_init+0x1a2>
	gclk_chan_config.source_generator = config->clock_source;
     c10:	a901      	add	r1, sp, #4
     c12:	7833      	ldrb	r3, [r6, #0]
     c14:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     c16:	ab06      	add	r3, sp, #24
     c18:	5ddf      	ldrb	r7, [r3, r7]
     c1a:	0038      	movs	r0, r7
     c1c:	4b64      	ldr	r3, [pc, #400]	; (db0 <tc_init+0x234>)
     c1e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     c20:	0038      	movs	r0, r7
     c22:	4b64      	ldr	r3, [pc, #400]	; (db4 <tc_init+0x238>)
     c24:	4798      	blx	r3
	ctrla_tmp =
     c26:	8931      	ldrh	r1, [r6, #8]
     c28:	88b3      	ldrh	r3, [r6, #4]
     c2a:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     c2c:	78b1      	ldrb	r1, [r6, #2]
     c2e:	79b2      	ldrb	r2, [r6, #6]
     c30:	4311      	orrs	r1, r2
	ctrla_tmp =
     c32:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     c34:	7873      	ldrb	r3, [r6, #1]
     c36:	2b00      	cmp	r3, #0
     c38:	d002      	beq.n	c40 <tc_init+0xc4>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     c3a:	2380      	movs	r3, #128	; 0x80
     c3c:	011b      	lsls	r3, r3, #4
     c3e:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c40:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c42:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     c44:	b25b      	sxtb	r3, r3
     c46:	2b00      	cmp	r3, #0
     c48:	dbfb      	blt.n	c42 <tc_init+0xc6>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     c4a:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     c4c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     c4e:	1e4b      	subs	r3, r1, #1
     c50:	4199      	sbcs	r1, r3
     c52:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     c54:	7bb3      	ldrb	r3, [r6, #14]
     c56:	2b00      	cmp	r3, #0
     c58:	d001      	beq.n	c5e <tc_init+0xe2>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     c5a:	2301      	movs	r3, #1
     c5c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c5e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c60:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     c62:	b25b      	sxtb	r3, r3
     c64:	2b00      	cmp	r3, #0
     c66:	dbfb      	blt.n	c60 <tc_init+0xe4>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     c68:	23ff      	movs	r3, #255	; 0xff
     c6a:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     c6c:	2900      	cmp	r1, #0
     c6e:	d005      	beq.n	c7c <tc_init+0x100>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c70:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c72:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     c74:	b25b      	sxtb	r3, r3
     c76:	2b00      	cmp	r3, #0
     c78:	dbfb      	blt.n	c72 <tc_init+0xf6>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     c7a:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     c7c:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     c7e:	7af3      	ldrb	r3, [r6, #11]
     c80:	2b00      	cmp	r3, #0
     c82:	d001      	beq.n	c88 <tc_init+0x10c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     c84:	2310      	movs	r3, #16
     c86:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     c88:	7b33      	ldrb	r3, [r6, #12]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d001      	beq.n	c92 <tc_init+0x116>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     c8e:	2320      	movs	r3, #32
     c90:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c92:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c94:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     c96:	b25b      	sxtb	r3, r3
     c98:	2b00      	cmp	r3, #0
     c9a:	dbfb      	blt.n	c94 <tc_init+0x118>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     c9c:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c9e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     ca0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     ca2:	b25b      	sxtb	r3, r3
     ca4:	2b00      	cmp	r3, #0
     ca6:	dbfb      	blt.n	ca0 <tc_init+0x124>
	switch (module_inst->counter_size) {
     ca8:	7923      	ldrb	r3, [r4, #4]
     caa:	2b04      	cmp	r3, #4
     cac:	d03f      	beq.n	d2e <tc_init+0x1b2>
     cae:	2b08      	cmp	r3, #8
     cb0:	d05e      	beq.n	d70 <tc_init+0x1f4>
	return STATUS_ERR_INVALID_ARG;
     cb2:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     cb4:	2b00      	cmp	r3, #0
     cb6:	d000      	beq.n	cba <tc_init+0x13e>
     cb8:	e78b      	b.n	bd2 <tc_init+0x56>
     cba:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     cbc:	b25b      	sxtb	r3, r3
     cbe:	2b00      	cmp	r3, #0
     cc0:	dbfb      	blt.n	cba <tc_init+0x13e>
				= config->counter_16_bit.value;
     cc2:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     cc4:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     cc6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     cc8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     cca:	b25b      	sxtb	r3, r3
     ccc:	2b00      	cmp	r3, #0
     cce:	dbfb      	blt.n	cc8 <tc_init+0x14c>
					config->counter_16_bit.compare_capture_channel[0];
     cd0:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     cd2:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     cd4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     cd6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     cd8:	b25b      	sxtb	r3, r3
     cda:	2b00      	cmp	r3, #0
     cdc:	dbfb      	blt.n	cd6 <tc_init+0x15a>
					config->counter_16_bit.compare_capture_channel[1];
     cde:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     ce0:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     ce2:	2000      	movs	r0, #0
     ce4:	e775      	b.n	bd2 <tc_init+0x56>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ce6:	a902      	add	r1, sp, #8
     ce8:	2301      	movs	r3, #1
     cea:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     cec:	2200      	movs	r2, #0
     cee:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     cf0:	7e32      	ldrb	r2, [r6, #24]
     cf2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     cf4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     cf6:	7d30      	ldrb	r0, [r6, #20]
     cf8:	4b2f      	ldr	r3, [pc, #188]	; (db8 <tc_init+0x23c>)
     cfa:	4798      	blx	r3
     cfc:	e779      	b.n	bf2 <tc_init+0x76>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     cfe:	a902      	add	r1, sp, #8
     d00:	2301      	movs	r3, #1
     d02:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     d04:	2200      	movs	r2, #0
     d06:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     d08:	3224      	adds	r2, #36	; 0x24
     d0a:	18b2      	adds	r2, r6, r2
     d0c:	7812      	ldrb	r2, [r2, #0]
     d0e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     d10:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     d12:	331f      	adds	r3, #31
     d14:	18f3      	adds	r3, r6, r3
     d16:	7818      	ldrb	r0, [r3, #0]
     d18:	4b27      	ldr	r3, [pc, #156]	; (db8 <tc_init+0x23c>)
     d1a:	4798      	blx	r3
     d1c:	e76d      	b.n	bfa <tc_init+0x7e>
     d1e:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     d20:	1c7a      	adds	r2, r7, #1
     d22:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     d24:	ab03      	add	r3, sp, #12
     d26:	5ad3      	ldrh	r3, [r2, r3]
     d28:	4303      	orrs	r3, r0
     d2a:	620b      	str	r3, [r1, #32]
     d2c:	e770      	b.n	c10 <tc_init+0x94>
     d2e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d30:	b25b      	sxtb	r3, r3
     d32:	2b00      	cmp	r3, #0
     d34:	dbfb      	blt.n	d2e <tc_init+0x1b2>
					config->counter_8_bit.value;
     d36:	2328      	movs	r3, #40	; 0x28
     d38:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     d3a:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d3c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d3e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d40:	b25b      	sxtb	r3, r3
     d42:	2b00      	cmp	r3, #0
     d44:	dbfb      	blt.n	d3e <tc_init+0x1c2>
					config->counter_8_bit.period;
     d46:	2329      	movs	r3, #41	; 0x29
     d48:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     d4a:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d4c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d4e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d50:	b25b      	sxtb	r3, r3
     d52:	2b00      	cmp	r3, #0
     d54:	dbfb      	blt.n	d4e <tc_init+0x1d2>
					config->counter_8_bit.compare_capture_channel[0];
     d56:	232a      	movs	r3, #42	; 0x2a
     d58:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     d5a:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d5c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d5e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d60:	b25b      	sxtb	r3, r3
     d62:	2b00      	cmp	r3, #0
     d64:	dbfb      	blt.n	d5e <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
     d66:	232b      	movs	r3, #43	; 0x2b
     d68:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     d6a:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     d6c:	2000      	movs	r0, #0
     d6e:	e730      	b.n	bd2 <tc_init+0x56>
     d70:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d72:	b25b      	sxtb	r3, r3
     d74:	2b00      	cmp	r3, #0
     d76:	dbfb      	blt.n	d70 <tc_init+0x1f4>
				= config->counter_32_bit.value;
     d78:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     d7a:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d7c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d7e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d80:	b25b      	sxtb	r3, r3
     d82:	2b00      	cmp	r3, #0
     d84:	dbfb      	blt.n	d7e <tc_init+0x202>
			hw->COUNT32.CC[0].reg =
     d86:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     d88:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d8a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d8c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d8e:	b25b      	sxtb	r3, r3
     d90:	2b00      	cmp	r3, #0
     d92:	dbfb      	blt.n	d8c <tc_init+0x210>
					config->counter_32_bit.compare_capture_channel[1];
     d94:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     d96:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     d98:	2000      	movs	r0, #0
     d9a:	e71a      	b.n	bd2 <tc_init+0x56>
     d9c:	00000b41 	.word	0x00000b41
     da0:	0000587c 	.word	0x0000587c
     da4:	00005755 	.word	0x00005755
     da8:	20000e2c 	.word	0x20000e2c
     dac:	40000400 	.word	0x40000400
     db0:	000039e1 	.word	0x000039e1
     db4:	00003955 	.word	0x00003955
     db8:	00003ad9 	.word	0x00003ad9

00000dbc <resetInput>:

#define SENSORS_I2C                                  5

void resetInput(uint8_t port)
{
	inputPort[port].address				=		0x00;
     dbc:	4b05      	ldr	r3, [pc, #20]	; (dd4 <resetInput+0x18>)
     dbe:	00c0      	lsls	r0, r0, #3
     dc0:	2200      	movs	r2, #0
     dc2:	54c2      	strb	r2, [r0, r3]
	inputPort[port].readDataLength     =		0x00;
     dc4:	1818      	adds	r0, r3, r0
     dc6:	70c2      	strb	r2, [r0, #3]
    inputPort[port].writeDataLength1   =		0x00;
     dc8:	7102      	strb	r2, [r0, #4]
	inputPort[port].writeDataLength2   =		0x00;
     dca:	7142      	strb	r2, [r0, #5]
	inputPort[port].initialization     =       false;
     dcc:	7182      	strb	r2, [r0, #6]
	inputPort[port].currentState		=		NOTHINGCONNECTED;
     dce:	7042      	strb	r2, [r0, #1]
}
     dd0:	4770      	bx	lr
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	20001144 	.word	0x20001144

00000dd8 <selectLineLow>:


void selectLineLow(uint8_t port)
{
     dd8:	b500      	push	{lr}
     dda:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     ddc:	ab01      	add	r3, sp, #4
     dde:	2201      	movs	r2, #1
     de0:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     de2:	2100      	movs	r1, #0
     de4:	7099      	strb	r1, [r3, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     de6:	701a      	strb	r2, [r3, #0]
	
	switch(port)
     de8:	2802      	cmp	r0, #2
     dea:	d00d      	beq.n	e08 <selectLineLow+0x30>
     dec:	2803      	cmp	r0, #3
     dee:	d013      	beq.n	e18 <selectLineLow+0x40>
     df0:	2801      	cmp	r0, #1
     df2:	d001      	beq.n	df8 <selectLineLow+0x20>
			break;
		default:
			break;
	}	
	
}
     df4:	b003      	add	sp, #12
     df6:	bd00      	pop	{pc}
			port_pin_set_config(SEN1_DET_PIN, &config_port_pin);
     df8:	0019      	movs	r1, r3
     dfa:	3025      	adds	r0, #37	; 0x25
     dfc:	4b0b      	ldr	r3, [pc, #44]	; (e2c <selectLineLow+0x54>)
     dfe:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     e00:	2240      	movs	r2, #64	; 0x40
     e02:	4b0b      	ldr	r3, [pc, #44]	; (e30 <selectLineLow+0x58>)
     e04:	615a      	str	r2, [r3, #20]
     e06:	e7f5      	b.n	df4 <selectLineLow+0x1c>
			port_pin_set_config(SEN2_DET_PIN, &config_port_pin);
     e08:	a901      	add	r1, sp, #4
     e0a:	2025      	movs	r0, #37	; 0x25
     e0c:	4b07      	ldr	r3, [pc, #28]	; (e2c <selectLineLow+0x54>)
     e0e:	4798      	blx	r3
     e10:	2220      	movs	r2, #32
     e12:	4b07      	ldr	r3, [pc, #28]	; (e30 <selectLineLow+0x58>)
     e14:	615a      	str	r2, [r3, #20]
     e16:	e7ed      	b.n	df4 <selectLineLow+0x1c>
			port_pin_set_config(SEN3_DET_PIN, &config_port_pin);
     e18:	a901      	add	r1, sp, #4
     e1a:	200a      	movs	r0, #10
     e1c:	4b03      	ldr	r3, [pc, #12]	; (e2c <selectLineLow+0x54>)
     e1e:	4798      	blx	r3
     e20:	2280      	movs	r2, #128	; 0x80
     e22:	00d2      	lsls	r2, r2, #3
     e24:	4b03      	ldr	r3, [pc, #12]	; (e34 <selectLineLow+0x5c>)
     e26:	615a      	str	r2, [r3, #20]
}
     e28:	e7e4      	b.n	df4 <selectLineLow+0x1c>
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	00000115 	.word	0x00000115
     e30:	41004480 	.word	0x41004480
     e34:	41004400 	.word	0x41004400

00000e38 <selectLineDisable>:

void selectLineDisable(uint8_t port)
{
     e38:	b500      	push	{lr}
     e3a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     e3c:	ab01      	add	r3, sp, #4
     e3e:	2200      	movs	r2, #0
     e40:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
     e42:	709a      	strb	r2, [r3, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull  = PORT_PIN_PULL_NONE;
     e44:	705a      	strb	r2, [r3, #1]
	
	switch(port)
     e46:	2802      	cmp	r0, #2
     e48:	d00a      	beq.n	e60 <selectLineDisable+0x28>
     e4a:	2803      	cmp	r0, #3
     e4c:	d00d      	beq.n	e6a <selectLineDisable+0x32>
     e4e:	2801      	cmp	r0, #1
     e50:	d001      	beq.n	e56 <selectLineDisable+0x1e>
		break;
		default:
		break;
	}
	
}
     e52:	b003      	add	sp, #12
     e54:	bd00      	pop	{pc}
		port_pin_set_config(SEN1_DET_PIN, &config_port_pin);
     e56:	0019      	movs	r1, r3
     e58:	3025      	adds	r0, #37	; 0x25
     e5a:	4b06      	ldr	r3, [pc, #24]	; (e74 <selectLineDisable+0x3c>)
     e5c:	4798      	blx	r3
		break;
     e5e:	e7f8      	b.n	e52 <selectLineDisable+0x1a>
		port_pin_set_config(SEN2_DET_PIN, &config_port_pin);
     e60:	a901      	add	r1, sp, #4
     e62:	2025      	movs	r0, #37	; 0x25
     e64:	4b03      	ldr	r3, [pc, #12]	; (e74 <selectLineDisable+0x3c>)
     e66:	4798      	blx	r3
		break;
     e68:	e7f3      	b.n	e52 <selectLineDisable+0x1a>
		port_pin_set_config(SEN3_DET_PIN, &config_port_pin);
     e6a:	a901      	add	r1, sp, #4
     e6c:	200a      	movs	r0, #10
     e6e:	4b01      	ldr	r3, [pc, #4]	; (e74 <selectLineDisable+0x3c>)
     e70:	4798      	blx	r3
}
     e72:	e7ee      	b.n	e52 <selectLineDisable+0x1a>
     e74:	00000115 	.word	0x00000115

00000e78 <checkSetInputs>:

void  checkSetInputs()
{
     e78:	b5f0      	push	{r4, r5, r6, r7, lr}
     e7a:	46d6      	mov	lr, sl
     e7c:	464f      	mov	r7, r9
     e7e:	4646      	mov	r6, r8
     e80:	b5c0      	push	{r6, r7, lr}
     e82:	b084      	sub	sp, #16
     e84:	2501      	movs	r5, #1
     e86:	2400      	movs	r4, #0
	uint8_t inputConnected		= 0;
	static uint8_t readBufferSensors[20] ;
	
	for(i=0; i<NO_SENSORS;i++)
	{
		inputConnected	= inputsConnected[i];
     e88:	4b2d      	ldr	r3, [pc, #180]	; (f40 <checkSetInputs+0xc8>)
     e8a:	4698      	mov	r8, r3
		if(inputConnected != inputPort[i].currentState)
     e8c:	4e2d      	ldr	r6, [pc, #180]	; (f44 <checkSetInputs+0xcc>)
     e8e:	e00b      	b.n	ea8 <checkSetInputs+0x30>
					}
				//}
					break;
					
				case NOTHINGCONNECTED:
					switch(inputPort[i].currentState)
     e90:	00e2      	lsls	r2, r4, #3
     e92:	4b2c      	ldr	r3, [pc, #176]	; (f44 <checkSetInputs+0xcc>)
     e94:	469c      	mov	ip, r3
     e96:	4462      	add	r2, ip
     e98:	7853      	ldrb	r3, [r2, #1]
     e9a:	2b1b      	cmp	r3, #27
     e9c:	d044      	beq.n	f28 <checkSetInputs+0xb0>
     e9e:	3401      	adds	r4, #1
     ea0:	3501      	adds	r5, #1
     ea2:	b2ed      	uxtb	r5, r5
	for(i=0; i<NO_SENSORS;i++)
     ea4:	2c03      	cmp	r4, #3
     ea6:	d045      	beq.n	f34 <checkSetInputs+0xbc>
     ea8:	b2e0      	uxtb	r0, r4
		inputConnected	= inputsConnected[i];
     eaa:	4643      	mov	r3, r8
     eac:	5d19      	ldrb	r1, [r3, r4]
		if(inputConnected != inputPort[i].currentState)
     eae:	00e3      	lsls	r3, r4, #3
     eb0:	18f3      	adds	r3, r6, r3
     eb2:	785b      	ldrb	r3, [r3, #1]
     eb4:	b2db      	uxtb	r3, r3
     eb6:	4299      	cmp	r1, r3
     eb8:	d0f1      	beq.n	e9e <checkSetInputs+0x26>
			switch(inputConnected)
     eba:	2900      	cmp	r1, #0
     ebc:	d0e8      	beq.n	e90 <checkSetInputs+0x18>
     ebe:	291b      	cmp	r1, #27
     ec0:	d1ed      	bne.n	e9e <checkSetInputs+0x26>
					if(inputPort[i].initialization	  == 		false)
     ec2:	00e1      	lsls	r1, r4, #3
     ec4:	4b1f      	ldr	r3, [pc, #124]	; (f44 <checkSetInputs+0xcc>)
     ec6:	185b      	adds	r3, r3, r1
     ec8:	799b      	ldrb	r3, [r3, #6]
     eca:	2b00      	cmp	r3, #0
     ecc:	d1e7      	bne.n	e9e <checkSetInputs+0x26>
						inputPort[i].address 			  =		PLACEVALUE_I2C_SLAVE_ADDRESS;
     ece:	4f1d      	ldr	r7, [pc, #116]	; (f44 <checkSetInputs+0xcc>)
     ed0:	468a      	mov	sl, r1
     ed2:	2312      	movs	r3, #18
     ed4:	55cb      	strb	r3, [r1, r7]
						inputPort[i].readDataLength      =		PLACEVALUE_READ_DATA_LENGTH;
     ed6:	46b9      	mov	r9, r7
     ed8:	44d1      	add	r9, sl
     eda:	3b0e      	subs	r3, #14
     edc:	464a      	mov	r2, r9
     ede:	70d3      	strb	r3, [r2, #3]
						inputPort[i].writeDataLength1    =		PLACEVALUE_WRITE_DATA_LENGTH_1;
     ee0:	3345      	adds	r3, #69	; 0x45
     ee2:	7113      	strb	r3, [r2, #4]
						inputPort[i].writeDataLength2    =		PLACEVALUE_WRITE_DATA_LENGTH_2;
     ee4:	3b44      	subs	r3, #68	; 0x44
     ee6:	7153      	strb	r3, [r2, #5]
						enableI2CModule(SENSORS_I2C);
     ee8:	2005      	movs	r0, #5
     eea:	4b17      	ldr	r3, [pc, #92]	; (f48 <checkSetInputs+0xd0>)
     eec:	4798      	blx	r3
							.address		 = inputPort[i].address,
     eee:	4653      	mov	r3, sl
     ef0:	5ddb      	ldrb	r3, [r3, r7]
						struct i2c_master_packet rd_packet = {
     ef2:	af01      	add	r7, sp, #4
     ef4:	803b      	strh	r3, [r7, #0]
							.data_length	 = inputPort[i].readDataLength,
     ef6:	464b      	mov	r3, r9
     ef8:	78db      	ldrb	r3, [r3, #3]
						struct i2c_master_packet rd_packet = {
     efa:	807b      	strh	r3, [r7, #2]
     efc:	4b13      	ldr	r3, [pc, #76]	; (f4c <checkSetInputs+0xd4>)
     efe:	9302      	str	r3, [sp, #8]
     f00:	2300      	movs	r3, #0
     f02:	723b      	strb	r3, [r7, #8]
     f04:	727b      	strb	r3, [r7, #9]
     f06:	72bb      	strb	r3, [r7, #10]
						selectLineLow(i+1);
     f08:	0028      	movs	r0, r5
     f0a:	4b11      	ldr	r3, [pc, #68]	; (f50 <checkSetInputs+0xd8>)
     f0c:	4798      	blx	r3
						I2CRead(SENSORS_I2C , &rd_packet);
     f0e:	0039      	movs	r1, r7
     f10:	2005      	movs	r0, #5
     f12:	4b10      	ldr	r3, [pc, #64]	; (f54 <checkSetInputs+0xdc>)
     f14:	4798      	blx	r3
						selectLineDisable(i+1);
     f16:	0028      	movs	r0, r5
     f18:	4b0f      	ldr	r3, [pc, #60]	; (f58 <checkSetInputs+0xe0>)
     f1a:	4798      	blx	r3
						inputPort[i].initialization	      =		true;
     f1c:	2301      	movs	r3, #1
     f1e:	464a      	mov	r2, r9
     f20:	7193      	strb	r3, [r2, #6]
						inputPort[i].currentState		  =		INPUT_PLACEVALUE;
     f22:	331a      	adds	r3, #26
     f24:	7053      	strb	r3, [r2, #1]
     f26:	e7ba      	b.n	e9e <checkSetInputs+0x26>
					{
						case INPUT_PLACEVALUE:
							resetInput(i);
     f28:	4b0c      	ldr	r3, [pc, #48]	; (f5c <checkSetInputs+0xe4>)
     f2a:	4798      	blx	r3
							disableI2CModule(i+1);
     f2c:	0028      	movs	r0, r5
     f2e:	4b0c      	ldr	r3, [pc, #48]	; (f60 <checkSetInputs+0xe8>)
     f30:	4798      	blx	r3
							break;
     f32:	e7b4      	b.n	e9e <checkSetInputs+0x26>
			}
		}
		
	}
	
}
     f34:	b004      	add	sp, #16
     f36:	bc1c      	pop	{r2, r3, r4}
     f38:	4690      	mov	r8, r2
     f3a:	4699      	mov	r9, r3
     f3c:	46a2      	mov	sl, r4
     f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f40:	20000e10 	.word	0x20000e10
     f44:	20001144 	.word	0x20001144
     f48:	000015a9 	.word	0x000015a9
     f4c:	200000d8 	.word	0x200000d8
     f50:	00000dd9 	.word	0x00000dd9
     f54:	000010cd 	.word	0x000010cd
     f58:	00000e39 	.word	0x00000e39
     f5c:	00000dbd 	.word	0x00000dbd
     f60:	00001751 	.word	0x00001751

00000f64 <resetOutput>:
void  checkSetOutputs();


void resetOutput(uint8_t port)
{
	outputPort[port].address			=		0x00;
     f64:	4b05      	ldr	r3, [pc, #20]	; (f7c <resetOutput+0x18>)
     f66:	00c0      	lsls	r0, r0, #3
     f68:	2200      	movs	r2, #0
     f6a:	54c2      	strb	r2, [r0, r3]
	outputPort[port].readDataLength     =		0x00;
     f6c:	1818      	adds	r0, r3, r0
     f6e:	70c2      	strb	r2, [r0, #3]
	outputPort[port].writeDataLength1   =		0x00;
     f70:	7102      	strb	r2, [r0, #4]
	outputPort[port].writeDataLength2   =		0x00;
     f72:	7142      	strb	r2, [r0, #5]
	outputPort[port].initialization     =       false;
     f74:	7182      	strb	r2, [r0, #6]
	outputPort[port].currentState		=		NOTHINGCONNECTED;
     f76:	7042      	strb	r2, [r0, #1]
};
     f78:	4770      	bx	lr
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	20001124 	.word	0x20001124

00000f80 <checkSetOutputs>:



void  checkSetOutputs()
{
     f80:	b5f0      	push	{r4, r5, r6, r7, lr}
     f82:	46d6      	mov	lr, sl
     f84:	464f      	mov	r7, r9
     f86:	4646      	mov	r6, r8
     f88:	b5c0      	push	{r6, r7, lr}
     f8a:	b084      	sub	sp, #16
     f8c:	2501      	movs	r5, #1
     f8e:	2400      	movs	r4, #0
	//delay_cycles_ms(5);
	//outputPort[3].currentState		  =		OUTPUT_LEDMATRIX;
	
	for(i=0; i<NO_OUTPUTS;i++)
	{
		outputConnected	= outputsConnected[i];
     f90:	4f2c      	ldr	r7, [pc, #176]	; (1044 <checkSetOutputs+0xc4>)
		if(outputConnected != outputPort[i].currentState)
     f92:	4e2d      	ldr	r6, [pc, #180]	; (1048 <checkSetOutputs+0xc8>)
     f94:	e00b      	b.n	fae <checkSetOutputs+0x2e>
						}
					//}
					break;
					
				case NOTHINGCONNECTED:
					switch(outputPort[i].currentState)
     f96:	00e2      	lsls	r2, r4, #3
     f98:	4b2b      	ldr	r3, [pc, #172]	; (1048 <checkSetOutputs+0xc8>)
     f9a:	469c      	mov	ip, r3
     f9c:	4462      	add	r2, ip
     f9e:	7853      	ldrb	r3, [r2, #1]
     fa0:	2b03      	cmp	r3, #3
     fa2:	d042      	beq.n	102a <checkSetOutputs+0xaa>
     fa4:	3401      	adds	r4, #1
     fa6:	3501      	adds	r5, #1
     fa8:	b2ed      	uxtb	r5, r5
	for(i=0; i<NO_OUTPUTS;i++)
     faa:	2c04      	cmp	r4, #4
     fac:	d043      	beq.n	1036 <checkSetOutputs+0xb6>
     fae:	b2e0      	uxtb	r0, r4
		outputConnected	= outputsConnected[i];
     fb0:	5d39      	ldrb	r1, [r7, r4]
		if(outputConnected != outputPort[i].currentState)
     fb2:	00e3      	lsls	r3, r4, #3
     fb4:	18f3      	adds	r3, r6, r3
     fb6:	785b      	ldrb	r3, [r3, #1]
     fb8:	b2db      	uxtb	r3, r3
     fba:	4299      	cmp	r1, r3
     fbc:	d0f2      	beq.n	fa4 <checkSetOutputs+0x24>
			switch(outputConnected)
     fbe:	2900      	cmp	r1, #0
     fc0:	d0e9      	beq.n	f96 <checkSetOutputs+0x16>
     fc2:	2903      	cmp	r1, #3
     fc4:	d1ee      	bne.n	fa4 <checkSetOutputs+0x24>
						if(outputPort[i].initialization	  == 		false)
     fc6:	00e1      	lsls	r1, r4, #3
     fc8:	4b1f      	ldr	r3, [pc, #124]	; (1048 <checkSetOutputs+0xc8>)
     fca:	185b      	adds	r3, r3, r1
     fcc:	799b      	ldrb	r3, [r3, #6]
     fce:	2b00      	cmp	r3, #0
     fd0:	d1e8      	bne.n	fa4 <checkSetOutputs+0x24>
							outputPort[i].address 			  =		LEDMATRIX_I2C_SLAVE_ADDRESS;
     fd2:	4b1d      	ldr	r3, [pc, #116]	; (1048 <checkSetOutputs+0xc8>)
     fd4:	4699      	mov	r9, r3
     fd6:	468a      	mov	sl, r1
     fd8:	2311      	movs	r3, #17
     fda:	464a      	mov	r2, r9
     fdc:	548b      	strb	r3, [r1, r2]
							outputPort[i].readDataLength     =		LEDMATRIX_READ_DATA_LENGTH;
     fde:	46c8      	mov	r8, r9
     fe0:	44d0      	add	r8, sl
     fe2:	3b0f      	subs	r3, #15
     fe4:	4642      	mov	r2, r8
     fe6:	70d3      	strb	r3, [r2, #3]
							outputPort[i].writeDataLength1   =		LEDMATRIX_WRITE_DATA_LENGTH_1;
     fe8:	3347      	adds	r3, #71	; 0x47
     fea:	7113      	strb	r3, [r2, #4]
							outputPort[i].writeDataLength2   =		LEDMATRIX_WRITE_DATA_LENGTH_2;
     fec:	3b44      	subs	r3, #68	; 0x44
     fee:	7153      	strb	r3, [r2, #5]
							enableI2CModule(i+1);
     ff0:	0028      	movs	r0, r5
     ff2:	4b16      	ldr	r3, [pc, #88]	; (104c <checkSetOutputs+0xcc>)
     ff4:	4798      	blx	r3
								.address     = outputPort[i].address ,
     ff6:	464b      	mov	r3, r9
     ff8:	4652      	mov	r2, sl
     ffa:	5cd3      	ldrb	r3, [r2, r3]
							struct i2c_master_packet wr_packet = {
     ffc:	a901      	add	r1, sp, #4
     ffe:	800b      	strh	r3, [r1, #0]
								.data_length = outputPort[i].writeDataLength1,
    1000:	4643      	mov	r3, r8
    1002:	791b      	ldrb	r3, [r3, #4]
							struct i2c_master_packet wr_packet = {
    1004:	804b      	strh	r3, [r1, #2]
    1006:	4b12      	ldr	r3, [pc, #72]	; (1050 <checkSetOutputs+0xd0>)
    1008:	604b      	str	r3, [r1, #4]
    100a:	2300      	movs	r3, #0
    100c:	720b      	strb	r3, [r1, #8]
    100e:	724b      	strb	r3, [r1, #9]
    1010:	728b      	strb	r3, [r1, #10]
							I2CWrite((i+1) , &wr_packet);
    1012:	0028      	movs	r0, r5
    1014:	4b0f      	ldr	r3, [pc, #60]	; (1054 <checkSetOutputs+0xd4>)
    1016:	4798      	blx	r3
							delay_cycles_ms(5);
    1018:	2005      	movs	r0, #5
    101a:	4b0f      	ldr	r3, [pc, #60]	; (1058 <checkSetOutputs+0xd8>)
    101c:	4798      	blx	r3
							outputPort[i].initialization	  =		true;
    101e:	2301      	movs	r3, #1
    1020:	4642      	mov	r2, r8
    1022:	7193      	strb	r3, [r2, #6]
							outputPort[i].currentState		  =		OUTPUT_LEDMATRIX;
    1024:	3302      	adds	r3, #2
    1026:	7053      	strb	r3, [r2, #1]
    1028:	e7bc      	b.n	fa4 <checkSetOutputs+0x24>
					{
						case OUTPUT_LEDMATRIX:
							resetOutput(i);
    102a:	4b0c      	ldr	r3, [pc, #48]	; (105c <checkSetOutputs+0xdc>)
    102c:	4798      	blx	r3
							disableI2CModule(i+1);
    102e:	0028      	movs	r0, r5
    1030:	4b0b      	ldr	r3, [pc, #44]	; (1060 <checkSetOutputs+0xe0>)
    1032:	4798      	blx	r3
							break;
    1034:	e7b6      	b.n	fa4 <checkSetOutputs+0x24>
		}
		
	}
	
	
}
    1036:	b004      	add	sp, #16
    1038:	bc1c      	pop	{r2, r3, r4}
    103a:	4690      	mov	r8, r2
    103c:	4699      	mov	r9, r3
    103e:	46a2      	mov	sl, r4
    1040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	20000fc4 	.word	0x20000fc4
    1048:	20001124 	.word	0x20001124
    104c:	000015a9 	.word	0x000015a9
    1050:	20000000 	.word	0x20000000
    1054:	000013b1 	.word	0x000013b1
    1058:	00001c09 	.word	0x00001c09
    105c:	00000f65 	.word	0x00000f65
    1060:	00001751 	.word	0x00001751

00001064 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1064:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1066:	2207      	movs	r2, #7
    1068:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    106a:	421a      	tst	r2, r3
    106c:	d1fc      	bne.n	1068 <_i2c_master_wait_for_sync+0x4>
}
    106e:	4770      	bx	lr

00001070 <i2c_read_complete_callback_1>:
	}
}

void i2c_read_complete_callback_1(struct i2c_master_module *const module)
{
	outputPort[0].I2CStatus = IDLE_MODE;
    1070:	2201      	movs	r2, #1
    1072:	4b01      	ldr	r3, [pc, #4]	; (1078 <i2c_read_complete_callback_1+0x8>)
    1074:	71da      	strb	r2, [r3, #7]
}
    1076:	4770      	bx	lr
    1078:	20001124 	.word	0x20001124

0000107c <i2c_read_complete_callback_2>:

void i2c_read_complete_callback_2(struct i2c_master_module *const module)
{
	outputPort[1].I2CStatus = IDLE_MODE;
    107c:	2201      	movs	r2, #1
    107e:	4b01      	ldr	r3, [pc, #4]	; (1084 <i2c_read_complete_callback_2+0x8>)
    1080:	73da      	strb	r2, [r3, #15]
}
    1082:	4770      	bx	lr
    1084:	20001124 	.word	0x20001124

00001088 <i2c_read_complete_callback_3>:

void i2c_read_complete_callback_3(struct i2c_master_module *const module)
{
	outputPort[2].I2CStatus = IDLE_MODE;
    1088:	2201      	movs	r2, #1
    108a:	4b01      	ldr	r3, [pc, #4]	; (1090 <i2c_read_complete_callback_3+0x8>)
    108c:	75da      	strb	r2, [r3, #23]
}
    108e:	4770      	bx	lr
    1090:	20001124 	.word	0x20001124

00001094 <i2c_read_complete_callback_sensors>:


void i2c_read_complete_callback_sensors(struct i2c_master_module *const module)
{
	//inputPort[3].I2CStatus = IDLE_MODE;
}
    1094:	4770      	bx	lr
	...

00001098 <i2c_write_complete_callback_1>:
	rd_packet_1.address     = outputPort[0].address;
	rd_packet_1.data_length = outputPort[0].readDataLength;
	rd_packet_1.data        = rd_buffer_1;
	i2c_master_read_packet_job(&i2c_master_instance_1,&rd_packet_1);
	*/
	outputPort[0].I2CStatus = IDLE_MODE;
    1098:	2201      	movs	r2, #1
    109a:	4b01      	ldr	r3, [pc, #4]	; (10a0 <i2c_write_complete_callback_1+0x8>)
    109c:	71da      	strb	r2, [r3, #7]
}
    109e:	4770      	bx	lr
    10a0:	20001124 	.word	0x20001124

000010a4 <i2c_write_complete_callback_2>:
	rd_packet_2.address     = outputPort[1].address;
	rd_packet_2.data_length = outputPort[1].readDataLength;
	rd_packet_2.data        = rd_buffer_2;
	i2c_master_read_packet_job(&i2c_master_instance_2,&rd_packet_2);
	*/
	outputPort[1].I2CStatus = IDLE_MODE;
    10a4:	2201      	movs	r2, #1
    10a6:	4b01      	ldr	r3, [pc, #4]	; (10ac <i2c_write_complete_callback_2+0x8>)
    10a8:	73da      	strb	r2, [r3, #15]
}
    10aa:	4770      	bx	lr
    10ac:	20001124 	.word	0x20001124

000010b0 <i2c_write_complete_callback_3>:
	rd_packet_3.address     = outputPort[2].address;
	rd_packet_3.data_length = outputPort[2].readDataLength;
	rd_packet_3.data        = rd_buffer_3;
	i2c_master_read_packet_job(&i2c_master_instance_3,&rd_packet_3);
	*/
	outputPort[2].I2CStatus = IDLE_MODE;
    10b0:	2201      	movs	r2, #1
    10b2:	4b01      	ldr	r3, [pc, #4]	; (10b8 <i2c_write_complete_callback_3+0x8>)
    10b4:	75da      	strb	r2, [r3, #23]
}
    10b6:	4770      	bx	lr
    10b8:	20001124 	.word	0x20001124

000010bc <i2c_write_complete_callback_4>:
	rd_packet_4.data_length = outputPort[3].readDataLength;
	rd_packet_4.data        = rd_buffer_4;
	i2c_master_read_packet_job(&i2c_master_instance_4,&rd_packet_4);
	*/
	
	outputPort[3].I2CStatus = IDLE_MODE;
    10bc:	2201      	movs	r2, #1
    10be:	4b01      	ldr	r3, [pc, #4]	; (10c4 <i2c_write_complete_callback_4+0x8>)
    10c0:	77da      	strb	r2, [r3, #31]
}
    10c2:	4770      	bx	lr
    10c4:	20001124 	.word	0x20001124

000010c8 <i2c_write_complete_callback_sensors>:
	rd_packet_4.data        = rd_buffer_4;
	i2c_master_read_packet_job(&i2c_master_instance_4,&rd_packet_4);
	*/
	
	//outputPort[3].I2CStatus = IDLE_MODE;
}
    10c8:	4770      	bx	lr
	...

000010cc <I2CRead>:
{
    10cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10ce:	46de      	mov	lr, fp
    10d0:	4657      	mov	r7, sl
    10d2:	464e      	mov	r6, r9
    10d4:	4645      	mov	r5, r8
    10d6:	b5e0      	push	{r5, r6, r7, lr}
    10d8:	000c      	movs	r4, r1
	switch(instanceNo)
    10da:	2805      	cmp	r0, #5
    10dc:	d843      	bhi.n	1166 <I2CRead+0x9a>
    10de:	0080      	lsls	r0, r0, #2
    10e0:	4ba8      	ldr	r3, [pc, #672]	; (1384 <I2CRead+0x2b8>)
    10e2:	581b      	ldr	r3, [r3, r0]
    10e4:	469f      	mov	pc, r3
    10e6:	4da8      	ldr	r5, [pc, #672]	; (1388 <I2CRead+0x2bc>)
			while (i2c_master_read_packet_wait(&i2c_master_instance_1, rd_packet) !=STATUS_OK) {
    10e8:	4ea8      	ldr	r6, [pc, #672]	; (138c <I2CRead+0x2c0>)
    10ea:	4fa9      	ldr	r7, [pc, #676]	; (1390 <I2CRead+0x2c4>)
    10ec:	0021      	movs	r1, r4
    10ee:	0030      	movs	r0, r6
    10f0:	47b8      	blx	r7
    10f2:	2800      	cmp	r0, #0
    10f4:	d037      	beq.n	1166 <I2CRead+0x9a>
    10f6:	3d01      	subs	r5, #1
    10f8:	b2ad      	uxth	r5, r5
				if (timeout++ == TIMEOUT) {
    10fa:	2d00      	cmp	r5, #0
    10fc:	d1f6      	bne.n	10ec <I2CRead+0x20>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    10fe:	4da3      	ldr	r5, [pc, #652]	; (138c <I2CRead+0x2c0>)
    1100:	682c      	ldr	r4, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1102:	0020      	movs	r0, r4
    1104:	4ba3      	ldr	r3, [pc, #652]	; (1394 <I2CRead+0x2c8>)
    1106:	4699      	mov	r9, r3
    1108:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    110a:	271f      	movs	r7, #31
    110c:	4038      	ands	r0, r7
    110e:	2601      	movs	r6, #1
    1110:	0032      	movs	r2, r6
    1112:	4082      	lsls	r2, r0
    1114:	4ba0      	ldr	r3, [pc, #640]	; (1398 <I2CRead+0x2cc>)
    1116:	4698      	mov	r8, r3
    1118:	2380      	movs	r3, #128	; 0x80
    111a:	4641      	mov	r1, r8
    111c:	50ca      	str	r2, [r1, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    111e:	0028      	movs	r0, r5
    1120:	4b9e      	ldr	r3, [pc, #632]	; (139c <I2CRead+0x2d0>)
    1122:	469b      	mov	fp, r3
    1124:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1126:	2383      	movs	r3, #131	; 0x83
    1128:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    112a:	7623      	strb	r3, [r4, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    112c:	6823      	ldr	r3, [r4, #0]
    112e:	2202      	movs	r2, #2
    1130:	4692      	mov	sl, r2
    1132:	4393      	bics	r3, r2
    1134:	6023      	str	r3, [r4, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1136:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1138:	0028      	movs	r0, r5
    113a:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    113c:	6823      	ldr	r3, [r4, #0]
    113e:	4652      	mov	r2, sl
    1140:	4313      	orrs	r3, r2
    1142:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1144:	6828      	ldr	r0, [r5, #0]
    1146:	47c8      	blx	r9
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1148:	4007      	ands	r7, r0
    114a:	40be      	lsls	r6, r7
    114c:	4643      	mov	r3, r8
    114e:	601e      	str	r6, [r3, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1150:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1152:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1154:	2110      	movs	r1, #16
    1156:	8b62      	ldrh	r2, [r4, #26]
    1158:	420a      	tst	r2, r1
    115a:	d104      	bne.n	1166 <I2CRead+0x9a>
		timeout_counter++;
    115c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    115e:	4283      	cmp	r3, r0
    1160:	d3f9      	bcc.n	1156 <I2CRead+0x8a>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1162:	2310      	movs	r3, #16
    1164:	8363      	strh	r3, [r4, #26]
}
    1166:	bc3c      	pop	{r2, r3, r4, r5}
    1168:	4690      	mov	r8, r2
    116a:	4699      	mov	r9, r3
    116c:	46a2      	mov	sl, r4
    116e:	46ab      	mov	fp, r5
    1170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch(instanceNo)
    1172:	4d85      	ldr	r5, [pc, #532]	; (1388 <I2CRead+0x2bc>)
			while (i2c_master_read_packet_wait(&i2c_master_instance_2, rd_packet) !=STATUS_OK) {
    1174:	4e8a      	ldr	r6, [pc, #552]	; (13a0 <I2CRead+0x2d4>)
    1176:	4f86      	ldr	r7, [pc, #536]	; (1390 <I2CRead+0x2c4>)
    1178:	0021      	movs	r1, r4
    117a:	0030      	movs	r0, r6
    117c:	47b8      	blx	r7
    117e:	2800      	cmp	r0, #0
    1180:	d0f1      	beq.n	1166 <I2CRead+0x9a>
    1182:	3d01      	subs	r5, #1
    1184:	b2ad      	uxth	r5, r5
				if (timeout++ == TIMEOUT) {
    1186:	2d00      	cmp	r5, #0
    1188:	d1f6      	bne.n	1178 <I2CRead+0xac>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    118a:	4d85      	ldr	r5, [pc, #532]	; (13a0 <I2CRead+0x2d4>)
    118c:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    118e:	0020      	movs	r0, r4
    1190:	4b80      	ldr	r3, [pc, #512]	; (1394 <I2CRead+0x2c8>)
    1192:	4699      	mov	r9, r3
    1194:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1196:	271f      	movs	r7, #31
    1198:	4038      	ands	r0, r7
    119a:	2601      	movs	r6, #1
    119c:	0032      	movs	r2, r6
    119e:	4082      	lsls	r2, r0
    11a0:	4b7d      	ldr	r3, [pc, #500]	; (1398 <I2CRead+0x2cc>)
    11a2:	4698      	mov	r8, r3
    11a4:	2380      	movs	r3, #128	; 0x80
    11a6:	4641      	mov	r1, r8
    11a8:	50ca      	str	r2, [r1, r3]
	_i2c_master_wait_for_sync(module);
    11aa:	0028      	movs	r0, r5
    11ac:	4b7b      	ldr	r3, [pc, #492]	; (139c <I2CRead+0x2d0>)
    11ae:	469b      	mov	fp, r3
    11b0:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    11b2:	2383      	movs	r3, #131	; 0x83
    11b4:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    11b6:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    11b8:	6823      	ldr	r3, [r4, #0]
    11ba:	2202      	movs	r2, #2
    11bc:	4692      	mov	sl, r2
    11be:	4393      	bics	r3, r2
    11c0:	6023      	str	r3, [r4, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11c2:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    11c4:	0028      	movs	r0, r5
    11c6:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    11c8:	6823      	ldr	r3, [r4, #0]
    11ca:	4652      	mov	r2, sl
    11cc:	4313      	orrs	r3, r2
    11ce:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    11d0:	6828      	ldr	r0, [r5, #0]
    11d2:	47c8      	blx	r9
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    11d4:	4007      	ands	r7, r0
    11d6:	40be      	lsls	r6, r7
    11d8:	4643      	mov	r3, r8
    11da:	601e      	str	r6, [r3, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    11dc:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    11de:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    11e0:	2110      	movs	r1, #16
    11e2:	8b62      	ldrh	r2, [r4, #26]
    11e4:	420a      	tst	r2, r1
    11e6:	d1be      	bne.n	1166 <I2CRead+0x9a>
		timeout_counter++;
    11e8:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    11ea:	4283      	cmp	r3, r0
    11ec:	d3f9      	bcc.n	11e2 <I2CRead+0x116>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    11ee:	2310      	movs	r3, #16
    11f0:	8363      	strh	r3, [r4, #26]
    11f2:	e7b8      	b.n	1166 <I2CRead+0x9a>
	switch(instanceNo)
    11f4:	4d64      	ldr	r5, [pc, #400]	; (1388 <I2CRead+0x2bc>)
			while (i2c_master_read_packet_wait(&i2c_master_instance_3, rd_packet) !=STATUS_OK) {
    11f6:	4e6b      	ldr	r6, [pc, #428]	; (13a4 <I2CRead+0x2d8>)
    11f8:	4f65      	ldr	r7, [pc, #404]	; (1390 <I2CRead+0x2c4>)
    11fa:	0021      	movs	r1, r4
    11fc:	0030      	movs	r0, r6
    11fe:	47b8      	blx	r7
    1200:	2800      	cmp	r0, #0
    1202:	d0b0      	beq.n	1166 <I2CRead+0x9a>
    1204:	3d01      	subs	r5, #1
    1206:	b2ad      	uxth	r5, r5
				if (timeout++ == TIMEOUT) {
    1208:	2d00      	cmp	r5, #0
    120a:	d1f6      	bne.n	11fa <I2CRead+0x12e>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    120c:	4d65      	ldr	r5, [pc, #404]	; (13a4 <I2CRead+0x2d8>)
    120e:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1210:	0020      	movs	r0, r4
    1212:	4b60      	ldr	r3, [pc, #384]	; (1394 <I2CRead+0x2c8>)
    1214:	4699      	mov	r9, r3
    1216:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1218:	271f      	movs	r7, #31
    121a:	4038      	ands	r0, r7
    121c:	2601      	movs	r6, #1
    121e:	0032      	movs	r2, r6
    1220:	4082      	lsls	r2, r0
    1222:	4b5d      	ldr	r3, [pc, #372]	; (1398 <I2CRead+0x2cc>)
    1224:	4698      	mov	r8, r3
    1226:	2380      	movs	r3, #128	; 0x80
    1228:	4641      	mov	r1, r8
    122a:	50ca      	str	r2, [r1, r3]
	_i2c_master_wait_for_sync(module);
    122c:	0028      	movs	r0, r5
    122e:	4b5b      	ldr	r3, [pc, #364]	; (139c <I2CRead+0x2d0>)
    1230:	469b      	mov	fp, r3
    1232:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1234:	2383      	movs	r3, #131	; 0x83
    1236:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1238:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    123a:	6823      	ldr	r3, [r4, #0]
    123c:	2202      	movs	r2, #2
    123e:	4692      	mov	sl, r2
    1240:	4393      	bics	r3, r2
    1242:	6023      	str	r3, [r4, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1244:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1246:	0028      	movs	r0, r5
    1248:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    124a:	6823      	ldr	r3, [r4, #0]
    124c:	4652      	mov	r2, sl
    124e:	4313      	orrs	r3, r2
    1250:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1252:	6828      	ldr	r0, [r5, #0]
    1254:	47c8      	blx	r9
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1256:	4007      	ands	r7, r0
    1258:	40be      	lsls	r6, r7
    125a:	4643      	mov	r3, r8
    125c:	601e      	str	r6, [r3, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    125e:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1260:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1262:	2110      	movs	r1, #16
    1264:	8b62      	ldrh	r2, [r4, #26]
    1266:	420a      	tst	r2, r1
    1268:	d000      	beq.n	126c <I2CRead+0x1a0>
    126a:	e77c      	b.n	1166 <I2CRead+0x9a>
		timeout_counter++;
    126c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    126e:	4283      	cmp	r3, r0
    1270:	d3f8      	bcc.n	1264 <I2CRead+0x198>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1272:	2310      	movs	r3, #16
    1274:	8363      	strh	r3, [r4, #26]
    1276:	e776      	b.n	1166 <I2CRead+0x9a>
	switch(instanceNo)
    1278:	4d43      	ldr	r5, [pc, #268]	; (1388 <I2CRead+0x2bc>)
			while (i2c_master_read_packet_wait(&i2c_master_instance_4, rd_packet) !=STATUS_OK) {
    127a:	4e4b      	ldr	r6, [pc, #300]	; (13a8 <I2CRead+0x2dc>)
    127c:	4f44      	ldr	r7, [pc, #272]	; (1390 <I2CRead+0x2c4>)
    127e:	0021      	movs	r1, r4
    1280:	0030      	movs	r0, r6
    1282:	47b8      	blx	r7
    1284:	2800      	cmp	r0, #0
    1286:	d100      	bne.n	128a <I2CRead+0x1be>
    1288:	e76d      	b.n	1166 <I2CRead+0x9a>
    128a:	3d01      	subs	r5, #1
    128c:	b2ad      	uxth	r5, r5
				if (timeout++ == TIMEOUT) {
    128e:	2d00      	cmp	r5, #0
    1290:	d1f5      	bne.n	127e <I2CRead+0x1b2>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1292:	4d45      	ldr	r5, [pc, #276]	; (13a8 <I2CRead+0x2dc>)
    1294:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1296:	0020      	movs	r0, r4
    1298:	4b3e      	ldr	r3, [pc, #248]	; (1394 <I2CRead+0x2c8>)
    129a:	4699      	mov	r9, r3
    129c:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    129e:	271f      	movs	r7, #31
    12a0:	4038      	ands	r0, r7
    12a2:	2601      	movs	r6, #1
    12a4:	0032      	movs	r2, r6
    12a6:	4082      	lsls	r2, r0
    12a8:	4b3b      	ldr	r3, [pc, #236]	; (1398 <I2CRead+0x2cc>)
    12aa:	4698      	mov	r8, r3
    12ac:	2380      	movs	r3, #128	; 0x80
    12ae:	4641      	mov	r1, r8
    12b0:	50ca      	str	r2, [r1, r3]
	_i2c_master_wait_for_sync(module);
    12b2:	0028      	movs	r0, r5
    12b4:	4b39      	ldr	r3, [pc, #228]	; (139c <I2CRead+0x2d0>)
    12b6:	469b      	mov	fp, r3
    12b8:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    12ba:	2383      	movs	r3, #131	; 0x83
    12bc:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    12be:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    12c0:	6823      	ldr	r3, [r4, #0]
    12c2:	2202      	movs	r2, #2
    12c4:	4692      	mov	sl, r2
    12c6:	4393      	bics	r3, r2
    12c8:	6023      	str	r3, [r4, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    12ca:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    12cc:	0028      	movs	r0, r5
    12ce:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    12d0:	6823      	ldr	r3, [r4, #0]
    12d2:	4652      	mov	r2, sl
    12d4:	4313      	orrs	r3, r2
    12d6:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    12d8:	6828      	ldr	r0, [r5, #0]
    12da:	47c8      	blx	r9
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12dc:	4007      	ands	r7, r0
    12de:	40be      	lsls	r6, r7
    12e0:	4643      	mov	r3, r8
    12e2:	601e      	str	r6, [r3, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    12e4:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    12e6:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    12e8:	2110      	movs	r1, #16
    12ea:	8b62      	ldrh	r2, [r4, #26]
    12ec:	420a      	tst	r2, r1
    12ee:	d000      	beq.n	12f2 <I2CRead+0x226>
    12f0:	e739      	b.n	1166 <I2CRead+0x9a>
		timeout_counter++;
    12f2:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    12f4:	4283      	cmp	r3, r0
    12f6:	d3f8      	bcc.n	12ea <I2CRead+0x21e>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    12f8:	2310      	movs	r3, #16
    12fa:	8363      	strh	r3, [r4, #26]
    12fc:	e733      	b.n	1166 <I2CRead+0x9a>
	switch(instanceNo)
    12fe:	4d22      	ldr	r5, [pc, #136]	; (1388 <I2CRead+0x2bc>)
			while (i2c_master_read_packet_wait(&i2c_master_instance_sensors, rd_packet) !=STATUS_OK) {
    1300:	4e2a      	ldr	r6, [pc, #168]	; (13ac <I2CRead+0x2e0>)
    1302:	4f23      	ldr	r7, [pc, #140]	; (1390 <I2CRead+0x2c4>)
    1304:	0021      	movs	r1, r4
    1306:	0030      	movs	r0, r6
    1308:	47b8      	blx	r7
    130a:	2800      	cmp	r0, #0
    130c:	d100      	bne.n	1310 <I2CRead+0x244>
    130e:	e72a      	b.n	1166 <I2CRead+0x9a>
    1310:	3d01      	subs	r5, #1
    1312:	b2ad      	uxth	r5, r5
				if (timeout++ == TIMEOUT) {
    1314:	2d00      	cmp	r5, #0
    1316:	d1f5      	bne.n	1304 <I2CRead+0x238>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1318:	4d24      	ldr	r5, [pc, #144]	; (13ac <I2CRead+0x2e0>)
    131a:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    131c:	0020      	movs	r0, r4
    131e:	4b1d      	ldr	r3, [pc, #116]	; (1394 <I2CRead+0x2c8>)
    1320:	4699      	mov	r9, r3
    1322:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1324:	271f      	movs	r7, #31
    1326:	4038      	ands	r0, r7
    1328:	2601      	movs	r6, #1
    132a:	0032      	movs	r2, r6
    132c:	4082      	lsls	r2, r0
    132e:	4b1a      	ldr	r3, [pc, #104]	; (1398 <I2CRead+0x2cc>)
    1330:	4698      	mov	r8, r3
    1332:	2380      	movs	r3, #128	; 0x80
    1334:	4641      	mov	r1, r8
    1336:	50ca      	str	r2, [r1, r3]
	_i2c_master_wait_for_sync(module);
    1338:	0028      	movs	r0, r5
    133a:	4b18      	ldr	r3, [pc, #96]	; (139c <I2CRead+0x2d0>)
    133c:	469b      	mov	fp, r3
    133e:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1340:	2383      	movs	r3, #131	; 0x83
    1342:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1344:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1346:	6823      	ldr	r3, [r4, #0]
    1348:	2202      	movs	r2, #2
    134a:	4692      	mov	sl, r2
    134c:	4393      	bics	r3, r2
    134e:	6023      	str	r3, [r4, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1350:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1352:	0028      	movs	r0, r5
    1354:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1356:	6823      	ldr	r3, [r4, #0]
    1358:	4652      	mov	r2, sl
    135a:	4313      	orrs	r3, r2
    135c:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    135e:	6828      	ldr	r0, [r5, #0]
    1360:	47c8      	blx	r9
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1362:	4007      	ands	r7, r0
    1364:	40be      	lsls	r6, r7
    1366:	4643      	mov	r3, r8
    1368:	601e      	str	r6, [r3, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    136a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    136c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    136e:	2110      	movs	r1, #16
    1370:	8b62      	ldrh	r2, [r4, #26]
    1372:	420a      	tst	r2, r1
    1374:	d000      	beq.n	1378 <I2CRead+0x2ac>
    1376:	e6f6      	b.n	1166 <I2CRead+0x9a>
		timeout_counter++;
    1378:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    137a:	4283      	cmp	r3, r0
    137c:	d3f8      	bcc.n	1370 <I2CRead+0x2a4>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    137e:	2310      	movs	r3, #16
    1380:	8363      	strh	r3, [r4, #26]
    1382:	e6f0      	b.n	1166 <I2CRead+0x9a>
    1384:	0000589c 	.word	0x0000589c
    1388:	000003e9 	.word	0x000003e9
    138c:	20000e80 	.word	0x20000e80
    1390:	00000659 	.word	0x00000659
    1394:	00002519 	.word	0x00002519
    1398:	e000e100 	.word	0xe000e100
    139c:	00001065 	.word	0x00001065
    13a0:	20000e40 	.word	0x20000e40
    13a4:	20000f10 	.word	0x20000f10
    13a8:	20000ee8 	.word	0x20000ee8
    13ac:	20000ec0 	.word	0x20000ec0

000013b0 <I2CWrite>:
{
    13b0:	b500      	push	{lr}
    13b2:	b083      	sub	sp, #12
	volatile uint32_t err_code = 0;
    13b4:	2300      	movs	r3, #0
    13b6:	9301      	str	r3, [sp, #4]
	switch(instanceNo)
    13b8:	2802      	cmp	r0, #2
    13ba:	d010      	beq.n	13de <I2CWrite+0x2e>
    13bc:	d908      	bls.n	13d0 <I2CWrite+0x20>
    13be:	2803      	cmp	r0, #3
    13c0:	d011      	beq.n	13e6 <I2CWrite+0x36>
    13c2:	2804      	cmp	r0, #4
    13c4:	d109      	bne.n	13da <I2CWrite+0x2a>
			err_code = i2c_master_write_packet_job(&i2c_master_instance_4, wr_packet);
    13c6:	480a      	ldr	r0, [pc, #40]	; (13f0 <I2CWrite+0x40>)
    13c8:	4b0a      	ldr	r3, [pc, #40]	; (13f4 <I2CWrite+0x44>)
    13ca:	4798      	blx	r3
    13cc:	9001      	str	r0, [sp, #4]
}
    13ce:	e004      	b.n	13da <I2CWrite+0x2a>
	switch(instanceNo)
    13d0:	2801      	cmp	r0, #1
    13d2:	d102      	bne.n	13da <I2CWrite+0x2a>
			 i2c_master_write_packet_job(&i2c_master_instance_1, wr_packet);
    13d4:	4808      	ldr	r0, [pc, #32]	; (13f8 <I2CWrite+0x48>)
    13d6:	4b07      	ldr	r3, [pc, #28]	; (13f4 <I2CWrite+0x44>)
    13d8:	4798      	blx	r3
}
    13da:	b003      	add	sp, #12
    13dc:	bd00      	pop	{pc}
			i2c_master_write_packet_job(&i2c_master_instance_2, wr_packet);
    13de:	4807      	ldr	r0, [pc, #28]	; (13fc <I2CWrite+0x4c>)
    13e0:	4b04      	ldr	r3, [pc, #16]	; (13f4 <I2CWrite+0x44>)
    13e2:	4798      	blx	r3
			break;
    13e4:	e7f9      	b.n	13da <I2CWrite+0x2a>
			i2c_master_write_packet_job(&i2c_master_instance_3, wr_packet);
    13e6:	4806      	ldr	r0, [pc, #24]	; (1400 <I2CWrite+0x50>)
    13e8:	4b02      	ldr	r3, [pc, #8]	; (13f4 <I2CWrite+0x44>)
    13ea:	4798      	blx	r3
			break;
    13ec:	e7f5      	b.n	13da <I2CWrite+0x2a>
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	20000ee8 	.word	0x20000ee8
    13f4:	000007cd 	.word	0x000007cd
    13f8:	20000e80 	.word	0x20000e80
    13fc:	20000e40 	.word	0x20000e40
    1400:	20000f10 	.word	0x20000f10

00001404 <initializeI2CModules>:
{
	rewrite = true;
}
*/
void initializeI2CModules()
{
    1404:	b530      	push	{r4, r5, lr}
    1406:	b08f      	sub	sp, #60	; 0x3c
	config->baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
    1408:	ab01      	add	r3, sp, #4
    140a:	22c8      	movs	r2, #200	; 0xc8
    140c:	0052      	lsls	r2, r2, #1
    140e:	9201      	str	r2, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1410:	4a45      	ldr	r2, [pc, #276]	; (1528 <initializeI2CModules+0x124>)
    1412:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1414:	2200      	movs	r2, #0
    1416:	9203      	str	r2, [sp, #12]
	config->generator_source = GCLK_GENERATOR_0;
    1418:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    141a:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    141c:	2180      	movs	r1, #128	; 0x80
    141e:	0389      	lsls	r1, r1, #14
    1420:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    1422:	2101      	movs	r1, #1
    1424:	4249      	negs	r1, r1
    1426:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    1428:	8299      	strh	r1, [r3, #20]
	config->scl_low_timeout  = false;
    142a:	3125      	adds	r1, #37	; 0x25
    142c:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    142e:	920b      	str	r2, [sp, #44]	; 0x2c
	config->scl_stretch_only_after_ack_bit = false;
    1430:	3108      	adds	r1, #8
    1432:	545a      	strb	r2, [r3, r1]
	config->slave_scl_low_extend_timeout   = false;
    1434:	3101      	adds	r1, #1
    1436:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    1438:	3101      	adds	r1, #1
    143a:	545a      	strb	r2, [r3, r1]
	config->sda_scl_rise_time_ns = 215;
    143c:	32d7      	adds	r2, #215	; 0xd7
    143e:	861a      	strh	r2, [r3, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
	//Output 1 
	config_i2c_master.pinmux_pad0    = OUTPUT1_I2C_SDA;
    1440:	4a3a      	ldr	r2, [pc, #232]	; (152c <initializeI2CModules+0x128>)
    1442:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT1_I2C_SCL;
    1444:	4a3a      	ldr	r2, [pc, #232]	; (1530 <initializeI2CModules+0x12c>)
    1446:	9209      	str	r2, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_1,  CONF_I2C_MASTER_MODULE_OUTPUT_1, &config_i2c_master)   != STATUS_OK);
    1448:	4d3a      	ldr	r5, [pc, #232]	; (1534 <initializeI2CModules+0x130>)
    144a:	4c3b      	ldr	r4, [pc, #236]	; (1538 <initializeI2CModules+0x134>)
    144c:	aa01      	add	r2, sp, #4
    144e:	493b      	ldr	r1, [pc, #236]	; (153c <initializeI2CModules+0x138>)
    1450:	0028      	movs	r0, r5
    1452:	47a0      	blx	r4
    1454:	2800      	cmp	r0, #0
    1456:	d1f9      	bne.n	144c <initializeI2CModules+0x48>
	i2c_master_register_callback(&i2c_master_instance_1, i2c_write_complete_callback_1,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1458:	4d36      	ldr	r5, [pc, #216]	; (1534 <initializeI2CModules+0x130>)
    145a:	2200      	movs	r2, #0
    145c:	4938      	ldr	r1, [pc, #224]	; (1540 <initializeI2CModules+0x13c>)
    145e:	0028      	movs	r0, r5
    1460:	4c38      	ldr	r4, [pc, #224]	; (1544 <initializeI2CModules+0x140>)
    1462:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_1, i2c_read_complete_callback_1,I2C_MASTER_CALLBACK_READ_COMPLETE);
    1464:	2201      	movs	r2, #1
    1466:	4938      	ldr	r1, [pc, #224]	; (1548 <initializeI2CModules+0x144>)
    1468:	0028      	movs	r0, r5
    146a:	47a0      	blx	r4
	
	//Output 2
	config_i2c_master.pinmux_pad0    = OUTPUT2_I2C_SDA;
    146c:	4b37      	ldr	r3, [pc, #220]	; (154c <initializeI2CModules+0x148>)
    146e:	9308      	str	r3, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT2_I2C_SCL;
    1470:	4b37      	ldr	r3, [pc, #220]	; (1550 <initializeI2CModules+0x14c>)
    1472:	9309      	str	r3, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_2,  CONF_I2C_MASTER_MODULE_OUTPUT_2, &config_i2c_master)   != STATUS_OK);
    1474:	4d37      	ldr	r5, [pc, #220]	; (1554 <initializeI2CModules+0x150>)
    1476:	4c30      	ldr	r4, [pc, #192]	; (1538 <initializeI2CModules+0x134>)
    1478:	aa01      	add	r2, sp, #4
    147a:	4937      	ldr	r1, [pc, #220]	; (1558 <initializeI2CModules+0x154>)
    147c:	0028      	movs	r0, r5
    147e:	47a0      	blx	r4
    1480:	2800      	cmp	r0, #0
    1482:	d1f9      	bne.n	1478 <initializeI2CModules+0x74>
	i2c_master_register_callback(&i2c_master_instance_2, i2c_write_complete_callback_2, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1484:	4d33      	ldr	r5, [pc, #204]	; (1554 <initializeI2CModules+0x150>)
    1486:	2200      	movs	r2, #0
    1488:	4934      	ldr	r1, [pc, #208]	; (155c <initializeI2CModules+0x158>)
    148a:	0028      	movs	r0, r5
    148c:	4c2d      	ldr	r4, [pc, #180]	; (1544 <initializeI2CModules+0x140>)
    148e:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_2, i2c_read_complete_callback_2,  I2C_MASTER_CALLBACK_READ_COMPLETE);
    1490:	2201      	movs	r2, #1
    1492:	4933      	ldr	r1, [pc, #204]	; (1560 <initializeI2CModules+0x15c>)
    1494:	0028      	movs	r0, r5
    1496:	47a0      	blx	r4
	
	//Output 3
	config_i2c_master.pinmux_pad0    = OUTPUT3_I2C_SDA;
    1498:	4b32      	ldr	r3, [pc, #200]	; (1564 <initializeI2CModules+0x160>)
    149a:	9308      	str	r3, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT3_I2C_SCL;
    149c:	4b32      	ldr	r3, [pc, #200]	; (1568 <initializeI2CModules+0x164>)
    149e:	9309      	str	r3, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance_3,  CONF_I2C_MASTER_MODULE_OUTPUT_3, &config_i2c_master)   != STATUS_OK);
    14a0:	4d32      	ldr	r5, [pc, #200]	; (156c <initializeI2CModules+0x168>)
    14a2:	4c25      	ldr	r4, [pc, #148]	; (1538 <initializeI2CModules+0x134>)
    14a4:	aa01      	add	r2, sp, #4
    14a6:	4932      	ldr	r1, [pc, #200]	; (1570 <initializeI2CModules+0x16c>)
    14a8:	0028      	movs	r0, r5
    14aa:	47a0      	blx	r4
    14ac:	2800      	cmp	r0, #0
    14ae:	d1f9      	bne.n	14a4 <initializeI2CModules+0xa0>
	i2c_master_register_callback(&i2c_master_instance_3, i2c_write_complete_callback_3,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    14b0:	4d2e      	ldr	r5, [pc, #184]	; (156c <initializeI2CModules+0x168>)
    14b2:	2200      	movs	r2, #0
    14b4:	492f      	ldr	r1, [pc, #188]	; (1574 <initializeI2CModules+0x170>)
    14b6:	0028      	movs	r0, r5
    14b8:	4c22      	ldr	r4, [pc, #136]	; (1544 <initializeI2CModules+0x140>)
    14ba:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_3, i2c_read_complete_callback_3,  I2C_MASTER_CALLBACK_READ_COMPLETE);
    14bc:	2201      	movs	r2, #1
    14be:	492e      	ldr	r1, [pc, #184]	; (1578 <initializeI2CModules+0x174>)
    14c0:	0028      	movs	r0, r5
    14c2:	47a0      	blx	r4
	
	//Output 4
	config_i2c_master.pinmux_pad0    = OUTPUT4_I2C_SDA;
    14c4:	ab01      	add	r3, sp, #4
    14c6:	4a2d      	ldr	r2, [pc, #180]	; (157c <initializeI2CModules+0x178>)
    14c8:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = OUTPUT4_I2C_SCL;
    14ca:	4a2d      	ldr	r2, [pc, #180]	; (1580 <initializeI2CModules+0x17c>)
    14cc:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
    14ce:	22fa      	movs	r2, #250	; 0xfa
    14d0:	0092      	lsls	r2, r2, #2
    14d2:	82da      	strh	r2, [r3, #22]
	
	while(i2c_master_init(&i2c_master_instance_4,  CONF_I2C_MASTER_MODULE_OUTPUT_4, &config_i2c_master)   != STATUS_OK);
    14d4:	4d2b      	ldr	r5, [pc, #172]	; (1584 <initializeI2CModules+0x180>)
    14d6:	4c18      	ldr	r4, [pc, #96]	; (1538 <initializeI2CModules+0x134>)
    14d8:	aa01      	add	r2, sp, #4
    14da:	492b      	ldr	r1, [pc, #172]	; (1588 <initializeI2CModules+0x184>)
    14dc:	0028      	movs	r0, r5
    14de:	47a0      	blx	r4
    14e0:	2800      	cmp	r0, #0
    14e2:	d1f9      	bne.n	14d8 <initializeI2CModules+0xd4>
	i2c_master_register_callback(&i2c_master_instance_4, i2c_write_complete_callback_4, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    14e4:	2200      	movs	r2, #0
    14e6:	4929      	ldr	r1, [pc, #164]	; (158c <initializeI2CModules+0x188>)
    14e8:	4826      	ldr	r0, [pc, #152]	; (1584 <initializeI2CModules+0x180>)
    14ea:	4b16      	ldr	r3, [pc, #88]	; (1544 <initializeI2CModules+0x140>)
    14ec:	4798      	blx	r3
	
	//Sensors
	config_i2c_master.pinmux_pad0    = SENSORS_I2C_SDA	;
    14ee:	ab01      	add	r3, sp, #4
    14f0:	4a27      	ldr	r2, [pc, #156]	; (1590 <initializeI2CModules+0x18c>)
    14f2:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = SENSORS_I2C_SCL	;
    14f4:	4a27      	ldr	r2, [pc, #156]	; (1594 <initializeI2CModules+0x190>)
    14f6:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
    14f8:	22fa      	movs	r2, #250	; 0xfa
    14fa:	0092      	lsls	r2, r2, #2
    14fc:	82da      	strh	r2, [r3, #22]
	while(i2c_master_init(&i2c_master_instance_sensors,  CONF_I2C_MASTER_MODULE_SENSORS, &config_i2c_master)   != STATUS_OK);
    14fe:	4d26      	ldr	r5, [pc, #152]	; (1598 <initializeI2CModules+0x194>)
    1500:	4c0d      	ldr	r4, [pc, #52]	; (1538 <initializeI2CModules+0x134>)
    1502:	aa01      	add	r2, sp, #4
    1504:	4925      	ldr	r1, [pc, #148]	; (159c <initializeI2CModules+0x198>)
    1506:	0028      	movs	r0, r5
    1508:	47a0      	blx	r4
    150a:	2800      	cmp	r0, #0
    150c:	d1f9      	bne.n	1502 <initializeI2CModules+0xfe>
	i2c_master_register_callback(&i2c_master_instance_sensors, i2c_write_complete_callback_sensors,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    150e:	4d22      	ldr	r5, [pc, #136]	; (1598 <initializeI2CModules+0x194>)
    1510:	2200      	movs	r2, #0
    1512:	4923      	ldr	r1, [pc, #140]	; (15a0 <initializeI2CModules+0x19c>)
    1514:	0028      	movs	r0, r5
    1516:	4c0b      	ldr	r4, [pc, #44]	; (1544 <initializeI2CModules+0x140>)
    1518:	47a0      	blx	r4
	i2c_master_register_callback(&i2c_master_instance_sensors, i2c_read_complete_callback_sensors,I2C_MASTER_CALLBACK_READ_COMPLETE);
    151a:	2201      	movs	r2, #1
    151c:	4921      	ldr	r1, [pc, #132]	; (15a4 <initializeI2CModules+0x1a0>)
    151e:	0028      	movs	r0, r5
    1520:	47a0      	blx	r4
			//	break;
			//}
		//}
	
	
}
    1522:	b00f      	add	sp, #60	; 0x3c
    1524:	bd30      	pop	{r4, r5, pc}
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	00000d48 	.word	0x00000d48
    152c:	00080002 	.word	0x00080002
    1530:	00090002 	.word	0x00090002
    1534:	20000e80 	.word	0x20000e80
    1538:	00000145 	.word	0x00000145
    153c:	42000800 	.word	0x42000800
    1540:	00001099 	.word	0x00001099
    1544:	000007b5 	.word	0x000007b5
    1548:	00001071 	.word	0x00001071
    154c:	000c0002 	.word	0x000c0002
    1550:	000d0002 	.word	0x000d0002
    1554:	20000e40 	.word	0x20000e40
    1558:	42001000 	.word	0x42001000
    155c:	000010a5 	.word	0x000010a5
    1560:	0000107d 	.word	0x0000107d
    1564:	00100002 	.word	0x00100002
    1568:	00110002 	.word	0x00110002
    156c:	20000f10 	.word	0x20000f10
    1570:	42000c00 	.word	0x42000c00
    1574:	000010b1 	.word	0x000010b1
    1578:	00001089 	.word	0x00001089
    157c:	00160002 	.word	0x00160002
    1580:	00170002 	.word	0x00170002
    1584:	20000ee8 	.word	0x20000ee8
    1588:	42001400 	.word	0x42001400
    158c:	000010bd 	.word	0x000010bd
    1590:	00220003 	.word	0x00220003
    1594:	00230003 	.word	0x00230003
    1598:	20000ec0 	.word	0x20000ec0
    159c:	42001c00 	.word	0x42001c00
    15a0:	000010c9 	.word	0x000010c9
    15a4:	00001095 	.word	0x00001095

000015a8 <enableI2CModule>:

void enableI2CModule(uint8_t port)
{
    15a8:	b570      	push	{r4, r5, r6, lr}
	switch(port)
    15aa:	2805      	cmp	r0, #5
    15ac:	d829      	bhi.n	1602 <enableI2CModule+0x5a>
    15ae:	0080      	lsls	r0, r0, #2
    15b0:	4b5e      	ldr	r3, [pc, #376]	; (172c <enableI2CModule+0x184>)
    15b2:	581b      	ldr	r3, [r3, r0]
    15b4:	469f      	mov	pc, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15b6:	4d5e      	ldr	r5, [pc, #376]	; (1730 <enableI2CModule+0x188>)
    15b8:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    15ba:	0028      	movs	r0, r5
    15bc:	4b5d      	ldr	r3, [pc, #372]	; (1734 <enableI2CModule+0x18c>)
    15be:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    15c0:	6823      	ldr	r3, [r4, #0]
    15c2:	2202      	movs	r2, #2
    15c4:	4313      	orrs	r3, r2
    15c6:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    15c8:	6828      	ldr	r0, [r5, #0]
    15ca:	4b5b      	ldr	r3, [pc, #364]	; (1738 <enableI2CModule+0x190>)
    15cc:	4798      	blx	r3
    15ce:	231f      	movs	r3, #31
    15d0:	4018      	ands	r0, r3
    15d2:	3b1e      	subs	r3, #30
    15d4:	4083      	lsls	r3, r0
    15d6:	4a59      	ldr	r2, [pc, #356]	; (173c <enableI2CModule+0x194>)
    15d8:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    15da:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    15dc:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    15de:	2110      	movs	r1, #16
    15e0:	8b62      	ldrh	r2, [r4, #26]
    15e2:	420a      	tst	r2, r1
    15e4:	d104      	bne.n	15f0 <enableI2CModule+0x48>
		timeout_counter++;
    15e6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    15e8:	4283      	cmp	r3, r0
    15ea:	d3f9      	bcc.n	15e0 <enableI2CModule+0x38>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    15ec:	2310      	movs	r3, #16
    15ee:	8363      	strh	r3, [r4, #26]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    15f0:	4b4f      	ldr	r3, [pc, #316]	; (1730 <enableI2CModule+0x188>)
    15f2:	7e5a      	ldrb	r2, [r3, #25]
    15f4:	2101      	movs	r1, #1
    15f6:	430a      	orrs	r2, r1
    15f8:	765a      	strb	r2, [r3, #25]
    15fa:	7e5a      	ldrb	r2, [r3, #25]
    15fc:	3101      	adds	r1, #1
    15fe:	430a      	orrs	r2, r1
    1600:	765a      	strb	r2, [r3, #25]
			
		default:
			break;
	}
	
}
    1602:	bd70      	pop	{r4, r5, r6, pc}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1604:	4d4e      	ldr	r5, [pc, #312]	; (1740 <enableI2CModule+0x198>)
    1606:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1608:	0028      	movs	r0, r5
    160a:	4b4a      	ldr	r3, [pc, #296]	; (1734 <enableI2CModule+0x18c>)
    160c:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    160e:	6823      	ldr	r3, [r4, #0]
    1610:	2202      	movs	r2, #2
    1612:	4313      	orrs	r3, r2
    1614:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1616:	6828      	ldr	r0, [r5, #0]
    1618:	4b47      	ldr	r3, [pc, #284]	; (1738 <enableI2CModule+0x190>)
    161a:	4798      	blx	r3
    161c:	231f      	movs	r3, #31
    161e:	4018      	ands	r0, r3
    1620:	3b1e      	subs	r3, #30
    1622:	4083      	lsls	r3, r0
    1624:	4a45      	ldr	r2, [pc, #276]	; (173c <enableI2CModule+0x194>)
    1626:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1628:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    162a:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    162c:	2110      	movs	r1, #16
    162e:	8b62      	ldrh	r2, [r4, #26]
    1630:	420a      	tst	r2, r1
    1632:	d104      	bne.n	163e <enableI2CModule+0x96>
		timeout_counter++;
    1634:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1636:	4283      	cmp	r3, r0
    1638:	d3f9      	bcc.n	162e <enableI2CModule+0x86>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    163a:	2310      	movs	r3, #16
    163c:	8363      	strh	r3, [r4, #26]
    163e:	4b40      	ldr	r3, [pc, #256]	; (1740 <enableI2CModule+0x198>)
    1640:	7e5a      	ldrb	r2, [r3, #25]
    1642:	2101      	movs	r1, #1
    1644:	430a      	orrs	r2, r1
    1646:	765a      	strb	r2, [r3, #25]
    1648:	7e5a      	ldrb	r2, [r3, #25]
    164a:	3101      	adds	r1, #1
    164c:	430a      	orrs	r2, r1
    164e:	765a      	strb	r2, [r3, #25]
    1650:	e7d7      	b.n	1602 <enableI2CModule+0x5a>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1652:	4d3c      	ldr	r5, [pc, #240]	; (1744 <enableI2CModule+0x19c>)
    1654:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    1656:	0028      	movs	r0, r5
    1658:	4b36      	ldr	r3, [pc, #216]	; (1734 <enableI2CModule+0x18c>)
    165a:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    165c:	6823      	ldr	r3, [r4, #0]
    165e:	2202      	movs	r2, #2
    1660:	4313      	orrs	r3, r2
    1662:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1664:	6828      	ldr	r0, [r5, #0]
    1666:	4b34      	ldr	r3, [pc, #208]	; (1738 <enableI2CModule+0x190>)
    1668:	4798      	blx	r3
    166a:	231f      	movs	r3, #31
    166c:	4018      	ands	r0, r3
    166e:	3b1e      	subs	r3, #30
    1670:	4083      	lsls	r3, r0
    1672:	4a32      	ldr	r2, [pc, #200]	; (173c <enableI2CModule+0x194>)
    1674:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1676:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1678:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    167a:	2110      	movs	r1, #16
    167c:	8b62      	ldrh	r2, [r4, #26]
    167e:	420a      	tst	r2, r1
    1680:	d104      	bne.n	168c <enableI2CModule+0xe4>
		timeout_counter++;
    1682:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1684:	4283      	cmp	r3, r0
    1686:	d3f9      	bcc.n	167c <enableI2CModule+0xd4>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1688:	2310      	movs	r3, #16
    168a:	8363      	strh	r3, [r4, #26]
    168c:	4b2d      	ldr	r3, [pc, #180]	; (1744 <enableI2CModule+0x19c>)
    168e:	7e5a      	ldrb	r2, [r3, #25]
    1690:	2101      	movs	r1, #1
    1692:	430a      	orrs	r2, r1
    1694:	765a      	strb	r2, [r3, #25]
    1696:	7e5a      	ldrb	r2, [r3, #25]
    1698:	3101      	adds	r1, #1
    169a:	430a      	orrs	r2, r1
    169c:	765a      	strb	r2, [r3, #25]
    169e:	e7b0      	b.n	1602 <enableI2CModule+0x5a>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16a0:	4d29      	ldr	r5, [pc, #164]	; (1748 <enableI2CModule+0x1a0>)
    16a2:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    16a4:	0028      	movs	r0, r5
    16a6:	4b23      	ldr	r3, [pc, #140]	; (1734 <enableI2CModule+0x18c>)
    16a8:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    16aa:	6823      	ldr	r3, [r4, #0]
    16ac:	2202      	movs	r2, #2
    16ae:	4313      	orrs	r3, r2
    16b0:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    16b2:	6828      	ldr	r0, [r5, #0]
    16b4:	4b20      	ldr	r3, [pc, #128]	; (1738 <enableI2CModule+0x190>)
    16b6:	4798      	blx	r3
    16b8:	231f      	movs	r3, #31
    16ba:	4018      	ands	r0, r3
    16bc:	3b1e      	subs	r3, #30
    16be:	4083      	lsls	r3, r0
    16c0:	4a1e      	ldr	r2, [pc, #120]	; (173c <enableI2CModule+0x194>)
    16c2:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    16c4:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    16c6:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    16c8:	2110      	movs	r1, #16
    16ca:	8b62      	ldrh	r2, [r4, #26]
    16cc:	420a      	tst	r2, r1
    16ce:	d104      	bne.n	16da <enableI2CModule+0x132>
		timeout_counter++;
    16d0:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    16d2:	4283      	cmp	r3, r0
    16d4:	d3f9      	bcc.n	16ca <enableI2CModule+0x122>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    16d6:	2310      	movs	r3, #16
    16d8:	8363      	strh	r3, [r4, #26]
    16da:	4a1b      	ldr	r2, [pc, #108]	; (1748 <enableI2CModule+0x1a0>)
    16dc:	7e53      	ldrb	r3, [r2, #25]
    16de:	2101      	movs	r1, #1
    16e0:	430b      	orrs	r3, r1
    16e2:	7653      	strb	r3, [r2, #25]
    16e4:	e78d      	b.n	1602 <enableI2CModule+0x5a>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16e6:	4d19      	ldr	r5, [pc, #100]	; (174c <enableI2CModule+0x1a4>)
    16e8:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    16ea:	0028      	movs	r0, r5
    16ec:	4b11      	ldr	r3, [pc, #68]	; (1734 <enableI2CModule+0x18c>)
    16ee:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    16f0:	6823      	ldr	r3, [r4, #0]
    16f2:	2202      	movs	r2, #2
    16f4:	4313      	orrs	r3, r2
    16f6:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    16f8:	6828      	ldr	r0, [r5, #0]
    16fa:	4b0f      	ldr	r3, [pc, #60]	; (1738 <enableI2CModule+0x190>)
    16fc:	4798      	blx	r3
    16fe:	231f      	movs	r3, #31
    1700:	4018      	ands	r0, r3
    1702:	3b1e      	subs	r3, #30
    1704:	4083      	lsls	r3, r0
    1706:	4a0d      	ldr	r2, [pc, #52]	; (173c <enableI2CModule+0x194>)
    1708:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    170a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    170c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    170e:	2110      	movs	r1, #16
    1710:	8b62      	ldrh	r2, [r4, #26]
    1712:	420a      	tst	r2, r1
    1714:	d104      	bne.n	1720 <enableI2CModule+0x178>
		timeout_counter++;
    1716:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1718:	4283      	cmp	r3, r0
    171a:	d3f9      	bcc.n	1710 <enableI2CModule+0x168>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    171c:	2310      	movs	r3, #16
    171e:	8363      	strh	r3, [r4, #26]
    1720:	4a0a      	ldr	r2, [pc, #40]	; (174c <enableI2CModule+0x1a4>)
    1722:	7e53      	ldrb	r3, [r2, #25]
    1724:	2101      	movs	r1, #1
    1726:	430b      	orrs	r3, r1
    1728:	7653      	strb	r3, [r2, #25]
    172a:	e76a      	b.n	1602 <enableI2CModule+0x5a>
    172c:	000058b4 	.word	0x000058b4
    1730:	20000e80 	.word	0x20000e80
    1734:	00001065 	.word	0x00001065
    1738:	00002519 	.word	0x00002519
    173c:	e000e100 	.word	0xe000e100
    1740:	20000e40 	.word	0x20000e40
    1744:	20000f10 	.word	0x20000f10
    1748:	20000ee8 	.word	0x20000ee8
    174c:	20000ec0 	.word	0x20000ec0

00001750 <disableI2CModule>:

void disableI2CModule(uint8_t port)
{
    1750:	b570      	push	{r4, r5, r6, lr}

	switch(port)
    1752:	2805      	cmp	r0, #5
    1754:	d81d      	bhi.n	1792 <disableI2CModule+0x42>
    1756:	0080      	lsls	r0, r0, #2
    1758:	4b44      	ldr	r3, [pc, #272]	; (186c <disableI2CModule+0x11c>)
    175a:	581b      	ldr	r3, [r3, r0]
    175c:	469f      	mov	pc, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    175e:	4d44      	ldr	r5, [pc, #272]	; (1870 <disableI2CModule+0x120>)
    1760:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1762:	0020      	movs	r0, r4
    1764:	4b43      	ldr	r3, [pc, #268]	; (1874 <disableI2CModule+0x124>)
    1766:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1768:	231f      	movs	r3, #31
    176a:	4018      	ands	r0, r3
    176c:	2601      	movs	r6, #1
    176e:	0031      	movs	r1, r6
    1770:	4081      	lsls	r1, r0
    1772:	3361      	adds	r3, #97	; 0x61
    1774:	4a40      	ldr	r2, [pc, #256]	; (1878 <disableI2CModule+0x128>)
    1776:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    1778:	0028      	movs	r0, r5
    177a:	4b40      	ldr	r3, [pc, #256]	; (187c <disableI2CModule+0x12c>)
    177c:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    177e:	2383      	movs	r3, #131	; 0x83
    1780:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1782:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1784:	6823      	ldr	r3, [r4, #0]
    1786:	2202      	movs	r2, #2
    1788:	4393      	bics	r3, r2
    178a:	6023      	str	r3, [r4, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as disabled */
	module->enabled_callback &= ~(1 << callback_type);
    178c:	7e6b      	ldrb	r3, [r5, #25]
    178e:	43b3      	bics	r3, r6
    1790:	766b      	strb	r3, [r5, #25]
		
		default:
			break;
	}
	
}
    1792:	bd70      	pop	{r4, r5, r6, pc}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1794:	4d3a      	ldr	r5, [pc, #232]	; (1880 <disableI2CModule+0x130>)
    1796:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1798:	0020      	movs	r0, r4
    179a:	4b36      	ldr	r3, [pc, #216]	; (1874 <disableI2CModule+0x124>)
    179c:	4798      	blx	r3
    179e:	231f      	movs	r3, #31
    17a0:	4018      	ands	r0, r3
    17a2:	2601      	movs	r6, #1
    17a4:	0031      	movs	r1, r6
    17a6:	4081      	lsls	r1, r0
    17a8:	3361      	adds	r3, #97	; 0x61
    17aa:	4a33      	ldr	r2, [pc, #204]	; (1878 <disableI2CModule+0x128>)
    17ac:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    17ae:	0028      	movs	r0, r5
    17b0:	4b32      	ldr	r3, [pc, #200]	; (187c <disableI2CModule+0x12c>)
    17b2:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    17b4:	2383      	movs	r3, #131	; 0x83
    17b6:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    17b8:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    17ba:	6823      	ldr	r3, [r4, #0]
    17bc:	2202      	movs	r2, #2
    17be:	4393      	bics	r3, r2
    17c0:	6023      	str	r3, [r4, #0]
    17c2:	7e6b      	ldrb	r3, [r5, #25]
    17c4:	43b3      	bics	r3, r6
    17c6:	766b      	strb	r3, [r5, #25]
    17c8:	e7e3      	b.n	1792 <disableI2CModule+0x42>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    17ca:	4d2e      	ldr	r5, [pc, #184]	; (1884 <disableI2CModule+0x134>)
    17cc:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    17ce:	0020      	movs	r0, r4
    17d0:	4b28      	ldr	r3, [pc, #160]	; (1874 <disableI2CModule+0x124>)
    17d2:	4798      	blx	r3
    17d4:	231f      	movs	r3, #31
    17d6:	4018      	ands	r0, r3
    17d8:	2601      	movs	r6, #1
    17da:	0031      	movs	r1, r6
    17dc:	4081      	lsls	r1, r0
    17de:	3361      	adds	r3, #97	; 0x61
    17e0:	4a25      	ldr	r2, [pc, #148]	; (1878 <disableI2CModule+0x128>)
    17e2:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    17e4:	0028      	movs	r0, r5
    17e6:	4b25      	ldr	r3, [pc, #148]	; (187c <disableI2CModule+0x12c>)
    17e8:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    17ea:	2383      	movs	r3, #131	; 0x83
    17ec:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    17ee:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    17f0:	6823      	ldr	r3, [r4, #0]
    17f2:	2202      	movs	r2, #2
    17f4:	4393      	bics	r3, r2
    17f6:	6023      	str	r3, [r4, #0]
    17f8:	7e6b      	ldrb	r3, [r5, #25]
    17fa:	43b3      	bics	r3, r6
    17fc:	766b      	strb	r3, [r5, #25]
    17fe:	e7c8      	b.n	1792 <disableI2CModule+0x42>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1800:	4d21      	ldr	r5, [pc, #132]	; (1888 <disableI2CModule+0x138>)
    1802:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1804:	0020      	movs	r0, r4
    1806:	4b1b      	ldr	r3, [pc, #108]	; (1874 <disableI2CModule+0x124>)
    1808:	4798      	blx	r3
    180a:	231f      	movs	r3, #31
    180c:	4018      	ands	r0, r3
    180e:	2601      	movs	r6, #1
    1810:	0031      	movs	r1, r6
    1812:	4081      	lsls	r1, r0
    1814:	3361      	adds	r3, #97	; 0x61
    1816:	4a18      	ldr	r2, [pc, #96]	; (1878 <disableI2CModule+0x128>)
    1818:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    181a:	0028      	movs	r0, r5
    181c:	4b17      	ldr	r3, [pc, #92]	; (187c <disableI2CModule+0x12c>)
    181e:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1820:	2383      	movs	r3, #131	; 0x83
    1822:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1824:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1826:	6823      	ldr	r3, [r4, #0]
    1828:	2202      	movs	r2, #2
    182a:	4393      	bics	r3, r2
    182c:	6023      	str	r3, [r4, #0]
    182e:	7e6b      	ldrb	r3, [r5, #25]
    1830:	43b3      	bics	r3, r6
    1832:	766b      	strb	r3, [r5, #25]
    1834:	e7ad      	b.n	1792 <disableI2CModule+0x42>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1836:	4d15      	ldr	r5, [pc, #84]	; (188c <disableI2CModule+0x13c>)
    1838:	682c      	ldr	r4, [r5, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    183a:	0020      	movs	r0, r4
    183c:	4b0d      	ldr	r3, [pc, #52]	; (1874 <disableI2CModule+0x124>)
    183e:	4798      	blx	r3
    1840:	231f      	movs	r3, #31
    1842:	4018      	ands	r0, r3
    1844:	2601      	movs	r6, #1
    1846:	0031      	movs	r1, r6
    1848:	4081      	lsls	r1, r0
    184a:	3361      	adds	r3, #97	; 0x61
    184c:	4a0a      	ldr	r2, [pc, #40]	; (1878 <disableI2CModule+0x128>)
    184e:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    1850:	0028      	movs	r0, r5
    1852:	4b0a      	ldr	r3, [pc, #40]	; (187c <disableI2CModule+0x12c>)
    1854:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1856:	2383      	movs	r3, #131	; 0x83
    1858:	7523      	strb	r3, [r4, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    185a:	7623      	strb	r3, [r4, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    185c:	6823      	ldr	r3, [r4, #0]
    185e:	2202      	movs	r2, #2
    1860:	4393      	bics	r3, r2
    1862:	6023      	str	r3, [r4, #0]
    1864:	7e6b      	ldrb	r3, [r5, #25]
    1866:	43b3      	bics	r3, r6
    1868:	766b      	strb	r3, [r5, #25]
    186a:	e792      	b.n	1792 <disableI2CModule+0x42>
    186c:	000058cc 	.word	0x000058cc
    1870:	20000e80 	.word	0x20000e80
    1874:	00002519 	.word	0x00002519
    1878:	e000e100 	.word	0xe000e100
    187c:	00001065 	.word	0x00001065
    1880:	20000e40 	.word	0x20000e40
    1884:	20000f10 	.word	0x20000f10
    1888:	20000ee8 	.word	0x20000ee8
    188c:	20000ec0 	.word	0x20000ec0

00001890 <checkSendInputs>:
extern volatile struct inputPorts  inputPort[4];



void checkSendInputs()
{
    1890:	b5f0      	push	{r4, r5, r6, r7, lr}
    1892:	46ce      	mov	lr, r9
    1894:	4647      	mov	r7, r8
    1896:	b580      	push	{r7, lr}
    1898:	b085      	sub	sp, #20
	uint8_t i =0;
	uint8_t temp =0;
	static uint8_t rd_buffer[20] ;
	
	if(readySendI2CReadInput == true)
    189a:	4b25      	ldr	r3, [pc, #148]	; (1930 <checkSendInputs+0xa0>)
    189c:	781b      	ldrb	r3, [r3, #0]
    189e:	2b00      	cmp	r3, #0
    18a0:	d041      	beq.n	1926 <checkSendInputs+0x96>
	{
		readySendI2CReadInput = false;
    18a2:	2200      	movs	r2, #0
    18a4:	4b22      	ldr	r3, [pc, #136]	; (1930 <checkSendInputs+0xa0>)
    18a6:	701a      	strb	r2, [r3, #0]
    18a8:	4d22      	ldr	r5, [pc, #136]	; (1934 <checkSendInputs+0xa4>)
    18aa:	2400      	movs	r4, #0
		for(i=0;i<NO_SENSORS;i++)
		{
			if(inputPort[i].currentState != NOTHINGCONNECTED)
    18ac:	4e22      	ldr	r6, [pc, #136]	; (1938 <checkSendInputs+0xa8>)
    18ae:	e003      	b.n	18b8 <checkSendInputs+0x28>
    18b0:	3401      	adds	r4, #1
    18b2:	3505      	adds	r5, #5
		for(i=0;i<NO_SENSORS;i++)
    18b4:	2c03      	cmp	r4, #3
    18b6:	d036      	beq.n	1926 <checkSendInputs+0x96>
			if(inputPort[i].currentState != NOTHINGCONNECTED)
    18b8:	00e3      	lsls	r3, r4, #3
    18ba:	18f3      	adds	r3, r6, r3
    18bc:	785b      	ldrb	r3, [r3, #1]
    18be:	2b00      	cmp	r3, #0
    18c0:	d0f6      	beq.n	18b0 <checkSendInputs+0x20>
			{
				switch(inputPort[i].currentState)
    18c2:	00e3      	lsls	r3, r4, #3
    18c4:	491c      	ldr	r1, [pc, #112]	; (1938 <checkSendInputs+0xa8>)
    18c6:	468c      	mov	ip, r1
    18c8:	4463      	add	r3, ip
    18ca:	785b      	ldrb	r3, [r3, #1]
    18cc:	2b1b      	cmp	r3, #27
    18ce:	d1ef      	bne.n	18b0 <checkSendInputs+0x20>
    18d0:	1c63      	adds	r3, r4, #1
    18d2:	b2db      	uxtb	r3, r3
    18d4:	4698      	mov	r8, r3
				{
					case INPUT_PLACEVALUE:
					
						sensorOutputs[4 + i*5]		=	 i + 1;
    18d6:	712b      	strb	r3, [r5, #4]
						struct i2c_master_packet rd_packet = {
							.address		 = inputPort[i].address,
    18d8:	00e2      	lsls	r2, r4, #3
    18da:	5c53      	ldrb	r3, [r2, r1]
						struct i2c_master_packet rd_packet = {
    18dc:	af01      	add	r7, sp, #4
    18de:	803b      	strh	r3, [r7, #0]
							.data_length	 = inputPort[i].readDataLength,
    18e0:	4462      	add	r2, ip
    18e2:	78d3      	ldrb	r3, [r2, #3]
						struct i2c_master_packet rd_packet = {
    18e4:	807b      	strh	r3, [r7, #2]
    18e6:	4b15      	ldr	r3, [pc, #84]	; (193c <checkSendInputs+0xac>)
    18e8:	4699      	mov	r9, r3
    18ea:	9302      	str	r3, [sp, #8]
    18ec:	2300      	movs	r3, #0
    18ee:	723b      	strb	r3, [r7, #8]
    18f0:	727b      	strb	r3, [r7, #9]
    18f2:	72bb      	strb	r3, [r7, #10]
							.data			 = rd_buffer,
							.ten_bit_address = false,
							.high_speed      = false,
							.hs_master_code  = 0x0,
						};
					    selectLineLow(i+1);
    18f4:	4640      	mov	r0, r8
    18f6:	4b12      	ldr	r3, [pc, #72]	; (1940 <checkSendInputs+0xb0>)
    18f8:	4798      	blx	r3
						I2CRead(SENSORS , &rd_packet);
    18fa:	0039      	movs	r1, r7
    18fc:	2005      	movs	r0, #5
    18fe:	4b11      	ldr	r3, [pc, #68]	; (1944 <checkSendInputs+0xb4>)
    1900:	4798      	blx	r3
						selectLineDisable(i+1);
    1902:	4640      	mov	r0, r8
    1904:	4b10      	ldr	r3, [pc, #64]	; (1948 <checkSendInputs+0xb8>)
    1906:	4798      	blx	r3
						sensorOutputs[4 + i*5]		=	 i + 1;
    1908:	4643      	mov	r3, r8
    190a:	712b      	strb	r3, [r5, #4]
						sensorOutputs[4 + i*5 + 1] =     rd_buffer[0] ;
    190c:	464b      	mov	r3, r9
    190e:	781b      	ldrb	r3, [r3, #0]
    1910:	716b      	strb	r3, [r5, #5]
						sensorOutputs[4 + i*5 + 2] = 	 rd_buffer[1] ;
    1912:	464b      	mov	r3, r9
    1914:	785b      	ldrb	r3, [r3, #1]
    1916:	71ab      	strb	r3, [r5, #6]
						sensorOutputs[4 + i*5 + 3] =     rd_buffer[2] ;
    1918:	464b      	mov	r3, r9
    191a:	789b      	ldrb	r3, [r3, #2]
    191c:	71eb      	strb	r3, [r5, #7]
						sensorOutputs[4 + i*5 + 4] = 	 rd_buffer[3] ;
    191e:	464b      	mov	r3, r9
    1920:	78db      	ldrb	r3, [r3, #3]
    1922:	722b      	strb	r3, [r5, #8]
					
						break;
    1924:	e7c4      	b.n	18b0 <checkSendInputs+0x20>
					break;
				}
			}
		}
	}
}
    1926:	b005      	add	sp, #20
    1928:	bc0c      	pop	{r2, r3}
    192a:	4690      	mov	r8, r2
    192c:	4699      	mov	r9, r3
    192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1930:	20000e15 	.word	0x20000e15
    1934:	20000fc8 	.word	0x20000fc8
    1938:	20001144 	.word	0x20001144
    193c:	200000ec 	.word	0x200000ec
    1940:	00000dd9 	.word	0x00000dd9
    1944:	000010cd 	.word	0x000010cd
    1948:	00000e39 	.word	0x00000e39

0000194c <checkSendOutputs>:
static bool timerOutput = false;

extern volatile struct outputPorts  outputPort[4];

void checkSendOutputs()
{
    194c:	b5f0      	push	{r4, r5, r6, r7, lr}
    194e:	46d6      	mov	lr, sl
    1950:	464f      	mov	r7, r9
    1952:	b580      	push	{r7, lr}
    1954:	b085      	sub	sp, #20
	uint8_t i =0;
	uint8_t temp =0;
	static uint8_t rd_buffer[20] ;
	
	if(readySendI2CRead == true)
    1956:	4b20      	ldr	r3, [pc, #128]	; (19d8 <checkSendOutputs+0x8c>)
    1958:	781b      	ldrb	r3, [r3, #0]
    195a:	2b00      	cmp	r3, #0
    195c:	d037      	beq.n	19ce <checkSendOutputs+0x82>
	{
		readySendI2CRead = false;
    195e:	2200      	movs	r2, #0
    1960:	4b1d      	ldr	r3, [pc, #116]	; (19d8 <checkSendOutputs+0x8c>)
    1962:	701a      	strb	r2, [r3, #0]
    1964:	4f1d      	ldr	r7, [pc, #116]	; (19dc <checkSendOutputs+0x90>)
    1966:	2401      	movs	r4, #1
    1968:	2600      	movs	r6, #0
		for(i=0;i<NO_OUTPUTS;i++)
		{
			if(outputPort[i].currentState != NOTHINGCONNECTED)
    196a:	4d1d      	ldr	r5, [pc, #116]	; (19e0 <checkSendOutputs+0x94>)
    196c:	e005      	b.n	197a <checkSendOutputs+0x2e>
    196e:	3601      	adds	r6, #1
    1970:	3401      	adds	r4, #1
    1972:	b2e4      	uxtb	r4, r4
    1974:	3705      	adds	r7, #5
		for(i=0;i<NO_OUTPUTS;i++)
    1976:	2c05      	cmp	r4, #5
    1978:	d029      	beq.n	19ce <checkSendOutputs+0x82>
			if(outputPort[i].currentState != NOTHINGCONNECTED)
    197a:	00f3      	lsls	r3, r6, #3
    197c:	18eb      	adds	r3, r5, r3
    197e:	785b      	ldrb	r3, [r3, #1]
    1980:	2b00      	cmp	r3, #0
    1982:	d0f4      	beq.n	196e <checkSendOutputs+0x22>
			{
				switch(outputPort[i].currentState)
    1984:	00f3      	lsls	r3, r6, #3
    1986:	4916      	ldr	r1, [pc, #88]	; (19e0 <checkSendOutputs+0x94>)
    1988:	468c      	mov	ip, r1
    198a:	4463      	add	r3, ip
    198c:	785b      	ldrb	r3, [r3, #1]
    198e:	2b03      	cmp	r3, #3
    1990:	d1ed      	bne.n	196e <checkSendOutputs+0x22>
					case OUTPUT_LEDMATRIX:
						
						//Read the dial values regularly 
						//if(i == 3)
						//{
						sensorOutputs[20 + i*5]		=	 i + 4;
    1992:	1ce3      	adds	r3, r4, #3
    1994:	b2db      	uxtb	r3, r3
    1996:	4699      	mov	r9, r3
    1998:	753b      	strb	r3, [r7, #20]
						struct i2c_master_packet rd_packet = {
							.address		 = outputPort[i].address, 
    199a:	00f2      	lsls	r2, r6, #3
    199c:	5c53      	ldrb	r3, [r2, r1]
						struct i2c_master_packet rd_packet = {
    199e:	a901      	add	r1, sp, #4
    19a0:	800b      	strh	r3, [r1, #0]
							.data_length	 = outputPort[i].readDataLength,
    19a2:	4462      	add	r2, ip
    19a4:	78d3      	ldrb	r3, [r2, #3]
						struct i2c_master_packet rd_packet = {
    19a6:	804b      	strh	r3, [r1, #2]
    19a8:	4b0e      	ldr	r3, [pc, #56]	; (19e4 <checkSendOutputs+0x98>)
    19aa:	469a      	mov	sl, r3
    19ac:	604b      	str	r3, [r1, #4]
    19ae:	2300      	movs	r3, #0
    19b0:	720b      	strb	r3, [r1, #8]
    19b2:	724b      	strb	r3, [r1, #9]
    19b4:	728b      	strb	r3, [r1, #10]
							.hs_master_code  = 0x0,
						};
							
						//outputPort[i].I2CStatus =	BUSY_MODE; 
						
						I2CRead((i+1) , &rd_packet);
    19b6:	0020      	movs	r0, r4
    19b8:	4b0b      	ldr	r3, [pc, #44]	; (19e8 <checkSendOutputs+0x9c>)
    19ba:	4798      	blx	r3
						sensorOutputs[20 + i*5]		=	 i + 4;
    19bc:	464b      	mov	r3, r9
    19be:	753b      	strb	r3, [r7, #20]
						sensorOutputs[20 + i*5 + 1] =    rd_buffer[0] ;
    19c0:	4653      	mov	r3, sl
    19c2:	781b      	ldrb	r3, [r3, #0]
    19c4:	757b      	strb	r3, [r7, #21]
						sensorOutputs[20 + i*5 + 2] = 	 rd_buffer[1] ;
    19c6:	4653      	mov	r3, sl
    19c8:	785b      	ldrb	r3, [r3, #1]
    19ca:	75bb      	strb	r3, [r7, #22]
						//delay_cycles_ms(3);
						//sensor
						//read the sensor values 
						//}
						
						break;
    19cc:	e7cf      	b.n	196e <checkSendOutputs+0x22>
						break;
				}
			}
		}
	}
}
    19ce:	b005      	add	sp, #20
    19d0:	bc0c      	pop	{r2, r3}
    19d2:	4691      	mov	r9, r2
    19d4:	469a      	mov	sl, r3
    19d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19d8:	20000e14 	.word	0x20000e14
    19dc:	20000fc8 	.word	0x20000fc8
    19e0:	20001124 	.word	0x20001124
    19e4:	20000100 	.word	0x20000100
    19e8:	000010cd 	.word	0x000010cd

000019ec <sendInfoCallback>:
}

void sendInfoCallback()
{
	static uint8_t tempCount = 0;
	tempCount++;
    19ec:	4b09      	ldr	r3, [pc, #36]	; (1a14 <sendInfoCallback+0x28>)
    19ee:	781b      	ldrb	r3, [r3, #0]
    19f0:	3301      	adds	r3, #1
    19f2:	b2db      	uxtb	r3, r3
	if(tempCount>1)
    19f4:	2b01      	cmp	r3, #1
    19f6:	d90a      	bls.n	1a0e <sendInfoCallback+0x22>
	{
		tempCount = 0;
    19f8:	2200      	movs	r2, #0
    19fa:	4b06      	ldr	r3, [pc, #24]	; (1a14 <sendInfoCallback+0x28>)
    19fc:	701a      	strb	r2, [r3, #0]
		readySendData = true;
    19fe:	2301      	movs	r3, #1
    1a00:	4a05      	ldr	r2, [pc, #20]	; (1a18 <sendInfoCallback+0x2c>)
    1a02:	7013      	strb	r3, [r2, #0]
		readySendI2CRead = true;
    1a04:	4a05      	ldr	r2, [pc, #20]	; (1a1c <sendInfoCallback+0x30>)
    1a06:	7013      	strb	r3, [r2, #0]
		readySendI2CReadInput = true;
    1a08:	4a05      	ldr	r2, [pc, #20]	; (1a20 <sendInfoCallback+0x34>)
    1a0a:	7013      	strb	r3, [r2, #0]
	}
	
	//usart_write_buffer_wait(&usart_instance, transmit_value ,VERSION_SET_LEN);
}
    1a0c:	4770      	bx	lr
	tempCount++;
    1a0e:	4a01      	ldr	r2, [pc, #4]	; (1a14 <sendInfoCallback+0x28>)
    1a10:	7013      	strb	r3, [r2, #0]
    1a12:	e7fb      	b.n	1a0c <sendInfoCallback+0x20>
    1a14:	20000128 	.word	0x20000128
    1a18:	20000e13 	.word	0x20000e13
    1a1c:	20000e14 	.word	0x20000e14
    1a20:	20000e15 	.word	0x20000e15

00001a24 <configureTimer>:
{
    1a24:	b510      	push	{r4, lr}
    1a26:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1a28:	aa01      	add	r2, sp, #4
    1a2a:	2300      	movs	r3, #0
    1a2c:	2100      	movs	r1, #0
    1a2e:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1a30:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1a32:	2000      	movs	r0, #0
    1a34:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1a36:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1a38:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1a3a:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    1a3c:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1a3e:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1a40:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1a42:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1a44:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1a46:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1a48:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1a4a:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1a4c:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1a4e:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0]		=		true;
    1a50:	3301      	adds	r3, #1
    1a52:	72d3      	strb	r3, [r2, #11]
	config_tc.counter_size						=		TC_COUNTER_SIZE_8BIT; //8
    1a54:	3303      	adds	r3, #3
    1a56:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source						=		GCLK_GENERATOR_3;
    1a58:	3b01      	subs	r3, #1
    1a5a:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler					=		TC_CLOCK_PRESCALER_DIV1024; //1024
    1a5c:	23e0      	movs	r3, #224	; 0xe0
    1a5e:	00db      	lsls	r3, r3, #3
    1a60:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period				=		0xFF;
    1a62:	21ff      	movs	r1, #255	; 0xff
    1a64:	2329      	movs	r3, #41	; 0x29
    1a66:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_encoder_capture, SEND_TIMER , &config_tc);
    1a68:	4c07      	ldr	r4, [pc, #28]	; (1a88 <configureTimer+0x64>)
    1a6a:	4908      	ldr	r1, [pc, #32]	; (1a8c <configureTimer+0x68>)
    1a6c:	0020      	movs	r0, r4
    1a6e:	4b08      	ldr	r3, [pc, #32]	; (1a90 <configureTimer+0x6c>)
    1a70:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a72:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a74:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1a76:	b25b      	sxtb	r3, r3
    1a78:	2b00      	cmp	r3, #0
    1a7a:	dbfb      	blt.n	1a74 <configureTimer+0x50>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1a7c:	8813      	ldrh	r3, [r2, #0]
    1a7e:	2102      	movs	r1, #2
    1a80:	430b      	orrs	r3, r1
    1a82:	8013      	strh	r3, [r2, #0]
}
    1a84:	b00e      	add	sp, #56	; 0x38
    1a86:	bd10      	pop	{r4, pc}
    1a88:	20000f6c 	.word	0x20000f6c
    1a8c:	42003c00 	.word	0x42003c00
    1a90:	00000b7d 	.word	0x00000b7d

00001a94 <arrangeSensorData>:
{
    1a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a96:	2300      	movs	r3, #0
		sendSensorOutputs[i]	= sensorOutputs[i];
    1a98:	4921      	ldr	r1, [pc, #132]	; (1b20 <arrangeSensorData+0x8c>)
    1a9a:	5cca      	ldrb	r2, [r1, r3]
    1a9c:	54c2      	strb	r2, [r0, r3]
    1a9e:	3301      	adds	r3, #1
	for(i=0;i<4;i++)
    1aa0:	2b04      	cmp	r3, #4
    1aa2:	d1fa      	bne.n	1a9a <arrangeSensorData+0x6>
    1aa4:	2400      	movs	r4, #0
    1aa6:	2500      	movs	r5, #0
		if(inputsConnected[i] != NOTHINGCONNECTED )
    1aa8:	4e1e      	ldr	r6, [pc, #120]	; (1b24 <arrangeSensorData+0x90>)
    1aaa:	e004      	b.n	1ab6 <arrangeSensorData+0x22>
			countSensorOutputs++;
    1aac:	3501      	adds	r5, #1
    1aae:	b2ed      	uxtb	r5, r5
    1ab0:	3401      	adds	r4, #1
	for(i=0;i<3;i++)
    1ab2:	2c03      	cmp	r4, #3
    1ab4:	d014      	beq.n	1ae0 <arrangeSensorData+0x4c>
		if(inputsConnected[i] != NOTHINGCONNECTED )
    1ab6:	5d33      	ldrb	r3, [r6, r4]
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d0f9      	beq.n	1ab0 <arrangeSensorData+0x1c>
    1abc:	00a3      	lsls	r3, r4, #2
    1abe:	191b      	adds	r3, r3, r4
    1ac0:	3304      	adds	r3, #4
    1ac2:	4a17      	ldr	r2, [pc, #92]	; (1b20 <arrangeSensorData+0x8c>)
    1ac4:	4694      	mov	ip, r2
    1ac6:	4463      	add	r3, ip
				sendSensorOutputs[countSensorOutputs*5 + j + 4] = sensorOutputs[5*i + 4+j];
    1ac8:	00a9      	lsls	r1, r5, #2
    1aca:	1949      	adds	r1, r1, r5
    1acc:	1842      	adds	r2, r0, r1
    1ace:	3105      	adds	r1, #5
    1ad0:	1841      	adds	r1, r0, r1
    1ad2:	781f      	ldrb	r7, [r3, #0]
    1ad4:	7117      	strb	r7, [r2, #4]
    1ad6:	3301      	adds	r3, #1
    1ad8:	3201      	adds	r2, #1
			for(j=0;j<5;j++)
    1ada:	428a      	cmp	r2, r1
    1adc:	d1f9      	bne.n	1ad2 <arrangeSensorData+0x3e>
    1ade:	e7e5      	b.n	1aac <arrangeSensorData+0x18>
    1ae0:	2300      	movs	r3, #0
		if(outputsConnected[i] != NOTHINGCONNECTED )
    1ae2:	4c11      	ldr	r4, [pc, #68]	; (1b28 <arrangeSensorData+0x94>)
    1ae4:	e004      	b.n	1af0 <arrangeSensorData+0x5c>
					countSensorOutputs++;
    1ae6:	3501      	adds	r5, #1
    1ae8:	b2ed      	uxtb	r5, r5
    1aea:	3301      	adds	r3, #1
	for(i=0;i<4;i++)
    1aec:	2b04      	cmp	r3, #4
    1aee:	d016      	beq.n	1b1e <arrangeSensorData+0x8a>
			if(outputsConnected[i] == OUTPUT_LEDMATRIX)
    1af0:	5ce2      	ldrb	r2, [r4, r3]
    1af2:	2a03      	cmp	r2, #3
    1af4:	d1f9      	bne.n	1aea <arrangeSensorData+0x56>
				if(countSensorOutputs < 3)
    1af6:	2d02      	cmp	r5, #2
    1af8:	d8f7      	bhi.n	1aea <arrangeSensorData+0x56>
    1afa:	009a      	lsls	r2, r3, #2
    1afc:	18d2      	adds	r2, r2, r3
    1afe:	3214      	adds	r2, #20
    1b00:	4907      	ldr	r1, [pc, #28]	; (1b20 <arrangeSensorData+0x8c>)
    1b02:	468c      	mov	ip, r1
    1b04:	4462      	add	r2, ip
						sendSensorOutputs[countSensorOutputs*5 + j + 4] = sensorOutputs[5*i + 20+j];
    1b06:	00ae      	lsls	r6, r5, #2
    1b08:	1976      	adds	r6, r6, r5
    1b0a:	1981      	adds	r1, r0, r6
    1b0c:	3605      	adds	r6, #5
    1b0e:	1986      	adds	r6, r0, r6
    1b10:	7817      	ldrb	r7, [r2, #0]
    1b12:	710f      	strb	r7, [r1, #4]
    1b14:	3201      	adds	r2, #1
    1b16:	3101      	adds	r1, #1
					for(j=0;j<5;j++)
    1b18:	428e      	cmp	r6, r1
    1b1a:	d1f9      	bne.n	1b10 <arrangeSensorData+0x7c>
    1b1c:	e7e3      	b.n	1ae6 <arrangeSensorData+0x52>
}
    1b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b20:	20000fc8 	.word	0x20000fc8
    1b24:	20000e10 	.word	0x20000e10
    1b28:	20000fc4 	.word	0x20000fc4

00001b2c <sendDataBLE>:
{
    1b2c:	b510      	push	{r4, lr}
	if(readySendData)
    1b2e:	4b09      	ldr	r3, [pc, #36]	; (1b54 <sendDataBLE+0x28>)
    1b30:	781b      	ldrb	r3, [r3, #0]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d100      	bne.n	1b38 <sendDataBLE+0xc>
}
    1b36:	bd10      	pop	{r4, pc}
		readySendData = false;
    1b38:	2200      	movs	r2, #0
    1b3a:	4b06      	ldr	r3, [pc, #24]	; (1b54 <sendDataBLE+0x28>)
    1b3c:	701a      	strb	r2, [r3, #0]
		arrangeSensorData(sendSensorOutputs);
    1b3e:	4c06      	ldr	r4, [pc, #24]	; (1b58 <sendDataBLE+0x2c>)
    1b40:	0020      	movs	r0, r4
    1b42:	4b06      	ldr	r3, [pc, #24]	; (1b5c <sendDataBLE+0x30>)
    1b44:	4798      	blx	r3
		usart_write_buffer_wait(&usart_instance, sendSensorOutputs, LENGTH_SENSORS_DATA );
    1b46:	2214      	movs	r2, #20
    1b48:	0021      	movs	r1, r4
    1b4a:	4805      	ldr	r0, [pc, #20]	; (1b60 <sendDataBLE+0x34>)
    1b4c:	4b05      	ldr	r3, [pc, #20]	; (1b64 <sendDataBLE+0x38>)
    1b4e:	4798      	blx	r3
}
    1b50:	e7f1      	b.n	1b36 <sendDataBLE+0xa>
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	20000e13 	.word	0x20000e13
    1b58:	20000114 	.word	0x20000114
    1b5c:	00001a95 	.word	0x00001a95
    1b60:	20000f38 	.word	0x20000f38
    1b64:	00002919 	.word	0x00002919

00001b68 <configureTimerCallbacks>:


void configureTimerCallbacks()
{
    1b68:	b510      	push	{r4, lr}
	tc_register_callback(&tc_encoder_capture, sendInfoCallback,TC_CALLBACK_OVERFLOW);
    1b6a:	4c0c      	ldr	r4, [pc, #48]	; (1b9c <configureTimerCallbacks+0x34>)
    1b6c:	2200      	movs	r2, #0
    1b6e:	490c      	ldr	r1, [pc, #48]	; (1ba0 <configureTimerCallbacks+0x38>)
    1b70:	0020      	movs	r0, r4
    1b72:	4b0c      	ldr	r3, [pc, #48]	; (1ba4 <configureTimerCallbacks+0x3c>)
    1b74:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1b76:	6820      	ldr	r0, [r4, #0]
    1b78:	4b0b      	ldr	r3, [pc, #44]	; (1ba8 <configureTimerCallbacks+0x40>)
    1b7a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1b7c:	4b0b      	ldr	r3, [pc, #44]	; (1bac <configureTimerCallbacks+0x44>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b7e:	5c1a      	ldrb	r2, [r3, r0]
    1b80:	231f      	movs	r3, #31
    1b82:	4013      	ands	r3, r2
    1b84:	2201      	movs	r2, #1
    1b86:	0011      	movs	r1, r2
    1b88:	4099      	lsls	r1, r3
    1b8a:	4b09      	ldr	r3, [pc, #36]	; (1bb0 <configureTimerCallbacks+0x48>)
    1b8c:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1b8e:	7e63      	ldrb	r3, [r4, #25]
    1b90:	2101      	movs	r1, #1
    1b92:	430b      	orrs	r3, r1
    1b94:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1b96:	6823      	ldr	r3, [r4, #0]
    1b98:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_encoder_capture, TC_CALLBACK_OVERFLOW);
}
    1b9a:	bd10      	pop	{r4, pc}
    1b9c:	20000f6c 	.word	0x20000f6c
    1ba0:	000019ed 	.word	0x000019ed
    1ba4:	00000a59 	.word	0x00000a59
    1ba8:	00000b41 	.word	0x00000b41
    1bac:	000058e4 	.word	0x000058e4
    1bb0:	e000e100 	.word	0xe000e100

00001bb4 <configureSendInfo>:


//Send data to BLE every 60msec so that notifications can be sent in a timely manner
void configureSendInfo()
{
    1bb4:	b510      	push	{r4, lr}
	configureTimer();
    1bb6:	4b02      	ldr	r3, [pc, #8]	; (1bc0 <configureSendInfo+0xc>)
    1bb8:	4798      	blx	r3
	configureTimerCallbacks();
    1bba:	4b02      	ldr	r3, [pc, #8]	; (1bc4 <configureSendInfo+0x10>)
    1bbc:	4798      	blx	r3
    1bbe:	bd10      	pop	{r4, pc}
    1bc0:	00001a25 	.word	0x00001a25
    1bc4:	00001b69 	.word	0x00001b69

00001bc8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1bc8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1bca:	2000      	movs	r0, #0
    1bcc:	4b08      	ldr	r3, [pc, #32]	; (1bf0 <delay_init+0x28>)
    1bce:	4798      	blx	r3
    1bd0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1bd2:	4c08      	ldr	r4, [pc, #32]	; (1bf4 <delay_init+0x2c>)
    1bd4:	21fa      	movs	r1, #250	; 0xfa
    1bd6:	0089      	lsls	r1, r1, #2
    1bd8:	47a0      	blx	r4
    1bda:	4b07      	ldr	r3, [pc, #28]	; (1bf8 <delay_init+0x30>)
    1bdc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1bde:	4907      	ldr	r1, [pc, #28]	; (1bfc <delay_init+0x34>)
    1be0:	0028      	movs	r0, r5
    1be2:	47a0      	blx	r4
    1be4:	4b06      	ldr	r3, [pc, #24]	; (1c00 <delay_init+0x38>)
    1be6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1be8:	2205      	movs	r2, #5
    1bea:	4b06      	ldr	r3, [pc, #24]	; (1c04 <delay_init+0x3c>)
    1bec:	601a      	str	r2, [r3, #0]
}
    1bee:	bd70      	pop	{r4, r5, r6, pc}
    1bf0:	000038c9 	.word	0x000038c9
    1bf4:	00003cc5 	.word	0x00003cc5
    1bf8:	2000004c 	.word	0x2000004c
    1bfc:	000f4240 	.word	0x000f4240
    1c00:	20000050 	.word	0x20000050
    1c04:	e000e010 	.word	0xe000e010

00001c08 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1c08:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1c0a:	4b08      	ldr	r3, [pc, #32]	; (1c2c <delay_cycles_ms+0x24>)
    1c0c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1c0e:	4a08      	ldr	r2, [pc, #32]	; (1c30 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1c10:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1c12:	2180      	movs	r1, #128	; 0x80
    1c14:	0249      	lsls	r1, r1, #9
	while (n--) {
    1c16:	3801      	subs	r0, #1
    1c18:	d307      	bcc.n	1c2a <delay_cycles_ms+0x22>
	if (n > 0) {
    1c1a:	2c00      	cmp	r4, #0
    1c1c:	d0fb      	beq.n	1c16 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1c1e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1c20:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1c22:	6813      	ldr	r3, [r2, #0]
    1c24:	420b      	tst	r3, r1
    1c26:	d0fc      	beq.n	1c22 <delay_cycles_ms+0x1a>
    1c28:	e7f5      	b.n	1c16 <delay_cycles_ms+0xe>
	}
}
    1c2a:	bd30      	pop	{r4, r5, pc}
    1c2c:	2000004c 	.word	0x2000004c
    1c30:	e000e010 	.word	0xe000e010

00001c34 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1c34:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1c36:	2200      	movs	r2, #0
    1c38:	2300      	movs	r3, #0
    1c3a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1c3c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1c3e:	2100      	movs	r1, #0
    1c40:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1c42:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1c44:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    1c46:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    1c48:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    1c4a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    1c4c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1c4e:	24c0      	movs	r4, #192	; 0xc0
    1c50:	0164      	lsls	r4, r4, #5
    1c52:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1c54:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1c56:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    1c58:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    1c5a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    1c5c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1c5e:	242a      	movs	r4, #42	; 0x2a
    1c60:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    1c62:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1c64:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1c66:	3c06      	subs	r4, #6
    1c68:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    1c6a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    1c6c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    1c6e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1c70:	232b      	movs	r3, #43	; 0x2b
    1c72:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    1c74:	3301      	adds	r3, #1
    1c76:	54c1      	strb	r1, [r0, r3]
}
    1c78:	bd10      	pop	{r4, pc}
	...

00001c7c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c7e:	46d6      	mov	lr, sl
    1c80:	464f      	mov	r7, r9
    1c82:	4646      	mov	r6, r8
    1c84:	b5c0      	push	{r6, r7, lr}
    1c86:	b096      	sub	sp, #88	; 0x58
    1c88:	0007      	movs	r7, r0
    1c8a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1c8c:	6001      	str	r1, [r0, #0]
    1c8e:	4ac6      	ldr	r2, [pc, #792]	; (1fa8 <adc_init+0x32c>)
    1c90:	6a10      	ldr	r0, [r2, #32]
    1c92:	2380      	movs	r3, #128	; 0x80
    1c94:	025b      	lsls	r3, r3, #9
    1c96:	4303      	orrs	r3, r0
    1c98:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1c9a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1c9c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1c9e:	07db      	lsls	r3, r3, #31
    1ca0:	d505      	bpl.n	1cae <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1ca2:	b016      	add	sp, #88	; 0x58
    1ca4:	bc1c      	pop	{r2, r3, r4}
    1ca6:	4690      	mov	r8, r2
    1ca8:	4699      	mov	r9, r3
    1caa:	46a2      	mov	sl, r4
    1cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1cae:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1cb0:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1cb2:	079b      	lsls	r3, r3, #30
    1cb4:	d4f5      	bmi.n	1ca2 <adc_init+0x26>
	module_inst->reference = config->reference;
    1cb6:	7873      	ldrb	r3, [r6, #1]
    1cb8:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d104      	bne.n	1cc8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    1cbe:	4abb      	ldr	r2, [pc, #748]	; (1fac <adc_init+0x330>)
    1cc0:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1cc2:	2104      	movs	r1, #4
    1cc4:	430b      	orrs	r3, r1
    1cc6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1cc8:	2300      	movs	r3, #0
    1cca:	60bb      	str	r3, [r7, #8]
    1ccc:	60fb      	str	r3, [r7, #12]
    1cce:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1cd0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    1cd2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1cd4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1cd6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1cd8:	4bb5      	ldr	r3, [pc, #724]	; (1fb0 <adc_init+0x334>)
    1cda:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1cdc:	232a      	movs	r3, #42	; 0x2a
    1cde:	5cf3      	ldrb	r3, [r6, r3]
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d105      	bne.n	1cf0 <adc_init+0x74>
    1ce4:	7d33      	ldrb	r3, [r6, #20]
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d102      	bne.n	1cf0 <adc_init+0x74>
		module_inst->software_trigger = true;
    1cea:	3301      	adds	r3, #1
    1cec:	777b      	strb	r3, [r7, #29]
    1cee:	e001      	b.n	1cf4 <adc_init+0x78>
		module_inst->software_trigger = false;
    1cf0:	2300      	movs	r3, #0
    1cf2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1cf4:	683b      	ldr	r3, [r7, #0]
    1cf6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1cf8:	7833      	ldrb	r3, [r6, #0]
    1cfa:	466a      	mov	r2, sp
    1cfc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1cfe:	4669      	mov	r1, sp
    1d00:	201e      	movs	r0, #30
    1d02:	4bac      	ldr	r3, [pc, #688]	; (1fb4 <adc_init+0x338>)
    1d04:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1d06:	201e      	movs	r0, #30
    1d08:	4bab      	ldr	r3, [pc, #684]	; (1fb8 <adc_init+0x33c>)
    1d0a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    1d0c:	232c      	movs	r3, #44	; 0x2c
    1d0e:	5cf2      	ldrb	r2, [r6, r3]
    1d10:	2a00      	cmp	r2, #0
    1d12:	d054      	beq.n	1dbe <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1d14:	3b01      	subs	r3, #1
    1d16:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1d18:	7b33      	ldrb	r3, [r6, #12]
    1d1a:	18eb      	adds	r3, r5, r3
    1d1c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    1d1e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1d20:	b2c9      	uxtb	r1, r1
    1d22:	428b      	cmp	r3, r1
    1d24:	d221      	bcs.n	1d6a <adc_init+0xee>
    1d26:	1952      	adds	r2, r2, r5
    1d28:	b2d3      	uxtb	r3, r2
    1d2a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    1d2c:	4ba3      	ldr	r3, [pc, #652]	; (1fbc <adc_init+0x340>)
    1d2e:	469a      	mov	sl, r3
    1d30:	e003      	b.n	1d3a <adc_init+0xbe>
			offset++;
    1d32:	3501      	adds	r5, #1
    1d34:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1d36:	454d      	cmp	r5, r9
    1d38:	d017      	beq.n	1d6a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1d3a:	240f      	movs	r4, #15
    1d3c:	402c      	ands	r4, r5
    1d3e:	7b33      	ldrb	r3, [r6, #12]
    1d40:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    1d42:	2250      	movs	r2, #80	; 0x50
    1d44:	499e      	ldr	r1, [pc, #632]	; (1fc0 <adc_init+0x344>)
    1d46:	a802      	add	r0, sp, #8
    1d48:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1d4a:	2c13      	cmp	r4, #19
    1d4c:	d8f1      	bhi.n	1d32 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1d4e:	00a4      	lsls	r4, r4, #2
    1d50:	ab02      	add	r3, sp, #8
    1d52:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d54:	a901      	add	r1, sp, #4
    1d56:	2300      	movs	r3, #0
    1d58:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1d5a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1d5c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1d5e:	3301      	adds	r3, #1
    1d60:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1d62:	b2c0      	uxtb	r0, r0
    1d64:	4b97      	ldr	r3, [pc, #604]	; (1fc4 <adc_init+0x348>)
    1d66:	4798      	blx	r3
    1d68:	e7e3      	b.n	1d32 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    1d6a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1d6c:	2250      	movs	r2, #80	; 0x50
    1d6e:	4994      	ldr	r1, [pc, #592]	; (1fc0 <adc_init+0x344>)
    1d70:	a802      	add	r0, sp, #8
    1d72:	4b92      	ldr	r3, [pc, #584]	; (1fbc <adc_init+0x340>)
    1d74:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1d76:	2c13      	cmp	r4, #19
    1d78:	d913      	bls.n	1da2 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1d7a:	7d73      	ldrb	r3, [r6, #21]
    1d7c:	009b      	lsls	r3, r3, #2
    1d7e:	b2db      	uxtb	r3, r3
    1d80:	4642      	mov	r2, r8
    1d82:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1d84:	7db3      	ldrb	r3, [r6, #22]
    1d86:	01db      	lsls	r3, r3, #7
    1d88:	7872      	ldrb	r2, [r6, #1]
    1d8a:	4313      	orrs	r3, r2
    1d8c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    1d8e:	4642      	mov	r2, r8
    1d90:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    1d92:	7933      	ldrb	r3, [r6, #4]
    1d94:	2b34      	cmp	r3, #52	; 0x34
    1d96:	d900      	bls.n	1d9a <adc_init+0x11e>
    1d98:	e17b      	b.n	2092 <STACK_SIZE+0x92>
    1d9a:	009b      	lsls	r3, r3, #2
    1d9c:	4a8a      	ldr	r2, [pc, #552]	; (1fc8 <adc_init+0x34c>)
    1d9e:	58d3      	ldr	r3, [r2, r3]
    1da0:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1da2:	00a4      	lsls	r4, r4, #2
    1da4:	ab02      	add	r3, sp, #8
    1da6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1da8:	a901      	add	r1, sp, #4
    1daa:	2300      	movs	r3, #0
    1dac:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1dae:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1db0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1db2:	3301      	adds	r3, #1
    1db4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1db6:	b2c0      	uxtb	r0, r0
    1db8:	4b82      	ldr	r3, [pc, #520]	; (1fc4 <adc_init+0x348>)
    1dba:	4798      	blx	r3
    1dbc:	e7dd      	b.n	1d7a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    1dbe:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    1dc0:	2250      	movs	r2, #80	; 0x50
    1dc2:	497f      	ldr	r1, [pc, #508]	; (1fc0 <adc_init+0x344>)
    1dc4:	a802      	add	r0, sp, #8
    1dc6:	4b7d      	ldr	r3, [pc, #500]	; (1fbc <adc_init+0x340>)
    1dc8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1dca:	2c13      	cmp	r4, #19
    1dcc:	d915      	bls.n	1dfa <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    1dce:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1dd0:	2250      	movs	r2, #80	; 0x50
    1dd2:	497b      	ldr	r1, [pc, #492]	; (1fc0 <adc_init+0x344>)
    1dd4:	a802      	add	r0, sp, #8
    1dd6:	4b79      	ldr	r3, [pc, #484]	; (1fbc <adc_init+0x340>)
    1dd8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1dda:	2c13      	cmp	r4, #19
    1ddc:	d8cd      	bhi.n	1d7a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1dde:	00a4      	lsls	r4, r4, #2
    1de0:	ab02      	add	r3, sp, #8
    1de2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1de4:	a901      	add	r1, sp, #4
    1de6:	2300      	movs	r3, #0
    1de8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1dea:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1dec:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1dee:	3301      	adds	r3, #1
    1df0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1df2:	b2c0      	uxtb	r0, r0
    1df4:	4b73      	ldr	r3, [pc, #460]	; (1fc4 <adc_init+0x348>)
    1df6:	4798      	blx	r3
    1df8:	e7bf      	b.n	1d7a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1dfa:	00a4      	lsls	r4, r4, #2
    1dfc:	ab02      	add	r3, sp, #8
    1dfe:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1e00:	a901      	add	r1, sp, #4
    1e02:	2300      	movs	r3, #0
    1e04:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1e06:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1e08:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1e0a:	3301      	adds	r3, #1
    1e0c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1e0e:	b2c0      	uxtb	r0, r0
    1e10:	4b6c      	ldr	r3, [pc, #432]	; (1fc4 <adc_init+0x348>)
    1e12:	4798      	blx	r3
    1e14:	e7db      	b.n	1dce <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1e16:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1e18:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    1e1a:	2102      	movs	r1, #2
    1e1c:	e01a      	b.n	1e54 <adc_init+0x1d8>
		adjres = config->divide_result;
    1e1e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1e20:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1e22:	2410      	movs	r4, #16
    1e24:	e016      	b.n	1e54 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1e26:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1e28:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1e2a:	2101      	movs	r1, #1
    1e2c:	e012      	b.n	1e54 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    1e2e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1e30:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1e32:	2100      	movs	r1, #0
    1e34:	e00e      	b.n	1e54 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1e36:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1e38:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    1e3a:	2100      	movs	r1, #0
    1e3c:	e00a      	b.n	1e54 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1e3e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1e40:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    1e42:	2100      	movs	r1, #0
    1e44:	e006      	b.n	1e54 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1e46:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1e48:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    1e4a:	2100      	movs	r1, #0
    1e4c:	e002      	b.n	1e54 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    1e4e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    1e50:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1e52:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1e54:	0109      	lsls	r1, r1, #4
    1e56:	2270      	movs	r2, #112	; 0x70
    1e58:	400a      	ands	r2, r1
    1e5a:	4313      	orrs	r3, r2
    1e5c:	4642      	mov	r2, r8
    1e5e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    1e60:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    1e62:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    1e64:	2b3f      	cmp	r3, #63	; 0x3f
    1e66:	d900      	bls.n	1e6a <adc_init+0x1ee>
    1e68:	e71b      	b.n	1ca2 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    1e6a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1e6c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1e6e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1e70:	b25b      	sxtb	r3, r3
    1e72:	2b00      	cmp	r3, #0
    1e74:	dbfb      	blt.n	1e6e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1e76:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1e78:	8872      	ldrh	r2, [r6, #2]
    1e7a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1e7c:	2224      	movs	r2, #36	; 0x24
    1e7e:	5cb2      	ldrb	r2, [r6, r2]
    1e80:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1e82:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1e84:	7d32      	ldrb	r2, [r6, #20]
    1e86:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1e88:	4313      	orrs	r3, r2
    1e8a:	7cb2      	ldrb	r2, [r6, #18]
    1e8c:	0052      	lsls	r2, r2, #1
    1e8e:	4313      	orrs	r3, r2
    1e90:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    1e92:	4642      	mov	r2, r8
    1e94:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1e96:	7e33      	ldrb	r3, [r6, #24]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d020      	beq.n	1ede <adc_init+0x262>
		switch (resolution) {
    1e9c:	2c10      	cmp	r4, #16
    1e9e:	d100      	bne.n	1ea2 <adc_init+0x226>
    1ea0:	e0d9      	b.n	2056 <STACK_SIZE+0x56>
    1ea2:	d800      	bhi.n	1ea6 <adc_init+0x22a>
    1ea4:	e098      	b.n	1fd8 <adc_init+0x35c>
    1ea6:	2c20      	cmp	r4, #32
    1ea8:	d100      	bne.n	1eac <adc_init+0x230>
    1eaa:	e0b6      	b.n	201a <STACK_SIZE+0x1a>
    1eac:	2c30      	cmp	r4, #48	; 0x30
    1eae:	d116      	bne.n	1ede <adc_init+0x262>
			if (config->differential_mode &&
    1eb0:	7cf2      	ldrb	r2, [r6, #19]
    1eb2:	2a00      	cmp	r2, #0
    1eb4:	d00a      	beq.n	1ecc <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1eb6:	69f2      	ldr	r2, [r6, #28]
    1eb8:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    1eba:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1ebc:	2aff      	cmp	r2, #255	; 0xff
    1ebe:	d900      	bls.n	1ec2 <adc_init+0x246>
    1ec0:	e6ef      	b.n	1ca2 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    1ec2:	6a32      	ldr	r2, [r6, #32]
    1ec4:	3280      	adds	r2, #128	; 0x80
    1ec6:	2aff      	cmp	r2, #255	; 0xff
    1ec8:	d900      	bls.n	1ecc <adc_init+0x250>
    1eca:	e6ea      	b.n	1ca2 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    1ecc:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    1ece:	69f2      	ldr	r2, [r6, #28]
    1ed0:	2aff      	cmp	r2, #255	; 0xff
    1ed2:	dd00      	ble.n	1ed6 <adc_init+0x25a>
    1ed4:	e6e5      	b.n	1ca2 <adc_init+0x26>
    1ed6:	6a32      	ldr	r2, [r6, #32]
    1ed8:	2aff      	cmp	r2, #255	; 0xff
    1eda:	dd00      	ble.n	1ede <adc_init+0x262>
    1edc:	e6e1      	b.n	1ca2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1ede:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1ee0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1ee2:	b252      	sxtb	r2, r2
    1ee4:	2a00      	cmp	r2, #0
    1ee6:	dbfb      	blt.n	1ee0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1ee8:	4642      	mov	r2, r8
    1eea:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    1eec:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1eee:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1ef0:	b25b      	sxtb	r3, r3
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	dbfb      	blt.n	1eee <adc_init+0x272>
	adc_module->WINLT.reg =
    1ef6:	8bb3      	ldrh	r3, [r6, #28]
    1ef8:	4642      	mov	r2, r8
    1efa:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    1efc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1efe:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1f00:	b25b      	sxtb	r3, r3
    1f02:	2b00      	cmp	r3, #0
    1f04:	dbfb      	blt.n	1efe <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1f06:	8c33      	ldrh	r3, [r6, #32]
    1f08:	4642      	mov	r2, r8
    1f0a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1f0c:	232c      	movs	r3, #44	; 0x2c
    1f0e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1f10:	2b00      	cmp	r3, #0
    1f12:	d005      	beq.n	1f20 <adc_init+0x2a4>
		inputs_to_scan--;
    1f14:	3b01      	subs	r3, #1
    1f16:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1f18:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1f1a:	2b0f      	cmp	r3, #15
    1f1c:	d900      	bls.n	1f20 <adc_init+0x2a4>
    1f1e:	e6c0      	b.n	1ca2 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1f20:	222b      	movs	r2, #43	; 0x2b
    1f22:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1f24:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1f26:	290f      	cmp	r1, #15
    1f28:	d900      	bls.n	1f2c <adc_init+0x2b0>
    1f2a:	e6ba      	b.n	1ca2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1f2c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1f2e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1f30:	b252      	sxtb	r2, r2
    1f32:	2a00      	cmp	r2, #0
    1f34:	dbfb      	blt.n	1f2e <adc_init+0x2b2>
			config->negative_input |
    1f36:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1f38:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    1f3a:	4302      	orrs	r2, r0
    1f3c:	68b0      	ldr	r0, [r6, #8]
    1f3e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    1f40:	0509      	lsls	r1, r1, #20
			config->negative_input |
    1f42:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1f44:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1f46:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1f48:	4642      	mov	r2, r8
    1f4a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    1f4c:	232a      	movs	r3, #42	; 0x2a
    1f4e:	5cf3      	ldrb	r3, [r6, r3]
    1f50:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    1f52:	230f      	movs	r3, #15
    1f54:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1f56:	3315      	adds	r3, #21
    1f58:	5cf3      	ldrb	r3, [r6, r3]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d012      	beq.n	1f84 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1f5e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    1f60:	4a1a      	ldr	r2, [pc, #104]	; (1fcc <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    1f62:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1f64:	4293      	cmp	r3, r2
    1f66:	d900      	bls.n	1f6a <adc_init+0x2ee>
    1f68:	e69b      	b.n	1ca2 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1f6a:	4642      	mov	r2, r8
    1f6c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    1f6e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    1f70:	2380      	movs	r3, #128	; 0x80
    1f72:	011b      	lsls	r3, r3, #4
    1f74:	18d3      	adds	r3, r2, r3
    1f76:	4915      	ldr	r1, [pc, #84]	; (1fcc <adc_init+0x350>)
    1f78:	b29b      	uxth	r3, r3
    1f7a:	428b      	cmp	r3, r1
    1f7c:	d900      	bls.n	1f80 <adc_init+0x304>
    1f7e:	e690      	b.n	1ca2 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1f80:	4643      	mov	r3, r8
    1f82:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1f84:	4b12      	ldr	r3, [pc, #72]	; (1fd0 <adc_init+0x354>)
    1f86:	681b      	ldr	r3, [r3, #0]
    1f88:	015b      	lsls	r3, r3, #5
    1f8a:	22e0      	movs	r2, #224	; 0xe0
    1f8c:	00d2      	lsls	r2, r2, #3
    1f8e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    1f90:	4a10      	ldr	r2, [pc, #64]	; (1fd4 <adc_init+0x358>)
    1f92:	6851      	ldr	r1, [r2, #4]
    1f94:	0149      	lsls	r1, r1, #5
    1f96:	6812      	ldr	r2, [r2, #0]
    1f98:	0ed2      	lsrs	r2, r2, #27
    1f9a:	430a      	orrs	r2, r1
    1f9c:	b2d2      	uxtb	r2, r2
			) |
    1f9e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1fa0:	4642      	mov	r2, r8
    1fa2:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    1fa4:	2000      	movs	r0, #0
    1fa6:	e67c      	b.n	1ca2 <adc_init+0x26>
    1fa8:	40000400 	.word	0x40000400
    1fac:	40000800 	.word	0x40000800
    1fb0:	20000f88 	.word	0x20000f88
    1fb4:	000039e1 	.word	0x000039e1
    1fb8:	00003955 	.word	0x00003955
    1fbc:	00005755 	.word	0x00005755
    1fc0:	000059c0 	.word	0x000059c0
    1fc4:	00003ad9 	.word	0x00003ad9
    1fc8:	000058ec 	.word	0x000058ec
    1fcc:	00000fff 	.word	0x00000fff
    1fd0:	00806024 	.word	0x00806024
    1fd4:	00806020 	.word	0x00806020
		switch (resolution) {
    1fd8:	2c00      	cmp	r4, #0
    1fda:	d000      	beq.n	1fde <adc_init+0x362>
    1fdc:	e77f      	b.n	1ede <adc_init+0x262>
			if (config->differential_mode &&
    1fde:	7cf2      	ldrb	r2, [r6, #19]
    1fe0:	2a00      	cmp	r2, #0
    1fe2:	d00f      	beq.n	2004 <STACK_SIZE+0x4>
					(config->window.window_lower_value > 2047 ||
    1fe4:	69f2      	ldr	r2, [r6, #28]
    1fe6:	2180      	movs	r1, #128	; 0x80
    1fe8:	0109      	lsls	r1, r1, #4
    1fea:	468c      	mov	ip, r1
    1fec:	4462      	add	r2, ip
			if (config->differential_mode &&
    1fee:	492a      	ldr	r1, [pc, #168]	; (2098 <STACK_SIZE+0x98>)
				return STATUS_ERR_INVALID_ARG;
    1ff0:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1ff2:	428a      	cmp	r2, r1
    1ff4:	d900      	bls.n	1ff8 <adc_init+0x37c>
    1ff6:	e654      	b.n	1ca2 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1ff8:	6a32      	ldr	r2, [r6, #32]
    1ffa:	4462      	add	r2, ip
    1ffc:	4926      	ldr	r1, [pc, #152]	; (2098 <STACK_SIZE+0x98>)
    1ffe:	428a      	cmp	r2, r1
    2000:	d900      	bls.n	2004 <STACK_SIZE+0x4>
    2002:	e64e      	b.n	1ca2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    2004:	4a24      	ldr	r2, [pc, #144]	; (2098 <STACK_SIZE+0x98>)
				return STATUS_ERR_INVALID_ARG;
    2006:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    2008:	69f1      	ldr	r1, [r6, #28]
    200a:	4291      	cmp	r1, r2
    200c:	dd00      	ble.n	2010 <STACK_SIZE+0x10>
    200e:	e648      	b.n	1ca2 <adc_init+0x26>
    2010:	6a31      	ldr	r1, [r6, #32]
    2012:	4291      	cmp	r1, r2
    2014:	dd00      	ble.n	2018 <STACK_SIZE+0x18>
    2016:	e644      	b.n	1ca2 <adc_init+0x26>
    2018:	e761      	b.n	1ede <adc_init+0x262>
			if (config->differential_mode &&
    201a:	7cf2      	ldrb	r2, [r6, #19]
    201c:	2a00      	cmp	r2, #0
    201e:	d00f      	beq.n	2040 <STACK_SIZE+0x40>
					(config->window.window_lower_value > 511 ||
    2020:	69f2      	ldr	r2, [r6, #28]
    2022:	2180      	movs	r1, #128	; 0x80
    2024:	0089      	lsls	r1, r1, #2
    2026:	468c      	mov	ip, r1
    2028:	4462      	add	r2, ip
			if (config->differential_mode &&
    202a:	491c      	ldr	r1, [pc, #112]	; (209c <STACK_SIZE+0x9c>)
				return STATUS_ERR_INVALID_ARG;
    202c:	2017      	movs	r0, #23
			if (config->differential_mode &&
    202e:	428a      	cmp	r2, r1
    2030:	d900      	bls.n	2034 <STACK_SIZE+0x34>
    2032:	e636      	b.n	1ca2 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    2034:	6a32      	ldr	r2, [r6, #32]
    2036:	4462      	add	r2, ip
    2038:	4918      	ldr	r1, [pc, #96]	; (209c <STACK_SIZE+0x9c>)
    203a:	428a      	cmp	r2, r1
    203c:	d900      	bls.n	2040 <STACK_SIZE+0x40>
    203e:	e630      	b.n	1ca2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    2040:	4a16      	ldr	r2, [pc, #88]	; (209c <STACK_SIZE+0x9c>)
				return STATUS_ERR_INVALID_ARG;
    2042:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    2044:	69f1      	ldr	r1, [r6, #28]
    2046:	4291      	cmp	r1, r2
    2048:	dd00      	ble.n	204c <STACK_SIZE+0x4c>
    204a:	e62a      	b.n	1ca2 <adc_init+0x26>
    204c:	6a31      	ldr	r1, [r6, #32]
    204e:	4291      	cmp	r1, r2
    2050:	dd00      	ble.n	2054 <STACK_SIZE+0x54>
    2052:	e626      	b.n	1ca2 <adc_init+0x26>
    2054:	e743      	b.n	1ede <adc_init+0x262>
			if (config->differential_mode &&
    2056:	7cf2      	ldrb	r2, [r6, #19]
    2058:	2a00      	cmp	r2, #0
    205a:	d00f      	beq.n	207c <STACK_SIZE+0x7c>
					(config->window.window_lower_value > 32767 ||
    205c:	69f2      	ldr	r2, [r6, #28]
    205e:	2180      	movs	r1, #128	; 0x80
    2060:	0209      	lsls	r1, r1, #8
    2062:	468c      	mov	ip, r1
    2064:	4462      	add	r2, ip
			if (config->differential_mode &&
    2066:	490e      	ldr	r1, [pc, #56]	; (20a0 <STACK_SIZE+0xa0>)
				return STATUS_ERR_INVALID_ARG;
    2068:	2017      	movs	r0, #23
			if (config->differential_mode &&
    206a:	428a      	cmp	r2, r1
    206c:	d900      	bls.n	2070 <STACK_SIZE+0x70>
    206e:	e618      	b.n	1ca2 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    2070:	6a32      	ldr	r2, [r6, #32]
    2072:	4462      	add	r2, ip
    2074:	490a      	ldr	r1, [pc, #40]	; (20a0 <STACK_SIZE+0xa0>)
    2076:	428a      	cmp	r2, r1
    2078:	d900      	bls.n	207c <STACK_SIZE+0x7c>
    207a:	e612      	b.n	1ca2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    207c:	4a08      	ldr	r2, [pc, #32]	; (20a0 <STACK_SIZE+0xa0>)
				return STATUS_ERR_INVALID_ARG;
    207e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    2080:	69f1      	ldr	r1, [r6, #28]
    2082:	4291      	cmp	r1, r2
    2084:	dd00      	ble.n	2088 <STACK_SIZE+0x88>
    2086:	e60c      	b.n	1ca2 <adc_init+0x26>
    2088:	6a31      	ldr	r1, [r6, #32]
    208a:	4291      	cmp	r1, r2
    208c:	dd00      	ble.n	2090 <STACK_SIZE+0x90>
    208e:	e608      	b.n	1ca2 <adc_init+0x26>
    2090:	e725      	b.n	1ede <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    2092:	2017      	movs	r0, #23
    2094:	e605      	b.n	1ca2 <adc_init+0x26>
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	00000fff 	.word	0x00000fff
    209c:	000003ff 	.word	0x000003ff
    20a0:	0000ffff 	.word	0x0000ffff

000020a4 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    20a4:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    20a6:	4b2e      	ldr	r3, [pc, #184]	; (2160 <ADC_Handler+0xbc>)
    20a8:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    20aa:	6823      	ldr	r3, [r4, #0]
    20ac:	7e1d      	ldrb	r5, [r3, #24]
    20ae:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    20b0:	07ea      	lsls	r2, r5, #31
    20b2:	d505      	bpl.n	20c0 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    20b4:	7ee2      	ldrb	r2, [r4, #27]
    20b6:	07d2      	lsls	r2, r2, #31
    20b8:	d502      	bpl.n	20c0 <ADC_Handler+0x1c>
    20ba:	7ea2      	ldrb	r2, [r4, #26]
    20bc:	07d2      	lsls	r2, r2, #31
    20be:	d416      	bmi.n	20ee <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    20c0:	076b      	lsls	r3, r5, #29
    20c2:	d508      	bpl.n	20d6 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    20c4:	2304      	movs	r3, #4
    20c6:	6822      	ldr	r2, [r4, #0]
    20c8:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    20ca:	7ee3      	ldrb	r3, [r4, #27]
    20cc:	079b      	lsls	r3, r3, #30
    20ce:	d502      	bpl.n	20d6 <ADC_Handler+0x32>
    20d0:	7ea3      	ldrb	r3, [r4, #26]
    20d2:	079b      	lsls	r3, r3, #30
    20d4:	d43c      	bmi.n	2150 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    20d6:	07ab      	lsls	r3, r5, #30
    20d8:	d508      	bpl.n	20ec <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    20da:	2302      	movs	r3, #2
    20dc:	6822      	ldr	r2, [r4, #0]
    20de:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    20e0:	7ee3      	ldrb	r3, [r4, #27]
    20e2:	075b      	lsls	r3, r3, #29
    20e4:	d502      	bpl.n	20ec <ADC_Handler+0x48>
    20e6:	7ea3      	ldrb	r3, [r4, #26]
    20e8:	075b      	lsls	r3, r3, #29
    20ea:	d435      	bmi.n	2158 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    20ec:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    20ee:	2201      	movs	r2, #1
    20f0:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    20f2:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    20f4:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    20f6:	b25b      	sxtb	r3, r3
    20f8:	2b00      	cmp	r3, #0
    20fa:	dbfb      	blt.n	20f4 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    20fc:	6961      	ldr	r1, [r4, #20]
    20fe:	1c8b      	adds	r3, r1, #2
    2100:	6163      	str	r3, [r4, #20]
    2102:	8b53      	ldrh	r3, [r2, #26]
    2104:	b29b      	uxth	r3, r3
    2106:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    2108:	8b23      	ldrh	r3, [r4, #24]
    210a:	3b01      	subs	r3, #1
    210c:	b29b      	uxth	r3, r3
    210e:	8323      	strh	r3, [r4, #24]
    2110:	2b00      	cmp	r3, #0
    2112:	d011      	beq.n	2138 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
    2114:	7f63      	ldrb	r3, [r4, #29]
    2116:	2b00      	cmp	r3, #0
    2118:	d0d2      	beq.n	20c0 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    211a:	6822      	ldr	r2, [r4, #0]
    211c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    211e:	b25b      	sxtb	r3, r3
    2120:	2b00      	cmp	r3, #0
    2122:	dbfb      	blt.n	211c <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2124:	7b13      	ldrb	r3, [r2, #12]
    2126:	2102      	movs	r1, #2
    2128:	430b      	orrs	r3, r1
    212a:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    212c:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    212e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    2130:	b25b      	sxtb	r3, r3
    2132:	2b00      	cmp	r3, #0
    2134:	dbfb      	blt.n	212e <ADC_Handler+0x8a>
    2136:	e7c3      	b.n	20c0 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    2138:	7f23      	ldrb	r3, [r4, #28]
    213a:	2b05      	cmp	r3, #5
    213c:	d1c0      	bne.n	20c0 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    213e:	2300      	movs	r3, #0
    2140:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    2142:	3301      	adds	r3, #1
    2144:	6822      	ldr	r2, [r4, #0]
    2146:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    2148:	0020      	movs	r0, r4
    214a:	68a3      	ldr	r3, [r4, #8]
    214c:	4798      	blx	r3
    214e:	e7b7      	b.n	20c0 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    2150:	0020      	movs	r0, r4
    2152:	68e3      	ldr	r3, [r4, #12]
    2154:	4798      	blx	r3
    2156:	e7be      	b.n	20d6 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    2158:	6923      	ldr	r3, [r4, #16]
    215a:	0020      	movs	r0, r4
    215c:	4798      	blx	r3
}
    215e:	e7c5      	b.n	20ec <ADC_Handler+0x48>
    2160:	20000f88 	.word	0x20000f88

00002164 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    2164:	b5f0      	push	{r4, r5, r6, r7, lr}
    2166:	46de      	mov	lr, fp
    2168:	4657      	mov	r7, sl
    216a:	464e      	mov	r6, r9
    216c:	4645      	mov	r5, r8
    216e:	b5e0      	push	{r5, r6, r7, lr}
    2170:	b087      	sub	sp, #28
    2172:	4680      	mov	r8, r0
    2174:	9104      	str	r1, [sp, #16]
    2176:	0016      	movs	r6, r2
    2178:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    217a:	2200      	movs	r2, #0
    217c:	2300      	movs	r3, #0
    217e:	2100      	movs	r1, #0
    2180:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    2182:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    2184:	2001      	movs	r0, #1
    2186:	0021      	movs	r1, r4
    2188:	9600      	str	r6, [sp, #0]
    218a:	9701      	str	r7, [sp, #4]
    218c:	465c      	mov	r4, fp
    218e:	9403      	str	r4, [sp, #12]
    2190:	4644      	mov	r4, r8
    2192:	9405      	str	r4, [sp, #20]
    2194:	e013      	b.n	21be <long_division+0x5a>
    2196:	2420      	movs	r4, #32
    2198:	1a64      	subs	r4, r4, r1
    219a:	0005      	movs	r5, r0
    219c:	40e5      	lsrs	r5, r4
    219e:	46a8      	mov	r8, r5
    21a0:	e014      	b.n	21cc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    21a2:	9c00      	ldr	r4, [sp, #0]
    21a4:	9d01      	ldr	r5, [sp, #4]
    21a6:	1b12      	subs	r2, r2, r4
    21a8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    21aa:	465c      	mov	r4, fp
    21ac:	464d      	mov	r5, r9
    21ae:	432c      	orrs	r4, r5
    21b0:	46a3      	mov	fp, r4
    21b2:	9c03      	ldr	r4, [sp, #12]
    21b4:	4645      	mov	r5, r8
    21b6:	432c      	orrs	r4, r5
    21b8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    21ba:	3901      	subs	r1, #1
    21bc:	d325      	bcc.n	220a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    21be:	2420      	movs	r4, #32
    21c0:	4264      	negs	r4, r4
    21c2:	190c      	adds	r4, r1, r4
    21c4:	d4e7      	bmi.n	2196 <long_division+0x32>
    21c6:	0005      	movs	r5, r0
    21c8:	40a5      	lsls	r5, r4
    21ca:	46a8      	mov	r8, r5
    21cc:	0004      	movs	r4, r0
    21ce:	408c      	lsls	r4, r1
    21d0:	46a1      	mov	r9, r4
		r = r << 1;
    21d2:	1892      	adds	r2, r2, r2
    21d4:	415b      	adcs	r3, r3
    21d6:	0014      	movs	r4, r2
    21d8:	001d      	movs	r5, r3
		if (n & bit_shift) {
    21da:	9e05      	ldr	r6, [sp, #20]
    21dc:	464f      	mov	r7, r9
    21de:	403e      	ands	r6, r7
    21e0:	46b4      	mov	ip, r6
    21e2:	9e04      	ldr	r6, [sp, #16]
    21e4:	4647      	mov	r7, r8
    21e6:	403e      	ands	r6, r7
    21e8:	46b2      	mov	sl, r6
    21ea:	4666      	mov	r6, ip
    21ec:	4657      	mov	r7, sl
    21ee:	433e      	orrs	r6, r7
    21f0:	d003      	beq.n	21fa <long_division+0x96>
			r |= 0x01;
    21f2:	0006      	movs	r6, r0
    21f4:	4326      	orrs	r6, r4
    21f6:	0032      	movs	r2, r6
    21f8:	002b      	movs	r3, r5
		if (r >= d) {
    21fa:	9c00      	ldr	r4, [sp, #0]
    21fc:	9d01      	ldr	r5, [sp, #4]
    21fe:	429d      	cmp	r5, r3
    2200:	d8db      	bhi.n	21ba <long_division+0x56>
    2202:	d1ce      	bne.n	21a2 <long_division+0x3e>
    2204:	4294      	cmp	r4, r2
    2206:	d8d8      	bhi.n	21ba <long_division+0x56>
    2208:	e7cb      	b.n	21a2 <long_division+0x3e>
    220a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    220c:	4658      	mov	r0, fp
    220e:	0019      	movs	r1, r3
    2210:	b007      	add	sp, #28
    2212:	bc3c      	pop	{r2, r3, r4, r5}
    2214:	4690      	mov	r8, r2
    2216:	4699      	mov	r9, r3
    2218:	46a2      	mov	sl, r4
    221a:	46ab      	mov	fp, r5
    221c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000221e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    221e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2220:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2222:	2340      	movs	r3, #64	; 0x40
    2224:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    2226:	4281      	cmp	r1, r0
    2228:	d202      	bcs.n	2230 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    222a:	0018      	movs	r0, r3
    222c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    222e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    2230:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    2232:	1c63      	adds	r3, r4, #1
    2234:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    2236:	4288      	cmp	r0, r1
    2238:	d9f9      	bls.n	222e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    223a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    223c:	2cff      	cmp	r4, #255	; 0xff
    223e:	d8f4      	bhi.n	222a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    2240:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    2242:	2300      	movs	r3, #0
    2244:	e7f1      	b.n	222a <_sercom_get_sync_baud_val+0xc>
	...

00002248 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2248:	b5f0      	push	{r4, r5, r6, r7, lr}
    224a:	b083      	sub	sp, #12
    224c:	000f      	movs	r7, r1
    224e:	0016      	movs	r6, r2
    2250:	aa08      	add	r2, sp, #32
    2252:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2254:	0004      	movs	r4, r0
    2256:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2258:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    225a:	42bc      	cmp	r4, r7
    225c:	d902      	bls.n	2264 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    225e:	0010      	movs	r0, r2
    2260:	b003      	add	sp, #12
    2262:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2264:	2b00      	cmp	r3, #0
    2266:	d114      	bne.n	2292 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2268:	0002      	movs	r2, r0
    226a:	0008      	movs	r0, r1
    226c:	2100      	movs	r1, #0
    226e:	4c19      	ldr	r4, [pc, #100]	; (22d4 <_sercom_get_async_baud_val+0x8c>)
    2270:	47a0      	blx	r4
    2272:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    2274:	003a      	movs	r2, r7
    2276:	2300      	movs	r3, #0
    2278:	2000      	movs	r0, #0
    227a:	4c17      	ldr	r4, [pc, #92]	; (22d8 <_sercom_get_async_baud_val+0x90>)
    227c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    227e:	2200      	movs	r2, #0
    2280:	2301      	movs	r3, #1
    2282:	1a12      	subs	r2, r2, r0
    2284:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    2286:	0c12      	lsrs	r2, r2, #16
    2288:	041b      	lsls	r3, r3, #16
    228a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    228c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    228e:	2200      	movs	r2, #0
    2290:	e7e5      	b.n	225e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    2292:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2294:	2b01      	cmp	r3, #1
    2296:	d1f9      	bne.n	228c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    2298:	000a      	movs	r2, r1
    229a:	2300      	movs	r3, #0
    229c:	2100      	movs	r1, #0
    229e:	4c0d      	ldr	r4, [pc, #52]	; (22d4 <_sercom_get_async_baud_val+0x8c>)
    22a0:	47a0      	blx	r4
    22a2:	0002      	movs	r2, r0
    22a4:	000b      	movs	r3, r1
    22a6:	9200      	str	r2, [sp, #0]
    22a8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    22aa:	0038      	movs	r0, r7
    22ac:	2100      	movs	r1, #0
    22ae:	4c0a      	ldr	r4, [pc, #40]	; (22d8 <_sercom_get_async_baud_val+0x90>)
    22b0:	47a0      	blx	r4
    22b2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    22b4:	2380      	movs	r3, #128	; 0x80
    22b6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    22b8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    22ba:	4298      	cmp	r0, r3
    22bc:	d8cf      	bhi.n	225e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    22be:	0f79      	lsrs	r1, r7, #29
    22c0:	00f8      	lsls	r0, r7, #3
    22c2:	9a00      	ldr	r2, [sp, #0]
    22c4:	9b01      	ldr	r3, [sp, #4]
    22c6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    22c8:	00ea      	lsls	r2, r5, #3
    22ca:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    22cc:	b2d2      	uxtb	r2, r2
    22ce:	0352      	lsls	r2, r2, #13
    22d0:	432a      	orrs	r2, r5
    22d2:	e7db      	b.n	228c <_sercom_get_async_baud_val+0x44>
    22d4:	00003ddd 	.word	0x00003ddd
    22d8:	00002165 	.word	0x00002165

000022dc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    22dc:	b510      	push	{r4, lr}
    22de:	b082      	sub	sp, #8
    22e0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    22e2:	4b0e      	ldr	r3, [pc, #56]	; (231c <sercom_set_gclk_generator+0x40>)
    22e4:	781b      	ldrb	r3, [r3, #0]
    22e6:	2b00      	cmp	r3, #0
    22e8:	d007      	beq.n	22fa <sercom_set_gclk_generator+0x1e>
    22ea:	2900      	cmp	r1, #0
    22ec:	d105      	bne.n	22fa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    22ee:	4b0b      	ldr	r3, [pc, #44]	; (231c <sercom_set_gclk_generator+0x40>)
    22f0:	785b      	ldrb	r3, [r3, #1]
    22f2:	4283      	cmp	r3, r0
    22f4:	d010      	beq.n	2318 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    22f6:	201d      	movs	r0, #29
    22f8:	e00c      	b.n	2314 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    22fa:	a901      	add	r1, sp, #4
    22fc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    22fe:	2013      	movs	r0, #19
    2300:	4b07      	ldr	r3, [pc, #28]	; (2320 <sercom_set_gclk_generator+0x44>)
    2302:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2304:	2013      	movs	r0, #19
    2306:	4b07      	ldr	r3, [pc, #28]	; (2324 <sercom_set_gclk_generator+0x48>)
    2308:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    230a:	4b04      	ldr	r3, [pc, #16]	; (231c <sercom_set_gclk_generator+0x40>)
    230c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    230e:	2201      	movs	r2, #1
    2310:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2312:	2000      	movs	r0, #0
}
    2314:	b002      	add	sp, #8
    2316:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2318:	2000      	movs	r0, #0
    231a:	e7fb      	b.n	2314 <sercom_set_gclk_generator+0x38>
    231c:	2000012c 	.word	0x2000012c
    2320:	000039e1 	.word	0x000039e1
    2324:	00003955 	.word	0x00003955

00002328 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2328:	4b40      	ldr	r3, [pc, #256]	; (242c <_sercom_get_default_pad+0x104>)
    232a:	4298      	cmp	r0, r3
    232c:	d031      	beq.n	2392 <_sercom_get_default_pad+0x6a>
    232e:	d90a      	bls.n	2346 <_sercom_get_default_pad+0x1e>
    2330:	4b3f      	ldr	r3, [pc, #252]	; (2430 <_sercom_get_default_pad+0x108>)
    2332:	4298      	cmp	r0, r3
    2334:	d04d      	beq.n	23d2 <_sercom_get_default_pad+0xaa>
    2336:	4b3f      	ldr	r3, [pc, #252]	; (2434 <_sercom_get_default_pad+0x10c>)
    2338:	4298      	cmp	r0, r3
    233a:	d05a      	beq.n	23f2 <_sercom_get_default_pad+0xca>
    233c:	4b3e      	ldr	r3, [pc, #248]	; (2438 <_sercom_get_default_pad+0x110>)
    233e:	4298      	cmp	r0, r3
    2340:	d037      	beq.n	23b2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2342:	2000      	movs	r0, #0
}
    2344:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    2346:	4b3d      	ldr	r3, [pc, #244]	; (243c <_sercom_get_default_pad+0x114>)
    2348:	4298      	cmp	r0, r3
    234a:	d00c      	beq.n	2366 <_sercom_get_default_pad+0x3e>
    234c:	4b3c      	ldr	r3, [pc, #240]	; (2440 <_sercom_get_default_pad+0x118>)
    234e:	4298      	cmp	r0, r3
    2350:	d1f7      	bne.n	2342 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2352:	2901      	cmp	r1, #1
    2354:	d017      	beq.n	2386 <_sercom_get_default_pad+0x5e>
    2356:	2900      	cmp	r1, #0
    2358:	d05d      	beq.n	2416 <_sercom_get_default_pad+0xee>
    235a:	2902      	cmp	r1, #2
    235c:	d015      	beq.n	238a <_sercom_get_default_pad+0x62>
    235e:	2903      	cmp	r1, #3
    2360:	d015      	beq.n	238e <_sercom_get_default_pad+0x66>
	return 0;
    2362:	2000      	movs	r0, #0
    2364:	e7ee      	b.n	2344 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2366:	2901      	cmp	r1, #1
    2368:	d007      	beq.n	237a <_sercom_get_default_pad+0x52>
    236a:	2900      	cmp	r1, #0
    236c:	d051      	beq.n	2412 <_sercom_get_default_pad+0xea>
    236e:	2902      	cmp	r1, #2
    2370:	d005      	beq.n	237e <_sercom_get_default_pad+0x56>
    2372:	2903      	cmp	r1, #3
    2374:	d005      	beq.n	2382 <_sercom_get_default_pad+0x5a>
	return 0;
    2376:	2000      	movs	r0, #0
    2378:	e7e4      	b.n	2344 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    237a:	4832      	ldr	r0, [pc, #200]	; (2444 <_sercom_get_default_pad+0x11c>)
    237c:	e7e2      	b.n	2344 <_sercom_get_default_pad+0x1c>
    237e:	4832      	ldr	r0, [pc, #200]	; (2448 <_sercom_get_default_pad+0x120>)
    2380:	e7e0      	b.n	2344 <_sercom_get_default_pad+0x1c>
    2382:	4832      	ldr	r0, [pc, #200]	; (244c <_sercom_get_default_pad+0x124>)
    2384:	e7de      	b.n	2344 <_sercom_get_default_pad+0x1c>
    2386:	4832      	ldr	r0, [pc, #200]	; (2450 <_sercom_get_default_pad+0x128>)
    2388:	e7dc      	b.n	2344 <_sercom_get_default_pad+0x1c>
    238a:	4832      	ldr	r0, [pc, #200]	; (2454 <_sercom_get_default_pad+0x12c>)
    238c:	e7da      	b.n	2344 <_sercom_get_default_pad+0x1c>
    238e:	4832      	ldr	r0, [pc, #200]	; (2458 <_sercom_get_default_pad+0x130>)
    2390:	e7d8      	b.n	2344 <_sercom_get_default_pad+0x1c>
    2392:	2901      	cmp	r1, #1
    2394:	d007      	beq.n	23a6 <_sercom_get_default_pad+0x7e>
    2396:	2900      	cmp	r1, #0
    2398:	d03f      	beq.n	241a <_sercom_get_default_pad+0xf2>
    239a:	2902      	cmp	r1, #2
    239c:	d005      	beq.n	23aa <_sercom_get_default_pad+0x82>
    239e:	2903      	cmp	r1, #3
    23a0:	d005      	beq.n	23ae <_sercom_get_default_pad+0x86>
	return 0;
    23a2:	2000      	movs	r0, #0
    23a4:	e7ce      	b.n	2344 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23a6:	482d      	ldr	r0, [pc, #180]	; (245c <_sercom_get_default_pad+0x134>)
    23a8:	e7cc      	b.n	2344 <_sercom_get_default_pad+0x1c>
    23aa:	482d      	ldr	r0, [pc, #180]	; (2460 <_sercom_get_default_pad+0x138>)
    23ac:	e7ca      	b.n	2344 <_sercom_get_default_pad+0x1c>
    23ae:	482d      	ldr	r0, [pc, #180]	; (2464 <_sercom_get_default_pad+0x13c>)
    23b0:	e7c8      	b.n	2344 <_sercom_get_default_pad+0x1c>
    23b2:	2901      	cmp	r1, #1
    23b4:	d007      	beq.n	23c6 <_sercom_get_default_pad+0x9e>
    23b6:	2900      	cmp	r1, #0
    23b8:	d031      	beq.n	241e <_sercom_get_default_pad+0xf6>
    23ba:	2902      	cmp	r1, #2
    23bc:	d005      	beq.n	23ca <_sercom_get_default_pad+0xa2>
    23be:	2903      	cmp	r1, #3
    23c0:	d005      	beq.n	23ce <_sercom_get_default_pad+0xa6>
	return 0;
    23c2:	2000      	movs	r0, #0
    23c4:	e7be      	b.n	2344 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23c6:	4828      	ldr	r0, [pc, #160]	; (2468 <_sercom_get_default_pad+0x140>)
    23c8:	e7bc      	b.n	2344 <_sercom_get_default_pad+0x1c>
    23ca:	4828      	ldr	r0, [pc, #160]	; (246c <_sercom_get_default_pad+0x144>)
    23cc:	e7ba      	b.n	2344 <_sercom_get_default_pad+0x1c>
    23ce:	4828      	ldr	r0, [pc, #160]	; (2470 <_sercom_get_default_pad+0x148>)
    23d0:	e7b8      	b.n	2344 <_sercom_get_default_pad+0x1c>
    23d2:	2901      	cmp	r1, #1
    23d4:	d007      	beq.n	23e6 <_sercom_get_default_pad+0xbe>
    23d6:	2900      	cmp	r1, #0
    23d8:	d023      	beq.n	2422 <_sercom_get_default_pad+0xfa>
    23da:	2902      	cmp	r1, #2
    23dc:	d005      	beq.n	23ea <_sercom_get_default_pad+0xc2>
    23de:	2903      	cmp	r1, #3
    23e0:	d005      	beq.n	23ee <_sercom_get_default_pad+0xc6>
	return 0;
    23e2:	2000      	movs	r0, #0
    23e4:	e7ae      	b.n	2344 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23e6:	4823      	ldr	r0, [pc, #140]	; (2474 <_sercom_get_default_pad+0x14c>)
    23e8:	e7ac      	b.n	2344 <_sercom_get_default_pad+0x1c>
    23ea:	4823      	ldr	r0, [pc, #140]	; (2478 <_sercom_get_default_pad+0x150>)
    23ec:	e7aa      	b.n	2344 <_sercom_get_default_pad+0x1c>
    23ee:	4823      	ldr	r0, [pc, #140]	; (247c <_sercom_get_default_pad+0x154>)
    23f0:	e7a8      	b.n	2344 <_sercom_get_default_pad+0x1c>
    23f2:	2901      	cmp	r1, #1
    23f4:	d007      	beq.n	2406 <_sercom_get_default_pad+0xde>
    23f6:	2900      	cmp	r1, #0
    23f8:	d015      	beq.n	2426 <_sercom_get_default_pad+0xfe>
    23fa:	2902      	cmp	r1, #2
    23fc:	d005      	beq.n	240a <_sercom_get_default_pad+0xe2>
    23fe:	2903      	cmp	r1, #3
    2400:	d005      	beq.n	240e <_sercom_get_default_pad+0xe6>
	return 0;
    2402:	2000      	movs	r0, #0
    2404:	e79e      	b.n	2344 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2406:	481e      	ldr	r0, [pc, #120]	; (2480 <_sercom_get_default_pad+0x158>)
    2408:	e79c      	b.n	2344 <_sercom_get_default_pad+0x1c>
    240a:	481e      	ldr	r0, [pc, #120]	; (2484 <_sercom_get_default_pad+0x15c>)
    240c:	e79a      	b.n	2344 <_sercom_get_default_pad+0x1c>
    240e:	481e      	ldr	r0, [pc, #120]	; (2488 <_sercom_get_default_pad+0x160>)
    2410:	e798      	b.n	2344 <_sercom_get_default_pad+0x1c>
    2412:	481e      	ldr	r0, [pc, #120]	; (248c <_sercom_get_default_pad+0x164>)
    2414:	e796      	b.n	2344 <_sercom_get_default_pad+0x1c>
    2416:	2003      	movs	r0, #3
    2418:	e794      	b.n	2344 <_sercom_get_default_pad+0x1c>
    241a:	481d      	ldr	r0, [pc, #116]	; (2490 <_sercom_get_default_pad+0x168>)
    241c:	e792      	b.n	2344 <_sercom_get_default_pad+0x1c>
    241e:	481d      	ldr	r0, [pc, #116]	; (2494 <_sercom_get_default_pad+0x16c>)
    2420:	e790      	b.n	2344 <_sercom_get_default_pad+0x1c>
    2422:	481d      	ldr	r0, [pc, #116]	; (2498 <_sercom_get_default_pad+0x170>)
    2424:	e78e      	b.n	2344 <_sercom_get_default_pad+0x1c>
    2426:	481d      	ldr	r0, [pc, #116]	; (249c <_sercom_get_default_pad+0x174>)
    2428:	e78c      	b.n	2344 <_sercom_get_default_pad+0x1c>
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	42001000 	.word	0x42001000
    2430:	42001800 	.word	0x42001800
    2434:	42001c00 	.word	0x42001c00
    2438:	42001400 	.word	0x42001400
    243c:	42000800 	.word	0x42000800
    2440:	42000c00 	.word	0x42000c00
    2444:	00050003 	.word	0x00050003
    2448:	00060003 	.word	0x00060003
    244c:	00070003 	.word	0x00070003
    2450:	00010003 	.word	0x00010003
    2454:	001e0003 	.word	0x001e0003
    2458:	001f0003 	.word	0x001f0003
    245c:	00090003 	.word	0x00090003
    2460:	000a0003 	.word	0x000a0003
    2464:	000b0003 	.word	0x000b0003
    2468:	00110003 	.word	0x00110003
    246c:	00120003 	.word	0x00120003
    2470:	00130003 	.word	0x00130003
    2474:	000d0003 	.word	0x000d0003
    2478:	000e0003 	.word	0x000e0003
    247c:	000f0003 	.word	0x000f0003
    2480:	00170003 	.word	0x00170003
    2484:	00180003 	.word	0x00180003
    2488:	00190003 	.word	0x00190003
    248c:	00040003 	.word	0x00040003
    2490:	00080003 	.word	0x00080003
    2494:	00100003 	.word	0x00100003
    2498:	000c0003 	.word	0x000c0003
    249c:	00160003 	.word	0x00160003

000024a0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    24a0:	b530      	push	{r4, r5, lr}
    24a2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    24a4:	4b0b      	ldr	r3, [pc, #44]	; (24d4 <_sercom_get_sercom_inst_index+0x34>)
    24a6:	466a      	mov	r2, sp
    24a8:	cb32      	ldmia	r3!, {r1, r4, r5}
    24aa:	c232      	stmia	r2!, {r1, r4, r5}
    24ac:	cb32      	ldmia	r3!, {r1, r4, r5}
    24ae:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    24b0:	9b00      	ldr	r3, [sp, #0]
    24b2:	4283      	cmp	r3, r0
    24b4:	d00b      	beq.n	24ce <_sercom_get_sercom_inst_index+0x2e>
    24b6:	2301      	movs	r3, #1
    24b8:	009a      	lsls	r2, r3, #2
    24ba:	4669      	mov	r1, sp
    24bc:	5852      	ldr	r2, [r2, r1]
    24be:	4282      	cmp	r2, r0
    24c0:	d006      	beq.n	24d0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    24c2:	3301      	adds	r3, #1
    24c4:	2b06      	cmp	r3, #6
    24c6:	d1f7      	bne.n	24b8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    24c8:	2000      	movs	r0, #0
}
    24ca:	b007      	add	sp, #28
    24cc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    24ce:	2300      	movs	r3, #0
			return i;
    24d0:	b2d8      	uxtb	r0, r3
    24d2:	e7fa      	b.n	24ca <_sercom_get_sercom_inst_index+0x2a>
    24d4:	00005a10 	.word	0x00005a10

000024d8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    24d8:	4770      	bx	lr
	...

000024dc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    24dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    24de:	4b0a      	ldr	r3, [pc, #40]	; (2508 <_sercom_set_handler+0x2c>)
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d10c      	bne.n	2500 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    24e6:	4f09      	ldr	r7, [pc, #36]	; (250c <_sercom_set_handler+0x30>)
    24e8:	4e09      	ldr	r6, [pc, #36]	; (2510 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    24ea:	4d0a      	ldr	r5, [pc, #40]	; (2514 <_sercom_set_handler+0x38>)
    24ec:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    24ee:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    24f0:	195a      	adds	r2, r3, r5
    24f2:	6014      	str	r4, [r2, #0]
    24f4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    24f6:	2b18      	cmp	r3, #24
    24f8:	d1f9      	bne.n	24ee <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    24fa:	2201      	movs	r2, #1
    24fc:	4b02      	ldr	r3, [pc, #8]	; (2508 <_sercom_set_handler+0x2c>)
    24fe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2500:	0080      	lsls	r0, r0, #2
    2502:	4b02      	ldr	r3, [pc, #8]	; (250c <_sercom_set_handler+0x30>)
    2504:	50c1      	str	r1, [r0, r3]
}
    2506:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2508:	2000012e 	.word	0x2000012e
    250c:	20000130 	.word	0x20000130
    2510:	000024d9 	.word	0x000024d9
    2514:	20000f8c 	.word	0x20000f8c

00002518 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2518:	b500      	push	{lr}
    251a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    251c:	2309      	movs	r3, #9
    251e:	466a      	mov	r2, sp
    2520:	7013      	strb	r3, [r2, #0]
    2522:	3301      	adds	r3, #1
    2524:	7053      	strb	r3, [r2, #1]
    2526:	3301      	adds	r3, #1
    2528:	7093      	strb	r3, [r2, #2]
    252a:	3301      	adds	r3, #1
    252c:	70d3      	strb	r3, [r2, #3]
    252e:	3301      	adds	r3, #1
    2530:	7113      	strb	r3, [r2, #4]
    2532:	3301      	adds	r3, #1
    2534:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2536:	4b03      	ldr	r3, [pc, #12]	; (2544 <_sercom_get_interrupt_vector+0x2c>)
    2538:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    253a:	466b      	mov	r3, sp
    253c:	5618      	ldrsb	r0, [r3, r0]
}
    253e:	b003      	add	sp, #12
    2540:	bd00      	pop	{pc}
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	000024a1 	.word	0x000024a1

00002548 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2548:	b510      	push	{r4, lr}
    254a:	4b02      	ldr	r3, [pc, #8]	; (2554 <SERCOM0_Handler+0xc>)
    254c:	681b      	ldr	r3, [r3, #0]
    254e:	2000      	movs	r0, #0
    2550:	4798      	blx	r3
    2552:	bd10      	pop	{r4, pc}
    2554:	20000130 	.word	0x20000130

00002558 <SERCOM1_Handler>:
    2558:	b510      	push	{r4, lr}
    255a:	4b02      	ldr	r3, [pc, #8]	; (2564 <SERCOM1_Handler+0xc>)
    255c:	685b      	ldr	r3, [r3, #4]
    255e:	2001      	movs	r0, #1
    2560:	4798      	blx	r3
    2562:	bd10      	pop	{r4, pc}
    2564:	20000130 	.word	0x20000130

00002568 <SERCOM2_Handler>:
    2568:	b510      	push	{r4, lr}
    256a:	4b02      	ldr	r3, [pc, #8]	; (2574 <SERCOM2_Handler+0xc>)
    256c:	689b      	ldr	r3, [r3, #8]
    256e:	2002      	movs	r0, #2
    2570:	4798      	blx	r3
    2572:	bd10      	pop	{r4, pc}
    2574:	20000130 	.word	0x20000130

00002578 <SERCOM3_Handler>:
    2578:	b510      	push	{r4, lr}
    257a:	4b02      	ldr	r3, [pc, #8]	; (2584 <SERCOM3_Handler+0xc>)
    257c:	68db      	ldr	r3, [r3, #12]
    257e:	2003      	movs	r0, #3
    2580:	4798      	blx	r3
    2582:	bd10      	pop	{r4, pc}
    2584:	20000130 	.word	0x20000130

00002588 <SERCOM4_Handler>:
    2588:	b510      	push	{r4, lr}
    258a:	4b02      	ldr	r3, [pc, #8]	; (2594 <SERCOM4_Handler+0xc>)
    258c:	691b      	ldr	r3, [r3, #16]
    258e:	2004      	movs	r0, #4
    2590:	4798      	blx	r3
    2592:	bd10      	pop	{r4, pc}
    2594:	20000130 	.word	0x20000130

00002598 <SERCOM5_Handler>:
    2598:	b510      	push	{r4, lr}
    259a:	4b02      	ldr	r3, [pc, #8]	; (25a4 <SERCOM5_Handler+0xc>)
    259c:	695b      	ldr	r3, [r3, #20]
    259e:	2005      	movs	r0, #5
    25a0:	4798      	blx	r3
    25a2:	bd10      	pop	{r4, pc}
    25a4:	20000130 	.word	0x20000130

000025a8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    25a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25aa:	46de      	mov	lr, fp
    25ac:	4657      	mov	r7, sl
    25ae:	464e      	mov	r6, r9
    25b0:	4645      	mov	r5, r8
    25b2:	b5e0      	push	{r5, r6, r7, lr}
    25b4:	b091      	sub	sp, #68	; 0x44
    25b6:	0005      	movs	r5, r0
    25b8:	000c      	movs	r4, r1
    25ba:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    25bc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    25be:	0008      	movs	r0, r1
    25c0:	4bbc      	ldr	r3, [pc, #752]	; (28b4 <usart_init+0x30c>)
    25c2:	4798      	blx	r3
    25c4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    25c6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    25c8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    25ca:	07db      	lsls	r3, r3, #31
    25cc:	d506      	bpl.n	25dc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    25ce:	b011      	add	sp, #68	; 0x44
    25d0:	bc3c      	pop	{r2, r3, r4, r5}
    25d2:	4690      	mov	r8, r2
    25d4:	4699      	mov	r9, r3
    25d6:	46a2      	mov	sl, r4
    25d8:	46ab      	mov	fp, r5
    25da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    25dc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    25de:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    25e0:	079b      	lsls	r3, r3, #30
    25e2:	d4f4      	bmi.n	25ce <usart_init+0x26>
    25e4:	49b4      	ldr	r1, [pc, #720]	; (28b8 <usart_init+0x310>)
    25e6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    25e8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    25ea:	2301      	movs	r3, #1
    25ec:	40bb      	lsls	r3, r7
    25ee:	4303      	orrs	r3, r0
    25f0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    25f2:	a90f      	add	r1, sp, #60	; 0x3c
    25f4:	272d      	movs	r7, #45	; 0x2d
    25f6:	5df3      	ldrb	r3, [r6, r7]
    25f8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    25fa:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    25fc:	b2d3      	uxtb	r3, r2
    25fe:	9302      	str	r3, [sp, #8]
    2600:	0018      	movs	r0, r3
    2602:	4bae      	ldr	r3, [pc, #696]	; (28bc <usart_init+0x314>)
    2604:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2606:	9802      	ldr	r0, [sp, #8]
    2608:	4bad      	ldr	r3, [pc, #692]	; (28c0 <usart_init+0x318>)
    260a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    260c:	5df0      	ldrb	r0, [r6, r7]
    260e:	2100      	movs	r1, #0
    2610:	4bac      	ldr	r3, [pc, #688]	; (28c4 <usart_init+0x31c>)
    2612:	4798      	blx	r3
	module->character_size = config->character_size;
    2614:	7af3      	ldrb	r3, [r6, #11]
    2616:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2618:	2324      	movs	r3, #36	; 0x24
    261a:	5cf3      	ldrb	r3, [r6, r3]
    261c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    261e:	2325      	movs	r3, #37	; 0x25
    2620:	5cf3      	ldrb	r3, [r6, r3]
    2622:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2624:	7ef3      	ldrb	r3, [r6, #27]
    2626:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2628:	7f33      	ldrb	r3, [r6, #28]
    262a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    262c:	682b      	ldr	r3, [r5, #0]
    262e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2630:	0018      	movs	r0, r3
    2632:	4ba0      	ldr	r3, [pc, #640]	; (28b4 <usart_init+0x30c>)
    2634:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2636:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2638:	2200      	movs	r2, #0
    263a:	230e      	movs	r3, #14
    263c:	a906      	add	r1, sp, #24
    263e:	468c      	mov	ip, r1
    2640:	4463      	add	r3, ip
    2642:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2644:	8a32      	ldrh	r2, [r6, #16]
    2646:	9202      	str	r2, [sp, #8]
    2648:	2380      	movs	r3, #128	; 0x80
    264a:	01db      	lsls	r3, r3, #7
    264c:	429a      	cmp	r2, r3
    264e:	d100      	bne.n	2652 <usart_init+0xaa>
    2650:	e09e      	b.n	2790 <usart_init+0x1e8>
    2652:	d90f      	bls.n	2674 <usart_init+0xcc>
    2654:	23c0      	movs	r3, #192	; 0xc0
    2656:	01db      	lsls	r3, r3, #7
    2658:	9a02      	ldr	r2, [sp, #8]
    265a:	429a      	cmp	r2, r3
    265c:	d100      	bne.n	2660 <usart_init+0xb8>
    265e:	e092      	b.n	2786 <usart_init+0x1de>
    2660:	2380      	movs	r3, #128	; 0x80
    2662:	021b      	lsls	r3, r3, #8
    2664:	429a      	cmp	r2, r3
    2666:	d000      	beq.n	266a <usart_init+0xc2>
    2668:	e11f      	b.n	28aa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    266a:	2303      	movs	r3, #3
    266c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    266e:	2300      	movs	r3, #0
    2670:	9307      	str	r3, [sp, #28]
    2672:	e008      	b.n	2686 <usart_init+0xde>
	switch (config->sample_rate) {
    2674:	2380      	movs	r3, #128	; 0x80
    2676:	019b      	lsls	r3, r3, #6
    2678:	429a      	cmp	r2, r3
    267a:	d000      	beq.n	267e <usart_init+0xd6>
    267c:	e115      	b.n	28aa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    267e:	2310      	movs	r3, #16
    2680:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2682:	3b0f      	subs	r3, #15
    2684:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2686:	6833      	ldr	r3, [r6, #0]
    2688:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    268a:	68f3      	ldr	r3, [r6, #12]
    268c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    268e:	6973      	ldr	r3, [r6, #20]
    2690:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2692:	7e33      	ldrb	r3, [r6, #24]
    2694:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2696:	2326      	movs	r3, #38	; 0x26
    2698:	5cf3      	ldrb	r3, [r6, r3]
    269a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    269c:	6873      	ldr	r3, [r6, #4]
    269e:	4699      	mov	r9, r3
	switch (transfer_mode)
    26a0:	2b00      	cmp	r3, #0
    26a2:	d100      	bne.n	26a6 <usart_init+0xfe>
    26a4:	e0a0      	b.n	27e8 <usart_init+0x240>
    26a6:	2380      	movs	r3, #128	; 0x80
    26a8:	055b      	lsls	r3, r3, #21
    26aa:	4599      	cmp	r9, r3
    26ac:	d100      	bne.n	26b0 <usart_init+0x108>
    26ae:	e084      	b.n	27ba <usart_init+0x212>
	if(config->encoding_format_enable) {
    26b0:	7e73      	ldrb	r3, [r6, #25]
    26b2:	2b00      	cmp	r3, #0
    26b4:	d002      	beq.n	26bc <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    26b6:	7eb3      	ldrb	r3, [r6, #26]
    26b8:	4642      	mov	r2, r8
    26ba:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    26bc:	682a      	ldr	r2, [r5, #0]
    26be:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    26c0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    26c2:	2b00      	cmp	r3, #0
    26c4:	d1fc      	bne.n	26c0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    26c6:	330e      	adds	r3, #14
    26c8:	aa06      	add	r2, sp, #24
    26ca:	4694      	mov	ip, r2
    26cc:	4463      	add	r3, ip
    26ce:	881b      	ldrh	r3, [r3, #0]
    26d0:	4642      	mov	r2, r8
    26d2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    26d4:	9b05      	ldr	r3, [sp, #20]
    26d6:	9a03      	ldr	r2, [sp, #12]
    26d8:	4313      	orrs	r3, r2
    26da:	9a04      	ldr	r2, [sp, #16]
    26dc:	4313      	orrs	r3, r2
    26de:	464a      	mov	r2, r9
    26e0:	4313      	orrs	r3, r2
    26e2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    26e4:	465b      	mov	r3, fp
    26e6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    26e8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    26ea:	4653      	mov	r3, sl
    26ec:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    26ee:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    26f0:	2327      	movs	r3, #39	; 0x27
    26f2:	5cf3      	ldrb	r3, [r6, r3]
    26f4:	2b00      	cmp	r3, #0
    26f6:	d101      	bne.n	26fc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    26f8:	3304      	adds	r3, #4
    26fa:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    26fc:	7e73      	ldrb	r3, [r6, #25]
    26fe:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2700:	7f32      	ldrb	r2, [r6, #28]
    2702:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2704:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2706:	7f72      	ldrb	r2, [r6, #29]
    2708:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    270a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    270c:	2224      	movs	r2, #36	; 0x24
    270e:	5cb2      	ldrb	r2, [r6, r2]
    2710:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2712:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2714:	2225      	movs	r2, #37	; 0x25
    2716:	5cb2      	ldrb	r2, [r6, r2]
    2718:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    271a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    271c:	7ab1      	ldrb	r1, [r6, #10]
    271e:	7af2      	ldrb	r2, [r6, #11]
    2720:	4311      	orrs	r1, r2
    2722:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2724:	8933      	ldrh	r3, [r6, #8]
    2726:	2bff      	cmp	r3, #255	; 0xff
    2728:	d100      	bne.n	272c <usart_init+0x184>
    272a:	e081      	b.n	2830 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    272c:	2280      	movs	r2, #128	; 0x80
    272e:	0452      	lsls	r2, r2, #17
    2730:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2732:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2734:	232c      	movs	r3, #44	; 0x2c
    2736:	5cf3      	ldrb	r3, [r6, r3]
    2738:	2b00      	cmp	r3, #0
    273a:	d103      	bne.n	2744 <usart_init+0x19c>
    273c:	4b62      	ldr	r3, [pc, #392]	; (28c8 <usart_init+0x320>)
    273e:	789b      	ldrb	r3, [r3, #2]
    2740:	079b      	lsls	r3, r3, #30
    2742:	d501      	bpl.n	2748 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2744:	2380      	movs	r3, #128	; 0x80
    2746:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2748:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    274a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    274c:	2b00      	cmp	r3, #0
    274e:	d1fc      	bne.n	274a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2750:	4643      	mov	r3, r8
    2752:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2754:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2756:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2758:	2b00      	cmp	r3, #0
    275a:	d1fc      	bne.n	2756 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    275c:	4643      	mov	r3, r8
    275e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2760:	ab0e      	add	r3, sp, #56	; 0x38
    2762:	2280      	movs	r2, #128	; 0x80
    2764:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2766:	2200      	movs	r2, #0
    2768:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    276a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    276c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    276e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2770:	930a      	str	r3, [sp, #40]	; 0x28
    2772:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2774:	930b      	str	r3, [sp, #44]	; 0x2c
    2776:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2778:	930c      	str	r3, [sp, #48]	; 0x30
    277a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    277c:	9302      	str	r3, [sp, #8]
    277e:	930d      	str	r3, [sp, #52]	; 0x34
    2780:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2782:	ae0a      	add	r6, sp, #40	; 0x28
    2784:	e063      	b.n	284e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2786:	2308      	movs	r3, #8
    2788:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    278a:	3b07      	subs	r3, #7
    278c:	9307      	str	r3, [sp, #28]
    278e:	e77a      	b.n	2686 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2790:	6833      	ldr	r3, [r6, #0]
    2792:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2794:	68f3      	ldr	r3, [r6, #12]
    2796:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2798:	6973      	ldr	r3, [r6, #20]
    279a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    279c:	7e33      	ldrb	r3, [r6, #24]
    279e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    27a0:	2326      	movs	r3, #38	; 0x26
    27a2:	5cf3      	ldrb	r3, [r6, r3]
    27a4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    27a6:	6873      	ldr	r3, [r6, #4]
    27a8:	4699      	mov	r9, r3
	switch (transfer_mode)
    27aa:	2b00      	cmp	r3, #0
    27ac:	d018      	beq.n	27e0 <usart_init+0x238>
    27ae:	2380      	movs	r3, #128	; 0x80
    27b0:	055b      	lsls	r3, r3, #21
    27b2:	4599      	cmp	r9, r3
    27b4:	d001      	beq.n	27ba <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    27b6:	2000      	movs	r0, #0
    27b8:	e025      	b.n	2806 <usart_init+0x25e>
			if (!config->use_external_clock) {
    27ba:	2327      	movs	r3, #39	; 0x27
    27bc:	5cf3      	ldrb	r3, [r6, r3]
    27be:	2b00      	cmp	r3, #0
    27c0:	d000      	beq.n	27c4 <usart_init+0x21c>
    27c2:	e775      	b.n	26b0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    27c4:	6a33      	ldr	r3, [r6, #32]
    27c6:	001f      	movs	r7, r3
    27c8:	b2c0      	uxtb	r0, r0
    27ca:	4b40      	ldr	r3, [pc, #256]	; (28cc <usart_init+0x324>)
    27cc:	4798      	blx	r3
    27ce:	0001      	movs	r1, r0
    27d0:	220e      	movs	r2, #14
    27d2:	ab06      	add	r3, sp, #24
    27d4:	469c      	mov	ip, r3
    27d6:	4462      	add	r2, ip
    27d8:	0038      	movs	r0, r7
    27da:	4b3d      	ldr	r3, [pc, #244]	; (28d0 <usart_init+0x328>)
    27dc:	4798      	blx	r3
    27de:	e012      	b.n	2806 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    27e0:	2308      	movs	r3, #8
    27e2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27e4:	2300      	movs	r3, #0
    27e6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    27e8:	2327      	movs	r3, #39	; 0x27
    27ea:	5cf3      	ldrb	r3, [r6, r3]
    27ec:	2b00      	cmp	r3, #0
    27ee:	d00e      	beq.n	280e <usart_init+0x266>
				status_code =
    27f0:	9b06      	ldr	r3, [sp, #24]
    27f2:	9300      	str	r3, [sp, #0]
    27f4:	9b07      	ldr	r3, [sp, #28]
    27f6:	220e      	movs	r2, #14
    27f8:	a906      	add	r1, sp, #24
    27fa:	468c      	mov	ip, r1
    27fc:	4462      	add	r2, ip
    27fe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2800:	6a30      	ldr	r0, [r6, #32]
    2802:	4f34      	ldr	r7, [pc, #208]	; (28d4 <usart_init+0x32c>)
    2804:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2806:	2800      	cmp	r0, #0
    2808:	d000      	beq.n	280c <usart_init+0x264>
    280a:	e6e0      	b.n	25ce <usart_init+0x26>
    280c:	e750      	b.n	26b0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    280e:	6a33      	ldr	r3, [r6, #32]
    2810:	001f      	movs	r7, r3
    2812:	b2c0      	uxtb	r0, r0
    2814:	4b2d      	ldr	r3, [pc, #180]	; (28cc <usart_init+0x324>)
    2816:	4798      	blx	r3
    2818:	0001      	movs	r1, r0
				status_code =
    281a:	9b06      	ldr	r3, [sp, #24]
    281c:	9300      	str	r3, [sp, #0]
    281e:	9b07      	ldr	r3, [sp, #28]
    2820:	220e      	movs	r2, #14
    2822:	a806      	add	r0, sp, #24
    2824:	4684      	mov	ip, r0
    2826:	4462      	add	r2, ip
    2828:	0038      	movs	r0, r7
    282a:	4f2a      	ldr	r7, [pc, #168]	; (28d4 <usart_init+0x32c>)
    282c:	47b8      	blx	r7
    282e:	e7ea      	b.n	2806 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2830:	7ef3      	ldrb	r3, [r6, #27]
    2832:	2b00      	cmp	r3, #0
    2834:	d100      	bne.n	2838 <usart_init+0x290>
    2836:	e77d      	b.n	2734 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2838:	2380      	movs	r3, #128	; 0x80
    283a:	04db      	lsls	r3, r3, #19
    283c:	431f      	orrs	r7, r3
    283e:	e779      	b.n	2734 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2840:	0020      	movs	r0, r4
    2842:	4b25      	ldr	r3, [pc, #148]	; (28d8 <usart_init+0x330>)
    2844:	4798      	blx	r3
    2846:	e007      	b.n	2858 <usart_init+0x2b0>
    2848:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    284a:	2f04      	cmp	r7, #4
    284c:	d00d      	beq.n	286a <usart_init+0x2c2>
    284e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2850:	00bb      	lsls	r3, r7, #2
    2852:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2854:	2800      	cmp	r0, #0
    2856:	d0f3      	beq.n	2840 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2858:	1c43      	adds	r3, r0, #1
    285a:	d0f5      	beq.n	2848 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    285c:	a90e      	add	r1, sp, #56	; 0x38
    285e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2860:	0c00      	lsrs	r0, r0, #16
    2862:	b2c0      	uxtb	r0, r0
    2864:	4b1d      	ldr	r3, [pc, #116]	; (28dc <usart_init+0x334>)
    2866:	4798      	blx	r3
    2868:	e7ee      	b.n	2848 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    286a:	2300      	movs	r3, #0
    286c:	60eb      	str	r3, [r5, #12]
    286e:	612b      	str	r3, [r5, #16]
    2870:	616b      	str	r3, [r5, #20]
    2872:	61ab      	str	r3, [r5, #24]
    2874:	61eb      	str	r3, [r5, #28]
    2876:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2878:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    287a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    287c:	2200      	movs	r2, #0
    287e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2880:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2882:	3330      	adds	r3, #48	; 0x30
    2884:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2886:	3301      	adds	r3, #1
    2888:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    288a:	3301      	adds	r3, #1
    288c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    288e:	3301      	adds	r3, #1
    2890:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2892:	6828      	ldr	r0, [r5, #0]
    2894:	4b07      	ldr	r3, [pc, #28]	; (28b4 <usart_init+0x30c>)
    2896:	4798      	blx	r3
    2898:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    289a:	4911      	ldr	r1, [pc, #68]	; (28e0 <usart_init+0x338>)
    289c:	4b11      	ldr	r3, [pc, #68]	; (28e4 <usart_init+0x33c>)
    289e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    28a0:	00a4      	lsls	r4, r4, #2
    28a2:	4b11      	ldr	r3, [pc, #68]	; (28e8 <usart_init+0x340>)
    28a4:	50e5      	str	r5, [r4, r3]
	return status_code;
    28a6:	2000      	movs	r0, #0
    28a8:	e691      	b.n	25ce <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    28aa:	2310      	movs	r3, #16
    28ac:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28ae:	2300      	movs	r3, #0
    28b0:	9307      	str	r3, [sp, #28]
    28b2:	e6e8      	b.n	2686 <usart_init+0xde>
    28b4:	000024a1 	.word	0x000024a1
    28b8:	40000400 	.word	0x40000400
    28bc:	000039e1 	.word	0x000039e1
    28c0:	00003955 	.word	0x00003955
    28c4:	000022dd 	.word	0x000022dd
    28c8:	41002000 	.word	0x41002000
    28cc:	000039fd 	.word	0x000039fd
    28d0:	0000221f 	.word	0x0000221f
    28d4:	00002249 	.word	0x00002249
    28d8:	00002329 	.word	0x00002329
    28dc:	00003ad9 	.word	0x00003ad9
    28e0:	00002a61 	.word	0x00002a61
    28e4:	000024dd 	.word	0x000024dd
    28e8:	20000f8c 	.word	0x20000f8c

000028ec <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    28ec:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    28ee:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    28f0:	2a00      	cmp	r2, #0
    28f2:	d101      	bne.n	28f8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    28f4:	0018      	movs	r0, r3
    28f6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    28f8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    28fa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    28fc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    28fe:	2a00      	cmp	r2, #0
    2900:	d1f8      	bne.n	28f4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2902:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2904:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2906:	2a00      	cmp	r2, #0
    2908:	d1fc      	bne.n	2904 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    290a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    290c:	2102      	movs	r1, #2
    290e:	7e1a      	ldrb	r2, [r3, #24]
    2910:	420a      	tst	r2, r1
    2912:	d0fc      	beq.n	290e <usart_write_wait+0x22>
	return STATUS_OK;
    2914:	2300      	movs	r3, #0
    2916:	e7ed      	b.n	28f4 <usart_write_wait+0x8>

00002918 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2918:	b5f0      	push	{r4, r5, r6, r7, lr}
    291a:	46ce      	mov	lr, r9
    291c:	4647      	mov	r7, r8
    291e:	b580      	push	{r7, lr}
    2920:	b083      	sub	sp, #12
    2922:	0005      	movs	r5, r0
    2924:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2926:	2017      	movs	r0, #23
	if (length == 0) {
    2928:	2a00      	cmp	r2, #0
    292a:	d104      	bne.n	2936 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    292c:	b003      	add	sp, #12
    292e:	bc0c      	pop	{r2, r3}
    2930:	4690      	mov	r8, r2
    2932:	4699      	mov	r9, r3
    2934:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    2936:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    2938:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    293a:	2b00      	cmp	r3, #0
    293c:	d0f6      	beq.n	292c <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    293e:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2940:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2942:	2b00      	cmp	r3, #0
    2944:	d1fc      	bne.n	2940 <usart_write_buffer_wait+0x28>
	while (length--) {
    2946:	3a01      	subs	r2, #1
    2948:	b293      	uxth	r3, r2
    294a:	4699      	mov	r9, r3
    294c:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    294e:	2701      	movs	r7, #1
	while (length--) {
    2950:	4b1f      	ldr	r3, [pc, #124]	; (29d0 <usart_write_buffer_wait+0xb8>)
    2952:	4698      	mov	r8, r3
    2954:	e011      	b.n	297a <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    2956:	1c73      	adds	r3, r6, #1
    2958:	b29b      	uxth	r3, r3
    295a:	9a01      	ldr	r2, [sp, #4]
    295c:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    295e:	796a      	ldrb	r2, [r5, #5]
    2960:	2a01      	cmp	r2, #1
    2962:	d017      	beq.n	2994 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    2964:	b289      	uxth	r1, r1
    2966:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    2968:	0028      	movs	r0, r5
    296a:	4b1a      	ldr	r3, [pc, #104]	; (29d4 <usart_write_buffer_wait+0xbc>)
    296c:	4798      	blx	r3
	while (length--) {
    296e:	464b      	mov	r3, r9
    2970:	3b01      	subs	r3, #1
    2972:	b29b      	uxth	r3, r3
    2974:	4699      	mov	r9, r3
    2976:	4543      	cmp	r3, r8
    2978:	d013      	beq.n	29a2 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    297a:	7e23      	ldrb	r3, [r4, #24]
    297c:	423b      	tst	r3, r7
    297e:	d1ea      	bne.n	2956 <usart_write_buffer_wait+0x3e>
    2980:	4b13      	ldr	r3, [pc, #76]	; (29d0 <usart_write_buffer_wait+0xb8>)
    2982:	7e22      	ldrb	r2, [r4, #24]
    2984:	423a      	tst	r2, r7
    2986:	d1e6      	bne.n	2956 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    2988:	2b01      	cmp	r3, #1
    298a:	d019      	beq.n	29c0 <usart_write_buffer_wait+0xa8>
    298c:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    298e:	2b00      	cmp	r3, #0
    2990:	d1f7      	bne.n	2982 <usart_write_buffer_wait+0x6a>
    2992:	e7e0      	b.n	2956 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2994:	3602      	adds	r6, #2
    2996:	b2b6      	uxth	r6, r6
    2998:	9a01      	ldr	r2, [sp, #4]
    299a:	5cd3      	ldrb	r3, [r2, r3]
    299c:	021b      	lsls	r3, r3, #8
    299e:	4319      	orrs	r1, r3
    29a0:	e7e2      	b.n	2968 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    29a2:	7e23      	ldrb	r3, [r4, #24]
    29a4:	079b      	lsls	r3, r3, #30
    29a6:	d40d      	bmi.n	29c4 <usart_write_buffer_wait+0xac>
    29a8:	4b09      	ldr	r3, [pc, #36]	; (29d0 <usart_write_buffer_wait+0xb8>)
    29aa:	2102      	movs	r1, #2
    29ac:	7e22      	ldrb	r2, [r4, #24]
    29ae:	420a      	tst	r2, r1
    29b0:	d10a      	bne.n	29c8 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    29b2:	2b01      	cmp	r3, #1
    29b4:	d00a      	beq.n	29cc <usart_write_buffer_wait+0xb4>
    29b6:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    29b8:	2b00      	cmp	r3, #0
    29ba:	d1f7      	bne.n	29ac <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    29bc:	2000      	movs	r0, #0
    29be:	e7b5      	b.n	292c <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    29c0:	2012      	movs	r0, #18
    29c2:	e7b3      	b.n	292c <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    29c4:	2000      	movs	r0, #0
    29c6:	e7b1      	b.n	292c <usart_write_buffer_wait+0x14>
    29c8:	2000      	movs	r0, #0
    29ca:	e7af      	b.n	292c <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    29cc:	2012      	movs	r0, #18
    29ce:	e7ad      	b.n	292c <usart_write_buffer_wait+0x14>
    29d0:	0000ffff 	.word	0x0000ffff
    29d4:	000028ed 	.word	0x000028ed

000029d8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    29d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29da:	0004      	movs	r4, r0
    29dc:	000d      	movs	r5, r1
    29de:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    29e0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    29e2:	4b0f      	ldr	r3, [pc, #60]	; (2a20 <_usart_read_buffer+0x48>)
    29e4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    29e6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    29e8:	b29b      	uxth	r3, r3
    29ea:	2b00      	cmp	r3, #0
    29ec:	d003      	beq.n	29f6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    29ee:	4b0d      	ldr	r3, [pc, #52]	; (2a24 <_usart_read_buffer+0x4c>)
    29f0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    29f2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    29f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    29f6:	85a6      	strh	r6, [r4, #44]	; 0x2c
    29f8:	4b0a      	ldr	r3, [pc, #40]	; (2a24 <_usart_read_buffer+0x4c>)
    29fa:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    29fc:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    29fe:	2205      	movs	r2, #5
    2a00:	2332      	movs	r3, #50	; 0x32
    2a02:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2a04:	3b2e      	subs	r3, #46	; 0x2e
    2a06:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2a08:	7a23      	ldrb	r3, [r4, #8]
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	d001      	beq.n	2a12 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2a0e:	2320      	movs	r3, #32
    2a10:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2a12:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2a14:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2a16:	2b00      	cmp	r3, #0
    2a18:	d0ec      	beq.n	29f4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2a1a:	2308      	movs	r3, #8
    2a1c:	75bb      	strb	r3, [r7, #22]
    2a1e:	e7e9      	b.n	29f4 <_usart_read_buffer+0x1c>
    2a20:	0000334d 	.word	0x0000334d
    2a24:	0000338d 	.word	0x0000338d

00002a28 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2a28:	1c93      	adds	r3, r2, #2
    2a2a:	009b      	lsls	r3, r3, #2
    2a2c:	18c3      	adds	r3, r0, r3
    2a2e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2a30:	2130      	movs	r1, #48	; 0x30
    2a32:	2301      	movs	r3, #1
    2a34:	4093      	lsls	r3, r2
    2a36:	001a      	movs	r2, r3
    2a38:	5c43      	ldrb	r3, [r0, r1]
    2a3a:	4313      	orrs	r3, r2
    2a3c:	5443      	strb	r3, [r0, r1]
}
    2a3e:	4770      	bx	lr

00002a40 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2a40:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2a42:	2317      	movs	r3, #23
	if (length == 0) {
    2a44:	2a00      	cmp	r2, #0
    2a46:	d101      	bne.n	2a4c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2a48:	0018      	movs	r0, r3
    2a4a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2a4c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2a4e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2a50:	2c00      	cmp	r4, #0
    2a52:	d0f9      	beq.n	2a48 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2a54:	4b01      	ldr	r3, [pc, #4]	; (2a5c <usart_read_buffer_job+0x1c>)
    2a56:	4798      	blx	r3
    2a58:	0003      	movs	r3, r0
    2a5a:	e7f5      	b.n	2a48 <usart_read_buffer_job+0x8>
    2a5c:	000029d9 	.word	0x000029d9

00002a60 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2a62:	0080      	lsls	r0, r0, #2
    2a64:	4b51      	ldr	r3, [pc, #324]	; (2bac <_usart_interrupt_handler+0x14c>)
    2a66:	58c6      	ldr	r6, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2a68:	6834      	ldr	r4, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a6a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d1fc      	bne.n	2a6a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2a70:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2a72:	7da5      	ldrb	r5, [r4, #22]
    2a74:	401d      	ands	r5, r3
	callback_status = module->callback_reg_mask &
    2a76:	2330      	movs	r3, #48	; 0x30
    2a78:	5cf3      	ldrb	r3, [r6, r3]
    2a7a:	2231      	movs	r2, #49	; 0x31
    2a7c:	5cb7      	ldrb	r7, [r6, r2]
    2a7e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2a80:	07eb      	lsls	r3, r5, #31
    2a82:	d522      	bpl.n	2aca <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2a84:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2a86:	b29b      	uxth	r3, r3
    2a88:	2b00      	cmp	r3, #0
    2a8a:	d01c      	beq.n	2ac6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2a8c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    2a8e:	7813      	ldrb	r3, [r2, #0]
    2a90:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2a92:	1c51      	adds	r1, r2, #1
    2a94:	62b1      	str	r1, [r6, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2a96:	7971      	ldrb	r1, [r6, #5]
    2a98:	2901      	cmp	r1, #1
    2a9a:	d00e      	beq.n	2aba <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2a9c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2a9e:	05db      	lsls	r3, r3, #23
    2aa0:	0ddb      	lsrs	r3, r3, #23
    2aa2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2aa4:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2aa6:	3b01      	subs	r3, #1
    2aa8:	b29b      	uxth	r3, r3
    2aaa:	85f3      	strh	r3, [r6, #46]	; 0x2e
    2aac:	2b00      	cmp	r3, #0
    2aae:	d10c      	bne.n	2aca <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ab0:	3301      	adds	r3, #1
    2ab2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2ab4:	3301      	adds	r3, #1
    2ab6:	75a3      	strb	r3, [r4, #22]
    2ab8:	e007      	b.n	2aca <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2aba:	7851      	ldrb	r1, [r2, #1]
    2abc:	0209      	lsls	r1, r1, #8
    2abe:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2ac0:	3202      	adds	r2, #2
    2ac2:	62b2      	str	r2, [r6, #40]	; 0x28
    2ac4:	e7eb      	b.n	2a9e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ac6:	2301      	movs	r3, #1
    2ac8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2aca:	07ab      	lsls	r3, r5, #30
    2acc:	d506      	bpl.n	2adc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2ace:	2302      	movs	r3, #2
    2ad0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2ad2:	2200      	movs	r2, #0
    2ad4:	3331      	adds	r3, #49	; 0x31
    2ad6:	54f2      	strb	r2, [r6, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2ad8:	07fb      	lsls	r3, r7, #31
    2ada:	d428      	bmi.n	2b2e <_usart_interrupt_handler+0xce>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2adc:	076b      	lsls	r3, r5, #29
    2ade:	d510      	bpl.n	2b02 <_usart_interrupt_handler+0xa2>

		//if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2ae0:	8b63      	ldrh	r3, [r4, #26]
    2ae2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2ae4:	071a      	lsls	r2, r3, #28
    2ae6:	d426      	bmi.n	2b36 <_usart_interrupt_handler+0xd6>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2ae8:	223f      	movs	r2, #63	; 0x3f
    2aea:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) 
    2aec:	2b00      	cmp	r3, #0
    2aee:	d04a      	beq.n	2b86 <_usart_interrupt_handler+0x126>
			{
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2af0:	079a      	lsls	r2, r3, #30
    2af2:	d523      	bpl.n	2b3c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2af4:	221a      	movs	r2, #26
    2af6:	2332      	movs	r3, #50	; 0x32
    2af8:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2afa:	3b30      	subs	r3, #48	; 0x30
    2afc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2afe:	077b      	lsls	r3, r7, #29
    2b00:	d43d      	bmi.n	2b7e <_usart_interrupt_handler+0x11e>
			//usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		//}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2b02:	06eb      	lsls	r3, r5, #27
    2b04:	d504      	bpl.n	2b10 <_usart_interrupt_handler+0xb0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2b06:	2310      	movs	r3, #16
    2b08:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2b0a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2b0c:	06fb      	lsls	r3, r7, #27
    2b0e:	d440      	bmi.n	2b92 <_usart_interrupt_handler+0x132>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2b10:	06ab      	lsls	r3, r5, #26
    2b12:	d504      	bpl.n	2b1e <_usart_interrupt_handler+0xbe>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2b14:	2320      	movs	r3, #32
    2b16:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2b18:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2b1a:	073b      	lsls	r3, r7, #28
    2b1c:	d43d      	bmi.n	2b9a <_usart_interrupt_handler+0x13a>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2b1e:	072b      	lsls	r3, r5, #28
    2b20:	d504      	bpl.n	2b2c <_usart_interrupt_handler+0xcc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2b22:	2308      	movs	r3, #8
    2b24:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2b26:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2b28:	06bb      	lsls	r3, r7, #26
    2b2a:	d43a      	bmi.n	2ba2 <_usart_interrupt_handler+0x142>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2b2e:	0030      	movs	r0, r6
    2b30:	68f3      	ldr	r3, [r6, #12]
    2b32:	4798      	blx	r3
    2b34:	e7d2      	b.n	2adc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2b36:	2237      	movs	r2, #55	; 0x37
    2b38:	4013      	ands	r3, r2
    2b3a:	e7d7      	b.n	2aec <_usart_interrupt_handler+0x8c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2b3c:	075a      	lsls	r2, r3, #29
    2b3e:	d505      	bpl.n	2b4c <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2b40:	221e      	movs	r2, #30
    2b42:	2332      	movs	r3, #50	; 0x32
    2b44:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2b46:	3b2e      	subs	r3, #46	; 0x2e
    2b48:	8363      	strh	r3, [r4, #26]
    2b4a:	e7d8      	b.n	2afe <_usart_interrupt_handler+0x9e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2b4c:	07da      	lsls	r2, r3, #31
    2b4e:	d505      	bpl.n	2b5c <_usart_interrupt_handler+0xfc>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2b50:	2213      	movs	r2, #19
    2b52:	2332      	movs	r3, #50	; 0x32
    2b54:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2b56:	3b31      	subs	r3, #49	; 0x31
    2b58:	8363      	strh	r3, [r4, #26]
    2b5a:	e7d0      	b.n	2afe <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b5c:	06da      	lsls	r2, r3, #27
    2b5e:	d505      	bpl.n	2b6c <_usart_interrupt_handler+0x10c>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2b60:	2242      	movs	r2, #66	; 0x42
    2b62:	2332      	movs	r3, #50	; 0x32
    2b64:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b66:	3b22      	subs	r3, #34	; 0x22
    2b68:	8363      	strh	r3, [r4, #26]
    2b6a:	e7c8      	b.n	2afe <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2b6c:	2220      	movs	r2, #32
    2b6e:	421a      	tst	r2, r3
    2b70:	d0c5      	beq.n	2afe <_usart_interrupt_handler+0x9e>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2b72:	3221      	adds	r2, #33	; 0x21
    2b74:	2332      	movs	r3, #50	; 0x32
    2b76:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2b78:	3b12      	subs	r3, #18
    2b7a:	8363      	strh	r3, [r4, #26]
    2b7c:	e7bf      	b.n	2afe <_usart_interrupt_handler+0x9e>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2b7e:	0030      	movs	r0, r6
    2b80:	6973      	ldr	r3, [r6, #20]
    2b82:	4798      	blx	r3
    2b84:	e7bd      	b.n	2b02 <_usart_interrupt_handler+0xa2>
				if (callback_status
    2b86:	07bb      	lsls	r3, r7, #30
    2b88:	d5bb      	bpl.n	2b02 <_usart_interrupt_handler+0xa2>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2b8a:	0030      	movs	r0, r6
    2b8c:	6933      	ldr	r3, [r6, #16]
    2b8e:	4798      	blx	r3
    2b90:	e7b7      	b.n	2b02 <_usart_interrupt_handler+0xa2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2b92:	0030      	movs	r0, r6
    2b94:	69f3      	ldr	r3, [r6, #28]
    2b96:	4798      	blx	r3
    2b98:	e7ba      	b.n	2b10 <_usart_interrupt_handler+0xb0>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2b9a:	0030      	movs	r0, r6
    2b9c:	69b3      	ldr	r3, [r6, #24]
    2b9e:	4798      	blx	r3
    2ba0:	e7bd      	b.n	2b1e <_usart_interrupt_handler+0xbe>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2ba2:	6a33      	ldr	r3, [r6, #32]
    2ba4:	0030      	movs	r0, r6
    2ba6:	4798      	blx	r3
}
    2ba8:	e7c0      	b.n	2b2c <_usart_interrupt_handler+0xcc>
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	20000f8c 	.word	0x20000f8c

00002bb0 <configureADC>:
#include    "FlutterADC.h"
#define OUTPUT1_DET_AI			4	
uint16_t* ADCResult = NULL;

void configureADC()
{
    2bb0:	b510      	push	{r4, lr}
    2bb2:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	ADCResult = malloc(sizeof(uint16_t));
    2bb4:	2002      	movs	r0, #2
    2bb6:	4b19      	ldr	r3, [pc, #100]	; (2c1c <configureADC+0x6c>)
    2bb8:	4798      	blx	r3
    2bba:	4b19      	ldr	r3, [pc, #100]	; (2c20 <configureADC+0x70>)
    2bbc:	6018      	str	r0, [r3, #0]
	
	adc_get_config_defaults(&conf_adc);
    2bbe:	4668      	mov	r0, sp
    2bc0:	4b18      	ldr	r3, [pc, #96]	; (2c24 <configureADC+0x74>)
    2bc2:	4798      	blx	r3

	conf_adc.reference			=  ADC_REFCTRL_REFSEL_INTVCC0_Val;
    2bc4:	2301      	movs	r3, #1
    2bc6:	466a      	mov	r2, sp
    2bc8:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	=  ADC_CLOCK_PRESCALER_DIV32;
    2bca:	23c0      	movs	r3, #192	; 0xc0
    2bcc:	009b      	lsls	r3, r3, #2
    2bce:	8053      	strh	r3, [r2, #2]
	conf_adc.positive_input		=  OUTPUT1_DET_AI;
    2bd0:	2304      	movs	r3, #4
    2bd2:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input		=  ADC_NEGATIVE_INPUT_GND;
    2bd4:	23c0      	movs	r3, #192	; 0xc0
    2bd6:	015b      	lsls	r3, r3, #5
    2bd8:	81d3      	strh	r3, [r2, #14]
	conf_adc.resolution			=  ADC_RESOLUTION_8BIT;
    2bda:	2330      	movs	r3, #48	; 0x30
    2bdc:	7113      	strb	r3, [r2, #4]
	conf_adc.clock_source       =  GCLK_GENERATOR_3;
    2bde:	3b2d      	subs	r3, #45	; 0x2d
    2be0:	7013      	strb	r3, [r2, #0]
	//conf_adc.left_adjust		=  true;

	adc_init(&adc_instance, ADC, &conf_adc);
    2be2:	4c11      	ldr	r4, [pc, #68]	; (2c28 <configureADC+0x78>)
    2be4:	4911      	ldr	r1, [pc, #68]	; (2c2c <configureADC+0x7c>)
    2be6:	0020      	movs	r0, r4
    2be8:	4b11      	ldr	r3, [pc, #68]	; (2c30 <configureADC+0x80>)
    2bea:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2bec:	6822      	ldr	r2, [r4, #0]
    2bee:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2bf0:	b25b      	sxtb	r3, r3
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	dbfb      	blt.n	2bee <configureADC+0x3e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2bf6:	2180      	movs	r1, #128	; 0x80
    2bf8:	0409      	lsls	r1, r1, #16
    2bfa:	4b0e      	ldr	r3, [pc, #56]	; (2c34 <configureADC+0x84>)
    2bfc:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2bfe:	230f      	movs	r3, #15
    2c00:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2c02:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2c04:	7813      	ldrb	r3, [r2, #0]
    2c06:	2102      	movs	r1, #2
    2c08:	430b      	orrs	r3, r1
    2c0a:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    2c0c:	4b06      	ldr	r3, [pc, #24]	; (2c28 <configureADC+0x78>)
    2c0e:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2c10:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2c12:	b25b      	sxtb	r3, r3
    2c14:	2b00      	cmp	r3, #0
    2c16:	dbfb      	blt.n	2c10 <configureADC+0x60>
	adc_enable(&adc_instance);
}
    2c18:	b00c      	add	sp, #48	; 0x30
    2c1a:	bd10      	pop	{r4, pc}
    2c1c:	00005741 	.word	0x00005741
    2c20:	20000148 	.word	0x20000148
    2c24:	00001c35 	.word	0x00001c35
    2c28:	20000fa4 	.word	0x20000fa4
    2c2c:	42004000 	.word	0x42004000
    2c30:	00001c7d 	.word	0x00001c7d
    2c34:	e000e100 	.word	0xe000e100

00002c38 <adc_start_read_result>:




uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    2c38:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    2c3a:	4b2d      	ldr	r3, [pc, #180]	; (2cf0 <adc_start_read_result+0xb8>)
    2c3c:	6819      	ldr	r1, [r3, #0]
    2c3e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2c40:	b25b      	sxtb	r3, r3
    2c42:	2b00      	cmp	r3, #0
    2c44:	dbfb      	blt.n	2c3e <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2c46:	690b      	ldr	r3, [r1, #16]
    2c48:	221f      	movs	r2, #31
    2c4a:	4393      	bics	r3, r2
    2c4c:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    2c4e:	6108      	str	r0, [r1, #16]
    2c50:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2c52:	b25b      	sxtb	r3, r3
    2c54:	2b00      	cmp	r3, #0
    2c56:	dbfb      	blt.n	2c50 <adc_start_read_result+0x18>
    2c58:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2c5a:	b25b      	sxtb	r3, r3
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	dbfb      	blt.n	2c58 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2c60:	7b0b      	ldrb	r3, [r1, #12]
    2c62:	2202      	movs	r2, #2
    2c64:	4313      	orrs	r3, r2
    2c66:	730b      	strb	r3, [r1, #12]
    2c68:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2c6a:	b25b      	sxtb	r3, r3
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	dbfb      	blt.n	2c68 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2c70:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2c72:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2c74:	2402      	movs	r4, #2
    2c76:	e001      	b.n	2c7c <adc_start_read_result+0x44>
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    2c78:	4210      	tst	r0, r2
    2c7a:	d10a      	bne.n	2c92 <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2c7c:	7e0b      	ldrb	r3, [r1, #24]
    2c7e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2c80:	0002      	movs	r2, r0
    2c82:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    2c84:	421d      	tst	r5, r3
    2c86:	d000      	beq.n	2c8a <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    2c88:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2c8a:	421c      	tst	r4, r3
    2c8c:	d0f4      	beq.n	2c78 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    2c8e:	432a      	orrs	r2, r5
    2c90:	e7f2      	b.n	2c78 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2c92:	7e0a      	ldrb	r2, [r1, #24]
    2c94:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2c96:	2301      	movs	r3, #1
    2c98:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2c9a:	0750      	lsls	r0, r2, #29
    2c9c:	d501      	bpl.n	2ca2 <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    2c9e:	2002      	movs	r0, #2
    2ca0:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2ca2:	0792      	lsls	r2, r2, #30
    2ca4:	d501      	bpl.n	2caa <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    2ca6:	2204      	movs	r2, #4
    2ca8:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2caa:	07db      	lsls	r3, r3, #31
    2cac:	d403      	bmi.n	2cb6 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
	temp = *ADCResult;
    2cae:	4b11      	ldr	r3, [pc, #68]	; (2cf4 <adc_start_read_result+0xbc>)
    2cb0:	681b      	ldr	r3, [r3, #0]
	return temp;
    2cb2:	8818      	ldrh	r0, [r3, #0]
    2cb4:	bd30      	pop	{r4, r5, pc}
    2cb6:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2cb8:	b25b      	sxtb	r3, r3
    2cba:	2b00      	cmp	r3, #0
    2cbc:	dbfb      	blt.n	2cb6 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
    2cbe:	4b0d      	ldr	r3, [pc, #52]	; (2cf4 <adc_start_read_result+0xbc>)
    2cc0:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    2cc2:	8b4a      	ldrh	r2, [r1, #26]
    2cc4:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    2cc6:	4b0a      	ldr	r3, [pc, #40]	; (2cf0 <adc_start_read_result+0xb8>)
    2cc8:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    2cca:	2301      	movs	r3, #1
    2ccc:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2cce:	7e0a      	ldrb	r2, [r1, #24]
    2cd0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2cd2:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2cd4:	0750      	lsls	r0, r2, #29
    2cd6:	d501      	bpl.n	2cdc <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    2cd8:	2002      	movs	r0, #2
    2cda:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2cdc:	0792      	lsls	r2, r2, #30
    2cde:	d501      	bpl.n	2ce4 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    2ce0:	2204      	movs	r2, #4
    2ce2:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2ce4:	075b      	lsls	r3, r3, #29
    2ce6:	d5e2      	bpl.n	2cae <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    2ce8:	2302      	movs	r3, #2
    2cea:	760b      	strb	r3, [r1, #24]
    2cec:	e7df      	b.n	2cae <adc_start_read_result+0x76>
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	20000fa4 	.word	0x20000fa4
    2cf4:	20000148 	.word	0x20000148

00002cf8 <UARTReceiveBytes>:
#define LEN_LEDMATRIX_SETALL	  72

//#define LEN_COMMON_SETALL		

void UARTReceiveBytes(uint8_t* receiveData ,uint8_t countReceive)
{
    2cf8:	b530      	push	{r4, r5, lr}
	uint8_t i =0;
	while((headPointer - tailPointer) < countReceive )
    2cfa:	4d0c      	ldr	r5, [pc, #48]	; (2d2c <UARTReceiveBytes+0x34>)
    2cfc:	4c0c      	ldr	r4, [pc, #48]	; (2d30 <UARTReceiveBytes+0x38>)
    2cfe:	782b      	ldrb	r3, [r5, #0]
    2d00:	7822      	ldrb	r2, [r4, #0]
    2d02:	1a9b      	subs	r3, r3, r2
    2d04:	428b      	cmp	r3, r1
    2d06:	dbfa      	blt.n	2cfe <UARTReceiveBytes+0x6>
	{
	}
	for(i=1;i<=countReceive;i++)
    2d08:	2900      	cmp	r1, #0
    2d0a:	d00e      	beq.n	2d2a <UARTReceiveBytes+0x32>
    2d0c:	2301      	movs	r3, #1
	{
		receiveData[i] = ringBuffer[tailPointer];
    2d0e:	4c08      	ldr	r4, [pc, #32]	; (2d30 <UARTReceiveBytes+0x38>)
    2d10:	4d08      	ldr	r5, [pc, #32]	; (2d34 <UARTReceiveBytes+0x3c>)
    2d12:	7822      	ldrb	r2, [r4, #0]
    2d14:	b2d2      	uxtb	r2, r2
    2d16:	5caa      	ldrb	r2, [r5, r2]
    2d18:	54c2      	strb	r2, [r0, r3]
		tailPointer++;
    2d1a:	7822      	ldrb	r2, [r4, #0]
    2d1c:	3201      	adds	r2, #1
    2d1e:	b2d2      	uxtb	r2, r2
    2d20:	7022      	strb	r2, [r4, #0]
	for(i=1;i<=countReceive;i++)
    2d22:	3301      	adds	r3, #1
    2d24:	b2db      	uxtb	r3, r3
    2d26:	4299      	cmp	r1, r3
    2d28:	d2f3      	bcs.n	2d12 <UARTReceiveBytes+0x1a>
	}
}
    2d2a:	bd30      	pop	{r4, r5, pc}
    2d2c:	20001120 	.word	0x20001120
    2d30:	20001164 	.word	0x20001164
    2d34:	20001168 	.word	0x20001168

00002d38 <transferLEDMatrixValues>:

void transferLEDMatrixValues(uint8_t* tempTransfer , uint8_t port)
{
    2d38:	b570      	push	{r4, r5, r6, lr}
    2d3a:	b084      	sub	sp, #16
    2d3c:	2300      	movs	r3, #0
	uint32_t err_code = 0;
	//static bool firstTime = true;
	static uint8_t LEDMatrixValues[LEN_LEDMATRIX_SETALL+1]; 
	for(i=0;i<(LEN_LEDMATRIX_SETALL+1);i++)
	{
		LEDMatrixValues[i] = tempTransfer[i] ;
    2d3e:	4c11      	ldr	r4, [pc, #68]	; (2d84 <transferLEDMatrixValues+0x4c>)
    2d40:	5cc2      	ldrb	r2, [r0, r3]
    2d42:	551a      	strb	r2, [r3, r4]
    2d44:	3301      	adds	r3, #1
	for(i=0;i<(LEN_LEDMATRIX_SETALL+1);i++)
    2d46:	2b49      	cmp	r3, #73	; 0x49
    2d48:	d1fa      	bne.n	2d40 <transferLEDMatrixValues+0x8>
	}
	struct i2c_master_packet wr_packet = {
		.address     = outputPort[port].address ,
    2d4a:	4b0f      	ldr	r3, [pc, #60]	; (2d88 <transferLEDMatrixValues+0x50>)
    2d4c:	00ca      	lsls	r2, r1, #3
    2d4e:	5cd0      	ldrb	r0, [r2, r3]
	struct i2c_master_packet wr_packet = {
    2d50:	ac01      	add	r4, sp, #4
    2d52:	8020      	strh	r0, [r4, #0]
		.data_length = outputPort[port].writeDataLength1,
    2d54:	189b      	adds	r3, r3, r2
    2d56:	791b      	ldrb	r3, [r3, #4]
	struct i2c_master_packet wr_packet = {
    2d58:	8063      	strh	r3, [r4, #2]
    2d5a:	4b0a      	ldr	r3, [pc, #40]	; (2d84 <transferLEDMatrixValues+0x4c>)
    2d5c:	9302      	str	r3, [sp, #8]
    2d5e:	2300      	movs	r3, #0
    2d60:	7223      	strb	r3, [r4, #8]
    2d62:	7263      	strb	r3, [r4, #9]
    2d64:	72a3      	strb	r3, [r4, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	//while(outputPort[port].I2CStatus == BUSY_MODE);
	//outputPort[port].I2CStatus = BUSY_MODE;
	I2CWrite((port+1) , &wr_packet);
    2d66:	3101      	adds	r1, #1
    2d68:	b2cd      	uxtb	r5, r1
    2d6a:	0021      	movs	r1, r4
    2d6c:	0028      	movs	r0, r5
    2d6e:	4e07      	ldr	r6, [pc, #28]	; (2d8c <transferLEDMatrixValues+0x54>)
    2d70:	47b0      	blx	r6
	delay_cycles_ms(1);
    2d72:	2001      	movs	r0, #1
    2d74:	4b06      	ldr	r3, [pc, #24]	; (2d90 <transferLEDMatrixValues+0x58>)
    2d76:	4798      	blx	r3
	I2CWrite((port+1) , &wr_packet);
    2d78:	0021      	movs	r1, r4
    2d7a:	0028      	movs	r0, r5
    2d7c:	47b0      	blx	r6
		
	}
	firstTime = false;
	*/
	
}
    2d7e:	b004      	add	sp, #16
    2d80:	bd70      	pop	{r4, r5, r6, pc}
    2d82:	46c0      	nop			; (mov r8, r8)
    2d84:	2000014c 	.word	0x2000014c
    2d88:	20001124 	.word	0x20001124
    2d8c:	000013b1 	.word	0x000013b1
    2d90:	00001c09 	.word	0x00001c09

00002d94 <checkUART>:


void checkUART()
{
    2d94:	b570      	push	{r4, r5, r6, lr}
	uint8_t i =0;
	uint8_t port = 3;
	static uint8_t receivedValue[100];
	if(headPointer != tailPointer)
    2d96:	4b2e      	ldr	r3, [pc, #184]	; (2e50 <checkUART+0xbc>)
    2d98:	781b      	ldrb	r3, [r3, #0]
    2d9a:	4a2e      	ldr	r2, [pc, #184]	; (2e54 <checkUART+0xc0>)
    2d9c:	7812      	ldrb	r2, [r2, #0]
    2d9e:	b2db      	uxtb	r3, r3
    2da0:	4293      	cmp	r3, r2
    2da2:	d043      	beq.n	2e2c <checkUART+0x98>
	{
		receivedValue[0]  = ringBuffer[tailPointer];
    2da4:	492b      	ldr	r1, [pc, #172]	; (2e54 <checkUART+0xc0>)
    2da6:	780b      	ldrb	r3, [r1, #0]
    2da8:	b2db      	uxtb	r3, r3
    2daa:	4a2b      	ldr	r2, [pc, #172]	; (2e58 <checkUART+0xc4>)
    2dac:	5cd3      	ldrb	r3, [r2, r3]
    2dae:	b2db      	uxtb	r3, r3
    2db0:	4a2a      	ldr	r2, [pc, #168]	; (2e5c <checkUART+0xc8>)
    2db2:	7013      	strb	r3, [r2, #0]
		tailPointer++;
    2db4:	780a      	ldrb	r2, [r1, #0]
    2db6:	3201      	adds	r2, #1
    2db8:	b2d2      	uxtb	r2, r2
    2dba:	700a      	strb	r2, [r1, #0]
		switch(receivedValue[0])
    2dbc:	2b4c      	cmp	r3, #76	; 0x4c
    2dbe:	d021      	beq.n	2e04 <checkUART+0x70>
    2dc0:	d90f      	bls.n	2de2 <checkUART+0x4e>
    2dc2:	2b62      	cmp	r3, #98	; 0x62
    2dc4:	d117      	bne.n	2df6 <checkUART+0x62>
		{
			case TEST:
				break;
			case BROADCAST:
				UARTReceiveBytes(receivedValue , LEN_BROADCAST_COMMAND );
    2dc6:	4c25      	ldr	r4, [pc, #148]	; (2e5c <checkUART+0xc8>)
    2dc8:	2101      	movs	r1, #1
    2dca:	0020      	movs	r0, r4
    2dcc:	4b24      	ldr	r3, [pc, #144]	; (2e60 <checkUART+0xcc>)
    2dce:	4798      	blx	r3
				if(receivedValue[1]  == START_BROADCAST)
    2dd0:	7863      	ldrb	r3, [r4, #1]
    2dd2:	2b67      	cmp	r3, #103	; 0x67
    2dd4:	d012      	beq.n	2dfc <checkUART+0x68>
				{
					broadcastFlag = true;
				}
				else if(receivedValue[1] == STOP_BROADCAST)
    2dd6:	2b73      	cmp	r3, #115	; 0x73
    2dd8:	d131      	bne.n	2e3e <checkUART+0xaa>
				{
					broadcastFlag = false;
    2dda:	2200      	movs	r2, #0
    2ddc:	4b21      	ldr	r3, [pc, #132]	; (2e64 <checkUART+0xd0>)
    2dde:	701a      	strb	r2, [r3, #0]
    2de0:	e02d      	b.n	2e3e <checkUART+0xaa>
		switch(receivedValue[0])
    2de2:	2b01      	cmp	r3, #1
    2de4:	d02b      	beq.n	2e3e <checkUART+0xaa>
    2de6:	2b43      	cmp	r3, #67	; 0x43
    2de8:	d029      	beq.n	2e3e <checkUART+0xaa>
			*/
				break;
			case STOP_BROADCAST:
				break;
			default:
			    headPointer = 0;
    2dea:	2300      	movs	r3, #0
    2dec:	4a18      	ldr	r2, [pc, #96]	; (2e50 <checkUART+0xbc>)
    2dee:	7013      	strb	r3, [r2, #0]
			    tailPointer = 0;
    2df0:	4a18      	ldr	r2, [pc, #96]	; (2e54 <checkUART+0xc0>)
    2df2:	7013      	strb	r3, [r2, #0]
				break;
    2df4:	e023      	b.n	2e3e <checkUART+0xaa>
		switch(receivedValue[0])
    2df6:	2b73      	cmp	r3, #115	; 0x73
    2df8:	d1f7      	bne.n	2dea <checkUART+0x56>
    2dfa:	e020      	b.n	2e3e <checkUART+0xaa>
					broadcastFlag = true;
    2dfc:	2201      	movs	r2, #1
    2dfe:	4b19      	ldr	r3, [pc, #100]	; (2e64 <checkUART+0xd0>)
    2e00:	701a      	strb	r2, [r3, #0]
    2e02:	e01c      	b.n	2e3e <checkUART+0xaa>
				UARTReceiveBytes(receivedValue , LEN_LEDMATRIX_SETALL );
    2e04:	2148      	movs	r1, #72	; 0x48
    2e06:	4815      	ldr	r0, [pc, #84]	; (2e5c <checkUART+0xc8>)
    2e08:	4b15      	ldr	r3, [pc, #84]	; (2e60 <checkUART+0xcc>)
    2e0a:	4798      	blx	r3
    2e0c:	2400      	movs	r4, #0
					if(outputPort[port].currentState == 	OUTPUT_LEDMATRIX )
    2e0e:	4d16      	ldr	r5, [pc, #88]	; (2e68 <checkUART+0xd4>)
    2e10:	b2e1      	uxtb	r1, r4
    2e12:	00e3      	lsls	r3, r4, #3
    2e14:	18eb      	adds	r3, r5, r3
    2e16:	785b      	ldrb	r3, [r3, #1]
    2e18:	2b03      	cmp	r3, #3
    2e1a:	d003      	beq.n	2e24 <checkUART+0x90>
    2e1c:	3401      	adds	r4, #1
				for(port=0;port<4;port++)
    2e1e:	2c04      	cmp	r4, #4
    2e20:	d1f6      	bne.n	2e10 <checkUART+0x7c>
    2e22:	e00c      	b.n	2e3e <checkUART+0xaa>
						transferLEDMatrixValues(receivedValue,port);
    2e24:	480d      	ldr	r0, [pc, #52]	; (2e5c <checkUART+0xc8>)
    2e26:	4b11      	ldr	r3, [pc, #68]	; (2e6c <checkUART+0xd8>)
    2e28:	4798      	blx	r3
    2e2a:	e7f7      	b.n	2e1c <checkUART+0x88>
		}
	}
	else if(broadcastFlag == true)
    2e2c:	4b0d      	ldr	r3, [pc, #52]	; (2e64 <checkUART+0xd0>)
    2e2e:	781b      	ldrb	r3, [r3, #0]
    2e30:	2b01      	cmp	r3, #1
    2e32:	d005      	beq.n	2e40 <checkUART+0xac>
		tailPointer = 0;
		sendDataBLE();
	}
	else
	{
		headPointer = 0;
    2e34:	2300      	movs	r3, #0
    2e36:	4a06      	ldr	r2, [pc, #24]	; (2e50 <checkUART+0xbc>)
    2e38:	7013      	strb	r3, [r2, #0]
		tailPointer = 0;
    2e3a:	4a06      	ldr	r2, [pc, #24]	; (2e54 <checkUART+0xc0>)
    2e3c:	7013      	strb	r3, [r2, #0]
	}
    2e3e:	bd70      	pop	{r4, r5, r6, pc}
		headPointer = 0;
    2e40:	2300      	movs	r3, #0
    2e42:	4a03      	ldr	r2, [pc, #12]	; (2e50 <checkUART+0xbc>)
    2e44:	7013      	strb	r3, [r2, #0]
		tailPointer = 0;
    2e46:	4a03      	ldr	r2, [pc, #12]	; (2e54 <checkUART+0xc0>)
    2e48:	7013      	strb	r3, [r2, #0]
		sendDataBLE();
    2e4a:	4b09      	ldr	r3, [pc, #36]	; (2e70 <checkUART+0xdc>)
    2e4c:	4798      	blx	r3
    2e4e:	e7f6      	b.n	2e3e <checkUART+0xaa>
    2e50:	20001120 	.word	0x20001120
    2e54:	20001164 	.word	0x20001164
    2e58:	20001168 	.word	0x20001168
    2e5c:	20000198 	.word	0x20000198
    2e60:	00002cf9 	.word	0x00002cf9
    2e64:	20000195 	.word	0x20000195
    2e68:	20001124 	.word	0x20001124
    2e6c:	00002d39 	.word	0x00002d39
    2e70:	00001b2d 	.word	0x00001b2d

00002e74 <readSensors>:
extern uint8_t NoInDevCon ;
extern uint8_t inputsConnected[3];
extern uint8_t sensorOutputs[40];

void readSensors()
{
    2e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e76:	4f19      	ldr	r7, [pc, #100]	; (2edc <readSensors+0x68>)
    2e78:	4e19      	ldr	r6, [pc, #100]	; (2ee0 <readSensors+0x6c>)
    2e7a:	4c1a      	ldr	r4, [pc, #104]	; (2ee4 <readSensors+0x70>)
    2e7c:	2501      	movs	r5, #1
    2e7e:	e00b      	b.n	2e98 <readSensors+0x24>
		for(i=0;i<NO_SENSORS;i++)
		{
			switch(inputsConnected[i])
			{
				case ANALOG_LIGHT_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    2e80:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2e82:	7820      	ldrb	r0, [r4, #0]
    2e84:	4b18      	ldr	r3, [pc, #96]	; (2ee8 <readSensors+0x74>)
    2e86:	4798      	blx	r3
    2e88:	7170      	strb	r0, [r6, #5]
    2e8a:	3501      	adds	r5, #1
    2e8c:	b2ed      	uxtb	r5, r5
    2e8e:	3701      	adds	r7, #1
    2e90:	3605      	adds	r6, #5
    2e92:	3401      	adds	r4, #1
		for(i=0;i<NO_SENSORS;i++)
    2e94:	2d04      	cmp	r5, #4
    2e96:	d020      	beq.n	2eda <readSensors+0x66>
			switch(inputsConnected[i])
    2e98:	783b      	ldrb	r3, [r7, #0]
    2e9a:	3b1a      	subs	r3, #26
    2e9c:	b2da      	uxtb	r2, r3
    2e9e:	2a05      	cmp	r2, #5
    2ea0:	d8f3      	bhi.n	2e8a <readSensors+0x16>
    2ea2:	0093      	lsls	r3, r2, #2
    2ea4:	4a11      	ldr	r2, [pc, #68]	; (2eec <readSensors+0x78>)
    2ea6:	58d3      	ldr	r3, [r2, r3]
    2ea8:	469f      	mov	pc, r3
					break;
				case ANALOG_DISTANCE_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    2eaa:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2eac:	7820      	ldrb	r0, [r4, #0]
    2eae:	4b0e      	ldr	r3, [pc, #56]	; (2ee8 <readSensors+0x74>)
    2eb0:	4798      	blx	r3
    2eb2:	7170      	strb	r0, [r6, #5]
					break;
    2eb4:	e7e9      	b.n	2e8a <readSensors+0x16>
				case ANALOG_SOUND_SENSOR:
					sensorOutputs[5*i + 4]     = i+1;
    2eb6:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2eb8:	7820      	ldrb	r0, [r4, #0]
    2eba:	4b0b      	ldr	r3, [pc, #44]	; (2ee8 <readSensors+0x74>)
    2ebc:	4798      	blx	r3
    2ebe:	7170      	strb	r0, [r6, #5]
					break;
    2ec0:	e7e3      	b.n	2e8a <readSensors+0x16>
				case ANALOG_DIAL:
					sensorOutputs[5*i + 4]     = i+1;
    2ec2:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2ec4:	7820      	ldrb	r0, [r4, #0]
    2ec6:	4b08      	ldr	r3, [pc, #32]	; (2ee8 <readSensors+0x74>)
    2ec8:	4798      	blx	r3
    2eca:	7170      	strb	r0, [r6, #5]
					break;
    2ecc:	e7dd      	b.n	2e8a <readSensors+0x16>
				case ANALOG_TEMPERATURE:
					sensorOutputs[5*i + 4]     = i+1;
    2ece:	7135      	strb	r5, [r6, #4]
					sensorOutputs[5*i + 4 +1] = adc_start_read_result(inputAnalogChannles[i]);
    2ed0:	7820      	ldrb	r0, [r4, #0]
    2ed2:	4b05      	ldr	r3, [pc, #20]	; (2ee8 <readSensors+0x74>)
    2ed4:	4798      	blx	r3
    2ed6:	7170      	strb	r0, [r6, #5]
					break;
    2ed8:	e7d7      	b.n	2e8a <readSensors+0x16>
					*/
					break;
			}
		}
	//}
}
    2eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2edc:	20000e10 	.word	0x20000e10
    2ee0:	20000fc8 	.word	0x20000fc8
    2ee4:	00005a40 	.word	0x00005a40
    2ee8:	00002c39 	.word	0x00002c39
    2eec:	00005a28 	.word	0x00005a28

00002ef0 <usart_read_callback>:
	usart_enable(&usart_instance);
}

//USART callback with a ring buffer 
void usart_read_callback(struct usart_module *const usart_module)
{
    2ef0:	b082      	sub	sp, #8
	volatile uint16_t recData = 0;
    2ef2:	466b      	mov	r3, sp
    2ef4:	1d99      	adds	r1, r3, #6
    2ef6:	2300      	movs	r3, #0
    2ef8:	800b      	strh	r3, [r1, #0]
	recData = (usart_instance.hw->USART.DATA.reg & SERCOM_USART_DATA_MASK);
    2efa:	4b0b      	ldr	r3, [pc, #44]	; (2f28 <usart_read_callback+0x38>)
    2efc:	681b      	ldr	r3, [r3, #0]
    2efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2f00:	05db      	lsls	r3, r3, #23
    2f02:	0ddb      	lsrs	r3, r3, #23
    2f04:	800b      	strh	r3, [r1, #0]
	*(ringBuffer + headPointer) = (uint8_t)recData;
    2f06:	4a09      	ldr	r2, [pc, #36]	; (2f2c <usart_read_callback+0x3c>)
    2f08:	7810      	ldrb	r0, [r2, #0]
    2f0a:	4b09      	ldr	r3, [pc, #36]	; (2f30 <usart_read_callback+0x40>)
    2f0c:	181b      	adds	r3, r3, r0
    2f0e:	8809      	ldrh	r1, [r1, #0]
    2f10:	b2c9      	uxtb	r1, r1
    2f12:	7019      	strb	r1, [r3, #0]
	headPointer++;
    2f14:	7813      	ldrb	r3, [r2, #0]
    2f16:	3301      	adds	r3, #1
    2f18:	b2db      	uxtb	r3, r3
    2f1a:	7013      	strb	r3, [r2, #0]
	recDataStatus = true;
    2f1c:	2201      	movs	r2, #1
    2f1e:	4b05      	ldr	r3, [pc, #20]	; (2f34 <usart_read_callback+0x44>)
    2f20:	701a      	strb	r2, [r3, #0]
}
    2f22:	b002      	add	sp, #8
    2f24:	4770      	bx	lr
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	20000f38 	.word	0x20000f38
    2f2c:	20001120 	.word	0x20001120
    2f30:	20001168 	.word	0x20001168
    2f34:	20000ff0 	.word	0x20000ff0

00002f38 <serialInit>:
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}

//Main function 
void serialInit()
{
    2f38:	b530      	push	{r4, r5, lr}
    2f3a:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2f3c:	ab01      	add	r3, sp, #4
    2f3e:	2280      	movs	r2, #128	; 0x80
    2f40:	05d2      	lsls	r2, r2, #23
    2f42:	9201      	str	r2, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2f44:	2200      	movs	r2, #0
    2f46:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    2f48:	21ff      	movs	r1, #255	; 0xff
    2f4a:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    2f4c:	2100      	movs	r1, #0
    2f4e:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2f50:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2f52:	2001      	movs	r0, #1
    2f54:	2424      	movs	r4, #36	; 0x24
    2f56:	5518      	strb	r0, [r3, r4]
	config->transmitter_enable = true;
    2f58:	3401      	adds	r4, #1
    2f5a:	5518      	strb	r0, [r3, r4]
	config->clock_polarity_inverted = false;
    2f5c:	3025      	adds	r0, #37	; 0x25
    2f5e:	541a      	strb	r2, [r3, r0]
	config->use_external_clock = false;
    2f60:	3001      	adds	r0, #1
    2f62:	541a      	strb	r2, [r3, r0]
	config->ext_clock_freq   = 0;
    2f64:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2f66:	3005      	adds	r0, #5
    2f68:	541a      	strb	r2, [r3, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2f6a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2f6c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2f6e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2f70:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2f72:	7719      	strb	r1, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2f74:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    2f76:	2213      	movs	r2, #19
    2f78:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2f7a:	7759      	strb	r1, [r3, #29]
	config_usart.baudrate    = BAUDRATE_BLE;
    2f7c:	22e1      	movs	r2, #225	; 0xe1
    2f7e:	0252      	lsls	r2, r2, #9
    2f80:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_SERCOM_MUX_SETTING;
    2f82:	2280      	movs	r2, #128	; 0x80
    2f84:	0392      	lsls	r2, r2, #14
    2f86:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = USART_SERCOM_PINMUX_PAD0_TX;
    2f88:	4a1b      	ldr	r2, [pc, #108]	; (2ff8 <serialInit+0xc0>)
    2f8a:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = USART_SERCOM_PINMUX_PAD1_UNUSED;
    2f8c:	2201      	movs	r2, #1
    2f8e:	4252      	negs	r2, r2
    2f90:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = USART_SERCOM_PINMUX_PAD2_RX;
    2f92:	491a      	ldr	r1, [pc, #104]	; (2ffc <serialInit+0xc4>)
    2f94:	6399      	str	r1, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = USART_SERCOM_PINMUX_PAD3_UNUSED;
    2f96:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.generator_source = GCLK_GENERATOR_3;
    2f98:	2103      	movs	r1, #3
    2f9a:	322e      	adds	r2, #46	; 0x2e
    2f9c:	5499      	strb	r1, [r3, r2]
	while (usart_init(&usart_instance,BLE_UART_MODULE, &config_usart) != STATUS_OK){}
    2f9e:	4d18      	ldr	r5, [pc, #96]	; (3000 <serialInit+0xc8>)
    2fa0:	4c18      	ldr	r4, [pc, #96]	; (3004 <serialInit+0xcc>)
    2fa2:	aa01      	add	r2, sp, #4
    2fa4:	4918      	ldr	r1, [pc, #96]	; (3008 <serialInit+0xd0>)
    2fa6:	0028      	movs	r0, r5
    2fa8:	47a0      	blx	r4
    2faa:	2800      	cmp	r0, #0
    2fac:	d1f9      	bne.n	2fa2 <serialInit+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2fae:	4d14      	ldr	r5, [pc, #80]	; (3000 <serialInit+0xc8>)
    2fb0:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2fb2:	0020      	movs	r0, r4
    2fb4:	4b15      	ldr	r3, [pc, #84]	; (300c <serialInit+0xd4>)
    2fb6:	4798      	blx	r3
    2fb8:	231f      	movs	r3, #31
    2fba:	4018      	ands	r0, r3
    2fbc:	3b1e      	subs	r3, #30
    2fbe:	4083      	lsls	r3, r0
    2fc0:	4a13      	ldr	r2, [pc, #76]	; (3010 <serialInit+0xd8>)
    2fc2:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2fc4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2fc6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2fc8:	2b00      	cmp	r3, #0
    2fca:	d1fc      	bne.n	2fc6 <serialInit+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2fcc:	6823      	ldr	r3, [r4, #0]
    2fce:	2202      	movs	r2, #2
    2fd0:	4313      	orrs	r3, r2
    2fd2:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    2fd4:	4c0a      	ldr	r4, [pc, #40]	; (3000 <serialInit+0xc8>)
    2fd6:	3a01      	subs	r2, #1
    2fd8:	490e      	ldr	r1, [pc, #56]	; (3014 <serialInit+0xdc>)
    2fda:	0020      	movs	r0, r4
    2fdc:	4b0e      	ldr	r3, [pc, #56]	; (3018 <serialInit+0xe0>)
    2fde:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2fe0:	2231      	movs	r2, #49	; 0x31
    2fe2:	5ca3      	ldrb	r3, [r4, r2]
    2fe4:	2102      	movs	r1, #2
    2fe6:	430b      	orrs	r3, r1
    2fe8:	54a3      	strb	r3, [r4, r2]
	uint8_t temp_buffer[MAX_RX_BUFFER_LENGTH];
	configureUSART();
	configureUSARTCallbacks();
	usart_read_buffer_job(&usart_instance,(uint8_t *)temp_buffer, MAX_RX_BUFFER_LENGTH);
    2fea:	3a30      	subs	r2, #48	; 0x30
    2fec:	a911      	add	r1, sp, #68	; 0x44
    2fee:	0020      	movs	r0, r4
    2ff0:	4b0a      	ldr	r3, [pc, #40]	; (301c <serialInit+0xe4>)
    2ff2:	4798      	blx	r3
    2ff4:	b013      	add	sp, #76	; 0x4c
    2ff6:	bd30      	pop	{r4, r5, pc}
    2ff8:	002c0002 	.word	0x002c0002
    2ffc:	002e0002 	.word	0x002e0002
    3000:	20000f38 	.word	0x20000f38
    3004:	000025a9 	.word	0x000025a9
    3008:	42001800 	.word	0x42001800
    300c:	00002519 	.word	0x00002519
    3010:	e000e100 	.word	0xe000e100
    3014:	00002ef1 	.word	0x00002ef1
    3018:	00002a29 	.word	0x00002a29
    301c:	00002a41 	.word	0x00002a41

00003020 <inputOutputConnection>:

uint8_t  inputOutputConnection(uint8_t analogInput)
{
	uint8_t inputOutput = 100;
	
	if((analogInput > MIN_THRES_LIGHT) && (analogInput <= MAX_THRES_LIGHT))
    3020:	0003      	movs	r3, r0
    3022:	3b65      	subs	r3, #101	; 0x65
    3024:	b2db      	uxtb	r3, r3
	{
		inputOutput	=		ANALOG_LIGHT_SENSOR;
    3026:	221f      	movs	r2, #31
	if((analogInput > MIN_THRES_LIGHT) && (analogInput <= MAX_THRES_LIGHT))
    3028:	2b09      	cmp	r3, #9
    302a:	d801      	bhi.n	3030 <inputOutputConnection+0x10>
	else if((analogInput > MIN_THRES_NOTHING) && (analogInput <= MAX_THRES_NOTHING))
	{
		inputOutput	=		NOTHINGCONNECTED;
	}
	return inputOutput;
}
    302c:	0010      	movs	r0, r2
    302e:	4770      	bx	lr
	else if((analogInput > MIN_THRES_DIAL) && (analogInput <= MAX_THRES_DIAL))
    3030:	0001      	movs	r1, r0
    3032:	317d      	adds	r1, #125	; 0x7d
    3034:	b2c9      	uxtb	r1, r1
		inputOutput	=		ANALOG_DIAL;
    3036:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_DIAL) && (analogInput <= MAX_THRES_DIAL))
    3038:	2909      	cmp	r1, #9
    303a:	d9f7      	bls.n	302c <inputOutputConnection+0xc>
		inputOutput	=	    ANALOG_DISTANCE_SENSOR;
    303c:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_DISTANCE) && (analogInput <= MAX_THRES_DISTANCE))
    303e:	2b13      	cmp	r3, #19
    3040:	d9f4      	bls.n	302c <inputOutputConnection+0xc>
		inputOutput	=		ANALOG_SOUND_SENSOR;
    3042:	3a01      	subs	r2, #1
	else if((analogInput > MIN_THRES_SOUND) && (analogInput <= MAX_THRES_SOUND))
    3044:	0003      	movs	r3, r0
    3046:	3b6f      	subs	r3, #111	; 0x6f
    3048:	2b09      	cmp	r3, #9
    304a:	d9ef      	bls.n	302c <inputOutputConnection+0xc>
		inputOutput	=		OUTPUT_SERVO_POSITION;
    304c:	3a1a      	subs	r2, #26
	else if((analogInput > MIN_THRES_SERVO) && (analogInput <= MAX_THRES_SERVO))
    304e:	3328      	adds	r3, #40	; 0x28
    3050:	2b13      	cmp	r3, #19
    3052:	d9eb      	bls.n	302c <inputOutputConnection+0xc>
		inputOutput	=		OUTPUT_LEDMATRIX;
    3054:	3201      	adds	r2, #1
	else if((analogInput > MIN_THRES_LEDMATRIX) && (analogInput <= MAX_THRES_LEDMATRIX))
    3056:	3332      	adds	r3, #50	; 0x32
    3058:	2b1d      	cmp	r3, #29
    305a:	d9e7      	bls.n	302c <inputOutputConnection+0xc>
	else if((analogInput > MIN_THRES_PLACEVALUE) && (analogInput <= MAX_THRES_PLACEVALUE))
    305c:	3360      	adds	r3, #96	; 0x60
    305e:	b2db      	uxtb	r3, r3
		inputOutput	=		INPUT_PLACEVALUE;
    3060:	3218      	adds	r2, #24
	else if((analogInput > MIN_THRES_PLACEVALUE) && (analogInput <= MAX_THRES_PLACEVALUE))
    3062:	2b3b      	cmp	r3, #59	; 0x3b
    3064:	d9e2      	bls.n	302c <inputOutputConnection+0xc>
	uint8_t inputOutput = 100;
    3066:	3249      	adds	r2, #73	; 0x49
	else if((analogInput > MIN_THRES_NOTHING) && (analogInput <= MAX_THRES_NOTHING))
    3068:	28f0      	cmp	r0, #240	; 0xf0
    306a:	d9df      	bls.n	302c <inputOutputConnection+0xc>
		inputOutput	=		NOTHINGCONNECTED;
    306c:	2200      	movs	r2, #0
    306e:	e7dd      	b.n	302c <inputOutputConnection+0xc>

00003070 <convertAnalogOutputs>:


void convertAnalogOutputs(uint8_t* analogOutput)
{
    3070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3072:	0006      	movs	r6, r0
    3074:	4d34      	ldr	r5, [pc, #208]	; (3148 <convertAnalogOutputs+0xd8>)
    3076:	2400      	movs	r4, #0
	uint8_t tempOutput = 0;
	uint8_t i =0;
	uint8_t tempOutputCount = 0;
	for(i=0;i<NO_OUTPUTS;i++)
	{
		tempOutput	=   inputOutputConnection(analogOutput[i]);
    3078:	4f34      	ldr	r7, [pc, #208]	; (314c <convertAnalogOutputs+0xdc>)
    307a:	e011      	b.n	30a0 <convertAnalogOutputs+0x30>
    307c:	0029      	movs	r1, r5
				connecting[i] = true;
				tempOutputsConnected[i] = tempOutput;
			}
			else
			{
				if((connecting[i] == true) && (tempOutputsConnected[i] == tempOutput ))
    307e:	782a      	ldrb	r2, [r5, #0]
    3080:	2a01      	cmp	r2, #1
    3082:	d020      	beq.n	30c6 <convertAnalogOutputs+0x56>
						countConnecting[i] = 0;
					}
				}
				else
				{
					connecting[i] = false;
    3084:	2300      	movs	r3, #0
    3086:	700b      	strb	r3, [r1, #0]
					countConnecting[i] = 0;
    3088:	4a31      	ldr	r2, [pc, #196]	; (3150 <convertAnalogOutputs+0xe0>)
    308a:	54a3      	strb	r3, [r4, r2]
					tempOutputsConnected[i] = NOTHINGCONNECTED;
    308c:	4a31      	ldr	r2, [pc, #196]	; (3154 <convertAnalogOutputs+0xe4>)
    308e:	54a3      	strb	r3, [r4, r2]
				countDisconnection[i] = 0;
				outputsConnected[i]	= NOTHINGCONNECTED;
			}
		}
		
		previousOutputsConnected[i] = outputsConnected[i];
    3090:	4b31      	ldr	r3, [pc, #196]	; (3158 <convertAnalogOutputs+0xe8>)
    3092:	5d1a      	ldrb	r2, [r3, r4]
    3094:	4b31      	ldr	r3, [pc, #196]	; (315c <convertAnalogOutputs+0xec>)
    3096:	54e2      	strb	r2, [r4, r3]
    3098:	3401      	adds	r4, #1
    309a:	3501      	adds	r5, #1
	for(i=0;i<NO_OUTPUTS;i++)
    309c:	2c04      	cmp	r4, #4
    309e:	d03a      	beq.n	3116 <convertAnalogOutputs+0xa6>
		tempOutput	=   inputOutputConnection(analogOutput[i]);
    30a0:	5d30      	ldrb	r0, [r6, r4]
    30a2:	47b8      	blx	r7
    30a4:	1e03      	subs	r3, r0, #0
		if(tempOutput != NOTHINGCONNECTED)
    30a6:	d01f      	beq.n	30e8 <convertAnalogOutputs+0x78>
			countDisconnection[i] = 0;
    30a8:	2200      	movs	r2, #0
    30aa:	492d      	ldr	r1, [pc, #180]	; (3160 <convertAnalogOutputs+0xf0>)
    30ac:	5462      	strb	r2, [r4, r1]
			if((previousOutputsConnected[i] == NOTHINGCONNECTED) && (connecting[i] == false))
    30ae:	4a2b      	ldr	r2, [pc, #172]	; (315c <convertAnalogOutputs+0xec>)
    30b0:	5ca2      	ldrb	r2, [r4, r2]
    30b2:	2a00      	cmp	r2, #0
    30b4:	d1e2      	bne.n	307c <convertAnalogOutputs+0xc>
    30b6:	782a      	ldrb	r2, [r5, #0]
    30b8:	2a00      	cmp	r2, #0
    30ba:	d1df      	bne.n	307c <convertAnalogOutputs+0xc>
				connecting[i] = true;
    30bc:	2301      	movs	r3, #1
    30be:	702b      	strb	r3, [r5, #0]
				tempOutputsConnected[i] = tempOutput;
    30c0:	4b24      	ldr	r3, [pc, #144]	; (3154 <convertAnalogOutputs+0xe4>)
    30c2:	54e0      	strb	r0, [r4, r3]
    30c4:	e7e4      	b.n	3090 <convertAnalogOutputs+0x20>
				if((connecting[i] == true) && (tempOutputsConnected[i] == tempOutput ))
    30c6:	4a23      	ldr	r2, [pc, #140]	; (3154 <convertAnalogOutputs+0xe4>)
    30c8:	5ca2      	ldrb	r2, [r4, r2]
    30ca:	429a      	cmp	r2, r3
    30cc:	d1da      	bne.n	3084 <convertAnalogOutputs+0x14>
					countConnecting[i]++;
    30ce:	4a20      	ldr	r2, [pc, #128]	; (3150 <convertAnalogOutputs+0xe0>)
    30d0:	5ca3      	ldrb	r3, [r4, r2]
    30d2:	3301      	adds	r3, #1
    30d4:	b2db      	uxtb	r3, r3
    30d6:	54a3      	strb	r3, [r4, r2]
					if(countConnecting[i] > COUNT_CONNECTING_THRESHOLD)
    30d8:	2b05      	cmp	r3, #5
    30da:	d9d9      	bls.n	3090 <convertAnalogOutputs+0x20>
						outputsConnected[i] = tempOutput;
    30dc:	4b1e      	ldr	r3, [pc, #120]	; (3158 <convertAnalogOutputs+0xe8>)
    30de:	5518      	strb	r0, [r3, r4]
						connecting[i] = false;
    30e0:	2300      	movs	r3, #0
    30e2:	702b      	strb	r3, [r5, #0]
						countConnecting[i] = 0;
    30e4:	54a3      	strb	r3, [r4, r2]
    30e6:	e7d3      	b.n	3090 <convertAnalogOutputs+0x20>
			countDisconnection[i]++;
    30e8:	4b1d      	ldr	r3, [pc, #116]	; (3160 <convertAnalogOutputs+0xf0>)
    30ea:	5ce3      	ldrb	r3, [r4, r3]
    30ec:	3301      	adds	r3, #1
    30ee:	b2db      	uxtb	r3, r3
    30f0:	4a1b      	ldr	r2, [pc, #108]	; (3160 <convertAnalogOutputs+0xf0>)
    30f2:	54a3      	strb	r3, [r4, r2]
			if(countDisconnection[i] > COUNT_CONNECTING_THRESHOLD)
    30f4:	2b05      	cmp	r3, #5
    30f6:	d9cb      	bls.n	3090 <convertAnalogOutputs+0x20>
				if(i==3)
    30f8:	b2e3      	uxtb	r3, r4
    30fa:	2b03      	cmp	r3, #3
    30fc:	d006      	beq.n	310c <convertAnalogOutputs+0x9c>
				countDisconnection[i] = 0;
    30fe:	2300      	movs	r3, #0
    3100:	4a17      	ldr	r2, [pc, #92]	; (3160 <convertAnalogOutputs+0xf0>)
    3102:	54a3      	strb	r3, [r4, r2]
				outputsConnected[i]	= NOTHINGCONNECTED;
    3104:	4a14      	ldr	r2, [pc, #80]	; (3158 <convertAnalogOutputs+0xe8>)
    3106:	18a2      	adds	r2, r4, r2
    3108:	7013      	strb	r3, [r2, #0]
    310a:	e7c1      	b.n	3090 <convertAnalogOutputs+0x20>
					countDisconnection[3] = 0;
    310c:	2300      	movs	r3, #0
    310e:	70d3      	strb	r3, [r2, #3]
				    outputsConnected[3]	= NOTHINGCONNECTED;
    3110:	4a11      	ldr	r2, [pc, #68]	; (3158 <convertAnalogOutputs+0xe8>)
    3112:	70d3      	strb	r3, [r2, #3]
    3114:	e7f3      	b.n	30fe <convertAnalogOutputs+0x8e>
	}
	temp_test_outputs_connected_1[temp_count] = analogOutput[0] ;
    3116:	4b13      	ldr	r3, [pc, #76]	; (3164 <convertAnalogOutputs+0xf4>)
    3118:	881b      	ldrh	r3, [r3, #0]
    311a:	7831      	ldrb	r1, [r6, #0]
    311c:	4a12      	ldr	r2, [pc, #72]	; (3168 <convertAnalogOutputs+0xf8>)
    311e:	54d1      	strb	r1, [r2, r3]
	temp_test_outputs_connected_2[temp_count] = analogOutput[1] ;
    3120:	7871      	ldrb	r1, [r6, #1]
    3122:	4a12      	ldr	r2, [pc, #72]	; (316c <convertAnalogOutputs+0xfc>)
    3124:	54d1      	strb	r1, [r2, r3]
	temp_test_outputs_connected_3[temp_count] = analogOutput[3] ;
    3126:	78f1      	ldrb	r1, [r6, #3]
    3128:	4a11      	ldr	r2, [pc, #68]	; (3170 <convertAnalogOutputs+0x100>)
    312a:	54d1      	strb	r1, [r2, r3]
	
	temp_count++;
    312c:	3301      	adds	r3, #1
    312e:	b29b      	uxth	r3, r3
	if(temp_count == 500)
    3130:	22fa      	movs	r2, #250	; 0xfa
    3132:	0052      	lsls	r2, r2, #1
    3134:	4293      	cmp	r3, r2
    3136:	d002      	beq.n	313e <convertAnalogOutputs+0xce>
	temp_count++;
    3138:	4a0a      	ldr	r2, [pc, #40]	; (3164 <convertAnalogOutputs+0xf4>)
    313a:	8013      	strh	r3, [r2, #0]
	{
		temp_count = 0;
	}
	
}
    313c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp_count = 0;
    313e:	2200      	movs	r2, #0
    3140:	4b08      	ldr	r3, [pc, #32]	; (3164 <convertAnalogOutputs+0xf4>)
    3142:	801a      	strh	r2, [r3, #0]
}
    3144:	e7fa      	b.n	313c <convertAnalogOutputs+0xcc>
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	20000204 	.word	0x20000204
    314c:	00003021 	.word	0x00003021
    3150:	2000020c 	.word	0x2000020c
    3154:	2000022c 	.word	0x2000022c
    3158:	20000fc4 	.word	0x20000fc4
    315c:	20000220 	.word	0x20000220
    3160:	20000214 	.word	0x20000214
    3164:	20000230 	.word	0x20000230
    3168:	20000810 	.word	0x20000810
    316c:	20000a04 	.word	0x20000a04
    3170:	20000bf8 	.word	0x20000bf8

00003174 <convertAnalogInputs>:




void convertAnalogInputs(uint8_t* analogInputs)
{
    3174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3176:	0006      	movs	r6, r0
    3178:	4d30      	ldr	r5, [pc, #192]	; (323c <convertAnalogInputs+0xc8>)
    317a:	2400      	movs	r4, #0
	uint8_t tempInput = 0;
	uint8_t i =0;
	uint8_t tempInputCount = 0;
	for(i=0;i<NO_SENSORS;i++)
	{
		tempInput			=		inputOutputConnection(analogInputs[i]);
    317c:	4f30      	ldr	r7, [pc, #192]	; (3240 <convertAnalogInputs+0xcc>)
    317e:	e011      	b.n	31a4 <convertAnalogInputs+0x30>
    3180:	0029      	movs	r1, r5
				connecting[i] = true;
				tempInputsConnected[i] = tempInput;
			}
			else 
			{
				if((connecting[i] == true) && (tempInputsConnected[i] == tempInput ))
    3182:	782a      	ldrb	r2, [r5, #0]
    3184:	2a01      	cmp	r2, #1
    3186:	d020      	beq.n	31ca <convertAnalogInputs+0x56>
						countConnecting[i] = 0;
					}
				}
				else
				{
					connecting[i] = false;
    3188:	2300      	movs	r3, #0
    318a:	700b      	strb	r3, [r1, #0]
					countConnecting[i] = 0;
    318c:	4a2d      	ldr	r2, [pc, #180]	; (3244 <convertAnalogInputs+0xd0>)
    318e:	54a3      	strb	r3, [r4, r2]
					tempInputsConnected[i] = NOTHINGCONNECTED;
    3190:	4a2d      	ldr	r2, [pc, #180]	; (3248 <convertAnalogInputs+0xd4>)
    3192:	54a3      	strb	r3, [r4, r2]
				countDisconnection[i]	= 0;
				inputsConnected[i]		= NOTHINGCONNECTED;
			}
		}
		
		previousInputsConnected[i] = inputsConnected[i];
    3194:	4b2d      	ldr	r3, [pc, #180]	; (324c <convertAnalogInputs+0xd8>)
    3196:	5d1a      	ldrb	r2, [r3, r4]
    3198:	4b2d      	ldr	r3, [pc, #180]	; (3250 <convertAnalogInputs+0xdc>)
    319a:	54e2      	strb	r2, [r4, r3]
    319c:	3401      	adds	r4, #1
    319e:	3501      	adds	r5, #1
	for(i=0;i<NO_SENSORS;i++)
    31a0:	2c03      	cmp	r4, #3
    31a2:	d033      	beq.n	320c <convertAnalogInputs+0x98>
		tempInput			=		inputOutputConnection(analogInputs[i]);
    31a4:	5d30      	ldrb	r0, [r6, r4]
    31a6:	47b8      	blx	r7
    31a8:	1e03      	subs	r3, r0, #0
		if(tempInput != NOTHINGCONNECTED)
    31aa:	d01f      	beq.n	31ec <convertAnalogInputs+0x78>
			countDisconnection[i] = 0;
    31ac:	2200      	movs	r2, #0
    31ae:	4929      	ldr	r1, [pc, #164]	; (3254 <convertAnalogInputs+0xe0>)
    31b0:	5462      	strb	r2, [r4, r1]
			if((previousInputsConnected[i] == NOTHINGCONNECTED) && (connecting[i] == false))
    31b2:	4a27      	ldr	r2, [pc, #156]	; (3250 <convertAnalogInputs+0xdc>)
    31b4:	5ca2      	ldrb	r2, [r4, r2]
    31b6:	2a00      	cmp	r2, #0
    31b8:	d1e2      	bne.n	3180 <convertAnalogInputs+0xc>
    31ba:	782a      	ldrb	r2, [r5, #0]
    31bc:	2a00      	cmp	r2, #0
    31be:	d1df      	bne.n	3180 <convertAnalogInputs+0xc>
				connecting[i] = true;
    31c0:	2301      	movs	r3, #1
    31c2:	702b      	strb	r3, [r5, #0]
				tempInputsConnected[i] = tempInput;
    31c4:	4b20      	ldr	r3, [pc, #128]	; (3248 <convertAnalogInputs+0xd4>)
    31c6:	54e0      	strb	r0, [r4, r3]
    31c8:	e7e4      	b.n	3194 <convertAnalogInputs+0x20>
				if((connecting[i] == true) && (tempInputsConnected[i] == tempInput ))
    31ca:	4a1f      	ldr	r2, [pc, #124]	; (3248 <convertAnalogInputs+0xd4>)
    31cc:	5ca2      	ldrb	r2, [r4, r2]
    31ce:	429a      	cmp	r2, r3
    31d0:	d1da      	bne.n	3188 <convertAnalogInputs+0x14>
					countConnecting[i]++;
    31d2:	4a1c      	ldr	r2, [pc, #112]	; (3244 <convertAnalogInputs+0xd0>)
    31d4:	5ca3      	ldrb	r3, [r4, r2]
    31d6:	3301      	adds	r3, #1
    31d8:	b2db      	uxtb	r3, r3
    31da:	54a3      	strb	r3, [r4, r2]
					if(countConnecting[i] > COUNT_CONNECTING_THRESHOLD)
    31dc:	2b05      	cmp	r3, #5
    31de:	d9d9      	bls.n	3194 <convertAnalogInputs+0x20>
						inputsConnected[i] = tempInput;
    31e0:	4b1a      	ldr	r3, [pc, #104]	; (324c <convertAnalogInputs+0xd8>)
    31e2:	5518      	strb	r0, [r3, r4]
						connecting[i] = false;
    31e4:	2300      	movs	r3, #0
    31e6:	702b      	strb	r3, [r5, #0]
						countConnecting[i] = 0;
    31e8:	54a3      	strb	r3, [r4, r2]
    31ea:	e7d3      	b.n	3194 <convertAnalogInputs+0x20>
			countDisconnection[i]++;
    31ec:	4b19      	ldr	r3, [pc, #100]	; (3254 <convertAnalogInputs+0xe0>)
    31ee:	5ce3      	ldrb	r3, [r4, r3]
    31f0:	3301      	adds	r3, #1
    31f2:	b2db      	uxtb	r3, r3
			if(countDisconnection[i] > COUNT_CONNECTING_THRESHOLD)
    31f4:	2b05      	cmp	r3, #5
    31f6:	d802      	bhi.n	31fe <convertAnalogInputs+0x8a>
			countDisconnection[i]++;
    31f8:	4a16      	ldr	r2, [pc, #88]	; (3254 <convertAnalogInputs+0xe0>)
    31fa:	54a3      	strb	r3, [r4, r2]
    31fc:	e7ca      	b.n	3194 <convertAnalogInputs+0x20>
				countDisconnection[i]	= 0;
    31fe:	2300      	movs	r3, #0
    3200:	4a14      	ldr	r2, [pc, #80]	; (3254 <convertAnalogInputs+0xe0>)
    3202:	54a3      	strb	r3, [r4, r2]
				inputsConnected[i]		= NOTHINGCONNECTED;
    3204:	4a11      	ldr	r2, [pc, #68]	; (324c <convertAnalogInputs+0xd8>)
    3206:	18a2      	adds	r2, r4, r2
    3208:	7013      	strb	r3, [r2, #0]
    320a:	e7c3      	b.n	3194 <convertAnalogInputs+0x20>
	{
		NoInDevCon = tempInputCount;
	}
	*/
	
	temp_test_inputs_connected_1[temp_count] = analogInputs[0] ;
    320c:	4b12      	ldr	r3, [pc, #72]	; (3258 <convertAnalogInputs+0xe4>)
    320e:	881b      	ldrh	r3, [r3, #0]
    3210:	7831      	ldrb	r1, [r6, #0]
    3212:	4a12      	ldr	r2, [pc, #72]	; (325c <convertAnalogInputs+0xe8>)
    3214:	54d1      	strb	r1, [r2, r3]
	temp_test_inputs_connected_2[temp_count] = analogInputs[1];
    3216:	7871      	ldrb	r1, [r6, #1]
    3218:	4a11      	ldr	r2, [pc, #68]	; (3260 <convertAnalogInputs+0xec>)
    321a:	54d1      	strb	r1, [r2, r3]
	temp_test_inputs_connected_3[temp_count] = analogInputs[2] ;
    321c:	78b1      	ldrb	r1, [r6, #2]
    321e:	4a11      	ldr	r2, [pc, #68]	; (3264 <convertAnalogInputs+0xf0>)
    3220:	54d1      	strb	r1, [r2, r3]
	
	temp_count++;
    3222:	3301      	adds	r3, #1
    3224:	b29b      	uxth	r3, r3
	if(temp_count == 500)
    3226:	22fa      	movs	r2, #250	; 0xfa
    3228:	0052      	lsls	r2, r2, #1
    322a:	4293      	cmp	r3, r2
    322c:	d002      	beq.n	3234 <convertAnalogInputs+0xc0>
	temp_count++;
    322e:	4a0a      	ldr	r2, [pc, #40]	; (3258 <convertAnalogInputs+0xe4>)
    3230:	8013      	strh	r3, [r2, #0]
	{
		temp_count = 0;
	}
}
    3232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp_count = 0;
    3234:	2200      	movs	r2, #0
    3236:	4b08      	ldr	r3, [pc, #32]	; (3258 <convertAnalogInputs+0xe4>)
    3238:	801a      	strh	r2, [r3, #0]
}
    323a:	e7fa      	b.n	3232 <convertAnalogInputs+0xbe>
    323c:	20000208 	.word	0x20000208
    3240:	00003021 	.word	0x00003021
    3244:	20000210 	.word	0x20000210
    3248:	20000228 	.word	0x20000228
    324c:	20000e10 	.word	0x20000e10
    3250:	2000021c 	.word	0x2000021c
    3254:	20000218 	.word	0x20000218
    3258:	20000232 	.word	0x20000232
    325c:	20000234 	.word	0x20000234
    3260:	20000428 	.word	0x20000428
    3264:	2000061c 	.word	0x2000061c

00003268 <checkOutputs>:



void checkOutputs()
{
    3268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    326a:	2400      	movs	r4, #0
	uint8_t i =0;
	static uint8_t analogOutput[4];
	for(i=0;i<4;i++)
	{
		analogOutput[i] = adc_start_read_result(outputDetectAnalogChannles[i]);
    326c:	4f06      	ldr	r7, [pc, #24]	; (3288 <checkOutputs+0x20>)
    326e:	4e07      	ldr	r6, [pc, #28]	; (328c <checkOutputs+0x24>)
    3270:	4d07      	ldr	r5, [pc, #28]	; (3290 <checkOutputs+0x28>)
    3272:	5de0      	ldrb	r0, [r4, r7]
    3274:	47b0      	blx	r6
    3276:	5560      	strb	r0, [r4, r5]
    3278:	3401      	adds	r4, #1
	for(i=0;i<4;i++)
    327a:	2c04      	cmp	r4, #4
    327c:	d1f9      	bne.n	3272 <checkOutputs+0xa>
	}
	convertAnalogOutputs(analogOutput);
    327e:	4804      	ldr	r0, [pc, #16]	; (3290 <checkOutputs+0x28>)
    3280:	4b04      	ldr	r3, [pc, #16]	; (3294 <checkOutputs+0x2c>)
    3282:	4798      	blx	r3
}
    3284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	00005a44 	.word	0x00005a44
    328c:	00002c39 	.word	0x00002c39
    3290:	20000200 	.word	0x20000200
    3294:	00003071 	.word	0x00003071

00003298 <checkInputs>:


void checkInputs()
{
    3298:	b570      	push	{r4, r5, r6, lr}
	uint8_t i =0;
	static uint8_t analogInput[4];
	for(i=0;i<3;i++)
	{
		analogInput[i]			= adc_start_read_result(sensorDetectAnalogChannles[i]);
    329a:	200e      	movs	r0, #14
    329c:	4d06      	ldr	r5, [pc, #24]	; (32b8 <checkInputs+0x20>)
    329e:	47a8      	blx	r5
    32a0:	4c06      	ldr	r4, [pc, #24]	; (32bc <checkInputs+0x24>)
    32a2:	7020      	strb	r0, [r4, #0]
    32a4:	200d      	movs	r0, #13
    32a6:	47a8      	blx	r5
    32a8:	7060      	strb	r0, [r4, #1]
    32aa:	2012      	movs	r0, #18
    32ac:	47a8      	blx	r5
    32ae:	70a0      	strb	r0, [r4, #2]
	}
	convertAnalogInputs(analogInput);
    32b0:	0020      	movs	r0, r4
    32b2:	4b03      	ldr	r3, [pc, #12]	; (32c0 <checkInputs+0x28>)
    32b4:	4798      	blx	r3
}
    32b6:	bd70      	pop	{r4, r5, r6, pc}
    32b8:	00002c39 	.word	0x00002c39
    32bc:	200001fc 	.word	0x200001fc
    32c0:	00003175 	.word	0x00003175

000032c4 <loadIdentifier>:
	uint32_t temp				= 0;
	uint8_t  i					= 0;
	
	for(i=0;i<NO_OUTPUTS;i++)
	{
		temp		         =  outputsConnected[i];
    32c4:	4a12      	ldr	r2, [pc, #72]	; (3310 <loadIdentifier+0x4c>)
    32c6:	7813      	ldrb	r3, [r2, #0]
		current_identifier  |=  temp << (28 - 4*i);
    32c8:	071b      	lsls	r3, r3, #28
		temp		         =  outputsConnected[i];
    32ca:	7851      	ldrb	r1, [r2, #1]
		current_identifier  |=  temp << (28 - 4*i);
    32cc:	0609      	lsls	r1, r1, #24
    32ce:	430b      	orrs	r3, r1
	}
	
	for(i=0;i<NO_SENSORS;i++)
	{
		temp		  =  inputsConnected[i];
    32d0:	4910      	ldr	r1, [pc, #64]	; (3314 <loadIdentifier+0x50>)
    32d2:	7808      	ldrb	r0, [r1, #0]
		current_identifier  |=  temp << (11-(5*i));
    32d4:	02c0      	lsls	r0, r0, #11
    32d6:	4303      	orrs	r3, r0
		temp		  =  inputsConnected[i];
    32d8:	7848      	ldrb	r0, [r1, #1]
		current_identifier  |=  temp << (11-(5*i));
    32da:	0180      	lsls	r0, r0, #6
    32dc:	4303      	orrs	r3, r0
		temp		         =  outputsConnected[i];
    32de:	7890      	ldrb	r0, [r2, #2]
		current_identifier  |=  temp << (28 - 4*i);
    32e0:	0500      	lsls	r0, r0, #20
    32e2:	4303      	orrs	r3, r0
		temp		  =  inputsConnected[i];
    32e4:	7889      	ldrb	r1, [r1, #2]
		current_identifier  |=  temp << (11-(5*i));
    32e6:	0049      	lsls	r1, r1, #1
    32e8:	430b      	orrs	r3, r1
		temp		         =  outputsConnected[i];
    32ea:	78d2      	ldrb	r2, [r2, #3]
		current_identifier  |=  temp << (28 - 4*i);
    32ec:	0412      	lsls	r2, r2, #16
		current_identifier  |=  temp << (11-(5*i));
    32ee:	4313      	orrs	r3, r2
	}

	if(current_identifier != previous_identifier)
    32f0:	4a09      	ldr	r2, [pc, #36]	; (3318 <loadIdentifier+0x54>)
    32f2:	6812      	ldr	r2, [r2, #0]
    32f4:	4293      	cmp	r3, r2
    32f6:	d009      	beq.n	330c <loadIdentifier+0x48>
	{
		for(i=0;i<4;i++)
		{
			sensorOutputs[i] = (current_identifier >> 8* (3-i)) & 0x000000FF ;
    32f8:	4a08      	ldr	r2, [pc, #32]	; (331c <loadIdentifier+0x58>)
    32fa:	0e19      	lsrs	r1, r3, #24
    32fc:	7011      	strb	r1, [r2, #0]
    32fe:	0c19      	lsrs	r1, r3, #16
    3300:	7051      	strb	r1, [r2, #1]
    3302:	0a19      	lsrs	r1, r3, #8
    3304:	7091      	strb	r1, [r2, #2]
    3306:	70d3      	strb	r3, [r2, #3]
		}
		previous_identifier = current_identifier;
    3308:	4a03      	ldr	r2, [pc, #12]	; (3318 <loadIdentifier+0x54>)
    330a:	6013      	str	r3, [r2, #0]
	}
}
    330c:	4770      	bx	lr
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	20000fc4 	.word	0x20000fc4
    3314:	20000e10 	.word	0x20000e10
    3318:	20000224 	.word	0x20000224
    331c:	20000fc8 	.word	0x20000fc8

00003320 <checkOutputsInputs>:

void checkOutputsInputs()
{
    3320:	b510      	push	{r4, lr}
	checkOutputs();
    3322:	4b03      	ldr	r3, [pc, #12]	; (3330 <checkOutputsInputs+0x10>)
    3324:	4798      	blx	r3
	checkInputs();
    3326:	4b03      	ldr	r3, [pc, #12]	; (3334 <checkOutputsInputs+0x14>)
    3328:	4798      	blx	r3
	loadIdentifier(); //Set the identifier which will be used in the notifications by the Bluetooth
    332a:	4b03      	ldr	r3, [pc, #12]	; (3338 <checkOutputsInputs+0x18>)
    332c:	4798      	blx	r3
}
    332e:	bd10      	pop	{r4, pc}
    3330:	00003269 	.word	0x00003269
    3334:	00003299 	.word	0x00003299
    3338:	000032c5 	.word	0x000032c5

0000333c <configureInputOutputDetection>:


void configureInputOutputDetection()
{
    333c:	b510      	push	{r4, lr}
	configureADC();
    333e:	4b01      	ldr	r3, [pc, #4]	; (3344 <configureInputOutputDetection+0x8>)
    3340:	4798      	blx	r3
    3342:	bd10      	pop	{r4, pc}
    3344:	00002bb1 	.word	0x00002bb1

00003348 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    3348:	4770      	bx	lr
	...

0000334c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    334c:	4b0c      	ldr	r3, [pc, #48]	; (3380 <cpu_irq_enter_critical+0x34>)
    334e:	681b      	ldr	r3, [r3, #0]
    3350:	2b00      	cmp	r3, #0
    3352:	d106      	bne.n	3362 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3354:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3358:	2b00      	cmp	r3, #0
    335a:	d007      	beq.n	336c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    335c:	2200      	movs	r2, #0
    335e:	4b09      	ldr	r3, [pc, #36]	; (3384 <cpu_irq_enter_critical+0x38>)
    3360:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3362:	4a07      	ldr	r2, [pc, #28]	; (3380 <cpu_irq_enter_critical+0x34>)
    3364:	6813      	ldr	r3, [r2, #0]
    3366:	3301      	adds	r3, #1
    3368:	6013      	str	r3, [r2, #0]
}
    336a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    336c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    336e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3372:	2200      	movs	r2, #0
    3374:	4b04      	ldr	r3, [pc, #16]	; (3388 <cpu_irq_enter_critical+0x3c>)
    3376:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3378:	3201      	adds	r2, #1
    337a:	4b02      	ldr	r3, [pc, #8]	; (3384 <cpu_irq_enter_critical+0x38>)
    337c:	701a      	strb	r2, [r3, #0]
    337e:	e7f0      	b.n	3362 <cpu_irq_enter_critical+0x16>
    3380:	20000dec 	.word	0x20000dec
    3384:	20000df0 	.word	0x20000df0
    3388:	20000054 	.word	0x20000054

0000338c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    338c:	4b08      	ldr	r3, [pc, #32]	; (33b0 <cpu_irq_leave_critical+0x24>)
    338e:	681a      	ldr	r2, [r3, #0]
    3390:	3a01      	subs	r2, #1
    3392:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3394:	681b      	ldr	r3, [r3, #0]
    3396:	2b00      	cmp	r3, #0
    3398:	d109      	bne.n	33ae <cpu_irq_leave_critical+0x22>
    339a:	4b06      	ldr	r3, [pc, #24]	; (33b4 <cpu_irq_leave_critical+0x28>)
    339c:	781b      	ldrb	r3, [r3, #0]
    339e:	2b00      	cmp	r3, #0
    33a0:	d005      	beq.n	33ae <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    33a2:	2201      	movs	r2, #1
    33a4:	4b04      	ldr	r3, [pc, #16]	; (33b8 <cpu_irq_leave_critical+0x2c>)
    33a6:	701a      	strb	r2, [r3, #0]
    33a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    33ac:	b662      	cpsie	i
	}
}
    33ae:	4770      	bx	lr
    33b0:	20000dec 	.word	0x20000dec
    33b4:	20000df0 	.word	0x20000df0
    33b8:	20000054 	.word	0x20000054

000033bc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    33bc:	b510      	push	{r4, lr}
	switch (clock_source) {
    33be:	2808      	cmp	r0, #8
    33c0:	d803      	bhi.n	33ca <system_clock_source_get_hz+0xe>
    33c2:	0080      	lsls	r0, r0, #2
    33c4:	4b1b      	ldr	r3, [pc, #108]	; (3434 <system_clock_source_get_hz+0x78>)
    33c6:	581b      	ldr	r3, [r3, r0]
    33c8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    33ca:	2000      	movs	r0, #0
    33cc:	e030      	b.n	3430 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    33ce:	4b1a      	ldr	r3, [pc, #104]	; (3438 <system_clock_source_get_hz+0x7c>)
    33d0:	6918      	ldr	r0, [r3, #16]
    33d2:	e02d      	b.n	3430 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    33d4:	4b19      	ldr	r3, [pc, #100]	; (343c <system_clock_source_get_hz+0x80>)
    33d6:	6a1b      	ldr	r3, [r3, #32]
    33d8:	059b      	lsls	r3, r3, #22
    33da:	0f9b      	lsrs	r3, r3, #30
    33dc:	4818      	ldr	r0, [pc, #96]	; (3440 <system_clock_source_get_hz+0x84>)
    33de:	40d8      	lsrs	r0, r3
    33e0:	e026      	b.n	3430 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    33e2:	4b15      	ldr	r3, [pc, #84]	; (3438 <system_clock_source_get_hz+0x7c>)
    33e4:	6958      	ldr	r0, [r3, #20]
    33e6:	e023      	b.n	3430 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    33e8:	4b13      	ldr	r3, [pc, #76]	; (3438 <system_clock_source_get_hz+0x7c>)
    33ea:	681b      	ldr	r3, [r3, #0]
			return 0;
    33ec:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    33ee:	079b      	lsls	r3, r3, #30
    33f0:	d51e      	bpl.n	3430 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    33f2:	4912      	ldr	r1, [pc, #72]	; (343c <system_clock_source_get_hz+0x80>)
    33f4:	2210      	movs	r2, #16
    33f6:	68cb      	ldr	r3, [r1, #12]
    33f8:	421a      	tst	r2, r3
    33fa:	d0fc      	beq.n	33f6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    33fc:	4b0e      	ldr	r3, [pc, #56]	; (3438 <system_clock_source_get_hz+0x7c>)
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	075b      	lsls	r3, r3, #29
    3402:	d401      	bmi.n	3408 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    3404:	480f      	ldr	r0, [pc, #60]	; (3444 <system_clock_source_get_hz+0x88>)
    3406:	e013      	b.n	3430 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3408:	2000      	movs	r0, #0
    340a:	4b0f      	ldr	r3, [pc, #60]	; (3448 <system_clock_source_get_hz+0x8c>)
    340c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    340e:	4b0a      	ldr	r3, [pc, #40]	; (3438 <system_clock_source_get_hz+0x7c>)
    3410:	689b      	ldr	r3, [r3, #8]
    3412:	041b      	lsls	r3, r3, #16
    3414:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3416:	4358      	muls	r0, r3
    3418:	e00a      	b.n	3430 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    341a:	2350      	movs	r3, #80	; 0x50
    341c:	4a07      	ldr	r2, [pc, #28]	; (343c <system_clock_source_get_hz+0x80>)
    341e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3420:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3422:	075b      	lsls	r3, r3, #29
    3424:	d504      	bpl.n	3430 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    3426:	4b04      	ldr	r3, [pc, #16]	; (3438 <system_clock_source_get_hz+0x7c>)
    3428:	68d8      	ldr	r0, [r3, #12]
    342a:	e001      	b.n	3430 <system_clock_source_get_hz+0x74>
		return 32768UL;
    342c:	2080      	movs	r0, #128	; 0x80
    342e:	0200      	lsls	r0, r0, #8
	}
}
    3430:	bd10      	pop	{r4, pc}
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	00005a48 	.word	0x00005a48
    3438:	20000df4 	.word	0x20000df4
    343c:	40000800 	.word	0x40000800
    3440:	007a1200 	.word	0x007a1200
    3444:	02dc6c00 	.word	0x02dc6c00
    3448:	000039fd 	.word	0x000039fd

0000344c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    344c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    344e:	490c      	ldr	r1, [pc, #48]	; (3480 <system_clock_source_osc8m_set_config+0x34>)
    3450:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3452:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3454:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3456:	7840      	ldrb	r0, [r0, #1]
    3458:	2201      	movs	r2, #1
    345a:	4010      	ands	r0, r2
    345c:	0180      	lsls	r0, r0, #6
    345e:	2640      	movs	r6, #64	; 0x40
    3460:	43b3      	bics	r3, r6
    3462:	4303      	orrs	r3, r0
    3464:	402a      	ands	r2, r5
    3466:	01d2      	lsls	r2, r2, #7
    3468:	2080      	movs	r0, #128	; 0x80
    346a:	4383      	bics	r3, r0
    346c:	4313      	orrs	r3, r2
    346e:	2203      	movs	r2, #3
    3470:	4022      	ands	r2, r4
    3472:	0212      	lsls	r2, r2, #8
    3474:	4803      	ldr	r0, [pc, #12]	; (3484 <system_clock_source_osc8m_set_config+0x38>)
    3476:	4003      	ands	r3, r0
    3478:	4313      	orrs	r3, r2
    347a:	620b      	str	r3, [r1, #32]
}
    347c:	bd70      	pop	{r4, r5, r6, pc}
    347e:	46c0      	nop			; (mov r8, r8)
    3480:	40000800 	.word	0x40000800
    3484:	fffffcff 	.word	0xfffffcff

00003488 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    3488:	b5f0      	push	{r4, r5, r6, r7, lr}
    348a:	46ce      	mov	lr, r9
    348c:	4647      	mov	r7, r8
    348e:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    3490:	4b19      	ldr	r3, [pc, #100]	; (34f8 <system_clock_source_osc32k_set_config+0x70>)
    3492:	4699      	mov	r9, r3
    3494:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    3496:	7841      	ldrb	r1, [r0, #1]
    3498:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    349a:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    349c:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    349e:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    34a0:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    34a2:	7880      	ldrb	r0, [r0, #2]
    34a4:	2101      	movs	r1, #1
    34a6:	4008      	ands	r0, r1
    34a8:	0080      	lsls	r0, r0, #2
    34aa:	2204      	movs	r2, #4
    34ac:	4393      	bics	r3, r2
    34ae:	4303      	orrs	r3, r0
    34b0:	4660      	mov	r0, ip
    34b2:	4008      	ands	r0, r1
    34b4:	00c0      	lsls	r0, r0, #3
    34b6:	3204      	adds	r2, #4
    34b8:	4393      	bics	r3, r2
    34ba:	4303      	orrs	r3, r0
    34bc:	0038      	movs	r0, r7
    34be:	4008      	ands	r0, r1
    34c0:	0180      	lsls	r0, r0, #6
    34c2:	2740      	movs	r7, #64	; 0x40
    34c4:	43bb      	bics	r3, r7
    34c6:	4303      	orrs	r3, r0
    34c8:	0030      	movs	r0, r6
    34ca:	4008      	ands	r0, r1
    34cc:	01c0      	lsls	r0, r0, #7
    34ce:	2680      	movs	r6, #128	; 0x80
    34d0:	43b3      	bics	r3, r6
    34d2:	4303      	orrs	r3, r0
    34d4:	2007      	movs	r0, #7
    34d6:	4005      	ands	r5, r0
    34d8:	022d      	lsls	r5, r5, #8
    34da:	4808      	ldr	r0, [pc, #32]	; (34fc <system_clock_source_osc32k_set_config+0x74>)
    34dc:	4003      	ands	r3, r0
    34de:	432b      	orrs	r3, r5
    34e0:	4021      	ands	r1, r4
    34e2:	0309      	lsls	r1, r1, #12
    34e4:	4806      	ldr	r0, [pc, #24]	; (3500 <system_clock_source_osc32k_set_config+0x78>)
    34e6:	4003      	ands	r3, r0
    34e8:	430b      	orrs	r3, r1
    34ea:	464a      	mov	r2, r9
    34ec:	6193      	str	r3, [r2, #24]
}
    34ee:	bc0c      	pop	{r2, r3}
    34f0:	4690      	mov	r8, r2
    34f2:	4699      	mov	r9, r3
    34f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34f6:	46c0      	nop			; (mov r8, r8)
    34f8:	40000800 	.word	0x40000800
    34fc:	fffff8ff 	.word	0xfffff8ff
    3500:	ffffefff 	.word	0xffffefff

00003504 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3504:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3506:	7a03      	ldrb	r3, [r0, #8]
    3508:	069b      	lsls	r3, r3, #26
    350a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    350c:	8942      	ldrh	r2, [r0, #10]
    350e:	0592      	lsls	r2, r2, #22
    3510:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3512:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3514:	4918      	ldr	r1, [pc, #96]	; (3578 <system_clock_source_dfll_set_config+0x74>)
    3516:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3518:	7983      	ldrb	r3, [r0, #6]
    351a:	79c2      	ldrb	r2, [r0, #7]
    351c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    351e:	8842      	ldrh	r2, [r0, #2]
    3520:	8884      	ldrh	r4, [r0, #4]
    3522:	4322      	orrs	r2, r4
    3524:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3526:	7842      	ldrb	r2, [r0, #1]
    3528:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    352a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    352c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    352e:	7803      	ldrb	r3, [r0, #0]
    3530:	2b04      	cmp	r3, #4
    3532:	d011      	beq.n	3558 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3534:	2b20      	cmp	r3, #32
    3536:	d10e      	bne.n	3556 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3538:	7b03      	ldrb	r3, [r0, #12]
    353a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    353c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    353e:	4313      	orrs	r3, r2
    3540:	89c2      	ldrh	r2, [r0, #14]
    3542:	0412      	lsls	r2, r2, #16
    3544:	490d      	ldr	r1, [pc, #52]	; (357c <system_clock_source_dfll_set_config+0x78>)
    3546:	400a      	ands	r2, r1
    3548:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    354a:	4a0b      	ldr	r2, [pc, #44]	; (3578 <system_clock_source_dfll_set_config+0x74>)
    354c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    354e:	6811      	ldr	r1, [r2, #0]
    3550:	4b0b      	ldr	r3, [pc, #44]	; (3580 <system_clock_source_dfll_set_config+0x7c>)
    3552:	430b      	orrs	r3, r1
    3554:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    3556:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3558:	7b03      	ldrb	r3, [r0, #12]
    355a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    355c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    355e:	4313      	orrs	r3, r2
    3560:	89c2      	ldrh	r2, [r0, #14]
    3562:	0412      	lsls	r2, r2, #16
    3564:	4905      	ldr	r1, [pc, #20]	; (357c <system_clock_source_dfll_set_config+0x78>)
    3566:	400a      	ands	r2, r1
    3568:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    356a:	4a03      	ldr	r2, [pc, #12]	; (3578 <system_clock_source_dfll_set_config+0x74>)
    356c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    356e:	6813      	ldr	r3, [r2, #0]
    3570:	2104      	movs	r1, #4
    3572:	430b      	orrs	r3, r1
    3574:	6013      	str	r3, [r2, #0]
    3576:	e7ee      	b.n	3556 <system_clock_source_dfll_set_config+0x52>
    3578:	20000df4 	.word	0x20000df4
    357c:	03ff0000 	.word	0x03ff0000
    3580:	00000424 	.word	0x00000424

00003584 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3584:	2808      	cmp	r0, #8
    3586:	d803      	bhi.n	3590 <system_clock_source_enable+0xc>
    3588:	0080      	lsls	r0, r0, #2
    358a:	4b25      	ldr	r3, [pc, #148]	; (3620 <system_clock_source_enable+0x9c>)
    358c:	581b      	ldr	r3, [r3, r0]
    358e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3590:	2017      	movs	r0, #23
    3592:	e044      	b.n	361e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3594:	4a23      	ldr	r2, [pc, #140]	; (3624 <system_clock_source_enable+0xa0>)
    3596:	6a13      	ldr	r3, [r2, #32]
    3598:	2102      	movs	r1, #2
    359a:	430b      	orrs	r3, r1
    359c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    359e:	2000      	movs	r0, #0
    35a0:	e03d      	b.n	361e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    35a2:	4a20      	ldr	r2, [pc, #128]	; (3624 <system_clock_source_enable+0xa0>)
    35a4:	6993      	ldr	r3, [r2, #24]
    35a6:	2102      	movs	r1, #2
    35a8:	430b      	orrs	r3, r1
    35aa:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    35ac:	2000      	movs	r0, #0
		break;
    35ae:	e036      	b.n	361e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    35b0:	4a1c      	ldr	r2, [pc, #112]	; (3624 <system_clock_source_enable+0xa0>)
    35b2:	8a13      	ldrh	r3, [r2, #16]
    35b4:	2102      	movs	r1, #2
    35b6:	430b      	orrs	r3, r1
    35b8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    35ba:	2000      	movs	r0, #0
		break;
    35bc:	e02f      	b.n	361e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    35be:	4a19      	ldr	r2, [pc, #100]	; (3624 <system_clock_source_enable+0xa0>)
    35c0:	8a93      	ldrh	r3, [r2, #20]
    35c2:	2102      	movs	r1, #2
    35c4:	430b      	orrs	r3, r1
    35c6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    35c8:	2000      	movs	r0, #0
		break;
    35ca:	e028      	b.n	361e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    35cc:	4916      	ldr	r1, [pc, #88]	; (3628 <system_clock_source_enable+0xa4>)
    35ce:	680b      	ldr	r3, [r1, #0]
    35d0:	2202      	movs	r2, #2
    35d2:	4313      	orrs	r3, r2
    35d4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    35d6:	4b13      	ldr	r3, [pc, #76]	; (3624 <system_clock_source_enable+0xa0>)
    35d8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    35da:	0019      	movs	r1, r3
    35dc:	320e      	adds	r2, #14
    35de:	68cb      	ldr	r3, [r1, #12]
    35e0:	421a      	tst	r2, r3
    35e2:	d0fc      	beq.n	35de <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    35e4:	4a10      	ldr	r2, [pc, #64]	; (3628 <system_clock_source_enable+0xa4>)
    35e6:	6891      	ldr	r1, [r2, #8]
    35e8:	4b0e      	ldr	r3, [pc, #56]	; (3624 <system_clock_source_enable+0xa0>)
    35ea:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    35ec:	6852      	ldr	r2, [r2, #4]
    35ee:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    35f0:	2200      	movs	r2, #0
    35f2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    35f4:	0019      	movs	r1, r3
    35f6:	3210      	adds	r2, #16
    35f8:	68cb      	ldr	r3, [r1, #12]
    35fa:	421a      	tst	r2, r3
    35fc:	d0fc      	beq.n	35f8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    35fe:	4b0a      	ldr	r3, [pc, #40]	; (3628 <system_clock_source_enable+0xa4>)
    3600:	681b      	ldr	r3, [r3, #0]
    3602:	b29b      	uxth	r3, r3
    3604:	4a07      	ldr	r2, [pc, #28]	; (3624 <system_clock_source_enable+0xa0>)
    3606:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3608:	2000      	movs	r0, #0
    360a:	e008      	b.n	361e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    360c:	4905      	ldr	r1, [pc, #20]	; (3624 <system_clock_source_enable+0xa0>)
    360e:	2244      	movs	r2, #68	; 0x44
    3610:	5c8b      	ldrb	r3, [r1, r2]
    3612:	2002      	movs	r0, #2
    3614:	4303      	orrs	r3, r0
    3616:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3618:	2000      	movs	r0, #0
		break;
    361a:	e000      	b.n	361e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    361c:	2000      	movs	r0, #0
}
    361e:	4770      	bx	lr
    3620:	00005a6c 	.word	0x00005a6c
    3624:	40000800 	.word	0x40000800
    3628:	20000df4 	.word	0x20000df4

0000362c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    362c:	b5f0      	push	{r4, r5, r6, r7, lr}
    362e:	46ce      	mov	lr, r9
    3630:	4647      	mov	r7, r8
    3632:	b580      	push	{r7, lr}
    3634:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3636:	22c2      	movs	r2, #194	; 0xc2
    3638:	00d2      	lsls	r2, r2, #3
    363a:	4b4d      	ldr	r3, [pc, #308]	; (3770 <system_clock_init+0x144>)
    363c:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    363e:	494d      	ldr	r1, [pc, #308]	; (3774 <system_clock_init+0x148>)
    3640:	684b      	ldr	r3, [r1, #4]
    3642:	221e      	movs	r2, #30
    3644:	4393      	bics	r3, r2
    3646:	3a1c      	subs	r2, #28
    3648:	4313      	orrs	r3, r2
    364a:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    364c:	ab01      	add	r3, sp, #4
    364e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3650:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3652:	4d49      	ldr	r5, [pc, #292]	; (3778 <system_clock_init+0x14c>)
    3654:	b2e0      	uxtb	r0, r4
    3656:	a901      	add	r1, sp, #4
    3658:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    365a:	3401      	adds	r4, #1
    365c:	2c25      	cmp	r4, #37	; 0x25
    365e:	d1f9      	bne.n	3654 <system_clock_init+0x28>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    3660:	4c46      	ldr	r4, [pc, #280]	; (377c <system_clock_init+0x150>)
	SYSCTRL->OSC32K.bit.CALIB =
    3662:	6823      	ldr	r3, [r4, #0]
    3664:	04db      	lsls	r3, r3, #19
    3666:	4942      	ldr	r1, [pc, #264]	; (3770 <system_clock_init+0x144>)
    3668:	698a      	ldr	r2, [r1, #24]
    366a:	0e5b      	lsrs	r3, r3, #25
    366c:	041b      	lsls	r3, r3, #16
    366e:	4844      	ldr	r0, [pc, #272]	; (3780 <system_clock_init+0x154>)
    3670:	4002      	ands	r2, r0
    3672:	4313      	orrs	r3, r2
    3674:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    3676:	a80a      	add	r0, sp, #40	; 0x28
    3678:	2301      	movs	r3, #1
    367a:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    367c:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    367e:	2500      	movs	r5, #0
    3680:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    3682:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    3684:	3306      	adds	r3, #6
    3686:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    3688:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    368a:	4b3e      	ldr	r3, [pc, #248]	; (3784 <system_clock_init+0x158>)
    368c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    368e:	2004      	movs	r0, #4
    3690:	4b3d      	ldr	r3, [pc, #244]	; (3788 <system_clock_init+0x15c>)
    3692:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3694:	ab05      	add	r3, sp, #20
    3696:	2200      	movs	r2, #0
    3698:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    369a:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    369c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    369e:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    36a0:	213f      	movs	r1, #63	; 0x3f
    36a2:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    36a4:	393b      	subs	r1, #59	; 0x3b
    36a6:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    36a8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    36aa:	6823      	ldr	r3, [r4, #0]
    36ac:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    36ae:	2b3f      	cmp	r3, #63	; 0x3f
    36b0:	d05b      	beq.n	376a <system_clock_init+0x13e>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    36b2:	a805      	add	r0, sp, #20
    36b4:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    36b6:	23b7      	movs	r3, #183	; 0xb7
    36b8:	00db      	lsls	r3, r3, #3
    36ba:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    36bc:	2307      	movs	r3, #7
    36be:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    36c0:	3338      	adds	r3, #56	; 0x38
    36c2:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    36c4:	4b31      	ldr	r3, [pc, #196]	; (378c <system_clock_init+0x160>)
    36c6:	4798      	blx	r3
	config->run_in_standby  = false;
    36c8:	a804      	add	r0, sp, #16
    36ca:	2500      	movs	r5, #0
    36cc:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    36ce:	2601      	movs	r6, #1
    36d0:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    36d2:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    36d4:	4b2e      	ldr	r3, [pc, #184]	; (3790 <system_clock_init+0x164>)
    36d6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    36d8:	2006      	movs	r0, #6
    36da:	4f2b      	ldr	r7, [pc, #172]	; (3788 <system_clock_init+0x15c>)
    36dc:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    36de:	4b2d      	ldr	r3, [pc, #180]	; (3794 <system_clock_init+0x168>)
    36e0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    36e2:	ac01      	add	r4, sp, #4
    36e4:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    36e6:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    36e8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    36ea:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    36ec:	2304      	movs	r3, #4
    36ee:	7023      	strb	r3, [r4, #0]
    36f0:	0021      	movs	r1, r4
    36f2:	2001      	movs	r0, #1
    36f4:	4b28      	ldr	r3, [pc, #160]	; (3798 <system_clock_init+0x16c>)
    36f6:	4699      	mov	r9, r3
    36f8:	4798      	blx	r3
    36fa:	2001      	movs	r0, #1
    36fc:	4b27      	ldr	r3, [pc, #156]	; (379c <system_clock_init+0x170>)
    36fe:	4698      	mov	r8, r3
    3700:	4798      	blx	r3
	config->division_factor    = 1;
    3702:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3704:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3706:	2306      	movs	r3, #6
    3708:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    370a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    370c:	7265      	strb	r5, [r4, #9]
    370e:	0021      	movs	r1, r4
    3710:	2003      	movs	r0, #3
    3712:	47c8      	blx	r9
    3714:	2003      	movs	r0, #3
    3716:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3718:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    371a:	0021      	movs	r1, r4
    371c:	2000      	movs	r0, #0
    371e:	4b16      	ldr	r3, [pc, #88]	; (3778 <system_clock_init+0x14c>)
    3720:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    3722:	2000      	movs	r0, #0
    3724:	4b1e      	ldr	r3, [pc, #120]	; (37a0 <system_clock_init+0x174>)
    3726:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    3728:	2007      	movs	r0, #7
    372a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    372c:	4910      	ldr	r1, [pc, #64]	; (3770 <system_clock_init+0x144>)
    372e:	22d0      	movs	r2, #208	; 0xd0
    3730:	68cb      	ldr	r3, [r1, #12]
    3732:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3734:	2bd0      	cmp	r3, #208	; 0xd0
    3736:	d1fb      	bne.n	3730 <system_clock_init+0x104>
	PM->CPUSEL.reg = (uint32_t)divider;
    3738:	4a1a      	ldr	r2, [pc, #104]	; (37a4 <system_clock_init+0x178>)
    373a:	2300      	movs	r3, #0
    373c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    373e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3740:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3742:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    3744:	a901      	add	r1, sp, #4
    3746:	2201      	movs	r2, #1
    3748:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    374a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    374c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    374e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3750:	3307      	adds	r3, #7
    3752:	700b      	strb	r3, [r1, #0]
    3754:	2000      	movs	r0, #0
    3756:	4b10      	ldr	r3, [pc, #64]	; (3798 <system_clock_init+0x16c>)
    3758:	4798      	blx	r3
    375a:	2000      	movs	r0, #0
    375c:	4b0f      	ldr	r3, [pc, #60]	; (379c <system_clock_init+0x170>)
    375e:	4798      	blx	r3
#endif
}
    3760:	b00d      	add	sp, #52	; 0x34
    3762:	bc0c      	pop	{r2, r3}
    3764:	4690      	mov	r8, r2
    3766:	4699      	mov	r9, r3
    3768:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    376a:	3b20      	subs	r3, #32
    376c:	e7a1      	b.n	36b2 <system_clock_init+0x86>
    376e:	46c0      	nop			; (mov r8, r8)
    3770:	40000800 	.word	0x40000800
    3774:	41004000 	.word	0x41004000
    3778:	000039e1 	.word	0x000039e1
    377c:	00806024 	.word	0x00806024
    3780:	ff80ffff 	.word	0xff80ffff
    3784:	00003489 	.word	0x00003489
    3788:	00003585 	.word	0x00003585
    378c:	00003505 	.word	0x00003505
    3790:	0000344d 	.word	0x0000344d
    3794:	000037a9 	.word	0x000037a9
    3798:	000037cd 	.word	0x000037cd
    379c:	00003885 	.word	0x00003885
    37a0:	00003955 	.word	0x00003955
    37a4:	40000400 	.word	0x40000400

000037a8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    37a8:	4a06      	ldr	r2, [pc, #24]	; (37c4 <system_gclk_init+0x1c>)
    37aa:	6993      	ldr	r3, [r2, #24]
    37ac:	2108      	movs	r1, #8
    37ae:	430b      	orrs	r3, r1
    37b0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    37b2:	2201      	movs	r2, #1
    37b4:	4b04      	ldr	r3, [pc, #16]	; (37c8 <system_gclk_init+0x20>)
    37b6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    37b8:	0019      	movs	r1, r3
    37ba:	780b      	ldrb	r3, [r1, #0]
    37bc:	4213      	tst	r3, r2
    37be:	d1fc      	bne.n	37ba <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    37c0:	4770      	bx	lr
    37c2:	46c0      	nop			; (mov r8, r8)
    37c4:	40000400 	.word	0x40000400
    37c8:	40000c00 	.word	0x40000c00

000037cc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    37cc:	b570      	push	{r4, r5, r6, lr}
    37ce:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    37d0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    37d2:	780d      	ldrb	r5, [r1, #0]
    37d4:	022d      	lsls	r5, r5, #8
    37d6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    37d8:	784b      	ldrb	r3, [r1, #1]
    37da:	2b00      	cmp	r3, #0
    37dc:	d002      	beq.n	37e4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    37de:	2380      	movs	r3, #128	; 0x80
    37e0:	02db      	lsls	r3, r3, #11
    37e2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    37e4:	7a4b      	ldrb	r3, [r1, #9]
    37e6:	2b00      	cmp	r3, #0
    37e8:	d002      	beq.n	37f0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    37ea:	2380      	movs	r3, #128	; 0x80
    37ec:	031b      	lsls	r3, r3, #12
    37ee:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    37f0:	6848      	ldr	r0, [r1, #4]
    37f2:	2801      	cmp	r0, #1
    37f4:	d910      	bls.n	3818 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    37f6:	1e43      	subs	r3, r0, #1
    37f8:	4218      	tst	r0, r3
    37fa:	d134      	bne.n	3866 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    37fc:	2802      	cmp	r0, #2
    37fe:	d930      	bls.n	3862 <system_gclk_gen_set_config+0x96>
    3800:	2302      	movs	r3, #2
    3802:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3804:	3201      	adds	r2, #1
						mask <<= 1) {
    3806:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3808:	4298      	cmp	r0, r3
    380a:	d8fb      	bhi.n	3804 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    380c:	0212      	lsls	r2, r2, #8
    380e:	4332      	orrs	r2, r6
    3810:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3812:	2380      	movs	r3, #128	; 0x80
    3814:	035b      	lsls	r3, r3, #13
    3816:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3818:	7a0b      	ldrb	r3, [r1, #8]
    381a:	2b00      	cmp	r3, #0
    381c:	d002      	beq.n	3824 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    381e:	2380      	movs	r3, #128	; 0x80
    3820:	039b      	lsls	r3, r3, #14
    3822:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3824:	4a13      	ldr	r2, [pc, #76]	; (3874 <system_gclk_gen_set_config+0xa8>)
    3826:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3828:	b25b      	sxtb	r3, r3
    382a:	2b00      	cmp	r3, #0
    382c:	dbfb      	blt.n	3826 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    382e:	4b12      	ldr	r3, [pc, #72]	; (3878 <system_gclk_gen_set_config+0xac>)
    3830:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3832:	4b12      	ldr	r3, [pc, #72]	; (387c <system_gclk_gen_set_config+0xb0>)
    3834:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3836:	4a0f      	ldr	r2, [pc, #60]	; (3874 <system_gclk_gen_set_config+0xa8>)
    3838:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    383a:	b25b      	sxtb	r3, r3
    383c:	2b00      	cmp	r3, #0
    383e:	dbfb      	blt.n	3838 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3840:	4b0c      	ldr	r3, [pc, #48]	; (3874 <system_gclk_gen_set_config+0xa8>)
    3842:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3844:	001a      	movs	r2, r3
    3846:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3848:	b25b      	sxtb	r3, r3
    384a:	2b00      	cmp	r3, #0
    384c:	dbfb      	blt.n	3846 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    384e:	4a09      	ldr	r2, [pc, #36]	; (3874 <system_gclk_gen_set_config+0xa8>)
    3850:	6853      	ldr	r3, [r2, #4]
    3852:	2180      	movs	r1, #128	; 0x80
    3854:	0249      	lsls	r1, r1, #9
    3856:	400b      	ands	r3, r1
    3858:	431d      	orrs	r5, r3
    385a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    385c:	4b08      	ldr	r3, [pc, #32]	; (3880 <system_gclk_gen_set_config+0xb4>)
    385e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3860:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3862:	2200      	movs	r2, #0
    3864:	e7d2      	b.n	380c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3866:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3868:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    386a:	2380      	movs	r3, #128	; 0x80
    386c:	029b      	lsls	r3, r3, #10
    386e:	431d      	orrs	r5, r3
    3870:	e7d2      	b.n	3818 <system_gclk_gen_set_config+0x4c>
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	40000c00 	.word	0x40000c00
    3878:	0000334d 	.word	0x0000334d
    387c:	40000c08 	.word	0x40000c08
    3880:	0000338d 	.word	0x0000338d

00003884 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3884:	b510      	push	{r4, lr}
    3886:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3888:	4a0b      	ldr	r2, [pc, #44]	; (38b8 <system_gclk_gen_enable+0x34>)
    388a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    388c:	b25b      	sxtb	r3, r3
    388e:	2b00      	cmp	r3, #0
    3890:	dbfb      	blt.n	388a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3892:	4b0a      	ldr	r3, [pc, #40]	; (38bc <system_gclk_gen_enable+0x38>)
    3894:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3896:	4b0a      	ldr	r3, [pc, #40]	; (38c0 <system_gclk_gen_enable+0x3c>)
    3898:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    389a:	4a07      	ldr	r2, [pc, #28]	; (38b8 <system_gclk_gen_enable+0x34>)
    389c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    389e:	b25b      	sxtb	r3, r3
    38a0:	2b00      	cmp	r3, #0
    38a2:	dbfb      	blt.n	389c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    38a4:	4a04      	ldr	r2, [pc, #16]	; (38b8 <system_gclk_gen_enable+0x34>)
    38a6:	6851      	ldr	r1, [r2, #4]
    38a8:	2380      	movs	r3, #128	; 0x80
    38aa:	025b      	lsls	r3, r3, #9
    38ac:	430b      	orrs	r3, r1
    38ae:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    38b0:	4b04      	ldr	r3, [pc, #16]	; (38c4 <system_gclk_gen_enable+0x40>)
    38b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    38b4:	bd10      	pop	{r4, pc}
    38b6:	46c0      	nop			; (mov r8, r8)
    38b8:	40000c00 	.word	0x40000c00
    38bc:	0000334d 	.word	0x0000334d
    38c0:	40000c04 	.word	0x40000c04
    38c4:	0000338d 	.word	0x0000338d

000038c8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    38c8:	b570      	push	{r4, r5, r6, lr}
    38ca:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    38cc:	4a1a      	ldr	r2, [pc, #104]	; (3938 <system_gclk_gen_get_hz+0x70>)
    38ce:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    38d0:	b25b      	sxtb	r3, r3
    38d2:	2b00      	cmp	r3, #0
    38d4:	dbfb      	blt.n	38ce <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    38d6:	4b19      	ldr	r3, [pc, #100]	; (393c <system_gclk_gen_get_hz+0x74>)
    38d8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    38da:	4b19      	ldr	r3, [pc, #100]	; (3940 <system_gclk_gen_get_hz+0x78>)
    38dc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    38de:	4a16      	ldr	r2, [pc, #88]	; (3938 <system_gclk_gen_get_hz+0x70>)
    38e0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    38e2:	b25b      	sxtb	r3, r3
    38e4:	2b00      	cmp	r3, #0
    38e6:	dbfb      	blt.n	38e0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    38e8:	4e13      	ldr	r6, [pc, #76]	; (3938 <system_gclk_gen_get_hz+0x70>)
    38ea:	6870      	ldr	r0, [r6, #4]
    38ec:	04c0      	lsls	r0, r0, #19
    38ee:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    38f0:	4b14      	ldr	r3, [pc, #80]	; (3944 <system_gclk_gen_get_hz+0x7c>)
    38f2:	4798      	blx	r3
    38f4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    38f6:	4b12      	ldr	r3, [pc, #72]	; (3940 <system_gclk_gen_get_hz+0x78>)
    38f8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    38fa:	6876      	ldr	r6, [r6, #4]
    38fc:	02f6      	lsls	r6, r6, #11
    38fe:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3900:	4b11      	ldr	r3, [pc, #68]	; (3948 <system_gclk_gen_get_hz+0x80>)
    3902:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3904:	4a0c      	ldr	r2, [pc, #48]	; (3938 <system_gclk_gen_get_hz+0x70>)
    3906:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3908:	b25b      	sxtb	r3, r3
    390a:	2b00      	cmp	r3, #0
    390c:	dbfb      	blt.n	3906 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    390e:	4b0a      	ldr	r3, [pc, #40]	; (3938 <system_gclk_gen_get_hz+0x70>)
    3910:	689c      	ldr	r4, [r3, #8]
    3912:	0224      	lsls	r4, r4, #8
    3914:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3916:	4b0d      	ldr	r3, [pc, #52]	; (394c <system_gclk_gen_get_hz+0x84>)
    3918:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    391a:	2e00      	cmp	r6, #0
    391c:	d107      	bne.n	392e <system_gclk_gen_get_hz+0x66>
    391e:	2c01      	cmp	r4, #1
    3920:	d907      	bls.n	3932 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3922:	0021      	movs	r1, r4
    3924:	0028      	movs	r0, r5
    3926:	4b0a      	ldr	r3, [pc, #40]	; (3950 <system_gclk_gen_get_hz+0x88>)
    3928:	4798      	blx	r3
    392a:	0005      	movs	r5, r0
    392c:	e001      	b.n	3932 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    392e:	3401      	adds	r4, #1
    3930:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3932:	0028      	movs	r0, r5
    3934:	bd70      	pop	{r4, r5, r6, pc}
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	40000c00 	.word	0x40000c00
    393c:	0000334d 	.word	0x0000334d
    3940:	40000c04 	.word	0x40000c04
    3944:	000033bd 	.word	0x000033bd
    3948:	40000c08 	.word	0x40000c08
    394c:	0000338d 	.word	0x0000338d
    3950:	00003cc5 	.word	0x00003cc5

00003954 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3954:	b510      	push	{r4, lr}
    3956:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3958:	4b06      	ldr	r3, [pc, #24]	; (3974 <system_gclk_chan_enable+0x20>)
    395a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    395c:	4b06      	ldr	r3, [pc, #24]	; (3978 <system_gclk_chan_enable+0x24>)
    395e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3960:	4a06      	ldr	r2, [pc, #24]	; (397c <system_gclk_chan_enable+0x28>)
    3962:	8853      	ldrh	r3, [r2, #2]
    3964:	2180      	movs	r1, #128	; 0x80
    3966:	01c9      	lsls	r1, r1, #7
    3968:	430b      	orrs	r3, r1
    396a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    396c:	4b04      	ldr	r3, [pc, #16]	; (3980 <system_gclk_chan_enable+0x2c>)
    396e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3970:	bd10      	pop	{r4, pc}
    3972:	46c0      	nop			; (mov r8, r8)
    3974:	0000334d 	.word	0x0000334d
    3978:	40000c02 	.word	0x40000c02
    397c:	40000c00 	.word	0x40000c00
    3980:	0000338d 	.word	0x0000338d

00003984 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3984:	b510      	push	{r4, lr}
    3986:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3988:	4b0f      	ldr	r3, [pc, #60]	; (39c8 <system_gclk_chan_disable+0x44>)
    398a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    398c:	4b0f      	ldr	r3, [pc, #60]	; (39cc <system_gclk_chan_disable+0x48>)
    398e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3990:	4a0f      	ldr	r2, [pc, #60]	; (39d0 <system_gclk_chan_disable+0x4c>)
    3992:	8853      	ldrh	r3, [r2, #2]
    3994:	051b      	lsls	r3, r3, #20
    3996:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3998:	8853      	ldrh	r3, [r2, #2]
    399a:	490e      	ldr	r1, [pc, #56]	; (39d4 <system_gclk_chan_disable+0x50>)
    399c:	400b      	ands	r3, r1
    399e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    39a0:	8853      	ldrh	r3, [r2, #2]
    39a2:	490d      	ldr	r1, [pc, #52]	; (39d8 <system_gclk_chan_disable+0x54>)
    39a4:	400b      	ands	r3, r1
    39a6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    39a8:	0011      	movs	r1, r2
    39aa:	2280      	movs	r2, #128	; 0x80
    39ac:	01d2      	lsls	r2, r2, #7
    39ae:	884b      	ldrh	r3, [r1, #2]
    39b0:	4213      	tst	r3, r2
    39b2:	d1fc      	bne.n	39ae <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    39b4:	4906      	ldr	r1, [pc, #24]	; (39d0 <system_gclk_chan_disable+0x4c>)
    39b6:	884a      	ldrh	r2, [r1, #2]
    39b8:	0203      	lsls	r3, r0, #8
    39ba:	4806      	ldr	r0, [pc, #24]	; (39d4 <system_gclk_chan_disable+0x50>)
    39bc:	4002      	ands	r2, r0
    39be:	4313      	orrs	r3, r2
    39c0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    39c2:	4b06      	ldr	r3, [pc, #24]	; (39dc <system_gclk_chan_disable+0x58>)
    39c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    39c6:	bd10      	pop	{r4, pc}
    39c8:	0000334d 	.word	0x0000334d
    39cc:	40000c02 	.word	0x40000c02
    39d0:	40000c00 	.word	0x40000c00
    39d4:	fffff0ff 	.word	0xfffff0ff
    39d8:	ffffbfff 	.word	0xffffbfff
    39dc:	0000338d 	.word	0x0000338d

000039e0 <system_gclk_chan_set_config>:
{
    39e0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    39e2:	780c      	ldrb	r4, [r1, #0]
    39e4:	0224      	lsls	r4, r4, #8
    39e6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    39e8:	4b02      	ldr	r3, [pc, #8]	; (39f4 <system_gclk_chan_set_config+0x14>)
    39ea:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    39ec:	b2a4      	uxth	r4, r4
    39ee:	4b02      	ldr	r3, [pc, #8]	; (39f8 <system_gclk_chan_set_config+0x18>)
    39f0:	805c      	strh	r4, [r3, #2]
}
    39f2:	bd10      	pop	{r4, pc}
    39f4:	00003985 	.word	0x00003985
    39f8:	40000c00 	.word	0x40000c00

000039fc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    39fc:	b510      	push	{r4, lr}
    39fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3a00:	4b06      	ldr	r3, [pc, #24]	; (3a1c <system_gclk_chan_get_hz+0x20>)
    3a02:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3a04:	4b06      	ldr	r3, [pc, #24]	; (3a20 <system_gclk_chan_get_hz+0x24>)
    3a06:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3a08:	4b06      	ldr	r3, [pc, #24]	; (3a24 <system_gclk_chan_get_hz+0x28>)
    3a0a:	885c      	ldrh	r4, [r3, #2]
    3a0c:	0524      	lsls	r4, r4, #20
    3a0e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3a10:	4b05      	ldr	r3, [pc, #20]	; (3a28 <system_gclk_chan_get_hz+0x2c>)
    3a12:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3a14:	0020      	movs	r0, r4
    3a16:	4b05      	ldr	r3, [pc, #20]	; (3a2c <system_gclk_chan_get_hz+0x30>)
    3a18:	4798      	blx	r3
}
    3a1a:	bd10      	pop	{r4, pc}
    3a1c:	0000334d 	.word	0x0000334d
    3a20:	40000c02 	.word	0x40000c02
    3a24:	40000c00 	.word	0x40000c00
    3a28:	0000338d 	.word	0x0000338d
    3a2c:	000038c9 	.word	0x000038c9

00003a30 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3a30:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3a32:	78d3      	ldrb	r3, [r2, #3]
    3a34:	2b00      	cmp	r3, #0
    3a36:	d135      	bne.n	3aa4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3a38:	7813      	ldrb	r3, [r2, #0]
    3a3a:	2b80      	cmp	r3, #128	; 0x80
    3a3c:	d029      	beq.n	3a92 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3a3e:	061b      	lsls	r3, r3, #24
    3a40:	2480      	movs	r4, #128	; 0x80
    3a42:	0264      	lsls	r4, r4, #9
    3a44:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3a46:	7854      	ldrb	r4, [r2, #1]
    3a48:	2502      	movs	r5, #2
    3a4a:	43ac      	bics	r4, r5
    3a4c:	d106      	bne.n	3a5c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3a4e:	7894      	ldrb	r4, [r2, #2]
    3a50:	2c00      	cmp	r4, #0
    3a52:	d120      	bne.n	3a96 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3a54:	2480      	movs	r4, #128	; 0x80
    3a56:	02a4      	lsls	r4, r4, #10
    3a58:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3a5a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3a5c:	7854      	ldrb	r4, [r2, #1]
    3a5e:	3c01      	subs	r4, #1
    3a60:	2c01      	cmp	r4, #1
    3a62:	d91c      	bls.n	3a9e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3a64:	040d      	lsls	r5, r1, #16
    3a66:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3a68:	24a0      	movs	r4, #160	; 0xa0
    3a6a:	05e4      	lsls	r4, r4, #23
    3a6c:	432c      	orrs	r4, r5
    3a6e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3a70:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3a72:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3a74:	24d0      	movs	r4, #208	; 0xd0
    3a76:	0624      	lsls	r4, r4, #24
    3a78:	432c      	orrs	r4, r5
    3a7a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3a7c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3a7e:	78d4      	ldrb	r4, [r2, #3]
    3a80:	2c00      	cmp	r4, #0
    3a82:	d122      	bne.n	3aca <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3a84:	035b      	lsls	r3, r3, #13
    3a86:	d51c      	bpl.n	3ac2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3a88:	7893      	ldrb	r3, [r2, #2]
    3a8a:	2b01      	cmp	r3, #1
    3a8c:	d01e      	beq.n	3acc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3a8e:	6141      	str	r1, [r0, #20]
    3a90:	e017      	b.n	3ac2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3a92:	2300      	movs	r3, #0
    3a94:	e7d7      	b.n	3a46 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3a96:	24c0      	movs	r4, #192	; 0xc0
    3a98:	02e4      	lsls	r4, r4, #11
    3a9a:	4323      	orrs	r3, r4
    3a9c:	e7dd      	b.n	3a5a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3a9e:	4c0d      	ldr	r4, [pc, #52]	; (3ad4 <_system_pinmux_config+0xa4>)
    3aa0:	4023      	ands	r3, r4
    3aa2:	e7df      	b.n	3a64 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3aa4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3aa6:	040c      	lsls	r4, r1, #16
    3aa8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3aaa:	23a0      	movs	r3, #160	; 0xa0
    3aac:	05db      	lsls	r3, r3, #23
    3aae:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3ab0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3ab2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3ab4:	23d0      	movs	r3, #208	; 0xd0
    3ab6:	061b      	lsls	r3, r3, #24
    3ab8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3aba:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3abc:	78d3      	ldrb	r3, [r2, #3]
    3abe:	2b00      	cmp	r3, #0
    3ac0:	d103      	bne.n	3aca <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3ac2:	7853      	ldrb	r3, [r2, #1]
    3ac4:	3b01      	subs	r3, #1
    3ac6:	2b01      	cmp	r3, #1
    3ac8:	d902      	bls.n	3ad0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3aca:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3acc:	6181      	str	r1, [r0, #24]
    3ace:	e7f8      	b.n	3ac2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3ad0:	6081      	str	r1, [r0, #8]
}
    3ad2:	e7fa      	b.n	3aca <_system_pinmux_config+0x9a>
    3ad4:	fffbffff 	.word	0xfffbffff

00003ad8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3ad8:	b510      	push	{r4, lr}
    3ada:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3adc:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3ade:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3ae0:	2900      	cmp	r1, #0
    3ae2:	d104      	bne.n	3aee <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3ae4:	0943      	lsrs	r3, r0, #5
    3ae6:	01db      	lsls	r3, r3, #7
    3ae8:	4905      	ldr	r1, [pc, #20]	; (3b00 <system_pinmux_pin_set_config+0x28>)
    3aea:	468c      	mov	ip, r1
    3aec:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3aee:	241f      	movs	r4, #31
    3af0:	4020      	ands	r0, r4
    3af2:	2101      	movs	r1, #1
    3af4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3af6:	0018      	movs	r0, r3
    3af8:	4b02      	ldr	r3, [pc, #8]	; (3b04 <system_pinmux_pin_set_config+0x2c>)
    3afa:	4798      	blx	r3
}
    3afc:	bd10      	pop	{r4, pc}
    3afe:	46c0      	nop			; (mov r8, r8)
    3b00:	41004400 	.word	0x41004400
    3b04:	00003a31 	.word	0x00003a31

00003b08 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3b08:	4770      	bx	lr
	...

00003b0c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3b0c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3b0e:	4b05      	ldr	r3, [pc, #20]	; (3b24 <system_init+0x18>)
    3b10:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3b12:	4b05      	ldr	r3, [pc, #20]	; (3b28 <system_init+0x1c>)
    3b14:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3b16:	4b05      	ldr	r3, [pc, #20]	; (3b2c <system_init+0x20>)
    3b18:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3b1a:	4b05      	ldr	r3, [pc, #20]	; (3b30 <system_init+0x24>)
    3b1c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3b1e:	4b05      	ldr	r3, [pc, #20]	; (3b34 <system_init+0x28>)
    3b20:	4798      	blx	r3
}
    3b22:	bd10      	pop	{r4, pc}
    3b24:	0000362d 	.word	0x0000362d
    3b28:	00003349 	.word	0x00003349
    3b2c:	00003b09 	.word	0x00003b09
    3b30:	00003b09 	.word	0x00003b09
    3b34:	00003b09 	.word	0x00003b09

00003b38 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3b38:	e7fe      	b.n	3b38 <Dummy_Handler>
	...

00003b3c <Reset_Handler>:
{
    3b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3b3e:	4a2a      	ldr	r2, [pc, #168]	; (3be8 <Reset_Handler+0xac>)
    3b40:	4b2a      	ldr	r3, [pc, #168]	; (3bec <Reset_Handler+0xb0>)
    3b42:	429a      	cmp	r2, r3
    3b44:	d011      	beq.n	3b6a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    3b46:	001a      	movs	r2, r3
    3b48:	4b29      	ldr	r3, [pc, #164]	; (3bf0 <Reset_Handler+0xb4>)
    3b4a:	429a      	cmp	r2, r3
    3b4c:	d20d      	bcs.n	3b6a <Reset_Handler+0x2e>
    3b4e:	4a29      	ldr	r2, [pc, #164]	; (3bf4 <Reset_Handler+0xb8>)
    3b50:	3303      	adds	r3, #3
    3b52:	1a9b      	subs	r3, r3, r2
    3b54:	089b      	lsrs	r3, r3, #2
    3b56:	3301      	adds	r3, #1
    3b58:	009b      	lsls	r3, r3, #2
    3b5a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3b5c:	4823      	ldr	r0, [pc, #140]	; (3bec <Reset_Handler+0xb0>)
    3b5e:	4922      	ldr	r1, [pc, #136]	; (3be8 <Reset_Handler+0xac>)
    3b60:	588c      	ldr	r4, [r1, r2]
    3b62:	5084      	str	r4, [r0, r2]
    3b64:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3b66:	429a      	cmp	r2, r3
    3b68:	d1fa      	bne.n	3b60 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3b6a:	4a23      	ldr	r2, [pc, #140]	; (3bf8 <Reset_Handler+0xbc>)
    3b6c:	4b23      	ldr	r3, [pc, #140]	; (3bfc <Reset_Handler+0xc0>)
    3b6e:	429a      	cmp	r2, r3
    3b70:	d20a      	bcs.n	3b88 <Reset_Handler+0x4c>
    3b72:	43d3      	mvns	r3, r2
    3b74:	4921      	ldr	r1, [pc, #132]	; (3bfc <Reset_Handler+0xc0>)
    3b76:	185b      	adds	r3, r3, r1
    3b78:	2103      	movs	r1, #3
    3b7a:	438b      	bics	r3, r1
    3b7c:	3304      	adds	r3, #4
    3b7e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3b80:	2100      	movs	r1, #0
    3b82:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3b84:	4293      	cmp	r3, r2
    3b86:	d1fc      	bne.n	3b82 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3b88:	4a1d      	ldr	r2, [pc, #116]	; (3c00 <Reset_Handler+0xc4>)
    3b8a:	21ff      	movs	r1, #255	; 0xff
    3b8c:	4b1d      	ldr	r3, [pc, #116]	; (3c04 <Reset_Handler+0xc8>)
    3b8e:	438b      	bics	r3, r1
    3b90:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3b92:	39fd      	subs	r1, #253	; 0xfd
    3b94:	2390      	movs	r3, #144	; 0x90
    3b96:	005b      	lsls	r3, r3, #1
    3b98:	4a1b      	ldr	r2, [pc, #108]	; (3c08 <Reset_Handler+0xcc>)
    3b9a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3b9c:	4a1b      	ldr	r2, [pc, #108]	; (3c0c <Reset_Handler+0xd0>)
    3b9e:	78d3      	ldrb	r3, [r2, #3]
    3ba0:	2503      	movs	r5, #3
    3ba2:	43ab      	bics	r3, r5
    3ba4:	2402      	movs	r4, #2
    3ba6:	4323      	orrs	r3, r4
    3ba8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3baa:	78d3      	ldrb	r3, [r2, #3]
    3bac:	270c      	movs	r7, #12
    3bae:	43bb      	bics	r3, r7
    3bb0:	2608      	movs	r6, #8
    3bb2:	4333      	orrs	r3, r6
    3bb4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3bb6:	4b16      	ldr	r3, [pc, #88]	; (3c10 <Reset_Handler+0xd4>)
    3bb8:	7b98      	ldrb	r0, [r3, #14]
    3bba:	2230      	movs	r2, #48	; 0x30
    3bbc:	4390      	bics	r0, r2
    3bbe:	2220      	movs	r2, #32
    3bc0:	4310      	orrs	r0, r2
    3bc2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3bc4:	7b99      	ldrb	r1, [r3, #14]
    3bc6:	43b9      	bics	r1, r7
    3bc8:	4331      	orrs	r1, r6
    3bca:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3bcc:	7b9a      	ldrb	r2, [r3, #14]
    3bce:	43aa      	bics	r2, r5
    3bd0:	4322      	orrs	r2, r4
    3bd2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3bd4:	4a0f      	ldr	r2, [pc, #60]	; (3c14 <Reset_Handler+0xd8>)
    3bd6:	6853      	ldr	r3, [r2, #4]
    3bd8:	2180      	movs	r1, #128	; 0x80
    3bda:	430b      	orrs	r3, r1
    3bdc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3bde:	4b0e      	ldr	r3, [pc, #56]	; (3c18 <Reset_Handler+0xdc>)
    3be0:	4798      	blx	r3
        main();
    3be2:	4b0e      	ldr	r3, [pc, #56]	; (3c1c <Reset_Handler+0xe0>)
    3be4:	4798      	blx	r3
    3be6:	e7fe      	b.n	3be6 <Reset_Handler+0xaa>
    3be8:	00005b30 	.word	0x00005b30
    3bec:	20000000 	.word	0x20000000
    3bf0:	200000bc 	.word	0x200000bc
    3bf4:	20000004 	.word	0x20000004
    3bf8:	200000bc 	.word	0x200000bc
    3bfc:	2000126c 	.word	0x2000126c
    3c00:	e000ed00 	.word	0xe000ed00
    3c04:	00000000 	.word	0x00000000
    3c08:	41007000 	.word	0x41007000
    3c0c:	41005000 	.word	0x41005000
    3c10:	41004800 	.word	0x41004800
    3c14:	41004000 	.word	0x41004000
    3c18:	000056f9 	.word	0x000056f9
    3c1c:	00003c45 	.word	0x00003c45

00003c20 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3c20:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3c22:	4a06      	ldr	r2, [pc, #24]	; (3c3c <_sbrk+0x1c>)
    3c24:	6812      	ldr	r2, [r2, #0]
    3c26:	2a00      	cmp	r2, #0
    3c28:	d004      	beq.n	3c34 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3c2a:	4a04      	ldr	r2, [pc, #16]	; (3c3c <_sbrk+0x1c>)
    3c2c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3c2e:	18c3      	adds	r3, r0, r3
    3c30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3c32:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3c34:	4902      	ldr	r1, [pc, #8]	; (3c40 <_sbrk+0x20>)
    3c36:	4a01      	ldr	r2, [pc, #4]	; (3c3c <_sbrk+0x1c>)
    3c38:	6011      	str	r1, [r2, #0]
    3c3a:	e7f6      	b.n	3c2a <_sbrk+0xa>
    3c3c:	20000e0c 	.word	0x20000e0c
    3c40:	20003270 	.word	0x20003270

00003c44 <main>:
	port_pin_set_output_level(PIN_PB06,false);
}


int main (void)
{
    3c44:	b570      	push	{r4, r5, r6, lr}
	system_init();
    3c46:	4b11      	ldr	r3, [pc, #68]	; (3c8c <main+0x48>)
    3c48:	4798      	blx	r3
	delay_init();
    3c4a:	4b11      	ldr	r3, [pc, #68]	; (3c90 <main+0x4c>)
    3c4c:	4798      	blx	r3
	configureSendInfo();
    3c4e:	4b11      	ldr	r3, [pc, #68]	; (3c94 <main+0x50>)
    3c50:	4798      	blx	r3
	initializeI2CModules();
    3c52:	4b11      	ldr	r3, [pc, #68]	; (3c98 <main+0x54>)
    3c54:	4798      	blx	r3
	delay_cycles_ms(500);
    3c56:	20fa      	movs	r0, #250	; 0xfa
    3c58:	0040      	lsls	r0, r0, #1
    3c5a:	4b10      	ldr	r3, [pc, #64]	; (3c9c <main+0x58>)
    3c5c:	4798      	blx	r3
	//enableServoTCC();
	//USART -- 115200
	serialInit();
    3c5e:	4b10      	ldr	r3, [pc, #64]	; (3ca0 <main+0x5c>)
    3c60:	4798      	blx	r3
	//testDetectPin();
	configureInputOutputDetection();
    3c62:	4b10      	ldr	r3, [pc, #64]	; (3ca4 <main+0x60>)
    3c64:	4798      	blx	r3
	while(1)
	{
		
		checkOutputsInputs();
    3c66:	4e10      	ldr	r6, [pc, #64]	; (3ca8 <main+0x64>)
		checkSetOutputs();
    3c68:	4d10      	ldr	r5, [pc, #64]	; (3cac <main+0x68>)
		checkSetInputs();
    3c6a:	4c11      	ldr	r4, [pc, #68]	; (3cb0 <main+0x6c>)
		checkOutputsInputs();
    3c6c:	47b0      	blx	r6
		checkSetOutputs();
    3c6e:	47a8      	blx	r5
		checkSetInputs();
    3c70:	47a0      	blx	r4
		readSensors();
    3c72:	4b10      	ldr	r3, [pc, #64]	; (3cb4 <main+0x70>)
    3c74:	4798      	blx	r3
		//setOutputs();
		checkUART();
    3c76:	4b10      	ldr	r3, [pc, #64]	; (3cb8 <main+0x74>)
    3c78:	4798      	blx	r3
		delay_cycles_ms(5);
    3c7a:	2005      	movs	r0, #5
    3c7c:	4b07      	ldr	r3, [pc, #28]	; (3c9c <main+0x58>)
    3c7e:	4798      	blx	r3
		checkSendOutputs();
    3c80:	4b0e      	ldr	r3, [pc, #56]	; (3cbc <main+0x78>)
    3c82:	4798      	blx	r3
		checkSendInputs();
    3c84:	4b0e      	ldr	r3, [pc, #56]	; (3cc0 <main+0x7c>)
    3c86:	4798      	blx	r3
    3c88:	e7f0      	b.n	3c6c <main+0x28>
    3c8a:	46c0      	nop			; (mov r8, r8)
    3c8c:	00003b0d 	.word	0x00003b0d
    3c90:	00001bc9 	.word	0x00001bc9
    3c94:	00001bb5 	.word	0x00001bb5
    3c98:	00001405 	.word	0x00001405
    3c9c:	00001c09 	.word	0x00001c09
    3ca0:	00002f39 	.word	0x00002f39
    3ca4:	0000333d 	.word	0x0000333d
    3ca8:	00003321 	.word	0x00003321
    3cac:	00000f81 	.word	0x00000f81
    3cb0:	00000e79 	.word	0x00000e79
    3cb4:	00002e75 	.word	0x00002e75
    3cb8:	00002d95 	.word	0x00002d95
    3cbc:	0000194d 	.word	0x0000194d
    3cc0:	00001891 	.word	0x00001891

00003cc4 <__udivsi3>:
    3cc4:	2200      	movs	r2, #0
    3cc6:	0843      	lsrs	r3, r0, #1
    3cc8:	428b      	cmp	r3, r1
    3cca:	d374      	bcc.n	3db6 <__udivsi3+0xf2>
    3ccc:	0903      	lsrs	r3, r0, #4
    3cce:	428b      	cmp	r3, r1
    3cd0:	d35f      	bcc.n	3d92 <__udivsi3+0xce>
    3cd2:	0a03      	lsrs	r3, r0, #8
    3cd4:	428b      	cmp	r3, r1
    3cd6:	d344      	bcc.n	3d62 <__udivsi3+0x9e>
    3cd8:	0b03      	lsrs	r3, r0, #12
    3cda:	428b      	cmp	r3, r1
    3cdc:	d328      	bcc.n	3d30 <__udivsi3+0x6c>
    3cde:	0c03      	lsrs	r3, r0, #16
    3ce0:	428b      	cmp	r3, r1
    3ce2:	d30d      	bcc.n	3d00 <__udivsi3+0x3c>
    3ce4:	22ff      	movs	r2, #255	; 0xff
    3ce6:	0209      	lsls	r1, r1, #8
    3ce8:	ba12      	rev	r2, r2
    3cea:	0c03      	lsrs	r3, r0, #16
    3cec:	428b      	cmp	r3, r1
    3cee:	d302      	bcc.n	3cf6 <__udivsi3+0x32>
    3cf0:	1212      	asrs	r2, r2, #8
    3cf2:	0209      	lsls	r1, r1, #8
    3cf4:	d065      	beq.n	3dc2 <__udivsi3+0xfe>
    3cf6:	0b03      	lsrs	r3, r0, #12
    3cf8:	428b      	cmp	r3, r1
    3cfa:	d319      	bcc.n	3d30 <__udivsi3+0x6c>
    3cfc:	e000      	b.n	3d00 <__udivsi3+0x3c>
    3cfe:	0a09      	lsrs	r1, r1, #8
    3d00:	0bc3      	lsrs	r3, r0, #15
    3d02:	428b      	cmp	r3, r1
    3d04:	d301      	bcc.n	3d0a <__udivsi3+0x46>
    3d06:	03cb      	lsls	r3, r1, #15
    3d08:	1ac0      	subs	r0, r0, r3
    3d0a:	4152      	adcs	r2, r2
    3d0c:	0b83      	lsrs	r3, r0, #14
    3d0e:	428b      	cmp	r3, r1
    3d10:	d301      	bcc.n	3d16 <__udivsi3+0x52>
    3d12:	038b      	lsls	r3, r1, #14
    3d14:	1ac0      	subs	r0, r0, r3
    3d16:	4152      	adcs	r2, r2
    3d18:	0b43      	lsrs	r3, r0, #13
    3d1a:	428b      	cmp	r3, r1
    3d1c:	d301      	bcc.n	3d22 <__udivsi3+0x5e>
    3d1e:	034b      	lsls	r3, r1, #13
    3d20:	1ac0      	subs	r0, r0, r3
    3d22:	4152      	adcs	r2, r2
    3d24:	0b03      	lsrs	r3, r0, #12
    3d26:	428b      	cmp	r3, r1
    3d28:	d301      	bcc.n	3d2e <__udivsi3+0x6a>
    3d2a:	030b      	lsls	r3, r1, #12
    3d2c:	1ac0      	subs	r0, r0, r3
    3d2e:	4152      	adcs	r2, r2
    3d30:	0ac3      	lsrs	r3, r0, #11
    3d32:	428b      	cmp	r3, r1
    3d34:	d301      	bcc.n	3d3a <__udivsi3+0x76>
    3d36:	02cb      	lsls	r3, r1, #11
    3d38:	1ac0      	subs	r0, r0, r3
    3d3a:	4152      	adcs	r2, r2
    3d3c:	0a83      	lsrs	r3, r0, #10
    3d3e:	428b      	cmp	r3, r1
    3d40:	d301      	bcc.n	3d46 <__udivsi3+0x82>
    3d42:	028b      	lsls	r3, r1, #10
    3d44:	1ac0      	subs	r0, r0, r3
    3d46:	4152      	adcs	r2, r2
    3d48:	0a43      	lsrs	r3, r0, #9
    3d4a:	428b      	cmp	r3, r1
    3d4c:	d301      	bcc.n	3d52 <__udivsi3+0x8e>
    3d4e:	024b      	lsls	r3, r1, #9
    3d50:	1ac0      	subs	r0, r0, r3
    3d52:	4152      	adcs	r2, r2
    3d54:	0a03      	lsrs	r3, r0, #8
    3d56:	428b      	cmp	r3, r1
    3d58:	d301      	bcc.n	3d5e <__udivsi3+0x9a>
    3d5a:	020b      	lsls	r3, r1, #8
    3d5c:	1ac0      	subs	r0, r0, r3
    3d5e:	4152      	adcs	r2, r2
    3d60:	d2cd      	bcs.n	3cfe <__udivsi3+0x3a>
    3d62:	09c3      	lsrs	r3, r0, #7
    3d64:	428b      	cmp	r3, r1
    3d66:	d301      	bcc.n	3d6c <__udivsi3+0xa8>
    3d68:	01cb      	lsls	r3, r1, #7
    3d6a:	1ac0      	subs	r0, r0, r3
    3d6c:	4152      	adcs	r2, r2
    3d6e:	0983      	lsrs	r3, r0, #6
    3d70:	428b      	cmp	r3, r1
    3d72:	d301      	bcc.n	3d78 <__udivsi3+0xb4>
    3d74:	018b      	lsls	r3, r1, #6
    3d76:	1ac0      	subs	r0, r0, r3
    3d78:	4152      	adcs	r2, r2
    3d7a:	0943      	lsrs	r3, r0, #5
    3d7c:	428b      	cmp	r3, r1
    3d7e:	d301      	bcc.n	3d84 <__udivsi3+0xc0>
    3d80:	014b      	lsls	r3, r1, #5
    3d82:	1ac0      	subs	r0, r0, r3
    3d84:	4152      	adcs	r2, r2
    3d86:	0903      	lsrs	r3, r0, #4
    3d88:	428b      	cmp	r3, r1
    3d8a:	d301      	bcc.n	3d90 <__udivsi3+0xcc>
    3d8c:	010b      	lsls	r3, r1, #4
    3d8e:	1ac0      	subs	r0, r0, r3
    3d90:	4152      	adcs	r2, r2
    3d92:	08c3      	lsrs	r3, r0, #3
    3d94:	428b      	cmp	r3, r1
    3d96:	d301      	bcc.n	3d9c <__udivsi3+0xd8>
    3d98:	00cb      	lsls	r3, r1, #3
    3d9a:	1ac0      	subs	r0, r0, r3
    3d9c:	4152      	adcs	r2, r2
    3d9e:	0883      	lsrs	r3, r0, #2
    3da0:	428b      	cmp	r3, r1
    3da2:	d301      	bcc.n	3da8 <__udivsi3+0xe4>
    3da4:	008b      	lsls	r3, r1, #2
    3da6:	1ac0      	subs	r0, r0, r3
    3da8:	4152      	adcs	r2, r2
    3daa:	0843      	lsrs	r3, r0, #1
    3dac:	428b      	cmp	r3, r1
    3dae:	d301      	bcc.n	3db4 <__udivsi3+0xf0>
    3db0:	004b      	lsls	r3, r1, #1
    3db2:	1ac0      	subs	r0, r0, r3
    3db4:	4152      	adcs	r2, r2
    3db6:	1a41      	subs	r1, r0, r1
    3db8:	d200      	bcs.n	3dbc <__udivsi3+0xf8>
    3dba:	4601      	mov	r1, r0
    3dbc:	4152      	adcs	r2, r2
    3dbe:	4610      	mov	r0, r2
    3dc0:	4770      	bx	lr
    3dc2:	e7ff      	b.n	3dc4 <__udivsi3+0x100>
    3dc4:	b501      	push	{r0, lr}
    3dc6:	2000      	movs	r0, #0
    3dc8:	f000 f806 	bl	3dd8 <__aeabi_idiv0>
    3dcc:	bd02      	pop	{r1, pc}
    3dce:	46c0      	nop			; (mov r8, r8)

00003dd0 <__aeabi_uidivmod>:
    3dd0:	2900      	cmp	r1, #0
    3dd2:	d0f7      	beq.n	3dc4 <__udivsi3+0x100>
    3dd4:	e776      	b.n	3cc4 <__udivsi3>
    3dd6:	4770      	bx	lr

00003dd8 <__aeabi_idiv0>:
    3dd8:	4770      	bx	lr
    3dda:	46c0      	nop			; (mov r8, r8)

00003ddc <__aeabi_lmul>:
    3ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dde:	46ce      	mov	lr, r9
    3de0:	4647      	mov	r7, r8
    3de2:	0415      	lsls	r5, r2, #16
    3de4:	0c2d      	lsrs	r5, r5, #16
    3de6:	002e      	movs	r6, r5
    3de8:	b580      	push	{r7, lr}
    3dea:	0407      	lsls	r7, r0, #16
    3dec:	0c14      	lsrs	r4, r2, #16
    3dee:	0c3f      	lsrs	r7, r7, #16
    3df0:	4699      	mov	r9, r3
    3df2:	0c03      	lsrs	r3, r0, #16
    3df4:	437e      	muls	r6, r7
    3df6:	435d      	muls	r5, r3
    3df8:	4367      	muls	r7, r4
    3dfa:	4363      	muls	r3, r4
    3dfc:	197f      	adds	r7, r7, r5
    3dfe:	0c34      	lsrs	r4, r6, #16
    3e00:	19e4      	adds	r4, r4, r7
    3e02:	469c      	mov	ip, r3
    3e04:	42a5      	cmp	r5, r4
    3e06:	d903      	bls.n	3e10 <__aeabi_lmul+0x34>
    3e08:	2380      	movs	r3, #128	; 0x80
    3e0a:	025b      	lsls	r3, r3, #9
    3e0c:	4698      	mov	r8, r3
    3e0e:	44c4      	add	ip, r8
    3e10:	464b      	mov	r3, r9
    3e12:	4351      	muls	r1, r2
    3e14:	4343      	muls	r3, r0
    3e16:	0436      	lsls	r6, r6, #16
    3e18:	0c36      	lsrs	r6, r6, #16
    3e1a:	0c25      	lsrs	r5, r4, #16
    3e1c:	0424      	lsls	r4, r4, #16
    3e1e:	4465      	add	r5, ip
    3e20:	19a4      	adds	r4, r4, r6
    3e22:	1859      	adds	r1, r3, r1
    3e24:	1949      	adds	r1, r1, r5
    3e26:	0020      	movs	r0, r4
    3e28:	bc0c      	pop	{r2, r3}
    3e2a:	4690      	mov	r8, r2
    3e2c:	4699      	mov	r9, r3
    3e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003e30 <__aeabi_dadd>:
    3e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e32:	4645      	mov	r5, r8
    3e34:	46de      	mov	lr, fp
    3e36:	4657      	mov	r7, sl
    3e38:	464e      	mov	r6, r9
    3e3a:	030c      	lsls	r4, r1, #12
    3e3c:	b5e0      	push	{r5, r6, r7, lr}
    3e3e:	004e      	lsls	r6, r1, #1
    3e40:	0fc9      	lsrs	r1, r1, #31
    3e42:	4688      	mov	r8, r1
    3e44:	000d      	movs	r5, r1
    3e46:	0a61      	lsrs	r1, r4, #9
    3e48:	0f44      	lsrs	r4, r0, #29
    3e4a:	430c      	orrs	r4, r1
    3e4c:	00c7      	lsls	r7, r0, #3
    3e4e:	0319      	lsls	r1, r3, #12
    3e50:	0058      	lsls	r0, r3, #1
    3e52:	0fdb      	lsrs	r3, r3, #31
    3e54:	469b      	mov	fp, r3
    3e56:	0a4b      	lsrs	r3, r1, #9
    3e58:	0f51      	lsrs	r1, r2, #29
    3e5a:	430b      	orrs	r3, r1
    3e5c:	0d76      	lsrs	r6, r6, #21
    3e5e:	0d40      	lsrs	r0, r0, #21
    3e60:	0019      	movs	r1, r3
    3e62:	00d2      	lsls	r2, r2, #3
    3e64:	45d8      	cmp	r8, fp
    3e66:	d100      	bne.n	3e6a <__aeabi_dadd+0x3a>
    3e68:	e0ae      	b.n	3fc8 <__aeabi_dadd+0x198>
    3e6a:	1a35      	subs	r5, r6, r0
    3e6c:	2d00      	cmp	r5, #0
    3e6e:	dc00      	bgt.n	3e72 <__aeabi_dadd+0x42>
    3e70:	e0f6      	b.n	4060 <__aeabi_dadd+0x230>
    3e72:	2800      	cmp	r0, #0
    3e74:	d10f      	bne.n	3e96 <__aeabi_dadd+0x66>
    3e76:	4313      	orrs	r3, r2
    3e78:	d100      	bne.n	3e7c <__aeabi_dadd+0x4c>
    3e7a:	e0db      	b.n	4034 <__aeabi_dadd+0x204>
    3e7c:	1e6b      	subs	r3, r5, #1
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d000      	beq.n	3e84 <__aeabi_dadd+0x54>
    3e82:	e137      	b.n	40f4 <__aeabi_dadd+0x2c4>
    3e84:	1aba      	subs	r2, r7, r2
    3e86:	4297      	cmp	r7, r2
    3e88:	41bf      	sbcs	r7, r7
    3e8a:	1a64      	subs	r4, r4, r1
    3e8c:	427f      	negs	r7, r7
    3e8e:	1be4      	subs	r4, r4, r7
    3e90:	2601      	movs	r6, #1
    3e92:	0017      	movs	r7, r2
    3e94:	e024      	b.n	3ee0 <__aeabi_dadd+0xb0>
    3e96:	4bc6      	ldr	r3, [pc, #792]	; (41b0 <__aeabi_dadd+0x380>)
    3e98:	429e      	cmp	r6, r3
    3e9a:	d04d      	beq.n	3f38 <__aeabi_dadd+0x108>
    3e9c:	2380      	movs	r3, #128	; 0x80
    3e9e:	041b      	lsls	r3, r3, #16
    3ea0:	4319      	orrs	r1, r3
    3ea2:	2d38      	cmp	r5, #56	; 0x38
    3ea4:	dd00      	ble.n	3ea8 <__aeabi_dadd+0x78>
    3ea6:	e107      	b.n	40b8 <__aeabi_dadd+0x288>
    3ea8:	2d1f      	cmp	r5, #31
    3eaa:	dd00      	ble.n	3eae <__aeabi_dadd+0x7e>
    3eac:	e138      	b.n	4120 <__aeabi_dadd+0x2f0>
    3eae:	2020      	movs	r0, #32
    3eb0:	1b43      	subs	r3, r0, r5
    3eb2:	469a      	mov	sl, r3
    3eb4:	000b      	movs	r3, r1
    3eb6:	4650      	mov	r0, sl
    3eb8:	4083      	lsls	r3, r0
    3eba:	4699      	mov	r9, r3
    3ebc:	0013      	movs	r3, r2
    3ebe:	4648      	mov	r0, r9
    3ec0:	40eb      	lsrs	r3, r5
    3ec2:	4318      	orrs	r0, r3
    3ec4:	0003      	movs	r3, r0
    3ec6:	4650      	mov	r0, sl
    3ec8:	4082      	lsls	r2, r0
    3eca:	1e50      	subs	r0, r2, #1
    3ecc:	4182      	sbcs	r2, r0
    3ece:	40e9      	lsrs	r1, r5
    3ed0:	431a      	orrs	r2, r3
    3ed2:	1aba      	subs	r2, r7, r2
    3ed4:	1a61      	subs	r1, r4, r1
    3ed6:	4297      	cmp	r7, r2
    3ed8:	41a4      	sbcs	r4, r4
    3eda:	0017      	movs	r7, r2
    3edc:	4264      	negs	r4, r4
    3ede:	1b0c      	subs	r4, r1, r4
    3ee0:	0223      	lsls	r3, r4, #8
    3ee2:	d562      	bpl.n	3faa <__aeabi_dadd+0x17a>
    3ee4:	0264      	lsls	r4, r4, #9
    3ee6:	0a65      	lsrs	r5, r4, #9
    3ee8:	2d00      	cmp	r5, #0
    3eea:	d100      	bne.n	3eee <__aeabi_dadd+0xbe>
    3eec:	e0df      	b.n	40ae <__aeabi_dadd+0x27e>
    3eee:	0028      	movs	r0, r5
    3ef0:	f001 fbe4 	bl	56bc <__clzsi2>
    3ef4:	0003      	movs	r3, r0
    3ef6:	3b08      	subs	r3, #8
    3ef8:	2b1f      	cmp	r3, #31
    3efa:	dd00      	ble.n	3efe <__aeabi_dadd+0xce>
    3efc:	e0d2      	b.n	40a4 <__aeabi_dadd+0x274>
    3efe:	2220      	movs	r2, #32
    3f00:	003c      	movs	r4, r7
    3f02:	1ad2      	subs	r2, r2, r3
    3f04:	409d      	lsls	r5, r3
    3f06:	40d4      	lsrs	r4, r2
    3f08:	409f      	lsls	r7, r3
    3f0a:	4325      	orrs	r5, r4
    3f0c:	429e      	cmp	r6, r3
    3f0e:	dd00      	ble.n	3f12 <__aeabi_dadd+0xe2>
    3f10:	e0c4      	b.n	409c <__aeabi_dadd+0x26c>
    3f12:	1b9e      	subs	r6, r3, r6
    3f14:	1c73      	adds	r3, r6, #1
    3f16:	2b1f      	cmp	r3, #31
    3f18:	dd00      	ble.n	3f1c <__aeabi_dadd+0xec>
    3f1a:	e0f1      	b.n	4100 <__aeabi_dadd+0x2d0>
    3f1c:	2220      	movs	r2, #32
    3f1e:	0038      	movs	r0, r7
    3f20:	0029      	movs	r1, r5
    3f22:	1ad2      	subs	r2, r2, r3
    3f24:	40d8      	lsrs	r0, r3
    3f26:	4091      	lsls	r1, r2
    3f28:	4097      	lsls	r7, r2
    3f2a:	002c      	movs	r4, r5
    3f2c:	4301      	orrs	r1, r0
    3f2e:	1e78      	subs	r0, r7, #1
    3f30:	4187      	sbcs	r7, r0
    3f32:	40dc      	lsrs	r4, r3
    3f34:	2600      	movs	r6, #0
    3f36:	430f      	orrs	r7, r1
    3f38:	077b      	lsls	r3, r7, #29
    3f3a:	d009      	beq.n	3f50 <__aeabi_dadd+0x120>
    3f3c:	230f      	movs	r3, #15
    3f3e:	403b      	ands	r3, r7
    3f40:	2b04      	cmp	r3, #4
    3f42:	d005      	beq.n	3f50 <__aeabi_dadd+0x120>
    3f44:	1d3b      	adds	r3, r7, #4
    3f46:	42bb      	cmp	r3, r7
    3f48:	41bf      	sbcs	r7, r7
    3f4a:	427f      	negs	r7, r7
    3f4c:	19e4      	adds	r4, r4, r7
    3f4e:	001f      	movs	r7, r3
    3f50:	0223      	lsls	r3, r4, #8
    3f52:	d52c      	bpl.n	3fae <__aeabi_dadd+0x17e>
    3f54:	4b96      	ldr	r3, [pc, #600]	; (41b0 <__aeabi_dadd+0x380>)
    3f56:	3601      	adds	r6, #1
    3f58:	429e      	cmp	r6, r3
    3f5a:	d100      	bne.n	3f5e <__aeabi_dadd+0x12e>
    3f5c:	e09a      	b.n	4094 <__aeabi_dadd+0x264>
    3f5e:	4645      	mov	r5, r8
    3f60:	4b94      	ldr	r3, [pc, #592]	; (41b4 <__aeabi_dadd+0x384>)
    3f62:	08ff      	lsrs	r7, r7, #3
    3f64:	401c      	ands	r4, r3
    3f66:	0760      	lsls	r0, r4, #29
    3f68:	0576      	lsls	r6, r6, #21
    3f6a:	0264      	lsls	r4, r4, #9
    3f6c:	4307      	orrs	r7, r0
    3f6e:	0b24      	lsrs	r4, r4, #12
    3f70:	0d76      	lsrs	r6, r6, #21
    3f72:	2100      	movs	r1, #0
    3f74:	0324      	lsls	r4, r4, #12
    3f76:	0b23      	lsrs	r3, r4, #12
    3f78:	0d0c      	lsrs	r4, r1, #20
    3f7a:	4a8f      	ldr	r2, [pc, #572]	; (41b8 <__aeabi_dadd+0x388>)
    3f7c:	0524      	lsls	r4, r4, #20
    3f7e:	431c      	orrs	r4, r3
    3f80:	4014      	ands	r4, r2
    3f82:	0533      	lsls	r3, r6, #20
    3f84:	4323      	orrs	r3, r4
    3f86:	005b      	lsls	r3, r3, #1
    3f88:	07ed      	lsls	r5, r5, #31
    3f8a:	085b      	lsrs	r3, r3, #1
    3f8c:	432b      	orrs	r3, r5
    3f8e:	0038      	movs	r0, r7
    3f90:	0019      	movs	r1, r3
    3f92:	bc3c      	pop	{r2, r3, r4, r5}
    3f94:	4690      	mov	r8, r2
    3f96:	4699      	mov	r9, r3
    3f98:	46a2      	mov	sl, r4
    3f9a:	46ab      	mov	fp, r5
    3f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f9e:	4664      	mov	r4, ip
    3fa0:	4304      	orrs	r4, r0
    3fa2:	d100      	bne.n	3fa6 <__aeabi_dadd+0x176>
    3fa4:	e211      	b.n	43ca <__aeabi_dadd+0x59a>
    3fa6:	0004      	movs	r4, r0
    3fa8:	4667      	mov	r7, ip
    3faa:	077b      	lsls	r3, r7, #29
    3fac:	d1c6      	bne.n	3f3c <__aeabi_dadd+0x10c>
    3fae:	4645      	mov	r5, r8
    3fb0:	0760      	lsls	r0, r4, #29
    3fb2:	08ff      	lsrs	r7, r7, #3
    3fb4:	4307      	orrs	r7, r0
    3fb6:	08e4      	lsrs	r4, r4, #3
    3fb8:	4b7d      	ldr	r3, [pc, #500]	; (41b0 <__aeabi_dadd+0x380>)
    3fba:	429e      	cmp	r6, r3
    3fbc:	d030      	beq.n	4020 <__aeabi_dadd+0x1f0>
    3fbe:	0324      	lsls	r4, r4, #12
    3fc0:	0576      	lsls	r6, r6, #21
    3fc2:	0b24      	lsrs	r4, r4, #12
    3fc4:	0d76      	lsrs	r6, r6, #21
    3fc6:	e7d4      	b.n	3f72 <__aeabi_dadd+0x142>
    3fc8:	1a33      	subs	r3, r6, r0
    3fca:	469a      	mov	sl, r3
    3fcc:	2b00      	cmp	r3, #0
    3fce:	dd78      	ble.n	40c2 <__aeabi_dadd+0x292>
    3fd0:	2800      	cmp	r0, #0
    3fd2:	d031      	beq.n	4038 <__aeabi_dadd+0x208>
    3fd4:	4876      	ldr	r0, [pc, #472]	; (41b0 <__aeabi_dadd+0x380>)
    3fd6:	4286      	cmp	r6, r0
    3fd8:	d0ae      	beq.n	3f38 <__aeabi_dadd+0x108>
    3fda:	2080      	movs	r0, #128	; 0x80
    3fdc:	0400      	lsls	r0, r0, #16
    3fde:	4301      	orrs	r1, r0
    3fe0:	4653      	mov	r3, sl
    3fe2:	2b38      	cmp	r3, #56	; 0x38
    3fe4:	dc00      	bgt.n	3fe8 <__aeabi_dadd+0x1b8>
    3fe6:	e0e9      	b.n	41bc <__aeabi_dadd+0x38c>
    3fe8:	430a      	orrs	r2, r1
    3fea:	1e51      	subs	r1, r2, #1
    3fec:	418a      	sbcs	r2, r1
    3fee:	2100      	movs	r1, #0
    3ff0:	19d2      	adds	r2, r2, r7
    3ff2:	42ba      	cmp	r2, r7
    3ff4:	41bf      	sbcs	r7, r7
    3ff6:	1909      	adds	r1, r1, r4
    3ff8:	427c      	negs	r4, r7
    3ffa:	0017      	movs	r7, r2
    3ffc:	190c      	adds	r4, r1, r4
    3ffe:	0223      	lsls	r3, r4, #8
    4000:	d5d3      	bpl.n	3faa <__aeabi_dadd+0x17a>
    4002:	4b6b      	ldr	r3, [pc, #428]	; (41b0 <__aeabi_dadd+0x380>)
    4004:	3601      	adds	r6, #1
    4006:	429e      	cmp	r6, r3
    4008:	d100      	bne.n	400c <__aeabi_dadd+0x1dc>
    400a:	e13a      	b.n	4282 <__aeabi_dadd+0x452>
    400c:	2001      	movs	r0, #1
    400e:	4b69      	ldr	r3, [pc, #420]	; (41b4 <__aeabi_dadd+0x384>)
    4010:	401c      	ands	r4, r3
    4012:	087b      	lsrs	r3, r7, #1
    4014:	4007      	ands	r7, r0
    4016:	431f      	orrs	r7, r3
    4018:	07e0      	lsls	r0, r4, #31
    401a:	4307      	orrs	r7, r0
    401c:	0864      	lsrs	r4, r4, #1
    401e:	e78b      	b.n	3f38 <__aeabi_dadd+0x108>
    4020:	0023      	movs	r3, r4
    4022:	433b      	orrs	r3, r7
    4024:	d100      	bne.n	4028 <__aeabi_dadd+0x1f8>
    4026:	e1cb      	b.n	43c0 <__aeabi_dadd+0x590>
    4028:	2280      	movs	r2, #128	; 0x80
    402a:	0312      	lsls	r2, r2, #12
    402c:	4314      	orrs	r4, r2
    402e:	0324      	lsls	r4, r4, #12
    4030:	0b24      	lsrs	r4, r4, #12
    4032:	e79e      	b.n	3f72 <__aeabi_dadd+0x142>
    4034:	002e      	movs	r6, r5
    4036:	e77f      	b.n	3f38 <__aeabi_dadd+0x108>
    4038:	0008      	movs	r0, r1
    403a:	4310      	orrs	r0, r2
    403c:	d100      	bne.n	4040 <__aeabi_dadd+0x210>
    403e:	e0b4      	b.n	41aa <__aeabi_dadd+0x37a>
    4040:	1e58      	subs	r0, r3, #1
    4042:	2800      	cmp	r0, #0
    4044:	d000      	beq.n	4048 <__aeabi_dadd+0x218>
    4046:	e0de      	b.n	4206 <__aeabi_dadd+0x3d6>
    4048:	18ba      	adds	r2, r7, r2
    404a:	42ba      	cmp	r2, r7
    404c:	419b      	sbcs	r3, r3
    404e:	1864      	adds	r4, r4, r1
    4050:	425b      	negs	r3, r3
    4052:	18e4      	adds	r4, r4, r3
    4054:	0017      	movs	r7, r2
    4056:	2601      	movs	r6, #1
    4058:	0223      	lsls	r3, r4, #8
    405a:	d5a6      	bpl.n	3faa <__aeabi_dadd+0x17a>
    405c:	2602      	movs	r6, #2
    405e:	e7d5      	b.n	400c <__aeabi_dadd+0x1dc>
    4060:	2d00      	cmp	r5, #0
    4062:	d16e      	bne.n	4142 <__aeabi_dadd+0x312>
    4064:	1c70      	adds	r0, r6, #1
    4066:	0540      	lsls	r0, r0, #21
    4068:	0d40      	lsrs	r0, r0, #21
    406a:	2801      	cmp	r0, #1
    406c:	dc00      	bgt.n	4070 <__aeabi_dadd+0x240>
    406e:	e0f9      	b.n	4264 <__aeabi_dadd+0x434>
    4070:	1ab8      	subs	r0, r7, r2
    4072:	4684      	mov	ip, r0
    4074:	4287      	cmp	r7, r0
    4076:	4180      	sbcs	r0, r0
    4078:	1ae5      	subs	r5, r4, r3
    407a:	4240      	negs	r0, r0
    407c:	1a2d      	subs	r5, r5, r0
    407e:	0228      	lsls	r0, r5, #8
    4080:	d400      	bmi.n	4084 <__aeabi_dadd+0x254>
    4082:	e089      	b.n	4198 <__aeabi_dadd+0x368>
    4084:	1bd7      	subs	r7, r2, r7
    4086:	42ba      	cmp	r2, r7
    4088:	4192      	sbcs	r2, r2
    408a:	1b1c      	subs	r4, r3, r4
    408c:	4252      	negs	r2, r2
    408e:	1aa5      	subs	r5, r4, r2
    4090:	46d8      	mov	r8, fp
    4092:	e729      	b.n	3ee8 <__aeabi_dadd+0xb8>
    4094:	4645      	mov	r5, r8
    4096:	2400      	movs	r4, #0
    4098:	2700      	movs	r7, #0
    409a:	e76a      	b.n	3f72 <__aeabi_dadd+0x142>
    409c:	4c45      	ldr	r4, [pc, #276]	; (41b4 <__aeabi_dadd+0x384>)
    409e:	1af6      	subs	r6, r6, r3
    40a0:	402c      	ands	r4, r5
    40a2:	e749      	b.n	3f38 <__aeabi_dadd+0x108>
    40a4:	003d      	movs	r5, r7
    40a6:	3828      	subs	r0, #40	; 0x28
    40a8:	4085      	lsls	r5, r0
    40aa:	2700      	movs	r7, #0
    40ac:	e72e      	b.n	3f0c <__aeabi_dadd+0xdc>
    40ae:	0038      	movs	r0, r7
    40b0:	f001 fb04 	bl	56bc <__clzsi2>
    40b4:	3020      	adds	r0, #32
    40b6:	e71d      	b.n	3ef4 <__aeabi_dadd+0xc4>
    40b8:	430a      	orrs	r2, r1
    40ba:	1e51      	subs	r1, r2, #1
    40bc:	418a      	sbcs	r2, r1
    40be:	2100      	movs	r1, #0
    40c0:	e707      	b.n	3ed2 <__aeabi_dadd+0xa2>
    40c2:	2b00      	cmp	r3, #0
    40c4:	d000      	beq.n	40c8 <__aeabi_dadd+0x298>
    40c6:	e0f3      	b.n	42b0 <__aeabi_dadd+0x480>
    40c8:	1c70      	adds	r0, r6, #1
    40ca:	0543      	lsls	r3, r0, #21
    40cc:	0d5b      	lsrs	r3, r3, #21
    40ce:	2b01      	cmp	r3, #1
    40d0:	dc00      	bgt.n	40d4 <__aeabi_dadd+0x2a4>
    40d2:	e0ad      	b.n	4230 <__aeabi_dadd+0x400>
    40d4:	4b36      	ldr	r3, [pc, #216]	; (41b0 <__aeabi_dadd+0x380>)
    40d6:	4298      	cmp	r0, r3
    40d8:	d100      	bne.n	40dc <__aeabi_dadd+0x2ac>
    40da:	e0d1      	b.n	4280 <__aeabi_dadd+0x450>
    40dc:	18ba      	adds	r2, r7, r2
    40de:	42ba      	cmp	r2, r7
    40e0:	41bf      	sbcs	r7, r7
    40e2:	1864      	adds	r4, r4, r1
    40e4:	427f      	negs	r7, r7
    40e6:	19e4      	adds	r4, r4, r7
    40e8:	07e7      	lsls	r7, r4, #31
    40ea:	0852      	lsrs	r2, r2, #1
    40ec:	4317      	orrs	r7, r2
    40ee:	0864      	lsrs	r4, r4, #1
    40f0:	0006      	movs	r6, r0
    40f2:	e721      	b.n	3f38 <__aeabi_dadd+0x108>
    40f4:	482e      	ldr	r0, [pc, #184]	; (41b0 <__aeabi_dadd+0x380>)
    40f6:	4285      	cmp	r5, r0
    40f8:	d100      	bne.n	40fc <__aeabi_dadd+0x2cc>
    40fa:	e093      	b.n	4224 <__aeabi_dadd+0x3f4>
    40fc:	001d      	movs	r5, r3
    40fe:	e6d0      	b.n	3ea2 <__aeabi_dadd+0x72>
    4100:	0029      	movs	r1, r5
    4102:	3e1f      	subs	r6, #31
    4104:	40f1      	lsrs	r1, r6
    4106:	2b20      	cmp	r3, #32
    4108:	d100      	bne.n	410c <__aeabi_dadd+0x2dc>
    410a:	e08d      	b.n	4228 <__aeabi_dadd+0x3f8>
    410c:	2240      	movs	r2, #64	; 0x40
    410e:	1ad3      	subs	r3, r2, r3
    4110:	409d      	lsls	r5, r3
    4112:	432f      	orrs	r7, r5
    4114:	1e7d      	subs	r5, r7, #1
    4116:	41af      	sbcs	r7, r5
    4118:	2400      	movs	r4, #0
    411a:	430f      	orrs	r7, r1
    411c:	2600      	movs	r6, #0
    411e:	e744      	b.n	3faa <__aeabi_dadd+0x17a>
    4120:	002b      	movs	r3, r5
    4122:	0008      	movs	r0, r1
    4124:	3b20      	subs	r3, #32
    4126:	40d8      	lsrs	r0, r3
    4128:	0003      	movs	r3, r0
    412a:	2d20      	cmp	r5, #32
    412c:	d100      	bne.n	4130 <__aeabi_dadd+0x300>
    412e:	e07d      	b.n	422c <__aeabi_dadd+0x3fc>
    4130:	2040      	movs	r0, #64	; 0x40
    4132:	1b45      	subs	r5, r0, r5
    4134:	40a9      	lsls	r1, r5
    4136:	430a      	orrs	r2, r1
    4138:	1e51      	subs	r1, r2, #1
    413a:	418a      	sbcs	r2, r1
    413c:	2100      	movs	r1, #0
    413e:	431a      	orrs	r2, r3
    4140:	e6c7      	b.n	3ed2 <__aeabi_dadd+0xa2>
    4142:	2e00      	cmp	r6, #0
    4144:	d050      	beq.n	41e8 <__aeabi_dadd+0x3b8>
    4146:	4e1a      	ldr	r6, [pc, #104]	; (41b0 <__aeabi_dadd+0x380>)
    4148:	42b0      	cmp	r0, r6
    414a:	d057      	beq.n	41fc <__aeabi_dadd+0x3cc>
    414c:	2680      	movs	r6, #128	; 0x80
    414e:	426b      	negs	r3, r5
    4150:	4699      	mov	r9, r3
    4152:	0436      	lsls	r6, r6, #16
    4154:	4334      	orrs	r4, r6
    4156:	464b      	mov	r3, r9
    4158:	2b38      	cmp	r3, #56	; 0x38
    415a:	dd00      	ble.n	415e <__aeabi_dadd+0x32e>
    415c:	e0d6      	b.n	430c <__aeabi_dadd+0x4dc>
    415e:	2b1f      	cmp	r3, #31
    4160:	dd00      	ble.n	4164 <__aeabi_dadd+0x334>
    4162:	e135      	b.n	43d0 <__aeabi_dadd+0x5a0>
    4164:	2620      	movs	r6, #32
    4166:	1af5      	subs	r5, r6, r3
    4168:	0026      	movs	r6, r4
    416a:	40ae      	lsls	r6, r5
    416c:	46b2      	mov	sl, r6
    416e:	003e      	movs	r6, r7
    4170:	40de      	lsrs	r6, r3
    4172:	46ac      	mov	ip, r5
    4174:	0035      	movs	r5, r6
    4176:	4656      	mov	r6, sl
    4178:	432e      	orrs	r6, r5
    417a:	4665      	mov	r5, ip
    417c:	40af      	lsls	r7, r5
    417e:	1e7d      	subs	r5, r7, #1
    4180:	41af      	sbcs	r7, r5
    4182:	40dc      	lsrs	r4, r3
    4184:	4337      	orrs	r7, r6
    4186:	1bd7      	subs	r7, r2, r7
    4188:	42ba      	cmp	r2, r7
    418a:	4192      	sbcs	r2, r2
    418c:	1b0c      	subs	r4, r1, r4
    418e:	4252      	negs	r2, r2
    4190:	1aa4      	subs	r4, r4, r2
    4192:	0006      	movs	r6, r0
    4194:	46d8      	mov	r8, fp
    4196:	e6a3      	b.n	3ee0 <__aeabi_dadd+0xb0>
    4198:	4664      	mov	r4, ip
    419a:	4667      	mov	r7, ip
    419c:	432c      	orrs	r4, r5
    419e:	d000      	beq.n	41a2 <__aeabi_dadd+0x372>
    41a0:	e6a2      	b.n	3ee8 <__aeabi_dadd+0xb8>
    41a2:	2500      	movs	r5, #0
    41a4:	2600      	movs	r6, #0
    41a6:	2700      	movs	r7, #0
    41a8:	e706      	b.n	3fb8 <__aeabi_dadd+0x188>
    41aa:	001e      	movs	r6, r3
    41ac:	e6c4      	b.n	3f38 <__aeabi_dadd+0x108>
    41ae:	46c0      	nop			; (mov r8, r8)
    41b0:	000007ff 	.word	0x000007ff
    41b4:	ff7fffff 	.word	0xff7fffff
    41b8:	800fffff 	.word	0x800fffff
    41bc:	2b1f      	cmp	r3, #31
    41be:	dc63      	bgt.n	4288 <__aeabi_dadd+0x458>
    41c0:	2020      	movs	r0, #32
    41c2:	1ac3      	subs	r3, r0, r3
    41c4:	0008      	movs	r0, r1
    41c6:	4098      	lsls	r0, r3
    41c8:	469c      	mov	ip, r3
    41ca:	4683      	mov	fp, r0
    41cc:	4653      	mov	r3, sl
    41ce:	0010      	movs	r0, r2
    41d0:	40d8      	lsrs	r0, r3
    41d2:	0003      	movs	r3, r0
    41d4:	4658      	mov	r0, fp
    41d6:	4318      	orrs	r0, r3
    41d8:	4663      	mov	r3, ip
    41da:	409a      	lsls	r2, r3
    41dc:	1e53      	subs	r3, r2, #1
    41de:	419a      	sbcs	r2, r3
    41e0:	4653      	mov	r3, sl
    41e2:	4302      	orrs	r2, r0
    41e4:	40d9      	lsrs	r1, r3
    41e6:	e703      	b.n	3ff0 <__aeabi_dadd+0x1c0>
    41e8:	0026      	movs	r6, r4
    41ea:	433e      	orrs	r6, r7
    41ec:	d006      	beq.n	41fc <__aeabi_dadd+0x3cc>
    41ee:	43eb      	mvns	r3, r5
    41f0:	4699      	mov	r9, r3
    41f2:	2b00      	cmp	r3, #0
    41f4:	d0c7      	beq.n	4186 <__aeabi_dadd+0x356>
    41f6:	4e94      	ldr	r6, [pc, #592]	; (4448 <__aeabi_dadd+0x618>)
    41f8:	42b0      	cmp	r0, r6
    41fa:	d1ac      	bne.n	4156 <__aeabi_dadd+0x326>
    41fc:	000c      	movs	r4, r1
    41fe:	0017      	movs	r7, r2
    4200:	0006      	movs	r6, r0
    4202:	46d8      	mov	r8, fp
    4204:	e698      	b.n	3f38 <__aeabi_dadd+0x108>
    4206:	4b90      	ldr	r3, [pc, #576]	; (4448 <__aeabi_dadd+0x618>)
    4208:	459a      	cmp	sl, r3
    420a:	d00b      	beq.n	4224 <__aeabi_dadd+0x3f4>
    420c:	4682      	mov	sl, r0
    420e:	e6e7      	b.n	3fe0 <__aeabi_dadd+0x1b0>
    4210:	2800      	cmp	r0, #0
    4212:	d000      	beq.n	4216 <__aeabi_dadd+0x3e6>
    4214:	e09e      	b.n	4354 <__aeabi_dadd+0x524>
    4216:	0018      	movs	r0, r3
    4218:	4310      	orrs	r0, r2
    421a:	d100      	bne.n	421e <__aeabi_dadd+0x3ee>
    421c:	e0e9      	b.n	43f2 <__aeabi_dadd+0x5c2>
    421e:	001c      	movs	r4, r3
    4220:	0017      	movs	r7, r2
    4222:	46d8      	mov	r8, fp
    4224:	4e88      	ldr	r6, [pc, #544]	; (4448 <__aeabi_dadd+0x618>)
    4226:	e687      	b.n	3f38 <__aeabi_dadd+0x108>
    4228:	2500      	movs	r5, #0
    422a:	e772      	b.n	4112 <__aeabi_dadd+0x2e2>
    422c:	2100      	movs	r1, #0
    422e:	e782      	b.n	4136 <__aeabi_dadd+0x306>
    4230:	0023      	movs	r3, r4
    4232:	433b      	orrs	r3, r7
    4234:	2e00      	cmp	r6, #0
    4236:	d000      	beq.n	423a <__aeabi_dadd+0x40a>
    4238:	e0ab      	b.n	4392 <__aeabi_dadd+0x562>
    423a:	2b00      	cmp	r3, #0
    423c:	d100      	bne.n	4240 <__aeabi_dadd+0x410>
    423e:	e0e7      	b.n	4410 <__aeabi_dadd+0x5e0>
    4240:	000b      	movs	r3, r1
    4242:	4313      	orrs	r3, r2
    4244:	d100      	bne.n	4248 <__aeabi_dadd+0x418>
    4246:	e677      	b.n	3f38 <__aeabi_dadd+0x108>
    4248:	18ba      	adds	r2, r7, r2
    424a:	42ba      	cmp	r2, r7
    424c:	41bf      	sbcs	r7, r7
    424e:	1864      	adds	r4, r4, r1
    4250:	427f      	negs	r7, r7
    4252:	19e4      	adds	r4, r4, r7
    4254:	0223      	lsls	r3, r4, #8
    4256:	d400      	bmi.n	425a <__aeabi_dadd+0x42a>
    4258:	e0f2      	b.n	4440 <__aeabi_dadd+0x610>
    425a:	4b7c      	ldr	r3, [pc, #496]	; (444c <__aeabi_dadd+0x61c>)
    425c:	0017      	movs	r7, r2
    425e:	401c      	ands	r4, r3
    4260:	0006      	movs	r6, r0
    4262:	e669      	b.n	3f38 <__aeabi_dadd+0x108>
    4264:	0020      	movs	r0, r4
    4266:	4338      	orrs	r0, r7
    4268:	2e00      	cmp	r6, #0
    426a:	d1d1      	bne.n	4210 <__aeabi_dadd+0x3e0>
    426c:	2800      	cmp	r0, #0
    426e:	d15b      	bne.n	4328 <__aeabi_dadd+0x4f8>
    4270:	001c      	movs	r4, r3
    4272:	4314      	orrs	r4, r2
    4274:	d100      	bne.n	4278 <__aeabi_dadd+0x448>
    4276:	e0a8      	b.n	43ca <__aeabi_dadd+0x59a>
    4278:	001c      	movs	r4, r3
    427a:	0017      	movs	r7, r2
    427c:	46d8      	mov	r8, fp
    427e:	e65b      	b.n	3f38 <__aeabi_dadd+0x108>
    4280:	0006      	movs	r6, r0
    4282:	2400      	movs	r4, #0
    4284:	2700      	movs	r7, #0
    4286:	e697      	b.n	3fb8 <__aeabi_dadd+0x188>
    4288:	4650      	mov	r0, sl
    428a:	000b      	movs	r3, r1
    428c:	3820      	subs	r0, #32
    428e:	40c3      	lsrs	r3, r0
    4290:	4699      	mov	r9, r3
    4292:	4653      	mov	r3, sl
    4294:	2b20      	cmp	r3, #32
    4296:	d100      	bne.n	429a <__aeabi_dadd+0x46a>
    4298:	e095      	b.n	43c6 <__aeabi_dadd+0x596>
    429a:	2340      	movs	r3, #64	; 0x40
    429c:	4650      	mov	r0, sl
    429e:	1a1b      	subs	r3, r3, r0
    42a0:	4099      	lsls	r1, r3
    42a2:	430a      	orrs	r2, r1
    42a4:	1e51      	subs	r1, r2, #1
    42a6:	418a      	sbcs	r2, r1
    42a8:	464b      	mov	r3, r9
    42aa:	2100      	movs	r1, #0
    42ac:	431a      	orrs	r2, r3
    42ae:	e69f      	b.n	3ff0 <__aeabi_dadd+0x1c0>
    42b0:	2e00      	cmp	r6, #0
    42b2:	d130      	bne.n	4316 <__aeabi_dadd+0x4e6>
    42b4:	0026      	movs	r6, r4
    42b6:	433e      	orrs	r6, r7
    42b8:	d067      	beq.n	438a <__aeabi_dadd+0x55a>
    42ba:	43db      	mvns	r3, r3
    42bc:	469a      	mov	sl, r3
    42be:	2b00      	cmp	r3, #0
    42c0:	d01c      	beq.n	42fc <__aeabi_dadd+0x4cc>
    42c2:	4e61      	ldr	r6, [pc, #388]	; (4448 <__aeabi_dadd+0x618>)
    42c4:	42b0      	cmp	r0, r6
    42c6:	d060      	beq.n	438a <__aeabi_dadd+0x55a>
    42c8:	4653      	mov	r3, sl
    42ca:	2b38      	cmp	r3, #56	; 0x38
    42cc:	dd00      	ble.n	42d0 <__aeabi_dadd+0x4a0>
    42ce:	e096      	b.n	43fe <__aeabi_dadd+0x5ce>
    42d0:	2b1f      	cmp	r3, #31
    42d2:	dd00      	ble.n	42d6 <__aeabi_dadd+0x4a6>
    42d4:	e09f      	b.n	4416 <__aeabi_dadd+0x5e6>
    42d6:	2620      	movs	r6, #32
    42d8:	1af3      	subs	r3, r6, r3
    42da:	0026      	movs	r6, r4
    42dc:	409e      	lsls	r6, r3
    42de:	469c      	mov	ip, r3
    42e0:	46b3      	mov	fp, r6
    42e2:	4653      	mov	r3, sl
    42e4:	003e      	movs	r6, r7
    42e6:	40de      	lsrs	r6, r3
    42e8:	0033      	movs	r3, r6
    42ea:	465e      	mov	r6, fp
    42ec:	431e      	orrs	r6, r3
    42ee:	4663      	mov	r3, ip
    42f0:	409f      	lsls	r7, r3
    42f2:	1e7b      	subs	r3, r7, #1
    42f4:	419f      	sbcs	r7, r3
    42f6:	4653      	mov	r3, sl
    42f8:	40dc      	lsrs	r4, r3
    42fa:	4337      	orrs	r7, r6
    42fc:	18bf      	adds	r7, r7, r2
    42fe:	4297      	cmp	r7, r2
    4300:	4192      	sbcs	r2, r2
    4302:	1864      	adds	r4, r4, r1
    4304:	4252      	negs	r2, r2
    4306:	18a4      	adds	r4, r4, r2
    4308:	0006      	movs	r6, r0
    430a:	e678      	b.n	3ffe <__aeabi_dadd+0x1ce>
    430c:	4327      	orrs	r7, r4
    430e:	1e7c      	subs	r4, r7, #1
    4310:	41a7      	sbcs	r7, r4
    4312:	2400      	movs	r4, #0
    4314:	e737      	b.n	4186 <__aeabi_dadd+0x356>
    4316:	4e4c      	ldr	r6, [pc, #304]	; (4448 <__aeabi_dadd+0x618>)
    4318:	42b0      	cmp	r0, r6
    431a:	d036      	beq.n	438a <__aeabi_dadd+0x55a>
    431c:	2680      	movs	r6, #128	; 0x80
    431e:	425b      	negs	r3, r3
    4320:	0436      	lsls	r6, r6, #16
    4322:	469a      	mov	sl, r3
    4324:	4334      	orrs	r4, r6
    4326:	e7cf      	b.n	42c8 <__aeabi_dadd+0x498>
    4328:	0018      	movs	r0, r3
    432a:	4310      	orrs	r0, r2
    432c:	d100      	bne.n	4330 <__aeabi_dadd+0x500>
    432e:	e603      	b.n	3f38 <__aeabi_dadd+0x108>
    4330:	1ab8      	subs	r0, r7, r2
    4332:	4684      	mov	ip, r0
    4334:	4567      	cmp	r7, ip
    4336:	41ad      	sbcs	r5, r5
    4338:	1ae0      	subs	r0, r4, r3
    433a:	426d      	negs	r5, r5
    433c:	1b40      	subs	r0, r0, r5
    433e:	0205      	lsls	r5, r0, #8
    4340:	d400      	bmi.n	4344 <__aeabi_dadd+0x514>
    4342:	e62c      	b.n	3f9e <__aeabi_dadd+0x16e>
    4344:	1bd7      	subs	r7, r2, r7
    4346:	42ba      	cmp	r2, r7
    4348:	4192      	sbcs	r2, r2
    434a:	1b1c      	subs	r4, r3, r4
    434c:	4252      	negs	r2, r2
    434e:	1aa4      	subs	r4, r4, r2
    4350:	46d8      	mov	r8, fp
    4352:	e5f1      	b.n	3f38 <__aeabi_dadd+0x108>
    4354:	0018      	movs	r0, r3
    4356:	4310      	orrs	r0, r2
    4358:	d100      	bne.n	435c <__aeabi_dadd+0x52c>
    435a:	e763      	b.n	4224 <__aeabi_dadd+0x3f4>
    435c:	08f8      	lsrs	r0, r7, #3
    435e:	0767      	lsls	r7, r4, #29
    4360:	4307      	orrs	r7, r0
    4362:	2080      	movs	r0, #128	; 0x80
    4364:	08e4      	lsrs	r4, r4, #3
    4366:	0300      	lsls	r0, r0, #12
    4368:	4204      	tst	r4, r0
    436a:	d008      	beq.n	437e <__aeabi_dadd+0x54e>
    436c:	08dd      	lsrs	r5, r3, #3
    436e:	4205      	tst	r5, r0
    4370:	d105      	bne.n	437e <__aeabi_dadd+0x54e>
    4372:	08d2      	lsrs	r2, r2, #3
    4374:	0759      	lsls	r1, r3, #29
    4376:	4311      	orrs	r1, r2
    4378:	000f      	movs	r7, r1
    437a:	002c      	movs	r4, r5
    437c:	46d8      	mov	r8, fp
    437e:	0f7b      	lsrs	r3, r7, #29
    4380:	00e4      	lsls	r4, r4, #3
    4382:	431c      	orrs	r4, r3
    4384:	00ff      	lsls	r7, r7, #3
    4386:	4e30      	ldr	r6, [pc, #192]	; (4448 <__aeabi_dadd+0x618>)
    4388:	e5d6      	b.n	3f38 <__aeabi_dadd+0x108>
    438a:	000c      	movs	r4, r1
    438c:	0017      	movs	r7, r2
    438e:	0006      	movs	r6, r0
    4390:	e5d2      	b.n	3f38 <__aeabi_dadd+0x108>
    4392:	2b00      	cmp	r3, #0
    4394:	d038      	beq.n	4408 <__aeabi_dadd+0x5d8>
    4396:	000b      	movs	r3, r1
    4398:	4313      	orrs	r3, r2
    439a:	d100      	bne.n	439e <__aeabi_dadd+0x56e>
    439c:	e742      	b.n	4224 <__aeabi_dadd+0x3f4>
    439e:	08f8      	lsrs	r0, r7, #3
    43a0:	0767      	lsls	r7, r4, #29
    43a2:	4307      	orrs	r7, r0
    43a4:	2080      	movs	r0, #128	; 0x80
    43a6:	08e4      	lsrs	r4, r4, #3
    43a8:	0300      	lsls	r0, r0, #12
    43aa:	4204      	tst	r4, r0
    43ac:	d0e7      	beq.n	437e <__aeabi_dadd+0x54e>
    43ae:	08cb      	lsrs	r3, r1, #3
    43b0:	4203      	tst	r3, r0
    43b2:	d1e4      	bne.n	437e <__aeabi_dadd+0x54e>
    43b4:	08d2      	lsrs	r2, r2, #3
    43b6:	0749      	lsls	r1, r1, #29
    43b8:	4311      	orrs	r1, r2
    43ba:	000f      	movs	r7, r1
    43bc:	001c      	movs	r4, r3
    43be:	e7de      	b.n	437e <__aeabi_dadd+0x54e>
    43c0:	2700      	movs	r7, #0
    43c2:	2400      	movs	r4, #0
    43c4:	e5d5      	b.n	3f72 <__aeabi_dadd+0x142>
    43c6:	2100      	movs	r1, #0
    43c8:	e76b      	b.n	42a2 <__aeabi_dadd+0x472>
    43ca:	2500      	movs	r5, #0
    43cc:	2700      	movs	r7, #0
    43ce:	e5f3      	b.n	3fb8 <__aeabi_dadd+0x188>
    43d0:	464e      	mov	r6, r9
    43d2:	0025      	movs	r5, r4
    43d4:	3e20      	subs	r6, #32
    43d6:	40f5      	lsrs	r5, r6
    43d8:	464b      	mov	r3, r9
    43da:	002e      	movs	r6, r5
    43dc:	2b20      	cmp	r3, #32
    43de:	d02d      	beq.n	443c <__aeabi_dadd+0x60c>
    43e0:	2540      	movs	r5, #64	; 0x40
    43e2:	1aed      	subs	r5, r5, r3
    43e4:	40ac      	lsls	r4, r5
    43e6:	4327      	orrs	r7, r4
    43e8:	1e7c      	subs	r4, r7, #1
    43ea:	41a7      	sbcs	r7, r4
    43ec:	2400      	movs	r4, #0
    43ee:	4337      	orrs	r7, r6
    43f0:	e6c9      	b.n	4186 <__aeabi_dadd+0x356>
    43f2:	2480      	movs	r4, #128	; 0x80
    43f4:	2500      	movs	r5, #0
    43f6:	0324      	lsls	r4, r4, #12
    43f8:	4e13      	ldr	r6, [pc, #76]	; (4448 <__aeabi_dadd+0x618>)
    43fa:	2700      	movs	r7, #0
    43fc:	e5dc      	b.n	3fb8 <__aeabi_dadd+0x188>
    43fe:	4327      	orrs	r7, r4
    4400:	1e7c      	subs	r4, r7, #1
    4402:	41a7      	sbcs	r7, r4
    4404:	2400      	movs	r4, #0
    4406:	e779      	b.n	42fc <__aeabi_dadd+0x4cc>
    4408:	000c      	movs	r4, r1
    440a:	0017      	movs	r7, r2
    440c:	4e0e      	ldr	r6, [pc, #56]	; (4448 <__aeabi_dadd+0x618>)
    440e:	e593      	b.n	3f38 <__aeabi_dadd+0x108>
    4410:	000c      	movs	r4, r1
    4412:	0017      	movs	r7, r2
    4414:	e590      	b.n	3f38 <__aeabi_dadd+0x108>
    4416:	4656      	mov	r6, sl
    4418:	0023      	movs	r3, r4
    441a:	3e20      	subs	r6, #32
    441c:	40f3      	lsrs	r3, r6
    441e:	4699      	mov	r9, r3
    4420:	4653      	mov	r3, sl
    4422:	2b20      	cmp	r3, #32
    4424:	d00e      	beq.n	4444 <__aeabi_dadd+0x614>
    4426:	2340      	movs	r3, #64	; 0x40
    4428:	4656      	mov	r6, sl
    442a:	1b9b      	subs	r3, r3, r6
    442c:	409c      	lsls	r4, r3
    442e:	4327      	orrs	r7, r4
    4430:	1e7c      	subs	r4, r7, #1
    4432:	41a7      	sbcs	r7, r4
    4434:	464b      	mov	r3, r9
    4436:	2400      	movs	r4, #0
    4438:	431f      	orrs	r7, r3
    443a:	e75f      	b.n	42fc <__aeabi_dadd+0x4cc>
    443c:	2400      	movs	r4, #0
    443e:	e7d2      	b.n	43e6 <__aeabi_dadd+0x5b6>
    4440:	0017      	movs	r7, r2
    4442:	e5b2      	b.n	3faa <__aeabi_dadd+0x17a>
    4444:	2400      	movs	r4, #0
    4446:	e7f2      	b.n	442e <__aeabi_dadd+0x5fe>
    4448:	000007ff 	.word	0x000007ff
    444c:	ff7fffff 	.word	0xff7fffff

00004450 <__aeabi_ddiv>:
    4450:	b5f0      	push	{r4, r5, r6, r7, lr}
    4452:	4657      	mov	r7, sl
    4454:	4645      	mov	r5, r8
    4456:	46de      	mov	lr, fp
    4458:	464e      	mov	r6, r9
    445a:	b5e0      	push	{r5, r6, r7, lr}
    445c:	004c      	lsls	r4, r1, #1
    445e:	030e      	lsls	r6, r1, #12
    4460:	b087      	sub	sp, #28
    4462:	4683      	mov	fp, r0
    4464:	4692      	mov	sl, r2
    4466:	001d      	movs	r5, r3
    4468:	4680      	mov	r8, r0
    446a:	0b36      	lsrs	r6, r6, #12
    446c:	0d64      	lsrs	r4, r4, #21
    446e:	0fcf      	lsrs	r7, r1, #31
    4470:	2c00      	cmp	r4, #0
    4472:	d04f      	beq.n	4514 <__aeabi_ddiv+0xc4>
    4474:	4b6f      	ldr	r3, [pc, #444]	; (4634 <__aeabi_ddiv+0x1e4>)
    4476:	429c      	cmp	r4, r3
    4478:	d035      	beq.n	44e6 <__aeabi_ddiv+0x96>
    447a:	2380      	movs	r3, #128	; 0x80
    447c:	0f42      	lsrs	r2, r0, #29
    447e:	041b      	lsls	r3, r3, #16
    4480:	00f6      	lsls	r6, r6, #3
    4482:	4313      	orrs	r3, r2
    4484:	4333      	orrs	r3, r6
    4486:	4699      	mov	r9, r3
    4488:	00c3      	lsls	r3, r0, #3
    448a:	4698      	mov	r8, r3
    448c:	4b6a      	ldr	r3, [pc, #424]	; (4638 <__aeabi_ddiv+0x1e8>)
    448e:	2600      	movs	r6, #0
    4490:	469c      	mov	ip, r3
    4492:	2300      	movs	r3, #0
    4494:	4464      	add	r4, ip
    4496:	9303      	str	r3, [sp, #12]
    4498:	032b      	lsls	r3, r5, #12
    449a:	0b1b      	lsrs	r3, r3, #12
    449c:	469b      	mov	fp, r3
    449e:	006b      	lsls	r3, r5, #1
    44a0:	0fed      	lsrs	r5, r5, #31
    44a2:	4650      	mov	r0, sl
    44a4:	0d5b      	lsrs	r3, r3, #21
    44a6:	9501      	str	r5, [sp, #4]
    44a8:	d05e      	beq.n	4568 <__aeabi_ddiv+0x118>
    44aa:	4a62      	ldr	r2, [pc, #392]	; (4634 <__aeabi_ddiv+0x1e4>)
    44ac:	4293      	cmp	r3, r2
    44ae:	d053      	beq.n	4558 <__aeabi_ddiv+0x108>
    44b0:	465a      	mov	r2, fp
    44b2:	00d1      	lsls	r1, r2, #3
    44b4:	2280      	movs	r2, #128	; 0x80
    44b6:	0f40      	lsrs	r0, r0, #29
    44b8:	0412      	lsls	r2, r2, #16
    44ba:	4302      	orrs	r2, r0
    44bc:	430a      	orrs	r2, r1
    44be:	4693      	mov	fp, r2
    44c0:	4652      	mov	r2, sl
    44c2:	00d1      	lsls	r1, r2, #3
    44c4:	4a5c      	ldr	r2, [pc, #368]	; (4638 <__aeabi_ddiv+0x1e8>)
    44c6:	4694      	mov	ip, r2
    44c8:	2200      	movs	r2, #0
    44ca:	4463      	add	r3, ip
    44cc:	0038      	movs	r0, r7
    44ce:	4068      	eors	r0, r5
    44d0:	4684      	mov	ip, r0
    44d2:	9002      	str	r0, [sp, #8]
    44d4:	1ae4      	subs	r4, r4, r3
    44d6:	4316      	orrs	r6, r2
    44d8:	2e0f      	cmp	r6, #15
    44da:	d900      	bls.n	44de <__aeabi_ddiv+0x8e>
    44dc:	e0b4      	b.n	4648 <__aeabi_ddiv+0x1f8>
    44de:	4b57      	ldr	r3, [pc, #348]	; (463c <__aeabi_ddiv+0x1ec>)
    44e0:	00b6      	lsls	r6, r6, #2
    44e2:	599b      	ldr	r3, [r3, r6]
    44e4:	469f      	mov	pc, r3
    44e6:	0003      	movs	r3, r0
    44e8:	4333      	orrs	r3, r6
    44ea:	4699      	mov	r9, r3
    44ec:	d16c      	bne.n	45c8 <__aeabi_ddiv+0x178>
    44ee:	2300      	movs	r3, #0
    44f0:	4698      	mov	r8, r3
    44f2:	3302      	adds	r3, #2
    44f4:	2608      	movs	r6, #8
    44f6:	9303      	str	r3, [sp, #12]
    44f8:	e7ce      	b.n	4498 <__aeabi_ddiv+0x48>
    44fa:	46cb      	mov	fp, r9
    44fc:	4641      	mov	r1, r8
    44fe:	9a03      	ldr	r2, [sp, #12]
    4500:	9701      	str	r7, [sp, #4]
    4502:	2a02      	cmp	r2, #2
    4504:	d165      	bne.n	45d2 <__aeabi_ddiv+0x182>
    4506:	9b01      	ldr	r3, [sp, #4]
    4508:	4c4a      	ldr	r4, [pc, #296]	; (4634 <__aeabi_ddiv+0x1e4>)
    450a:	469c      	mov	ip, r3
    450c:	2300      	movs	r3, #0
    450e:	2200      	movs	r2, #0
    4510:	4698      	mov	r8, r3
    4512:	e06b      	b.n	45ec <__aeabi_ddiv+0x19c>
    4514:	0003      	movs	r3, r0
    4516:	4333      	orrs	r3, r6
    4518:	4699      	mov	r9, r3
    451a:	d04e      	beq.n	45ba <__aeabi_ddiv+0x16a>
    451c:	2e00      	cmp	r6, #0
    451e:	d100      	bne.n	4522 <__aeabi_ddiv+0xd2>
    4520:	e1bc      	b.n	489c <__aeabi_ddiv+0x44c>
    4522:	0030      	movs	r0, r6
    4524:	f001 f8ca 	bl	56bc <__clzsi2>
    4528:	0003      	movs	r3, r0
    452a:	3b0b      	subs	r3, #11
    452c:	2b1c      	cmp	r3, #28
    452e:	dd00      	ble.n	4532 <__aeabi_ddiv+0xe2>
    4530:	e1ac      	b.n	488c <__aeabi_ddiv+0x43c>
    4532:	221d      	movs	r2, #29
    4534:	1ad3      	subs	r3, r2, r3
    4536:	465a      	mov	r2, fp
    4538:	0001      	movs	r1, r0
    453a:	40da      	lsrs	r2, r3
    453c:	3908      	subs	r1, #8
    453e:	408e      	lsls	r6, r1
    4540:	0013      	movs	r3, r2
    4542:	4333      	orrs	r3, r6
    4544:	4699      	mov	r9, r3
    4546:	465b      	mov	r3, fp
    4548:	408b      	lsls	r3, r1
    454a:	4698      	mov	r8, r3
    454c:	2300      	movs	r3, #0
    454e:	4c3c      	ldr	r4, [pc, #240]	; (4640 <__aeabi_ddiv+0x1f0>)
    4550:	2600      	movs	r6, #0
    4552:	1a24      	subs	r4, r4, r0
    4554:	9303      	str	r3, [sp, #12]
    4556:	e79f      	b.n	4498 <__aeabi_ddiv+0x48>
    4558:	4651      	mov	r1, sl
    455a:	465a      	mov	r2, fp
    455c:	4311      	orrs	r1, r2
    455e:	d129      	bne.n	45b4 <__aeabi_ddiv+0x164>
    4560:	2200      	movs	r2, #0
    4562:	4693      	mov	fp, r2
    4564:	3202      	adds	r2, #2
    4566:	e7b1      	b.n	44cc <__aeabi_ddiv+0x7c>
    4568:	4659      	mov	r1, fp
    456a:	4301      	orrs	r1, r0
    456c:	d01e      	beq.n	45ac <__aeabi_ddiv+0x15c>
    456e:	465b      	mov	r3, fp
    4570:	2b00      	cmp	r3, #0
    4572:	d100      	bne.n	4576 <__aeabi_ddiv+0x126>
    4574:	e19e      	b.n	48b4 <__aeabi_ddiv+0x464>
    4576:	4658      	mov	r0, fp
    4578:	f001 f8a0 	bl	56bc <__clzsi2>
    457c:	0003      	movs	r3, r0
    457e:	3b0b      	subs	r3, #11
    4580:	2b1c      	cmp	r3, #28
    4582:	dd00      	ble.n	4586 <__aeabi_ddiv+0x136>
    4584:	e18f      	b.n	48a6 <__aeabi_ddiv+0x456>
    4586:	0002      	movs	r2, r0
    4588:	4659      	mov	r1, fp
    458a:	3a08      	subs	r2, #8
    458c:	4091      	lsls	r1, r2
    458e:	468b      	mov	fp, r1
    4590:	211d      	movs	r1, #29
    4592:	1acb      	subs	r3, r1, r3
    4594:	4651      	mov	r1, sl
    4596:	40d9      	lsrs	r1, r3
    4598:	000b      	movs	r3, r1
    459a:	4659      	mov	r1, fp
    459c:	430b      	orrs	r3, r1
    459e:	4651      	mov	r1, sl
    45a0:	469b      	mov	fp, r3
    45a2:	4091      	lsls	r1, r2
    45a4:	4b26      	ldr	r3, [pc, #152]	; (4640 <__aeabi_ddiv+0x1f0>)
    45a6:	2200      	movs	r2, #0
    45a8:	1a1b      	subs	r3, r3, r0
    45aa:	e78f      	b.n	44cc <__aeabi_ddiv+0x7c>
    45ac:	2300      	movs	r3, #0
    45ae:	2201      	movs	r2, #1
    45b0:	469b      	mov	fp, r3
    45b2:	e78b      	b.n	44cc <__aeabi_ddiv+0x7c>
    45b4:	4651      	mov	r1, sl
    45b6:	2203      	movs	r2, #3
    45b8:	e788      	b.n	44cc <__aeabi_ddiv+0x7c>
    45ba:	2300      	movs	r3, #0
    45bc:	4698      	mov	r8, r3
    45be:	3301      	adds	r3, #1
    45c0:	2604      	movs	r6, #4
    45c2:	2400      	movs	r4, #0
    45c4:	9303      	str	r3, [sp, #12]
    45c6:	e767      	b.n	4498 <__aeabi_ddiv+0x48>
    45c8:	2303      	movs	r3, #3
    45ca:	46b1      	mov	r9, r6
    45cc:	9303      	str	r3, [sp, #12]
    45ce:	260c      	movs	r6, #12
    45d0:	e762      	b.n	4498 <__aeabi_ddiv+0x48>
    45d2:	2a03      	cmp	r2, #3
    45d4:	d100      	bne.n	45d8 <__aeabi_ddiv+0x188>
    45d6:	e25c      	b.n	4a92 <__aeabi_ddiv+0x642>
    45d8:	9b01      	ldr	r3, [sp, #4]
    45da:	2a01      	cmp	r2, #1
    45dc:	d000      	beq.n	45e0 <__aeabi_ddiv+0x190>
    45de:	e1e4      	b.n	49aa <__aeabi_ddiv+0x55a>
    45e0:	4013      	ands	r3, r2
    45e2:	469c      	mov	ip, r3
    45e4:	2300      	movs	r3, #0
    45e6:	2400      	movs	r4, #0
    45e8:	2200      	movs	r2, #0
    45ea:	4698      	mov	r8, r3
    45ec:	2100      	movs	r1, #0
    45ee:	0312      	lsls	r2, r2, #12
    45f0:	0b13      	lsrs	r3, r2, #12
    45f2:	0d0a      	lsrs	r2, r1, #20
    45f4:	0512      	lsls	r2, r2, #20
    45f6:	431a      	orrs	r2, r3
    45f8:	0523      	lsls	r3, r4, #20
    45fa:	4c12      	ldr	r4, [pc, #72]	; (4644 <__aeabi_ddiv+0x1f4>)
    45fc:	4640      	mov	r0, r8
    45fe:	4022      	ands	r2, r4
    4600:	4313      	orrs	r3, r2
    4602:	4662      	mov	r2, ip
    4604:	005b      	lsls	r3, r3, #1
    4606:	07d2      	lsls	r2, r2, #31
    4608:	085b      	lsrs	r3, r3, #1
    460a:	4313      	orrs	r3, r2
    460c:	0019      	movs	r1, r3
    460e:	b007      	add	sp, #28
    4610:	bc3c      	pop	{r2, r3, r4, r5}
    4612:	4690      	mov	r8, r2
    4614:	4699      	mov	r9, r3
    4616:	46a2      	mov	sl, r4
    4618:	46ab      	mov	fp, r5
    461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    461c:	2300      	movs	r3, #0
    461e:	2280      	movs	r2, #128	; 0x80
    4620:	469c      	mov	ip, r3
    4622:	0312      	lsls	r2, r2, #12
    4624:	4698      	mov	r8, r3
    4626:	4c03      	ldr	r4, [pc, #12]	; (4634 <__aeabi_ddiv+0x1e4>)
    4628:	e7e0      	b.n	45ec <__aeabi_ddiv+0x19c>
    462a:	2300      	movs	r3, #0
    462c:	4c01      	ldr	r4, [pc, #4]	; (4634 <__aeabi_ddiv+0x1e4>)
    462e:	2200      	movs	r2, #0
    4630:	4698      	mov	r8, r3
    4632:	e7db      	b.n	45ec <__aeabi_ddiv+0x19c>
    4634:	000007ff 	.word	0x000007ff
    4638:	fffffc01 	.word	0xfffffc01
    463c:	00005a90 	.word	0x00005a90
    4640:	fffffc0d 	.word	0xfffffc0d
    4644:	800fffff 	.word	0x800fffff
    4648:	45d9      	cmp	r9, fp
    464a:	d900      	bls.n	464e <__aeabi_ddiv+0x1fe>
    464c:	e139      	b.n	48c2 <__aeabi_ddiv+0x472>
    464e:	d100      	bne.n	4652 <__aeabi_ddiv+0x202>
    4650:	e134      	b.n	48bc <__aeabi_ddiv+0x46c>
    4652:	2300      	movs	r3, #0
    4654:	4646      	mov	r6, r8
    4656:	464d      	mov	r5, r9
    4658:	469a      	mov	sl, r3
    465a:	3c01      	subs	r4, #1
    465c:	465b      	mov	r3, fp
    465e:	0e0a      	lsrs	r2, r1, #24
    4660:	021b      	lsls	r3, r3, #8
    4662:	431a      	orrs	r2, r3
    4664:	020b      	lsls	r3, r1, #8
    4666:	0c17      	lsrs	r7, r2, #16
    4668:	9303      	str	r3, [sp, #12]
    466a:	0413      	lsls	r3, r2, #16
    466c:	0c1b      	lsrs	r3, r3, #16
    466e:	0039      	movs	r1, r7
    4670:	0028      	movs	r0, r5
    4672:	4690      	mov	r8, r2
    4674:	9301      	str	r3, [sp, #4]
    4676:	f7ff fb25 	bl	3cc4 <__udivsi3>
    467a:	0002      	movs	r2, r0
    467c:	9b01      	ldr	r3, [sp, #4]
    467e:	4683      	mov	fp, r0
    4680:	435a      	muls	r2, r3
    4682:	0028      	movs	r0, r5
    4684:	0039      	movs	r1, r7
    4686:	4691      	mov	r9, r2
    4688:	f7ff fba2 	bl	3dd0 <__aeabi_uidivmod>
    468c:	0c35      	lsrs	r5, r6, #16
    468e:	0409      	lsls	r1, r1, #16
    4690:	430d      	orrs	r5, r1
    4692:	45a9      	cmp	r9, r5
    4694:	d90d      	bls.n	46b2 <__aeabi_ddiv+0x262>
    4696:	465b      	mov	r3, fp
    4698:	4445      	add	r5, r8
    469a:	3b01      	subs	r3, #1
    469c:	45a8      	cmp	r8, r5
    469e:	d900      	bls.n	46a2 <__aeabi_ddiv+0x252>
    46a0:	e13a      	b.n	4918 <__aeabi_ddiv+0x4c8>
    46a2:	45a9      	cmp	r9, r5
    46a4:	d800      	bhi.n	46a8 <__aeabi_ddiv+0x258>
    46a6:	e137      	b.n	4918 <__aeabi_ddiv+0x4c8>
    46a8:	2302      	movs	r3, #2
    46aa:	425b      	negs	r3, r3
    46ac:	469c      	mov	ip, r3
    46ae:	4445      	add	r5, r8
    46b0:	44e3      	add	fp, ip
    46b2:	464b      	mov	r3, r9
    46b4:	1aeb      	subs	r3, r5, r3
    46b6:	0039      	movs	r1, r7
    46b8:	0018      	movs	r0, r3
    46ba:	9304      	str	r3, [sp, #16]
    46bc:	f7ff fb02 	bl	3cc4 <__udivsi3>
    46c0:	9b01      	ldr	r3, [sp, #4]
    46c2:	0005      	movs	r5, r0
    46c4:	4343      	muls	r3, r0
    46c6:	0039      	movs	r1, r7
    46c8:	9804      	ldr	r0, [sp, #16]
    46ca:	4699      	mov	r9, r3
    46cc:	f7ff fb80 	bl	3dd0 <__aeabi_uidivmod>
    46d0:	0433      	lsls	r3, r6, #16
    46d2:	0409      	lsls	r1, r1, #16
    46d4:	0c1b      	lsrs	r3, r3, #16
    46d6:	430b      	orrs	r3, r1
    46d8:	4599      	cmp	r9, r3
    46da:	d909      	bls.n	46f0 <__aeabi_ddiv+0x2a0>
    46dc:	4443      	add	r3, r8
    46de:	1e6a      	subs	r2, r5, #1
    46e0:	4598      	cmp	r8, r3
    46e2:	d900      	bls.n	46e6 <__aeabi_ddiv+0x296>
    46e4:	e11a      	b.n	491c <__aeabi_ddiv+0x4cc>
    46e6:	4599      	cmp	r9, r3
    46e8:	d800      	bhi.n	46ec <__aeabi_ddiv+0x29c>
    46ea:	e117      	b.n	491c <__aeabi_ddiv+0x4cc>
    46ec:	3d02      	subs	r5, #2
    46ee:	4443      	add	r3, r8
    46f0:	464a      	mov	r2, r9
    46f2:	1a9b      	subs	r3, r3, r2
    46f4:	465a      	mov	r2, fp
    46f6:	0412      	lsls	r2, r2, #16
    46f8:	432a      	orrs	r2, r5
    46fa:	9903      	ldr	r1, [sp, #12]
    46fc:	4693      	mov	fp, r2
    46fe:	0c10      	lsrs	r0, r2, #16
    4700:	0c0a      	lsrs	r2, r1, #16
    4702:	4691      	mov	r9, r2
    4704:	0409      	lsls	r1, r1, #16
    4706:	465a      	mov	r2, fp
    4708:	0c09      	lsrs	r1, r1, #16
    470a:	464e      	mov	r6, r9
    470c:	000d      	movs	r5, r1
    470e:	0412      	lsls	r2, r2, #16
    4710:	0c12      	lsrs	r2, r2, #16
    4712:	4345      	muls	r5, r0
    4714:	9105      	str	r1, [sp, #20]
    4716:	4351      	muls	r1, r2
    4718:	4372      	muls	r2, r6
    471a:	4370      	muls	r0, r6
    471c:	1952      	adds	r2, r2, r5
    471e:	0c0e      	lsrs	r6, r1, #16
    4720:	18b2      	adds	r2, r6, r2
    4722:	4295      	cmp	r5, r2
    4724:	d903      	bls.n	472e <__aeabi_ddiv+0x2de>
    4726:	2580      	movs	r5, #128	; 0x80
    4728:	026d      	lsls	r5, r5, #9
    472a:	46ac      	mov	ip, r5
    472c:	4460      	add	r0, ip
    472e:	0c15      	lsrs	r5, r2, #16
    4730:	0409      	lsls	r1, r1, #16
    4732:	0412      	lsls	r2, r2, #16
    4734:	0c09      	lsrs	r1, r1, #16
    4736:	1828      	adds	r0, r5, r0
    4738:	1852      	adds	r2, r2, r1
    473a:	4283      	cmp	r3, r0
    473c:	d200      	bcs.n	4740 <__aeabi_ddiv+0x2f0>
    473e:	e0ce      	b.n	48de <__aeabi_ddiv+0x48e>
    4740:	d100      	bne.n	4744 <__aeabi_ddiv+0x2f4>
    4742:	e0c8      	b.n	48d6 <__aeabi_ddiv+0x486>
    4744:	1a1d      	subs	r5, r3, r0
    4746:	4653      	mov	r3, sl
    4748:	1a9e      	subs	r6, r3, r2
    474a:	45b2      	cmp	sl, r6
    474c:	4192      	sbcs	r2, r2
    474e:	4252      	negs	r2, r2
    4750:	1aab      	subs	r3, r5, r2
    4752:	469a      	mov	sl, r3
    4754:	4598      	cmp	r8, r3
    4756:	d100      	bne.n	475a <__aeabi_ddiv+0x30a>
    4758:	e117      	b.n	498a <__aeabi_ddiv+0x53a>
    475a:	0039      	movs	r1, r7
    475c:	0018      	movs	r0, r3
    475e:	f7ff fab1 	bl	3cc4 <__udivsi3>
    4762:	9b01      	ldr	r3, [sp, #4]
    4764:	0005      	movs	r5, r0
    4766:	4343      	muls	r3, r0
    4768:	0039      	movs	r1, r7
    476a:	4650      	mov	r0, sl
    476c:	9304      	str	r3, [sp, #16]
    476e:	f7ff fb2f 	bl	3dd0 <__aeabi_uidivmod>
    4772:	9804      	ldr	r0, [sp, #16]
    4774:	040b      	lsls	r3, r1, #16
    4776:	0c31      	lsrs	r1, r6, #16
    4778:	4319      	orrs	r1, r3
    477a:	4288      	cmp	r0, r1
    477c:	d909      	bls.n	4792 <__aeabi_ddiv+0x342>
    477e:	4441      	add	r1, r8
    4780:	1e6b      	subs	r3, r5, #1
    4782:	4588      	cmp	r8, r1
    4784:	d900      	bls.n	4788 <__aeabi_ddiv+0x338>
    4786:	e107      	b.n	4998 <__aeabi_ddiv+0x548>
    4788:	4288      	cmp	r0, r1
    478a:	d800      	bhi.n	478e <__aeabi_ddiv+0x33e>
    478c:	e104      	b.n	4998 <__aeabi_ddiv+0x548>
    478e:	3d02      	subs	r5, #2
    4790:	4441      	add	r1, r8
    4792:	9b04      	ldr	r3, [sp, #16]
    4794:	1acb      	subs	r3, r1, r3
    4796:	0018      	movs	r0, r3
    4798:	0039      	movs	r1, r7
    479a:	9304      	str	r3, [sp, #16]
    479c:	f7ff fa92 	bl	3cc4 <__udivsi3>
    47a0:	9b01      	ldr	r3, [sp, #4]
    47a2:	4682      	mov	sl, r0
    47a4:	4343      	muls	r3, r0
    47a6:	0039      	movs	r1, r7
    47a8:	9804      	ldr	r0, [sp, #16]
    47aa:	9301      	str	r3, [sp, #4]
    47ac:	f7ff fb10 	bl	3dd0 <__aeabi_uidivmod>
    47b0:	9801      	ldr	r0, [sp, #4]
    47b2:	040b      	lsls	r3, r1, #16
    47b4:	0431      	lsls	r1, r6, #16
    47b6:	0c09      	lsrs	r1, r1, #16
    47b8:	4319      	orrs	r1, r3
    47ba:	4288      	cmp	r0, r1
    47bc:	d90d      	bls.n	47da <__aeabi_ddiv+0x38a>
    47be:	4653      	mov	r3, sl
    47c0:	4441      	add	r1, r8
    47c2:	3b01      	subs	r3, #1
    47c4:	4588      	cmp	r8, r1
    47c6:	d900      	bls.n	47ca <__aeabi_ddiv+0x37a>
    47c8:	e0e8      	b.n	499c <__aeabi_ddiv+0x54c>
    47ca:	4288      	cmp	r0, r1
    47cc:	d800      	bhi.n	47d0 <__aeabi_ddiv+0x380>
    47ce:	e0e5      	b.n	499c <__aeabi_ddiv+0x54c>
    47d0:	2302      	movs	r3, #2
    47d2:	425b      	negs	r3, r3
    47d4:	469c      	mov	ip, r3
    47d6:	4441      	add	r1, r8
    47d8:	44e2      	add	sl, ip
    47da:	9b01      	ldr	r3, [sp, #4]
    47dc:	042d      	lsls	r5, r5, #16
    47de:	1ace      	subs	r6, r1, r3
    47e0:	4651      	mov	r1, sl
    47e2:	4329      	orrs	r1, r5
    47e4:	9d05      	ldr	r5, [sp, #20]
    47e6:	464f      	mov	r7, r9
    47e8:	002a      	movs	r2, r5
    47ea:	040b      	lsls	r3, r1, #16
    47ec:	0c08      	lsrs	r0, r1, #16
    47ee:	0c1b      	lsrs	r3, r3, #16
    47f0:	435a      	muls	r2, r3
    47f2:	4345      	muls	r5, r0
    47f4:	437b      	muls	r3, r7
    47f6:	4378      	muls	r0, r7
    47f8:	195b      	adds	r3, r3, r5
    47fa:	0c17      	lsrs	r7, r2, #16
    47fc:	18fb      	adds	r3, r7, r3
    47fe:	429d      	cmp	r5, r3
    4800:	d903      	bls.n	480a <__aeabi_ddiv+0x3ba>
    4802:	2580      	movs	r5, #128	; 0x80
    4804:	026d      	lsls	r5, r5, #9
    4806:	46ac      	mov	ip, r5
    4808:	4460      	add	r0, ip
    480a:	0c1d      	lsrs	r5, r3, #16
    480c:	0412      	lsls	r2, r2, #16
    480e:	041b      	lsls	r3, r3, #16
    4810:	0c12      	lsrs	r2, r2, #16
    4812:	1828      	adds	r0, r5, r0
    4814:	189b      	adds	r3, r3, r2
    4816:	4286      	cmp	r6, r0
    4818:	d200      	bcs.n	481c <__aeabi_ddiv+0x3cc>
    481a:	e093      	b.n	4944 <__aeabi_ddiv+0x4f4>
    481c:	d100      	bne.n	4820 <__aeabi_ddiv+0x3d0>
    481e:	e08e      	b.n	493e <__aeabi_ddiv+0x4ee>
    4820:	2301      	movs	r3, #1
    4822:	4319      	orrs	r1, r3
    4824:	4ba0      	ldr	r3, [pc, #640]	; (4aa8 <__aeabi_ddiv+0x658>)
    4826:	18e3      	adds	r3, r4, r3
    4828:	2b00      	cmp	r3, #0
    482a:	dc00      	bgt.n	482e <__aeabi_ddiv+0x3de>
    482c:	e099      	b.n	4962 <__aeabi_ddiv+0x512>
    482e:	074a      	lsls	r2, r1, #29
    4830:	d000      	beq.n	4834 <__aeabi_ddiv+0x3e4>
    4832:	e09e      	b.n	4972 <__aeabi_ddiv+0x522>
    4834:	465a      	mov	r2, fp
    4836:	01d2      	lsls	r2, r2, #7
    4838:	d506      	bpl.n	4848 <__aeabi_ddiv+0x3f8>
    483a:	465a      	mov	r2, fp
    483c:	4b9b      	ldr	r3, [pc, #620]	; (4aac <__aeabi_ddiv+0x65c>)
    483e:	401a      	ands	r2, r3
    4840:	2380      	movs	r3, #128	; 0x80
    4842:	4693      	mov	fp, r2
    4844:	00db      	lsls	r3, r3, #3
    4846:	18e3      	adds	r3, r4, r3
    4848:	4a99      	ldr	r2, [pc, #612]	; (4ab0 <__aeabi_ddiv+0x660>)
    484a:	4293      	cmp	r3, r2
    484c:	dd68      	ble.n	4920 <__aeabi_ddiv+0x4d0>
    484e:	2301      	movs	r3, #1
    4850:	9a02      	ldr	r2, [sp, #8]
    4852:	4c98      	ldr	r4, [pc, #608]	; (4ab4 <__aeabi_ddiv+0x664>)
    4854:	401a      	ands	r2, r3
    4856:	2300      	movs	r3, #0
    4858:	4694      	mov	ip, r2
    485a:	4698      	mov	r8, r3
    485c:	2200      	movs	r2, #0
    485e:	e6c5      	b.n	45ec <__aeabi_ddiv+0x19c>
    4860:	2280      	movs	r2, #128	; 0x80
    4862:	464b      	mov	r3, r9
    4864:	0312      	lsls	r2, r2, #12
    4866:	4213      	tst	r3, r2
    4868:	d00a      	beq.n	4880 <__aeabi_ddiv+0x430>
    486a:	465b      	mov	r3, fp
    486c:	4213      	tst	r3, r2
    486e:	d106      	bne.n	487e <__aeabi_ddiv+0x42e>
    4870:	431a      	orrs	r2, r3
    4872:	0312      	lsls	r2, r2, #12
    4874:	0b12      	lsrs	r2, r2, #12
    4876:	46ac      	mov	ip, r5
    4878:	4688      	mov	r8, r1
    487a:	4c8e      	ldr	r4, [pc, #568]	; (4ab4 <__aeabi_ddiv+0x664>)
    487c:	e6b6      	b.n	45ec <__aeabi_ddiv+0x19c>
    487e:	464b      	mov	r3, r9
    4880:	431a      	orrs	r2, r3
    4882:	0312      	lsls	r2, r2, #12
    4884:	0b12      	lsrs	r2, r2, #12
    4886:	46bc      	mov	ip, r7
    4888:	4c8a      	ldr	r4, [pc, #552]	; (4ab4 <__aeabi_ddiv+0x664>)
    488a:	e6af      	b.n	45ec <__aeabi_ddiv+0x19c>
    488c:	0003      	movs	r3, r0
    488e:	465a      	mov	r2, fp
    4890:	3b28      	subs	r3, #40	; 0x28
    4892:	409a      	lsls	r2, r3
    4894:	2300      	movs	r3, #0
    4896:	4691      	mov	r9, r2
    4898:	4698      	mov	r8, r3
    489a:	e657      	b.n	454c <__aeabi_ddiv+0xfc>
    489c:	4658      	mov	r0, fp
    489e:	f000 ff0d 	bl	56bc <__clzsi2>
    48a2:	3020      	adds	r0, #32
    48a4:	e640      	b.n	4528 <__aeabi_ddiv+0xd8>
    48a6:	0003      	movs	r3, r0
    48a8:	4652      	mov	r2, sl
    48aa:	3b28      	subs	r3, #40	; 0x28
    48ac:	409a      	lsls	r2, r3
    48ae:	2100      	movs	r1, #0
    48b0:	4693      	mov	fp, r2
    48b2:	e677      	b.n	45a4 <__aeabi_ddiv+0x154>
    48b4:	f000 ff02 	bl	56bc <__clzsi2>
    48b8:	3020      	adds	r0, #32
    48ba:	e65f      	b.n	457c <__aeabi_ddiv+0x12c>
    48bc:	4588      	cmp	r8, r1
    48be:	d200      	bcs.n	48c2 <__aeabi_ddiv+0x472>
    48c0:	e6c7      	b.n	4652 <__aeabi_ddiv+0x202>
    48c2:	464b      	mov	r3, r9
    48c4:	07de      	lsls	r6, r3, #31
    48c6:	085d      	lsrs	r5, r3, #1
    48c8:	4643      	mov	r3, r8
    48ca:	085b      	lsrs	r3, r3, #1
    48cc:	431e      	orrs	r6, r3
    48ce:	4643      	mov	r3, r8
    48d0:	07db      	lsls	r3, r3, #31
    48d2:	469a      	mov	sl, r3
    48d4:	e6c2      	b.n	465c <__aeabi_ddiv+0x20c>
    48d6:	2500      	movs	r5, #0
    48d8:	4592      	cmp	sl, r2
    48da:	d300      	bcc.n	48de <__aeabi_ddiv+0x48e>
    48dc:	e733      	b.n	4746 <__aeabi_ddiv+0x2f6>
    48de:	9e03      	ldr	r6, [sp, #12]
    48e0:	4659      	mov	r1, fp
    48e2:	46b4      	mov	ip, r6
    48e4:	44e2      	add	sl, ip
    48e6:	45b2      	cmp	sl, r6
    48e8:	41ad      	sbcs	r5, r5
    48ea:	426d      	negs	r5, r5
    48ec:	4445      	add	r5, r8
    48ee:	18eb      	adds	r3, r5, r3
    48f0:	3901      	subs	r1, #1
    48f2:	4598      	cmp	r8, r3
    48f4:	d207      	bcs.n	4906 <__aeabi_ddiv+0x4b6>
    48f6:	4298      	cmp	r0, r3
    48f8:	d900      	bls.n	48fc <__aeabi_ddiv+0x4ac>
    48fa:	e07f      	b.n	49fc <__aeabi_ddiv+0x5ac>
    48fc:	d100      	bne.n	4900 <__aeabi_ddiv+0x4b0>
    48fe:	e0bc      	b.n	4a7a <__aeabi_ddiv+0x62a>
    4900:	1a1d      	subs	r5, r3, r0
    4902:	468b      	mov	fp, r1
    4904:	e71f      	b.n	4746 <__aeabi_ddiv+0x2f6>
    4906:	4598      	cmp	r8, r3
    4908:	d1fa      	bne.n	4900 <__aeabi_ddiv+0x4b0>
    490a:	9d03      	ldr	r5, [sp, #12]
    490c:	4555      	cmp	r5, sl
    490e:	d9f2      	bls.n	48f6 <__aeabi_ddiv+0x4a6>
    4910:	4643      	mov	r3, r8
    4912:	468b      	mov	fp, r1
    4914:	1a1d      	subs	r5, r3, r0
    4916:	e716      	b.n	4746 <__aeabi_ddiv+0x2f6>
    4918:	469b      	mov	fp, r3
    491a:	e6ca      	b.n	46b2 <__aeabi_ddiv+0x262>
    491c:	0015      	movs	r5, r2
    491e:	e6e7      	b.n	46f0 <__aeabi_ddiv+0x2a0>
    4920:	465a      	mov	r2, fp
    4922:	08c9      	lsrs	r1, r1, #3
    4924:	0752      	lsls	r2, r2, #29
    4926:	430a      	orrs	r2, r1
    4928:	055b      	lsls	r3, r3, #21
    492a:	4690      	mov	r8, r2
    492c:	0d5c      	lsrs	r4, r3, #21
    492e:	465a      	mov	r2, fp
    4930:	2301      	movs	r3, #1
    4932:	9902      	ldr	r1, [sp, #8]
    4934:	0252      	lsls	r2, r2, #9
    4936:	4019      	ands	r1, r3
    4938:	0b12      	lsrs	r2, r2, #12
    493a:	468c      	mov	ip, r1
    493c:	e656      	b.n	45ec <__aeabi_ddiv+0x19c>
    493e:	2b00      	cmp	r3, #0
    4940:	d100      	bne.n	4944 <__aeabi_ddiv+0x4f4>
    4942:	e76f      	b.n	4824 <__aeabi_ddiv+0x3d4>
    4944:	4446      	add	r6, r8
    4946:	1e4a      	subs	r2, r1, #1
    4948:	45b0      	cmp	r8, r6
    494a:	d929      	bls.n	49a0 <__aeabi_ddiv+0x550>
    494c:	0011      	movs	r1, r2
    494e:	4286      	cmp	r6, r0
    4950:	d000      	beq.n	4954 <__aeabi_ddiv+0x504>
    4952:	e765      	b.n	4820 <__aeabi_ddiv+0x3d0>
    4954:	9a03      	ldr	r2, [sp, #12]
    4956:	4293      	cmp	r3, r2
    4958:	d000      	beq.n	495c <__aeabi_ddiv+0x50c>
    495a:	e761      	b.n	4820 <__aeabi_ddiv+0x3d0>
    495c:	e762      	b.n	4824 <__aeabi_ddiv+0x3d4>
    495e:	2101      	movs	r1, #1
    4960:	4249      	negs	r1, r1
    4962:	2001      	movs	r0, #1
    4964:	1ac2      	subs	r2, r0, r3
    4966:	2a38      	cmp	r2, #56	; 0x38
    4968:	dd21      	ble.n	49ae <__aeabi_ddiv+0x55e>
    496a:	9b02      	ldr	r3, [sp, #8]
    496c:	4003      	ands	r3, r0
    496e:	469c      	mov	ip, r3
    4970:	e638      	b.n	45e4 <__aeabi_ddiv+0x194>
    4972:	220f      	movs	r2, #15
    4974:	400a      	ands	r2, r1
    4976:	2a04      	cmp	r2, #4
    4978:	d100      	bne.n	497c <__aeabi_ddiv+0x52c>
    497a:	e75b      	b.n	4834 <__aeabi_ddiv+0x3e4>
    497c:	000a      	movs	r2, r1
    497e:	1d11      	adds	r1, r2, #4
    4980:	4291      	cmp	r1, r2
    4982:	4192      	sbcs	r2, r2
    4984:	4252      	negs	r2, r2
    4986:	4493      	add	fp, r2
    4988:	e754      	b.n	4834 <__aeabi_ddiv+0x3e4>
    498a:	4b47      	ldr	r3, [pc, #284]	; (4aa8 <__aeabi_ddiv+0x658>)
    498c:	18e3      	adds	r3, r4, r3
    498e:	2b00      	cmp	r3, #0
    4990:	dde5      	ble.n	495e <__aeabi_ddiv+0x50e>
    4992:	2201      	movs	r2, #1
    4994:	4252      	negs	r2, r2
    4996:	e7f2      	b.n	497e <__aeabi_ddiv+0x52e>
    4998:	001d      	movs	r5, r3
    499a:	e6fa      	b.n	4792 <__aeabi_ddiv+0x342>
    499c:	469a      	mov	sl, r3
    499e:	e71c      	b.n	47da <__aeabi_ddiv+0x38a>
    49a0:	42b0      	cmp	r0, r6
    49a2:	d839      	bhi.n	4a18 <__aeabi_ddiv+0x5c8>
    49a4:	d06e      	beq.n	4a84 <__aeabi_ddiv+0x634>
    49a6:	0011      	movs	r1, r2
    49a8:	e73a      	b.n	4820 <__aeabi_ddiv+0x3d0>
    49aa:	9302      	str	r3, [sp, #8]
    49ac:	e73a      	b.n	4824 <__aeabi_ddiv+0x3d4>
    49ae:	2a1f      	cmp	r2, #31
    49b0:	dc3c      	bgt.n	4a2c <__aeabi_ddiv+0x5dc>
    49b2:	2320      	movs	r3, #32
    49b4:	1a9b      	subs	r3, r3, r2
    49b6:	000c      	movs	r4, r1
    49b8:	4658      	mov	r0, fp
    49ba:	4099      	lsls	r1, r3
    49bc:	4098      	lsls	r0, r3
    49be:	1e4b      	subs	r3, r1, #1
    49c0:	4199      	sbcs	r1, r3
    49c2:	465b      	mov	r3, fp
    49c4:	40d4      	lsrs	r4, r2
    49c6:	40d3      	lsrs	r3, r2
    49c8:	4320      	orrs	r0, r4
    49ca:	4308      	orrs	r0, r1
    49cc:	001a      	movs	r2, r3
    49ce:	0743      	lsls	r3, r0, #29
    49d0:	d009      	beq.n	49e6 <__aeabi_ddiv+0x596>
    49d2:	230f      	movs	r3, #15
    49d4:	4003      	ands	r3, r0
    49d6:	2b04      	cmp	r3, #4
    49d8:	d005      	beq.n	49e6 <__aeabi_ddiv+0x596>
    49da:	0001      	movs	r1, r0
    49dc:	1d08      	adds	r0, r1, #4
    49de:	4288      	cmp	r0, r1
    49e0:	419b      	sbcs	r3, r3
    49e2:	425b      	negs	r3, r3
    49e4:	18d2      	adds	r2, r2, r3
    49e6:	0213      	lsls	r3, r2, #8
    49e8:	d53a      	bpl.n	4a60 <__aeabi_ddiv+0x610>
    49ea:	2301      	movs	r3, #1
    49ec:	9a02      	ldr	r2, [sp, #8]
    49ee:	2401      	movs	r4, #1
    49f0:	401a      	ands	r2, r3
    49f2:	2300      	movs	r3, #0
    49f4:	4694      	mov	ip, r2
    49f6:	4698      	mov	r8, r3
    49f8:	2200      	movs	r2, #0
    49fa:	e5f7      	b.n	45ec <__aeabi_ddiv+0x19c>
    49fc:	2102      	movs	r1, #2
    49fe:	4249      	negs	r1, r1
    4a00:	468c      	mov	ip, r1
    4a02:	9d03      	ldr	r5, [sp, #12]
    4a04:	44e3      	add	fp, ip
    4a06:	46ac      	mov	ip, r5
    4a08:	44e2      	add	sl, ip
    4a0a:	45aa      	cmp	sl, r5
    4a0c:	41ad      	sbcs	r5, r5
    4a0e:	426d      	negs	r5, r5
    4a10:	4445      	add	r5, r8
    4a12:	18ed      	adds	r5, r5, r3
    4a14:	1a2d      	subs	r5, r5, r0
    4a16:	e696      	b.n	4746 <__aeabi_ddiv+0x2f6>
    4a18:	1e8a      	subs	r2, r1, #2
    4a1a:	9903      	ldr	r1, [sp, #12]
    4a1c:	004d      	lsls	r5, r1, #1
    4a1e:	428d      	cmp	r5, r1
    4a20:	4189      	sbcs	r1, r1
    4a22:	4249      	negs	r1, r1
    4a24:	4441      	add	r1, r8
    4a26:	1876      	adds	r6, r6, r1
    4a28:	9503      	str	r5, [sp, #12]
    4a2a:	e78f      	b.n	494c <__aeabi_ddiv+0x4fc>
    4a2c:	201f      	movs	r0, #31
    4a2e:	4240      	negs	r0, r0
    4a30:	1ac3      	subs	r3, r0, r3
    4a32:	4658      	mov	r0, fp
    4a34:	40d8      	lsrs	r0, r3
    4a36:	0003      	movs	r3, r0
    4a38:	2a20      	cmp	r2, #32
    4a3a:	d028      	beq.n	4a8e <__aeabi_ddiv+0x63e>
    4a3c:	2040      	movs	r0, #64	; 0x40
    4a3e:	465d      	mov	r5, fp
    4a40:	1a82      	subs	r2, r0, r2
    4a42:	4095      	lsls	r5, r2
    4a44:	4329      	orrs	r1, r5
    4a46:	1e4a      	subs	r2, r1, #1
    4a48:	4191      	sbcs	r1, r2
    4a4a:	4319      	orrs	r1, r3
    4a4c:	2307      	movs	r3, #7
    4a4e:	2200      	movs	r2, #0
    4a50:	400b      	ands	r3, r1
    4a52:	d009      	beq.n	4a68 <__aeabi_ddiv+0x618>
    4a54:	230f      	movs	r3, #15
    4a56:	2200      	movs	r2, #0
    4a58:	400b      	ands	r3, r1
    4a5a:	0008      	movs	r0, r1
    4a5c:	2b04      	cmp	r3, #4
    4a5e:	d1bd      	bne.n	49dc <__aeabi_ddiv+0x58c>
    4a60:	0001      	movs	r1, r0
    4a62:	0753      	lsls	r3, r2, #29
    4a64:	0252      	lsls	r2, r2, #9
    4a66:	0b12      	lsrs	r2, r2, #12
    4a68:	08c9      	lsrs	r1, r1, #3
    4a6a:	4319      	orrs	r1, r3
    4a6c:	2301      	movs	r3, #1
    4a6e:	4688      	mov	r8, r1
    4a70:	9902      	ldr	r1, [sp, #8]
    4a72:	2400      	movs	r4, #0
    4a74:	4019      	ands	r1, r3
    4a76:	468c      	mov	ip, r1
    4a78:	e5b8      	b.n	45ec <__aeabi_ddiv+0x19c>
    4a7a:	4552      	cmp	r2, sl
    4a7c:	d8be      	bhi.n	49fc <__aeabi_ddiv+0x5ac>
    4a7e:	468b      	mov	fp, r1
    4a80:	2500      	movs	r5, #0
    4a82:	e660      	b.n	4746 <__aeabi_ddiv+0x2f6>
    4a84:	9d03      	ldr	r5, [sp, #12]
    4a86:	429d      	cmp	r5, r3
    4a88:	d3c6      	bcc.n	4a18 <__aeabi_ddiv+0x5c8>
    4a8a:	0011      	movs	r1, r2
    4a8c:	e762      	b.n	4954 <__aeabi_ddiv+0x504>
    4a8e:	2500      	movs	r5, #0
    4a90:	e7d8      	b.n	4a44 <__aeabi_ddiv+0x5f4>
    4a92:	2280      	movs	r2, #128	; 0x80
    4a94:	465b      	mov	r3, fp
    4a96:	0312      	lsls	r2, r2, #12
    4a98:	431a      	orrs	r2, r3
    4a9a:	9b01      	ldr	r3, [sp, #4]
    4a9c:	0312      	lsls	r2, r2, #12
    4a9e:	0b12      	lsrs	r2, r2, #12
    4aa0:	469c      	mov	ip, r3
    4aa2:	4688      	mov	r8, r1
    4aa4:	4c03      	ldr	r4, [pc, #12]	; (4ab4 <__aeabi_ddiv+0x664>)
    4aa6:	e5a1      	b.n	45ec <__aeabi_ddiv+0x19c>
    4aa8:	000003ff 	.word	0x000003ff
    4aac:	feffffff 	.word	0xfeffffff
    4ab0:	000007fe 	.word	0x000007fe
    4ab4:	000007ff 	.word	0x000007ff

00004ab8 <__aeabi_dmul>:
    4ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aba:	4657      	mov	r7, sl
    4abc:	4645      	mov	r5, r8
    4abe:	46de      	mov	lr, fp
    4ac0:	464e      	mov	r6, r9
    4ac2:	b5e0      	push	{r5, r6, r7, lr}
    4ac4:	030c      	lsls	r4, r1, #12
    4ac6:	4698      	mov	r8, r3
    4ac8:	004e      	lsls	r6, r1, #1
    4aca:	0b23      	lsrs	r3, r4, #12
    4acc:	b087      	sub	sp, #28
    4ace:	0007      	movs	r7, r0
    4ad0:	4692      	mov	sl, r2
    4ad2:	469b      	mov	fp, r3
    4ad4:	0d76      	lsrs	r6, r6, #21
    4ad6:	0fcd      	lsrs	r5, r1, #31
    4ad8:	2e00      	cmp	r6, #0
    4ada:	d06b      	beq.n	4bb4 <__aeabi_dmul+0xfc>
    4adc:	4b6d      	ldr	r3, [pc, #436]	; (4c94 <__aeabi_dmul+0x1dc>)
    4ade:	429e      	cmp	r6, r3
    4ae0:	d035      	beq.n	4b4e <__aeabi_dmul+0x96>
    4ae2:	2480      	movs	r4, #128	; 0x80
    4ae4:	465b      	mov	r3, fp
    4ae6:	0f42      	lsrs	r2, r0, #29
    4ae8:	0424      	lsls	r4, r4, #16
    4aea:	00db      	lsls	r3, r3, #3
    4aec:	4314      	orrs	r4, r2
    4aee:	431c      	orrs	r4, r3
    4af0:	00c3      	lsls	r3, r0, #3
    4af2:	4699      	mov	r9, r3
    4af4:	4b68      	ldr	r3, [pc, #416]	; (4c98 <__aeabi_dmul+0x1e0>)
    4af6:	46a3      	mov	fp, r4
    4af8:	469c      	mov	ip, r3
    4afa:	2300      	movs	r3, #0
    4afc:	2700      	movs	r7, #0
    4afe:	4466      	add	r6, ip
    4b00:	9302      	str	r3, [sp, #8]
    4b02:	4643      	mov	r3, r8
    4b04:	031c      	lsls	r4, r3, #12
    4b06:	005a      	lsls	r2, r3, #1
    4b08:	0fdb      	lsrs	r3, r3, #31
    4b0a:	4650      	mov	r0, sl
    4b0c:	0b24      	lsrs	r4, r4, #12
    4b0e:	0d52      	lsrs	r2, r2, #21
    4b10:	4698      	mov	r8, r3
    4b12:	d100      	bne.n	4b16 <__aeabi_dmul+0x5e>
    4b14:	e076      	b.n	4c04 <__aeabi_dmul+0x14c>
    4b16:	4b5f      	ldr	r3, [pc, #380]	; (4c94 <__aeabi_dmul+0x1dc>)
    4b18:	429a      	cmp	r2, r3
    4b1a:	d06d      	beq.n	4bf8 <__aeabi_dmul+0x140>
    4b1c:	2380      	movs	r3, #128	; 0x80
    4b1e:	0f41      	lsrs	r1, r0, #29
    4b20:	041b      	lsls	r3, r3, #16
    4b22:	430b      	orrs	r3, r1
    4b24:	495c      	ldr	r1, [pc, #368]	; (4c98 <__aeabi_dmul+0x1e0>)
    4b26:	00e4      	lsls	r4, r4, #3
    4b28:	468c      	mov	ip, r1
    4b2a:	431c      	orrs	r4, r3
    4b2c:	00c3      	lsls	r3, r0, #3
    4b2e:	2000      	movs	r0, #0
    4b30:	4462      	add	r2, ip
    4b32:	4641      	mov	r1, r8
    4b34:	18b6      	adds	r6, r6, r2
    4b36:	4069      	eors	r1, r5
    4b38:	1c72      	adds	r2, r6, #1
    4b3a:	9101      	str	r1, [sp, #4]
    4b3c:	4694      	mov	ip, r2
    4b3e:	4307      	orrs	r7, r0
    4b40:	2f0f      	cmp	r7, #15
    4b42:	d900      	bls.n	4b46 <__aeabi_dmul+0x8e>
    4b44:	e0b0      	b.n	4ca8 <__aeabi_dmul+0x1f0>
    4b46:	4a55      	ldr	r2, [pc, #340]	; (4c9c <__aeabi_dmul+0x1e4>)
    4b48:	00bf      	lsls	r7, r7, #2
    4b4a:	59d2      	ldr	r2, [r2, r7]
    4b4c:	4697      	mov	pc, r2
    4b4e:	465b      	mov	r3, fp
    4b50:	4303      	orrs	r3, r0
    4b52:	4699      	mov	r9, r3
    4b54:	d000      	beq.n	4b58 <__aeabi_dmul+0xa0>
    4b56:	e087      	b.n	4c68 <__aeabi_dmul+0x1b0>
    4b58:	2300      	movs	r3, #0
    4b5a:	469b      	mov	fp, r3
    4b5c:	3302      	adds	r3, #2
    4b5e:	2708      	movs	r7, #8
    4b60:	9302      	str	r3, [sp, #8]
    4b62:	e7ce      	b.n	4b02 <__aeabi_dmul+0x4a>
    4b64:	4642      	mov	r2, r8
    4b66:	9201      	str	r2, [sp, #4]
    4b68:	2802      	cmp	r0, #2
    4b6a:	d067      	beq.n	4c3c <__aeabi_dmul+0x184>
    4b6c:	2803      	cmp	r0, #3
    4b6e:	d100      	bne.n	4b72 <__aeabi_dmul+0xba>
    4b70:	e20e      	b.n	4f90 <__aeabi_dmul+0x4d8>
    4b72:	2801      	cmp	r0, #1
    4b74:	d000      	beq.n	4b78 <__aeabi_dmul+0xc0>
    4b76:	e162      	b.n	4e3e <__aeabi_dmul+0x386>
    4b78:	2300      	movs	r3, #0
    4b7a:	2400      	movs	r4, #0
    4b7c:	2200      	movs	r2, #0
    4b7e:	4699      	mov	r9, r3
    4b80:	9901      	ldr	r1, [sp, #4]
    4b82:	4001      	ands	r1, r0
    4b84:	b2cd      	uxtb	r5, r1
    4b86:	2100      	movs	r1, #0
    4b88:	0312      	lsls	r2, r2, #12
    4b8a:	0d0b      	lsrs	r3, r1, #20
    4b8c:	0b12      	lsrs	r2, r2, #12
    4b8e:	051b      	lsls	r3, r3, #20
    4b90:	4313      	orrs	r3, r2
    4b92:	4a43      	ldr	r2, [pc, #268]	; (4ca0 <__aeabi_dmul+0x1e8>)
    4b94:	0524      	lsls	r4, r4, #20
    4b96:	4013      	ands	r3, r2
    4b98:	431c      	orrs	r4, r3
    4b9a:	0064      	lsls	r4, r4, #1
    4b9c:	07ed      	lsls	r5, r5, #31
    4b9e:	0864      	lsrs	r4, r4, #1
    4ba0:	432c      	orrs	r4, r5
    4ba2:	4648      	mov	r0, r9
    4ba4:	0021      	movs	r1, r4
    4ba6:	b007      	add	sp, #28
    4ba8:	bc3c      	pop	{r2, r3, r4, r5}
    4baa:	4690      	mov	r8, r2
    4bac:	4699      	mov	r9, r3
    4bae:	46a2      	mov	sl, r4
    4bb0:	46ab      	mov	fp, r5
    4bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bb4:	4303      	orrs	r3, r0
    4bb6:	4699      	mov	r9, r3
    4bb8:	d04f      	beq.n	4c5a <__aeabi_dmul+0x1a2>
    4bba:	465b      	mov	r3, fp
    4bbc:	2b00      	cmp	r3, #0
    4bbe:	d100      	bne.n	4bc2 <__aeabi_dmul+0x10a>
    4bc0:	e189      	b.n	4ed6 <__aeabi_dmul+0x41e>
    4bc2:	4658      	mov	r0, fp
    4bc4:	f000 fd7a 	bl	56bc <__clzsi2>
    4bc8:	0003      	movs	r3, r0
    4bca:	3b0b      	subs	r3, #11
    4bcc:	2b1c      	cmp	r3, #28
    4bce:	dd00      	ble.n	4bd2 <__aeabi_dmul+0x11a>
    4bd0:	e17a      	b.n	4ec8 <__aeabi_dmul+0x410>
    4bd2:	221d      	movs	r2, #29
    4bd4:	1ad3      	subs	r3, r2, r3
    4bd6:	003a      	movs	r2, r7
    4bd8:	0001      	movs	r1, r0
    4bda:	465c      	mov	r4, fp
    4bdc:	40da      	lsrs	r2, r3
    4bde:	3908      	subs	r1, #8
    4be0:	408c      	lsls	r4, r1
    4be2:	0013      	movs	r3, r2
    4be4:	408f      	lsls	r7, r1
    4be6:	4323      	orrs	r3, r4
    4be8:	469b      	mov	fp, r3
    4bea:	46b9      	mov	r9, r7
    4bec:	2300      	movs	r3, #0
    4bee:	4e2d      	ldr	r6, [pc, #180]	; (4ca4 <__aeabi_dmul+0x1ec>)
    4bf0:	2700      	movs	r7, #0
    4bf2:	1a36      	subs	r6, r6, r0
    4bf4:	9302      	str	r3, [sp, #8]
    4bf6:	e784      	b.n	4b02 <__aeabi_dmul+0x4a>
    4bf8:	4653      	mov	r3, sl
    4bfa:	4323      	orrs	r3, r4
    4bfc:	d12a      	bne.n	4c54 <__aeabi_dmul+0x19c>
    4bfe:	2400      	movs	r4, #0
    4c00:	2002      	movs	r0, #2
    4c02:	e796      	b.n	4b32 <__aeabi_dmul+0x7a>
    4c04:	4653      	mov	r3, sl
    4c06:	4323      	orrs	r3, r4
    4c08:	d020      	beq.n	4c4c <__aeabi_dmul+0x194>
    4c0a:	2c00      	cmp	r4, #0
    4c0c:	d100      	bne.n	4c10 <__aeabi_dmul+0x158>
    4c0e:	e157      	b.n	4ec0 <__aeabi_dmul+0x408>
    4c10:	0020      	movs	r0, r4
    4c12:	f000 fd53 	bl	56bc <__clzsi2>
    4c16:	0003      	movs	r3, r0
    4c18:	3b0b      	subs	r3, #11
    4c1a:	2b1c      	cmp	r3, #28
    4c1c:	dd00      	ble.n	4c20 <__aeabi_dmul+0x168>
    4c1e:	e149      	b.n	4eb4 <__aeabi_dmul+0x3fc>
    4c20:	211d      	movs	r1, #29
    4c22:	1acb      	subs	r3, r1, r3
    4c24:	4651      	mov	r1, sl
    4c26:	0002      	movs	r2, r0
    4c28:	40d9      	lsrs	r1, r3
    4c2a:	4653      	mov	r3, sl
    4c2c:	3a08      	subs	r2, #8
    4c2e:	4094      	lsls	r4, r2
    4c30:	4093      	lsls	r3, r2
    4c32:	430c      	orrs	r4, r1
    4c34:	4a1b      	ldr	r2, [pc, #108]	; (4ca4 <__aeabi_dmul+0x1ec>)
    4c36:	1a12      	subs	r2, r2, r0
    4c38:	2000      	movs	r0, #0
    4c3a:	e77a      	b.n	4b32 <__aeabi_dmul+0x7a>
    4c3c:	2501      	movs	r5, #1
    4c3e:	9b01      	ldr	r3, [sp, #4]
    4c40:	4c14      	ldr	r4, [pc, #80]	; (4c94 <__aeabi_dmul+0x1dc>)
    4c42:	401d      	ands	r5, r3
    4c44:	2300      	movs	r3, #0
    4c46:	2200      	movs	r2, #0
    4c48:	4699      	mov	r9, r3
    4c4a:	e79c      	b.n	4b86 <__aeabi_dmul+0xce>
    4c4c:	2400      	movs	r4, #0
    4c4e:	2200      	movs	r2, #0
    4c50:	2001      	movs	r0, #1
    4c52:	e76e      	b.n	4b32 <__aeabi_dmul+0x7a>
    4c54:	4653      	mov	r3, sl
    4c56:	2003      	movs	r0, #3
    4c58:	e76b      	b.n	4b32 <__aeabi_dmul+0x7a>
    4c5a:	2300      	movs	r3, #0
    4c5c:	469b      	mov	fp, r3
    4c5e:	3301      	adds	r3, #1
    4c60:	2704      	movs	r7, #4
    4c62:	2600      	movs	r6, #0
    4c64:	9302      	str	r3, [sp, #8]
    4c66:	e74c      	b.n	4b02 <__aeabi_dmul+0x4a>
    4c68:	2303      	movs	r3, #3
    4c6a:	4681      	mov	r9, r0
    4c6c:	270c      	movs	r7, #12
    4c6e:	9302      	str	r3, [sp, #8]
    4c70:	e747      	b.n	4b02 <__aeabi_dmul+0x4a>
    4c72:	2280      	movs	r2, #128	; 0x80
    4c74:	2300      	movs	r3, #0
    4c76:	2500      	movs	r5, #0
    4c78:	0312      	lsls	r2, r2, #12
    4c7a:	4699      	mov	r9, r3
    4c7c:	4c05      	ldr	r4, [pc, #20]	; (4c94 <__aeabi_dmul+0x1dc>)
    4c7e:	e782      	b.n	4b86 <__aeabi_dmul+0xce>
    4c80:	465c      	mov	r4, fp
    4c82:	464b      	mov	r3, r9
    4c84:	9802      	ldr	r0, [sp, #8]
    4c86:	e76f      	b.n	4b68 <__aeabi_dmul+0xb0>
    4c88:	465c      	mov	r4, fp
    4c8a:	464b      	mov	r3, r9
    4c8c:	9501      	str	r5, [sp, #4]
    4c8e:	9802      	ldr	r0, [sp, #8]
    4c90:	e76a      	b.n	4b68 <__aeabi_dmul+0xb0>
    4c92:	46c0      	nop			; (mov r8, r8)
    4c94:	000007ff 	.word	0x000007ff
    4c98:	fffffc01 	.word	0xfffffc01
    4c9c:	00005ad0 	.word	0x00005ad0
    4ca0:	800fffff 	.word	0x800fffff
    4ca4:	fffffc0d 	.word	0xfffffc0d
    4ca8:	464a      	mov	r2, r9
    4caa:	4649      	mov	r1, r9
    4cac:	0c17      	lsrs	r7, r2, #16
    4cae:	0c1a      	lsrs	r2, r3, #16
    4cb0:	041b      	lsls	r3, r3, #16
    4cb2:	0c1b      	lsrs	r3, r3, #16
    4cb4:	0408      	lsls	r0, r1, #16
    4cb6:	0019      	movs	r1, r3
    4cb8:	0c00      	lsrs	r0, r0, #16
    4cba:	4341      	muls	r1, r0
    4cbc:	0015      	movs	r5, r2
    4cbe:	4688      	mov	r8, r1
    4cc0:	0019      	movs	r1, r3
    4cc2:	437d      	muls	r5, r7
    4cc4:	4379      	muls	r1, r7
    4cc6:	9503      	str	r5, [sp, #12]
    4cc8:	4689      	mov	r9, r1
    4cca:	0029      	movs	r1, r5
    4ccc:	0015      	movs	r5, r2
    4cce:	4345      	muls	r5, r0
    4cd0:	444d      	add	r5, r9
    4cd2:	9502      	str	r5, [sp, #8]
    4cd4:	4645      	mov	r5, r8
    4cd6:	0c2d      	lsrs	r5, r5, #16
    4cd8:	46aa      	mov	sl, r5
    4cda:	9d02      	ldr	r5, [sp, #8]
    4cdc:	4455      	add	r5, sl
    4cde:	45a9      	cmp	r9, r5
    4ce0:	d906      	bls.n	4cf0 <__aeabi_dmul+0x238>
    4ce2:	468a      	mov	sl, r1
    4ce4:	2180      	movs	r1, #128	; 0x80
    4ce6:	0249      	lsls	r1, r1, #9
    4ce8:	4689      	mov	r9, r1
    4cea:	44ca      	add	sl, r9
    4cec:	4651      	mov	r1, sl
    4cee:	9103      	str	r1, [sp, #12]
    4cf0:	0c29      	lsrs	r1, r5, #16
    4cf2:	9104      	str	r1, [sp, #16]
    4cf4:	4641      	mov	r1, r8
    4cf6:	0409      	lsls	r1, r1, #16
    4cf8:	042d      	lsls	r5, r5, #16
    4cfa:	0c09      	lsrs	r1, r1, #16
    4cfc:	4688      	mov	r8, r1
    4cfe:	0029      	movs	r1, r5
    4d00:	0c25      	lsrs	r5, r4, #16
    4d02:	0424      	lsls	r4, r4, #16
    4d04:	4441      	add	r1, r8
    4d06:	0c24      	lsrs	r4, r4, #16
    4d08:	9105      	str	r1, [sp, #20]
    4d0a:	0021      	movs	r1, r4
    4d0c:	4341      	muls	r1, r0
    4d0e:	4688      	mov	r8, r1
    4d10:	0021      	movs	r1, r4
    4d12:	4379      	muls	r1, r7
    4d14:	468a      	mov	sl, r1
    4d16:	4368      	muls	r0, r5
    4d18:	4641      	mov	r1, r8
    4d1a:	4450      	add	r0, sl
    4d1c:	4681      	mov	r9, r0
    4d1e:	0c08      	lsrs	r0, r1, #16
    4d20:	4448      	add	r0, r9
    4d22:	436f      	muls	r7, r5
    4d24:	4582      	cmp	sl, r0
    4d26:	d903      	bls.n	4d30 <__aeabi_dmul+0x278>
    4d28:	2180      	movs	r1, #128	; 0x80
    4d2a:	0249      	lsls	r1, r1, #9
    4d2c:	4689      	mov	r9, r1
    4d2e:	444f      	add	r7, r9
    4d30:	0c01      	lsrs	r1, r0, #16
    4d32:	4689      	mov	r9, r1
    4d34:	0039      	movs	r1, r7
    4d36:	4449      	add	r1, r9
    4d38:	9102      	str	r1, [sp, #8]
    4d3a:	4641      	mov	r1, r8
    4d3c:	040f      	lsls	r7, r1, #16
    4d3e:	9904      	ldr	r1, [sp, #16]
    4d40:	0c3f      	lsrs	r7, r7, #16
    4d42:	4688      	mov	r8, r1
    4d44:	0400      	lsls	r0, r0, #16
    4d46:	19c0      	adds	r0, r0, r7
    4d48:	4480      	add	r8, r0
    4d4a:	4641      	mov	r1, r8
    4d4c:	9104      	str	r1, [sp, #16]
    4d4e:	4659      	mov	r1, fp
    4d50:	0c0f      	lsrs	r7, r1, #16
    4d52:	0409      	lsls	r1, r1, #16
    4d54:	0c09      	lsrs	r1, r1, #16
    4d56:	4688      	mov	r8, r1
    4d58:	4359      	muls	r1, r3
    4d5a:	468a      	mov	sl, r1
    4d5c:	0039      	movs	r1, r7
    4d5e:	4351      	muls	r1, r2
    4d60:	4689      	mov	r9, r1
    4d62:	4641      	mov	r1, r8
    4d64:	434a      	muls	r2, r1
    4d66:	4651      	mov	r1, sl
    4d68:	0c09      	lsrs	r1, r1, #16
    4d6a:	468b      	mov	fp, r1
    4d6c:	437b      	muls	r3, r7
    4d6e:	18d2      	adds	r2, r2, r3
    4d70:	445a      	add	r2, fp
    4d72:	4293      	cmp	r3, r2
    4d74:	d903      	bls.n	4d7e <__aeabi_dmul+0x2c6>
    4d76:	2380      	movs	r3, #128	; 0x80
    4d78:	025b      	lsls	r3, r3, #9
    4d7a:	469b      	mov	fp, r3
    4d7c:	44d9      	add	r9, fp
    4d7e:	4651      	mov	r1, sl
    4d80:	0409      	lsls	r1, r1, #16
    4d82:	0c09      	lsrs	r1, r1, #16
    4d84:	468a      	mov	sl, r1
    4d86:	4641      	mov	r1, r8
    4d88:	4361      	muls	r1, r4
    4d8a:	437c      	muls	r4, r7
    4d8c:	0c13      	lsrs	r3, r2, #16
    4d8e:	0412      	lsls	r2, r2, #16
    4d90:	444b      	add	r3, r9
    4d92:	4452      	add	r2, sl
    4d94:	46a1      	mov	r9, r4
    4d96:	468a      	mov	sl, r1
    4d98:	003c      	movs	r4, r7
    4d9a:	4641      	mov	r1, r8
    4d9c:	436c      	muls	r4, r5
    4d9e:	434d      	muls	r5, r1
    4da0:	4651      	mov	r1, sl
    4da2:	444d      	add	r5, r9
    4da4:	0c0f      	lsrs	r7, r1, #16
    4da6:	197d      	adds	r5, r7, r5
    4da8:	45a9      	cmp	r9, r5
    4daa:	d903      	bls.n	4db4 <__aeabi_dmul+0x2fc>
    4dac:	2180      	movs	r1, #128	; 0x80
    4dae:	0249      	lsls	r1, r1, #9
    4db0:	4688      	mov	r8, r1
    4db2:	4444      	add	r4, r8
    4db4:	9f04      	ldr	r7, [sp, #16]
    4db6:	9903      	ldr	r1, [sp, #12]
    4db8:	46b8      	mov	r8, r7
    4dba:	4441      	add	r1, r8
    4dbc:	468b      	mov	fp, r1
    4dbe:	4583      	cmp	fp, r0
    4dc0:	4180      	sbcs	r0, r0
    4dc2:	4241      	negs	r1, r0
    4dc4:	4688      	mov	r8, r1
    4dc6:	4651      	mov	r1, sl
    4dc8:	0408      	lsls	r0, r1, #16
    4dca:	042f      	lsls	r7, r5, #16
    4dcc:	0c00      	lsrs	r0, r0, #16
    4dce:	183f      	adds	r7, r7, r0
    4dd0:	4658      	mov	r0, fp
    4dd2:	9902      	ldr	r1, [sp, #8]
    4dd4:	1810      	adds	r0, r2, r0
    4dd6:	4689      	mov	r9, r1
    4dd8:	4290      	cmp	r0, r2
    4dda:	4192      	sbcs	r2, r2
    4ddc:	444f      	add	r7, r9
    4dde:	46ba      	mov	sl, r7
    4de0:	4252      	negs	r2, r2
    4de2:	4699      	mov	r9, r3
    4de4:	4693      	mov	fp, r2
    4de6:	44c2      	add	sl, r8
    4de8:	44d1      	add	r9, sl
    4dea:	44cb      	add	fp, r9
    4dec:	428f      	cmp	r7, r1
    4dee:	41bf      	sbcs	r7, r7
    4df0:	45c2      	cmp	sl, r8
    4df2:	4189      	sbcs	r1, r1
    4df4:	4599      	cmp	r9, r3
    4df6:	419b      	sbcs	r3, r3
    4df8:	4593      	cmp	fp, r2
    4dfa:	4192      	sbcs	r2, r2
    4dfc:	427f      	negs	r7, r7
    4dfe:	4249      	negs	r1, r1
    4e00:	0c2d      	lsrs	r5, r5, #16
    4e02:	4252      	negs	r2, r2
    4e04:	430f      	orrs	r7, r1
    4e06:	425b      	negs	r3, r3
    4e08:	4313      	orrs	r3, r2
    4e0a:	197f      	adds	r7, r7, r5
    4e0c:	18ff      	adds	r7, r7, r3
    4e0e:	465b      	mov	r3, fp
    4e10:	193c      	adds	r4, r7, r4
    4e12:	0ddb      	lsrs	r3, r3, #23
    4e14:	9a05      	ldr	r2, [sp, #20]
    4e16:	0264      	lsls	r4, r4, #9
    4e18:	431c      	orrs	r4, r3
    4e1a:	0243      	lsls	r3, r0, #9
    4e1c:	4313      	orrs	r3, r2
    4e1e:	1e5d      	subs	r5, r3, #1
    4e20:	41ab      	sbcs	r3, r5
    4e22:	465a      	mov	r2, fp
    4e24:	0dc0      	lsrs	r0, r0, #23
    4e26:	4303      	orrs	r3, r0
    4e28:	0252      	lsls	r2, r2, #9
    4e2a:	4313      	orrs	r3, r2
    4e2c:	01e2      	lsls	r2, r4, #7
    4e2e:	d556      	bpl.n	4ede <__aeabi_dmul+0x426>
    4e30:	2001      	movs	r0, #1
    4e32:	085a      	lsrs	r2, r3, #1
    4e34:	4003      	ands	r3, r0
    4e36:	4313      	orrs	r3, r2
    4e38:	07e2      	lsls	r2, r4, #31
    4e3a:	4313      	orrs	r3, r2
    4e3c:	0864      	lsrs	r4, r4, #1
    4e3e:	485a      	ldr	r0, [pc, #360]	; (4fa8 <__aeabi_dmul+0x4f0>)
    4e40:	4460      	add	r0, ip
    4e42:	2800      	cmp	r0, #0
    4e44:	dd4d      	ble.n	4ee2 <__aeabi_dmul+0x42a>
    4e46:	075a      	lsls	r2, r3, #29
    4e48:	d009      	beq.n	4e5e <__aeabi_dmul+0x3a6>
    4e4a:	220f      	movs	r2, #15
    4e4c:	401a      	ands	r2, r3
    4e4e:	2a04      	cmp	r2, #4
    4e50:	d005      	beq.n	4e5e <__aeabi_dmul+0x3a6>
    4e52:	1d1a      	adds	r2, r3, #4
    4e54:	429a      	cmp	r2, r3
    4e56:	419b      	sbcs	r3, r3
    4e58:	425b      	negs	r3, r3
    4e5a:	18e4      	adds	r4, r4, r3
    4e5c:	0013      	movs	r3, r2
    4e5e:	01e2      	lsls	r2, r4, #7
    4e60:	d504      	bpl.n	4e6c <__aeabi_dmul+0x3b4>
    4e62:	2080      	movs	r0, #128	; 0x80
    4e64:	4a51      	ldr	r2, [pc, #324]	; (4fac <__aeabi_dmul+0x4f4>)
    4e66:	00c0      	lsls	r0, r0, #3
    4e68:	4014      	ands	r4, r2
    4e6a:	4460      	add	r0, ip
    4e6c:	4a50      	ldr	r2, [pc, #320]	; (4fb0 <__aeabi_dmul+0x4f8>)
    4e6e:	4290      	cmp	r0, r2
    4e70:	dd00      	ble.n	4e74 <__aeabi_dmul+0x3bc>
    4e72:	e6e3      	b.n	4c3c <__aeabi_dmul+0x184>
    4e74:	2501      	movs	r5, #1
    4e76:	08db      	lsrs	r3, r3, #3
    4e78:	0762      	lsls	r2, r4, #29
    4e7a:	431a      	orrs	r2, r3
    4e7c:	0264      	lsls	r4, r4, #9
    4e7e:	9b01      	ldr	r3, [sp, #4]
    4e80:	4691      	mov	r9, r2
    4e82:	0b22      	lsrs	r2, r4, #12
    4e84:	0544      	lsls	r4, r0, #21
    4e86:	0d64      	lsrs	r4, r4, #21
    4e88:	401d      	ands	r5, r3
    4e8a:	e67c      	b.n	4b86 <__aeabi_dmul+0xce>
    4e8c:	2280      	movs	r2, #128	; 0x80
    4e8e:	4659      	mov	r1, fp
    4e90:	0312      	lsls	r2, r2, #12
    4e92:	4211      	tst	r1, r2
    4e94:	d008      	beq.n	4ea8 <__aeabi_dmul+0x3f0>
    4e96:	4214      	tst	r4, r2
    4e98:	d106      	bne.n	4ea8 <__aeabi_dmul+0x3f0>
    4e9a:	4322      	orrs	r2, r4
    4e9c:	0312      	lsls	r2, r2, #12
    4e9e:	0b12      	lsrs	r2, r2, #12
    4ea0:	4645      	mov	r5, r8
    4ea2:	4699      	mov	r9, r3
    4ea4:	4c43      	ldr	r4, [pc, #268]	; (4fb4 <__aeabi_dmul+0x4fc>)
    4ea6:	e66e      	b.n	4b86 <__aeabi_dmul+0xce>
    4ea8:	465b      	mov	r3, fp
    4eaa:	431a      	orrs	r2, r3
    4eac:	0312      	lsls	r2, r2, #12
    4eae:	0b12      	lsrs	r2, r2, #12
    4eb0:	4c40      	ldr	r4, [pc, #256]	; (4fb4 <__aeabi_dmul+0x4fc>)
    4eb2:	e668      	b.n	4b86 <__aeabi_dmul+0xce>
    4eb4:	0003      	movs	r3, r0
    4eb6:	4654      	mov	r4, sl
    4eb8:	3b28      	subs	r3, #40	; 0x28
    4eba:	409c      	lsls	r4, r3
    4ebc:	2300      	movs	r3, #0
    4ebe:	e6b9      	b.n	4c34 <__aeabi_dmul+0x17c>
    4ec0:	f000 fbfc 	bl	56bc <__clzsi2>
    4ec4:	3020      	adds	r0, #32
    4ec6:	e6a6      	b.n	4c16 <__aeabi_dmul+0x15e>
    4ec8:	0003      	movs	r3, r0
    4eca:	3b28      	subs	r3, #40	; 0x28
    4ecc:	409f      	lsls	r7, r3
    4ece:	2300      	movs	r3, #0
    4ed0:	46bb      	mov	fp, r7
    4ed2:	4699      	mov	r9, r3
    4ed4:	e68a      	b.n	4bec <__aeabi_dmul+0x134>
    4ed6:	f000 fbf1 	bl	56bc <__clzsi2>
    4eda:	3020      	adds	r0, #32
    4edc:	e674      	b.n	4bc8 <__aeabi_dmul+0x110>
    4ede:	46b4      	mov	ip, r6
    4ee0:	e7ad      	b.n	4e3e <__aeabi_dmul+0x386>
    4ee2:	2501      	movs	r5, #1
    4ee4:	1a2a      	subs	r2, r5, r0
    4ee6:	2a38      	cmp	r2, #56	; 0x38
    4ee8:	dd06      	ble.n	4ef8 <__aeabi_dmul+0x440>
    4eea:	9b01      	ldr	r3, [sp, #4]
    4eec:	2400      	movs	r4, #0
    4eee:	401d      	ands	r5, r3
    4ef0:	2300      	movs	r3, #0
    4ef2:	2200      	movs	r2, #0
    4ef4:	4699      	mov	r9, r3
    4ef6:	e646      	b.n	4b86 <__aeabi_dmul+0xce>
    4ef8:	2a1f      	cmp	r2, #31
    4efa:	dc21      	bgt.n	4f40 <__aeabi_dmul+0x488>
    4efc:	2520      	movs	r5, #32
    4efe:	0020      	movs	r0, r4
    4f00:	1aad      	subs	r5, r5, r2
    4f02:	001e      	movs	r6, r3
    4f04:	40ab      	lsls	r3, r5
    4f06:	40a8      	lsls	r0, r5
    4f08:	40d6      	lsrs	r6, r2
    4f0a:	1e5d      	subs	r5, r3, #1
    4f0c:	41ab      	sbcs	r3, r5
    4f0e:	4330      	orrs	r0, r6
    4f10:	4318      	orrs	r0, r3
    4f12:	40d4      	lsrs	r4, r2
    4f14:	0743      	lsls	r3, r0, #29
    4f16:	d009      	beq.n	4f2c <__aeabi_dmul+0x474>
    4f18:	230f      	movs	r3, #15
    4f1a:	4003      	ands	r3, r0
    4f1c:	2b04      	cmp	r3, #4
    4f1e:	d005      	beq.n	4f2c <__aeabi_dmul+0x474>
    4f20:	0003      	movs	r3, r0
    4f22:	1d18      	adds	r0, r3, #4
    4f24:	4298      	cmp	r0, r3
    4f26:	419b      	sbcs	r3, r3
    4f28:	425b      	negs	r3, r3
    4f2a:	18e4      	adds	r4, r4, r3
    4f2c:	0223      	lsls	r3, r4, #8
    4f2e:	d521      	bpl.n	4f74 <__aeabi_dmul+0x4bc>
    4f30:	2501      	movs	r5, #1
    4f32:	9b01      	ldr	r3, [sp, #4]
    4f34:	2401      	movs	r4, #1
    4f36:	401d      	ands	r5, r3
    4f38:	2300      	movs	r3, #0
    4f3a:	2200      	movs	r2, #0
    4f3c:	4699      	mov	r9, r3
    4f3e:	e622      	b.n	4b86 <__aeabi_dmul+0xce>
    4f40:	251f      	movs	r5, #31
    4f42:	0021      	movs	r1, r4
    4f44:	426d      	negs	r5, r5
    4f46:	1a28      	subs	r0, r5, r0
    4f48:	40c1      	lsrs	r1, r0
    4f4a:	0008      	movs	r0, r1
    4f4c:	2a20      	cmp	r2, #32
    4f4e:	d01d      	beq.n	4f8c <__aeabi_dmul+0x4d4>
    4f50:	355f      	adds	r5, #95	; 0x5f
    4f52:	1aaa      	subs	r2, r5, r2
    4f54:	4094      	lsls	r4, r2
    4f56:	4323      	orrs	r3, r4
    4f58:	1e5c      	subs	r4, r3, #1
    4f5a:	41a3      	sbcs	r3, r4
    4f5c:	2507      	movs	r5, #7
    4f5e:	4303      	orrs	r3, r0
    4f60:	401d      	ands	r5, r3
    4f62:	2200      	movs	r2, #0
    4f64:	2d00      	cmp	r5, #0
    4f66:	d009      	beq.n	4f7c <__aeabi_dmul+0x4c4>
    4f68:	220f      	movs	r2, #15
    4f6a:	2400      	movs	r4, #0
    4f6c:	401a      	ands	r2, r3
    4f6e:	0018      	movs	r0, r3
    4f70:	2a04      	cmp	r2, #4
    4f72:	d1d6      	bne.n	4f22 <__aeabi_dmul+0x46a>
    4f74:	0003      	movs	r3, r0
    4f76:	0765      	lsls	r5, r4, #29
    4f78:	0264      	lsls	r4, r4, #9
    4f7a:	0b22      	lsrs	r2, r4, #12
    4f7c:	08db      	lsrs	r3, r3, #3
    4f7e:	432b      	orrs	r3, r5
    4f80:	2501      	movs	r5, #1
    4f82:	4699      	mov	r9, r3
    4f84:	9b01      	ldr	r3, [sp, #4]
    4f86:	2400      	movs	r4, #0
    4f88:	401d      	ands	r5, r3
    4f8a:	e5fc      	b.n	4b86 <__aeabi_dmul+0xce>
    4f8c:	2400      	movs	r4, #0
    4f8e:	e7e2      	b.n	4f56 <__aeabi_dmul+0x49e>
    4f90:	2280      	movs	r2, #128	; 0x80
    4f92:	2501      	movs	r5, #1
    4f94:	0312      	lsls	r2, r2, #12
    4f96:	4322      	orrs	r2, r4
    4f98:	9901      	ldr	r1, [sp, #4]
    4f9a:	0312      	lsls	r2, r2, #12
    4f9c:	0b12      	lsrs	r2, r2, #12
    4f9e:	400d      	ands	r5, r1
    4fa0:	4699      	mov	r9, r3
    4fa2:	4c04      	ldr	r4, [pc, #16]	; (4fb4 <__aeabi_dmul+0x4fc>)
    4fa4:	e5ef      	b.n	4b86 <__aeabi_dmul+0xce>
    4fa6:	46c0      	nop			; (mov r8, r8)
    4fa8:	000003ff 	.word	0x000003ff
    4fac:	feffffff 	.word	0xfeffffff
    4fb0:	000007fe 	.word	0x000007fe
    4fb4:	000007ff 	.word	0x000007ff

00004fb8 <__aeabi_dsub>:
    4fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fba:	4646      	mov	r6, r8
    4fbc:	46d6      	mov	lr, sl
    4fbe:	464f      	mov	r7, r9
    4fc0:	030c      	lsls	r4, r1, #12
    4fc2:	b5c0      	push	{r6, r7, lr}
    4fc4:	0fcd      	lsrs	r5, r1, #31
    4fc6:	004e      	lsls	r6, r1, #1
    4fc8:	0a61      	lsrs	r1, r4, #9
    4fca:	0f44      	lsrs	r4, r0, #29
    4fcc:	430c      	orrs	r4, r1
    4fce:	00c1      	lsls	r1, r0, #3
    4fd0:	0058      	lsls	r0, r3, #1
    4fd2:	0d40      	lsrs	r0, r0, #21
    4fd4:	4684      	mov	ip, r0
    4fd6:	468a      	mov	sl, r1
    4fd8:	000f      	movs	r7, r1
    4fda:	0319      	lsls	r1, r3, #12
    4fdc:	0f50      	lsrs	r0, r2, #29
    4fde:	0a49      	lsrs	r1, r1, #9
    4fe0:	4301      	orrs	r1, r0
    4fe2:	48c6      	ldr	r0, [pc, #792]	; (52fc <__aeabi_dsub+0x344>)
    4fe4:	0d76      	lsrs	r6, r6, #21
    4fe6:	46a8      	mov	r8, r5
    4fe8:	0fdb      	lsrs	r3, r3, #31
    4fea:	00d2      	lsls	r2, r2, #3
    4fec:	4584      	cmp	ip, r0
    4fee:	d100      	bne.n	4ff2 <__aeabi_dsub+0x3a>
    4ff0:	e0d8      	b.n	51a4 <__aeabi_dsub+0x1ec>
    4ff2:	2001      	movs	r0, #1
    4ff4:	4043      	eors	r3, r0
    4ff6:	42ab      	cmp	r3, r5
    4ff8:	d100      	bne.n	4ffc <__aeabi_dsub+0x44>
    4ffa:	e0a6      	b.n	514a <__aeabi_dsub+0x192>
    4ffc:	4660      	mov	r0, ip
    4ffe:	1a35      	subs	r5, r6, r0
    5000:	2d00      	cmp	r5, #0
    5002:	dc00      	bgt.n	5006 <__aeabi_dsub+0x4e>
    5004:	e105      	b.n	5212 <__aeabi_dsub+0x25a>
    5006:	2800      	cmp	r0, #0
    5008:	d110      	bne.n	502c <__aeabi_dsub+0x74>
    500a:	000b      	movs	r3, r1
    500c:	4313      	orrs	r3, r2
    500e:	d100      	bne.n	5012 <__aeabi_dsub+0x5a>
    5010:	e0d7      	b.n	51c2 <__aeabi_dsub+0x20a>
    5012:	1e6b      	subs	r3, r5, #1
    5014:	2b00      	cmp	r3, #0
    5016:	d000      	beq.n	501a <__aeabi_dsub+0x62>
    5018:	e14b      	b.n	52b2 <__aeabi_dsub+0x2fa>
    501a:	4653      	mov	r3, sl
    501c:	1a9f      	subs	r7, r3, r2
    501e:	45ba      	cmp	sl, r7
    5020:	4180      	sbcs	r0, r0
    5022:	1a64      	subs	r4, r4, r1
    5024:	4240      	negs	r0, r0
    5026:	1a24      	subs	r4, r4, r0
    5028:	2601      	movs	r6, #1
    502a:	e01e      	b.n	506a <__aeabi_dsub+0xb2>
    502c:	4bb3      	ldr	r3, [pc, #716]	; (52fc <__aeabi_dsub+0x344>)
    502e:	429e      	cmp	r6, r3
    5030:	d048      	beq.n	50c4 <__aeabi_dsub+0x10c>
    5032:	2380      	movs	r3, #128	; 0x80
    5034:	041b      	lsls	r3, r3, #16
    5036:	4319      	orrs	r1, r3
    5038:	2d38      	cmp	r5, #56	; 0x38
    503a:	dd00      	ble.n	503e <__aeabi_dsub+0x86>
    503c:	e119      	b.n	5272 <__aeabi_dsub+0x2ba>
    503e:	2d1f      	cmp	r5, #31
    5040:	dd00      	ble.n	5044 <__aeabi_dsub+0x8c>
    5042:	e14c      	b.n	52de <__aeabi_dsub+0x326>
    5044:	2320      	movs	r3, #32
    5046:	000f      	movs	r7, r1
    5048:	1b5b      	subs	r3, r3, r5
    504a:	0010      	movs	r0, r2
    504c:	409a      	lsls	r2, r3
    504e:	409f      	lsls	r7, r3
    5050:	40e8      	lsrs	r0, r5
    5052:	1e53      	subs	r3, r2, #1
    5054:	419a      	sbcs	r2, r3
    5056:	40e9      	lsrs	r1, r5
    5058:	4307      	orrs	r7, r0
    505a:	4317      	orrs	r7, r2
    505c:	4653      	mov	r3, sl
    505e:	1bdf      	subs	r7, r3, r7
    5060:	1a61      	subs	r1, r4, r1
    5062:	45ba      	cmp	sl, r7
    5064:	41a4      	sbcs	r4, r4
    5066:	4264      	negs	r4, r4
    5068:	1b0c      	subs	r4, r1, r4
    506a:	0223      	lsls	r3, r4, #8
    506c:	d400      	bmi.n	5070 <__aeabi_dsub+0xb8>
    506e:	e0c5      	b.n	51fc <__aeabi_dsub+0x244>
    5070:	0264      	lsls	r4, r4, #9
    5072:	0a65      	lsrs	r5, r4, #9
    5074:	2d00      	cmp	r5, #0
    5076:	d100      	bne.n	507a <__aeabi_dsub+0xc2>
    5078:	e0f6      	b.n	5268 <__aeabi_dsub+0x2b0>
    507a:	0028      	movs	r0, r5
    507c:	f000 fb1e 	bl	56bc <__clzsi2>
    5080:	0003      	movs	r3, r0
    5082:	3b08      	subs	r3, #8
    5084:	2b1f      	cmp	r3, #31
    5086:	dd00      	ble.n	508a <__aeabi_dsub+0xd2>
    5088:	e0e9      	b.n	525e <__aeabi_dsub+0x2a6>
    508a:	2220      	movs	r2, #32
    508c:	003c      	movs	r4, r7
    508e:	1ad2      	subs	r2, r2, r3
    5090:	409d      	lsls	r5, r3
    5092:	40d4      	lsrs	r4, r2
    5094:	409f      	lsls	r7, r3
    5096:	4325      	orrs	r5, r4
    5098:	429e      	cmp	r6, r3
    509a:	dd00      	ble.n	509e <__aeabi_dsub+0xe6>
    509c:	e0db      	b.n	5256 <__aeabi_dsub+0x29e>
    509e:	1b9e      	subs	r6, r3, r6
    50a0:	1c73      	adds	r3, r6, #1
    50a2:	2b1f      	cmp	r3, #31
    50a4:	dd00      	ble.n	50a8 <__aeabi_dsub+0xf0>
    50a6:	e10a      	b.n	52be <__aeabi_dsub+0x306>
    50a8:	2220      	movs	r2, #32
    50aa:	0038      	movs	r0, r7
    50ac:	1ad2      	subs	r2, r2, r3
    50ae:	0029      	movs	r1, r5
    50b0:	4097      	lsls	r7, r2
    50b2:	002c      	movs	r4, r5
    50b4:	4091      	lsls	r1, r2
    50b6:	40d8      	lsrs	r0, r3
    50b8:	1e7a      	subs	r2, r7, #1
    50ba:	4197      	sbcs	r7, r2
    50bc:	40dc      	lsrs	r4, r3
    50be:	2600      	movs	r6, #0
    50c0:	4301      	orrs	r1, r0
    50c2:	430f      	orrs	r7, r1
    50c4:	077b      	lsls	r3, r7, #29
    50c6:	d009      	beq.n	50dc <__aeabi_dsub+0x124>
    50c8:	230f      	movs	r3, #15
    50ca:	403b      	ands	r3, r7
    50cc:	2b04      	cmp	r3, #4
    50ce:	d005      	beq.n	50dc <__aeabi_dsub+0x124>
    50d0:	1d3b      	adds	r3, r7, #4
    50d2:	42bb      	cmp	r3, r7
    50d4:	41bf      	sbcs	r7, r7
    50d6:	427f      	negs	r7, r7
    50d8:	19e4      	adds	r4, r4, r7
    50da:	001f      	movs	r7, r3
    50dc:	0223      	lsls	r3, r4, #8
    50de:	d525      	bpl.n	512c <__aeabi_dsub+0x174>
    50e0:	4b86      	ldr	r3, [pc, #536]	; (52fc <__aeabi_dsub+0x344>)
    50e2:	3601      	adds	r6, #1
    50e4:	429e      	cmp	r6, r3
    50e6:	d100      	bne.n	50ea <__aeabi_dsub+0x132>
    50e8:	e0af      	b.n	524a <__aeabi_dsub+0x292>
    50ea:	4b85      	ldr	r3, [pc, #532]	; (5300 <__aeabi_dsub+0x348>)
    50ec:	2501      	movs	r5, #1
    50ee:	401c      	ands	r4, r3
    50f0:	4643      	mov	r3, r8
    50f2:	0762      	lsls	r2, r4, #29
    50f4:	08ff      	lsrs	r7, r7, #3
    50f6:	0264      	lsls	r4, r4, #9
    50f8:	0576      	lsls	r6, r6, #21
    50fa:	4317      	orrs	r7, r2
    50fc:	0b24      	lsrs	r4, r4, #12
    50fe:	0d76      	lsrs	r6, r6, #21
    5100:	401d      	ands	r5, r3
    5102:	2100      	movs	r1, #0
    5104:	0324      	lsls	r4, r4, #12
    5106:	0b23      	lsrs	r3, r4, #12
    5108:	0d0c      	lsrs	r4, r1, #20
    510a:	4a7e      	ldr	r2, [pc, #504]	; (5304 <__aeabi_dsub+0x34c>)
    510c:	0524      	lsls	r4, r4, #20
    510e:	431c      	orrs	r4, r3
    5110:	4014      	ands	r4, r2
    5112:	0533      	lsls	r3, r6, #20
    5114:	4323      	orrs	r3, r4
    5116:	005b      	lsls	r3, r3, #1
    5118:	07ed      	lsls	r5, r5, #31
    511a:	085b      	lsrs	r3, r3, #1
    511c:	432b      	orrs	r3, r5
    511e:	0038      	movs	r0, r7
    5120:	0019      	movs	r1, r3
    5122:	bc1c      	pop	{r2, r3, r4}
    5124:	4690      	mov	r8, r2
    5126:	4699      	mov	r9, r3
    5128:	46a2      	mov	sl, r4
    512a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    512c:	2501      	movs	r5, #1
    512e:	4643      	mov	r3, r8
    5130:	0762      	lsls	r2, r4, #29
    5132:	08ff      	lsrs	r7, r7, #3
    5134:	4317      	orrs	r7, r2
    5136:	08e4      	lsrs	r4, r4, #3
    5138:	401d      	ands	r5, r3
    513a:	4b70      	ldr	r3, [pc, #448]	; (52fc <__aeabi_dsub+0x344>)
    513c:	429e      	cmp	r6, r3
    513e:	d036      	beq.n	51ae <__aeabi_dsub+0x1f6>
    5140:	0324      	lsls	r4, r4, #12
    5142:	0576      	lsls	r6, r6, #21
    5144:	0b24      	lsrs	r4, r4, #12
    5146:	0d76      	lsrs	r6, r6, #21
    5148:	e7db      	b.n	5102 <__aeabi_dsub+0x14a>
    514a:	4663      	mov	r3, ip
    514c:	1af3      	subs	r3, r6, r3
    514e:	2b00      	cmp	r3, #0
    5150:	dc00      	bgt.n	5154 <__aeabi_dsub+0x19c>
    5152:	e094      	b.n	527e <__aeabi_dsub+0x2c6>
    5154:	4660      	mov	r0, ip
    5156:	2800      	cmp	r0, #0
    5158:	d035      	beq.n	51c6 <__aeabi_dsub+0x20e>
    515a:	4868      	ldr	r0, [pc, #416]	; (52fc <__aeabi_dsub+0x344>)
    515c:	4286      	cmp	r6, r0
    515e:	d0b1      	beq.n	50c4 <__aeabi_dsub+0x10c>
    5160:	2780      	movs	r7, #128	; 0x80
    5162:	043f      	lsls	r7, r7, #16
    5164:	4339      	orrs	r1, r7
    5166:	2b38      	cmp	r3, #56	; 0x38
    5168:	dc00      	bgt.n	516c <__aeabi_dsub+0x1b4>
    516a:	e0fd      	b.n	5368 <__aeabi_dsub+0x3b0>
    516c:	430a      	orrs	r2, r1
    516e:	0017      	movs	r7, r2
    5170:	2100      	movs	r1, #0
    5172:	1e7a      	subs	r2, r7, #1
    5174:	4197      	sbcs	r7, r2
    5176:	4457      	add	r7, sl
    5178:	4557      	cmp	r7, sl
    517a:	4180      	sbcs	r0, r0
    517c:	1909      	adds	r1, r1, r4
    517e:	4244      	negs	r4, r0
    5180:	190c      	adds	r4, r1, r4
    5182:	0223      	lsls	r3, r4, #8
    5184:	d53a      	bpl.n	51fc <__aeabi_dsub+0x244>
    5186:	4b5d      	ldr	r3, [pc, #372]	; (52fc <__aeabi_dsub+0x344>)
    5188:	3601      	adds	r6, #1
    518a:	429e      	cmp	r6, r3
    518c:	d100      	bne.n	5190 <__aeabi_dsub+0x1d8>
    518e:	e14b      	b.n	5428 <__aeabi_dsub+0x470>
    5190:	2201      	movs	r2, #1
    5192:	4b5b      	ldr	r3, [pc, #364]	; (5300 <__aeabi_dsub+0x348>)
    5194:	401c      	ands	r4, r3
    5196:	087b      	lsrs	r3, r7, #1
    5198:	4017      	ands	r7, r2
    519a:	431f      	orrs	r7, r3
    519c:	07e2      	lsls	r2, r4, #31
    519e:	4317      	orrs	r7, r2
    51a0:	0864      	lsrs	r4, r4, #1
    51a2:	e78f      	b.n	50c4 <__aeabi_dsub+0x10c>
    51a4:	0008      	movs	r0, r1
    51a6:	4310      	orrs	r0, r2
    51a8:	d000      	beq.n	51ac <__aeabi_dsub+0x1f4>
    51aa:	e724      	b.n	4ff6 <__aeabi_dsub+0x3e>
    51ac:	e721      	b.n	4ff2 <__aeabi_dsub+0x3a>
    51ae:	0023      	movs	r3, r4
    51b0:	433b      	orrs	r3, r7
    51b2:	d100      	bne.n	51b6 <__aeabi_dsub+0x1fe>
    51b4:	e1b9      	b.n	552a <__aeabi_dsub+0x572>
    51b6:	2280      	movs	r2, #128	; 0x80
    51b8:	0312      	lsls	r2, r2, #12
    51ba:	4314      	orrs	r4, r2
    51bc:	0324      	lsls	r4, r4, #12
    51be:	0b24      	lsrs	r4, r4, #12
    51c0:	e79f      	b.n	5102 <__aeabi_dsub+0x14a>
    51c2:	002e      	movs	r6, r5
    51c4:	e77e      	b.n	50c4 <__aeabi_dsub+0x10c>
    51c6:	0008      	movs	r0, r1
    51c8:	4310      	orrs	r0, r2
    51ca:	d100      	bne.n	51ce <__aeabi_dsub+0x216>
    51cc:	e0ca      	b.n	5364 <__aeabi_dsub+0x3ac>
    51ce:	1e58      	subs	r0, r3, #1
    51d0:	4684      	mov	ip, r0
    51d2:	2800      	cmp	r0, #0
    51d4:	d000      	beq.n	51d8 <__aeabi_dsub+0x220>
    51d6:	e0e7      	b.n	53a8 <__aeabi_dsub+0x3f0>
    51d8:	4452      	add	r2, sl
    51da:	4552      	cmp	r2, sl
    51dc:	4180      	sbcs	r0, r0
    51de:	1864      	adds	r4, r4, r1
    51e0:	4240      	negs	r0, r0
    51e2:	1824      	adds	r4, r4, r0
    51e4:	0017      	movs	r7, r2
    51e6:	2601      	movs	r6, #1
    51e8:	0223      	lsls	r3, r4, #8
    51ea:	d507      	bpl.n	51fc <__aeabi_dsub+0x244>
    51ec:	2602      	movs	r6, #2
    51ee:	e7cf      	b.n	5190 <__aeabi_dsub+0x1d8>
    51f0:	4664      	mov	r4, ip
    51f2:	432c      	orrs	r4, r5
    51f4:	d100      	bne.n	51f8 <__aeabi_dsub+0x240>
    51f6:	e1b3      	b.n	5560 <__aeabi_dsub+0x5a8>
    51f8:	002c      	movs	r4, r5
    51fa:	4667      	mov	r7, ip
    51fc:	077b      	lsls	r3, r7, #29
    51fe:	d000      	beq.n	5202 <__aeabi_dsub+0x24a>
    5200:	e762      	b.n	50c8 <__aeabi_dsub+0x110>
    5202:	0763      	lsls	r3, r4, #29
    5204:	08ff      	lsrs	r7, r7, #3
    5206:	431f      	orrs	r7, r3
    5208:	2501      	movs	r5, #1
    520a:	4643      	mov	r3, r8
    520c:	08e4      	lsrs	r4, r4, #3
    520e:	401d      	ands	r5, r3
    5210:	e793      	b.n	513a <__aeabi_dsub+0x182>
    5212:	2d00      	cmp	r5, #0
    5214:	d178      	bne.n	5308 <__aeabi_dsub+0x350>
    5216:	1c75      	adds	r5, r6, #1
    5218:	056d      	lsls	r5, r5, #21
    521a:	0d6d      	lsrs	r5, r5, #21
    521c:	2d01      	cmp	r5, #1
    521e:	dc00      	bgt.n	5222 <__aeabi_dsub+0x26a>
    5220:	e0f2      	b.n	5408 <__aeabi_dsub+0x450>
    5222:	4650      	mov	r0, sl
    5224:	1a80      	subs	r0, r0, r2
    5226:	4582      	cmp	sl, r0
    5228:	41bf      	sbcs	r7, r7
    522a:	1a65      	subs	r5, r4, r1
    522c:	427f      	negs	r7, r7
    522e:	1bed      	subs	r5, r5, r7
    5230:	4684      	mov	ip, r0
    5232:	0228      	lsls	r0, r5, #8
    5234:	d400      	bmi.n	5238 <__aeabi_dsub+0x280>
    5236:	e08c      	b.n	5352 <__aeabi_dsub+0x39a>
    5238:	4650      	mov	r0, sl
    523a:	1a17      	subs	r7, r2, r0
    523c:	42ba      	cmp	r2, r7
    523e:	4192      	sbcs	r2, r2
    5240:	1b0c      	subs	r4, r1, r4
    5242:	4255      	negs	r5, r2
    5244:	1b65      	subs	r5, r4, r5
    5246:	4698      	mov	r8, r3
    5248:	e714      	b.n	5074 <__aeabi_dsub+0xbc>
    524a:	2501      	movs	r5, #1
    524c:	4643      	mov	r3, r8
    524e:	2400      	movs	r4, #0
    5250:	401d      	ands	r5, r3
    5252:	2700      	movs	r7, #0
    5254:	e755      	b.n	5102 <__aeabi_dsub+0x14a>
    5256:	4c2a      	ldr	r4, [pc, #168]	; (5300 <__aeabi_dsub+0x348>)
    5258:	1af6      	subs	r6, r6, r3
    525a:	402c      	ands	r4, r5
    525c:	e732      	b.n	50c4 <__aeabi_dsub+0x10c>
    525e:	003d      	movs	r5, r7
    5260:	3828      	subs	r0, #40	; 0x28
    5262:	4085      	lsls	r5, r0
    5264:	2700      	movs	r7, #0
    5266:	e717      	b.n	5098 <__aeabi_dsub+0xe0>
    5268:	0038      	movs	r0, r7
    526a:	f000 fa27 	bl	56bc <__clzsi2>
    526e:	3020      	adds	r0, #32
    5270:	e706      	b.n	5080 <__aeabi_dsub+0xc8>
    5272:	430a      	orrs	r2, r1
    5274:	0017      	movs	r7, r2
    5276:	2100      	movs	r1, #0
    5278:	1e7a      	subs	r2, r7, #1
    527a:	4197      	sbcs	r7, r2
    527c:	e6ee      	b.n	505c <__aeabi_dsub+0xa4>
    527e:	2b00      	cmp	r3, #0
    5280:	d000      	beq.n	5284 <__aeabi_dsub+0x2cc>
    5282:	e0e5      	b.n	5450 <__aeabi_dsub+0x498>
    5284:	1c73      	adds	r3, r6, #1
    5286:	469c      	mov	ip, r3
    5288:	055b      	lsls	r3, r3, #21
    528a:	0d5b      	lsrs	r3, r3, #21
    528c:	2b01      	cmp	r3, #1
    528e:	dc00      	bgt.n	5292 <__aeabi_dsub+0x2da>
    5290:	e09f      	b.n	53d2 <__aeabi_dsub+0x41a>
    5292:	4b1a      	ldr	r3, [pc, #104]	; (52fc <__aeabi_dsub+0x344>)
    5294:	459c      	cmp	ip, r3
    5296:	d100      	bne.n	529a <__aeabi_dsub+0x2e2>
    5298:	e0c5      	b.n	5426 <__aeabi_dsub+0x46e>
    529a:	4452      	add	r2, sl
    529c:	4552      	cmp	r2, sl
    529e:	4180      	sbcs	r0, r0
    52a0:	1864      	adds	r4, r4, r1
    52a2:	4240      	negs	r0, r0
    52a4:	1824      	adds	r4, r4, r0
    52a6:	07e7      	lsls	r7, r4, #31
    52a8:	0852      	lsrs	r2, r2, #1
    52aa:	4317      	orrs	r7, r2
    52ac:	0864      	lsrs	r4, r4, #1
    52ae:	4666      	mov	r6, ip
    52b0:	e708      	b.n	50c4 <__aeabi_dsub+0x10c>
    52b2:	4812      	ldr	r0, [pc, #72]	; (52fc <__aeabi_dsub+0x344>)
    52b4:	4285      	cmp	r5, r0
    52b6:	d100      	bne.n	52ba <__aeabi_dsub+0x302>
    52b8:	e085      	b.n	53c6 <__aeabi_dsub+0x40e>
    52ba:	001d      	movs	r5, r3
    52bc:	e6bc      	b.n	5038 <__aeabi_dsub+0x80>
    52be:	0029      	movs	r1, r5
    52c0:	3e1f      	subs	r6, #31
    52c2:	40f1      	lsrs	r1, r6
    52c4:	2b20      	cmp	r3, #32
    52c6:	d100      	bne.n	52ca <__aeabi_dsub+0x312>
    52c8:	e07f      	b.n	53ca <__aeabi_dsub+0x412>
    52ca:	2240      	movs	r2, #64	; 0x40
    52cc:	1ad3      	subs	r3, r2, r3
    52ce:	409d      	lsls	r5, r3
    52d0:	432f      	orrs	r7, r5
    52d2:	1e7d      	subs	r5, r7, #1
    52d4:	41af      	sbcs	r7, r5
    52d6:	2400      	movs	r4, #0
    52d8:	430f      	orrs	r7, r1
    52da:	2600      	movs	r6, #0
    52dc:	e78e      	b.n	51fc <__aeabi_dsub+0x244>
    52de:	002b      	movs	r3, r5
    52e0:	000f      	movs	r7, r1
    52e2:	3b20      	subs	r3, #32
    52e4:	40df      	lsrs	r7, r3
    52e6:	2d20      	cmp	r5, #32
    52e8:	d071      	beq.n	53ce <__aeabi_dsub+0x416>
    52ea:	2340      	movs	r3, #64	; 0x40
    52ec:	1b5d      	subs	r5, r3, r5
    52ee:	40a9      	lsls	r1, r5
    52f0:	430a      	orrs	r2, r1
    52f2:	1e51      	subs	r1, r2, #1
    52f4:	418a      	sbcs	r2, r1
    52f6:	2100      	movs	r1, #0
    52f8:	4317      	orrs	r7, r2
    52fa:	e6af      	b.n	505c <__aeabi_dsub+0xa4>
    52fc:	000007ff 	.word	0x000007ff
    5300:	ff7fffff 	.word	0xff7fffff
    5304:	800fffff 	.word	0x800fffff
    5308:	2e00      	cmp	r6, #0
    530a:	d03e      	beq.n	538a <__aeabi_dsub+0x3d2>
    530c:	4eb3      	ldr	r6, [pc, #716]	; (55dc <__aeabi_dsub+0x624>)
    530e:	45b4      	cmp	ip, r6
    5310:	d045      	beq.n	539e <__aeabi_dsub+0x3e6>
    5312:	2680      	movs	r6, #128	; 0x80
    5314:	0436      	lsls	r6, r6, #16
    5316:	426d      	negs	r5, r5
    5318:	4334      	orrs	r4, r6
    531a:	2d38      	cmp	r5, #56	; 0x38
    531c:	dd00      	ble.n	5320 <__aeabi_dsub+0x368>
    531e:	e0a8      	b.n	5472 <__aeabi_dsub+0x4ba>
    5320:	2d1f      	cmp	r5, #31
    5322:	dd00      	ble.n	5326 <__aeabi_dsub+0x36e>
    5324:	e11f      	b.n	5566 <__aeabi_dsub+0x5ae>
    5326:	2620      	movs	r6, #32
    5328:	0027      	movs	r7, r4
    532a:	4650      	mov	r0, sl
    532c:	1b76      	subs	r6, r6, r5
    532e:	40b7      	lsls	r7, r6
    5330:	40e8      	lsrs	r0, r5
    5332:	4307      	orrs	r7, r0
    5334:	4650      	mov	r0, sl
    5336:	40b0      	lsls	r0, r6
    5338:	1e46      	subs	r6, r0, #1
    533a:	41b0      	sbcs	r0, r6
    533c:	40ec      	lsrs	r4, r5
    533e:	4338      	orrs	r0, r7
    5340:	1a17      	subs	r7, r2, r0
    5342:	42ba      	cmp	r2, r7
    5344:	4192      	sbcs	r2, r2
    5346:	1b0c      	subs	r4, r1, r4
    5348:	4252      	negs	r2, r2
    534a:	1aa4      	subs	r4, r4, r2
    534c:	4666      	mov	r6, ip
    534e:	4698      	mov	r8, r3
    5350:	e68b      	b.n	506a <__aeabi_dsub+0xb2>
    5352:	4664      	mov	r4, ip
    5354:	4667      	mov	r7, ip
    5356:	432c      	orrs	r4, r5
    5358:	d000      	beq.n	535c <__aeabi_dsub+0x3a4>
    535a:	e68b      	b.n	5074 <__aeabi_dsub+0xbc>
    535c:	2500      	movs	r5, #0
    535e:	2600      	movs	r6, #0
    5360:	2700      	movs	r7, #0
    5362:	e6ea      	b.n	513a <__aeabi_dsub+0x182>
    5364:	001e      	movs	r6, r3
    5366:	e6ad      	b.n	50c4 <__aeabi_dsub+0x10c>
    5368:	2b1f      	cmp	r3, #31
    536a:	dc60      	bgt.n	542e <__aeabi_dsub+0x476>
    536c:	2720      	movs	r7, #32
    536e:	1af8      	subs	r0, r7, r3
    5370:	000f      	movs	r7, r1
    5372:	4684      	mov	ip, r0
    5374:	4087      	lsls	r7, r0
    5376:	0010      	movs	r0, r2
    5378:	40d8      	lsrs	r0, r3
    537a:	4307      	orrs	r7, r0
    537c:	4660      	mov	r0, ip
    537e:	4082      	lsls	r2, r0
    5380:	1e50      	subs	r0, r2, #1
    5382:	4182      	sbcs	r2, r0
    5384:	40d9      	lsrs	r1, r3
    5386:	4317      	orrs	r7, r2
    5388:	e6f5      	b.n	5176 <__aeabi_dsub+0x1be>
    538a:	0026      	movs	r6, r4
    538c:	4650      	mov	r0, sl
    538e:	4306      	orrs	r6, r0
    5390:	d005      	beq.n	539e <__aeabi_dsub+0x3e6>
    5392:	43ed      	mvns	r5, r5
    5394:	2d00      	cmp	r5, #0
    5396:	d0d3      	beq.n	5340 <__aeabi_dsub+0x388>
    5398:	4e90      	ldr	r6, [pc, #576]	; (55dc <__aeabi_dsub+0x624>)
    539a:	45b4      	cmp	ip, r6
    539c:	d1bd      	bne.n	531a <__aeabi_dsub+0x362>
    539e:	000c      	movs	r4, r1
    53a0:	0017      	movs	r7, r2
    53a2:	4666      	mov	r6, ip
    53a4:	4698      	mov	r8, r3
    53a6:	e68d      	b.n	50c4 <__aeabi_dsub+0x10c>
    53a8:	488c      	ldr	r0, [pc, #560]	; (55dc <__aeabi_dsub+0x624>)
    53aa:	4283      	cmp	r3, r0
    53ac:	d00b      	beq.n	53c6 <__aeabi_dsub+0x40e>
    53ae:	4663      	mov	r3, ip
    53b0:	e6d9      	b.n	5166 <__aeabi_dsub+0x1ae>
    53b2:	2d00      	cmp	r5, #0
    53b4:	d000      	beq.n	53b8 <__aeabi_dsub+0x400>
    53b6:	e096      	b.n	54e6 <__aeabi_dsub+0x52e>
    53b8:	0008      	movs	r0, r1
    53ba:	4310      	orrs	r0, r2
    53bc:	d100      	bne.n	53c0 <__aeabi_dsub+0x408>
    53be:	e0e2      	b.n	5586 <__aeabi_dsub+0x5ce>
    53c0:	000c      	movs	r4, r1
    53c2:	0017      	movs	r7, r2
    53c4:	4698      	mov	r8, r3
    53c6:	4e85      	ldr	r6, [pc, #532]	; (55dc <__aeabi_dsub+0x624>)
    53c8:	e67c      	b.n	50c4 <__aeabi_dsub+0x10c>
    53ca:	2500      	movs	r5, #0
    53cc:	e780      	b.n	52d0 <__aeabi_dsub+0x318>
    53ce:	2100      	movs	r1, #0
    53d0:	e78e      	b.n	52f0 <__aeabi_dsub+0x338>
    53d2:	0023      	movs	r3, r4
    53d4:	4650      	mov	r0, sl
    53d6:	4303      	orrs	r3, r0
    53d8:	2e00      	cmp	r6, #0
    53da:	d000      	beq.n	53de <__aeabi_dsub+0x426>
    53dc:	e0a8      	b.n	5530 <__aeabi_dsub+0x578>
    53de:	2b00      	cmp	r3, #0
    53e0:	d100      	bne.n	53e4 <__aeabi_dsub+0x42c>
    53e2:	e0de      	b.n	55a2 <__aeabi_dsub+0x5ea>
    53e4:	000b      	movs	r3, r1
    53e6:	4313      	orrs	r3, r2
    53e8:	d100      	bne.n	53ec <__aeabi_dsub+0x434>
    53ea:	e66b      	b.n	50c4 <__aeabi_dsub+0x10c>
    53ec:	4452      	add	r2, sl
    53ee:	4552      	cmp	r2, sl
    53f0:	4180      	sbcs	r0, r0
    53f2:	1864      	adds	r4, r4, r1
    53f4:	4240      	negs	r0, r0
    53f6:	1824      	adds	r4, r4, r0
    53f8:	0017      	movs	r7, r2
    53fa:	0223      	lsls	r3, r4, #8
    53fc:	d400      	bmi.n	5400 <__aeabi_dsub+0x448>
    53fe:	e6fd      	b.n	51fc <__aeabi_dsub+0x244>
    5400:	4b77      	ldr	r3, [pc, #476]	; (55e0 <__aeabi_dsub+0x628>)
    5402:	4666      	mov	r6, ip
    5404:	401c      	ands	r4, r3
    5406:	e65d      	b.n	50c4 <__aeabi_dsub+0x10c>
    5408:	0025      	movs	r5, r4
    540a:	4650      	mov	r0, sl
    540c:	4305      	orrs	r5, r0
    540e:	2e00      	cmp	r6, #0
    5410:	d1cf      	bne.n	53b2 <__aeabi_dsub+0x3fa>
    5412:	2d00      	cmp	r5, #0
    5414:	d14f      	bne.n	54b6 <__aeabi_dsub+0x4fe>
    5416:	000c      	movs	r4, r1
    5418:	4314      	orrs	r4, r2
    541a:	d100      	bne.n	541e <__aeabi_dsub+0x466>
    541c:	e0a0      	b.n	5560 <__aeabi_dsub+0x5a8>
    541e:	000c      	movs	r4, r1
    5420:	0017      	movs	r7, r2
    5422:	4698      	mov	r8, r3
    5424:	e64e      	b.n	50c4 <__aeabi_dsub+0x10c>
    5426:	4666      	mov	r6, ip
    5428:	2400      	movs	r4, #0
    542a:	2700      	movs	r7, #0
    542c:	e685      	b.n	513a <__aeabi_dsub+0x182>
    542e:	001f      	movs	r7, r3
    5430:	0008      	movs	r0, r1
    5432:	3f20      	subs	r7, #32
    5434:	40f8      	lsrs	r0, r7
    5436:	0007      	movs	r7, r0
    5438:	2b20      	cmp	r3, #32
    543a:	d100      	bne.n	543e <__aeabi_dsub+0x486>
    543c:	e08e      	b.n	555c <__aeabi_dsub+0x5a4>
    543e:	2040      	movs	r0, #64	; 0x40
    5440:	1ac3      	subs	r3, r0, r3
    5442:	4099      	lsls	r1, r3
    5444:	430a      	orrs	r2, r1
    5446:	1e51      	subs	r1, r2, #1
    5448:	418a      	sbcs	r2, r1
    544a:	2100      	movs	r1, #0
    544c:	4317      	orrs	r7, r2
    544e:	e692      	b.n	5176 <__aeabi_dsub+0x1be>
    5450:	2e00      	cmp	r6, #0
    5452:	d114      	bne.n	547e <__aeabi_dsub+0x4c6>
    5454:	0026      	movs	r6, r4
    5456:	4650      	mov	r0, sl
    5458:	4306      	orrs	r6, r0
    545a:	d062      	beq.n	5522 <__aeabi_dsub+0x56a>
    545c:	43db      	mvns	r3, r3
    545e:	2b00      	cmp	r3, #0
    5460:	d15c      	bne.n	551c <__aeabi_dsub+0x564>
    5462:	1887      	adds	r7, r0, r2
    5464:	4297      	cmp	r7, r2
    5466:	4192      	sbcs	r2, r2
    5468:	1864      	adds	r4, r4, r1
    546a:	4252      	negs	r2, r2
    546c:	18a4      	adds	r4, r4, r2
    546e:	4666      	mov	r6, ip
    5470:	e687      	b.n	5182 <__aeabi_dsub+0x1ca>
    5472:	4650      	mov	r0, sl
    5474:	4320      	orrs	r0, r4
    5476:	1e44      	subs	r4, r0, #1
    5478:	41a0      	sbcs	r0, r4
    547a:	2400      	movs	r4, #0
    547c:	e760      	b.n	5340 <__aeabi_dsub+0x388>
    547e:	4e57      	ldr	r6, [pc, #348]	; (55dc <__aeabi_dsub+0x624>)
    5480:	45b4      	cmp	ip, r6
    5482:	d04e      	beq.n	5522 <__aeabi_dsub+0x56a>
    5484:	2680      	movs	r6, #128	; 0x80
    5486:	0436      	lsls	r6, r6, #16
    5488:	425b      	negs	r3, r3
    548a:	4334      	orrs	r4, r6
    548c:	2b38      	cmp	r3, #56	; 0x38
    548e:	dd00      	ble.n	5492 <__aeabi_dsub+0x4da>
    5490:	e07f      	b.n	5592 <__aeabi_dsub+0x5da>
    5492:	2b1f      	cmp	r3, #31
    5494:	dd00      	ble.n	5498 <__aeabi_dsub+0x4e0>
    5496:	e08b      	b.n	55b0 <__aeabi_dsub+0x5f8>
    5498:	2620      	movs	r6, #32
    549a:	0027      	movs	r7, r4
    549c:	4650      	mov	r0, sl
    549e:	1af6      	subs	r6, r6, r3
    54a0:	40b7      	lsls	r7, r6
    54a2:	40d8      	lsrs	r0, r3
    54a4:	4307      	orrs	r7, r0
    54a6:	4650      	mov	r0, sl
    54a8:	40b0      	lsls	r0, r6
    54aa:	1e46      	subs	r6, r0, #1
    54ac:	41b0      	sbcs	r0, r6
    54ae:	4307      	orrs	r7, r0
    54b0:	40dc      	lsrs	r4, r3
    54b2:	18bf      	adds	r7, r7, r2
    54b4:	e7d6      	b.n	5464 <__aeabi_dsub+0x4ac>
    54b6:	000d      	movs	r5, r1
    54b8:	4315      	orrs	r5, r2
    54ba:	d100      	bne.n	54be <__aeabi_dsub+0x506>
    54bc:	e602      	b.n	50c4 <__aeabi_dsub+0x10c>
    54be:	4650      	mov	r0, sl
    54c0:	1a80      	subs	r0, r0, r2
    54c2:	4582      	cmp	sl, r0
    54c4:	41bf      	sbcs	r7, r7
    54c6:	1a65      	subs	r5, r4, r1
    54c8:	427f      	negs	r7, r7
    54ca:	1bed      	subs	r5, r5, r7
    54cc:	4684      	mov	ip, r0
    54ce:	0228      	lsls	r0, r5, #8
    54d0:	d400      	bmi.n	54d4 <__aeabi_dsub+0x51c>
    54d2:	e68d      	b.n	51f0 <__aeabi_dsub+0x238>
    54d4:	4650      	mov	r0, sl
    54d6:	1a17      	subs	r7, r2, r0
    54d8:	42ba      	cmp	r2, r7
    54da:	4192      	sbcs	r2, r2
    54dc:	1b0c      	subs	r4, r1, r4
    54de:	4252      	negs	r2, r2
    54e0:	1aa4      	subs	r4, r4, r2
    54e2:	4698      	mov	r8, r3
    54e4:	e5ee      	b.n	50c4 <__aeabi_dsub+0x10c>
    54e6:	000d      	movs	r5, r1
    54e8:	4315      	orrs	r5, r2
    54ea:	d100      	bne.n	54ee <__aeabi_dsub+0x536>
    54ec:	e76b      	b.n	53c6 <__aeabi_dsub+0x40e>
    54ee:	4650      	mov	r0, sl
    54f0:	0767      	lsls	r7, r4, #29
    54f2:	08c0      	lsrs	r0, r0, #3
    54f4:	4307      	orrs	r7, r0
    54f6:	2080      	movs	r0, #128	; 0x80
    54f8:	08e4      	lsrs	r4, r4, #3
    54fa:	0300      	lsls	r0, r0, #12
    54fc:	4204      	tst	r4, r0
    54fe:	d007      	beq.n	5510 <__aeabi_dsub+0x558>
    5500:	08cd      	lsrs	r5, r1, #3
    5502:	4205      	tst	r5, r0
    5504:	d104      	bne.n	5510 <__aeabi_dsub+0x558>
    5506:	002c      	movs	r4, r5
    5508:	4698      	mov	r8, r3
    550a:	08d7      	lsrs	r7, r2, #3
    550c:	0749      	lsls	r1, r1, #29
    550e:	430f      	orrs	r7, r1
    5510:	0f7b      	lsrs	r3, r7, #29
    5512:	00e4      	lsls	r4, r4, #3
    5514:	431c      	orrs	r4, r3
    5516:	00ff      	lsls	r7, r7, #3
    5518:	4e30      	ldr	r6, [pc, #192]	; (55dc <__aeabi_dsub+0x624>)
    551a:	e5d3      	b.n	50c4 <__aeabi_dsub+0x10c>
    551c:	4e2f      	ldr	r6, [pc, #188]	; (55dc <__aeabi_dsub+0x624>)
    551e:	45b4      	cmp	ip, r6
    5520:	d1b4      	bne.n	548c <__aeabi_dsub+0x4d4>
    5522:	000c      	movs	r4, r1
    5524:	0017      	movs	r7, r2
    5526:	4666      	mov	r6, ip
    5528:	e5cc      	b.n	50c4 <__aeabi_dsub+0x10c>
    552a:	2700      	movs	r7, #0
    552c:	2400      	movs	r4, #0
    552e:	e5e8      	b.n	5102 <__aeabi_dsub+0x14a>
    5530:	2b00      	cmp	r3, #0
    5532:	d039      	beq.n	55a8 <__aeabi_dsub+0x5f0>
    5534:	000b      	movs	r3, r1
    5536:	4313      	orrs	r3, r2
    5538:	d100      	bne.n	553c <__aeabi_dsub+0x584>
    553a:	e744      	b.n	53c6 <__aeabi_dsub+0x40e>
    553c:	08c0      	lsrs	r0, r0, #3
    553e:	0767      	lsls	r7, r4, #29
    5540:	4307      	orrs	r7, r0
    5542:	2080      	movs	r0, #128	; 0x80
    5544:	08e4      	lsrs	r4, r4, #3
    5546:	0300      	lsls	r0, r0, #12
    5548:	4204      	tst	r4, r0
    554a:	d0e1      	beq.n	5510 <__aeabi_dsub+0x558>
    554c:	08cb      	lsrs	r3, r1, #3
    554e:	4203      	tst	r3, r0
    5550:	d1de      	bne.n	5510 <__aeabi_dsub+0x558>
    5552:	08d7      	lsrs	r7, r2, #3
    5554:	0749      	lsls	r1, r1, #29
    5556:	430f      	orrs	r7, r1
    5558:	001c      	movs	r4, r3
    555a:	e7d9      	b.n	5510 <__aeabi_dsub+0x558>
    555c:	2100      	movs	r1, #0
    555e:	e771      	b.n	5444 <__aeabi_dsub+0x48c>
    5560:	2500      	movs	r5, #0
    5562:	2700      	movs	r7, #0
    5564:	e5e9      	b.n	513a <__aeabi_dsub+0x182>
    5566:	002e      	movs	r6, r5
    5568:	0027      	movs	r7, r4
    556a:	3e20      	subs	r6, #32
    556c:	40f7      	lsrs	r7, r6
    556e:	2d20      	cmp	r5, #32
    5570:	d02f      	beq.n	55d2 <__aeabi_dsub+0x61a>
    5572:	2640      	movs	r6, #64	; 0x40
    5574:	1b75      	subs	r5, r6, r5
    5576:	40ac      	lsls	r4, r5
    5578:	4650      	mov	r0, sl
    557a:	4320      	orrs	r0, r4
    557c:	1e44      	subs	r4, r0, #1
    557e:	41a0      	sbcs	r0, r4
    5580:	2400      	movs	r4, #0
    5582:	4338      	orrs	r0, r7
    5584:	e6dc      	b.n	5340 <__aeabi_dsub+0x388>
    5586:	2480      	movs	r4, #128	; 0x80
    5588:	2500      	movs	r5, #0
    558a:	0324      	lsls	r4, r4, #12
    558c:	4e13      	ldr	r6, [pc, #76]	; (55dc <__aeabi_dsub+0x624>)
    558e:	2700      	movs	r7, #0
    5590:	e5d3      	b.n	513a <__aeabi_dsub+0x182>
    5592:	4650      	mov	r0, sl
    5594:	4320      	orrs	r0, r4
    5596:	0007      	movs	r7, r0
    5598:	1e78      	subs	r0, r7, #1
    559a:	4187      	sbcs	r7, r0
    559c:	2400      	movs	r4, #0
    559e:	18bf      	adds	r7, r7, r2
    55a0:	e760      	b.n	5464 <__aeabi_dsub+0x4ac>
    55a2:	000c      	movs	r4, r1
    55a4:	0017      	movs	r7, r2
    55a6:	e58d      	b.n	50c4 <__aeabi_dsub+0x10c>
    55a8:	000c      	movs	r4, r1
    55aa:	0017      	movs	r7, r2
    55ac:	4e0b      	ldr	r6, [pc, #44]	; (55dc <__aeabi_dsub+0x624>)
    55ae:	e589      	b.n	50c4 <__aeabi_dsub+0x10c>
    55b0:	001e      	movs	r6, r3
    55b2:	0027      	movs	r7, r4
    55b4:	3e20      	subs	r6, #32
    55b6:	40f7      	lsrs	r7, r6
    55b8:	2b20      	cmp	r3, #32
    55ba:	d00c      	beq.n	55d6 <__aeabi_dsub+0x61e>
    55bc:	2640      	movs	r6, #64	; 0x40
    55be:	1af3      	subs	r3, r6, r3
    55c0:	409c      	lsls	r4, r3
    55c2:	4650      	mov	r0, sl
    55c4:	4320      	orrs	r0, r4
    55c6:	1e44      	subs	r4, r0, #1
    55c8:	41a0      	sbcs	r0, r4
    55ca:	4307      	orrs	r7, r0
    55cc:	2400      	movs	r4, #0
    55ce:	18bf      	adds	r7, r7, r2
    55d0:	e748      	b.n	5464 <__aeabi_dsub+0x4ac>
    55d2:	2400      	movs	r4, #0
    55d4:	e7d0      	b.n	5578 <__aeabi_dsub+0x5c0>
    55d6:	2400      	movs	r4, #0
    55d8:	e7f3      	b.n	55c2 <__aeabi_dsub+0x60a>
    55da:	46c0      	nop			; (mov r8, r8)
    55dc:	000007ff 	.word	0x000007ff
    55e0:	ff7fffff 	.word	0xff7fffff

000055e4 <__aeabi_d2iz>:
    55e4:	b530      	push	{r4, r5, lr}
    55e6:	4d13      	ldr	r5, [pc, #76]	; (5634 <__aeabi_d2iz+0x50>)
    55e8:	030a      	lsls	r2, r1, #12
    55ea:	004b      	lsls	r3, r1, #1
    55ec:	0b12      	lsrs	r2, r2, #12
    55ee:	0d5b      	lsrs	r3, r3, #21
    55f0:	0fc9      	lsrs	r1, r1, #31
    55f2:	2400      	movs	r4, #0
    55f4:	42ab      	cmp	r3, r5
    55f6:	dd10      	ble.n	561a <__aeabi_d2iz+0x36>
    55f8:	4c0f      	ldr	r4, [pc, #60]	; (5638 <__aeabi_d2iz+0x54>)
    55fa:	42a3      	cmp	r3, r4
    55fc:	dc0f      	bgt.n	561e <__aeabi_d2iz+0x3a>
    55fe:	2480      	movs	r4, #128	; 0x80
    5600:	4d0e      	ldr	r5, [pc, #56]	; (563c <__aeabi_d2iz+0x58>)
    5602:	0364      	lsls	r4, r4, #13
    5604:	4322      	orrs	r2, r4
    5606:	1aed      	subs	r5, r5, r3
    5608:	2d1f      	cmp	r5, #31
    560a:	dd0b      	ble.n	5624 <__aeabi_d2iz+0x40>
    560c:	480c      	ldr	r0, [pc, #48]	; (5640 <__aeabi_d2iz+0x5c>)
    560e:	1ac3      	subs	r3, r0, r3
    5610:	40da      	lsrs	r2, r3
    5612:	4254      	negs	r4, r2
    5614:	2900      	cmp	r1, #0
    5616:	d100      	bne.n	561a <__aeabi_d2iz+0x36>
    5618:	0014      	movs	r4, r2
    561a:	0020      	movs	r0, r4
    561c:	bd30      	pop	{r4, r5, pc}
    561e:	4b09      	ldr	r3, [pc, #36]	; (5644 <__aeabi_d2iz+0x60>)
    5620:	18cc      	adds	r4, r1, r3
    5622:	e7fa      	b.n	561a <__aeabi_d2iz+0x36>
    5624:	4c08      	ldr	r4, [pc, #32]	; (5648 <__aeabi_d2iz+0x64>)
    5626:	40e8      	lsrs	r0, r5
    5628:	46a4      	mov	ip, r4
    562a:	4463      	add	r3, ip
    562c:	409a      	lsls	r2, r3
    562e:	4302      	orrs	r2, r0
    5630:	e7ef      	b.n	5612 <__aeabi_d2iz+0x2e>
    5632:	46c0      	nop			; (mov r8, r8)
    5634:	000003fe 	.word	0x000003fe
    5638:	0000041d 	.word	0x0000041d
    563c:	00000433 	.word	0x00000433
    5640:	00000413 	.word	0x00000413
    5644:	7fffffff 	.word	0x7fffffff
    5648:	fffffbed 	.word	0xfffffbed

0000564c <__aeabi_ui2d>:
    564c:	b510      	push	{r4, lr}
    564e:	1e04      	subs	r4, r0, #0
    5650:	d028      	beq.n	56a4 <__aeabi_ui2d+0x58>
    5652:	f000 f833 	bl	56bc <__clzsi2>
    5656:	4b15      	ldr	r3, [pc, #84]	; (56ac <__aeabi_ui2d+0x60>)
    5658:	4a15      	ldr	r2, [pc, #84]	; (56b0 <__aeabi_ui2d+0x64>)
    565a:	1a1b      	subs	r3, r3, r0
    565c:	1ad2      	subs	r2, r2, r3
    565e:	2a1f      	cmp	r2, #31
    5660:	dd15      	ble.n	568e <__aeabi_ui2d+0x42>
    5662:	4a14      	ldr	r2, [pc, #80]	; (56b4 <__aeabi_ui2d+0x68>)
    5664:	1ad2      	subs	r2, r2, r3
    5666:	4094      	lsls	r4, r2
    5668:	2200      	movs	r2, #0
    566a:	0324      	lsls	r4, r4, #12
    566c:	055b      	lsls	r3, r3, #21
    566e:	0b24      	lsrs	r4, r4, #12
    5670:	0d5b      	lsrs	r3, r3, #21
    5672:	2100      	movs	r1, #0
    5674:	0010      	movs	r0, r2
    5676:	0324      	lsls	r4, r4, #12
    5678:	0d0a      	lsrs	r2, r1, #20
    567a:	0b24      	lsrs	r4, r4, #12
    567c:	0512      	lsls	r2, r2, #20
    567e:	4322      	orrs	r2, r4
    5680:	4c0d      	ldr	r4, [pc, #52]	; (56b8 <__aeabi_ui2d+0x6c>)
    5682:	051b      	lsls	r3, r3, #20
    5684:	4022      	ands	r2, r4
    5686:	4313      	orrs	r3, r2
    5688:	005b      	lsls	r3, r3, #1
    568a:	0859      	lsrs	r1, r3, #1
    568c:	bd10      	pop	{r4, pc}
    568e:	0021      	movs	r1, r4
    5690:	4091      	lsls	r1, r2
    5692:	000a      	movs	r2, r1
    5694:	210b      	movs	r1, #11
    5696:	1a08      	subs	r0, r1, r0
    5698:	40c4      	lsrs	r4, r0
    569a:	055b      	lsls	r3, r3, #21
    569c:	0324      	lsls	r4, r4, #12
    569e:	0b24      	lsrs	r4, r4, #12
    56a0:	0d5b      	lsrs	r3, r3, #21
    56a2:	e7e6      	b.n	5672 <__aeabi_ui2d+0x26>
    56a4:	2300      	movs	r3, #0
    56a6:	2400      	movs	r4, #0
    56a8:	2200      	movs	r2, #0
    56aa:	e7e2      	b.n	5672 <__aeabi_ui2d+0x26>
    56ac:	0000041e 	.word	0x0000041e
    56b0:	00000433 	.word	0x00000433
    56b4:	00000413 	.word	0x00000413
    56b8:	800fffff 	.word	0x800fffff

000056bc <__clzsi2>:
    56bc:	211c      	movs	r1, #28
    56be:	2301      	movs	r3, #1
    56c0:	041b      	lsls	r3, r3, #16
    56c2:	4298      	cmp	r0, r3
    56c4:	d301      	bcc.n	56ca <__clzsi2+0xe>
    56c6:	0c00      	lsrs	r0, r0, #16
    56c8:	3910      	subs	r1, #16
    56ca:	0a1b      	lsrs	r3, r3, #8
    56cc:	4298      	cmp	r0, r3
    56ce:	d301      	bcc.n	56d4 <__clzsi2+0x18>
    56d0:	0a00      	lsrs	r0, r0, #8
    56d2:	3908      	subs	r1, #8
    56d4:	091b      	lsrs	r3, r3, #4
    56d6:	4298      	cmp	r0, r3
    56d8:	d301      	bcc.n	56de <__clzsi2+0x22>
    56da:	0900      	lsrs	r0, r0, #4
    56dc:	3904      	subs	r1, #4
    56de:	a202      	add	r2, pc, #8	; (adr r2, 56e8 <__clzsi2+0x2c>)
    56e0:	5c10      	ldrb	r0, [r2, r0]
    56e2:	1840      	adds	r0, r0, r1
    56e4:	4770      	bx	lr
    56e6:	46c0      	nop			; (mov r8, r8)
    56e8:	02020304 	.word	0x02020304
    56ec:	01010101 	.word	0x01010101
	...

000056f8 <__libc_init_array>:
    56f8:	b570      	push	{r4, r5, r6, lr}
    56fa:	2600      	movs	r6, #0
    56fc:	4d0c      	ldr	r5, [pc, #48]	; (5730 <__libc_init_array+0x38>)
    56fe:	4c0d      	ldr	r4, [pc, #52]	; (5734 <__libc_init_array+0x3c>)
    5700:	1b64      	subs	r4, r4, r5
    5702:	10a4      	asrs	r4, r4, #2
    5704:	42a6      	cmp	r6, r4
    5706:	d109      	bne.n	571c <__libc_init_array+0x24>
    5708:	2600      	movs	r6, #0
    570a:	f000 fa01 	bl	5b10 <_init>
    570e:	4d0a      	ldr	r5, [pc, #40]	; (5738 <__libc_init_array+0x40>)
    5710:	4c0a      	ldr	r4, [pc, #40]	; (573c <__libc_init_array+0x44>)
    5712:	1b64      	subs	r4, r4, r5
    5714:	10a4      	asrs	r4, r4, #2
    5716:	42a6      	cmp	r6, r4
    5718:	d105      	bne.n	5726 <__libc_init_array+0x2e>
    571a:	bd70      	pop	{r4, r5, r6, pc}
    571c:	00b3      	lsls	r3, r6, #2
    571e:	58eb      	ldr	r3, [r5, r3]
    5720:	4798      	blx	r3
    5722:	3601      	adds	r6, #1
    5724:	e7ee      	b.n	5704 <__libc_init_array+0xc>
    5726:	00b3      	lsls	r3, r6, #2
    5728:	58eb      	ldr	r3, [r5, r3]
    572a:	4798      	blx	r3
    572c:	3601      	adds	r6, #1
    572e:	e7f2      	b.n	5716 <__libc_init_array+0x1e>
    5730:	00005b1c 	.word	0x00005b1c
    5734:	00005b1c 	.word	0x00005b1c
    5738:	00005b1c 	.word	0x00005b1c
    573c:	00005b20 	.word	0x00005b20

00005740 <malloc>:
    5740:	b510      	push	{r4, lr}
    5742:	4b03      	ldr	r3, [pc, #12]	; (5750 <malloc+0x10>)
    5744:	0001      	movs	r1, r0
    5746:	6818      	ldr	r0, [r3, #0]
    5748:	f000 f80e 	bl	5768 <_malloc_r>
    574c:	bd10      	pop	{r4, pc}
    574e:	46c0      	nop			; (mov r8, r8)
    5750:	20000058 	.word	0x20000058

00005754 <memcpy>:
    5754:	2300      	movs	r3, #0
    5756:	b510      	push	{r4, lr}
    5758:	429a      	cmp	r2, r3
    575a:	d100      	bne.n	575e <memcpy+0xa>
    575c:	bd10      	pop	{r4, pc}
    575e:	5ccc      	ldrb	r4, [r1, r3]
    5760:	54c4      	strb	r4, [r0, r3]
    5762:	3301      	adds	r3, #1
    5764:	e7f8      	b.n	5758 <memcpy+0x4>
	...

00005768 <_malloc_r>:
    5768:	2303      	movs	r3, #3
    576a:	b570      	push	{r4, r5, r6, lr}
    576c:	1ccd      	adds	r5, r1, #3
    576e:	439d      	bics	r5, r3
    5770:	3508      	adds	r5, #8
    5772:	0006      	movs	r6, r0
    5774:	2d0c      	cmp	r5, #12
    5776:	d21e      	bcs.n	57b6 <_malloc_r+0x4e>
    5778:	250c      	movs	r5, #12
    577a:	42a9      	cmp	r1, r5
    577c:	d81d      	bhi.n	57ba <_malloc_r+0x52>
    577e:	0030      	movs	r0, r6
    5780:	f000 f862 	bl	5848 <__malloc_lock>
    5784:	4a25      	ldr	r2, [pc, #148]	; (581c <_malloc_r+0xb4>)
    5786:	6814      	ldr	r4, [r2, #0]
    5788:	0021      	movs	r1, r4
    578a:	2900      	cmp	r1, #0
    578c:	d119      	bne.n	57c2 <_malloc_r+0x5a>
    578e:	4c24      	ldr	r4, [pc, #144]	; (5820 <_malloc_r+0xb8>)
    5790:	6823      	ldr	r3, [r4, #0]
    5792:	2b00      	cmp	r3, #0
    5794:	d103      	bne.n	579e <_malloc_r+0x36>
    5796:	0030      	movs	r0, r6
    5798:	f000 f844 	bl	5824 <_sbrk_r>
    579c:	6020      	str	r0, [r4, #0]
    579e:	0029      	movs	r1, r5
    57a0:	0030      	movs	r0, r6
    57a2:	f000 f83f 	bl	5824 <_sbrk_r>
    57a6:	1c43      	adds	r3, r0, #1
    57a8:	d12c      	bne.n	5804 <_malloc_r+0x9c>
    57aa:	230c      	movs	r3, #12
    57ac:	0030      	movs	r0, r6
    57ae:	6033      	str	r3, [r6, #0]
    57b0:	f000 f84b 	bl	584a <__malloc_unlock>
    57b4:	e003      	b.n	57be <_malloc_r+0x56>
    57b6:	2d00      	cmp	r5, #0
    57b8:	dadf      	bge.n	577a <_malloc_r+0x12>
    57ba:	230c      	movs	r3, #12
    57bc:	6033      	str	r3, [r6, #0]
    57be:	2000      	movs	r0, #0
    57c0:	bd70      	pop	{r4, r5, r6, pc}
    57c2:	680b      	ldr	r3, [r1, #0]
    57c4:	1b5b      	subs	r3, r3, r5
    57c6:	d41a      	bmi.n	57fe <_malloc_r+0x96>
    57c8:	2b0b      	cmp	r3, #11
    57ca:	d903      	bls.n	57d4 <_malloc_r+0x6c>
    57cc:	600b      	str	r3, [r1, #0]
    57ce:	18cc      	adds	r4, r1, r3
    57d0:	6025      	str	r5, [r4, #0]
    57d2:	e003      	b.n	57dc <_malloc_r+0x74>
    57d4:	428c      	cmp	r4, r1
    57d6:	d10e      	bne.n	57f6 <_malloc_r+0x8e>
    57d8:	6863      	ldr	r3, [r4, #4]
    57da:	6013      	str	r3, [r2, #0]
    57dc:	0030      	movs	r0, r6
    57de:	f000 f834 	bl	584a <__malloc_unlock>
    57e2:	0020      	movs	r0, r4
    57e4:	2207      	movs	r2, #7
    57e6:	300b      	adds	r0, #11
    57e8:	1d23      	adds	r3, r4, #4
    57ea:	4390      	bics	r0, r2
    57ec:	1ac3      	subs	r3, r0, r3
    57ee:	d0e7      	beq.n	57c0 <_malloc_r+0x58>
    57f0:	425a      	negs	r2, r3
    57f2:	50e2      	str	r2, [r4, r3]
    57f4:	e7e4      	b.n	57c0 <_malloc_r+0x58>
    57f6:	684b      	ldr	r3, [r1, #4]
    57f8:	6063      	str	r3, [r4, #4]
    57fa:	000c      	movs	r4, r1
    57fc:	e7ee      	b.n	57dc <_malloc_r+0x74>
    57fe:	000c      	movs	r4, r1
    5800:	6849      	ldr	r1, [r1, #4]
    5802:	e7c2      	b.n	578a <_malloc_r+0x22>
    5804:	2303      	movs	r3, #3
    5806:	1cc4      	adds	r4, r0, #3
    5808:	439c      	bics	r4, r3
    580a:	42a0      	cmp	r0, r4
    580c:	d0e0      	beq.n	57d0 <_malloc_r+0x68>
    580e:	1a21      	subs	r1, r4, r0
    5810:	0030      	movs	r0, r6
    5812:	f000 f807 	bl	5824 <_sbrk_r>
    5816:	1c43      	adds	r3, r0, #1
    5818:	d1da      	bne.n	57d0 <_malloc_r+0x68>
    581a:	e7c6      	b.n	57aa <_malloc_r+0x42>
    581c:	20000e18 	.word	0x20000e18
    5820:	20000e1c 	.word	0x20000e1c

00005824 <_sbrk_r>:
    5824:	2300      	movs	r3, #0
    5826:	b570      	push	{r4, r5, r6, lr}
    5828:	4c06      	ldr	r4, [pc, #24]	; (5844 <_sbrk_r+0x20>)
    582a:	0005      	movs	r5, r0
    582c:	0008      	movs	r0, r1
    582e:	6023      	str	r3, [r4, #0]
    5830:	f7fe f9f6 	bl	3c20 <_sbrk>
    5834:	1c43      	adds	r3, r0, #1
    5836:	d103      	bne.n	5840 <_sbrk_r+0x1c>
    5838:	6823      	ldr	r3, [r4, #0]
    583a:	2b00      	cmp	r3, #0
    583c:	d000      	beq.n	5840 <_sbrk_r+0x1c>
    583e:	602b      	str	r3, [r5, #0]
    5840:	bd70      	pop	{r4, r5, r6, pc}
    5842:	46c0      	nop			; (mov r8, r8)
    5844:	20001268 	.word	0x20001268

00005848 <__malloc_lock>:
    5848:	4770      	bx	lr

0000584a <__malloc_unlock>:
    584a:	4770      	bx	lr

0000584c <_tcc_intflag>:
    584c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    585c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    586c:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    587c:	2c00 4200 3000 4200 3400 4200 3800 4200     .,.B.0.B.4.B.8.B
    588c:	3c00 4200 0800 1000 2000 4000 8000 0000     .<.B..... .@....
    589c:	1166 0000 10e6 0000 1172 0000 11f4 0000     f.......r.......
    58ac:	1278 0000 12fe 0000 1602 0000 15b6 0000     x...............
    58bc:	1604 0000 1652 0000 16a0 0000 16e6 0000     ....R...........
    58cc:	1792 0000 175e 0000 1794 0000 17ca 0000     ....^...........
    58dc:	1800 0000 1836 0000                         ....6...

000058e4 <tc_interrupt_vectors.13123>:
    58e4:	1312 1514 0016 0000 1e46 0000 2092 0000     ........F.... ..
    58f4:	2092 0000 2092 0000 2092 0000 2092 0000     . ... ... ... ..
    5904:	2092 0000 2092 0000 2092 0000 2092 0000     . ... ... ... ..
    5914:	2092 0000 2092 0000 2092 0000 2092 0000     . ... ... ... ..
    5924:	2092 0000 2092 0000 1e2e 0000 2092 0000     . ... ....... ..
    5934:	2092 0000 2092 0000 2092 0000 2092 0000     . ... ... ... ..
    5944:	2092 0000 2092 0000 2092 0000 2092 0000     . ... ... ... ..
    5954:	2092 0000 2092 0000 2092 0000 2092 0000     . ... ... ... ..
    5964:	2092 0000 2092 0000 1e3e 0000 2092 0000     . ... ..>.... ..
    5974:	2092 0000 2092 0000 2092 0000 2092 0000     . ... ... ... ..
    5984:	2092 0000 2092 0000 2092 0000 2092 0000     . ... ... ... ..
    5994:	2092 0000 2092 0000 2092 0000 2092 0000     . ... ... ... ..
    59a4:	2092 0000 2092 0000 1e36 0000 1e4e 0000     . ... ..6...N...
    59b4:	1e16 0000 1e26 0000 1e1e 0000 0002 0000     ....&...........
    59c4:	0003 0000 0028 0000 0029 0000 0004 0000     ....(...).......
    59d4:	0005 0000 0006 0000 0007 0000 0020 0000     ............ ...
    59e4:	0021 0000 0022 0000 0023 0000 0024 0000     !..."...#...$...
    59f4:	0025 0000 0026 0000 0027 0000 0008 0000     %...&...'.......
    5a04:	0009 0000 000a 0000 000b 0000 0800 4200     ...............B
    5a14:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    5a24:	1c00 4200 2ece 0000 2e8a 0000 2eb6 0000     ...B............
    5a34:	2eaa 0000 2ec2 0000 2e80 0000               ............

00005a40 <inputAnalogChannles>:
    5a40:	0c00 0013                                   ....

00005a44 <outputDetectAnalogChannles>:
    5a44:	0504 0806 33ce 0000 33ca 0000 33ca 0000     .....3...3...3..
    5a54:	342c 0000 342c 0000 33e2 0000 33d4 0000     ,4..,4...3...3..
    5a64:	33e8 0000 341a 0000 35b0 0000 3590 0000     .3...4...5...5..
    5a74:	3590 0000 361c 0000 35a2 0000 35be 0000     .5...6...5...5..
    5a84:	3594 0000 35cc 0000 360c 0000 4648 0000     .5...5...6..HF..
    5a94:	462a 0000 45e4 0000 4502 0000 45e4 0000     *F...E...E...E..
    5aa4:	461c 0000 45e4 0000 4502 0000 462a 0000     .F...E...E..*F..
    5ab4:	462a 0000 461c 0000 4502 0000 44fa 0000     *F...F...E...D..
    5ac4:	44fa 0000 44fa 0000 4860 0000 4ca8 0000     .D...D..`H...L..
    5ad4:	4b68 0000 4b68 0000 4b64 0000 4c80 0000     hK..hK..dK...L..
    5ae4:	4c80 0000 4c72 0000 4b64 0000 4c80 0000     .L..rL..dK...L..
    5af4:	4c72 0000 4c80 0000 4b64 0000 4c88 0000     rL...L..dK...L..
    5b04:	4c88 0000 4c88 0000 4e8c 0000               .L...L...N..

00005b10 <_init>:
    5b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b12:	46c0      	nop			; (mov r8, r8)
    5b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5b16:	bc08      	pop	{r3}
    5b18:	469e      	mov	lr, r3
    5b1a:	4770      	bx	lr

00005b1c <__init_array_start>:
    5b1c:	000000dd 	.word	0x000000dd

00005b20 <_fini>:
    5b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b22:	46c0      	nop			; (mov r8, r8)
    5b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5b26:	bc08      	pop	{r3}
    5b28:	469e      	mov	lr, r3
    5b2a:	4770      	bx	lr

00005b2c <__fini_array_start>:
    5b2c:	000000b5 	.word	0x000000b5
